/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'btripOpen';
  @version = '2022-05-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model TakeAccessTokenRequest {
  appKey?: string(name='app_key', position='Query'),
  appSecret?: string(name='app_secret', position='Query'),
}

model TakeAccessTokenResponseBody = {
  code?: string(name='code'),
  data?: {
    accessToken?: string(name='access_token'),
    expire?: long(name='expire'),
  }(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: string(name='success'),
}

model TakeAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: TakeAccessTokenResponseBody(name='body'),
}

async function takeAccessToken(request: TakeAccessTokenRequest): TakeAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TakeAccessToken', 'GET', '/btrip/open/access-token/take', 'json', false, 'json', request);
}

