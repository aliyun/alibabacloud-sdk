/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EduInterpreting';
  @version = '2024-08-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RecognizeAudioRequest {
  audioFileUrl: string(name='AudioFileUrl', description='This parameter is required.', example='http://xx.com/abc.mp3', position='Body'),
  callbackUrl?: string(name='CallbackUrl', example='https://abc.edu.org.cn/en/callback', position='Body'),
  enableCallBack: boolean(name='EnableCallBack', description='This parameter is required.', example='true', position='Query'),
  outerBizId: string(name='OuterBizId', description='This parameter is required.', example='433c1361-0f6e-48fc-ad51', position='Body'),
}

model RecognizeAudioResponseBody = {
  itemList?: [ 
    {
      beginTime?: string(name='BeginTime', example='0'),
      endTime?: string(name='EndTime', example='1230'),
      text?: string(name='Text', example='How are you'),
    }
  ](name='ItemList'),
  requestId?: string(name='RequestId', example='38CD0881-BC7B-5ADB-A3EB-FF813927D09A'),
  taskId?: string(name='TaskId', example='3ab5c082-2c0e-4f39-b12f-057dd5e373ff'),
}

model RecognizeAudioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeAudioResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecognizeAudio  RecognizeAudioRequest
  * @return RecognizeAudioResponse
 */
async function recognizeAudio(request: RecognizeAudioRequest): RecognizeAudioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeAudio', 'POST', '/', 'json', true, 'form', request);
}

model SubmitEvaluationTaskRequest {
  audioUrl: string(name='AudioUrl', description='This parameter is required.', example='http://xx.com/abc.mp3', position='Body'),
  callbackUrl: string(name='CallbackUrl', description='This parameter is required.', example='https://abc.edu.org.cn/en/callback', position='Body'),
  materialText: string(name='MaterialText', description='This parameter is required.', example='As flame of fire we gather, as skyful of stars we scatter.', position='Body'),
  outerBizId: string(name='OuterBizId', description='This parameter is required.', example='433c1361-0f6e-48fc-ad51', position='Body'),
  suggestedAnswer: string(name='SuggestedAnswer', description='This parameter is required.', position='Body'),
  text: string(name='Text', description='This parameter is required.', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='EN_TO_ZH', position='Body'),
}

model SubmitEvaluationTaskResponseBody = {
  requestId?: string(name='RequestId', example='BA3BB7D0-E098-5F0C-AF25-0BEFAEE7D1F0'),
  taskId?: string(name='TaskId', example='8fb75c55-98b5-4b82-ae67-5dbb9a0646cc'),
}

model SubmitEvaluationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitEvaluationTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitEvaluationTask  SubmitEvaluationTaskRequest
  * @return SubmitEvaluationTaskResponse
 */
async function submitEvaluationTask(request: SubmitEvaluationTaskRequest): SubmitEvaluationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitEvaluationTask', 'POST', '/', 'json', true, 'form', request);
}

