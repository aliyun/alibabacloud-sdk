/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    cn-shanghai = 'scsp-vpc.cn-shanghai.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('scsp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetUserTokenRequest {
  instanceId?: string(name='InstanceId', description='实例id'),
  userId?: string(name='UserId', description='用户id'),
  nick?: string(name='Nick', description='昵称'),
  appKey?: string(name='AppKey', description='appKey'),
}

model GetUserTokenResponseBody = {
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='鹰眼id'),
  data?: {
    expires?: long(name='Expires'),
    token?: string(name='Token'),
  }(name='Data'),
  code?: string(name='Code', description='错误码'),
  success?: boolean(name='Success', description='是否调用成功'),
}

model GetUserTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserTokenResponseBody(name='body'),
}

async function getUserTokenWithOptions(request: GetUserTokenRequest, runtime: Util.RuntimeOptions): GetUserTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserToken', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserToken(request: GetUserTokenRequest): GetUserTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserTokenWithOptions(request, runtime);
}

model SearchTicketListRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  ticketStatus?: string(name='TicketStatus'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model SearchTicketListResponseBody = {
  onePageSize?: int32(name='OnePageSize'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
  pageNo?: int32(name='PageNo'),
  data?: [ 
    {
      memberName?: string(name='MemberName'),
      carbonCopy?: string(name='CarbonCopy'),
      createTime?: long(name='CreateTime'),
      serviceId?: long(name='ServiceId'),
      ticketId?: long(name='TicketId'),
      priority?: int32(name='Priority'),
      creatorId?: long(name='CreatorId'),
      formData?: string(name='FormData'),
      fromInfo?: string(name='FromInfo'),
      modifiedTime?: long(name='ModifiedTime'),
      taskStatus?: string(name='TaskStatus'),
      creatorName?: string(name='CreatorName'),
      categoryId?: long(name='CategoryId'),
      creatorType?: int32(name='CreatorType'),
      memberId?: long(name='MemberId'),
      caseStatus?: int32(name='CaseStatus'),
      templateId?: long(name='TemplateId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SearchTicketListResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketListResponseBody(name='body'),
}

async function searchTicketListWithOptions(request: SearchTicketListRequest, runtime: Util.RuntimeOptions): SearchTicketListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SearchTicketList', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function searchTicketList(request: SearchTicketListRequest): SearchTicketListResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketListWithOptions(request, runtime);
}

model SendHotlineHeartBeatRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  token?: string(name='Token'),
}

model SendHotlineHeartBeatResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SendHotlineHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: SendHotlineHeartBeatResponseBody(name='body'),
}

async function sendHotlineHeartBeatWithOptions(request: SendHotlineHeartBeatRequest, runtime: Util.RuntimeOptions): SendHotlineHeartBeatResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendHotlineHeartBeat', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendHotlineHeartBeat(request: SendHotlineHeartBeatRequest): SendHotlineHeartBeatResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendHotlineHeartBeatWithOptions(request, runtime);
}

model TransferCallToSkillGroupRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  skillGroupId?: long(name='SkillGroupId'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  type?: int32(name='Type'),
  isSingleTransfer?: boolean(name='IsSingleTransfer'),
}

model TransferCallToSkillGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TransferCallToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToSkillGroupResponseBody(name='body'),
}

async function transferCallToSkillGroupWithOptions(request: TransferCallToSkillGroupRequest, runtime: Util.RuntimeOptions): TransferCallToSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferCallToSkillGroup', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferCallToSkillGroup(request: TransferCallToSkillGroupRequest): TransferCallToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToSkillGroupWithOptions(request, runtime);
}

model EditEntityRouteRequest {
  entityId?: string(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityBizCode?: string(name='EntityBizCode'),
  entityBizCodeType?: string(name='EntityBizCodeType'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  departmentId?: string(name='DepartmentId'),
  groupId?: long(name='GroupId'),
  serviceId?: long(name='ServiceId'),
  extInfo?: string(name='ExtInfo'),
  instanceId?: string(name='InstanceId'),
  uniqueId?: long(name='UniqueId'),
}

model EditEntityRouteResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EditEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: EditEntityRouteResponseBody(name='body'),
}

async function editEntityRouteWithOptions(request: EditEntityRouteRequest, runtime: Util.RuntimeOptions): EditEntityRouteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditEntityRoute', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editEntityRoute(request: EditEntityRouteRequest): EditEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return editEntityRouteWithOptions(request, runtime);
}

model GetTagListRequest {
  entityId?: string(name='EntityId'),
  entityType?: string(name='EntityType'),
  instanceId?: string(name='InstanceId'),
}

model GetTagListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      scenarioCode?: string(name='ScenarioCode'),
      tagGroupCode?: string(name='TagGroupCode'),
      tagValues?: [ 
        {
          status?: string(name='Status'),
          description?: string(name='Description'),
          tagName?: string(name='TagName'),
          tagGroupCode?: string(name='TagGroupCode'),
          tagCode?: string(name='TagCode'),
          tagGroupName?: string(name='TagGroupName'),
          entityRelationNumber?: string(name='EntityRelationNumber'),
        }
      ](name='TagValues'),
      tagGroupName?: string(name='TagGroupName'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTagListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTagListResponseBody(name='body'),
}

async function getTagListWithOptions(request: GetTagListRequest, runtime: Util.RuntimeOptions): GetTagListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTagList', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTagList(request: GetTagListRequest): GetTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagListWithOptions(request, runtime);
}

model UpdateTicketRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  ticketId?: long(name='TicketId'),
  operatorId?: long(name='OperatorId'),
  formData?: string(name='FormData'),
}

model UpdateTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model UpdateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTicketResponseBody(name='body'),
}

async function updateTicketWithOptions(request: UpdateTicketRequest, runtime: Util.RuntimeOptions): UpdateTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTicket', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTicketWithOptions(request, runtime);
}

model ListOutboundPhoneNumberRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model ListOutboundPhoneNumberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model ListOutboundPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundPhoneNumberResponseBody(name='body'),
}

async function listOutboundPhoneNumberWithOptions(request: ListOutboundPhoneNumberRequest, runtime: Util.RuntimeOptions): ListOutboundPhoneNumberResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListOutboundPhoneNumber', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listOutboundPhoneNumber(request: ListOutboundPhoneNumberRequest): ListOutboundPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundPhoneNumberWithOptions(request, runtime);
}

model RemoveSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  clientToken?: string(name='ClientToken'),
}

model RemoveSkillGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RemoveSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSkillGroupResponseBody(name='body'),
}

async function removeSkillGroupWithOptions(request: RemoveSkillGroupRequest, runtime: Util.RuntimeOptions): RemoveSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveSkillGroup', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeSkillGroup(request: RemoveSkillGroupRequest): RemoveSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSkillGroupWithOptions(request, runtime);
}

model ListAgentBySkillGroupIdRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: long(name='SkillGroupId'),
}

model ListAgentBySkillGroupIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: int32(name='Status'),
      displayName?: string(name='DisplayName'),
      agentId?: long(name='AgentId'),
      accountName?: string(name='AccountName'),
      tenantId?: long(name='TenantId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListAgentBySkillGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentBySkillGroupIdResponseBody(name='body'),
}

async function listAgentBySkillGroupIdWithOptions(request: ListAgentBySkillGroupIdRequest, runtime: Util.RuntimeOptions): ListAgentBySkillGroupIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAgentBySkillGroupId', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAgentBySkillGroupId(request: ListAgentBySkillGroupIdRequest): ListAgentBySkillGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentBySkillGroupIdWithOptions(request, runtime);
}

model QueryHotlineSessionRequest {
  instanceId?: string(name='InstanceId'),
  acid?: string(name='Acid'),
  callType?: int32(name='CallType'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  groupId?: long(name='GroupId'),
  groupName?: string(name='GroupName'),
  memberId?: string(name='MemberId'),
  memberName?: string(name='MemberName'),
  queryEndTime?: long(name='QueryEndTime'),
  queryStartTime?: long(name='QueryStartTime'),
  requestId?: string(name='RequestId'),
  servicerName?: string(name='ServicerName'),
  servicerId?: string(name='ServicerId'),
  params?: string(name='Params'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  callResult?: string(name='CallResult'),
}

model QueryHotlineSessionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    callDetailRecord?: [ 
      {
        callResult?: string(name='CallResult'),
        servicerName?: string(name='ServicerName'),
        outQueueTime?: string(name='OutQueueTime'),
        callContinueTime?: int32(name='CallContinueTime'),
        createTime?: string(name='CreateTime'),
        pickUpTime?: string(name='PickUpTime'),
        ringContinueTime?: int32(name='RingContinueTime'),
        calledNumber?: string(name='CalledNumber'),
        servicerId?: string(name='ServicerId'),
        hangUpTime?: string(name='HangUpTime'),
        evaluationLevel?: int32(name='EvaluationLevel'),
        hangUpRole?: string(name='HangUpRole'),
        memberName?: string(name='MemberName'),
        evaluationScore?: int32(name='EvaluationScore'),
        acid?: string(name='Acid'),
        ringStartTime?: string(name='RingStartTime'),
        callType?: int32(name='CallType'),
        groupName?: string(name='GroupName'),
        groupId?: long(name='GroupId'),
        ringEndTime?: string(name='RingEndTime'),
        inQueueTime?: string(name='InQueueTime'),
        callingNumber?: string(name='CallingNumber'),
        memberId?: string(name='MemberId'),
        queueUpContinueTime?: int32(name='QueueUpContinueTime'),
      }
    ](name='CallDetailRecord'),
    pageSize?: int32(name='PageSize'),
    pageNumber?: int32(name='PageNumber'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryHotlineSessionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotlineSessionResponseBody(name='body'),
}

async function queryHotlineSessionWithOptions(request: QueryHotlineSessionRequest, runtime: Util.RuntimeOptions): QueryHotlineSessionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryHotlineSession', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryHotlineSession(request: QueryHotlineSessionRequest): QueryHotlineSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHotlineSessionWithOptions(request, runtime);
}

model StartChatWorkRequest {
  instanceId?: string(name='InstanceId', description='instanceId'),
  accountName?: string(name='AccountName', description='accountName'),
}

model StartChatWorkResponseBody = {
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  data?: string(name='Data', description='data'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model StartChatWorkResponse = {
  headers: map[string]string(name='headers'),
  body: StartChatWorkResponseBody(name='body'),
}

async function startChatWorkWithOptions(request: StartChatWorkRequest, runtime: Util.RuntimeOptions): StartChatWorkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartChatWork', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startChatWork(request: StartChatWorkRequest): StartChatWorkResponse {
  var runtime = new Util.RuntimeOptions{};
  return startChatWorkWithOptions(request, runtime);
}

model HangupThirdCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
}

model HangupThirdCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model HangupThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupThirdCallResponseBody(name='body'),
}

async function hangupThirdCallWithOptions(request: HangupThirdCallRequest, runtime: Util.RuntimeOptions): HangupThirdCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HangupThirdCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function hangupThirdCall(request: HangupThirdCallRequest): HangupThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return hangupThirdCallWithOptions(request, runtime);
}

model StartHotlineServiceRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model StartHotlineServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model StartHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartHotlineServiceResponseBody(name='body'),
}

async function startHotlineServiceWithOptions(request: StartHotlineServiceRequest, runtime: Util.RuntimeOptions): StartHotlineServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartHotlineService', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startHotlineService(request: StartHotlineServiceRequest): StartHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startHotlineServiceWithOptions(request, runtime);
}

model StartCallV2Request {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
  jsonMsg?: string(name='JsonMsg'),
}

model StartCallV2ResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StartCallV2Response = {
  headers: map[string]string(name='headers'),
  body: StartCallV2ResponseBody(name='body'),
}

async function startCallV2WithOptions(request: StartCallV2Request, runtime: Util.RuntimeOptions): StartCallV2Response {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCallV2', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCallV2(request: StartCallV2Request): StartCallV2Response {
  var runtime = new Util.RuntimeOptions{};
  return startCallV2WithOptions(request, runtime);
}

model EnableRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleId?: long(name='RoleId'),
}

model EnableRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EnableRoleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRoleResponseBody(name='body'),
}

async function enableRoleWithOptions(request: EnableRoleRequest, runtime: Util.RuntimeOptions): EnableRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableRole', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableRole(request: EnableRoleRequest): EnableRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRoleWithOptions(request, runtime);
}

model GetAgentRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetAgentResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: int32(name='Status'),
    displayName?: string(name='DisplayName'),
    agentId?: long(name='AgentId'),
    groupList?: [ 
      {
        displayName?: string(name='DisplayName'),
        description?: string(name='Description'),
        channelType?: int32(name='ChannelType'),
        skillGroupId?: long(name='SkillGroupId'),
        name?: string(name='Name'),
      }
    ](name='GroupList'),
    accountName?: string(name='AccountName'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
}

model GetAgentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentResponseBody(name='body'),
}

async function getAgentWithOptions(request: GetAgentRequest, runtime: Util.RuntimeOptions): GetAgentResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAgent', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAgent(request: GetAgentRequest): GetAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentWithOptions(request, runtime);
}

model GetCMSIdByForeignIdRequest {
  instanceId?: string(name='InstanceId'),
  nick?: string(name='Nick'),
  foreignId?: string(name='ForeignId'),
  sourceId?: long(name='SourceId'),
}

model GetCMSIdByForeignIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    status?: int32(name='Status'),
    customerTypeId?: int32(name='CustomerTypeId'),
    avatar?: string(name='Avatar'),
    gender?: string(name='Gender'),
    foreignId?: string(name='ForeignId'),
    userId?: string(name='UserId'),
    nick?: string(name='Nick'),
    anonymity?: boolean(name='Anonymity'),
    phone?: string(name='Phone'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetCMSIdByForeignIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetCMSIdByForeignIdResponseBody(name='body'),
}

async function getCMSIdByForeignIdWithOptions(request: GetCMSIdByForeignIdRequest, runtime: Util.RuntimeOptions): GetCMSIdByForeignIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCMSIdByForeignId', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCMSIdByForeignId(request: GetCMSIdByForeignIdRequest): GetCMSIdByForeignIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCMSIdByForeignIdWithOptions(request, runtime);
}

model TransferToThirdCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
}

model TransferToThirdCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TransferToThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: TransferToThirdCallResponseBody(name='body'),
}

async function transferToThirdCallWithOptions(request: TransferToThirdCallRequest, runtime: Util.RuntimeOptions): TransferToThirdCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferToThirdCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferToThirdCall(request: TransferToThirdCallRequest): TransferToThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferToThirdCallWithOptions(request, runtime);
}

model UpdateAgentRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  displayName?: string(name='DisplayName'),
  skillGroupId?: [ long ](name='SkillGroupId'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList'),
}

model UpdateAgentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model UpdateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAgentResponseBody(name='body'),
}

async function updateAgentWithOptions(request: UpdateAgentRequest, runtime: Util.RuntimeOptions): UpdateAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAgent', '2020-07-02', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function updateAgent(request: UpdateAgentRequest): UpdateAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAgentWithOptions(request, runtime);
}

model ChangeChatAgentStatusRequest {
  clientToken?: string(name='ClientToken', description='clientToken'),
  instanceId?: string(name='InstanceId', description='示例id'),
  accountName?: string(name='AccountName', description='账户名称'),
  method?: string(name='Method', description='修改到的状态类型'),
}

model ChangeChatAgentStatusResponseBody = {
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  data?: string(name='Data', description='data'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model ChangeChatAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeChatAgentStatusResponseBody(name='body'),
}

async function changeChatAgentStatusWithOptions(request: ChangeChatAgentStatusRequest, runtime: Util.RuntimeOptions): ChangeChatAgentStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeChatAgentStatus', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeChatAgentStatus(request: ChangeChatAgentStatusRequest): ChangeChatAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeChatAgentStatusWithOptions(request, runtime);
}

model GenerateWebSocketSignRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GenerateWebSocketSignResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GenerateWebSocketSignResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateWebSocketSignResponseBody(name='body'),
}

async function generateWebSocketSignWithOptions(request: GenerateWebSocketSignRequest, runtime: Util.RuntimeOptions): GenerateWebSocketSignResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateWebSocketSign', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateWebSocketSign(request: GenerateWebSocketSignRequest): GenerateWebSocketSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateWebSocketSignWithOptions(request, runtime);
}

model UpdateRingStatusRequest {
  uniqueBizId?: string(name='UniqueBizId'),
  callOutStatus?: string(name='CallOutStatus'),
  extra?: string(name='Extra'),
  instanceId?: string(name='InstanceId'),
}

model UpdateRingStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model UpdateRingStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRingStatusResponseBody(name='body'),
}

async function updateRingStatusWithOptions(request: UpdateRingStatusRequest, runtime: Util.RuntimeOptions): UpdateRingStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRingStatus', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRingStatus(request: UpdateRingStatusRequest): UpdateRingStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRingStatusWithOptions(request, runtime);
}

model CreateAgentRequest {
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  displayName?: string(name='DisplayName'),
  skillGroupId?: [ long ](name='SkillGroupId'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList'),
}

model CreateAgentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model CreateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgentResponseBody(name='body'),
}

async function createAgentWithOptions(request: CreateAgentRequest, runtime: Util.RuntimeOptions): CreateAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAgent', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAgent(request: CreateAgentRequest): CreateAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgentWithOptions(request, runtime);
}

model DeleteEntityRouteRequest {
  uniqueId?: long(name='UniqueId'),
  instanceId?: string(name='InstanceId'),
}

model DeleteEntityRouteResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEntityRouteResponseBody(name='body'),
}

async function deleteEntityRouteWithOptions(request: DeleteEntityRouteRequest, runtime: Util.RuntimeOptions): DeleteEntityRouteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEntityRoute', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEntityRoute(request: DeleteEntityRouteRequest): DeleteEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEntityRouteWithOptions(request, runtime);
}

model GetHotlineGroupDetailReportRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
  endDate?: long(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  depIds?: [ integer ](name='DepIds'),
  groupIds?: [ integer ](name='GroupIds'),
}

model GetHotlineGroupDetailReportResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    rows?: [  map[string]any ](name='Rows'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetHotlineGroupDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineGroupDetailReportResponseBody(name='body'),
}

async function getHotlineGroupDetailReportWithOptions(request: GetHotlineGroupDetailReportRequest, runtime: Util.RuntimeOptions): GetHotlineGroupDetailReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHotlineGroupDetailReport', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHotlineGroupDetailReport(request: GetHotlineGroupDetailReportRequest): GetHotlineGroupDetailReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineGroupDetailReportWithOptions(request, runtime);
}

model CreateTicketRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
  categoryId?: long(name='CategoryId'),
  creatorId?: long(name='CreatorId'),
  creatorType?: int32(name='CreatorType'),
  creatorName?: string(name='CreatorName'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  fromInfo?: string(name='FromInfo'),
  priority?: int32(name='Priority'),
  carbonCopy?: string(name='CarbonCopy'),
  formData?: string(name='FormData'),
}

model CreateTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketResponseBody(name='body'),
}

async function createTicketWithOptions(request: CreateTicketRequest, runtime: Util.RuntimeOptions): CreateTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTicket', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketWithOptions(request, runtime);
}

model UpdateCustomerRequest {
  prodLineId?: long(name='ProdLineId'),
  bizType?: string(name='BizType'),
  name?: string(name='Name'),
  typeCode?: string(name='TypeCode'),
  phone?: string(name='Phone'),
  instanceId?: string(name='InstanceId'),
  managerName?: string(name='ManagerName'),
  contacter?: string(name='Contacter'),
  industry?: string(name='Industry'),
  position?: string(name='Position'),
  email?: string(name='Email'),
  dingding?: string(name='Dingding'),
  outerId?: string(name='OuterId'),
  outerIdType?: int32(name='OuterIdType'),
  customerId?: long(name='CustomerId'),
}

model UpdateCustomerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateCustomerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomerResponseBody(name='body'),
}

async function updateCustomerWithOptions(request: UpdateCustomerRequest, runtime: Util.RuntimeOptions): UpdateCustomerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCustomer', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCustomer(request: UpdateCustomerRequest): UpdateCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomerWithOptions(request, runtime);
}

model AnswerCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
}

model AnswerCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AnswerCallResponse = {
  headers: map[string]string(name='headers'),
  body: AnswerCallResponseBody(name='body'),
}

async function answerCallWithOptions(request: AnswerCallRequest, runtime: Util.RuntimeOptions): AnswerCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AnswerCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return answerCallWithOptions(request, runtime);
}

model DeleteAgentRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model DeleteAgentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model DeleteAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAgentResponseBody(name='body'),
}

async function deleteAgentWithOptions(request: DeleteAgentRequest, runtime: Util.RuntimeOptions): DeleteAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAgent', '2020-07-02', 'HTTPS', 'DELETE', 'AK', 'json', req, runtime);
}

async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAgentWithOptions(request, runtime);
}

model GetEntityTagRelationRequest {
  entityId?: string(name='EntityId'),
  entityType?: string(name='EntityType'),
  instanceId?: string(name='InstanceId'),
}

model GetEntityTagRelationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      tagName?: string(name='TagName'),
      tagGroupCode?: string(name='TagGroupCode'),
      entityId?: string(name='EntityId'),
      tagCode?: string(name='TagCode'),
      entityType?: string(name='EntityType'),
      tagGroupName?: string(name='TagGroupName'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEntityTagRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityTagRelationResponseBody(name='body'),
}

async function getEntityTagRelationWithOptions(request: GetEntityTagRelationRequest, runtime: Util.RuntimeOptions): GetEntityTagRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEntityTagRelation', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEntityTagRelation(request: GetEntityTagRelationRequest): GetEntityTagRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityTagRelationWithOptions(request, runtime);
}

model GetHotlineAgentDetailRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetHotlineAgentDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    agentStatusCode?: string(name='AgentStatusCode'),
    token?: string(name='Token'),
    agentId?: long(name='AgentId'),
    assigned?: boolean(name='Assigned'),
    restType?: int32(name='RestType'),
    agentStatus?: int32(name='AgentStatus'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetHotlineAgentDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailResponseBody(name='body'),
}

async function getHotlineAgentDetailWithOptions(request: GetHotlineAgentDetailRequest, runtime: Util.RuntimeOptions): GetHotlineAgentDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetHotlineAgentDetail', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getHotlineAgentDetail(request: GetHotlineAgentDetailRequest): GetHotlineAgentDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentDetailWithOptions(request, runtime);
}

model SuspendHotlineServiceRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  type?: int32(name='Type'),
}

model SuspendHotlineServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SuspendHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendHotlineServiceResponseBody(name='body'),
}

async function suspendHotlineServiceWithOptions(request: SuspendHotlineServiceRequest, runtime: Util.RuntimeOptions): SuspendHotlineServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SuspendHotlineService', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function suspendHotlineService(request: SuspendHotlineServiceRequest): SuspendHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendHotlineServiceWithOptions(request, runtime);
}

model GetCallsPerDayRequest {
  instanceId?: string(name='InstanceId'),
  dataIdStart?: string(name='DataIdStart'),
  dataIdEnd?: string(name='DataIdEnd'),
  dataId?: string(name='DataId'),
  hourId?: string(name='HourId'),
  minuteId?: string(name='MinuteId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  havePhoneNumbers?: string(name='HavePhoneNumbers'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
}

model GetCallsPerDayResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: string(name='Success'),
  data?: {
    totalNum?: long(name='TotalNum'),
    pageSize?: long(name='PageSize'),
    pageNo?: string(name='PageNo'),
    callsPerdayResponseList?: [ 
      {
        dataId?: string(name='DataId'),
        hourId?: string(name='HourId'),
        tenantId?: string(name='TenantId'),
        tenantName?: string(name='TenantName'),
        phoneNum?: string(name='PhoneNum'),
        callOutCnt?: string(name='CallOutCnt'),
        callInCnt?: string(name='CallInCnt'),
        minuteId?: string(name='MinuteId'),
      }
    ](name='CallsPerdayResponseList'),
  }(name='Data'),
}

model GetCallsPerDayResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallsPerDayResponseBody(name='body'),
}

async function getCallsPerDayWithOptions(request: GetCallsPerDayRequest, runtime: Util.RuntimeOptions): GetCallsPerDayResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetCallsPerDay', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getCallsPerDay(request: GetCallsPerDayRequest): GetCallsPerDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallsPerDayWithOptions(request, runtime);
}

model FetchCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
}

model FetchCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model FetchCallResponse = {
  headers: map[string]string(name='headers'),
  body: FetchCallResponseBody(name='body'),
}

async function fetchCallWithOptions(request: FetchCallRequest, runtime: Util.RuntimeOptions): FetchCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FetchCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function fetchCall(request: FetchCallRequest): FetchCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchCallWithOptions(request, runtime);
}

model GetHotlineAgentDetailReportRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
  endDate?: long(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  depIds?: [ integer ](name='DepIds'),
  groupIds?: [ integer ](name='GroupIds'),
}

model GetHotlineAgentDetailReportResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    rows?: [  map[string]any ](name='Rows'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model GetHotlineAgentDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailReportResponseBody(name='body'),
}

async function getHotlineAgentDetailReportWithOptions(request: GetHotlineAgentDetailReportRequest, runtime: Util.RuntimeOptions): GetHotlineAgentDetailReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHotlineAgentDetailReport', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHotlineAgentDetailReport(request: GetHotlineAgentDetailReportRequest): GetHotlineAgentDetailReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentDetailReportWithOptions(request, runtime);
}

model QueryTicketCountRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
}

model QueryTicketCountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTicketCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketCountResponseBody(name='body'),
}

async function queryTicketCountWithOptions(request: QueryTicketCountRequest, runtime: Util.RuntimeOptions): QueryTicketCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTicketCount', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTicketCount(request: QueryTicketCountRequest): QueryTicketCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketCountWithOptions(request, runtime);
}

model AppMessagePushRequest {
  instanceId?: string(name='InstanceId', description='实例ID'),
  userId?: string(name='UserId', description='用户编号'),
  status?: int32(name='Status', description='APP状态'),
  expirationTime?: long(name='ExpirationTime', description='过期时间'),
}

model AppMessagePushResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: string(name='Data', description='返回数据'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误信息'),
  success?: boolean(name='Success', description='通信码'),
}

model AppMessagePushResponse = {
  headers: map[string]string(name='headers'),
  body: AppMessagePushResponseBody(name='body'),
}

async function appMessagePushWithOptions(request: AppMessagePushRequest, runtime: Util.RuntimeOptions): AppMessagePushResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AppMessagePush', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function appMessagePush(request: AppMessagePushRequest): AppMessagePushResponse {
  var runtime = new Util.RuntimeOptions{};
  return appMessagePushWithOptions(request, runtime);
}

model GetHotlineAgentStatusRequest {
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetHotlineAgentStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetHotlineAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentStatusResponseBody(name='body'),
}

async function getHotlineAgentStatusWithOptions(request: GetHotlineAgentStatusRequest, runtime: Util.RuntimeOptions): GetHotlineAgentStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHotlineAgentStatus', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHotlineAgentStatus(request: GetHotlineAgentStatusRequest): GetHotlineAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentStatusWithOptions(request, runtime);
}

model GetHotlineWaitingNumberRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetHotlineWaitingNumberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetHotlineWaitingNumberResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineWaitingNumberResponseBody(name='body'),
}

async function getHotlineWaitingNumberWithOptions(request: GetHotlineWaitingNumberRequest, runtime: Util.RuntimeOptions): GetHotlineWaitingNumberResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetHotlineWaitingNumber', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getHotlineWaitingNumber(request: GetHotlineWaitingNumberRequest): GetHotlineWaitingNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineWaitingNumberWithOptions(request, runtime);
}

model StartCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
}

model StartCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StartCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartCallResponseBody(name='body'),
}

async function startCallWithOptions(request: StartCallRequest, runtime: Util.RuntimeOptions): StartCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCall(request: StartCallRequest): StartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCallWithOptions(request, runtime);
}

model AssignTicketRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  ticketId?: long(name='TicketId'),
  operatorId?: long(name='OperatorId'),
  acceptorId?: long(name='AcceptorId'),
}

model AssignTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model AssignTicketResponse = {
  headers: map[string]string(name='headers'),
  body: AssignTicketResponseBody(name='body'),
}

async function assignTicketWithOptions(request: AssignTicketRequest, runtime: Util.RuntimeOptions): AssignTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignTicket', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignTicket(request: AssignTicketRequest): AssignTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignTicketWithOptions(request, runtime);
}

model HangupCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
}

model HangupCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model HangupCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupCallResponseBody(name='body'),
}

async function hangupCallWithOptions(request: HangupCallRequest, runtime: Util.RuntimeOptions): HangupCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HangupCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function hangupCall(request: HangupCallRequest): HangupCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return hangupCallWithOptions(request, runtime);
}

model GetOutbounNumListRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetOutbounNumListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    numGroup?: [ 
      {
        type?: int32(name='Type'),
        value?: string(name='Value'),
        description?: string(name='Description'),
      }
    ](name='NumGroup'),
    num?: [ 
      {
        type?: int32(name='Type'),
        value?: string(name='Value'),
        description?: string(name='Description'),
      }
    ](name='Num'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetOutbounNumListResponse = {
  headers: map[string]string(name='headers'),
  body: GetOutbounNumListResponseBody(name='body'),
}

async function getOutbounNumListWithOptions(request: GetOutbounNumListRequest, runtime: Util.RuntimeOptions): GetOutbounNumListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOutbounNumList', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOutbounNumList(request: GetOutbounNumListRequest): GetOutbounNumListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOutbounNumListWithOptions(request, runtime);
}

model CreateTicketWithBizDataRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
  categoryId?: long(name='CategoryId'),
  creatorId?: long(name='CreatorId'),
  creatorType?: int32(name='CreatorType'),
  creatorName?: string(name='CreatorName'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  fromInfo?: string(name='FromInfo'),
  priority?: int32(name='Priority'),
  carbonCopy?: string(name='CarbonCopy'),
  formData?: string(name='FormData'),
  bizData?: string(name='BizData'),
}

model CreateTicketWithBizDataResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTicketWithBizDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketWithBizDataResponseBody(name='body'),
}

async function createTicketWithBizDataWithOptions(request: CreateTicketWithBizDataRequest, runtime: Util.RuntimeOptions): CreateTicketWithBizDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('createTicketWithBizData', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTicketWithBizData(request: CreateTicketWithBizDataRequest): CreateTicketWithBizDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketWithBizDataWithOptions(request, runtime);
}

model SearchTicketByPhoneRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  phone?: string(name='Phone'),
  templateId?: long(name='TemplateId'),
  ticketStatus?: string(name='TicketStatus'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model SearchTicketByPhoneResponseBody = {
  onePageSize?: int32(name='OnePageSize'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
  pageNo?: int32(name='PageNo'),
  data?: [ 
    {
      memberName?: string(name='MemberName'),
      carbonCopy?: string(name='CarbonCopy'),
      createTime?: long(name='CreateTime'),
      serviceId?: long(name='ServiceId'),
      ticketId?: long(name='TicketId'),
      priority?: int32(name='Priority'),
      creatorId?: long(name='CreatorId'),
      formData?: string(name='FormData'),
      fromInfo?: string(name='FromInfo'),
      modifiedTime?: long(name='ModifiedTime'),
      taskStatus?: string(name='TaskStatus'),
      creatorName?: string(name='CreatorName'),
      categoryId?: long(name='CategoryId'),
      creatorType?: int32(name='CreatorType'),
      memberId?: long(name='MemberId'),
      caseStatus?: int32(name='CaseStatus'),
      templateId?: long(name='TemplateId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SearchTicketByPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketByPhoneResponseBody(name='body'),
}

async function searchTicketByPhoneWithOptions(request: SearchTicketByPhoneRequest, runtime: Util.RuntimeOptions): SearchTicketByPhoneResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SearchTicketByPhone', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function searchTicketByPhone(request: SearchTicketByPhoneRequest): SearchTicketByPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketByPhoneWithOptions(request, runtime);
}

model CreateThirdSsoAgentRequest {
  clientToken?: string(name='ClientToken', description='clientToken'),
  instanceId?: string(name='InstanceId', description='param1'),
  clientId?: string(name='ClientId', description='param2'),
  accountId?: string(name='AccountId', description='param3'),
  accountName?: string(name='AccountName', description='param4'),
  displayName?: string(name='DisplayName', description='param5'),
  skillGroupIds?: [ long ](name='SkillGroupIds', description='param6'),
  roleIds?: [ long ](name='RoleIds', description='param7'),
}

model CreateThirdSsoAgentResponseBody = {
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  httpStatusCode?: long(name='HttpStatusCode', description='httpStatusCode'),
  data?: long(name='Data', description='新创建的坐席id'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model CreateThirdSsoAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThirdSsoAgentResponseBody(name='body'),
}

async function createThirdSsoAgentWithOptions(request: CreateThirdSsoAgentRequest, runtime: Util.RuntimeOptions): CreateThirdSsoAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateThirdSsoAgent', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createThirdSsoAgent(request: CreateThirdSsoAgentRequest): CreateThirdSsoAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThirdSsoAgentWithOptions(request, runtime);
}

model CreateEntityIvrRouteRequest {
  entityId?: string(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityBizCode?: string(name='EntityBizCode'),
  entityBizCodeType?: string(name='EntityBizCodeType'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  departmentId?: string(name='DepartmentId'),
  groupId?: long(name='GroupId'),
  serviceId?: long(name='ServiceId'),
  extInfo?: string(name='ExtInfo'),
  instanceId?: string(name='InstanceId'),
}

model CreateEntityIvrRouteResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEntityIvrRouteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEntityIvrRouteResponseBody(name='body'),
}

async function createEntityIvrRouteWithOptions(request: CreateEntityIvrRouteRequest, runtime: Util.RuntimeOptions): CreateEntityIvrRouteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEntityIvrRoute', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEntityIvrRoute(request: CreateEntityIvrRouteRequest): CreateEntityIvrRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEntityIvrRouteWithOptions(request, runtime);
}

model CloseTicketRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  ticketId?: long(name='TicketId'),
  actionItems?: string(name='ActionItems'),
  operatorId?: long(name='OperatorId'),
}

model CloseTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model CloseTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTicketResponseBody(name='body'),
}

async function closeTicketWithOptions(request: CloseTicketRequest, runtime: Util.RuntimeOptions): CloseTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseTicket', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeTicket(request: CloseTicketRequest): CloseTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTicketWithOptions(request, runtime);
}

model HoldCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
}

model HoldCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model HoldCallResponse = {
  headers: map[string]string(name='headers'),
  body: HoldCallResponseBody(name='body'),
}

async function holdCallWithOptions(request: HoldCallRequest, runtime: Util.RuntimeOptions): HoldCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HoldCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function holdCall(request: HoldCallRequest): HoldCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return holdCallWithOptions(request, runtime);
}

model QueryRingDetailListRequest {
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  startDate?: long(name='StartDate'),
  endDate?: long(name='EndDate'),
  callOutStatus?: string(name='CallOutStatus'),
  extra?: string(name='Extra'),
  instanceId?: string(name='InstanceId'),
  fromPhoneNumList?: map[string]any(name='FromPhoneNumList'),
  toPhoneNumList?: map[string]any(name='ToPhoneNumList'),
}

model QueryRingDetailListShrinkRequest {
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  startDate?: long(name='StartDate'),
  endDate?: long(name='EndDate'),
  callOutStatus?: string(name='CallOutStatus'),
  extra?: string(name='Extra'),
  instanceId?: string(name='InstanceId'),
  fromPhoneNumListShrink?: string(name='FromPhoneNumList'),
  toPhoneNumListShrink?: string(name='ToPhoneNumList'),
}

model QueryRingDetailListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model QueryRingDetailListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRingDetailListResponseBody(name='body'),
}

async function queryRingDetailListWithOptions(tmpReq: QueryRingDetailListRequest, runtime: Util.RuntimeOptions): QueryRingDetailListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryRingDetailListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fromPhoneNumList)) {
    request.fromPhoneNumListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fromPhoneNumList, 'FromPhoneNumList', 'json');
  }
  if (!Util.isUnset(tmpReq.toPhoneNumList)) {
    request.toPhoneNumListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toPhoneNumList, 'ToPhoneNumList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRingDetailList', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRingDetailList(request: QueryRingDetailListRequest): QueryRingDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRingDetailListWithOptions(request, runtime);
}

model SearchTicketByIdRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  ticketId?: long(name='TicketId'),
  statusCode?: int32(name='StatusCode'),
}

model SearchTicketByIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    carbonCopy?: string(name='CarbonCopy'),
    memberName?: string(name='MemberName'),
    createTime?: long(name='CreateTime'),
    serviceId?: long(name='ServiceId'),
    ticketId?: long(name='TicketId'),
    priority?: int32(name='Priority'),
    creatorId?: long(name='CreatorId'),
    formData?: string(name='FormData'),
    activities?: [ 
      {
        activityFormData?: string(name='ActivityFormData'),
        activityCode?: string(name='ActivityCode'),
      }
    ](name='Activities'),
    activityRecords?: [ 
      {
        actionCode?: string(name='ActionCode'),
        actionCodeDesc?: string(name='ActionCodeDesc'),
        operatorName?: string(name='OperatorName'),
        memo?: string(name='Memo'),
        gmtCreate?: long(name='GmtCreate'),
      }
    ](name='ActivityRecords'),
    fromInfo?: string(name='FromInfo'),
    modifiedTime?: long(name='ModifiedTime'),
    creatorName?: string(name='CreatorName'),
    categoryId?: long(name='CategoryId'),
    creatorType?: int32(name='CreatorType'),
    memberId?: long(name='MemberId'),
    caseStatus?: int32(name='CaseStatus'),
    templateId?: long(name='TemplateId'),
    ticketName?: string(name='TicketName'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model SearchTicketByIdResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketByIdResponseBody(name='body'),
}

async function searchTicketByIdWithOptions(request: SearchTicketByIdRequest, runtime: Util.RuntimeOptions): SearchTicketByIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SearchTicketById', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function searchTicketById(request: SearchTicketByIdRequest): SearchTicketByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketByIdWithOptions(request, runtime);
}

model UpdateSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: long(name='SkillGroupId'),
  skillGroupName?: string(name='SkillGroupName'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  clientToken?: string(name='ClientToken'),
  channelType?: long(name='ChannelType', description='渠道类型'),
}

model UpdateSkillGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model UpdateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSkillGroupResponseBody(name='body'),
}

async function updateSkillGroupWithOptions(request: UpdateSkillGroupRequest, runtime: Util.RuntimeOptions): UpdateSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSkillGroup', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSkillGroup(request: UpdateSkillGroupRequest): UpdateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSkillGroupWithOptions(request, runtime);
}

model QueryServiceConfigRequest {
  instanceId?: string(name='InstanceId'),
  viewCode?: string(name='ViewCode'),
  parameters?: string(name='Parameters'),
}

model QueryServiceConfigResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryServiceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServiceConfigResponseBody(name='body'),
}

async function queryServiceConfigWithOptions(request: QueryServiceConfigRequest, runtime: Util.RuntimeOptions): QueryServiceConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryServiceConfig', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryServiceConfig(request: QueryServiceConfigRequest): QueryServiceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServiceConfigWithOptions(request, runtime);
}

model DisableRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleId?: long(name='RoleId'),
}

model DisableRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DisableRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRoleResponseBody(name='body'),
}

async function disableRoleWithOptions(request: DisableRoleRequest, runtime: Util.RuntimeOptions): DisableRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableRole', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableRole(request: DisableRoleRequest): DisableRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRoleWithOptions(request, runtime);
}

model GetEntityRouteListRequest {
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
  instanceId?: string(name='InstanceId'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  entityName?: string(name='EntityName'),
}

model GetEntityRouteListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    entityRouteList?: [ 
      {
        entityBizCodeType?: string(name='EntityBizCodeType'),
        groupId?: string(name='GroupId'),
        entityId?: string(name='EntityId'),
        serviceId?: string(name='ServiceId'),
        departmentId?: string(name='DepartmentId'),
        entityBizCode?: string(name='EntityBizCode'),
        uniqueId?: long(name='UniqueId'),
        entityName?: string(name='EntityName'),
        extInfo?: string(name='ExtInfo'),
        entityRelationNumber?: string(name='EntityRelationNumber'),
      }
    ](name='EntityRouteList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEntityRouteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityRouteListResponseBody(name='body'),
}

async function getEntityRouteListWithOptions(request: GetEntityRouteListRequest, runtime: Util.RuntimeOptions): GetEntityRouteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEntityRouteList', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEntityRouteList(request: GetEntityRouteListRequest): GetEntityRouteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityRouteListWithOptions(request, runtime);
}

model GetAuthInfoRequest {
  instanceId?: string(name='InstanceId'),
  foreignId?: string(name='ForeignId'),
  appKey?: string(name='AppKey'),
}

model GetAuthInfoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    appName?: string(name='AppName'),
    time?: long(name='Time'),
    appKey?: string(name='AppKey'),
    app?: string(name='App'),
    userId?: string(name='UserId'),
    code?: string(name='Code'),
    sessionId?: string(name='SessionId'),
    userName?: string(name='UserName'),
    tenantId?: string(name='TenantId'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAuthInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthInfoResponseBody(name='body'),
}

async function getAuthInfoWithOptions(request: GetAuthInfoRequest, runtime: Util.RuntimeOptions): GetAuthInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuthInfo', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuthInfo(request: GetAuthInfoRequest): GetAuthInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthInfoWithOptions(request, runtime);
}

model UpdateRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleId?: long(name='RoleId'),
  roleName?: string(name='RoleName'),
  operator?: string(name='Operator'),
  permissionId?: [ long ](name='PermissionId'),
}

model UpdateRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRoleWithOptions(request: UpdateRoleRequest, runtime: Util.RuntimeOptions): UpdateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRole', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoleWithOptions(request, runtime);
}

model GetTicketTemplateSchemaRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
}

model GetTicketTemplateSchemaResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTicketTemplateSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: GetTicketTemplateSchemaResponseBody(name='body'),
}

async function getTicketTemplateSchemaWithOptions(request: GetTicketTemplateSchemaRequest, runtime: Util.RuntimeOptions): GetTicketTemplateSchemaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTicketTemplateSchema', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTicketTemplateSchema(request: GetTicketTemplateSchemaRequest): GetTicketTemplateSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketTemplateSchemaWithOptions(request, runtime);
}

model TransferCallToPhoneRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  type?: int32(name='Type'),
  isSingleTransfer?: boolean(name='IsSingleTransfer'),
  callerPhone?: string(name='callerPhone'),
  calleePhone?: string(name='calleePhone'),
}

model TransferCallToPhoneResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model TransferCallToPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToPhoneResponseBody(name='body'),
}

async function transferCallToPhoneWithOptions(request: TransferCallToPhoneRequest, runtime: Util.RuntimeOptions): TransferCallToPhoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferCallToPhone', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferCallToPhone(request: TransferCallToPhoneRequest): TransferCallToPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToPhoneWithOptions(request, runtime);
}

model QuerySkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  clientToken?: string(name='ClientToken'),
  groupName?: string(name='GroupName'),
  groupType?: int32(name='GroupType'),
  groupId?: long(name='GroupId'),
}

model QuerySkillGroupsResponseBody = {
  onePageSize?: int32(name='OnePageSize'),
  totalPage?: int32(name='TotalPage'),
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='CurrentPage'),
  totalResults?: int32(name='TotalResults'),
  data?: [ 
    {
      displayName?: string(name='DisplayName'),
      description?: string(name='Description'),
      channelType?: int32(name='ChannelType'),
      skillGroupName?: string(name='SkillGroupName'),
      skillGroupId?: long(name='SkillGroupId'),
    }
  ](name='Data'),
}

model QuerySkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySkillGroupsResponseBody(name='body'),
}

async function querySkillGroupsWithOptions(request: QuerySkillGroupsRequest, runtime: Util.RuntimeOptions): QuerySkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySkillGroups', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySkillGroups(request: QuerySkillGroupsRequest): QuerySkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySkillGroupsWithOptions(request, runtime);
}

model GetEntityRouteRequest {
  entityId?: string(name='EntityId'),
  uniqueId?: long(name='UniqueId'),
  instanceId?: string(name='InstanceId'),
  entityName?: string(name='EntityName'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  entityBizCode?: string(name='EntityBizCode'),
}

model GetEntityRouteResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    entityBizCodeType?: string(name='EntityBizCodeType'),
    groupId?: long(name='GroupId'),
    entityId?: string(name='EntityId'),
    serviceId?: long(name='ServiceId'),
    entityBizCode?: string(name='EntityBizCode'),
    departmentId?: string(name='DepartmentId'),
    uniqueId?: long(name='UniqueId'),
    entityName?: string(name='EntityName'),
    extInfo?: string(name='ExtInfo'),
    entityRelationNumber?: string(name='EntityRelationNumber'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityRouteResponseBody(name='body'),
}

async function getEntityRouteWithOptions(request: GetEntityRouteRequest, runtime: Util.RuntimeOptions): GetEntityRouteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEntityRoute', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEntityRoute(request: GetEntityRouteRequest): GetEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityRouteWithOptions(request, runtime);
}

model UpdateEntityTagRelationRequest {
  entityTagParam?: string(name='EntityTagParam'),
  instanceId?: string(name='InstanceId'),
}

model UpdateEntityTagRelationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateEntityTagRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEntityTagRelationResponseBody(name='body'),
}

async function updateEntityTagRelationWithOptions(request: UpdateEntityTagRelationRequest, runtime: Util.RuntimeOptions): UpdateEntityTagRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEntityTagRelation', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEntityTagRelation(request: UpdateEntityTagRelationRequest): UpdateEntityTagRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEntityTagRelationWithOptions(request, runtime);
}

model CreateOuterCallCenterDataRequest {
  sessionId?: string(name='SessionId'),
  interveneTime?: string(name='InterveneTime'),
  callType?: string(name='CallType'),
  fromPhoneNum?: string(name='FromPhoneNum'),
  toPhoneNum?: string(name='ToPhoneNum'),
  endReason?: string(name='EndReason'),
  userInfo?: string(name='UserInfo'),
  recordUrl?: string(name='RecordUrl'),
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  tenantId?: string(name='TenantId'),
  extInfo?: string(name='ExtInfo'),
  instanceId?: string(name='InstanceId'),
}

model CreateOuterCallCenterDataResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model CreateOuterCallCenterDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOuterCallCenterDataResponseBody(name='body'),
}

async function createOuterCallCenterDataWithOptions(request: CreateOuterCallCenterDataRequest, runtime: Util.RuntimeOptions): CreateOuterCallCenterDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOuterCallCenterData', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOuterCallCenterData(request: CreateOuterCallCenterDataRequest): CreateOuterCallCenterDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOuterCallCenterDataWithOptions(request, runtime);
}

model SendOutboundCommandRequest {
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callingNumber?: string(name='CallingNumber'),
  calledNumber?: string(name='CalledNumber'),
  customerInfo?: string(name='CustomerInfo'),
}

model SendOutboundCommandResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SendOutboundCommandResponse = {
  headers: map[string]string(name='headers'),
  body: SendOutboundCommandResponseBody(name='body'),
}

async function sendOutboundCommandWithOptions(request: SendOutboundCommandRequest, runtime: Util.RuntimeOptions): SendOutboundCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendOutboundCommand', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendOutboundCommand(request: SendOutboundCommandRequest): SendOutboundCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOutboundCommandWithOptions(request, runtime);
}

model CreateRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleName?: string(name='RoleName'),
  operator?: string(name='Operator'),
  permissionId?: [ long ](name='PermissionId'),
}

model CreateRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRoleWithOptions(request: CreateRoleRequest, runtime: Util.RuntimeOptions): CreateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRole', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoleWithOptions(request, runtime);
}

model ListSkillGroupRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  channelType?: int32(name='ChannelType'),
}

model ListSkillGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      displayName?: string(name='DisplayName'),
      description?: string(name='Description'),
      channelType?: int32(name='ChannelType'),
      skillGroupId?: long(name='SkillGroupId'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupResponseBody(name='body'),
}

async function listSkillGroupWithOptions(request: ListSkillGroupRequest, runtime: Util.RuntimeOptions): ListSkillGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSkillGroup', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSkillGroup(request: ListSkillGroupRequest): ListSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupWithOptions(request, runtime);
}

model GrantRolesRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  operator?: string(name='Operator'),
  roleId?: [ long ](name='RoleId'),
}

model GrantRolesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GrantRolesResponse = {
  headers: map[string]string(name='headers'),
  body: GrantRolesResponseBody(name='body'),
}

async function grantRolesWithOptions(request: GrantRolesRequest, runtime: Util.RuntimeOptions): GrantRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantRoles', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantRoles(request: GrantRolesRequest): GrantRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantRolesWithOptions(request, runtime);
}

model GetOuterCallCenterDataListRequest {
  sessionId?: string(name='SessionId'),
  fromPhoneNum?: string(name='FromPhoneNum'),
  toPhoneNum?: string(name='ToPhoneNum'),
  bizId?: string(name='BizId'),
  instanceId?: string(name='InstanceId'),
  queryStartTime?: string(name='QueryStartTime'),
  queryEndTime?: string(name='QueryEndTime'),
}

model GetOuterCallCenterDataListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endReason?: string(name='EndReason'),
      callType?: string(name='CallType'),
      acid?: string(name='Acid'),
      toPhoneNum?: string(name='ToPhoneNum'),
      userInfo?: string(name='UserInfo'),
      interveneTime?: string(name='InterveneTime'),
      bizId?: string(name='BizId'),
      sessionId?: string(name='SessionId'),
      fromPhoneNum?: string(name='FromPhoneNum'),
      extInfo?: string(name='ExtInfo'),
      bizType?: string(name='BizType'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetOuterCallCenterDataListResponse = {
  headers: map[string]string(name='headers'),
  body: GetOuterCallCenterDataListResponseBody(name='body'),
}

async function getOuterCallCenterDataListWithOptions(request: GetOuterCallCenterDataListRequest, runtime: Util.RuntimeOptions): GetOuterCallCenterDataListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOuterCallCenterDataList', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOuterCallCenterDataList(request: GetOuterCallCenterDataListRequest): GetOuterCallCenterDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOuterCallCenterDataListWithOptions(request, runtime);
}

model QueryTicketsRequest {
  instanceId?: string(name='InstanceId'),
  caseId?: long(name='CaseId'),
  caseType?: int32(name='CaseType'),
  caseStatus?: int32(name='CaseStatus'),
  srType?: long(name='SrType'),
  taskStatus?: int32(name='TaskStatus'),
  channelId?: string(name='ChannelId'),
  channelType?: int32(name='ChannelType'),
  touchId?: long(name='TouchId'),
  dealId?: long(name='DealId'),
  extra?: map[string]any(name='Extra'),
  accountName?: string(name='AccountName'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryTicketsShrinkRequest {
  instanceId?: string(name='InstanceId'),
  caseId?: long(name='CaseId'),
  caseType?: int32(name='CaseType'),
  caseStatus?: int32(name='CaseStatus'),
  srType?: long(name='SrType'),
  taskStatus?: int32(name='TaskStatus'),
  channelId?: string(name='ChannelId'),
  channelType?: int32(name='ChannelType'),
  touchId?: long(name='TouchId'),
  dealId?: long(name='DealId'),
  extraShrink?: string(name='Extra'),
  accountName?: string(name='AccountName'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryTicketsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketsResponseBody(name='body'),
}

async function queryTicketsWithOptions(tmpReq: QueryTicketsRequest, runtime: Util.RuntimeOptions): QueryTicketsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryTicketsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTickets', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTickets(request: QueryTicketsRequest): QueryTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketsWithOptions(request, runtime);
}

model QueryTicketActionsRequest {
  instanceId?: string(name='InstanceId'),
  ticketId?: string(name='TicketId'),
  actionCodeList?: [ integer ](name='ActionCodeList'),
}

model QueryTicketActionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTicketActionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketActionsResponseBody(name='body'),
}

async function queryTicketActionsWithOptions(request: QueryTicketActionsRequest, runtime: Util.RuntimeOptions): QueryTicketActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTicketActions', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTicketActions(request: QueryTicketActionsRequest): QueryTicketActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketActionsWithOptions(request, runtime);
}

model TransferCallToAgentRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  targetAccountName?: string(name='TargetAccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  type?: int32(name='Type'),
  isSingleTransfer?: string(name='IsSingleTransfer'),
}

model TransferCallToAgentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TransferCallToAgentResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToAgentResponseBody(name='body'),
}

async function transferCallToAgentWithOptions(request: TransferCallToAgentRequest, runtime: Util.RuntimeOptions): TransferCallToAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferCallToAgent', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferCallToAgent(request: TransferCallToAgentRequest): TransferCallToAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToAgentWithOptions(request, runtime);
}

model FinishHotlineServiceRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model FinishHotlineServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model FinishHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: FinishHotlineServiceResponseBody(name='body'),
}

async function finishHotlineServiceWithOptions(request: FinishHotlineServiceRequest, runtime: Util.RuntimeOptions): FinishHotlineServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FinishHotlineService', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function finishHotlineService(request: FinishHotlineServiceRequest): FinishHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishHotlineServiceWithOptions(request, runtime);
}

model JoinThirdCallRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
}

model JoinThirdCallResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model JoinThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: JoinThirdCallResponseBody(name='body'),
}

async function joinThirdCallWithOptions(request: JoinThirdCallRequest, runtime: Util.RuntimeOptions): JoinThirdCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinThirdCall', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinThirdCall(request: JoinThirdCallRequest): JoinThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinThirdCallWithOptions(request, runtime);
}

model ExecuteActivityRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  ticketId?: long(name='TicketId'),
  operatorId?: long(name='OperatorId'),
  activityCode?: string(name='ActivityCode'),
  activityForm?: string(name='ActivityForm'),
}

model ExecuteActivityResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ExecuteActivityResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteActivityResponseBody(name='body'),
}

async function executeActivityWithOptions(request: ExecuteActivityRequest, runtime: Util.RuntimeOptions): ExecuteActivityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteActivity', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeActivity(request: ExecuteActivityRequest): ExecuteActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeActivityWithOptions(request, runtime);
}

model GetGrantedRoleIdsRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model GetGrantedRoleIdsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ long ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetGrantedRoleIdsResponse = {
  headers: map[string]string(name='headers'),
  body: GetGrantedRoleIdsResponseBody(name='body'),
}

async function getGrantedRoleIdsWithOptions(request: GetGrantedRoleIdsRequest, runtime: Util.RuntimeOptions): GetGrantedRoleIdsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetGrantedRoleIds', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getGrantedRoleIds(request: GetGrantedRoleIdsRequest): GetGrantedRoleIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGrantedRoleIdsWithOptions(request, runtime);
}

model ListHotlineRecordRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
}

model ListHotlineRecordResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endTime?: boolean(name='EndTime'),
      startTime?: boolean(name='StartTime'),
      connectionId?: string(name='ConnectionId'),
      callId?: string(name='CallId'),
      url?: string(name='Url'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model ListHotlineRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineRecordResponseBody(name='body'),
}

async function listHotlineRecordWithOptions(request: ListHotlineRecordRequest, runtime: Util.RuntimeOptions): ListHotlineRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListHotlineRecord', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listHotlineRecord(request: ListHotlineRecordRequest): ListHotlineRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotlineRecordWithOptions(request, runtime);
}

model GetNumLocationRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  phoneNum?: string(name='PhoneNum'),
}

model GetNumLocationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  httpStatusCode?: long(name='HttpStatusCode'),
}

model GetNumLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumLocationResponseBody(name='body'),
}

async function getNumLocationWithOptions(request: GetNumLocationRequest, runtime: Util.RuntimeOptions): GetNumLocationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetNumLocation', '2020-07-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getNumLocation(request: GetNumLocationRequest): GetNumLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNumLocationWithOptions(request, runtime);
}

model CreateSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupName?: string(name='SkillGroupName'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  channelType?: int32(name='ChannelType'),
  clientToken?: string(name='ClientToken'),
}

model CreateSkillGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroupWithOptions(request: CreateSkillGroupRequest, runtime: Util.RuntimeOptions): CreateSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSkillGroup', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSkillGroupWithOptions(request, runtime);
}

model CreateCustomerRequest {
  prodLineId?: long(name='ProdLineId'),
  bizType?: string(name='BizType'),
  name?: string(name='Name'),
  typeCode?: string(name='TypeCode'),
  phone?: string(name='Phone'),
  instanceId?: string(name='InstanceId'),
  managerName?: string(name='ManagerName'),
  contacter?: string(name='Contacter'),
  industry?: string(name='Industry'),
  position?: string(name='Position'),
  email?: string(name='Email'),
  dingding?: string(name='Dingding'),
  outerId?: string(name='OuterId'),
  outerIdType?: int32(name='OuterIdType'),
}

model CreateCustomerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateCustomerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomerResponseBody(name='body'),
}

async function createCustomerWithOptions(request: CreateCustomerRequest, runtime: Util.RuntimeOptions): CreateCustomerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCustomer', '2020-07-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCustomer(request: CreateCustomerRequest): CreateCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomerWithOptions(request, runtime);
}

