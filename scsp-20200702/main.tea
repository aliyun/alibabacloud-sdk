/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    cn-shanghai = 'scsp-vpc.cn-shanghai.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('scsp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AnswerCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model AnswerCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AnswerCallResponse = {
  headers: map[string]string(name='headers'),
  body: AnswerCallResponseBody(name='body'),
}

async function answerCallWithOptions(request: AnswerCallRequest, runtime: Util.RuntimeOptions): AnswerCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AnswerCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return answerCallWithOptions(request, runtime);
}

model AppMessagePushRequest {
  expirationTime?: long(name='ExpirationTime', description='过期时间'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  status?: int32(name='Status', description='APP状态'),
  userId?: string(name='UserId', description='用户编号'),
}

model AppMessagePushResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: string(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='通信码'),
}

model AppMessagePushResponse = {
  headers: map[string]string(name='headers'),
  body: AppMessagePushResponseBody(name='body'),
}

async function appMessagePushWithOptions(request: AppMessagePushRequest, runtime: Util.RuntimeOptions): AppMessagePushResponse {
  Util.validateModel(request);
  var query = {};
  query['ExpirationTime'] = request.expirationTime;
  query['InstanceId'] = request.instanceId;
  query['Status'] = request.status;
  query['UserId'] = request.userId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AppMessagePush',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appMessagePush(request: AppMessagePushRequest): AppMessagePushResponse {
  var runtime = new Util.RuntimeOptions{};
  return appMessagePushWithOptions(request, runtime);
}

model AssignTicketRequest {
  acceptorId?: long(name='AcceptorId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  ticketId?: long(name='TicketId'),
}

model AssignTicketResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignTicketResponse = {
  headers: map[string]string(name='headers'),
  body: AssignTicketResponseBody(name='body'),
}

async function assignTicketWithOptions(request: AssignTicketRequest, runtime: Util.RuntimeOptions): AssignTicketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.acceptorId)) {
    body['AcceptorId'] = request.acceptorId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.ticketId)) {
    body['TicketId'] = request.ticketId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssignTicket',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignTicket(request: AssignTicketRequest): AssignTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignTicketWithOptions(request, runtime);
}

model ChangeChatAgentStatusRequest {
  accountName?: string(name='AccountName', description='账户名称'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  instanceId?: string(name='InstanceId', description='示例id'),
  method?: string(name='Method', description='修改到的状态类型'),
}

model ChangeChatAgentStatusResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ChangeChatAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeChatAgentStatusResponseBody(name='body'),
}

async function changeChatAgentStatusWithOptions(request: ChangeChatAgentStatusRequest, runtime: Util.RuntimeOptions): ChangeChatAgentStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.method)) {
    body['Method'] = request.method;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeChatAgentStatus',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeChatAgentStatus(request: ChangeChatAgentStatusRequest): ChangeChatAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeChatAgentStatusWithOptions(request, runtime);
}

model CloseTicketRequest {
  actionItems?: string(name='ActionItems'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  ticketId?: long(name='TicketId'),
}

model CloseTicketResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloseTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTicketResponseBody(name='body'),
}

async function closeTicketWithOptions(request: CloseTicketRequest, runtime: Util.RuntimeOptions): CloseTicketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.actionItems)) {
    body['ActionItems'] = request.actionItems;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.ticketId)) {
    body['TicketId'] = request.ticketId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CloseTicket',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeTicket(request: CloseTicketRequest): CloseTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTicketWithOptions(request, runtime);
}

model CreateAgentRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken', description='js sdk中自动生成的鉴权token'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: [ long ](name='SkillGroupId'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList'),
}

model CreateAgentResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgentResponseBody(name='body'),
}

async function createAgentWithOptions(request: CreateAgentRequest, runtime: Util.RuntimeOptions): CreateAgentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.skillGroupId)) {
    bodyFlat['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    bodyFlat['SkillGroupIdList'] = request.skillGroupIdList;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAgent(request: CreateAgentRequest): CreateAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgentWithOptions(request, runtime);
}

model CreateCustomerRequest {
  bizType?: string(name='BizType'),
  contacter?: string(name='Contacter'),
  dingding?: string(name='Dingding'),
  email?: string(name='Email'),
  industry?: string(name='Industry'),
  instanceId?: string(name='InstanceId'),
  managerName?: string(name='ManagerName'),
  name?: string(name='Name'),
  outerId?: string(name='OuterId'),
  outerIdType?: int32(name='OuterIdType'),
  phone?: string(name='Phone'),
  position?: string(name='Position'),
  prodLineId?: long(name='ProdLineId'),
  typeCode?: string(name='TypeCode'),
}

model CreateCustomerResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCustomerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomerResponseBody(name='body'),
}

async function createCustomerWithOptions(request: CreateCustomerRequest, runtime: Util.RuntimeOptions): CreateCustomerResponse {
  Util.validateModel(request);
  var query = {};
  query['BizType'] = request.bizType;
  query['Contacter'] = request.contacter;
  query['Dingding'] = request.dingding;
  query['Email'] = request.email;
  query['Industry'] = request.industry;
  query['InstanceId'] = request.instanceId;
  query['ManagerName'] = request.managerName;
  query['Name'] = request.name;
  query['OuterId'] = request.outerId;
  query['OuterIdType'] = request.outerIdType;
  query['Phone'] = request.phone;
  query['Position'] = request.position;
  query['ProdLineId'] = request.prodLineId;
  query['TypeCode'] = request.typeCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomer',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomer(request: CreateCustomerRequest): CreateCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomerWithOptions(request, runtime);
}

model CreateEntityIvrRouteRequest {
  departmentId?: string(name='DepartmentId'),
  entityBizCode?: string(name='EntityBizCode'),
  entityBizCodeType?: string(name='EntityBizCodeType'),
  entityId?: string(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  extInfo?: string(name='ExtInfo'),
  groupId?: long(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  serviceId?: long(name='ServiceId'),
}

model CreateEntityIvrRouteResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEntityIvrRouteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEntityIvrRouteResponseBody(name='body'),
}

async function createEntityIvrRouteWithOptions(request: CreateEntityIvrRouteRequest, runtime: Util.RuntimeOptions): CreateEntityIvrRouteResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.departmentId)) {
    body['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.entityBizCode)) {
    body['EntityBizCode'] = request.entityBizCode;
  }
  if (!Util.isUnset(request.entityBizCodeType)) {
    body['EntityBizCodeType'] = request.entityBizCodeType;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityName)) {
    body['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityRelationNumber)) {
    body['EntityRelationNumber'] = request.entityRelationNumber;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEntityIvrRoute',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEntityIvrRoute(request: CreateEntityIvrRouteRequest): CreateEntityIvrRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEntityIvrRouteWithOptions(request, runtime);
}

model CreateOuterCallCenterDataRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  callType?: string(name='CallType'),
  endReason?: string(name='EndReason'),
  extInfo?: string(name='ExtInfo'),
  fromPhoneNum?: string(name='FromPhoneNum'),
  instanceId?: string(name='InstanceId'),
  interveneTime?: string(name='InterveneTime'),
  recordUrl?: string(name='RecordUrl'),
  sessionId?: string(name='SessionId'),
  tenantId?: string(name='TenantId'),
  toPhoneNum?: string(name='ToPhoneNum'),
  userInfo?: string(name='UserInfo'),
}

model CreateOuterCallCenterDataResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOuterCallCenterDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOuterCallCenterDataResponseBody(name='body'),
}

async function createOuterCallCenterDataWithOptions(request: CreateOuterCallCenterDataRequest, runtime: Util.RuntimeOptions): CreateOuterCallCenterDataResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bizId)) {
    body['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.callType)) {
    body['CallType'] = request.callType;
  }
  if (!Util.isUnset(request.endReason)) {
    body['EndReason'] = request.endReason;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.fromPhoneNum)) {
    body['FromPhoneNum'] = request.fromPhoneNum;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interveneTime)) {
    body['InterveneTime'] = request.interveneTime;
  }
  if (!Util.isUnset(request.recordUrl)) {
    body['RecordUrl'] = request.recordUrl;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    body['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.toPhoneNum)) {
    body['ToPhoneNum'] = request.toPhoneNum;
  }
  if (!Util.isUnset(request.userInfo)) {
    body['UserInfo'] = request.userInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOuterCallCenterData',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOuterCallCenterData(request: CreateOuterCallCenterDataRequest): CreateOuterCallCenterDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOuterCallCenterDataWithOptions(request, runtime);
}

model CreateRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operator?: string(name='Operator'),
  permissionId?: [ long ](name='PermissionId'),
  roleName?: string(name='RoleName'),
}

model CreateRoleResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRoleWithOptions(request: CreateRoleRequest, runtime: Util.RuntimeOptions): CreateRoleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.permissionId)) {
    body['PermissionId'] = request.permissionId;
  }
  if (!Util.isUnset(request.roleName)) {
    body['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRole',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoleWithOptions(request, runtime);
}

model CreateSkillGroupRequest {
  channelType?: int32(name='ChannelType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  skillGroupName?: string(name='SkillGroupName'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroupWithOptions(request: CreateSkillGroupRequest, runtime: Util.RuntimeOptions): CreateSkillGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupName)) {
    body['SkillGroupName'] = request.skillGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSkillGroup',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSkillGroupWithOptions(request, runtime);
}

model CreateSubTicketRequest {
  agentId?: long(name='AgentId'),
  bizData?: string(name='BizData'),
  creatorId?: long(name='CreatorId'),
  creatorName?: string(name='CreatorName'),
  formData?: string(name='FormData'),
  fromInfo?: string(name='FromInfo'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  parentCaseId?: long(name='ParentCaseId'),
  priority?: int32(name='Priority'),
  templateId?: long(name='TemplateId'),
}

model CreateSubTicketResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model CreateSubTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubTicketResponseBody(name='body'),
}

async function createSubTicketWithOptions(request: CreateSubTicketRequest, runtime: Util.RuntimeOptions): CreateSubTicketResponse {
  Util.validateModel(request);
  var query = {};
  query['AgentId'] = request.agentId;
  query['BizData'] = request.bizData;
  query['CreatorId'] = request.creatorId;
  query['CreatorName'] = request.creatorName;
  query['FormData'] = request.formData;
  query['FromInfo'] = request.fromInfo;
  query['InstanceId'] = request.instanceId;
  query['MemberId'] = request.memberId;
  query['MemberName'] = request.memberName;
  query['ParentCaseId'] = request.parentCaseId;
  query['Priority'] = request.priority;
  query['TemplateId'] = request.templateId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubTicket',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubTicket(request: CreateSubTicketRequest): CreateSubTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubTicketWithOptions(request, runtime);
}

model CreateThirdSsoAgentRequest {
  accountId?: string(name='AccountId', description='param3'),
  accountName?: string(name='AccountName', description='param4'),
  clientId?: string(name='ClientId', description='param2'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  displayName?: string(name='DisplayName', description='param5'),
  instanceId?: string(name='InstanceId', description='param1'),
  roleIds?: [ long ](name='RoleIds', description='param7'),
  skillGroupIds?: [ long ](name='SkillGroupIds', description='param6'),
}

model CreateThirdSsoAgentResponseBody = {
  code?: string(name='Code', description='code'),
  data?: long(name='Data', description='新创建的坐席id'),
  httpStatusCode?: long(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateThirdSsoAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThirdSsoAgentResponseBody(name='body'),
}

async function createThirdSsoAgentWithOptions(request: CreateThirdSsoAgentRequest, runtime: Util.RuntimeOptions): CreateThirdSsoAgentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountId)) {
    body['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.roleIds)) {
    bodyFlat['RoleIds'] = request.roleIds;
  }
  if (!Util.isUnset(request.skillGroupIds)) {
    bodyFlat['SkillGroupIds'] = request.skillGroupIds;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateThirdSsoAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createThirdSsoAgent(request: CreateThirdSsoAgentRequest): CreateThirdSsoAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThirdSsoAgentWithOptions(request, runtime);
}

model CreateTicketRequest {
  carbonCopy?: string(name='CarbonCopy'),
  categoryId?: long(name='CategoryId'),
  clientToken?: string(name='ClientToken'),
  creatorId?: long(name='CreatorId'),
  creatorName?: string(name='CreatorName'),
  creatorType?: int32(name='CreatorType'),
  formData?: string(name='FormData'),
  fromInfo?: string(name='FromInfo'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  priority?: int32(name='Priority'),
  templateId?: long(name='TemplateId'),
}

model CreateTicketResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketResponseBody(name='body'),
}

async function createTicketWithOptions(request: CreateTicketRequest, runtime: Util.RuntimeOptions): CreateTicketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.carbonCopy)) {
    body['CarbonCopy'] = request.carbonCopy;
  }
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.creatorName)) {
    body['CreatorName'] = request.creatorName;
  }
  if (!Util.isUnset(request.creatorType)) {
    body['CreatorType'] = request.creatorType;
  }
  if (!Util.isUnset(request.formData)) {
    body['FormData'] = request.formData;
  }
  if (!Util.isUnset(request.fromInfo)) {
    body['FromInfo'] = request.fromInfo;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.memberName)) {
    body['MemberName'] = request.memberName;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTicket',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketWithOptions(request, runtime);
}

model DeleteAgentRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model DeleteAgentResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAgentResponseBody(name='body'),
}

async function deleteAgentWithOptions(request: DeleteAgentRequest, runtime: Util.RuntimeOptions): DeleteAgentResponse {
  Util.validateModel(request);
  var query = {};
  query['AccountName'] = request.accountName;
  query['ClientToken'] = request.clientToken;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'DELETE',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAgentWithOptions(request, runtime);
}

model DeleteEntityRouteRequest {
  instanceId?: string(name='InstanceId'),
  uniqueId?: long(name='UniqueId'),
}

model DeleteEntityRouteResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEntityRouteResponseBody(name='body'),
}

async function deleteEntityRouteWithOptions(request: DeleteEntityRouteRequest, runtime: Util.RuntimeOptions): DeleteEntityRouteResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.uniqueId)) {
    body['UniqueId'] = request.uniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEntityRoute',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEntityRoute(request: DeleteEntityRouteRequest): DeleteEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEntityRouteWithOptions(request, runtime);
}

model DisableRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleId?: long(name='RoleId'),
}

model DisableRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRoleResponseBody(name='body'),
}

async function disableRoleWithOptions(request: DisableRoleRequest, runtime: Util.RuntimeOptions): DisableRoleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DisableRole',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableRole(request: DisableRoleRequest): DisableRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRoleWithOptions(request, runtime);
}

model EditEntityRouteRequest {
  departmentId?: string(name='DepartmentId'),
  entityBizCode?: string(name='EntityBizCode'),
  entityBizCodeType?: string(name='EntityBizCodeType'),
  entityId?: string(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  extInfo?: string(name='ExtInfo'),
  groupId?: long(name='GroupId'),
  instanceId?: string(name='InstanceId'),
  serviceId?: long(name='ServiceId'),
  uniqueId?: long(name='UniqueId'),
}

model EditEntityRouteResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: EditEntityRouteResponseBody(name='body'),
}

async function editEntityRouteWithOptions(request: EditEntityRouteRequest, runtime: Util.RuntimeOptions): EditEntityRouteResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.departmentId)) {
    body['DepartmentId'] = request.departmentId;
  }
  if (!Util.isUnset(request.entityBizCode)) {
    body['EntityBizCode'] = request.entityBizCode;
  }
  if (!Util.isUnset(request.entityBizCodeType)) {
    body['EntityBizCodeType'] = request.entityBizCodeType;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityName)) {
    body['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityRelationNumber)) {
    body['EntityRelationNumber'] = request.entityRelationNumber;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.groupId)) {
    body['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.uniqueId)) {
    body['UniqueId'] = request.uniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditEntityRoute',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editEntityRoute(request: EditEntityRouteRequest): EditEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return editEntityRouteWithOptions(request, runtime);
}

model EnableRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  roleId?: long(name='RoleId'),
}

model EnableRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableRoleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRoleResponseBody(name='body'),
}

async function enableRoleWithOptions(request: EnableRoleRequest, runtime: Util.RuntimeOptions): EnableRoleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EnableRole',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableRole(request: EnableRoleRequest): EnableRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRoleWithOptions(request, runtime);
}

model ExecuteActivityRequest {
  activityCode?: string(name='ActivityCode'),
  activityForm?: string(name='ActivityForm'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  ticketId?: long(name='TicketId'),
}

model ExecuteActivityResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecuteActivityResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteActivityResponseBody(name='body'),
}

async function executeActivityWithOptions(request: ExecuteActivityRequest, runtime: Util.RuntimeOptions): ExecuteActivityResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.activityCode)) {
    body['ActivityCode'] = request.activityCode;
  }
  if (!Util.isUnset(request.activityForm)) {
    body['ActivityForm'] = request.activityForm;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.ticketId)) {
    body['TicketId'] = request.ticketId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteActivity',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeActivity(request: ExecuteActivityRequest): ExecuteActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeActivityWithOptions(request, runtime);
}

model FetchCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model FetchCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FetchCallResponse = {
  headers: map[string]string(name='headers'),
  body: FetchCallResponseBody(name='body'),
}

async function fetchCallWithOptions(request: FetchCallRequest, runtime: Util.RuntimeOptions): FetchCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FetchCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fetchCall(request: FetchCallRequest): FetchCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchCallWithOptions(request, runtime);
}

model FinishHotlineServiceRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model FinishHotlineServiceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FinishHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: FinishHotlineServiceResponseBody(name='body'),
}

async function finishHotlineServiceWithOptions(request: FinishHotlineServiceRequest, runtime: Util.RuntimeOptions): FinishHotlineServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FinishHotlineService',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function finishHotlineService(request: FinishHotlineServiceRequest): FinishHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return finishHotlineServiceWithOptions(request, runtime);
}

model GenerateWebSocketSignRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GenerateWebSocketSignResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateWebSocketSignResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateWebSocketSignResponseBody(name='body'),
}

async function generateWebSocketSignWithOptions(request: GenerateWebSocketSignRequest, runtime: Util.RuntimeOptions): GenerateWebSocketSignResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateWebSocketSign',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateWebSocketSign(request: GenerateWebSocketSignRequest): GenerateWebSocketSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateWebSocketSignWithOptions(request, runtime);
}

model GetAgentRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetAgentResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountName?: string(name='AccountName'),
    agentId?: long(name='AgentId'),
    displayName?: string(name='DisplayName'),
    groupList?: [ 
      {
        channelType?: int32(name='ChannelType'),
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        name?: string(name='Name'),
        skillGroupId?: long(name='SkillGroupId'),
      }
    ](name='GroupList'),
    status?: int32(name='Status'),
    tenantId?: long(name='TenantId'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAgentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentResponseBody(name='body'),
}

async function getAgentWithOptions(request: GetAgentRequest, runtime: Util.RuntimeOptions): GetAgentResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAgent(request: GetAgentRequest): GetAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentWithOptions(request, runtime);
}

model GetAllDepartmentRequest {
  instanceId?: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到'),
}

model GetAllDepartmentResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      departmentId?: long(name='DepartmentId'),
      departmentName?: string(name='DepartmentName'),
      status?: int32(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GetAllDepartmentResponse = {
  headers: map[string]string(name='headers'),
  body: GetAllDepartmentResponseBody(name='body'),
}

async function getAllDepartmentWithOptions(request: GetAllDepartmentRequest, runtime: Util.RuntimeOptions): GetAllDepartmentResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAllDepartment',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAllDepartment(request: GetAllDepartmentRequest): GetAllDepartmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAllDepartmentWithOptions(request, runtime);
}

model GetAuthInfoRequest {
  appKey?: string(name='AppKey'),
  foreignId?: string(name='ForeignId'),
  instanceId?: string(name='InstanceId'),
}

model GetAuthInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    app?: string(name='App'),
    appKey?: string(name='AppKey'),
    appName?: string(name='AppName'),
    code?: string(name='Code'),
    sessionId?: string(name='SessionId'),
    tenantId?: string(name='TenantId'),
    time?: long(name='Time'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAuthInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthInfoResponseBody(name='body'),
}

async function getAuthInfoWithOptions(request: GetAuthInfoRequest, runtime: Util.RuntimeOptions): GetAuthInfoResponse {
  Util.validateModel(request);
  var query = {};
  query['AppKey'] = request.appKey;
  query['ForeignId'] = request.foreignId;
  query['InstanceId'] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthInfo',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthInfo(request: GetAuthInfoRequest): GetAuthInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthInfoWithOptions(request, runtime);
}

model GetByForeignIdRequest {
  foreignId?: string(name='ForeignId'),
  instanceId?: string(name='InstanceId'),
  sourceId?: long(name='SourceId'),
}

model GetByForeignIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GetByForeignIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetByForeignIdResponseBody(name='body'),
}

async function getByForeignIdWithOptions(request: GetByForeignIdRequest, runtime: Util.RuntimeOptions): GetByForeignIdResponse {
  Util.validateModel(request);
  var query = {};
  query['ForeignId'] = request.foreignId;
  query['InstanceId'] = request.instanceId;
  query['SourceId'] = request.sourceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetByForeignId',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getByForeignId(request: GetByForeignIdRequest): GetByForeignIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getByForeignIdWithOptions(request, runtime);
}

model GetCMSIdByForeignIdRequest {
  foreignId?: string(name='ForeignId'),
  instanceId?: string(name='InstanceId'),
  nick?: string(name='Nick'),
  sourceId?: long(name='SourceId'),
}

model GetCMSIdByForeignIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    anonymity?: boolean(name='Anonymity'),
    avatar?: string(name='Avatar'),
    customerTypeId?: int32(name='CustomerTypeId'),
    foreignId?: string(name='ForeignId'),
    gender?: string(name='Gender'),
    nick?: string(name='Nick'),
    phone?: string(name='Phone'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCMSIdByForeignIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetCMSIdByForeignIdResponseBody(name='body'),
}

async function getCMSIdByForeignIdWithOptions(request: GetCMSIdByForeignIdRequest, runtime: Util.RuntimeOptions): GetCMSIdByForeignIdResponse {
  Util.validateModel(request);
  var query = {};
  query['ForeignId'] = request.foreignId;
  query['InstanceId'] = request.instanceId;
  query['Nick'] = request.nick;
  query['SourceId'] = request.sourceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCMSIdByForeignId',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCMSIdByForeignId(request: GetCMSIdByForeignIdRequest): GetCMSIdByForeignIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCMSIdByForeignIdWithOptions(request, runtime);
}

model GetCallsPerDayRequest {
  dataId?: string(name='DataId'),
  dataIdEnd?: string(name='DataIdEnd'),
  dataIdStart?: string(name='DataIdStart'),
  havePhoneNumbers?: string(name='HavePhoneNumbers'),
  hourId?: string(name='HourId'),
  instanceId?: string(name='InstanceId'),
  minuteId?: string(name='MinuteId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  phoneNumbers?: string(name='PhoneNumbers'),
}

model GetCallsPerDayResponseBody = {
  code?: string(name='Code'),
  data?: {
    callsPerdayResponseList?: [ 
      {
        callInCnt?: string(name='CallInCnt'),
        callOutCnt?: string(name='CallOutCnt'),
        dataId?: string(name='DataId'),
        hourId?: string(name='HourId'),
        minuteId?: string(name='MinuteId'),
        phoneNum?: string(name='PhoneNum'),
        tenantId?: string(name='TenantId'),
        tenantName?: string(name='TenantName'),
      }
    ](name='CallsPerdayResponseList'),
    pageNo?: string(name='PageNo'),
    pageSize?: long(name='PageSize'),
    totalNum?: long(name='TotalNum'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetCallsPerDayResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallsPerDayResponseBody(name='body'),
}

async function getCallsPerDayWithOptions(request: GetCallsPerDayRequest, runtime: Util.RuntimeOptions): GetCallsPerDayResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCallsPerDay',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCallsPerDay(request: GetCallsPerDayRequest): GetCallsPerDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallsPerDayWithOptions(request, runtime);
}

model GetEntityRouteRequest {
  entityBizCode?: string(name='EntityBizCode'),
  entityId?: string(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  instanceId?: string(name='InstanceId'),
  uniqueId?: long(name='UniqueId'),
}

model GetEntityRouteResponseBody = {
  code?: string(name='Code'),
  data?: {
    departmentId?: string(name='DepartmentId'),
    entityBizCode?: string(name='EntityBizCode'),
    entityBizCodeType?: string(name='EntityBizCodeType'),
    entityId?: string(name='EntityId'),
    entityName?: string(name='EntityName'),
    entityRelationNumber?: string(name='EntityRelationNumber'),
    extInfo?: string(name='ExtInfo'),
    groupId?: long(name='GroupId'),
    serviceId?: long(name='ServiceId'),
    uniqueId?: long(name='UniqueId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEntityRouteResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityRouteResponseBody(name='body'),
}

async function getEntityRouteWithOptions(request: GetEntityRouteRequest, runtime: Util.RuntimeOptions): GetEntityRouteResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityBizCode)) {
    body['EntityBizCode'] = request.entityBizCode;
  }
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityName)) {
    body['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityRelationNumber)) {
    body['EntityRelationNumber'] = request.entityRelationNumber;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.uniqueId)) {
    body['UniqueId'] = request.uniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEntityRoute',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEntityRoute(request: GetEntityRouteRequest): GetEntityRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityRouteWithOptions(request, runtime);
}

model GetEntityRouteListRequest {
  entityName?: string(name='EntityName'),
  entityRelationNumber?: string(name='EntityRelationNumber'),
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model GetEntityRouteListResponseBody = {
  code?: string(name='Code'),
  data?: {
    entityRouteList?: [ 
      {
        departmentId?: string(name='DepartmentId'),
        entityBizCode?: string(name='EntityBizCode'),
        entityBizCodeType?: string(name='EntityBizCodeType'),
        entityId?: string(name='EntityId'),
        entityName?: string(name='EntityName'),
        entityRelationNumber?: string(name='EntityRelationNumber'),
        extInfo?: string(name='ExtInfo'),
        groupId?: string(name='GroupId'),
        serviceId?: string(name='ServiceId'),
        uniqueId?: long(name='UniqueId'),
      }
    ](name='EntityRouteList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEntityRouteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityRouteListResponseBody(name='body'),
}

async function getEntityRouteListWithOptions(request: GetEntityRouteListRequest, runtime: Util.RuntimeOptions): GetEntityRouteListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityName)) {
    body['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityRelationNumber)) {
    body['EntityRelationNumber'] = request.entityRelationNumber;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEntityRouteList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEntityRouteList(request: GetEntityRouteListRequest): GetEntityRouteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityRouteListWithOptions(request, runtime);
}

model GetEntityTagRelationRequest {
  entityId?: string(name='EntityId'),
  entityType?: string(name='EntityType'),
  instanceId?: string(name='InstanceId'),
}

model GetEntityTagRelationResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      entityId?: string(name='EntityId'),
      entityType?: string(name='EntityType'),
      tagCode?: string(name='TagCode'),
      tagGroupCode?: string(name='TagGroupCode'),
      tagGroupName?: string(name='TagGroupName'),
      tagName?: string(name='TagName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEntityTagRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityTagRelationResponseBody(name='body'),
}

async function getEntityTagRelationWithOptions(request: GetEntityTagRelationRequest, runtime: Util.RuntimeOptions): GetEntityTagRelationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetEntityTagRelation',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEntityTagRelation(request: GetEntityTagRelationRequest): GetEntityTagRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityTagRelationWithOptions(request, runtime);
}

model GetGrantedRoleIdsRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetGrantedRoleIdsResponseBody = {
  code?: string(name='Code'),
  data?: [ long ](name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetGrantedRoleIdsResponse = {
  headers: map[string]string(name='headers'),
  body: GetGrantedRoleIdsResponseBody(name='body'),
}

async function getGrantedRoleIdsWithOptions(request: GetGrantedRoleIdsRequest, runtime: Util.RuntimeOptions): GetGrantedRoleIdsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGrantedRoleIds',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGrantedRoleIds(request: GetGrantedRoleIdsRequest): GetGrantedRoleIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGrantedRoleIdsWithOptions(request, runtime);
}

model GetHotlineAgentDetailRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetHotlineAgentDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    agentId?: long(name='AgentId'),
    agentStatus?: int32(name='AgentStatus'),
    agentStatusCode?: string(name='AgentStatusCode'),
    assigned?: boolean(name='Assigned'),
    restType?: int32(name='RestType'),
    tenantId?: long(name='TenantId'),
    token?: string(name='Token'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHotlineAgentDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailResponseBody(name='body'),
}

async function getHotlineAgentDetailWithOptions(request: GetHotlineAgentDetailRequest, runtime: Util.RuntimeOptions): GetHotlineAgentDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineAgentDetail',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineAgentDetail(request: GetHotlineAgentDetailRequest): GetHotlineAgentDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentDetailWithOptions(request, runtime);
}

model GetHotlineAgentDetailReportRequest {
  currentPage?: int32(name='CurrentPage'),
  depIds?: [ long ](name='DepIds'),
  endDate?: long(name='EndDate'),
  groupIds?: [ long ](name='GroupIds'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
}

model GetHotlineAgentDetailReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    rows?: [  map[string]any ](name='Rows'),
    total?: int32(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetHotlineAgentDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentDetailReportResponseBody(name='body'),
}

async function getHotlineAgentDetailReportWithOptions(request: GetHotlineAgentDetailReportRequest, runtime: Util.RuntimeOptions): GetHotlineAgentDetailReportResponse {
  Util.validateModel(request);
  var query = {};
  query['CurrentPage'] = request.currentPage;
  query['DepIds'] = request.depIds;
  query['EndDate'] = request.endDate;
  query['GroupIds'] = request.groupIds;
  query['InstanceId'] = request.instanceId;
  query['PageSize'] = request.pageSize;
  query['StartDate'] = request.startDate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineAgentDetailReport',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineAgentDetailReport(request: GetHotlineAgentDetailReportRequest): GetHotlineAgentDetailReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentDetailReportWithOptions(request, runtime);
}

model GetHotlineAgentStatusRequest {
  accountName?: string(name='AccountName'),
  instanceId?: string(name='InstanceId'),
}

model GetHotlineAgentStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHotlineAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineAgentStatusResponseBody(name='body'),
}

async function getHotlineAgentStatusWithOptions(request: GetHotlineAgentStatusRequest, runtime: Util.RuntimeOptions): GetHotlineAgentStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineAgentStatus',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineAgentStatus(request: GetHotlineAgentStatusRequest): GetHotlineAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineAgentStatusWithOptions(request, runtime);
}

model GetHotlineGroupDetailReportRequest {
  currentPage?: int32(name='CurrentPage'),
  depIds?: [ long ](name='DepIds'),
  endDate?: long(name='EndDate'),
  groupIds?: [ long ](name='GroupIds'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
}

model GetHotlineGroupDetailReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    columns?: [ 
      {
        key?: string(name='Key'),
        title?: string(name='Title'),
      }
    ](name='Columns'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    rows?: [  map[string]any ](name='Rows'),
    total?: int32(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetHotlineGroupDetailReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineGroupDetailReportResponseBody(name='body'),
}

async function getHotlineGroupDetailReportWithOptions(request: GetHotlineGroupDetailReportRequest, runtime: Util.RuntimeOptions): GetHotlineGroupDetailReportResponse {
  Util.validateModel(request);
  var query = {};
  query['CurrentPage'] = request.currentPage;
  query['DepIds'] = request.depIds;
  query['EndDate'] = request.endDate;
  query['GroupIds'] = request.groupIds;
  query['InstanceId'] = request.instanceId;
  query['PageSize'] = request.pageSize;
  query['StartDate'] = request.startDate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineGroupDetailReport',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineGroupDetailReport(request: GetHotlineGroupDetailReportRequest): GetHotlineGroupDetailReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineGroupDetailReportWithOptions(request, runtime);
}

model GetHotlineWaitingNumberRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetHotlineWaitingNumberResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHotlineWaitingNumberResponse = {
  headers: map[string]string(name='headers'),
  body: GetHotlineWaitingNumberResponseBody(name='body'),
}

async function getHotlineWaitingNumberWithOptions(request: GetHotlineWaitingNumberRequest, runtime: Util.RuntimeOptions): GetHotlineWaitingNumberResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotlineWaitingNumber',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotlineWaitingNumber(request: GetHotlineWaitingNumberRequest): GetHotlineWaitingNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotlineWaitingNumberWithOptions(request, runtime);
}

model GetNumLocationRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  phoneNum?: string(name='PhoneNum'),
}

model GetNumLocationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNumLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumLocationResponseBody(name='body'),
}

async function getNumLocationWithOptions(request: GetNumLocationRequest, runtime: Util.RuntimeOptions): GetNumLocationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNumLocation',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNumLocation(request: GetNumLocationRequest): GetNumLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNumLocationWithOptions(request, runtime);
}

model GetOutbounNumListRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetOutbounNumListResponseBody = {
  code?: string(name='Code'),
  data?: {
    num?: [ 
      {
        description?: string(name='Description'),
        type?: int32(name='Type'),
        value?: string(name='Value'),
      }
    ](name='Num'),
    numGroup?: [ 
      {
        description?: string(name='Description'),
        type?: int32(name='Type'),
        value?: string(name='Value'),
      }
    ](name='NumGroup'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOutbounNumListResponse = {
  headers: map[string]string(name='headers'),
  body: GetOutbounNumListResponseBody(name='body'),
}

async function getOutbounNumListWithOptions(request: GetOutbounNumListRequest, runtime: Util.RuntimeOptions): GetOutbounNumListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOutbounNumList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOutbounNumList(request: GetOutbounNumListRequest): GetOutbounNumListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOutbounNumListWithOptions(request, runtime);
}

model GetOuterCallCenterDataListRequest {
  bizId?: string(name='BizId'),
  fromPhoneNum?: string(name='FromPhoneNum'),
  instanceId?: string(name='InstanceId'),
  queryEndTime?: string(name='QueryEndTime'),
  queryStartTime?: string(name='QueryStartTime'),
  sessionId?: string(name='SessionId'),
  toPhoneNum?: string(name='ToPhoneNum'),
}

model GetOuterCallCenterDataListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      acid?: string(name='Acid'),
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      callType?: string(name='CallType'),
      endReason?: string(name='EndReason'),
      extInfo?: string(name='ExtInfo'),
      fromPhoneNum?: string(name='FromPhoneNum'),
      interveneTime?: string(name='InterveneTime'),
      sessionId?: string(name='SessionId'),
      toPhoneNum?: string(name='ToPhoneNum'),
      userInfo?: string(name='UserInfo'),
    }
  ](name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOuterCallCenterDataListResponse = {
  headers: map[string]string(name='headers'),
  body: GetOuterCallCenterDataListResponseBody(name='body'),
}

async function getOuterCallCenterDataListWithOptions(request: GetOuterCallCenterDataListRequest, runtime: Util.RuntimeOptions): GetOuterCallCenterDataListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bizId)) {
    body['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.fromPhoneNum)) {
    body['FromPhoneNum'] = request.fromPhoneNum;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.queryEndTime)) {
    body['QueryEndTime'] = request.queryEndTime;
  }
  if (!Util.isUnset(request.queryStartTime)) {
    body['QueryStartTime'] = request.queryStartTime;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.toPhoneNum)) {
    body['ToPhoneNum'] = request.toPhoneNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOuterCallCenterDataList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOuterCallCenterDataList(request: GetOuterCallCenterDataListRequest): GetOuterCallCenterDataListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOuterCallCenterDataListWithOptions(request, runtime);
}

model GetTagListRequest {
  entityId?: string(name='EntityId'),
  entityType?: string(name='EntityType'),
  instanceId?: string(name='InstanceId'),
}

model GetTagListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      scenarioCode?: string(name='ScenarioCode'),
      tagGroupCode?: string(name='TagGroupCode'),
      tagGroupName?: string(name='TagGroupName'),
      tagValues?: [ 
        {
          description?: string(name='Description'),
          entityRelationNumber?: string(name='EntityRelationNumber'),
          status?: string(name='Status'),
          tagCode?: string(name='TagCode'),
          tagGroupCode?: string(name='TagGroupCode'),
          tagGroupName?: string(name='TagGroupName'),
          tagName?: string(name='TagName'),
        }
      ](name='TagValues'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTagListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTagListResponseBody(name='body'),
}

async function getTagListWithOptions(request: GetTagListRequest, runtime: Util.RuntimeOptions): GetTagListResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityType)) {
    body['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTagList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTagList(request: GetTagListRequest): GetTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagListWithOptions(request, runtime);
}

model GetTicketByCaseIdRequest {
  caseId?: long(name='CaseId'),
  instanceId?: string(name='InstanceId'),
}

model GetTicketByCaseIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    buId?: long(name='BuId'),
    caseId?: long(name='CaseId'),
    caseStatus?: int32(name='CaseStatus'),
    caseType?: int32(name='CaseType'),
    channelId?: string(name='ChannelId'),
    departmentId?: long(name='DepartmentId'),
    endTime?: long(name='EndTime'),
    extAttrs?: map[string]any(name='ExtAttrs'),
    fromInfo?: string(name='FromInfo'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    memberId?: long(name='MemberId'),
    memberName?: string(name='MemberName'),
    owner?: long(name='Owner'),
    ownerName?: string(name='OwnerName'),
    parentId?: long(name='ParentId'),
    priority?: int32(name='Priority'),
    questionId?: string(name='QuestionId'),
    questionInfo?: string(name='QuestionInfo'),
    sopCateId?: long(name='SopCateId'),
    srType?: long(name='SrType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GetTicketByCaseIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetTicketByCaseIdResponseBody(name='body'),
}

async function getTicketByCaseIdWithOptions(request: GetTicketByCaseIdRequest, runtime: Util.RuntimeOptions): GetTicketByCaseIdResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.caseId)) {
    body['CaseId'] = request.caseId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTicketByCaseId',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTicketByCaseId(request: GetTicketByCaseIdRequest): GetTicketByCaseIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketByCaseIdWithOptions(request, runtime);
}

model GetTicketTemplateSchemaRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  templateId?: long(name='TemplateId'),
}

model GetTicketTemplateSchemaResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTicketTemplateSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: GetTicketTemplateSchemaResponseBody(name='body'),
}

async function getTicketTemplateSchemaWithOptions(request: GetTicketTemplateSchemaRequest, runtime: Util.RuntimeOptions): GetTicketTemplateSchemaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTicketTemplateSchema',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTicketTemplateSchema(request: GetTicketTemplateSchemaRequest): GetTicketTemplateSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketTemplateSchemaWithOptions(request, runtime);
}

model GetUserTokenRequest {
  appKey?: string(name='AppKey', description='appKey'),
  instanceId?: string(name='InstanceId', description='实例id'),
  nick?: string(name='Nick', description='昵称'),
  userId?: string(name='UserId', description='用户id'),
}

model GetUserTokenResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    expires?: long(name='Expires'),
    token?: string(name='Token'),
  }(name='Data'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='鹰眼id'),
  success?: boolean(name='Success', description='是否调用成功'),
}

model GetUserTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserTokenResponseBody(name='body'),
}

async function getUserTokenWithOptions(request: GetUserTokenRequest, runtime: Util.RuntimeOptions): GetUserTokenResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nick)) {
    body['Nick'] = request.nick;
  }
  if (!Util.isUnset(request.userId)) {
    body['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUserToken',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserToken(request: GetUserTokenRequest): GetUserTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserTokenWithOptions(request, runtime);
}

model GrantRolesRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operator?: string(name='Operator'),
  roleId?: [ long ](name='RoleId'),
}

model GrantRolesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GrantRolesResponse = {
  headers: map[string]string(name='headers'),
  body: GrantRolesResponseBody(name='body'),
}

async function grantRolesWithOptions(request: GrantRolesRequest, runtime: Util.RuntimeOptions): GrantRolesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GrantRoles',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantRoles(request: GrantRolesRequest): GrantRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantRolesWithOptions(request, runtime);
}

model HangupCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model HangupCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HangupCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupCallResponseBody(name='body'),
}

async function hangupCallWithOptions(request: HangupCallRequest, runtime: Util.RuntimeOptions): HangupCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HangupCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hangupCall(request: HangupCallRequest): HangupCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return hangupCallWithOptions(request, runtime);
}

model HangupThirdCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model HangupThirdCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HangupThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: HangupThirdCallResponseBody(name='body'),
}

async function hangupThirdCallWithOptions(request: HangupThirdCallRequest, runtime: Util.RuntimeOptions): HangupThirdCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HangupThirdCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hangupThirdCall(request: HangupThirdCallRequest): HangupThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return hangupThirdCallWithOptions(request, runtime);
}

model HoldCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model HoldCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HoldCallResponse = {
  headers: map[string]string(name='headers'),
  body: HoldCallResponseBody(name='body'),
}

async function holdCallWithOptions(request: HoldCallRequest, runtime: Util.RuntimeOptions): HoldCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HoldCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function holdCall(request: HoldCallRequest): HoldCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return holdCallWithOptions(request, runtime);
}

model JoinThirdCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model JoinThirdCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model JoinThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: JoinThirdCallResponseBody(name='body'),
}

async function joinThirdCallWithOptions(request: JoinThirdCallRequest, runtime: Util.RuntimeOptions): JoinThirdCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'JoinThirdCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinThirdCall(request: JoinThirdCallRequest): JoinThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinThirdCallWithOptions(request, runtime);
}

model ListAgentBySkillGroupIdRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: long(name='SkillGroupId'),
}

model ListAgentBySkillGroupIdResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      accountName?: string(name='AccountName'),
      agentId?: long(name='AgentId'),
      displayName?: string(name='DisplayName'),
      status?: int32(name='Status'),
      tenantId?: long(name='TenantId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentBySkillGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentBySkillGroupIdResponseBody(name='body'),
}

async function listAgentBySkillGroupIdWithOptions(request: ListAgentBySkillGroupIdRequest, runtime: Util.RuntimeOptions): ListAgentBySkillGroupIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentBySkillGroupId',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAgentBySkillGroupId(request: ListAgentBySkillGroupIdRequest): ListAgentBySkillGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentBySkillGroupIdWithOptions(request, runtime);
}

model ListAllHotLineSkillGroupsRequest {
  accountName?: string(name='AccountName'),
  instanceId?: string(name='InstanceId'),
}

model ListAllHotLineSkillGroupsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      depGroup?: {
        depGroupId?: long(name='DepGroupId'),
        depGroupName?: string(name='DepGroupName'),
      }(name='DepGroup'),
      skillGroupAgents?: [ 
        {
          agents?: [ 
            {
              accountName?: string(name='AccountName'),
              agentId?: long(name='AgentId'),
              displayName?: string(name='DisplayName'),
              status?: long(name='Status'),
            }
          ](name='Agents'),
          skillGroup?: {
            displayName?: string(name='DisplayName'),
            skillGroupId?: long(name='SkillGroupId'),
          }(name='SkillGroup'),
        }
      ](name='SkillGroupAgents'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model ListAllHotLineSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAllHotLineSkillGroupsResponseBody(name='body'),
}

async function listAllHotLineSkillGroupsWithOptions(request: ListAllHotLineSkillGroupsRequest, runtime: Util.RuntimeOptions): ListAllHotLineSkillGroupsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAllHotLineSkillGroups',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAllHotLineSkillGroups(request: ListAllHotLineSkillGroupsRequest): ListAllHotLineSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAllHotLineSkillGroupsWithOptions(request, runtime);
}

model ListHotlineRecordRequest {
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model ListHotlineRecordResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      callId?: string(name='CallId'),
      connectionId?: string(name='ConnectionId'),
      endTime?: boolean(name='EndTime'),
      startTime?: boolean(name='StartTime'),
      url?: string(name='Url'),
    }
  ](name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListHotlineRecordResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotlineRecordResponseBody(name='body'),
}

async function listHotlineRecordWithOptions(request: ListHotlineRecordRequest, runtime: Util.RuntimeOptions): ListHotlineRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotlineRecord',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotlineRecord(request: ListHotlineRecordRequest): ListHotlineRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHotlineRecordWithOptions(request, runtime);
}

model ListOutboundPhoneNumberRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model ListOutboundPhoneNumberResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListOutboundPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundPhoneNumberResponseBody(name='body'),
}

async function listOutboundPhoneNumberWithOptions(request: ListOutboundPhoneNumberRequest, runtime: Util.RuntimeOptions): ListOutboundPhoneNumberResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOutboundPhoneNumber',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOutboundPhoneNumber(request: ListOutboundPhoneNumberRequest): ListOutboundPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundPhoneNumberWithOptions(request, runtime);
}

model ListSkillGroupRequest {
  channelType?: int32(name='ChannelType'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model ListSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      channelType?: int32(name='ChannelType'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      name?: string(name='Name'),
      skillGroupId?: long(name='SkillGroupId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupResponseBody(name='body'),
}

async function listSkillGroupWithOptions(request: ListSkillGroupRequest, runtime: Util.RuntimeOptions): ListSkillGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSkillGroup',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSkillGroup(request: ListSkillGroupRequest): ListSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupWithOptions(request, runtime);
}

model QueryHotlineDashboardRequest {
  currentPageNum?: int32(name='CurrentPageNum', description='当前页码'),
  departmentIdList?: [ long ](name='DepartmentIdList', description='部门标识列表'),
  endDate?: long(name='EndDate', description='j结束时间'),
  instanceId?: string(name='InstanceId', description='A short description of struct'),
  pageSize?: int32(name='PageSize', description='页面大小'),
  servicerIdList?: [ long ](name='ServicerIdList', description='坐席标识列表'),
  sortFieldList?: [ string ](name='SortFieldList', description='排序字段集合'),
  startDate?: long(name='StartDate', description='开始时间'),
}

model QueryHotlineDashboardShrinkRequest {
  currentPageNum?: int32(name='CurrentPageNum', description='当前页码'),
  departmentIdListShrink?: string(name='DepartmentIdList', description='部门标识列表'),
  endDate?: long(name='EndDate', description='j结束时间'),
  instanceId?: string(name='InstanceId', description='A short description of struct'),
  pageSize?: int32(name='PageSize', description='页面大小'),
  servicerIdListShrink?: string(name='ServicerIdList', description='坐席标识列表'),
  sortFieldListShrink?: string(name='SortFieldList', description='排序字段集合'),
  startDate?: long(name='StartDate', description='开始时间'),
}

model QueryHotlineDashboardResponseBody = {
  code?: string(name='Code'),
  data?: {
    results?: [ 
      {
        dateId?: string(name='DateId', description='日期'),
        departmentId?: long(name='DepartmentId', description='部门标识'),
        departmentName?: string(name='DepartmentName', description='部门名称'),
        effectiveInCalls?: int32(name='EffectiveInCalls', description='有效呼入量'),
        effectiveInServiceNotes?: int32(name='EffectiveInServiceNotes', description='有效呼入小计量'),
        effectiveOutCalls?: int32(name='EffectiveOutCalls', description='有效外呼量'),
        effectiveOutServiceNotes?: int32(name='EffectiveOutServiceNotes', description='有效外呼小计量'),
        servicerId?: long(name='ServicerId', description='坐席标识'),
        servicerRealName?: string(name='ServicerRealName', description='坐席真实姓名'),
        servicerShowName?: string(name='ServicerShowName', description='坐席对外展示名称'),
      }
    ](name='Results'),
    total?: int32(name='Total', description='查询结果条数'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态编码'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model QueryHotlineDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotlineDashboardResponseBody(name='body'),
}

async function queryHotlineDashboardWithOptions(tmpReq: QueryHotlineDashboardRequest, runtime: Util.RuntimeOptions): QueryHotlineDashboardResponse {
  Util.validateModel(tmpReq);
  var request = new QueryHotlineDashboardShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.departmentIdList)) {
    request.departmentIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departmentIdList, 'DepartmentIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.servicerIdList)) {
    request.servicerIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.servicerIdList, 'ServicerIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.sortFieldList)) {
    request.sortFieldListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sortFieldList, 'SortFieldList', 'json');
  }
  var query = {};
  query['CurrentPageNum'] = request.currentPageNum;
  query['DepartmentIdList'] = request.departmentIdListShrink;
  query['EndDate'] = request.endDate;
  query['InstanceId'] = request.instanceId;
  query['PageSize'] = request.pageSize;
  query['ServicerIdList'] = request.servicerIdListShrink;
  query['SortFieldList'] = request.sortFieldListShrink;
  query['StartDate'] = request.startDate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotlineDashboard',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHotlineDashboard(request: QueryHotlineDashboardRequest): QueryHotlineDashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHotlineDashboardWithOptions(request, runtime);
}

model QueryHotlineSessionRequest {
  acid?: string(name='Acid'),
  callResult?: string(name='CallResult'),
  callType?: int32(name='CallType'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  groupId?: long(name='GroupId'),
  groupName?: string(name='GroupName'),
  instanceId?: string(name='InstanceId'),
  memberId?: string(name='MemberId'),
  memberName?: string(name='MemberName'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  params?: string(name='Params'),
  queryEndTime?: long(name='QueryEndTime'),
  queryStartTime?: long(name='QueryStartTime'),
  requestId?: string(name='RequestId'),
  servicerId?: string(name='ServicerId'),
  servicerName?: string(name='ServicerName'),
}

model QueryHotlineSessionResponseBody = {
  code?: string(name='Code'),
  data?: {
    callDetailRecord?: [ 
      {
        acid?: string(name='Acid'),
        callContinueTime?: int32(name='CallContinueTime'),
        callResult?: string(name='CallResult'),
        callType?: int32(name='CallType'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        createTime?: string(name='CreateTime'),
        evaluationLevel?: int32(name='EvaluationLevel'),
        evaluationScore?: int32(name='EvaluationScore'),
        groupId?: long(name='GroupId'),
        groupName?: string(name='GroupName'),
        hangUpRole?: string(name='HangUpRole'),
        hangUpTime?: string(name='HangUpTime'),
        inQueueTime?: string(name='InQueueTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        outQueueTime?: string(name='OutQueueTime'),
        pickUpTime?: string(name='PickUpTime'),
        queueUpContinueTime?: int32(name='QueueUpContinueTime'),
        ringContinueTime?: int32(name='RingContinueTime'),
        ringEndTime?: string(name='RingEndTime'),
        ringStartTime?: string(name='RingStartTime'),
        servicerId?: string(name='ServicerId'),
        servicerName?: string(name='ServicerName'),
      }
    ](name='CallDetailRecord'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryHotlineSessionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHotlineSessionResponseBody(name='body'),
}

async function queryHotlineSessionWithOptions(request: QueryHotlineSessionRequest, runtime: Util.RuntimeOptions): QueryHotlineSessionResponse {
  Util.validateModel(request);
  var query = {};
  query['Acid'] = request.acid;
  query['CallResult'] = request.callResult;
  query['CallType'] = request.callType;
  query['CalledNumber'] = request.calledNumber;
  query['CallingNumber'] = request.callingNumber;
  query['GroupId'] = request.groupId;
  query['GroupName'] = request.groupName;
  query['InstanceId'] = request.instanceId;
  query['MemberId'] = request.memberId;
  query['MemberName'] = request.memberName;
  query['PageNo'] = request.pageNo;
  query['PageSize'] = request.pageSize;
  query['Params'] = request.params;
  query['QueryEndTime'] = request.queryEndTime;
  query['QueryStartTime'] = request.queryStartTime;
  query['RequestId'] = request.requestId;
  query['ServicerId'] = request.servicerId;
  query['ServicerName'] = request.servicerName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotlineSession',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHotlineSession(request: QueryHotlineSessionRequest): QueryHotlineSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHotlineSessionWithOptions(request, runtime);
}

model QueryRelationTicketsRequest {
  caseId?: long(name='CaseId'),
  caseType?: int32(name='CaseType'),
  channelId?: string(name='ChannelId'),
  channelType?: int32(name='ChannelType'),
  currentPage?: int32(name='CurrentPage'),
  dealId?: long(name='DealId'),
  endCaseGmtCreate?: long(name='EndCaseGmtCreate'),
  extra?: map[string]any(name='Extra'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  pageSize?: int32(name='PageSize'),
  srType?: int32(name='SrType'),
  startCaseGmtCreate?: long(name='StartCaseGmtCreate'),
  taskStatus?: int32(name='TaskStatus'),
  touchId?: long(name='TouchId'),
}

model QueryRelationTicketsResponseBody = {
  cnePageSize?: int32(name='CnePageSize'),
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: [ 
    {
      assignTime?: long(name='AssignTime'),
      buId?: long(name='BuId'),
      caseBuId?: long(name='CaseBuId'),
      caseDepartmentId?: long(name='CaseDepartmentId'),
      caseGmtCreate?: long(name='CaseGmtCreate'),
      caseId?: long(name='CaseId'),
      caseStatus?: int32(name='CaseStatus'),
      caseType?: int32(name='CaseType'),
      channelId?: string(name='ChannelId'),
      channelType?: int32(name='ChannelType'),
      creatorId?: long(name='CreatorId'),
      deadLine?: long(name='DeadLine'),
      dealId?: long(name='DealId'),
      dealTime?: long(name='DealTime'),
      departmentId?: long(name='DepartmentId'),
      extAttrs?: map[string]any(name='ExtAttrs'),
      formId?: long(name='FormId'),
      fromInfo?: string(name='FromInfo'),
      gaseGmtModified?: long(name='GaseGmtModified'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      memberId?: long(name='MemberId'),
      memberName?: string(name='MemberName'),
      owner?: long(name='Owner'),
      ownerName?: string(name='OwnerName'),
      parentId?: long(name='ParentId'),
      priority?: int32(name='Priority'),
      questionId?: string(name='QuestionId'),
      questionInfo?: string(name='QuestionInfo'),
      refCaseId?: long(name='RefCaseId'),
      relationCase?: [ 
        {
          assignTime?: long(name='AssignTime'),
          buId?: long(name='BuId'),
          caseBuId?: long(name='CaseBuId'),
          caseDepartmentId?: long(name='CaseDepartmentId'),
          caseGmtCreate?: long(name='CaseGmtCreate'),
          caseGmtModified?: long(name='CaseGmtModified'),
          caseId?: long(name='CaseId'),
          caseStatus?: int32(name='CaseStatus'),
          caseType?: int32(name='CaseType'),
          channelId?: string(name='ChannelId'),
          channelType?: int32(name='ChannelType'),
          creatorId?: long(name='CreatorId'),
          deadLine?: long(name='DeadLine'),
          dealId?: long(name='DealId'),
          dealTime?: long(name='DealTime'),
          departmentId?: long(name='DepartmentId'),
          extAttrs?: map[string]any(name='ExtAttrs'),
          formId?: long(name='FormId'),
          fromInfo?: string(name='FromInfo'),
          gmtCreate?: long(name='GmtCreate'),
          gmtModified?: long(name='GmtModified'),
          groupId?: long(name='GroupId'),
          groupName?: string(name='GroupName'),
          memberId?: long(name='MemberId'),
          memberName?: string(name='MemberName'),
          owner?: long(name='Owner'),
          ownerName?: string(name='OwnerName'),
          parentId?: long(name='ParentId'),
          priority?: int32(name='Priority'),
          questionId?: string(name='QuestionId'),
          questionInfoQuestionInfo?: string(name='QuestionInfoQuestionInfo'),
          refCaseId?: long(name='RefCaseId'),
          serviceType?: int32(name='ServiceType'),
          taskId?: long(name='TaskId'),
          taskStatus?: int32(name='TaskStatus'),
          taskType?: int32(name='TaskType'),
          templateId?: long(name='TemplateId'),
          title?: string(name='Title'),
          userServiceId?: long(name='UserServiceId'),
        }
      ](name='RelationCase'),
      serviceType?: int32(name='ServiceType'),
      srType?: long(name='SrType'),
      taskId?: long(name='TaskId'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
      templateId?: long(name='TemplateId'),
      title?: string(name='Title'),
      userServiceId?: long(name='UserServiceId'),
    }
  ](name='Data'),
  firstResult?: int32(name='FirstResult'),
  message?: string(name='Message'),
  nextPage?: int32(name='NextPage'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
}

model QueryRelationTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRelationTicketsResponseBody(name='body'),
}

async function queryRelationTicketsWithOptions(request: QueryRelationTicketsRequest, runtime: Util.RuntimeOptions): QueryRelationTicketsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.caseId)) {
    body['CaseId'] = request.caseId;
  }
  if (!Util.isUnset(request.caseType)) {
    body['CaseType'] = request.caseType;
  }
  if (!Util.isUnset(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealId)) {
    body['DealId'] = request.dealId;
  }
  if (!Util.isUnset(request.endCaseGmtCreate)) {
    body['EndCaseGmtCreate'] = request.endCaseGmtCreate;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.extra)) {
    bodyFlat['Extra'] = request.extra;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.srType)) {
    body['SrType'] = request.srType;
  }
  if (!Util.isUnset(request.startCaseGmtCreate)) {
    body['StartCaseGmtCreate'] = request.startCaseGmtCreate;
  }
  if (!Util.isUnset(request.taskStatus)) {
    body['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.touchId)) {
    body['TouchId'] = request.touchId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRelationTickets',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRelationTickets(request: QueryRelationTicketsRequest): QueryRelationTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRelationTicketsWithOptions(request, runtime);
}

model QueryRingDetailListRequest {
  callOutStatus?: string(name='CallOutStatus'),
  endDate?: long(name='EndDate'),
  extra?: string(name='Extra'),
  fromPhoneNumList?: map[string]any(name='FromPhoneNumList'),
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
  toPhoneNumList?: map[string]any(name='ToPhoneNumList'),
}

model QueryRingDetailListShrinkRequest {
  callOutStatus?: string(name='CallOutStatus'),
  endDate?: long(name='EndDate'),
  extra?: string(name='Extra'),
  fromPhoneNumListShrink?: string(name='FromPhoneNumList'),
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startDate?: long(name='StartDate'),
  toPhoneNumListShrink?: string(name='ToPhoneNumList'),
}

model QueryRingDetailListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRingDetailListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRingDetailListResponseBody(name='body'),
}

async function queryRingDetailListWithOptions(tmpReq: QueryRingDetailListRequest, runtime: Util.RuntimeOptions): QueryRingDetailListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryRingDetailListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fromPhoneNumList)) {
    request.fromPhoneNumListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fromPhoneNumList, 'FromPhoneNumList', 'json');
  }
  if (!Util.isUnset(tmpReq.toPhoneNumList)) {
    request.toPhoneNumListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.toPhoneNumList, 'ToPhoneNumList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.callOutStatus)) {
    body['CallOutStatus'] = request.callOutStatus;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.extra)) {
    body['Extra'] = request.extra;
  }
  if (!Util.isUnset(request.fromPhoneNumListShrink)) {
    body['FromPhoneNumList'] = request.fromPhoneNumListShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.toPhoneNumListShrink)) {
    body['ToPhoneNumList'] = request.toPhoneNumListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryRingDetailList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRingDetailList(request: QueryRingDetailListRequest): QueryRingDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRingDetailListWithOptions(request, runtime);
}

model QueryServiceConfigRequest {
  instanceId?: string(name='InstanceId'),
  parameters?: string(name='Parameters'),
  viewCode?: string(name='ViewCode'),
}

model QueryServiceConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryServiceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServiceConfigResponseBody(name='body'),
}

async function queryServiceConfigWithOptions(request: QueryServiceConfigRequest, runtime: Util.RuntimeOptions): QueryServiceConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryServiceConfig',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryServiceConfig(request: QueryServiceConfigRequest): QueryServiceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServiceConfigWithOptions(request, runtime);
}

model QueryServicerByDepartmentAndMixNameRequest {
  currentPageNum?: long(name='CurrentPageNum', description='页码'),
  departmentIdList?: [ long ](name='DepartmentIdList', description='部门标识列表'),
  instanceId?: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到'),
  keyWord?: string(name='KeyWord', description='关键字'),
  pageSize?: long(name='PageSize', description='页大小'),
}

model QueryServicerByDepartmentAndMixNameShrinkRequest {
  currentPageNum?: long(name='CurrentPageNum', description='页码'),
  departmentIdListShrink?: string(name='DepartmentIdList', description='部门标识列表'),
  instanceId?: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到'),
  keyWord?: string(name='KeyWord', description='关键字'),
  pageSize?: long(name='PageSize', description='页大小'),
}

model QueryServicerByDepartmentAndMixNameResponseBody = {
  code?: string(name='Code'),
  data?: {
    results?: [ 
      {
        accountName?: string(name='AccountName'),
        departmentId?: long(name='DepartmentId'),
        departmentName?: string(name='DepartmentName'),
        realName?: string(name='RealName'),
        servicerId?: long(name='ServicerId'),
        showName?: string(name='ShowName'),
        userStatus?: int32(name='UserStatus'),
      }
    ](name='Results'),
    total?: int32(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model QueryServicerByDepartmentAndMixNameResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServicerByDepartmentAndMixNameResponseBody(name='body'),
}

async function queryServicerByDepartmentAndMixNameWithOptions(tmpReq: QueryServicerByDepartmentAndMixNameRequest, runtime: Util.RuntimeOptions): QueryServicerByDepartmentAndMixNameResponse {
  Util.validateModel(tmpReq);
  var request = new QueryServicerByDepartmentAndMixNameShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.departmentIdList)) {
    request.departmentIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.departmentIdList, 'DepartmentIdList', 'json');
  }
  var query = {};
  query['CurrentPageNum'] = request.currentPageNum;
  query['DepartmentIdList'] = request.departmentIdListShrink;
  query['InstanceId'] = request.instanceId;
  query['KeyWord'] = request.keyWord;
  query['PageSize'] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryServicerByDepartmentAndMixName',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryServicerByDepartmentAndMixName(request: QueryServicerByDepartmentAndMixNameRequest): QueryServicerByDepartmentAndMixNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServicerByDepartmentAndMixNameWithOptions(request, runtime);
}

model QueryServicerByIdRequest {
  instanceId?: string(name='InstanceId', description='AICCS实例ID，在智能联络中心控制台上可以看到'),
  servicerId?: long(name='ServicerId', description='坐席标识'),
}

model QueryServicerByIdResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: {
    accountName?: string(name='AccountName', description='登录名'),
    departmentId?: long(name='DepartmentId', description='部门标识'),
    realName?: string(name='RealName', description='真实名称'),
    servicerId?: long(name='ServicerId', description='坐席标识'),
    showName?: string(name='ShowName', description='对外展示名'),
    userStatus?: int32(name='UserStatus', description='用户状态：0正常 1冻结 2删除 -2临时冻结'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model QueryServicerByIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServicerByIdResponseBody(name='body'),
}

async function queryServicerByIdWithOptions(request: QueryServicerByIdRequest, runtime: Util.RuntimeOptions): QueryServicerByIdResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceId'] = request.instanceId;
  query['ServicerId'] = request.servicerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryServicerById',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryServicerById(request: QueryServicerByIdRequest): QueryServicerByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServicerByIdWithOptions(request, runtime);
}

model QuerySkillGroupsRequest {
  clientToken?: string(name='ClientToken'),
  groupId?: long(name='GroupId'),
  groupName?: string(name='GroupName'),
  groupType?: int32(name='GroupType'),
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QuerySkillGroupsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  data?: [ 
    {
      channelType?: int32(name='ChannelType'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      skillGroupId?: long(name='SkillGroupId'),
      skillGroupName?: string(name='SkillGroupName'),
    }
  ](name='Data'),
  onePageSize?: int32(name='OnePageSize'),
  requestId?: string(name='RequestId'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
}

model QuerySkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySkillGroupsResponseBody(name='body'),
}

async function querySkillGroupsWithOptions(request: QuerySkillGroupsRequest, runtime: Util.RuntimeOptions): QuerySkillGroupsResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['GroupId'] = request.groupId;
  query['GroupName'] = request.groupName;
  query['GroupType'] = request.groupType;
  query['InstanceId'] = request.instanceId;
  query['PageNo'] = request.pageNo;
  query['PageSize'] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySkillGroups',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySkillGroups(request: QuerySkillGroupsRequest): QuerySkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySkillGroupsWithOptions(request, runtime);
}

model QueryTicketActionsRequest {
  actionCodeList?: [ int32 ](name='ActionCodeList'),
  instanceId?: string(name='InstanceId'),
  ticketId?: string(name='TicketId'),
}

model QueryTicketActionsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTicketActionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketActionsResponseBody(name='body'),
}

async function queryTicketActionsWithOptions(request: QueryTicketActionsRequest, runtime: Util.RuntimeOptions): QueryTicketActionsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.actionCodeList)) {
    body['ActionCodeList'] = request.actionCodeList;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ticketId)) {
    body['TicketId'] = request.ticketId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTicketActions',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTicketActions(request: QueryTicketActionsRequest): QueryTicketActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketActionsWithOptions(request, runtime);
}

model QueryTicketCountRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
}

model QueryTicketCountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTicketCountResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketCountResponseBody(name='body'),
}

async function queryTicketCountWithOptions(request: QueryTicketCountRequest, runtime: Util.RuntimeOptions): QueryTicketCountResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['InstanceId'] = request.instanceId;
  query['OperatorId'] = request.operatorId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTicketCount',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTicketCount(request: QueryTicketCountRequest): QueryTicketCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketCountWithOptions(request, runtime);
}

model QueryTicketsRequest {
  accountName?: string(name='AccountName'),
  caseId?: long(name='CaseId'),
  caseStatus?: int32(name='CaseStatus'),
  caseType?: int32(name='CaseType'),
  channelId?: string(name='ChannelId'),
  channelType?: int32(name='ChannelType'),
  currentPage?: int32(name='CurrentPage'),
  dealId?: long(name='DealId'),
  endCaseGmtCreate?: long(name='EndCaseGmtCreate'),
  extra?: map[string]any(name='Extra'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  pageSize?: int32(name='PageSize'),
  parentCaseId?: long(name='ParentCaseId'),
  srType?: long(name='SrType'),
  startCaseGmtCreate?: long(name='StartCaseGmtCreate'),
  taskStatus?: int32(name='TaskStatus'),
  touchId?: long(name='TouchId'),
}

model QueryTicketsShrinkRequest {
  accountName?: string(name='AccountName'),
  caseId?: long(name='CaseId'),
  caseStatus?: int32(name='CaseStatus'),
  caseType?: int32(name='CaseType'),
  channelId?: string(name='ChannelId'),
  channelType?: int32(name='ChannelType'),
  currentPage?: int32(name='CurrentPage'),
  dealId?: long(name='DealId'),
  endCaseGmtCreate?: long(name='EndCaseGmtCreate'),
  extraShrink?: string(name='Extra'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  pageSize?: int32(name='PageSize'),
  parentCaseId?: long(name='ParentCaseId'),
  srType?: long(name='SrType'),
  startCaseGmtCreate?: long(name='StartCaseGmtCreate'),
  taskStatus?: int32(name='TaskStatus'),
  touchId?: long(name='TouchId'),
}

model QueryTicketsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketsResponseBody(name='body'),
}

async function queryTicketsWithOptions(tmpReq: QueryTicketsRequest, runtime: Util.RuntimeOptions): QueryTicketsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryTicketsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extra)) {
    request.extraShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extra, 'Extra', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.caseId)) {
    body['CaseId'] = request.caseId;
  }
  if (!Util.isUnset(request.caseStatus)) {
    body['CaseStatus'] = request.caseStatus;
  }
  if (!Util.isUnset(request.caseType)) {
    body['CaseType'] = request.caseType;
  }
  if (!Util.isUnset(request.channelId)) {
    body['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealId)) {
    body['DealId'] = request.dealId;
  }
  if (!Util.isUnset(request.endCaseGmtCreate)) {
    body['EndCaseGmtCreate'] = request.endCaseGmtCreate;
  }
  if (!Util.isUnset(request.extraShrink)) {
    body['Extra'] = request.extraShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentCaseId)) {
    body['ParentCaseId'] = request.parentCaseId;
  }
  if (!Util.isUnset(request.srType)) {
    body['SrType'] = request.srType;
  }
  if (!Util.isUnset(request.startCaseGmtCreate)) {
    body['StartCaseGmtCreate'] = request.startCaseGmtCreate;
  }
  if (!Util.isUnset(request.taskStatus)) {
    body['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.touchId)) {
    body['TouchId'] = request.touchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTickets',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTickets(request: QueryTicketsRequest): QueryTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketsWithOptions(request, runtime);
}

model RemoveSkillGroupRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model RemoveSkillGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSkillGroupResponseBody(name='body'),
}

async function removeSkillGroupWithOptions(request: RemoveSkillGroupRequest, runtime: Util.RuntimeOptions): RemoveSkillGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    body['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSkillGroup',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeSkillGroup(request: RemoveSkillGroupRequest): RemoveSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSkillGroupWithOptions(request, runtime);
}

model SearchTicketByIdRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  statusCode?: int32(name='StatusCode'),
  ticketId?: long(name='TicketId'),
}

model SearchTicketByIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    activities?: [ 
      {
        activityCode?: string(name='ActivityCode'),
        activityFormData?: string(name='ActivityFormData'),
      }
    ](name='Activities'),
    activityRecords?: [ 
      {
        actionCode?: string(name='ActionCode'),
        actionCodeDesc?: string(name='ActionCodeDesc'),
        gmtCreate?: long(name='GmtCreate'),
        memo?: string(name='Memo'),
        operatorName?: string(name='OperatorName'),
      }
    ](name='ActivityRecords'),
    carbonCopy?: string(name='CarbonCopy'),
    caseStatus?: int32(name='CaseStatus'),
    categoryId?: long(name='CategoryId'),
    createTime?: long(name='CreateTime'),
    creatorId?: long(name='CreatorId'),
    creatorName?: string(name='CreatorName'),
    creatorType?: int32(name='CreatorType'),
    formData?: string(name='FormData'),
    fromInfo?: string(name='FromInfo'),
    memberId?: long(name='MemberId'),
    memberName?: string(name='MemberName'),
    modifiedTime?: long(name='ModifiedTime'),
    priority?: int32(name='Priority'),
    serviceId?: long(name='ServiceId'),
    templateId?: long(name='TemplateId'),
    ticketId?: long(name='TicketId'),
    ticketName?: string(name='TicketName'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchTicketByIdResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketByIdResponseBody(name='body'),
}

async function searchTicketByIdWithOptions(request: SearchTicketByIdRequest, runtime: Util.RuntimeOptions): SearchTicketByIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTicketById',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTicketById(request: SearchTicketByIdRequest): SearchTicketByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketByIdWithOptions(request, runtime);
}

model SearchTicketByPhoneRequest {
  clientToken?: string(name='ClientToken'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phone?: string(name='Phone'),
  startTime?: long(name='StartTime'),
  templateId?: long(name='TemplateId'),
  ticketStatus?: string(name='TicketStatus'),
}

model SearchTicketByPhoneResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      carbonCopy?: string(name='CarbonCopy'),
      caseStatus?: int32(name='CaseStatus'),
      categoryId?: long(name='CategoryId'),
      createTime?: long(name='CreateTime'),
      creatorId?: long(name='CreatorId'),
      creatorName?: string(name='CreatorName'),
      creatorType?: int32(name='CreatorType'),
      formData?: string(name='FormData'),
      fromInfo?: string(name='FromInfo'),
      memberId?: long(name='MemberId'),
      memberName?: string(name='MemberName'),
      modifiedTime?: long(name='ModifiedTime'),
      priority?: int32(name='Priority'),
      serviceId?: long(name='ServiceId'),
      taskStatus?: string(name='TaskStatus'),
      templateId?: long(name='TemplateId'),
      ticketId?: long(name='TicketId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  onePageSize?: int32(name='OnePageSize'),
  pageNo?: int32(name='PageNo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
}

model SearchTicketByPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketByPhoneResponseBody(name='body'),
}

async function searchTicketByPhoneWithOptions(request: SearchTicketByPhoneRequest, runtime: Util.RuntimeOptions): SearchTicketByPhoneResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTicketByPhone',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTicketByPhone(request: SearchTicketByPhoneRequest): SearchTicketByPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketByPhoneWithOptions(request, runtime);
}

model SearchTicketListRequest {
  clientToken?: string(name='ClientToken'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  ticketStatus?: string(name='TicketStatus'),
}

model SearchTicketListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      carbonCopy?: string(name='CarbonCopy'),
      caseStatus?: int32(name='CaseStatus'),
      categoryId?: long(name='CategoryId'),
      createTime?: long(name='CreateTime'),
      creatorId?: long(name='CreatorId'),
      creatorName?: string(name='CreatorName'),
      creatorType?: int32(name='CreatorType'),
      formData?: string(name='FormData'),
      fromInfo?: string(name='FromInfo'),
      memberId?: long(name='MemberId'),
      memberName?: string(name='MemberName'),
      modifiedTime?: long(name='ModifiedTime'),
      priority?: int32(name='Priority'),
      serviceId?: long(name='ServiceId'),
      taskStatus?: string(name='TaskStatus'),
      templateId?: long(name='TemplateId'),
      ticketId?: long(name='TicketId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  onePageSize?: int32(name='OnePageSize'),
  pageNo?: int32(name='PageNo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalPage?: int32(name='TotalPage'),
  totalResults?: int32(name='TotalResults'),
}

model SearchTicketListResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTicketListResponseBody(name='body'),
}

async function searchTicketListWithOptions(request: SearchTicketListRequest, runtime: Util.RuntimeOptions): SearchTicketListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTicketList',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTicketList(request: SearchTicketListRequest): SearchTicketListResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTicketListWithOptions(request, runtime);
}

model SendHotlineHeartBeatRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  token?: string(name='Token'),
}

model SendHotlineHeartBeatResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendHotlineHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: SendHotlineHeartBeatResponseBody(name='body'),
}

async function sendHotlineHeartBeatWithOptions(request: SendHotlineHeartBeatRequest, runtime: Util.RuntimeOptions): SendHotlineHeartBeatResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendHotlineHeartBeat',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendHotlineHeartBeat(request: SendHotlineHeartBeatRequest): SendHotlineHeartBeatResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendHotlineHeartBeatWithOptions(request, runtime);
}

model SendOutboundCommandRequest {
  accountName?: string(name='AccountName'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  customerInfo?: string(name='CustomerInfo'),
  instanceId?: string(name='InstanceId'),
}

model SendOutboundCommandResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendOutboundCommandResponse = {
  headers: map[string]string(name='headers'),
  body: SendOutboundCommandResponseBody(name='body'),
}

async function sendOutboundCommandWithOptions(request: SendOutboundCommandRequest, runtime: Util.RuntimeOptions): SendOutboundCommandResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.calledNumber)) {
    body['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    body['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.customerInfo)) {
    body['CustomerInfo'] = request.customerInfo;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendOutboundCommand',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendOutboundCommand(request: SendOutboundCommandRequest): SendOutboundCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendOutboundCommandWithOptions(request, runtime);
}

model StartCallRequest {
  accountName?: string(name='AccountName'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model StartCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartCallResponseBody(name='body'),
}

async function startCallWithOptions(request: StartCallRequest, runtime: Util.RuntimeOptions): StartCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callee)) {
    body['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    body['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startCall(request: StartCallRequest): StartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCallWithOptions(request, runtime);
}

model StartCallV2Request {
  accountName?: string(name='AccountName'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  jsonMsg?: string(name='JsonMsg'),
}

model StartCallV2ResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartCallV2Response = {
  headers: map[string]string(name='headers'),
  body: StartCallV2ResponseBody(name='body'),
}

async function startCallV2WithOptions(request: StartCallV2Request, runtime: Util.RuntimeOptions): StartCallV2Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callee)) {
    body['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    body['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jsonMsg)) {
    body['JsonMsg'] = request.jsonMsg;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartCallV2',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startCallV2(request: StartCallV2Request): StartCallV2Response {
  var runtime = new Util.RuntimeOptions{};
  return startCallV2WithOptions(request, runtime);
}

model StartChatWorkRequest {
  accountName?: string(name='AccountName', description='accountName'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model StartChatWorkResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model StartChatWorkResponse = {
  headers: map[string]string(name='headers'),
  body: StartChatWorkResponseBody(name='body'),
}

async function startChatWorkWithOptions(request: StartChatWorkRequest, runtime: Util.RuntimeOptions): StartChatWorkResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartChatWork',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startChatWork(request: StartChatWorkRequest): StartChatWorkResponse {
  var runtime = new Util.RuntimeOptions{};
  return startChatWorkWithOptions(request, runtime);
}

model StartHotlineServiceRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model StartHotlineServiceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartHotlineServiceResponseBody(name='body'),
}

async function startHotlineServiceWithOptions(request: StartHotlineServiceRequest, runtime: Util.RuntimeOptions): StartHotlineServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartHotlineService',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startHotlineService(request: StartHotlineServiceRequest): StartHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startHotlineServiceWithOptions(request, runtime);
}

model SuspendHotlineServiceRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  type?: int32(name='Type'),
}

model SuspendHotlineServiceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SuspendHotlineServiceResponse = {
  headers: map[string]string(name='headers'),
  body: SuspendHotlineServiceResponseBody(name='body'),
}

async function suspendHotlineServiceWithOptions(request: SuspendHotlineServiceRequest, runtime: Util.RuntimeOptions): SuspendHotlineServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SuspendHotlineService',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function suspendHotlineService(request: SuspendHotlineServiceRequest): SuspendHotlineServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return suspendHotlineServiceWithOptions(request, runtime);
}

model TransferCallToAgentRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  isSingleTransfer?: string(name='IsSingleTransfer'),
  jobId?: string(name='JobId'),
  targetAccountName?: string(name='TargetAccountName'),
  type?: int32(name='Type'),
}

model TransferCallToAgentResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferCallToAgentResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToAgentResponseBody(name='body'),
}

async function transferCallToAgentWithOptions(request: TransferCallToAgentRequest, runtime: Util.RuntimeOptions): TransferCallToAgentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isSingleTransfer)) {
    body['IsSingleTransfer'] = request.isSingleTransfer;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.targetAccountName)) {
    body['TargetAccountName'] = request.targetAccountName;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferCallToAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferCallToAgent(request: TransferCallToAgentRequest): TransferCallToAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToAgentWithOptions(request, runtime);
}

model TransferCallToPhoneRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  isSingleTransfer?: boolean(name='IsSingleTransfer'),
  jobId?: string(name='JobId'),
  type?: int32(name='Type'),
  calleePhone?: string(name='calleePhone'),
  callerPhone?: string(name='callerPhone'),
}

model TransferCallToPhoneResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferCallToPhoneResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToPhoneResponseBody(name='body'),
}

async function transferCallToPhoneWithOptions(request: TransferCallToPhoneRequest, runtime: Util.RuntimeOptions): TransferCallToPhoneResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.callee)) {
    body['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    body['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isSingleTransfer)) {
    body['IsSingleTransfer'] = request.isSingleTransfer;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  if (!Util.isUnset(request.calleePhone)) {
    body['calleePhone'] = request.calleePhone;
  }
  if (!Util.isUnset(request.callerPhone)) {
    body['callerPhone'] = request.callerPhone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferCallToPhone',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferCallToPhone(request: TransferCallToPhoneRequest): TransferCallToPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToPhoneWithOptions(request, runtime);
}

model TransferCallToSkillGroupRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  isSingleTransfer?: boolean(name='IsSingleTransfer'),
  jobId?: string(name='JobId'),
  skillGroupId?: long(name='SkillGroupId'),
  type?: int32(name='Type'),
}

model TransferCallToSkillGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferCallToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: TransferCallToSkillGroupResponseBody(name='body'),
}

async function transferCallToSkillGroupWithOptions(request: TransferCallToSkillGroupRequest, runtime: Util.RuntimeOptions): TransferCallToSkillGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isSingleTransfer)) {
    body['IsSingleTransfer'] = request.isSingleTransfer;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    body['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferCallToSkillGroup',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferCallToSkillGroup(request: TransferCallToSkillGroupRequest): TransferCallToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferCallToSkillGroupWithOptions(request, runtime);
}

model TransferToThirdCallRequest {
  accountName?: string(name='AccountName'),
  callId?: string(name='CallId'),
  clientToken?: string(name='ClientToken'),
  connectionId?: string(name='ConnectionId'),
  holdConnectionId?: string(name='HoldConnectionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model TransferToThirdCallResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TransferToThirdCallResponse = {
  headers: map[string]string(name='headers'),
  body: TransferToThirdCallResponseBody(name='body'),
}

async function transferToThirdCallWithOptions(request: TransferToThirdCallRequest, runtime: Util.RuntimeOptions): TransferToThirdCallResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.callId)) {
    body['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.connectionId)) {
    body['ConnectionId'] = request.connectionId;
  }
  if (!Util.isUnset(request.holdConnectionId)) {
    body['HoldConnectionId'] = request.holdConnectionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TransferToThirdCall',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transferToThirdCall(request: TransferToThirdCallRequest): TransferToThirdCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferToThirdCallWithOptions(request, runtime);
}

model UpdateAgentRequest {
  accountName?: string(name='AccountName'),
  clientToken?: string(name='ClientToken'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: [ long ](name='SkillGroupId'),
  skillGroupIdList?: [ long ](name='SkillGroupIdList'),
}

model UpdateAgentResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAgentResponseBody(name='body'),
}

async function updateAgentWithOptions(request: UpdateAgentRequest, runtime: Util.RuntimeOptions): UpdateAgentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accountName)) {
    body['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    body['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    body['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAgent',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'PUT',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAgent(request: UpdateAgentRequest): UpdateAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAgentWithOptions(request, runtime);
}

model UpdateCustomerRequest {
  bizType?: string(name='BizType'),
  contacter?: string(name='Contacter'),
  customerId?: long(name='CustomerId'),
  dingding?: string(name='Dingding'),
  email?: string(name='Email'),
  industry?: string(name='Industry'),
  instanceId?: string(name='InstanceId'),
  managerName?: string(name='ManagerName'),
  name?: string(name='Name'),
  outerId?: string(name='OuterId'),
  outerIdType?: int32(name='OuterIdType'),
  phone?: string(name='Phone'),
  position?: string(name='Position'),
  prodLineId?: long(name='ProdLineId'),
  typeCode?: string(name='TypeCode'),
}

model UpdateCustomerResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCustomerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomerResponseBody(name='body'),
}

async function updateCustomerWithOptions(request: UpdateCustomerRequest, runtime: Util.RuntimeOptions): UpdateCustomerResponse {
  Util.validateModel(request);
  var query = {};
  query['BizType'] = request.bizType;
  query['Contacter'] = request.contacter;
  query['CustomerId'] = request.customerId;
  query['Dingding'] = request.dingding;
  query['Email'] = request.email;
  query['Industry'] = request.industry;
  query['InstanceId'] = request.instanceId;
  query['ManagerName'] = request.managerName;
  query['Name'] = request.name;
  query['OuterId'] = request.outerId;
  query['OuterIdType'] = request.outerIdType;
  query['Phone'] = request.phone;
  query['Position'] = request.position;
  query['ProdLineId'] = request.prodLineId;
  query['TypeCode'] = request.typeCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomer',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCustomer(request: UpdateCustomerRequest): UpdateCustomerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomerWithOptions(request, runtime);
}

model UpdateEntityTagRelationRequest {
  entityTagParam?: string(name='EntityTagParam'),
  instanceId?: string(name='InstanceId'),
}

model UpdateEntityTagRelationResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEntityTagRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEntityTagRelationResponseBody(name='body'),
}

async function updateEntityTagRelationWithOptions(request: UpdateEntityTagRelationRequest, runtime: Util.RuntimeOptions): UpdateEntityTagRelationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityTagParam)) {
    body['EntityTagParam'] = request.entityTagParam;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEntityTagRelation',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEntityTagRelation(request: UpdateEntityTagRelationRequest): UpdateEntityTagRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEntityTagRelationWithOptions(request, runtime);
}

model UpdateRingStatusRequest {
  callOutStatus?: string(name='CallOutStatus'),
  extra?: string(name='Extra'),
  instanceId?: string(name='InstanceId'),
  uniqueBizId?: string(name='UniqueBizId'),
}

model UpdateRingStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRingStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRingStatusResponseBody(name='body'),
}

async function updateRingStatusWithOptions(request: UpdateRingStatusRequest, runtime: Util.RuntimeOptions): UpdateRingStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.callOutStatus)) {
    body['CallOutStatus'] = request.callOutStatus;
  }
  if (!Util.isUnset(request.extra)) {
    body['Extra'] = request.extra;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.uniqueBizId)) {
    body['UniqueBizId'] = request.uniqueBizId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRingStatus',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRingStatus(request: UpdateRingStatusRequest): UpdateRingStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRingStatusWithOptions(request, runtime);
}

model UpdateRoleRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  operator?: string(name='Operator'),
  permissionId?: [ long ](name='PermissionId'),
  roleId?: long(name='RoleId'),
  roleName?: string(name='RoleName'),
}

model UpdateRoleResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRoleWithOptions(request: UpdateRoleRequest, runtime: Util.RuntimeOptions): UpdateRoleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operator)) {
    body['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.permissionId)) {
    body['PermissionId'] = request.permissionId;
  }
  if (!Util.isUnset(request.roleId)) {
    body['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.roleName)) {
    body['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRole',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoleWithOptions(request, runtime);
}

model UpdateSkillGroupRequest {
  channelType?: long(name='ChannelType', description='渠道类型'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: long(name='SkillGroupId'),
  skillGroupName?: string(name='SkillGroupName'),
}

model UpdateSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSkillGroupResponseBody(name='body'),
}

async function updateSkillGroupWithOptions(request: UpdateSkillGroupRequest, runtime: Util.RuntimeOptions): UpdateSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['ChannelType'] = request.channelType;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['DisplayName'] = request.displayName;
  query['InstanceId'] = request.instanceId;
  query['SkillGroupId'] = request.skillGroupId;
  query['SkillGroupName'] = request.skillGroupName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSkillGroup',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSkillGroup(request: UpdateSkillGroupRequest): UpdateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSkillGroupWithOptions(request, runtime);
}

model UpdateTicketRequest {
  clientToken?: string(name='ClientToken'),
  formData?: string(name='FormData'),
  instanceId?: string(name='InstanceId'),
  operatorId?: long(name='OperatorId'),
  ticketId?: long(name='TicketId'),
}

model UpdateTicketResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTicketResponseBody(name='body'),
}

async function updateTicketWithOptions(request: UpdateTicketRequest, runtime: Util.RuntimeOptions): UpdateTicketResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.formData)) {
    body['FormData'] = request.formData;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.operatorId)) {
    body['OperatorId'] = request.operatorId;
  }
  if (!Util.isUnset(request.ticketId)) {
    body['TicketId'] = request.ticketId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTicket',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTicketWithOptions(request, runtime);
}

model CreateTicketWithBizDataRequest {
  bizData?: string(name='BizData'),
  carbonCopy?: string(name='CarbonCopy'),
  categoryId?: long(name='CategoryId'),
  clientToken?: string(name='ClientToken'),
  creatorId?: long(name='CreatorId'),
  creatorName?: string(name='CreatorName'),
  creatorType?: int32(name='CreatorType'),
  formData?: string(name='FormData'),
  fromInfo?: string(name='FromInfo'),
  instanceId?: string(name='InstanceId'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  priority?: int32(name='Priority'),
  templateId?: long(name='TemplateId'),
}

model CreateTicketWithBizDataResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTicketWithBizDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketWithBizDataResponseBody(name='body'),
}

async function createTicketWithBizDataWithOptions(request: CreateTicketWithBizDataRequest, runtime: Util.RuntimeOptions): CreateTicketWithBizDataResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bizData)) {
    body['BizData'] = request.bizData;
  }
  if (!Util.isUnset(request.carbonCopy)) {
    body['CarbonCopy'] = request.carbonCopy;
  }
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.creatorId)) {
    body['CreatorId'] = request.creatorId;
  }
  if (!Util.isUnset(request.creatorName)) {
    body['CreatorName'] = request.creatorName;
  }
  if (!Util.isUnset(request.creatorType)) {
    body['CreatorType'] = request.creatorType;
  }
  if (!Util.isUnset(request.formData)) {
    body['FormData'] = request.formData;
  }
  if (!Util.isUnset(request.fromInfo)) {
    body['FromInfo'] = request.fromInfo;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['MemberId'] = request.memberId;
  }
  if (!Util.isUnset(request.memberName)) {
    body['MemberName'] = request.memberName;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'createTicketWithBizData',
    version = '2020-07-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTicketWithBizData(request: CreateTicketWithBizDataRequest): CreateTicketWithBizDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketWithBizDataWithOptions(request, runtime);
}

