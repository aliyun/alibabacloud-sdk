/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CompareFacesRequest {
  sourceImageUrl?: string(name='SourceImageUrl'),
  sourceImageBase64?: string(name='SourceImageBase64'),
  targetImageUrl?: string(name='TargetImageUrl'),
  targetImageBase64?: string(name='TargetImageBase64'),
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
}

model CompareFacesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    similarityScore?: float(name='SimilarityScore'),
    confidenceThresholds?: string(name='ConfidenceThresholds'),
  }(name='ResultObject'),
}

model CompareFacesResponse = {
  headers: map[string]string(name='headers'),
  body: CompareFacesResponseBody(name='body'),
}

async function compareFacesWithOptions(request: CompareFacesRequest, runtime: Util.RuntimeOptions): CompareFacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompareFaces', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function compareFaces(request: CompareFacesRequest): CompareFacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return compareFacesWithOptions(request, runtime);
}

model DescribeVerifyResultRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
}

model DescribeVerifyResultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    authorityComparisionScore?: float(name='AuthorityComparisionScore'),
    verifyStatus?: int32(name='VerifyStatus'),
    faceComparisonScore?: float(name='FaceComparisonScore'),
    idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore'),
    material?: {
      idCardNumber?: string(name='IdCardNumber'),
      faceGlobalUrl?: string(name='FaceGlobalUrl'),
      faceImageUrl?: string(name='FaceImageUrl'),
      faceMask?: boolean(name='FaceMask'),
      idCardName?: string(name='IdCardName'),
      faceQuality?: string(name='FaceQuality'),
      videoUrls?: [ string ](name='VideoUrls'),
      idCardInfo?: {
        sex?: string(name='Sex'),
        endDate?: string(name='EndDate'),
        authority?: string(name='Authority'),
        address?: string(name='Address'),
        number?: string(name='Number'),
        startDate?: string(name='StartDate'),
        backImageUrl?: string(name='BackImageUrl'),
        nationality?: string(name='Nationality'),
        birth?: string(name='Birth'),
        name?: string(name='Name'),
        frontImageUrl?: string(name='FrontImageUrl'),
      }(name='IdCardInfo'),
    }(name='Material'),
  }(name='ResultObject'),
}

model DescribeVerifyResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyResultResponseBody(name='body'),
}

async function describeVerifyResultWithOptions(request: DescribeVerifyResultRequest, runtime: Util.RuntimeOptions): DescribeVerifyResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyResult', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyResult(request: DescribeVerifyResultRequest): DescribeVerifyResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyResultWithOptions(request, runtime);
}

model DescribeVerifyTokenRequest {
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  bizType?: string(name='BizType'),
  faceRetainedImageUrl?: string(name='FaceRetainedImageUrl'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  userId?: string(name='UserId'),
  bizId?: string(name='BizId'),
  name?: string(name='Name'),
  idCardNumber?: string(name='IdCardNumber'),
  userIp?: string(name='UserIp'),
  userPhoneNumber?: string(name='UserPhoneNumber'),
  userRegistTime?: long(name='UserRegistTime'),
}

model DescribeVerifyTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    verifyPageUrl?: string(name='VerifyPageUrl'),
    verifyToken?: string(name='VerifyToken'),
  }(name='ResultObject'),
}

model DescribeVerifyTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVerifyTokenResponseBody(name='body'),
}

async function describeVerifyTokenWithOptions(request: DescribeVerifyTokenRequest, runtime: Util.RuntimeOptions): DescribeVerifyTokenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVerifyToken', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVerifyToken(request: DescribeVerifyTokenRequest): DescribeVerifyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVerifyTokenWithOptions(request, runtime);
}

model DetectFaceAttributesRequest {
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  imageUrl?: string(name='ImageUrl'),
  imageFile?: string(name='ImageFile'),
}

model DetectFaceAttributesAdvanceRequest {
  imageFileObject: readable(name='ImageFileObject'),
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  imageUrl?: string(name='ImageUrl'),
}

model DetectFaceAttributesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  resultObject?: {
    imgHeight?: int32(name='ImgHeight'),
    imgWidth?: int32(name='ImgWidth'),
    faceInfos?: {
      faceAttributesDetectInfo?: [ 
      {
        faceRect?: {
          left?: int32(name='Left'),
          top?: int32(name='Top'),
          width?: int32(name='Width'),
          height?: int32(name='Height'),
        }(name='FaceRect'),
        faceAttributes?: {
          glasses?: string(name='Glasses'),
          facequal?: float(name='Facequal'),
          integrity?: int32(name='Integrity'),
          facetype?: string(name='Facetype'),
          respirator?: string(name='Respirator'),
          appearanceScore?: float(name='AppearanceScore'),
          blur?: float(name='Blur'),
          smiling?: {
            value?: float(name='Value'),
            threshold?: float(name='Threshold'),
          }(name='Smiling'),
          headpose?: {
            pitchAngle?: float(name='PitchAngle'),
            rollAngle?: float(name='RollAngle'),
            yawAngle?: float(name='YawAngle'),
          }(name='Headpose'),
        }(name='FaceAttributes'),
      }
    ](name='FaceAttributesDetectInfo')
    }(name='FaceInfos'),
  }(name='ResultObject'),
}

model DetectFaceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DetectFaceAttributesResponseBody(name='body'),
}

async function detectFaceAttributesWithOptions(request: DetectFaceAttributesRequest, runtime: Util.RuntimeOptions): DetectFaceAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectFaceAttributes', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectFaceAttributes(request: DetectFaceAttributesRequest): DetectFaceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectFaceAttributesWithOptions(request, runtime);
}

async function detectFaceAttributesAdvance(request: DetectFaceAttributesAdvanceRequest, runtime: Util.RuntimeOptions): DetectFaceAttributesResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectFaceAttributesReq = new DetectFaceAttributesRequest{};
  OpenApiUtil.convert(request, detectFaceAttributesReq);

  if(!Util.isUnset(request.imageFileObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.imageFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    detectFaceAttributesReq.imageFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var detectFaceAttributesResp = detectFaceAttributesWithOptions(detectFaceAttributesReq, runtime);
  return detectFaceAttributesResp;
}

model LivenessDetectRequest {
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  mediaCategory?: string(name='MediaCategory'),
  mediaUrl?: string(name='MediaUrl'),
  mediaFile?: string(name='MediaFile'),
}

model LivenessDetectAdvanceRequest {
  mediaFileObject: readable(name='MediaFileObject'),
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  mediaCategory?: string(name='MediaCategory'),
  mediaUrl?: string(name='MediaUrl'),
}

model LivenessDetectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    score?: float(name='Score'),
    frameUrl?: string(name='FrameUrl'),
    passed?: string(name='Passed'),
  }(name='ResultObject'),
}

model LivenessDetectResponse = {
  headers: map[string]string(name='headers'),
  body: LivenessDetectResponseBody(name='body'),
}

async function livenessDetectWithOptions(request: LivenessDetectRequest, runtime: Util.RuntimeOptions): LivenessDetectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LivenessDetect', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function livenessDetect(request: LivenessDetectRequest): LivenessDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return livenessDetectWithOptions(request, runtime);
}

async function livenessDetectAdvance(request: LivenessDetectAdvanceRequest, runtime: Util.RuntimeOptions): LivenessDetectResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'Cloudauth',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var livenessDetectReq = new LivenessDetectRequest{};
  OpenApiUtil.convert(request, livenessDetectReq);

  if(!Util.isUnset(request.mediaFileObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.mediaFileObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    livenessDetectReq.mediaFile = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var livenessDetectResp = livenessDetectWithOptions(livenessDetectReq, runtime);
  return livenessDetectResp;
}

model VerifyMaterialRequest {
  idCardBackImageUrl?: string(name='IdCardBackImageUrl'),
  faceImageUrl?: string(name='FaceImageUrl'),
  bizType?: string(name='BizType'),
  bizId?: string(name='BizId'),
  name?: string(name='Name'),
  idCardNumber?: string(name='IdCardNumber'),
  idCardFrontImageUrl?: string(name='IdCardFrontImageUrl'),
  userId?: string(name='UserId'),
}

model VerifyMaterialResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resultObject?: {
    authorityComparisionScore?: float(name='AuthorityComparisionScore'),
    verifyStatus?: int32(name='VerifyStatus'),
    verifyToken?: string(name='VerifyToken'),
    idCardFaceComparisonScore?: float(name='IdCardFaceComparisonScore'),
    material?: {
      idCardNumber?: string(name='IdCardNumber'),
      faceGlobalUrl?: string(name='FaceGlobalUrl'),
      faceImageUrl?: string(name='FaceImageUrl'),
      faceMask?: string(name='FaceMask'),
      idCardName?: string(name='IdCardName'),
      faceQuality?: string(name='FaceQuality'),
      idCardInfo?: {
        sex?: string(name='Sex'),
        endDate?: string(name='EndDate'),
        authority?: string(name='Authority'),
        address?: string(name='Address'),
        number?: string(name='Number'),
        startDate?: string(name='StartDate'),
        backImageUrl?: string(name='BackImageUrl'),
        nationality?: string(name='Nationality'),
        birth?: string(name='Birth'),
        name?: string(name='Name'),
        frontImageUrl?: string(name='FrontImageUrl'),
      }(name='IdCardInfo'),
    }(name='Material'),
  }(name='ResultObject'),
}

model VerifyMaterialResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMaterialResponseBody(name='body'),
}

async function verifyMaterialWithOptions(request: VerifyMaterialRequest, runtime: Util.RuntimeOptions): VerifyMaterialResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyMaterial', '2020-11-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyMaterial(request: VerifyMaterialRequest): VerifyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyMaterialWithOptions(request, runtime);
}

