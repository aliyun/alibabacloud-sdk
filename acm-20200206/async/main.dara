/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'acm';
  @version = '2020-02-06';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BatchExportConfigurationsRequest {
  data: string(name='Data', position='Query'),
  namespaceId: string(name='NamespaceId', position='Query'),
}

model BatchExportConfigurationsResponseBody = {
  code?: string(name='Code'),
  fileUrl?: string(name='FileUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BatchExportConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchExportConfigurationsResponseBody(name='body'),
}

async function batchExportConfigurations(request: BatchExportConfigurationsRequest): BatchExportConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchExportConfigurations', 'GET', '/diamond-ops/pop/batch/export', 'json', false, 'json', request);
}

model BatchImportConfigurationsRequest {
  fileUrl: string(name='FileUrl', position='Body'),
  namespaceId: string(name='NamespaceId', position='Body'),
  policy: string(name='Policy', position='Body'),
}

model BatchImportConfigurationsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BatchImportConfigurationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchImportConfigurationsResponseBody(name='body'),
}

async function batchImportConfigurations(request: BatchImportConfigurationsRequest): BatchImportConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchImportConfigurations', 'POST', '/diamond-ops/pop/batch/import', 'json', true, 'form', request);
}

model CheckConfigurationCloneRequest {
  data: string(name='Data', position='Body'),
  namespaceFrom: string(name='NamespaceFrom', position='Body'),
  namespaceTo: string(name='NamespaceTo', position='Body'),
  policy: string(name='Policy', position='Body'),
}

model CheckConfigurationCloneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
    successItems?: [ 
      {
        dataId?: string(name='DataId'),
        group?: string(name='Group'),
      }
    ](name='SuccessItems'),
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model CheckConfigurationCloneResponse = {
  headers: map[string]string(name='headers'),
  body: CheckConfigurationCloneResponseBody(name='body'),
}

async function checkConfigurationClone(request: CheckConfigurationCloneRequest): CheckConfigurationCloneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckConfigurationClone', 'POST', '/diamond-ops/pop/batch/checkForClone', 'json', true, 'form', request);
}

model CheckConfigurationExportRequest {
  data: string(name='Data', position='Body'),
  namespaceId: string(name='NamespaceId', position='Body'),
}

model CheckConfigurationExportResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model CheckConfigurationExportResponse = {
  headers: map[string]string(name='headers'),
  body: CheckConfigurationExportResponseBody(name='body'),
}

async function checkConfigurationExport(request: CheckConfigurationExportRequest): CheckConfigurationExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckConfigurationExport', 'POST', '/diamond-ops/pop/batch/checkForExport', 'json', true, 'form', request);
}

model CloneConfigurationRequest {
  data: string(name='Data', position='Body'),
  namespaceFrom: string(name='NamespaceFrom', position='Body'),
  namespaceTo: string(name='NamespaceTo', position='Body'),
  policy: string(name='Policy', position='Body'),
}

model CloneConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    success?: boolean(name='Success'),
    successItems?: [ 
      {
        dataId?: string(name='DataId'),
        group?: string(name='Group'),
      }
    ](name='SuccessItems'),
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model CloneConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CloneConfigurationResponseBody(name='body'),
}

async function cloneConfiguration(request: CloneConfigurationRequest): CloneConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneConfiguration', 'POST', '/diamond-ops/pop/batch/clone', 'json', true, 'form', request);
}

model CreateConfigurationRequest {
  appName?: string(name='AppName', position='Body'),
  content: string(name='Content', position='Body'),
  dataId: string(name='DataId', position='Body'),
  desc?: string(name='Desc', position='Body'),
  group: string(name='Group', position='Body'),
  namespaceId: string(name='NamespaceId', position='Body'),
  tags?: string(name='Tags', position='Body'),
  type: string(name='Type', position='Body'),
}

model CreateConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigurationResponseBody(name='body'),
}

async function createConfiguration(request: CreateConfigurationRequest): CreateConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfiguration', 'POST', '/diamond-ops/pop/configuration', 'json', true, 'form', request);
}

model CreateNamespaceRequest {
  name: string(name='Name', position='Body'),
}

model CreateNamespaceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  namespaceId?: string(name='NamespaceId'),
  requestId?: string(name='RequestId'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateNamespace', 'POST', '/diamond-ops/pop/namespace', 'json', true, 'form', request);
}

model DeleteConfigurationRequest {
  dataId: string(name='DataId', position='Query'),
  group: string(name='Group', position='Query'),
  namespaceId: string(name='NamespaceId', position='Query'),
}

model DeleteConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigurationResponseBody(name='body'),
}

async function deleteConfiguration(request: DeleteConfigurationRequest): DeleteConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfiguration', 'DELETE', '/diamond-ops/pop/configuration', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  namespaceId: string(name='NamespaceId', position='Query'),
}

model DeleteNamespaceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteNamespace', 'DELETE', '/diamond-ops/pop/namespace', 'json', false, 'json', request);
}

model DeployConfigurationRequest {
  appName?: string(name='AppName', position='Body'),
  betaIps?: string(name='BetaIps', position='Body'),
  content: string(name='Content', position='Body'),
  dataId: string(name='DataId', position='Body'),
  desc?: string(name='Desc', position='Body'),
  group: string(name='Group', position='Body'),
  namespaceId: string(name='NamespaceId', position='Body'),
  tags?: string(name='Tags', position='Body'),
  type?: string(name='Type', position='Body'),
}

model DeployConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeployConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DeployConfigurationResponseBody(name='body'),
}

async function deployConfiguration(request: DeployConfigurationRequest): DeployConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployConfiguration', 'PUT', '/diamond-ops/pop/configuration', 'json', true, 'form', request);
}

model DescribeConfigurationRequest {
  dataId: string(name='DataId', position='Query'),
  group: string(name='Group', position='Query'),
  namespaceId: string(name='NamespaceId', position='Query'),
}

model DescribeConfigurationResponseBody = {
  code?: string(name='Code'),
  configuration?: {
    appName?: string(name='AppName'),
    content?: string(name='Content'),
    dataId?: string(name='DataId'),
    desc?: string(name='Desc'),
    group?: string(name='Group'),
    md5?: string(name='Md5'),
    tags?: string(name='Tags'),
    type?: string(name='Type'),
  }(name='Configuration'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigurationResponseBody(name='body'),
}

async function describeConfiguration(request: DescribeConfigurationRequest): DescribeConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeConfiguration', 'GET', '/diamond-ops/pop/configuration', 'json', false, 'json', request);
}

model DescribeImportFileUrlRequest {
  contentType: string(name='ContentType', position='Query'),
}

model DescribeImportFileUrlResponseBody = {
  code?: string(name='Code'),
  fileUrl?: string(name='FileUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeImportFileUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImportFileUrlResponseBody(name='body'),
}

async function describeImportFileUrl(request: DescribeImportFileUrlRequest): DescribeImportFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeImportFileUrl', 'GET', '/diamond-ops/pop/batch/importFileUrl', 'json', false, 'json', request);
}

model DescribeNamespaceRequest {
  namespaceId: string(name='NamespaceId', position='Query'),
}

model DescribeNamespaceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  namespace?: {
    accessKey?: string(name='AccessKey'),
    endpoint?: string(name='Endpoint'),
    name?: string(name='Name'),
    regionId?: string(name='RegionId'),
    secretKey?: string(name='SecretKey'),
  }(name='Namespace'),
  requestId?: string(name='RequestId'),
}

model DescribeNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespaceResponseBody(name='body'),
}

async function describeNamespace(request: DescribeNamespaceRequest): DescribeNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeNamespace', 'GET', '/diamond-ops/pop/namespace', 'json', false, 'json', request);
}

model DescribeNamespacesRequest {
}

model DescribeNamespacesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  namespaces?: [ 
    {
      configCount?: int32(name='ConfigCount'),
      namespaceId?: string(name='NamespaceId'),
      namespaceName?: string(name='NamespaceName'),
      quota?: int32(name='Quota'),
      type?: int32(name='Type'),
    }
  ](name='Namespaces'),
  requestId?: string(name='RequestId'),
}

model DescribeNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespacesResponseBody(name='body'),
}

async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeNamespaces', 'GET', '/diamond-ops/pop/namespace/list', 'json', false, 'json', request);
}

model DescribeNamespacesWithCreateRequest {
}

model DescribeNamespacesWithCreateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  namespaces?: [ 
    {
      configCount?: int32(name='ConfigCount'),
      namespaceId?: string(name='NamespaceId'),
      namespaceName?: string(name='NamespaceName'),
      quota?: int32(name='Quota'),
      type?: int32(name='Type'),
    }
  ](name='Namespaces'),
  requestId?: string(name='RequestId'),
}

model DescribeNamespacesWithCreateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespacesWithCreateResponseBody(name='body'),
}

async function describeNamespacesWithCreate(request: DescribeNamespacesWithCreateRequest): DescribeNamespacesWithCreateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeNamespacesWithCreate', 'GET', '/diamond-ops/pop/namespace/listWithCreate', 'json', false, 'json', request);
}

model DescribeTraceByConfigurationRequest {
  dataId: string(name='DataId', position='Query'),
  endTs?: string(name='EndTs', position='Query'),
  group: string(name='Group', position='Query'),
  namespaceId: string(name='NamespaceId', position='Query'),
  startTs?: string(name='StartTs', position='Query'),
}

model DescribeTraceByConfigurationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  traces?: [ 
    {
      eventGroups?: [ 
        {
          eventDetails?: [ 
            {
              dataId?: string(name='DataId'),
              delay?: string(name='Delay'),
              event?: string(name='Event'),
              ext?: string(name='Ext'),
              group?: string(name='Group'),
              handleIp?: string(name='HandleIp'),
              logDate?: string(name='LogDate'),
              requestIp?: string(name='RequestIp'),
              responseIp?: string(name='ResponseIp'),
              ts?: string(name='Ts'),
              type?: string(name='Type'),
            }
          ](name='EventDetails'),
          eventType?: string(name='EventType'),
        }
      ](name='EventGroups'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Traces'),
}

model DescribeTraceByConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTraceByConfigurationResponseBody(name='body'),
}

async function describeTraceByConfiguration(request: DescribeTraceByConfigurationRequest): DescribeTraceByConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTraceByConfiguration', 'GET', '/diamond-ops/pop/trace/getByConfiguration', 'json', false, 'json', request);
}

model UpdateNamespaceRequest {
  namespaceId: string(name='NamespaceId', position='Body'),
  namespaceName: string(name='NamespaceName', position='Body'),
}

model UpdateNamespaceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNamespaceResponseBody(name='body'),
}

async function updateNamespace(request: UpdateNamespaceRequest): UpdateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateNamespace', 'PUT', '/diamond-ops/pop/namespace', 'json', true, 'form', request);
}

