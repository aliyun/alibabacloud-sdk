/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Trademark';
  @version = '2019-09-02';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BindApplicantRequest {
  applicantId: string(name='ApplicantId', example='123456789', position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', example='1234567890/attorney/asdfghjkl.jpg', position='Query'),
  bizId: string(name='BizId', example='trademark_register-cn-123456789', position='Query'),
}

model BindApplicantResponseBody = {
  requestId?: string(name='RequestId', example='c188240f-a7f9-467f-ada8-34b354492019'),
}

model BindApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindApplicantResponseBody(name='body'),
}

async function bindApplicant(request: BindApplicantRequest): BindApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindApplicant', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRequest {
  orderId: long(name='OrderId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model CancelOrderResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelOrderResponseBody(name='body'),
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrder', 'POST', '/', 'json', false, 'json', request);
}

model CheckAuthorizationLetterRequest {
  applicantType?: string(name='ApplicantType', position='Query'),
  color?: string(name='Color', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactZipcode?: string(name='ContactZipcode', position='Query'),
  ossKey: string(name='OssKey', position='Query'),
  personalType?: string(name='PersonalType', position='Query'),
  type: string(name='Type', position='Query'),
}

model CheckAuthorizationLetterResponseBody = {
  requestId?: string(name='RequestId'),
  templateUrl?: string(name='TemplateUrl'),
  tips?: string(name='Tips'),
}

model CheckAuthorizationLetterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAuthorizationLetterResponseBody(name='body'),
}

async function checkAuthorizationLetter(request: CheckAuthorizationLetterRequest): CheckAuthorizationLetterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAuthorizationLetter', 'POST', '/', 'json', false, 'json', request);
}

model CheckBizAvailableRequest {
  biz: string(name='Biz', position='Query'),
  scene: string(name='Scene', position='Query'),
}

model CheckBizAvailableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckBizAvailableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckBizAvailableResponseBody(name='body'),
}

async function checkBizAvailable(request: CheckBizAvailableRequest): CheckBizAvailableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckBizAvailable', 'POST', '/', 'json', false, 'json', request);
}

model CheckDuplicateApplicantRiskRequest {
  applicantName: string(name='ApplicantName', position='Query'),
  eventSceneType?: int32(name='EventSceneType', position='Query'),
}

model CheckDuplicateApplicantRiskResponseBody = {
  requestId?: string(name='RequestId', example='33468D2D-0F4E-4234-B47D-B93E8B9E6019'),
  result?: string(name='Result', example='PASS'),
}

model CheckDuplicateApplicantRiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDuplicateApplicantRiskResponseBody(name='body'),
}

async function checkDuplicateApplicantRisk(request: CheckDuplicateApplicantRiskRequest): CheckDuplicateApplicantRiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDuplicateApplicantRisk', 'POST', '/', 'json', false, 'json', request);
}

model CheckDuplicateClassificationRequest {
  classification: string(name='Classification', example='350071,350005,350106,350085,350120,35030010,350096,350047,350001,35020035', position='Query'),
  eventSceneType?: int32(name='EventSceneType', position='Query'),
  trademarkName: string(name='TrademarkName', position='Query'),
}

model CheckDuplicateClassificationResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: {
    duplicateSecondaryClassification?: {
      secondaryClassification?: [ string ](name='SecondaryClassification')
    }(name='DuplicateSecondaryClassification'),
    trademarkName?: string(name='TrademarkName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2E3A11B4-9933-4009-842A-0687422F1BD6'),
}

model CheckDuplicateClassificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDuplicateClassificationResponseBody(name='body'),
}

async function checkDuplicateClassification(request: CheckDuplicateClassificationRequest): CheckDuplicateClassificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDuplicateClassification', 'POST', '/', 'json', false, 'json', request);
}

model CheckDuplicateTrademarkRequest {
  classification: string(name='Classification', position='Query'),
  eventSceneType?: int32(name='EventSceneType', minimum=1, maximum=999, position='Query'),
  materialName: string(name='MaterialName', position='Query'),
  trademarkName: string(name='TrademarkName', position='Query'),
}

model CheckDuplicateTrademarkResponseBody = {
  code?: string(name='Code'),
  duplicateTrademark?: string(name='DuplicateTrademark'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
}

model CheckDuplicateTrademarkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDuplicateTrademarkResponseBody(name='body'),
}

async function checkDuplicateTrademark(request: CheckDuplicateTrademarkRequest): CheckDuplicateTrademarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDuplicateTrademark', 'POST', '/', 'json', false, 'json', request);
}

model CheckMaterialValidityRequest {
  businessLicenseOssKey?: string(name='BusinessLicenseOssKey', position='Query'),
  cardNumber?: string(name='CardNumber', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', position='Query'),
  materialId?: long(name='MaterialId', minimum=0, maximum=9223372036854775807, position='Query'),
  materialRegion?: int32(name='MaterialRegion', position='Query'),
  materialType?: int32(name='MaterialType', position='Query'),
  name?: string(name='Name', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
}

model CheckMaterialValidityResponseBody = {
  requestId?: string(name='RequestId'),
}

model CheckMaterialValidityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMaterialValidityResponseBody(name='body'),
}

async function checkMaterialValidity(request: CheckMaterialValidityRequest): CheckMaterialValidityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMaterialValidity', 'POST', '/', 'json', false, 'json', request);
}

model CheckTrademarkNameRequest {
  eventSceneType?: int32(name='EventSceneType', position='Query'),
  trademarkName: string(name='TrademarkName', position='Query'),
}

model CheckTrademarkNameResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='30B4797C-1053-4385-A5BC-837E8EC9D8EC'),
  result?: string(name='Result', example='PASS'),
}

model CheckTrademarkNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckTrademarkNameResponseBody(name='body'),
}

async function checkTrademarkName(request: CheckTrademarkNameRequest): CheckTrademarkNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTrademarkName', 'POST', '/', 'json', false, 'json', request);
}

model CloseTrademarkApplicationRequest {
  bizId: string(name='BizId', example='trademark_register-cn-78v1a67zy01', position='Query'),
}

model CloseTrademarkApplicationResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='30A786CD-747A-49E4-BEAB-5858C040A6A1'),
  success?: boolean(name='Success', example='true'),
}

model CloseTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseTrademarkApplicationResponseBody(name='body'),
}

async function closeTrademarkApplication(request: CloseTrademarkApplicationRequest): CloseTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model CombineAuthorizationLetterRequest {
  address?: string(name='Address', position='Query'),
  applicantType?: string(name='ApplicantType', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactPhone?: string(name='ContactPhone', position='Query'),
  contactPostcode?: string(name='ContactPostcode', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  materialName?: string(name='MaterialName', position='Query'),
  nationality?: string(name='Nationality', position='Query'),
  personalType?: string(name='PersonalType', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  tmProduceType?: string(name='TmProduceType', position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
}

model CombineAuthorizationLetterResponseBody = {
  requestId?: string(name='RequestId'),
  templateCombineUrl?: string(name='TemplateCombineUrl'),
}

model CombineAuthorizationLetterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CombineAuthorizationLetterResponseBody(name='body'),
}

async function combineAuthorizationLetter(request: CombineAuthorizationLetterRequest): CombineAuthorizationLetterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CombineAuthorizationLetter', 'POST', '/', 'json', false, 'json', request);
}

model ComplementTrademarkApplicationRequest {
  agreementId?: string(name='AgreementId', position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', position='Query'),
  bizId: string(name='BizId', position='Query'),
  isBlackIcon?: boolean(name='IsBlackIcon', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  orderData?: string(name='OrderData', position='Query'),
  source?: string(name='Source', position='Query'),
  trademarkComment: string(name='TrademarkComment', position='Query'),
  trademarkIconOssKey: string(name='TrademarkIconOssKey', position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
  trademarkNameType?: string(name='TrademarkNameType', position='Query'),
  trademarkType?: int32(name='TrademarkType', minimum=1, maximum=100, position='Query'),
}

model ComplementTrademarkApplicationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ComplementTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ComplementTrademarkApplicationResponseBody(name='body'),
}

async function complementTrademarkApplication(request: ComplementTrademarkApplicationRequest): ComplementTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ComplementTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmExpertSolutionRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model ConfirmExpertSolutionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfirmExpertSolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmExpertSolutionResponseBody(name='body'),
}

async function confirmExpertSolution(request: ConfirmExpertSolutionRequest): ConfirmExpertSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmExpertSolution', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicantRequest {
  address?: string(name='Address', position='Query'),
  applicantName?: string(name='ApplicantName', position='Query'),
  applicantRegion?: int32(name='ApplicantRegion', example='1', position='Query'),
  applicantType?: int32(name='ApplicantType', example='1', position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', example='1219541161213057/attorney/gy378w6btam.jpg', position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', example='1219541161213057/business_license/gmzl6cvbk48.png', position='Query'),
  cardNumber?: string(name='CardNumber', example='123456', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', example='test@alibaba.com', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', example='18611112222', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipcode?: string(name='ContactZipcode', example='100000', position='Query'),
  country?: string(name='Country', example='2096', position='Query'),
  eAddress?: string(name='EAddress', example='bei jing shi', position='Query'),
  eName?: string(name='EName', example='zhang san', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', example='1219541161213057/card/ujd8hthwfdk.png', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', example='1219541161213057/legal_notice/mlnpsjmaed.jpg', position='Query'),
  passportOssKey?: string(name='PassportOssKey', example='1219541161213057/pass_port/gmzl16cvbk48.png', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  province?: string(name='Province', position='Query'),
}

model CreateApplicantResponseBody = {
  applicantId?: string(name='ApplicantId', example='196689'),
  requestId?: string(name='RequestId', example='F9BB9AE5-E568-4F1F-B8EC-EB940B9930CB'),
}

model CreateApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicantResponseBody(name='body'),
}

async function createApplicant(request: CreateApplicantRequest): CreateApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicant', 'POST', '/', 'json', false, 'json', request);
}

model CreateCommodityOrderRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  bizType: string(name='BizType', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  commodityCode: string(name='CommodityCode', position='Query'),
  components: map[string]any(name='Components', shrink='json', position='Query'),
  duration?: int32(name='Duration', minimum=1, maximum=10000, position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  orderParams?: map[string]any(name='OrderParams', shrink='json', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  quantity?: int32(name='Quantity', minimum=1, maximum=10000, position='Query'),
  specCode?: string(name='SpecCode', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model CreateCommodityOrderResponseBody = {
  data?: [ long ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCommodityOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCommodityOrderResponseBody(name='body'),
}

async function createCommodityOrder(request: CreateCommodityOrderRequest): CreateCommodityOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommodityOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrderRequest {
  agreementId?: string(name='AgreementId', position='Query'),
  applicantId?: string(name='ApplicantId', position='Query'),
  applicationType?: int32(name='ApplicationType', minimum=1, maximum=20, position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', position='Query'),
  autoPay: boolean(name='AutoPay', position='Query'),
  blackAndWhiteIcon?: string(name='BlackAndWhiteIcon', position='Query'),
  channel?: string(name='Channel', position='Query'),
  classifications?: string(name='Classifications', position='Query'),
  idempotentId?: string(name='IdempotentId', position='Query'),
  legalNoticeKey?: string(name='LegalNoticeKey', position='Query'),
  payType?: string(name='PayType', position='Query'),
  paymentCallback?: string(name='PaymentCallback', position='Query'),
  principalName?: int32(name='PrincipalName', minimum=1, maximum=10, position='Query'),
  source?: string(name='Source', position='Query'),
  trademarkComment?: string(name='TrademarkComment', position='Query'),
  trademarkIcon: string(name='TrademarkIcon', position='Query'),
  trademarkName: string(name='TrademarkName', position='Query'),
  trademarkNameType?: string(name='TrademarkNameType', position='Query'),
}

model CreateOrderResponseBody = {
  message?: string(name='Message'),
  orderIds?: map[string]any(name='OrderIds'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderResponseBody(name='body'),
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrademarkApplicationRequest {
  agreementId?: string(name='AgreementId', position='Query'),
  applicantId?: string(name='ApplicantId', example='111', position='Query'),
  applicationType?: int32(name='ApplicationType', example='1', position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', example='1219541161213057/attorney/9cgvhk2yd1l.JPG', position='Query'),
  autoPay: boolean(name='AutoPay', example='true', position='Query'),
  blackAndWhiteIcon?: string(name='BlackAndWhiteIcon', example='1219541161213057/icon/gii9s4oyg8.jpg', position='Query'),
  channel?: string(name='Channel', position='Query'),
  classifications?: string(name='Classifications', example='{"38":"380005,380024,380050,380040,38020148,380004,38010007,38020149,38020141,380053"}', position='Query'),
  idempotentId?: string(name='IdempotentId', position='Query'),
  legalNoticeKey?: string(name='LegalNoticeKey', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  source?: string(name='Source', position='Query'),
  trademarkComment?: string(name='TrademarkComment', position='Query'),
  trademarkIcon: string(name='TrademarkIcon', example='1219541161213057/icon/gii9s4oyg8.jpg', position='Query'),
  trademarkName: string(name='TrademarkName', example='pop-test', position='Query'),
  trademarkNameType?: string(name='TrademarkNameType', example='1', position='Query'),
}

model CreateTrademarkApplicationResponseBody = {
  message?: string(name='Message'),
  orderId?: long(name='OrderId', example='204426185080629'),
  requestId?: string(name='RequestId', example='C40C3191-420F-42CC-9EEB-44D17B5DEB67'),
  success?: boolean(name='Success', example='true'),
}

model CreateTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrademarkApplicationResponseBody(name='body'),
}

async function createTrademarkApplication(request: CreateTrademarkApplicationRequest): CreateTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSearchConditionRequest {
  conditionId: long(name='ConditionId', minimum=0, maximum=2147483647, position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  umid?: string(name='Umid', position='Query'),
}

model DeleteSearchConditionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSearchConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSearchConditionResponseBody(name='body'),
}

async function deleteSearchCondition(request: DeleteSearchConditionRequest): DeleteSearchConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSearchCondition', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAdminTrademarkApplicationRequest {
  bizId: string(name='BizId', position='Query'),
}

model DescribeAdminTrademarkApplicationResponseBody = {
  acceptUrl?: string(name='AcceptUrl'),
  applicant?: {
    address?: string(name='Address'),
    applicantName?: string(name='ApplicantName'),
    applicantRegion?: int32(name='ApplicantRegion'),
    applicantType?: int32(name='ApplicantType'),
    auditStatus?: int32(name='AuditStatus'),
    authorizationUrl?: string(name='AuthorizationUrl'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber'),
    contactAddress?: string(name='ContactAddress'),
    contactEmail?: string(name='ContactEmail'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber'),
    contactZipcode?: string(name='ContactZipcode'),
    country?: string(name='Country'),
    eAddress?: string(name='EAddress'),
    eName?: string(name='EName'),
    idCardUrl?: string(name='IdCardUrl'),
    legalNoticeUrl?: string(name='LegalNoticeUrl'),
    passportUrl?: string(name='PassportUrl'),
    principalName?: int32(name='PrincipalName'),
    province?: string(name='Province'),
  }(name='Applicant'),
  applicantId?: long(name='ApplicantId'),
  applicationStatus?: int32(name='ApplicationStatus'),
  applicationType?: int32(name='ApplicationType'),
  authorizationUrl?: string(name='AuthorizationUrl'),
  bizId?: string(name='BizId'),
  blackAndWhiteIconUrl?: string(name='BlackAndWhiteIconUrl'),
  createTime?: long(name='CreateTime'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  firstClassification?: {
    classificationCode?: string(name='ClassificationCode'),
    classificationName?: string(name='ClassificationName'),
  }(name='FirstClassification'),
  judgeResultUrls?: [ string ](name='JudgeResultUrls'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId'),
  orderPrice?: float(name='OrderPrice'),
  principalName?: int32(name='PrincipalName'),
  receiptUrls?: [ string ](name='ReceiptUrls'),
  recvUserLogistics?: string(name='RecvUserLogistics'),
  requestId?: string(name='RequestId'),
  sendSbjLogistics?: string(name='SendSbjLogistics'),
  sendUserLogistics?: string(name='SendUserLogistics'),
  servicePrice?: float(name='ServicePrice'),
  supplements?: [ 
    {
      acceptExpirationDate?: long(name='AcceptExpirationDate'),
      acceptTime?: long(name='AcceptTime'),
      applicationType?: int32(name='ApplicationType'),
      content?: string(name='Content'),
      officialFile?: string(name='OfficialFile'),
      operateTime?: long(name='OperateTime'),
      orderId?: string(name='OrderId'),
      sbjExpirationDate?: long(name='SbjExpirationDate'),
      sendTime?: long(name='SendTime'),
      serialNumber?: string(name='SerialNumber'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      trademarkNumber?: string(name='TrademarkNumber'),
      userFiles?: [ string ](name='UserFiles'),
    }
  ](name='Supplements'),
  thirdClassifications?: [ 
    {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }
  ](name='ThirdClassifications'),
  totalPrice?: float(name='TotalPrice'),
  trademarkIcon?: string(name='TrademarkIcon'),
  trademarkName?: string(name='TrademarkName'),
  trademarkNameType?: int32(name='TrademarkNameType'),
  trademarkNumber?: string(name='TrademarkNumber'),
  updateTime?: long(name='UpdateTime'),
  userId?: string(name='UserId'),
}

model DescribeAdminTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAdminTrademarkApplicationResponseBody(name='body'),
}

async function describeAdminTrademarkApplication(request: DescribeAdminTrademarkApplicationRequest): DescribeAdminTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAdminTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApplicantRequest {
  applicantId: long(name='ApplicantId', example='234567', position='Query'),
}

model DescribeApplicantResponseBody = {
  address?: string(name='Address'),
  applicantId?: long(name='ApplicantId', example='191248'),
  applicantName?: string(name='ApplicantName'),
  applicantRegion?: int32(name='ApplicantRegion', example='1'),
  applicantType?: int32(name='ApplicantType', example='1'),
  applicantVersion?: string(name='ApplicantVersion'),
  auditStatus?: int32(name='AuditStatus', example='2'),
  authorizationAuditStatus?: int32(name='AuthorizationAuditStatus', example='1'),
  authorizationUrl?: string(name='AuthorizationUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/attorney/gy378w6btam.jpg?Expires=1570697609&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=bG50RI3XsQDML2%2BmEODR%2BERDJvk%3D'),
  businessLicenceUrl?: string(name='BusinessLicenceUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/business_license/gmzl6cvbk48.png?Expires=1568634805&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=fwg73e9bVEN1y6S5%2B0eoFj%2F0Ic4%3D'),
  cardNumber?: string(name='CardNumber', example='123456'),
  contactAddress?: string(name='ContactAddress'),
  contactCity?: string(name='ContactCity'),
  contactCounty?: string(name='ContactCounty'),
  contactDistrict?: string(name='ContactDistrict'),
  contactEmail?: string(name='ContactEmail', example='abcd@alibaba-inc.com'),
  contactName?: string(name='ContactName'),
  contactNumber?: string(name='ContactNumber', example='18611112222'),
  contactProvince?: string(name='ContactProvince'),
  contactZipcode?: string(name='ContactZipcode', example='100000'),
  country?: string(name='Country', example='2096'),
  eAddress?: string(name='EAddress', example='bei jing shi'),
  eName?: string(name='EName', example='zhang san'),
  idCardName?: string(name='IdCardName'),
  idCardNumber?: string(name='IdCardNumber'),
  idCardUrl?: string(name='IdCardUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/card/ujd8hthwfdk.png?Expires=1568634805&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=Q%2FyEfWRJ4KPskGHKmWYYTmsxwmg%3D'),
  legalNoticeUrl?: string(name='LegalNoticeUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com//1219541161213057/legal_notice/mlnpsjmaed.jpg?Expires=1568634805&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=XZAadmnTa7iixE02uKCK2DaLryU%3D'),
  note?: string(name='Note'),
  passportUrl?: string(name='PassportUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/attorney/gy378w6btam.jpg?Expires=1568634805&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=RFN730Owt3a7XJ6W%2BBsAJNHqFeE%3D'),
  personalType?: long(name='PersonalType'),
  principalName?: int32(name='PrincipalName'),
  province?: string(name='Province'),
  requestId?: string(name='RequestId', example='95BB34D6-4A1D-4C55-876F-4B66044BD75B'),
  validDate?: long(name='ValidDate'),
}

model DescribeApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApplicantResponseBody(name='body'),
}

async function describeApplicant(request: DescribeApplicantRequest): DescribeApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplicant', 'POST', '/', 'json', false, 'json', request);
}

model DescribePartnerTrademarkApplicationRequest {
  bizId: string(name='BizId', position='Query'),
}

model DescribePartnerTrademarkApplicationResponseBody = {
  acceptUrl?: string(name='AcceptUrl'),
  applicant?: {
    address?: string(name='Address'),
    applicantName?: string(name='ApplicantName'),
    applicantRegion?: int32(name='ApplicantRegion'),
    applicantType?: int32(name='ApplicantType'),
    auditStatus?: int32(name='AuditStatus'),
    authorizationUrl?: string(name='AuthorizationUrl'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber'),
    contactAddress?: string(name='ContactAddress'),
    contactEmail?: string(name='ContactEmail'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber'),
    contactZipcode?: string(name='ContactZipcode'),
    country?: string(name='Country'),
    eAddress?: string(name='EAddress'),
    eName?: string(name='EName'),
    idCardUrl?: string(name='IdCardUrl'),
    legalNoticeUrl?: string(name='LegalNoticeUrl'),
    passportUrl?: string(name='PassportUrl'),
    principalName?: int32(name='PrincipalName'),
    province?: string(name='Province'),
  }(name='Applicant'),
  applicantId?: long(name='ApplicantId'),
  applicationStatus?: int32(name='ApplicationStatus'),
  applicationType?: int32(name='ApplicationType'),
  authorizationUrl?: string(name='AuthorizationUrl'),
  bizId?: string(name='BizId'),
  blackAndWhiteIconUrl?: string(name='BlackAndWhiteIconUrl'),
  createTime?: long(name='CreateTime'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  firstClassification?: {
    classificationCode?: string(name='ClassificationCode'),
    classificationName?: string(name='ClassificationName'),
  }(name='FirstClassification'),
  judgeResultUrls?: [ string ](name='JudgeResultUrls'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId'),
  orderPrice?: float(name='OrderPrice'),
  principalName?: int32(name='PrincipalName'),
  receiptUrls?: [ string ](name='ReceiptUrls'),
  recvUserLogistics?: string(name='RecvUserLogistics'),
  requestId?: string(name='RequestId'),
  sendSbjLogistics?: string(name='SendSbjLogistics'),
  sendUserLogistics?: string(name='SendUserLogistics'),
  servicePrice?: float(name='ServicePrice'),
  supplements?: [ 
    {
      acceptExpirationDate?: long(name='AcceptExpirationDate'),
      acceptTime?: long(name='AcceptTime'),
      applicationType?: int32(name='ApplicationType'),
      content?: string(name='Content'),
      officialFile?: string(name='OfficialFile'),
      operateTime?: long(name='OperateTime'),
      orderId?: string(name='OrderId'),
      sbjExpirationDate?: long(name='SbjExpirationDate'),
      sendTime?: long(name='SendTime'),
      serialNumber?: string(name='SerialNumber'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      trademarkNumber?: string(name='TrademarkNumber'),
      userFiles?: [ string ](name='UserFiles'),
    }
  ](name='Supplements'),
  thirdClassifications?: [ 
    {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }
  ](name='ThirdClassifications'),
  totalPrice?: float(name='TotalPrice'),
  trademarkIcon?: string(name='TrademarkIcon'),
  trademarkName?: string(name='TrademarkName'),
  trademarkNameType?: int32(name='TrademarkNameType'),
  trademarkNumber?: string(name='TrademarkNumber'),
  updateTime?: long(name='UpdateTime'),
}

model DescribePartnerTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePartnerTrademarkApplicationResponseBody(name='body'),
}

async function describePartnerTrademarkApplication(request: DescribePartnerTrademarkApplicationRequest): DescribePartnerTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePartnerTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model DescribeQualificationStatusRequest {
  tbUid: string(name='TbUid', position='Query'),
}

model DescribeQualificationStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeQualificationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQualificationStatusResponseBody(name='body'),
}

async function describeQualificationStatus(request: DescribeQualificationStatusRequest): DescribeQualificationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQualificationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSupplementRequest {
  supplementId: long(name='SupplementId', example='1', position='Query'),
}

model DescribeSupplementResponseBody = {
  acceptExpirationDate?: long(name='AcceptExpirationDate', example='1569168000000'),
  acceptTime?: long(name='AcceptTime', example='1568736000000'),
  applicationType?: int32(name='ApplicationType', example='1'),
  content?: string(name='Content'),
  officialFile?: string(name='OfficialFile', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/supplement/27102013/4a36c25c.pdf?Expires=1568721724&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=sOaVgAigLlFruOcYDdusZGl5hwk%3D'),
  operateTime?: long(name='OperateTime', example='1568684449000'),
  requestId?: string(name='RequestId', example='9A51DFA3-E149-48C1-842A-7CAEF0CF31BB'),
  sbjExpirationDate?: long(name='SbjExpirationDate', example='1569772800000'),
  sendTime?: long(name='SendTime', example='1568649600000'),
  serialNumber?: string(name='SerialNumber', example='B1021TMZC00000040188506ZCSL0100016'),
  supplementId?: long(name='SupplementId', example='5088'),
  supplementStatus?: int32(name='SupplementStatus', example='1'),
  trademarkNumber?: string(name='TrademarkNumber', example='123456765'),
  userFiles?: {
    userFile?: [ string ](name='UserFile')
  }(name='UserFiles'),
}

model DescribeSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupplementResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeSupplement(request: DescribeSupplementRequest): DescribeSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupplement', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrademarkApplicationRequest {
  bizId: string(name='BizId', example='trademark_register-cn-123456789', position='Query'),
}

model DescribeTrademarkApplicationResponseBody = {
  acceptUrl?: string(name='AcceptUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/sbj-notice/register-notice-123456789SHANG_BIAO_ZHU_CE_SHEN_QING_SHOU_LI_TONG_ZHI_SHU1560887850185.pdf?Expires=1568629374&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=TnkOWf7JrSacldGW1p3uu5YDt2Y%3D'),
  agreementId?: string(name='AgreementId'),
  applicant?: {
    address?: string(name='Address'),
    applicantName?: string(name='ApplicantName'),
    applicantRegion?: int32(name='ApplicantRegion', example='1'),
    applicantType?: int32(name='ApplicantType', example='1'),
    auditStatus?: int32(name='AuditStatus', example='1'),
    authorizationUrl?: string(name='AuthorizationUrl'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber', example='123456'),
    contactAddress?: string(name='ContactAddress'),
    contactEmail?: string(name='ContactEmail', example='test@alibaba.com'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber', example='23456789'),
    contactZipcode?: string(name='ContactZipcode', example='100000'),
    country?: string(name='Country', example='2046'),
    eAddress?: string(name='EAddress', example='bei jing shi'),
    eName?: string(name='EName', example='zhang san'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber'),
    idCardUrl?: string(name='IdCardUrl', example='http://.....'),
    legalNoticeUrl?: string(name='LegalNoticeUrl', example='http://.....'),
    passportUrl?: string(name='PassportUrl', example='http://.....'),
    personalType?: long(name='PersonalType'),
    principalName?: int32(name='PrincipalName'),
    province?: string(name='Province'),
  }(name='Applicant'),
  applicantId?: long(name='ApplicantId', example='23456'),
  applicationStatus?: int32(name='ApplicationStatus', example='1'),
  applicationType?: int32(name='ApplicationType', example='1'),
  authorizationUrl?: string(name='AuthorizationUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/usertrademark/191248_E1DD11C3DC8D82CBA3E08F438C3415BA.jpg?Expires=1568629293&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=bXZ6VzFAqVyBrI8mxo1XYN6BOsQ%3D'),
  bizId?: string(name='BizId', example='trademark_register-cn-123456789'),
  blackAndWhiteIconUrl?: string(name='BlackAndWhiteIconUrl', example='http://...'),
  createTime?: long(name='CreateTime', example='1568626966203'),
  extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
  firstClassification?: {
    classificationCode?: string(name='ClassificationCode', example='03'),
    classificationName?: string(name='ClassificationName'),
  }(name='FirstClassification'),
  flags?: {
    flag?: [ int32 ](name='Flag')
  }(name='Flags'),
  judgeResultUrls?: {
    judgeResultUrl?: [ string ](name='JudgeResultUrl')
  }(name='JudgeResultUrls'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId', example='204469008550629'),
  orderPrice?: float(name='OrderPrice', example='368.0'),
  principalName?: int32(name='PrincipalName'),
  receiptUrls?: {
    receiptUrl?: [ string ](name='ReceiptUrl')
  }(name='ReceiptUrls'),
  recvUserLogistics?: string(name='RecvUserLogistics', example='3456789'),
  requestId?: string(name='RequestId', example='1F34C10A-E135-4782-9EAB-9622F939CAD7'),
  sendSbjLogistics?: string(name='SendSbjLogistics', example='23456789'),
  sendUserLogistics?: string(name='SendUserLogistics', example='34567890'),
  servicePrice?: float(name='ServicePrice', example='100.0'),
  supplements?: {
    supplement?: [ 
    {
      acceptExpirationDate?: long(name='AcceptExpirationDate', example='1568276757000'),
      acceptTime?: long(name='AcceptTime', example='1568276757000'),
      applicationType?: int32(name='ApplicationType', example='1'),
      content?: string(name='Content'),
      officialFile?: string(name='OfficialFile', example='http://...'),
      operateTime?: long(name='OperateTime', example='1568276757000'),
      orderId?: string(name='OrderId', example='4567890'),
      sbjExpirationDate?: long(name='SbjExpirationDate', example='1568276757000'),
      sendTime?: long(name='SendTime', example='1568276757000'),
      serialNumber?: string(name='SerialNumber', example='M34567890'),
      supplementId?: long(name='SupplementId', example='345678'),
      supplementStatus?: int32(name='SupplementStatus', example='1'),
      trademarkNumber?: string(name='TrademarkNumber', example='3456789'),
      userFiles?: {
        userFile?: [ string ](name='UserFile')
      }(name='UserFiles'),
    }
  ](name='Supplement')
  }(name='Supplements'),
  thirdClassifications?: {
    thirdClassification?: [ 
    {
      classificationCode?: string(name='ClassificationCode', example='03'),
      classificationName?: string(name='ClassificationName'),
    }
  ](name='ThirdClassification')
  }(name='ThirdClassifications'),
  totalPrice?: float(name='TotalPrice', example='0.0'),
  trademarkIcon?: string(name='TrademarkIcon', example='http://...'),
  trademarkName?: string(name='TrademarkName'),
  trademarkNameType?: int32(name='TrademarkNameType', example='1'),
  trademarkNumber?: string(name='TrademarkNumber', example='23456789'),
  updateTime?: long(name='UpdateTime', example='1568276757000'),
}

model DescribeTrademarkApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrademarkApplicationResponseBody(name='body'),
}

async function describeTrademarkApplication(request: DescribeTrademarkApplicationRequest): DescribeTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrademarkDetailForInnerRequest {
  uid: string(name='Uid', position='Query'),
  umid?: string(name='Umid', position='Query'),
}

model DescribeTrademarkDetailForInnerResponseBody = {
  agency?: string(name='Agency'),
  applyDate?: string(name='ApplyDate'),
  classification?: string(name='Classification'),
  exclusiveDateLimit?: string(name='ExclusiveDateLimit'),
  flowList?: [ 
    {
      date?: string(name='Date'),
      procedureCode?: string(name='ProcedureCode'),
      procedureDate?: string(name='ProcedureDate'),
      procedureName?: string(name='ProcedureName'),
      procedureResult?: string(name='ProcedureResult'),
      procedureStep?: string(name='ProcedureStep'),
      registrationNumber?: string(name='RegistrationNumber'),
    }
  ](name='FlowList'),
  image?: string(name='Image'),
  imageElement?: string(name='ImageElement'),
  intlRegDate?: string(name='IntlRegDate'),
  lastProcedureStatus?: string(name='LastProcedureStatus'),
  name?: string(name='Name'),
  noticeList?: [ 
    {
      annDate?: string(name='AnnDate'),
      annId?: string(name='AnnId'),
      annNum?: string(name='AnnNum'),
      annTypeCode?: string(name='AnnTypeCode'),
      annTypeName?: string(name='AnnTypeName'),
      applicant?: string(name='Applicant'),
      date?: string(name='Date'),
      imageUrl?: string(name='ImageUrl'),
      originalImageUrl?: string(name='OriginalImageUrl'),
      pageNo?: string(name='PageNo'),
      reactNum?: string(name='ReactNum'),
      registrationNumber?: string(name='RegistrationNumber'),
      trademarkName?: string(name='TrademarkName'),
    }
  ](name='NoticeList'),
  ownerAddress?: string(name='OwnerAddress'),
  ownerEnAddress?: string(name='OwnerEnAddress'),
  ownerEnName?: string(name='OwnerEnName'),
  ownerName?: string(name='OwnerName'),
  preAnnDate?: string(name='PreAnnDate'),
  preAnnNum?: string(name='PreAnnNum'),
  priorityDate?: string(name='PriorityDate'),
  product?: string(name='Product'),
  productDescription?: string(name='ProductDescription'),
  regAnnDate?: string(name='RegAnnDate'),
  regAnnNum?: int32(name='RegAnnNum'),
  registrationNumber?: string(name='RegistrationNumber'),
  registrationType?: string(name='RegistrationType'),
  requestId?: string(name='RequestId'),
  share?: string(name='Share'),
  similarGroup?: string(name='SimilarGroup'),
  status?: string(name='Status'),
  subsequentDesignationDate?: string(name='SubsequentDesignationDate'),
  uid?: string(name='Uid'),
}

model DescribeTrademarkDetailForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrademarkDetailForInnerResponseBody(name='body'),
}

async function describeTrademarkDetailForInner(request: DescribeTrademarkDetailForInnerRequest): DescribeTrademarkDetailForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrademarkDetailForInner', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadFilePolicyRequest {
  fileType: string(name='FileType', example='ATTORNEY', position='Query'),
}

model GenerateUploadFilePolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSSAccessKeyId', example='hObpgEXoca42qH3V'),
  encodedPolicy?: string(name='EncodedPolicy', example='eyJleHBpcmF0aW9uIjoiMjAxOS0wOS0xNlQwODo1Njo0Ni4yMjFaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMjA0ODAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIjEzNDg2NTM3NTU0NzI4NTUvaWNvbiJdLFsiZXEiLCIkYnVja2V0IiwidHJhZGUtbWFyay11c2VyLXVwbG9hZCJdXX0='),
  expireTime?: long(name='ExpireTime', example='1568624206221'),
  fileDir?: string(name='FileDir', example='123456789/icon'),
  host?: string(name='Host', description='host', example='//trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/'),
  requestId?: string(name='RequestId', example='7E617C0D-C226-473D-A9C4-3252B7792FA1'),
  signature?: string(name='Signature', example='yjIcnOapBfLe4kt0nIF272GprgE='),
}

model GenerateUploadFilePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadFilePolicyResponseBody(name='body'),
}

async function generateUploadFilePolicy(request: GenerateUploadFilePolicyRequest): GenerateUploadFilePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadFilePolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetAlipayUrlRequest {
  bizType: string(name='BizType', position='Query'),
  orderId: long(name='OrderId', minimum=1, maximum=9223372036854775807, position='Query'),
  returnUrl?: string(name='ReturnUrl', position='Query'),
  type: string(name='Type', position='Query'),
}

model GetAlipayUrlResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAlipayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlipayUrlResponseBody(name='body'),
}

async function getAlipayUrl(request: GetAlipayUrlRequest): GetAlipayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlipayUrl', 'GET', '/', 'json', false, 'json', request);
}

model GetOrderConfirmUrlRequest {
  items?: [ 
    {
      itemCode?: string(name='ItemCode'),
      quantity?: long(name='Quantity'),
    }
  ](name='Items', position='Query'),
  outTraceCode?: string(name='OutTraceCode', position='Query'),
  outTraceType?: string(name='OutTraceType', position='Query'),
}

model GetOrderConfirmUrlResponseBody = {
  confirmUrl?: string(name='ConfirmUrl'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOrderConfirmUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrderConfirmUrlResponseBody(name='body'),
}

async function getOrderConfirmUrl(request: GetOrderConfirmUrlRequest): GetOrderConfirmUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderConfirmUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetStsByTaobaoUidRequest {
  aliyunUid?: string(name='AliyunUid', position='Query'),
  tbUid: string(name='TbUid', position='Query'),
}

model GetStsByTaobaoUidResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  accessKeySecret?: string(name='AccessKeySecret'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  expiration?: string(name='Expiration'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  success?: boolean(name='Success'),
}

model GetStsByTaobaoUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStsByTaobaoUidResponseBody(name='body'),
}

async function getStsByTaobaoUid(request: GetStsByTaobaoUidRequest): GetStsByTaobaoUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStsByTaobaoUid', 'POST', '/', 'json', false, 'json', request);
}

model ListAdminTrademarkApplicationLogsRequest {
  bizId: string(name='BizId', position='Query'),
}

model ListAdminTrademarkApplicationLogsResponseBody = {
  requestId?: string(name='RequestId'),
  trademarkApplicationLogs?: [ 
    {
      bizId?: string(name='BizId'),
      bizStatus?: int32(name='BizStatus'),
      note?: string(name='Note'),
      operateTime?: long(name='OperateTime'),
      operateType?: int32(name='OperateType'),
    }
  ](name='TrademarkApplicationLogs'),
}

model ListAdminTrademarkApplicationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdminTrademarkApplicationLogsResponseBody(name='body'),
}

async function listAdminTrademarkApplicationLogs(request: ListAdminTrademarkApplicationLogsRequest): ListAdminTrademarkApplicationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAdminTrademarkApplicationLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListAdminTrademarkApplicationsRequest {
  applicantName?: string(name='ApplicantName', position='Query'),
  applicationStatus?: int32(name='ApplicationStatus', minimum=0, maximum=200, position='Query'),
  applicationType?: string(name='ApplicationType', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  supplementStatus?: int32(name='SupplementStatus', minimum=1, maximum=6, position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
  trademarkNumber?: string(name='TrademarkNumber', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model ListAdminTrademarkApplicationsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trademarkApplications?: [ 
    {
      applicantId?: long(name='ApplicantId'),
      applicantName?: string(name='ApplicantName'),
      applicationStatus?: int32(name='ApplicationStatus'),
      applicationType?: int32(name='ApplicationType'),
      authorizationUrl?: string(name='AuthorizationUrl'),
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      firstClassification?: {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }(name='FirstClassification'),
      flags?: [ string ](name='Flags'),
      note?: string(name='Note'),
      orderId?: string(name='OrderId'),
      orderPrice?: float(name='OrderPrice'),
      principalName?: int32(name='PrincipalName'),
      servicePrice?: float(name='ServicePrice'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      systemVersion?: string(name='SystemVersion'),
      thirdClassification?: [ 
        {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }
      ](name='ThirdClassification'),
      totalPrice?: float(name='TotalPrice'),
      trademarkIcon?: string(name='TrademarkIcon'),
      trademarkName?: string(name='TrademarkName'),
      trademarkNumber?: string(name='TrademarkNumber'),
      updateTime?: long(name='UpdateTime'),
      userId?: string(name='UserId'),
    }
  ](name='TrademarkApplications'),
}

model ListAdminTrademarkApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAdminTrademarkApplicationsResponseBody(name='body'),
}

async function listAdminTrademarkApplications(request: ListAdminTrademarkApplicationsRequest): ListAdminTrademarkApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAdminTrademarkApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicantsRequest {
  applicantName?: string(name='ApplicantName', position='Query'),
  applicantRegion?: int32(name='ApplicantRegion', example='1', position='Query'),
  applicantType?: int32(name='ApplicantType', example='1', position='Query'),
  applicantVersion?: string(name='ApplicantVersion', position='Query'),
  auditStatus?: int32(name='AuditStatus', example='1', position='Query'),
  cardNumber?: string(name='CardNumber', example='23456789', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  systemVersion?: string(name='SystemVersion', example='V1', position='Query'),
}

model ListApplicantsResponseBody = {
  applicants?: {
    applicant?: [ 
    {
      applicantId?: long(name='ApplicantId', example='66295'),
      applicantName?: string(name='ApplicantName'),
      applicantRegion?: int32(name='ApplicantRegion', example='1'),
      applicantType?: int32(name='ApplicantType', example='1'),
      applicantVersion?: string(name='ApplicantVersion'),
      auditStatus?: int32(name='AuditStatus', example='4'),
      authorizationAuditStatus?: int32(name='AuthorizationAuditStatus', example='1'),
      authorizationUrl?: string(name='AuthorizationUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/attorney/n9neyrbkkp.png?Expires=1570698256&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=i9IdRS8N1swKF%2FJyMpkHglFgFuw%3D'),
      cardNumber?: string(name='CardNumber', example='31231231'),
      contactName?: string(name='ContactName', example='23432qwe'),
      principalName?: int32(name='PrincipalName'),
      systemVersion?: string(name='SystemVersion'),
      validDate?: long(name='ValidDate'),
    }
  ](name='Applicant')
  }(name='Applicants'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8B08302F-8306-4A6F-BFAF-E9EC69A26476'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListApplicantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicantsResponseBody(name='body'),
}

async function listApplicants(request: ListApplicantsRequest): ListApplicantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicants', 'POST', '/', 'json', false, 'json', request);
}

model ListAreasRequest {
  bizType: string(name='BizType', position='Query'),
  parentCode?: string(name='ParentCode', position='Query'),
}

model ListAreasResponseBody = {
  datas?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
      parentCode?: string(name='ParentCode'),
      sortNum?: int32(name='SortNum'),
      subArea?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
          parentCode?: string(name='ParentCode'),
          sortNum?: int32(name='SortNum'),
        }
      ](name='SubArea'),
    }
  ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListAreasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAreasResponseBody(name='body'),
}

async function listAreas(request: ListAreasRequest): ListAreasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAreas', 'POST', '/', 'json', false, 'json', request);
}

model ListClassificationConditionsRequest {
  tagName?: string(name='TagName', position='Query'),
  type?: long(name='Type', position='Query'),
}

model ListClassificationConditionsResponseBody = {
  data?: [ 
    {
      conditionContent?: string(name='ConditionContent'),
      createTime?: long(name='CreateTime'),
      id?: long(name='Id'),
      sessionId?: string(name='SessionId'),
      tagName?: string(name='TagName'),
      type?: long(name='Type'),
      umid?: string(name='Umid'),
      updateTime?: long(name='UpdateTime'),
      userId?: long(name='UserId'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListClassificationConditionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClassificationConditionsResponseBody(name='body'),
}

async function listClassificationConditions(request: ListClassificationConditionsRequest): ListClassificationConditionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClassificationConditions', 'POST', '/', 'json', false, 'json', request);
}

model ListClassificationsRequest {
  parentCode?: string(name='ParentCode', example='01', position='Query'),
}

model ListClassificationsResponseBody = {
  classifications?: {
    classification?: [ 
    {
      classificationCode?: string(name='ClassificationCode', example='01'),
      classificationName?: string(name='ClassificationName'),
      id?: long(name='Id'),
      level?: int32(name='Level', example='1'),
      officialCode?: string(name='OfficialCode', example='01'),
      parentCode?: string(name='ParentCode', example='0'),
    }
  ](name='Classification')
  }(name='Classifications'),
  requestId?: string(name='RequestId', example='B1D37915-0B88-4287-B5F4-4DC20D375CF9'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListClassificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClassificationsResponseBody(name='body'),
}

async function listClassifications(request: ListClassificationsRequest): ListClassificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClassifications', 'POST', '/', 'json', false, 'json', request);
}

model ListTrademarkApplicationLogsRequest {
  bizId: string(name='BizId', example='trademark_register-cn-123456789', position='Query'),
}

model ListTrademarkApplicationLogsResponseBody = {
  requestId?: string(name='RequestId', example='5D77ECD7-38AE-4D46-AA38-95EE8552CE96'),
  trademarkApplicationLogs?: {
    trademarkApplicationLog?: [ 
    {
      bizId?: string(name='BizId', example='trademark_register-cn-78v1a67zy01'),
      bizStatus?: int32(name='BizStatus', example='0'),
      note?: string(name='Note'),
      operateTime?: long(name='OperateTime', example='1568632960000'),
      operateType?: int32(name='OperateType', example='1'),
    }
  ](name='TrademarkApplicationLog')
  }(name='TrademarkApplicationLogs'),
}

model ListTrademarkApplicationLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrademarkApplicationLogsResponseBody(name='body'),
}

async function listTrademarkApplicationLogs(request: ListTrademarkApplicationLogsRequest): ListTrademarkApplicationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrademarkApplicationLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListTrademarkApplicationsRequest {
  applicantName?: string(name='ApplicantName', position='Query'),
  applicationStatus?: int32(name='ApplicationStatus', example='0', position='Query'),
  applicationType?: string(name='ApplicationType', example='1', position='Query'),
  bizId?: string(name='BizId', example='trademark_prepayment_pre-cn-12345678', position='Query'),
  createTimeLeft?: long(name='CreateTimeLeft', position='Query'),
  createTimeRight?: long(name='CreateTimeRight', position='Query'),
  flag?: int32(name='Flag', minimum=1, maximum=100, position='Query'),
  orderId?: string(name='OrderId', example='204469008550629', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productType?: int32(name='ProductType', minimum=1, maximum=100, position='Query'),
  queryVoucherOrderDoneFlag?: boolean(name='QueryVoucherOrderDoneFlag', position='Query'),
  queryVoucherOrderFlag?: boolean(name='QueryVoucherOrderFlag', position='Query'),
  sortFiled?: string(name='SortFiled', position='Query'),
  sortOrder?: string(name='SortOrder', example='ASC', position='Query'),
  supplementStatus?: int32(name='SupplementStatus', example='2', position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
  trademarkNumber?: string(name='TrademarkNumber', example='12345678', position='Query'),
}

model ListTrademarkApplicationsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='023DD338-800F-4C55-86E6-EE8E203336BF'),
  totalCount?: int32(name='TotalCount', example='1'),
  trademarkApplications?: {
    trademarkApplication?: [ 
    {
      agreementId?: string(name='AgreementId'),
      applicantId?: long(name='ApplicantId', example='1'),
      applicantName?: string(name='ApplicantName'),
      applicationStatus?: int32(name='ApplicationStatus', example='1'),
      applicationType?: int32(name='ApplicationType', example='1'),
      authorizationUrl?: string(name='AuthorizationUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/icon/6xreg1ooy9a.jpg?Expires=1570955079&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=Qdyo6vrdAaktFB6iEumnXO2plME%3D'),
      bizId?: string(name='BizId', example='trademark_register-cn-v0h1awaycdp'),
      createTime?: long(name='CreateTime', example='1568276757000'),
      firstClassification?: {
        classificationCode?: string(name='ClassificationCode', example='03'),
        classificationName?: string(name='ClassificationName'),
      }(name='FirstClassification'),
      flags?: {
        flags?: [ string ](name='Flags')
      }(name='Flags'),
      note?: string(name='Note'),
      orderId?: string(name='OrderId', example='204469008550629'),
      orderPrice?: float(name='OrderPrice', example='368.0'),
      principalName?: int32(name='PrincipalName'),
      servicePrice?: float(name='ServicePrice', example='0.0'),
      supplementId?: long(name='SupplementId', example='1'),
      supplementStatus?: int32(name='SupplementStatus', example='1'),
      systemVersion?: string(name='SystemVersion'),
      thirdClassification?: {
        thirdClassification?: [ 
        {
          classificationCode?: string(name='ClassificationCode', example='030026'),
          classificationName?: string(name='ClassificationName'),
        }
      ](name='ThirdClassification')
      }(name='ThirdClassification'),
      totalPrice?: float(name='TotalPrice', example='100.0'),
      trademarkIcon?: string(name='TrademarkIcon', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/icon/6xreg1ooy9a.jpg?Expires=1570955079&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=Qdyo6vrdAaktFB6iEumnXO2plME%3D'),
      trademarkName?: string(name='TrademarkName'),
      trademarkNumber?: string(name='TrademarkNumber', example='345678'),
      updateTime?: long(name='UpdateTime', example='1568276757000'),
      userId?: string(name='UserId', example='1219541161213057'),
    }
  ](name='TrademarkApplication')
  }(name='TrademarkApplications'),
}

model ListTrademarkApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrademarkApplicationsResponseBody(name='body'),
}

async function listTrademarkApplications(request: ListTrademarkApplicationsRequest): ListTrademarkApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrademarkApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListTrademarkSearchForInnerRequest {
  applyBeginTime?: string(name='ApplyBeginTime', position='Query'),
  applyEndTime?: string(name='ApplyEndTime', position='Query'),
  classification?: string(name='Classification', position='Query'),
  ifPrecision?: boolean(name='IfPrecision', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  product?: string(name='Product', position='Query'),
  searchPreference?: string(name='SearchPreference', position='Query'),
  searchType?: string(name='SearchType', position='Query'),
  status?: string(name='Status', position='Query'),
  umid?: string(name='Umid', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model ListTrademarkSearchForInnerResponseBody = {
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  products?: [ string ](name='Products'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  trademarkSearchContents?: [ 
    {
      applyDate?: string(name='ApplyDate'),
      classification?: string(name='Classification'),
      exclusiveDateLimit?: string(name='ExclusiveDateLimit'),
      id?: long(name='Id'),
      image?: string(name='Image'),
      lastProcedureStatus?: string(name='LastProcedureStatus'),
      name?: string(name='Name'),
      nameCharSection?: string(name='NameCharSection'),
      nameOrigin?: string(name='NameOrigin'),
      nameSimplifiedChinese?: string(name='NameSimplifiedChinese'),
      nameSort?: string(name='NameSort'),
      onSale?: string(name='OnSale'),
      ownerAddress?: string(name='OwnerAddress'),
      ownerEnAddress?: string(name='OwnerEnAddress'),
      ownerEnName?: string(name='OwnerEnName'),
      ownerName?: string(name='OwnerName'),
      preAnnDate?: string(name='PreAnnDate'),
      preAnnNum?: string(name='PreAnnNum'),
      product?: string(name='Product'),
      productDel?: [ string ](name='ProductDel'),
      productDescription?: string(name='ProductDescription'),
      regAnnNum?: string(name='RegAnnNum'),
      registrationNumber?: string(name='RegistrationNumber'),
      share?: string(name='Share'),
      similarGroupDel?: [ string ](name='SimilarGroupDel'),
      uid?: string(name='Uid'),
      wellKnow?: string(name='WellKnow'),
    }
  ](name='TrademarkSearchContents'),
}

model ListTrademarkSearchForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrademarkSearchForInnerResponseBody(name='body'),
}

async function listTrademarkSearchForInner(request: ListTrademarkSearchForInnerRequest): ListTrademarkSearchForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrademarkSearchForInner', 'POST', '/', 'json', false, 'json', request);
}

model PutMeasureDataRequest {
  bizType: string(name='BizType', position='Body'),
  data: string(name='Data', position='Body'),
  dataType: string(name='DataType', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model PutMeasureDataResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model PutMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataResponseBody(name='body'),
}

async function putMeasureData(request: PutMeasureDataRequest): PutMeasureDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureData', 'POST', '/', 'json', true, 'form', request);
}

model PutMeasureReadyFlagRequest {
  bizType: string(name='BizType', position='Query'),
  dataType: string(name='DataType', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  readyFlag: string(name='ReadyFlag', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model PutMeasureReadyFlagResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model PutMeasureReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureReadyFlagResponseBody(name='body'),
}

async function putMeasureReadyFlag(request: PutMeasureReadyFlagRequest): PutMeasureReadyFlagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureReadyFlag', 'POST', '/', 'json', false, 'json', request);
}

model QueryActivityItemsRequest {
  activityId?: int32(name='ActivityId', position='Query'),
  extendInfo?: string(name='ExtendInfo', position='Query'),
  floorIndex?: int32(name='FloorIndex', example='0', position='Query'),
  mock?: boolean(name='Mock', position='Query'),
  pageIndex?: int32(name='PageIndex', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=3, maximum=30, position='Query'),
  refresh?: boolean(name='Refresh', position='Query'),
  umId?: string(name='UmId', position='Query'),
}

model QueryActivityItemsResponseBody = {
  module?: {
    data?: string(name='Data'),
    floorDisplayInfos?: {
      floor?: [ 
      {
        icon?: string(name='Icon'),
        index?: int32(name='Index'),
        name?: string(name='Name'),
        subTitles?: {
          subFloor?: [ 
          {
            icon?: string(name='Icon'),
            name?: string(name='Name'),
            title?: string(name='Title'),
            value?: string(name='Value'),
          }
        ](name='subFloor')
        }(name='SubTitles'),
        title?: string(name='Title'),
      }
    ](name='floor')
    }(name='FloorDisplayInfos'),
    floorItems?: string(name='FloorItems'),
  }(name='Module'),
}

model QueryActivityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryActivityItemsResponseBody(name='body'),
}

async function queryActivityItems(request: QueryActivityItemsRequest): QueryActivityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryActivityItems', 'POST', '/', 'json', false, 'json', request);
}

model QueryAliyunUidRequest {
  tbUid: string(name='TbUid', position='Query'),
}

model QueryAliyunUidResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  uid?: string(name='Uid'),
}

model QueryAliyunUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAliyunUidResponseBody(name='body'),
}

async function queryAliyunUid(request: QueryAliyunUidRequest): QueryAliyunUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAliyunUid', 'POST', '/', 'json', false, 'json', request);
}

model QueryDetailItemRequest {
  detailConvertType?: string(name='DetailConvertType', position='Query'),
  detailId?: string(name='DetailId', position='Query'),
  detailType?: string(name='DetailType', position='Query'),
  mock?: boolean(name='Mock', position='Query'),
}

model QueryDetailItemResponseBody = {
  module?: {
    attributes?: {
      attribute?: [ 
      {
        name?: string(name='Name'),
        title?: string(name='Title'),
        value?: string(name='Value'),
      }
    ](name='attribute')
    }(name='Attributes'),
    detailDescription?: string(name='DetailDescription'),
    detailObjectJson?: string(name='DetailObjectJson'),
    detailPagePicUrl?: string(name='DetailPagePicUrl'),
    detailPicUrl?: {
      picUlr?: [ string ](name='picUlr')
    }(name='DetailPicUrl'),
    label?: string(name='Label'),
    mainPicUrl?: string(name='MainPicUrl'),
    title?: string(name='Title'),
    type?: string(name='Type'),
  }(name='Module'),
}

model QueryDetailItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDetailItemResponseBody(name='body'),
}

async function queryDetailItem(request: QueryDetailItemRequest): QueryDetailItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDetailItem', 'POST', '/', 'json', false, 'json', request);
}

model QueryRemainResourcesRequest {
  bizType: string(name='BizType', position='Query'),
}

model QueryRemainResourcesResponseBody = {
  data?: long(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryRemainResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRemainResourcesResponseBody(name='body'),
}

async function queryRemainResources(request: QueryRemainResourcesRequest): QueryRemainResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRemainResources', 'GET', '/', 'json', false, 'json', request);
}

model RefuseSupplementRequest {
  supplementId: long(name='SupplementId', example='1', position='Query'),
}

model RefuseSupplementResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='12244B90-2786-4C63-9FE9-34AE9E508857'),
  success?: boolean(name='Success', example='true'),
}

model RefuseSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefuseSupplementResponseBody(name='body'),
}

async function refuseSupplement(request: RefuseSupplementRequest): RefuseSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefuseSupplement', 'POST', '/', 'json', false, 'json', request);
}

model RejectExpertSolutionRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model RejectExpertSolutionResponseBody = {
  requestId?: string(name='RequestId'),
}

model RejectExpertSolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectExpertSolutionResponseBody(name='body'),
}

async function rejectExpertSolution(request: RejectExpertSolutionRequest): RejectExpertSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectExpertSolution', 'POST', '/', 'json', false, 'json', request);
}

model RemoveApplicantRequest {
  applicantId: long(name='ApplicantId', example='234567', position='Query'),
}

model RemoveApplicantResponseBody = {
  code?: string(name='Code', example='success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='88C7CDCD-1E99-47FB-B781-8156F14B6A91'),
  success?: boolean(name='Success', example='true'),
}

model RemoveApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveApplicantResponseBody(name='body'),
}

async function removeApplicant(request: RemoveApplicantRequest): RemoveApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApplicant', 'POST', '/', 'json', false, 'json', request);
}

model SaveSearchConditionRequest {
  conditionContent: string(name='ConditionContent', maxLength=160000, position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
  tagName?: string(name='TagName', maxLength=20, position='Body'),
  type: int32(name='Type', minimum=0, maximum=2147483647, position='Body'),
  umid?: string(name='Umid', position='Body'),
}

model SaveSearchConditionResponseBody = {
  code?: string(name='Code'),
  conditionContent?: string(name='ConditionContent'),
  conditionId?: long(name='ConditionId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sessionId?: string(name='SessionId'),
  success?: boolean(name='Success'),
  tagName?: string(name='TagName'),
  type?: int32(name='Type'),
  umid?: string(name='Umid'),
  userId?: long(name='UserId'),
}

model SaveSearchConditionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveSearchConditionResponseBody(name='body'),
}

async function saveSearchCondition(request: SaveSearchConditionRequest): SaveSearchConditionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveSearchCondition', 'POST', '/', 'json', true, 'form', request);
}

model SaveTemporaryApplicantRequest {
  address?: string(name='Address', position='Query'),
  applicantId?: long(name='ApplicantId', minimum=1, maximum=2147483647, position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', position='Query'),
  cardNumber?: string(name='CardNumber', position='Query'),
  city?: string(name='City', position='Query'),
  completeApplicant?: boolean(name='CompleteApplicant', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipCode?: string(name='ContactZipCode', position='Query'),
  country?: string(name='Country', position='Query'),
  eAddress?: string(name='EAddress', position='Query'),
  eName?: string(name='EName', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', position='Query'),
  loaOssKey?: string(name='LoaOssKey', position='Query'),
  name?: string(name='Name', position='Query'),
  passportOssKey?: string(name='PassportOssKey', position='Query'),
  principalName?: int32(name='PrincipalName', minimum=1, maximum=2, position='Query'),
  province?: string(name='Province', position='Query'),
  region?: string(name='Region', position='Query'),
  town?: string(name='Town', position='Query'),
  type?: string(name='Type', position='Query'),
}

model SaveTemporaryApplicantResponseBody = {
  applicantId?: long(name='ApplicantId'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveTemporaryApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveTemporaryApplicantResponseBody(name='body'),
}

async function saveTemporaryApplicant(request: SaveTemporaryApplicantRequest): SaveTemporaryApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTemporaryApplicant', 'POST', '/', 'json', false, 'json', request);
}

model SearchItemsRequest {
  excludedTags?: string(name='ExcludedTags', position='Query'),
  excludedUids?: string(name='ExcludedUids', position='Query'),
  feedsType?: boolean(name='FeedsType', position='Query'),
  intCls?: string(name='IntCls', position='Query'),
  keywords?: string(name='Keywords', position='Query'),
  mock?: boolean(name='Mock', position='Query'),
  pageIndex?: int32(name='PageIndex', minimum=0, position='Query'),
  pageSize?: int32(name='PageSize', minimum=2, maximum=50, position='Query'),
  priceLeft?: string(name='PriceLeft', position='Query'),
  priceRight?: string(name='PriceRight', position='Query'),
  products?: string(name='Products', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  sort?: string(name='Sort', position='Query'),
  sortType?: int32(name='SortType', position='Query'),
  tags?: string(name='Tags', position='Query'),
  trademarkNameLength?: int32(name='TrademarkNameLength', position='Query'),
  trademarkNameType?: string(name='TrademarkNameType', position='Query'),
  umId?: string(name='UmId', position='Query'),
}

model SearchItemsResponseBody = {
  module?: {
    currentPageNum?: int32(name='CurrentPageNum'),
    date?: {
      item?: [ 
      {
        detailViewObjectSourceDatum?: string(name='DetailViewObjectSourceDatum'),
        detailViewObjectSourceType?: string(name='DetailViewObjectSourceType'),
      }
    ](name='item')
    }(name='Date'),
    pageSize?: int32(name='PageSize'),
    totalItemNum?: int32(name='TotalItemNum'),
    totalPageNum?: int32(name='TotalPageNum'),
  }(name='Module'),
}

model SearchItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchItemsResponseBody(name='body'),
}

async function searchItems(request: SearchItemsRequest): SearchItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchItems', 'POST', '/', 'json', false, 'json', request);
}

model SearchSimilarityRequest {
  classifications: map[string]any(name='Classifications', shrink='json', position='Query'),
  limit?: int32(name='Limit', minimum=1, maximum=50, position='Query'),
  nameUriList?: [ 
    {
      name?: string(name='Name'),
      uri?: string(name='Uri'),
    }
  ](name='NameUriList', minimum=1, maximum=10, position='Query'),
  searchType?: string(name='SearchType', position='Query'),
  showDetail?: boolean(name='ShowDetail', position='Query'),
  similarGroups?: map[string]any(name='SimilarGroups', shrink='json', position='Query'),
  sorter?: string(name='Sorter', minLength=1, maxLength=10, position='Query'),
  umid?: string(name='Umid', position='Query'),
}

model SearchSimilarityResponseBody = {
  dataList?: [ 
    {
      classificationSimilarityList?: [ 
        {
          classification?: int32(name='Classification'),
          classificationName?: string(name='ClassificationName'),
          rate?: int32(name='Rate'),
          similarGroupList?: [ 
            {
              detailList?: [ 
                {
                  code?: string(name='Code'),
                  name?: string(name='Name'),
                  rate?: int32(name='Rate'),
                  tmNumber?: string(name='TmNumber'),
                  uid?: string(name='Uid'),
                  uri?: string(name='Uri'),
                }
              ](name='DetailList'),
              rate?: int32(name='Rate'),
              similarGroup?: string(name='SimilarGroup'),
              similarGroupName?: string(name='SimilarGroupName'),
            }
          ](name='SimilarGroupList'),
        }
      ](name='ClassificationSimilarityList'),
      name?: string(name='Name'),
      uri?: string(name='Uri'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId'),
}

model SearchSimilarityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchSimilarityResponseBody(name='body'),
}

async function searchSimilarity(request: SearchSimilarityRequest): SearchSimilarityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchSimilarity', 'POST', '/', 'json', false, 'json', request);
}

model SearchSimilarityListRequest {
  classifications: map[string]any(name='Classifications', shrink='json', position='Query'),
  name?: string(name='Name', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  similarGroups?: map[string]any(name='SimilarGroups', shrink='json', position='Query'),
  status?: int32(name='Status', position='Query'),
  successSearchType: string(name='SuccessSearchType', position='Query'),
  umid?: string(name='Umid', position='Query'),
  uri?: string(name='Uri', position='Query'),
}

model SearchSimilarityListResponseBody = {
  data?: [ 
    {
      applyDate?: string(name='ApplyDate'),
      classification?: string(name='Classification'),
      exclusiveDateLimit?: string(name='ExclusiveDateLimit'),
      id?: long(name='Id'),
      image?: string(name='Image'),
      lastProcedureStatus?: string(name='LastProcedureStatus'),
      name?: string(name='Name'),
      onSale?: int32(name='OnSale'),
      ownerAddress?: string(name='OwnerAddress'),
      ownerEnAddress?: string(name='OwnerEnAddress'),
      ownerEnName?: string(name='OwnerEnName'),
      ownerName?: string(name='OwnerName'),
      preAnnDate?: string(name='PreAnnDate'),
      preAnnNum?: string(name='PreAnnNum'),
      product?: string(name='Product'),
      productDesc?: string(name='ProductDesc'),
      regAnnDate?: string(name='RegAnnDate'),
      regAnnNum?: string(name='RegAnnNum'),
      registrationNumber?: string(name='RegistrationNumber'),
      share?: string(name='Share'),
      status?: string(name='Status'),
      uid?: string(name='Uid'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model SearchSimilarityListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchSimilarityListResponseBody(name='body'),
}

async function searchSimilarityList(request: SearchSimilarityListRequest): SearchSimilarityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchSimilarityList', 'POST', '/', 'json', false, 'json', request);
}

model SendMessageToUserRequest {
  receiverNickName?: string(name='ReceiverNickName', position='Query'),
  senderNickName?: string(name='SenderNickName', position='Query'),
  templateData?: map[string]any(name='TemplateData', shrink='json', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
}

model SendMessageToUserResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendMessageToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageToUserResponseBody(name='body'),
}

async function sendMessageToUser(request: SendMessageToUserRequest): SendMessageToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessageToUser', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSupplementRequest {
  content?: string(name='Content', position='Query'),
  supplementId: long(name='SupplementId', example='1', position='Query'),
  userFiles?: map[string]any(name='UserFiles', shrink='json', position='Query'),
}

model SubmitSupplementResponseBody = {
  code?: string(name='Code', example='SUPPLEMENT_STATUS_ERROR'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='adfghjk-123456-234dd-asdfasdf'),
  success?: boolean(name='Success', example='false'),
}

model SubmitSupplementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSupplementResponseBody(name='body'),
}

/**
  * ***
  *
 */
async function submitSupplement(request: SubmitSupplementRequest): SubmitSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSupplement', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicantRequest {
  address?: string(name='Address', position='Query'),
  applicantId: long(name='ApplicantId', example='123456', position='Query'),
  applicantName?: string(name='ApplicantName', position='Query'),
  authorizationOssKey?: string(name='AuthorizationOssKey', example='1234567/xxxx.jpg', position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', example='1234567/xxxx.jpg', position='Query'),
  cardNumber?: string(name='CardNumber', example='1234567890', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', example='test123@alibaba.com', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', example='123456789', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipcode?: string(name='ContactZipcode', example='100000', position='Query'),
  eAddress?: string(name='EAddress', example='xxxxxxxxxx', position='Query'),
  eName?: string(name='EName', example='zhang san', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', example='1234567/xxxx.jpg', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', example='1234567/xxxx.jpg', position='Query'),
  passportOssKey?: string(name='PassportOssKey', example='1234567/xxxx.jpg', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
  province?: string(name='Province', position='Query'),
}

model UpdateApplicantResponseBody = {
  requestId?: string(name='RequestId', example='40D24883-BB1B-4C2B-BC93-4F9DEB8F40FA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateApplicantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicantResponseBody(name='body'),
}

async function updateApplicant(request: UpdateApplicantRequest): UpdateApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicant', 'POST', '/', 'json', false, 'json', request);
}

