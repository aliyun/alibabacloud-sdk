/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'aiccs';
  @version = '2023-05-16';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddBlacklistRequest {
  expiredDay: string(name='ExpiredDay', description='有效天数', example='1', position='Query'),
  numbers: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark: string(name='Remark', description='备注', example='示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddBlacklistResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机号'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model AddBlacklistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBlacklistResponseBody(name='body'),
}

async function addBlacklist(request: AddBlacklistRequest): AddBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model AddTaskRequest {
  callTimeList?: [ 
    {
      callTime?: [ string ](name='CallTime'),
    }
  ](name='CallTimeList', description='外呼时间', shrink='json', position='Query'),
  callbackUrl?: string(name='CallbackUrl', description='回调地址', example='示例值示例值示例值', position='Query'),
  flashSmsTemplateId?: long(name='FlashSmsTemplateId', description='当发送闪信配置为1时，闪信模板ID必填', example='96', position='Query'),
  flashSmsType?: long(name='FlashSmsType', description='发送闪信配置', example='0', position='Query'),
  maxConcurrency?: long(name='MaxConcurrency', description='并发数', example='99', position='Query'),
  name: string(name='Name', description='任务名称', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playSleepVal?: long(name='PlaySleepVal', description='播放间隔时长', example='89', position='Query'),
  playTimes?: long(name='PlayTimes', description='录音播放次数', example='51', position='Query'),
  recallType?: long(name='RecallType', description='重呼配置', example='53', position='Query'),
  recordPath?: string(name='RecordPath', description='录音地址', example='示例值', position='Query'),
  repeatCount?: long(name='RepeatCount', description='重呼次数', example='37', position='Query'),
  repeatInterval?: long(name='RepeatInterval', description='重呼间隔', example='14', position='Query'),
  repeatReason?: [ string ](name='RepeatReason', description='重呼条件', shrink='json', position='Query'),
  repeatTimes?: [ string ](name='RepeatTimes', description='重呼时间', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendSmsPlan?: [ 
    {
      intentTags?: [ string ](name='IntentTags', description='意向标签'),
      smsTemplateId?: long(name='SmsTemplateId', description='短信模板ID', example='71'),
    }
  ](name='SendSmsPlan', description='短信发送规则', shrink='json', position='Query'),
  startTime?: string(name='StartTime', description='任务启动日期', example='2022-09-16', position='Query'),
  taskType: long(name='TaskType', description='任务类型', example='1', position='Query'),
  templateId?: long(name='TemplateId', description='话术模板ID', example='17', position='Query'),
  templateType?: long(name='TemplateType', description='话术模板类型', example='1', position='Query'),
}

model AddTaskResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值'),
  model?: {
    taskId?: long(name='TaskId', description='任务ID', example='47'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5453cc9b-02bc-4dbb-9527-f28a9100b912'),
  success?: boolean(name='Success', example='false'),
  timestamp?: long(name='Timestamp', example='1686225227338'),
}

model AddTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTaskResponseBody(name='body'),
}

async function addTask(request: AddTaskRequest): AddTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTask', 'POST', '/', 'json', false, 'json', request);
}

model AgentCancelCallRequest {
  agentId?: long(name='AgentId', description='坐席ID', example='64', position='Query'),
  agentTag?: string(name='AgentTag', description='坐席标签', example='abc', position='Query'),
  numbers?: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ string ](name='Tags', description='用户自定义标签列表', shrink='json', position='Query'),
}

model AgentCancelCallResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值'),
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机列表'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model AgentCancelCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentCancelCallResponseBody(name='body'),
}

async function agentCancelCall(request: AgentCancelCallRequest): AgentCancelCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AgentCancelCall', 'POST', '/', 'json', false, 'json', request);
}

model AgentRecoverCallRequest {
  agentId?: long(name='AgentId', description='坐席ID', example='5', position='Query'),
  agentTag?: string(name='AgentTag', description='坐席标签', example='abc', position='Query'),
  beginImportTime?: string(name='BeginImportTime', description='查询开始导入时间', example='2020-03-06 10:10:10', position='Query'),
  endImportTime?: string(name='EndImportTime', description='查询结束导入时间', example='2021-03-06 10:10:10', position='Query'),
  numbers?: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ string ](name='Tags', description='用户自定义标签列表', shrink='json', position='Query'),
}

model AgentRecoverCallResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机列表'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', description='坐席标签', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model AgentRecoverCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRecoverCallResponseBody(name='body'),
}

async function agentRecoverCall(request: AgentRecoverCallRequest): AgentRecoverCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AgentRecoverCall', 'POST', '/', 'json', false, 'json', request);
}

model DetailsRequest {
  batchId?: long(name='BatchId', description='批次id', example='75', position='Query'),
  endTime?: string(name='EndTime', description='结束导入时间', example='2023-04-25 15:19:02', position='Query'),
  numberStatus?: long(name='NumberStatus', description='号码状态', example='1', position='Query'),
  numbers?: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='页数', example='77', position='Query'),
  pageSize: long(name='PageSize', description='每页条数', example='3', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='开始导入时间', example='2023-04-25 15:19:02', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='90', position='Query'),
}

model DetailsResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值'),
  model?: {
    list?: [ 
      {
        batchId?: long(name='BatchId', description='批次号', example='27'),
        callDesc?: string(name='CallDesc', description='呼叫状态描述', example='示例值示例值'),
        callId?: string(name='CallId', description='外呼ID', example='28dd74a4-30ec-43c0-9bec-272924c51eeb'),
        callStatus?: long(name='CallStatus', description='呼叫状态', example='1'),
        callType?: long(name='CallType', description='外呼类型', example='2001'),
        importTime?: string(name='ImportTime', description='导入时间', example='2023-04-25 15:19:02'),
        interceptReason?: string(name='InterceptReason', description='拦截原因', example='示例值示例值示例值'),
        number?: string(name='Number', description='外呼号码', example='188******454'),
        numberDesc?: string(name='NumberDesc', description='号码状态描述', example='示例值'),
        numberMD5?: string(name='NumberMD5', description='外呼号码MD5', example='cbe1b40f76f2cca4735954886b706ffa'),
        numberStatus?: long(name='NumberStatus', description='号码状态', example='1'),
        tag?: string(name='Tag', description='用户自定义标签', example='A'),
        taskId?: long(name='TaskId', description='任务ID', example='28'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='100'),
    pageSize?: long(name='PageSize', example='94'),
    totalCount?: long(name='TotalCount', example='79'),
    totalPage?: float(name='TotalPage', example='71.8132'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='389b2d0a-37e2-406d-b576-1fc0827be46a'),
  success?: boolean(name='Success', example='false'),
  timestamp?: long(name='Timestamp', example='1686279332221'),
}

model DetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetailsResponseBody(name='body'),
}

async function details(request: DetailsRequest): DetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Details', 'POST', '/', 'json', false, 'json', request);
}

model EditTaskRequest {
  callTimeList?: [ 
    {
      callTime?: [ string ](name='CallTime'),
    }
  ](name='CallTimeList', description='外呼时间', shrink='json', position='Query'),
  callbackUrl?: string(name='CallbackUrl', description='回调地址', example='示例值示例值示例值', position='Query'),
  flashSmsTemplateId?: long(name='FlashSmsTemplateId', description='当发送闪信配置为1时，闪信模板ID必填', example='60', position='Query'),
  flashSmsType?: long(name='FlashSmsType', description='发送闪信配置,默认为0,0不发送闪信.1发送闪信', example='0', position='Query'),
  maxConcurrency?: long(name='MaxConcurrency', description='并发数', example='83', position='Query'),
  name?: string(name='Name', description='任务名称', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playSleepVal?: long(name='PlaySleepVal', description='播放间隔时长', example='29', position='Query'),
  playTimes?: long(name='PlayTimes', description='录音播放次数', example='60', position='Query'),
  recallType?: long(name='RecallType', description='重呼配置', example='1', position='Query'),
  recordPath?: string(name='RecordPath', description='录音地址', example='示例值示例值示例值', position='Query'),
  repeatCount?: long(name='RepeatCount', description='重呼次数', example='51', position='Query'),
  repeatInterval?: long(name='RepeatInterval', description='重呼间隔', example='91', position='Query'),
  repeatReason?: [ long ](name='RepeatReason', description='重呼条件', shrink='json', position='Query'),
  repeatTimes?: [ string ](name='RepeatTimes', description='重呼时间', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendSmsPlan?: [ 
    {
      intentTags?: [ string ](name='IntentTags', description='意向标签'),
      smsTemplateId?: long(name='SmsTemplateId', description='短信模板ID', example='1'),
    }
  ](name='SendSmsPlan', description='短信发送规则', shrink='json', position='Query'),
  status?: long(name='Status', description='任务状态', example='2', position='Query'),
  taskId: long(name='TaskId', description='任务id', example='29', position='Query'),
  templateId?: long(name='TemplateId', description='话术模板ID', example='24', position='Query'),
  templateType?: long(name='TemplateType', description='话术模板类型', example='1', position='Query'),
}

model EditTaskResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    taskId?: long(name='TaskId', description='任务ID', example='92'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='5453cc9b-02bc-4dbb-9527-f28a9100b912'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1686225227338'),
}

model EditTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EditTaskResponseBody(name='body'),
}

async function editTask(request: EditTaskRequest): EditTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditTask', 'POST', '/', 'json', false, 'json', request);
}

model ImportNumberRequest {
  customers: [ 
    {
      clientUrl?: string(name='ClientUrl', example='http://test.com'),
      number?: string(name='Number', example='13541251222,18665214444'),
      numberMD5?: string(name='NumberMD5', example='示例值'),
      properties?: map[string]any(name='Properties', example='{"testt":"123"}'),
      tag?: string(name='Tag', example='tag1'),
    }
  ](name='Customers', shrink='json', position='Query'),
  failReturn?: long(name='FailReturn', example='0', position='Query'),
  outId: string(name='OutId', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='92', position='Query'),
}

model ImportNumberResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: {
    batchId?: long(name='BatchId', example='54'),
    code?: long(name='Code', example='94'),
    data?: string(name='Data', example='示例值示例值'),
    importNum?: long(name='ImportNum', example='26'),
    message?: string(name='Message', example='示例值示例值示例值'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model ImportNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportNumberResponseBody(name='body'),
}

async function importNumber(request: ImportNumberRequest): ImportNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportNumber', 'POST', '/', 'json', false, 'json', request);
}

model PageRequest {
  numbers?: [ string ](name='Numbers', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PageResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: {
    list?: [ 
      {
        createTime?: string(name='CreateTime', description='添加时间', example='2020-03-06 10:10:10'),
        expirationTime?: string(name='ExpirationTime', description='过期时间', example='1'),
        number?: string(name='Number', description='手机号码', example='13314206082'),
        numberMD5?: string(name='NumberMD5', description='手机号MD5', example='e10adc3949ba59abbe56e057f20f883e'),
        remark?: string(name='Remark', description='备注', example='示例值'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='97'),
    totalPage?: long(name='TotalPage', example='5'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model PageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageResponseBody(name='body'),
}

async function page(request: PageRequest): PageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Page', 'POST', '/', 'json', false, 'json', request);
}

model SmsTemplateCreateRequest {
  content: string(name='Content', description='短信内容', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sign: string(name='Sign', description='短信签名', example='ef2i29fsljf', position='Query'),
  smsType?: long(name='SmsType', description='短信类型', example='73', position='Query'),
  templateName: string(name='TemplateName', description='模板名称', example='示例值示例值', position='Query'),
  templateType?: long(name='TemplateType', description='模板类型', example='56', position='Query'),
}

model SmsTemplateCreateResponseBody = {
  code?: long(name='Code', example='23'),
  message?: string(name='Message', example='示例值'),
  model?: string(name='Model', example='示例值示例值'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model SmsTemplateCreateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmsTemplateCreateResponseBody(name='body'),
}

async function smsTemplateCreate(request: SmsTemplateCreateRequest): SmsTemplateCreateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmsTemplateCreate', 'POST', '/', 'json', false, 'json', request);
}

model SmsTemplatePageListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='页码', example='24', position='Query'),
  pageSize?: long(name='PageSize', description='每页条数', example='97', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sign?: string(name='Sign', description='短信签名', example='114ah23m', position='Query'),
  smsType?: long(name='SmsType', description='短信类型', example='42', position='Query'),
  status?: long(name='Status', description='模板状态', example='92', position='Query'),
  templateId?: long(name='TemplateId', description='模板ID', example='83', position='Query'),
  templateType?: long(name='TemplateType', description='模板类型', example='19', position='Query'),
}

model SmsTemplatePageListResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='示例值'),
  model?: {
    list?: [ 
      {
        content?: string(name='Content', description='短信内容', example='示例值示例值示例值'),
        createTime?: string(name='CreateTime', description='创建时间', example='2021-09-26 11:34:59'),
        properties?: string(name='Properties', description='模板所需参数', example='示例值示例值'),
        shortUrlTaskId?: long(name='ShortUrlTaskId', description='智能短链ID', example='46'),
        sign?: string(name='Sign', description='短信签名', example='a234n'),
        smsType?: string(name='SmsType', description='短信类型', example='示例值示例值'),
        status?: long(name='Status', description='模板状态', example='18'),
        templateId?: long(name='TemplateId', description='模板ID', example='67'),
        templateName?: string(name='TemplateName', description='模板名称', example='示例值示例值示例值'),
        templateType?: long(name='TemplateType', description='模板类型', example='56'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='53'),
    pageSize?: long(name='PageSize', example='42'),
    totalCount?: long(name='TotalCount', example='2'),
    totalPage?: long(name='TotalPage', example='31'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model SmsTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmsTemplatePageListResponseBody(name='body'),
}

async function smsTemplatePageList(request: SmsTemplatePageListRequest): SmsTemplatePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmsTemplatePageList', 'POST', '/', 'json', false, 'json', request);
}

model TaskCallChatsRequest {
  agentId?: long(name='AgentId', description='坐席ID', example='72', position='Query'),
  agentTag?: string(name='AgentTag', description='坐席标签', example='AA', position='Query'),
  callId: string(name='CallId', description='外呼ID', example='9b2eb6b8-7a27-4357-b5ec-104450086e24', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: long(name='TaskId', description='任务ID', example='26', position='Query'),
}

model TaskCallChatsResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='示例值示例值'),
  model?: [ 
    {
      content?: string(name='Content', description='说话内容', example='示例值示例值'),
      createTime?: string(name='CreateTime', description='说话时间', example='2022-01-13 14:56:46.604'),
      fromNumber?: string(name='FromNumber', description='说话号码', example='138*****265'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model TaskCallChatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskCallChatsResponseBody(name='body'),
}

async function taskCallChats(request: TaskCallChatsRequest): TaskCallChatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskCallChats', 'POST', '/', 'json', false, 'json', request);
}

model TaskCallInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', example='20', position='Query'),
}

model TaskCallInfoResponseBody = {
  code?: long(name='Code', example='15'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    finishTotal?: long(name='FinishTotal', example='75'),
    total?: long(name='Total', example='59'),
    unCallTotal?: long(name='UnCallTotal', example='3'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='62'),
}

model TaskCallInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskCallInfoResponseBody(name='body'),
}

async function taskCallInfo(request: TaskCallInfoRequest): TaskCallInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskCallInfo', 'POST', '/', 'json', false, 'json', request);
}

model TaskCallListRequest {
  batchId?: string(name='BatchId', description='导入号码时返回的批次号', example='1', position='Query'),
  callDate: string(name='CallDate', description='开始外呼时间', example='2022-01-25 00:00:00', position='Query'),
  endCallDate: string(name='EndCallDate', description='结束外呼时间', example='2022-01-25 00:00:00', position='Query'),
  intentTags?: [ string ](name='IntentTags', description='意向标签', shrink='json', position='Query'),
  numbers?: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page: long(name='Page', description='页数', example='39', position='Query'),
  pageSize?: long(name='PageSize', description='每页外呼记录数,正整数，默认10000', example='97', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='任务ID', example='93', position='Query'),
}

model TaskCallListResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    list?: [ 
      {
        addWx?: long(name='AddWx', description='加微', example='0'),
        addWxStatus?: string(name='AddWxStatus', description='加微进度', example='示例值示例值'),
        agentExtension?: string(name='AgentExtension', description='坐席分机', example='112'),
        agentId?: long(name='AgentId', description='坐席ID', example='87'),
        agentSpeakingDuration?: long(name='AgentSpeakingDuration', description='人工通话时长', example='98'),
        agentSpeakingTime?: string(name='AgentSpeakingTime', description='人工通话时长', example='示例值示例值'),
        agentTag?: string(name='AgentTag', description='坐席标签', example='A'),
        answerRecall?: long(name='AnswerRecall', description='是否接通重呼', example='24'),
        answerTime?: string(name='AnswerTime', description='接通时间', example='2022-01-26 18:58:25'),
        batchId?: string(name='BatchId', description='批次ID', example='1'),
        callBeginTime?: string(name='CallBeginTime', description='开始通话时间', example='2022-01-26 18:58:25'),
        callId?: string(name='CallId', description='外呼ID', example='9197ed9e-ceda-42a5-b683-823b23ef208e'),
        callTimes?: string(name='CallTimes', description='呼叫次数', example='1'),
        callType?: long(name='CallType', description='外呼类型', example='1001'),
        chatRecord?: string(name='ChatRecord', description='对话录音', example='示例值示例值'),
        gateway?: string(name='Gateway', description='外呼网关', example='123'),
        hangupTime?: string(name='HangupTime', description='挂断时间', example='2022-01-26 18:58:25'),
        hangupType?: long(name='HangupType', description='挂机方式', example='1'),
        importTime?: string(name='ImportTime', description='导入时间', example='2022-01-26 18:58:25'),
        individualTag?: string(name='IndividualTag', description='个性标签', example='A'),
        intentDescription?: string(name='IntentDescription', description='意向说明', example='示例值示例值示例值'),
        intentTag?: string(name='IntentTag', description='意向标签', example='“C”'),
        interceptReason?: string(name='InterceptReason', description='拦截原因', example='示例值'),
        keywords?: string(name='Keywords', description='回复关键词', example='示例值示例值'),
        number?: string(name='Number', description='外呼号码', example='138*****123'),
        numberMD5?: string(name='NumberMD5', description='外呼号码MD5', example='75916b635568954583783d'),
        properties?: string(name='Properties', description='参数', example='示例值示例值'),
        remark?: string(name='Remark', description='备注', example='示例值示例值'),
        ringTime?: long(name='RingTime', description='振铃时长', example='66'),
        sms?: string(name='Sms', description='挂机短信', example='示例值'),
        speakingDuration?: long(name='SpeakingDuration', description='AI通话时长', example='45'),
        speakingTime?: string(name='SpeakingTime', description='AI通话时长', example='示例值示例值示例值'),
        speakingTurns?: string(name='SpeakingTurns', description='对话轮次', example='0'),
        status?: string(name='Status', description='外呼状态', example='示例值示例值示例值'),
        statusCode?: long(name='StatusCode', description='外呼状态编码', example='1'),
        statusDescription?: string(name='StatusDescription', description='外呼状态描述', example='示例值示例值'),
        tag?: string(name='Tag', description='用户自定义标签', example='示例值'),
        taskId?: long(name='TaskId', description='外呼任务ID', example='70'),
        templateId?: long(name='TemplateId', description='AI话术ID', example='66'),
        transferStatus?: string(name='TransferStatus', description='转人工状态', example='示例值'),
        transferStatusCode?: long(name='TransferStatusCode', description='转人工状态编码', example='1'),
      }
    ](name='List'),
    pageNo?: long(name='PageNo', example='62'),
    pageSize?: long(name='PageSize', example='95'),
    totalCount?: long(name='TotalCount', example='80'),
    totalPage?: long(name='TotalPage', example='39'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model TaskCallListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskCallListResponseBody(name='body'),
}

async function taskCallList(request: TaskCallListRequest): TaskCallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskCallList', 'POST', '/', 'json', false, 'json', request);
}

model TaskCancelCallRequest {
  numbers?: [ string ](name='Numbers', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ string ](name='Tags', shrink='json', position='Query'),
  taskId: long(name='TaskId', description='任务ID', example='30', position='Query'),
}

model TaskCancelCallResponseBody = {
  code?: string(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机号'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model TaskCancelCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskCancelCallResponseBody(name='body'),
}

async function taskCancelCall(request: TaskCancelCallRequest): TaskCancelCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskCancelCall', 'POST', '/', 'json', false, 'json', request);
}

model TaskListRequest {
  createTime?: string(name='CreateTime', description='创建时间', example='2023-04-05 12:11:11', position='Query'),
  lastCallTime?: string(name='LastCallTime', description='最后外呼时间', example='2023-04-05 12:11:11', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: long(name='Status', description='任务状态。1 未启用，2 启用中，4 已停止', example='2', position='Query'),
  taskId?: long(name='TaskId', description='任务ID', example='2', position='Query'),
}

model TaskListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: long(name='Code', example='30'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: [ 
    {
      allowCallTime?: string(name='AllowCallTime', description='外呼时间段', example='“8:00~20:30”'),
      allowCallTimeFormat?: string(name='AllowCallTimeFormat', description='外呼时间段格式化', example='“8:00 ~ 20:00”'),
      allowDayOfWeek?: string(name='AllowDayOfWeek', description='外呼时间', example='“1,2,3”'),
      callType?: long(name='CallType', description='外呼类型', example='95'),
      createTime?: string(name='CreateTime', description='创建时间', example='2023-04-05 12:11:11'),
      flashSmsTemplateId?: long(name='FlashSmsTemplateId', description='闪信模板id', example='99'),
      flashSmsTemplateName?: string(name='FlashSmsTemplateName', description='闪信模板名称', example='示例值示例值示例值'),
      flashSmsType?: long(name='FlashSmsType', description='发送闪信配置，可选0，1；0表示否，1表示是', example='1'),
      importTime?: string(name='ImportTime', description='最近导入时间', example='2023-04-05 12:11:11'),
      intentTags?: [ 
        {
          intentDescription?: string(name='IntentDescription', description='意向标签描述', example='示例值示例值'),
          intentTag?: string(name='IntentTag', description='意向标签ID', example='示例值示例值'),
        }
      ](name='IntentTags', description='意向标签列表'),
      invalidReCall?: long(name='InvalidReCall', description='接通重呼次数', example='31'),
      lastCallTime?: string(name='LastCallTime', description='最后外呼时间', example='2023-04-05 12:11:11'),
      maxConcurrency?: long(name='MaxConcurrency', description='最大并发数', example='95'),
      personalityTags?: [ string ](name='PersonalityTags', description='个性标签列表'),
      priority?: long(name='Priority', description='优先任务', example='66'),
      properties?: string(name='Properties', description='任务所需参数', example='示例值示例值'),
      recallType?: long(name='RecallType', description='自动重呼', example='20'),
      sendSms?: long(name='SendSms', description='发送短信', example='39'),
      smsName?: string(name='SmsName', description='短信模板', example='示例值示例值'),
      status?: long(name='Status', description='任务状态', example='79'),
      taskId?: long(name='TaskId', description='任务ID', example='68'),
      taskName?: string(name='TaskName', description='任务名称', example='示例值示例值'),
      templateId?: string(name='TemplateId', description='话术模板Id', example='示例值示例值示例值'),
      templateName?: string(name='TemplateName', description='话术模板名称', example='示例值示例值'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: boolean(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='80'),
}

model TaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskListResponseBody(name='body'),
}

async function taskList(request: TaskListRequest): TaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskList', 'POST', '/', 'json', false, 'json', request);
}

model TaskRecoverCallRequest {
  beginImportTime?: string(name='BeginImportTime', description='查询开始导入时间', example='"2023-01-09 18:58:19"', position='Query'),
  endImportTime?: string(name='EndImportTime', description='查询结束导入时间', example='"2023-01-09 18:58:19"', position='Query'),
  numbers?: [ string ](name='Numbers', description='号码列表', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ string ](name='Tags', description='用户自定义标签列表', shrink='json', position='Query'),
  taskId: long(name='TaskId', description='任务ID', example='93', position='Query'),
}

model TaskRecoverCallResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值'),
  model?: map[string]any(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model TaskRecoverCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskRecoverCallResponseBody(name='body'),
}

async function taskRecoverCall(request: TaskRecoverCallRequest): TaskRecoverCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TaskRecoverCall', 'POST', '/', 'json', false, 'json', request);
}

model TemplateListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateId?: long(name='TemplateId', description='必须空参', example='9', position='Query'),
}

model TemplateListResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='示例值示例值'),
  model?: [ 
    {
      intentTags?: [  map[string]any ](name='IntentTags', description='意向标签'),
      personalityTags?: [ string ](name='PersonalityTags', description='个性标签'),
      properties?: string(name='Properties', description='话术所需参数', example='示例值示例值'),
      templateId?: long(name='TemplateId', description='AI话术ID', example='59'),
      templateName?: string(name='TemplateName', description='话术模板名称', example='示例值示例值'),
      templateType?: long(name='TemplateType', description='模板类型', example='55'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: boolean(name='Success', example='false'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model TemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TemplateListResponseBody(name='body'),
}

async function templateList(request: TemplateListRequest): TemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TemplateList', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAgentStatusRequest {
  agentId?: long(name='AgentId', description='坐席ID', example='58', position='Query'),
  agentStatus?: long(name='AgentStatus', description='坐席状态 1:在线；2:忙碌；3:小休；4:离线', example='1', position='Query'),
  agentTag?: string(name='AgentTag', description='坐席标签', example='abac', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateAgentStatusResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: map[string]any(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model UpdateAgentStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAgentStatusResponseBody(name='body'),
}

async function updateAgentStatus(request: UpdateAgentStatusRequest): UpdateAgentStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAgentStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskCustomerRequest {
  customers: [ 
    {
      cancel?: long(name='Cancel', description='是否取消外呼 0否，1是', example='0'),
      number?: string(name='Number', description='电话号码', example='13661109390'),
      properties?: map[string]any(name='Properties', description='需根据具体任务参数要求传输', example='{"test":"234"}'),
      tag?: string(name='Tag', description='用户自定义标签', example='tag1'),
    }
  ](name='Customers', description='外呼客户', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: long(name='TaskId', description='任务ID', example='59', position='Query'),
}

model UpdateTaskCustomerResponseBody = {
  code?: long(name='Code', example='0'),
  message?: string(name='Message', example='示例值示例值'),
  model?: {
    unHandleNumbers?: [ string ](name='UnHandleNumbers', description='错误手机列表'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='8EFC6D10-307B-1ECA-A8C6-7CBDF776AAD2'),
  success?: string(name='Success', example='true'),
  timestamp?: long(name='Timestamp', example='1683440860035'),
}

model UpdateTaskCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskCustomerResponseBody(name='body'),
}

async function updateTaskCustomer(request: UpdateTaskCustomerRequest): UpdateTaskCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskCustomer', 'POST', '/', 'json', false, 'json', request);
}

