/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Agency';
  @version = '2025-02-27';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'agency.aliyuncs.com',
    'ap-northeast-2-pop' = 'agency.aliyuncs.com',
    'ap-south-1' = 'agency.aliyuncs.com',
    'ap-southeast-2' = 'agency.aliyuncs.com',
    'ap-southeast-3' = 'agency.aliyuncs.com',
    'ap-southeast-5' = 'agency.aliyuncs.com',
    'cn-beijing' = 'agency.aliyuncs.com',
    'cn-beijing-finance-1' = 'agency.aliyuncs.com',
    'cn-beijing-finance-pop' = 'agency.aliyuncs.com',
    'cn-beijing-gov-1' = 'agency.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'agency.aliyuncs.com',
    'cn-chengdu' = 'agency.aliyuncs.com',
    'cn-edge-1' = 'agency.aliyuncs.com',
    'cn-fujian' = 'agency.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'agency.aliyuncs.com',
    'cn-hangzhou' = 'agency.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'agency.aliyuncs.com',
    'cn-hangzhou-finance' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'agency.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'agency.aliyuncs.com',
    'cn-hangzhou-test-306' = 'agency.aliyuncs.com',
    'cn-hongkong' = 'agency.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'agency.aliyuncs.com',
    'cn-huhehaote' = 'agency.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'agency.aliyuncs.com',
    'cn-north-2-gov-1' = 'agency.aliyuncs.com',
    'cn-qingdao' = 'agency.aliyuncs.com',
    'cn-qingdao-nebula' = 'agency.aliyuncs.com',
    'cn-shanghai' = 'agency.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'agency.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'agency.aliyuncs.com',
    'cn-shanghai-finance-1' = 'agency.aliyuncs.com',
    'cn-shanghai-inner' = 'agency.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'agency.aliyuncs.com',
    'cn-shenzhen' = 'agency.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'agency.aliyuncs.com',
    'cn-shenzhen-inner' = 'agency.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'agency.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'agency.aliyuncs.com',
    'cn-wuhan' = 'agency.aliyuncs.com',
    'cn-wulanchabu' = 'agency.aliyuncs.com',
    'cn-yushanfang' = 'agency.aliyuncs.com',
    'cn-zhangbei' = 'agency.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'agency.aliyuncs.com',
    'cn-zhangjiakou' = 'agency.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'agency.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'agency.aliyuncs.com',
    'eu-central-1' = 'agency.aliyuncs.com',
    'eu-west-1' = 'agency.aliyuncs.com',
    'eu-west-1-oxs' = 'agency.aliyuncs.com',
    'me-east-1' = 'agency.aliyuncs.com',
    'rus-west-1-pop' = 'agency.aliyuncs.com',
    'us-east-1' = 'agency.aliyuncs.com',
    'us-west-1' = 'agency.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model GetBillDetailFileListRequest {
  billMonth: string(name='BillMonth', description='This parameter is required.', example='202502', position='Query'),
}

model GetBillDetailFileListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      billMonth?: string(name='BillMonth', example='202502'),
      fileName?: string(name='FileName'),
      fileUrl?: string(name='FileUrl', example='aps.ailyun.com/file/download?resourceId=1234&type=1'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId', description='Id of the request', example='210bc4b416874189683843905d9f9a'),
  success?: boolean(name='Success', example='true'),
}

model GetBillDetailFileListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBillDetailFileListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBillDetailFileList  GetBillDetailFileListRequest
  * @return GetBillDetailFileListResponse
 */
async function getBillDetailFileList(request: GetBillDetailFileListRequest): GetBillDetailFileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBillDetailFileList', 'POST', '/', 'json', false, 'json', request);
}

model GetCommissionDetailFileListRequest {
  billMonth?: string(name='BillMonth', example='202501', position='Query'),
}

model GetCommissionDetailFileListResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: {
    billMonth?: string(name='BillMonth', example='202502'),
    fileList?: [ 
      {
        commissionPolicyName?: string(name='CommissionPolicyName'),
        fileType?: string(name='FileType'),
        fileUrl?: string(name='FileUrl', example='aps.ailyun.com/file/download?resourceId=1234&type=1'),
      }
    ](name='FileList'),
    partnerUid?: string(name='PartnerUid', example='1112332432'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetCommissionDetailFileListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommissionDetailFileListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCommissionDetailFileList  GetCommissionDetailFileListRequest
  * @return GetCommissionDetailFileListResponse
 */
async function getCommissionDetailFileList(request: GetCommissionDetailFileListRequest): GetCommissionDetailFileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommissionDetailFileList', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomerOrderListRequest {
  customerAccount?: string(name='CustomerAccount', example='test_123', position='Query'),
  customerUid?: long(name='CustomerUid', example='123456', position='Query'),
  orderCreateAfter?: long(name='OrderCreateAfter', example='1727789348000', position='Query'),
  orderCreateBefore?: long(name='OrderCreateBefore', example='1741008566000', position='Query'),
  orderId?: long(name='OrderId', example='13595216', position='Query'),
  orderPayAfter?: long(name='OrderPayAfter', example='1727789348000', position='Query'),
  orderPayBefore?: long(name='OrderPayBefore', example='1741008566000', position='Query'),
  orderStatus?: int32(name='OrderStatus', example='3', position='Query'),
  orderTypeList?: [ string ](name='OrderTypeList', shrink='json', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=10, maximum=500, position='Query'),
  payAmountAfter?: double(name='PayAmountAfter', example='1', position='Query'),
  payAmountBefore?: double(name='PayAmountBefore', example='1000', position='Query'),
  payType?: int32(name='PayType', example='1', position='Query'),
  productCode?: string(name='ProductCode', example='ecs', position='Query'),
  productName?: string(name='ProductName', position='Query'),
  projectId?: long(name='ProjectId', example='202502002231', position='Query'),
  ramAccountForCustomerManager?: string(name='RamAccountForCustomerManager', example='1234532', position='Query'),
}

model GetCustomerOrderListResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='None'),
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      amountDiscount?: double(name='AmountDiscount', example='1'),
      amountDue?: double(name='AmountDue', example='29137'),
      createdAt?: string(name='CreatedAt', example='2019-01-24 14:20:40'),
      customerAccount?: string(name='CustomerAccount', example='test_123'),
      customerClassification?: string(name='CustomerClassification'),
      customerUid?: long(name='CustomerUid', example='123456'),
      deductedAmountByCoupons?: double(name='DeductedAmountByCoupons', example='0'),
      discountedPrice?: double(name='DiscountedPrice', example='29137'),
      orderId?: long(name='OrderId', example='236414227150922'),
      orderStatus?: int32(name='OrderStatus', example='3'),
      orderType?: string(name='OrderType', example='BUY'),
      paidAt?: string(name='PaidAt', example='2019-01-24 14:20:40'),
      payType?: int32(name='PayType', example='1'),
      price?: double(name='Price', example='29137'),
      productCode?: string(name='ProductCode', example='slb'),
      productName?: string(name='ProductName', example='slb'),
      projectId?: long(name='ProjectId', example='202502230421'),
      ramAccountForCustomerManagers?: [ string ](name='RamAccountForCustomerManagers'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='400'),
  message?: string(name='Message', example='success'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2103a30617045934095083027d88c5'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model GetCustomerOrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCustomerOrderListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCustomerOrderList  GetCustomerOrderListRequest
  * @return GetCustomerOrderListResponse
 */
async function getCustomerOrderList(request: GetCustomerOrderListRequest): GetCustomerOrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerOrderList', 'POST', '/', 'json', false, 'json', request);
}

model GetRenewalRateListRequest {
  fiscalYearAndQuarter: string(name='FiscalYearAndQuarter', description='This parameter is required.', example='2025Q4', position='Query'),
}

model GetRenewalRateListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      customerAdjustedRenewalAmountDue?: double(name='CustomerAdjustedRenewalAmountDue', example='100'),
      customerOtherBillAmount?: double(name='CustomerOtherBillAmount', example='100'),
      finalCustomerRenewalAmountDue?: double(name='FinalCustomerRenewalAmountDue', example='100'),
      finalCustomerRenewalRate?: double(name='FinalCustomerRenewalRate', example='0.9'),
      finalCustomerRenewedAmount?: double(name='FinalCustomerRenewedAmount', example='100'),
      finalOtherBillAmount?: double(name='FinalOtherBillAmount', example='100'),
      finalRenewalAmountDue?: double(name='FinalRenewalAmountDue', example='100'),
      finalRenewalRate?: double(name='FinalRenewalRate', example='0.9'),
      finalRenewedAmount?: double(name='FinalRenewedAmount', example='100'),
      finalSubPartnerRenewalAmountDue?: double(name='FinalSubPartnerRenewalAmountDue', example='100'),
      finalSubPartnerRenewalRate?: double(name='FinalSubPartnerRenewalRate', example='0.85'),
      finalSubPartnerRenewedAmount?: double(name='FinalSubPartnerRenewedAmount', example='100'),
      fiscalYearAndQuarter?: string(name='FiscalYearAndQuarter', example='2025Q4'),
      masterPid?: string(name='MasterPid', example='P123423453'),
      masterPidName?: string(name='MasterPidName'),
      specialCustomerRenewRatio?: double(name='SpecialCustomerRenewRatio', example='0.7'),
      specialCustomerRenewalAmountDue?: double(name='SpecialCustomerRenewalAmountDue', example='100'),
      specialCustomerRenewedAmount?: double(name='SpecialCustomerRenewedAmount', example='100'),
      specialFinalRenewRatio?: double(name='SpecialFinalRenewRatio', example='0.7'),
      specialFinalRenewalAmountDue?: double(name='SpecialFinalRenewalAmountDue', example='100'),
      specialFinalRenewedAmount?: double(name='SpecialFinalRenewedAmount', example='100'),
      specialSubPartnerRenewRatio?: double(name='SpecialSubPartnerRenewRatio', example='0.8'),
      specialSubPartnerRenewalAmountDue?: double(name='SpecialSubPartnerRenewalAmountDue', example='100'),
      specialSubPartnerRenewedAmount?: double(name='SpecialSubPartnerRenewedAmount', example='100'),
      subPartnerAdjustedRenewalAmountDue?: double(name='SubPartnerAdjustedRenewalAmountDue', example='100'),
      subPartnerOtherBillAmount?: double(name='SubPartnerOtherBillAmount', example='100'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
}

model GetRenewalRateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRenewalRateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRenewalRateList  GetRenewalRateListRequest
  * @return GetRenewalRateListResponse
 */
async function getRenewalRateList(request: GetRenewalRateListRequest): GetRenewalRateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRenewalRateList', 'POST', '/', 'json', false, 'json', request);
}

model GetSubPartnerListRequest {
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  subPartnerCompanyName?: string(name='SubPartnerCompanyName', position='Query'),
  subPartnerPid?: string(name='SubPartnerPid', example='2323431211', position='Query'),
}

model GetSubPartnerListResponseBody = {
  message?: string(name='Message'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize: string(name='PageSize', description='This parameter is required.', example='100'),
  requestId?: string(name='RequestId', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  subPartnerList?: [ 
    {
      address?: string(name='Address'),
      agreementStatus?: string(name='AgreementStatus'),
      agreementStatusDesc?: string(name='AgreementStatusDesc'),
      city?: string(name='City'),
      companyName?: string(name='CompanyName'),
      contact?: string(name='Contact'),
      district?: string(name='District'),
      joinTime?: string(name='JoinTime'),
      masterAccount?: string(name='MasterAccount'),
      masterUid?: string(name='MasterUid'),
      pid?: string(name='Pid'),
      province?: string(name='Province'),
    }
  ](name='SubPartnerList'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='10'),
}

model GetSubPartnerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubPartnerListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubPartnerList  GetSubPartnerListRequest
  * @return GetSubPartnerListResponse
 */
async function getSubPartnerList(request: GetSubPartnerListRequest): GetSubPartnerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubPartnerList', 'POST', '/', 'json', false, 'json', request);
}

model GetSubPartnerOrderListRequest {
  orderCreateAfter?: long(name='OrderCreateAfter', example='1727789348000', position='Query'),
  orderCreateBefore?: long(name='OrderCreateBefore', example='1741008566000', position='Query'),
  orderId?: long(name='OrderId', example='209335720330622', position='Query'),
  orderPayAfter?: long(name='OrderPayAfter', example='1727789348000', position='Query'),
  orderPayBefore?: long(name='OrderPayBefore', example='1741008566000', position='Query'),
  orderStatus?: long(name='OrderStatus', example='3', minimum=1, maximum=3, position='Query'),
  orderTypeList?: [ string ](name='OrderTypeList', shrink='json', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=10, maximum=500, position='Query'),
  payAmountAfter?: long(name='PayAmountAfter', example='1', position='Query'),
  payAmountBefore?: long(name='PayAmountBefore', example='100', position='Query'),
  payType?: long(name='PayType', example='1', minimum=1, maximum=2, position='Query'),
  productCode?: string(name='ProductCode', example='ecs', position='Query'),
  productName?: string(name='ProductName', position='Query'),
  projectId?: long(name='ProjectId', example='202501101023', position='Query'),
  subPartnerName?: string(name='SubPartnerName', position='Query'),
  subPartnerUid?: long(name='SubPartnerUid', example='123432311', position='Query'),
}

model GetSubPartnerOrderListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      amountDiscount?: double(name='AmountDiscount', example='0.9'),
      amountDue?: double(name='AmountDue', example='3750'),
      createdAt?: string(name='CreatedAt', example='2024-07-07 07:52:22'),
      deductedAmountByCoupons?: double(name='DeductedAmountByCoupons', example='0'),
      discountedPrice?: double(name='DiscountedPrice', example='3750'),
      orderId?: long(name='OrderId', example='236414227150922'),
      orderStatus?: int32(name='OrderStatus', example='3'),
      orderType?: string(name='OrderType', example='BUY'),
      paidAt?: string(name='PaidAt', example='2024-07-07 07:52:22'),
      payType?: int32(name='PayType', example='1'),
      price?: double(name='Price', example='3750'),
      productCode?: string(name='ProductCode', example='ecs'),
      productName?: string(name='ProductName'),
      projectId?: long(name='ProjectId', example='202502233443'),
      subPartnerName?: string(name='SubPartnerName'),
      subPartnerUid?: long(name='SubPartnerUid', example='1123132'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='9C14ADFE-DF0A-54D4-8BD5-45D0839246B4'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='10'),
}

model GetSubPartnerOrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubPartnerOrderListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubPartnerOrderList  GetSubPartnerOrderListRequest
  * @return GetSubPartnerOrderListResponse
 */
async function getSubPartnerOrderList(request: GetSubPartnerOrderListRequest): GetSubPartnerOrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubPartnerOrderList', 'POST', '/', 'json', false, 'json', request);
}

