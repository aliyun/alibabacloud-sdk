/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BDRC';
  @version = '2023-08-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckRulesRequest {
  resourceArn: string(name='ResourceArn', description='This parameter is required.', example='acs:ecs:123***890:cn-shanghai:instance/i-001***90', position='Body'),
  ruleId?: string(name='RuleId', example='rule-000***dav', position='Body'),
}

model CheckRulesResponseBody = {
  data?: {
    taskId?: string(name='TaskId', example='t-0000e4w0u1v592zdf6s7'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='700683DE-0154-56D4-8D76-3B7A2C2C7DF9'),
}

model CheckRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckRules  CheckRulesRequest
  * @return CheckRulesResponse
 */
async function checkRules(request: CheckRulesRequest): CheckRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckRules', 'POST', '/api/v1/rules/check', 'json', true, 'form', request);
}

model CloseBdrcServiceRequest {
}

model CloseBdrcServiceResponseBody = {
  requestId?: string(name='RequestId', example='663D8898-E0B5-5964-BF28-A191CE6A1825'),
}

model CloseBdrcServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseBdrcServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseBdrcService  CloseBdrcServiceRequest
  * @return CloseBdrcServiceResponse
 */
async function closeBdrcService(request: CloseBdrcServiceRequest): CloseBdrcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloseBdrcService', 'POST', '/api/v1/service/close', 'json', false, 'json', request);
}

model DescribeCheckDetailsRequest {
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='cae**********699', position='Query'),
  resourceArn: string(name='ResourceArn', description='This parameter is required.', example='acs:ecs:123***890:cn-shanghai:instance/i-001***90', position='Query'),
  ruleId?: string(name='RuleId', example='rule-000***dav', position='Query'),
}

model DescribeCheckDetailsResponseBody = {
  data?: {
    content?: [ 
      {
        checkStatus?: string(name='CheckStatus', example='PASSED'),
        checkTime?: long(name='CheckTime', example='1701725715'),
        detail?: string(name='Detail', example='{"ecsAutoSnapshotPolicyIds":[],"hbrBackupPlans":[{"planId":"po-xxxxxxxx","sourceType":"UDM_ECS"}]}'),
        productType?: string(name='ProductType', example='ecs'),
        resourceArn?: string(name='ResourceArn', example='acs:ecs:123***890:cn-shanghai:instance/i-001***90'),
        resourceId?: string(name='ResourceId', example='i-xxxxxxxx'),
        resourceName?: string(name='ResourceName', example='test server'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        ruleId?: string(name='RuleId', example='rule-xxxxxxxx'),
        ruleTemplate?: string(name='RuleTemplate', example='ecs-backup'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAOTzWWYAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM4NzA3NTcwMzY2MjMwNzY2ODcyMzAzMTY2Nzg3ODY5MzY='),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='92793A50-0B97-59F1-BAEA-EAED83BA1998'),
}

model DescribeCheckDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCheckDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCheckDetails  DescribeCheckDetailsRequest
  * @return DescribeCheckDetailsResponse
 */
async function describeCheckDetails(request: DescribeCheckDetailsRequest): DescribeCheckDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeCheckDetails', 'GET', '/api/v1/check-details', 'json', false, 'json', request);
}

model DescribeProductsRequest {
}

model DescribeProductsResponseBody = {
  data?: {
    content?: [ 
      {
        checkFailedCount?: long(name='CheckFailedCount', example='1'),
        checkFailedResourceCount?: long(name='CheckFailedResourceCount', example='1'),
        disableCheckResourceCount?: long(name='DisableCheckResourceCount', example='1'),
        enableCheck?: boolean(name='EnableCheck', example='true'),
        productType?: string(name='ProductType', example='oss'),
        protectionScore?: int32(name='ProtectionScore', example='90'),
        protectionScoreDistribution?: [ 
          {
            count?: long(name='Count', example='5'),
            range?: {
              from?: int32(name='From', example='0'),
              to?: int32(name='To', example='60'),
            }(name='Range'),
          }
        ](name='ProtectionScoreDistribution'),
        protectionScoreUpdatedTime?: long(name='ProtectionScoreUpdatedTime', example='1726036498'),
        riskCount?: long(name='RiskCount', example='1'),
        riskyResourceCount?: long(name='RiskyResourceCount', example='1'),
        totalResourceCount?: long(name='TotalResourceCount', example='100'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='b4fd3cffcacafd65e3818a0b9b2ff9a2'),
    totalCount?: long(name='TotalCount', example='50'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='30FB202A-1D22-5394-AB02-4477CDFCF51F'),
}

model DescribeProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeProducts  DescribeProductsRequest
  * @return DescribeProductsResponse
 */
async function describeProducts(request: DescribeProductsRequest): DescribeProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeProducts', 'GET', '/api/v1/products', 'json', false, 'json', request);
}

model DescribeResourcesRequest {
  failedRuleTemplate?: string(name='FailedRuleTemplate', example='rule-000c***yc9', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='cae**********699', position='Query'),
  resourceId?: string(name='ResourceId', example='i-0003***110', position='Query'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance', position='Query'),
  sortBy?: string(name='SortBy', example='protectionScore', position='Query'),
  sortOrder?: string(name='SortOrder', example='ASC', position='Query'),
}

model DescribeResourcesResponseBody = {
  data?: {
    content?: [ 
      {
        archiveDataSize?: long(name='ArchiveDataSize', example='0'),
        checkFailedCount?: long(name='CheckFailedCount', example='0'),
        coldArchiveDataSize?: long(name='ColdArchiveDataSize', example='0'),
        createTime?: long(name='CreateTime', example='1697798340'),
        enableCheck?: boolean(name='EnableCheck', example='0'),
        iaDataSize?: long(name='IaDataSize', example='0'),
        productType?: string(name='ProductType', example='ecs'),
        protectionScore?: int32(name='ProtectionScore', example='0'),
        protectionScoreUpdatedTime?: long(name='ProtectionScoreUpdatedTime', example='0'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceArn?: string(name='ResourceArn', example='acs:ecs:cn-hangzhou:xxxxxxxx:instance/xxxxx'),
        resourceId?: string(name='ResourceId', example='i-xxxxxxxx'),
        resourceName?: string(name='ResourceName', example='test server'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        riskCount?: long(name='RiskCount', example='0'),
        standardDataSize?: long(name='StandardDataSize', example='0'),
        status?: string(name='Status', example='Running'),
        totalDataSize?: long(name='TotalDataSize', example='0'),
        vSwitchId?: string(name='VSwitchId', description='vSwitch ID', example='vsw-xxxxxxxx'),
        vpcId?: string(name='VpcId', description='vpc ID', example='vpc-xxxxxxxx'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='fb836242f4225fa0f0e0257362dfc6dd'),
    totalCount?: long(name='TotalCount', example='149'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='700683DE-0154-56D4-8D76-3B7A2C2C7DF9'),
}

model DescribeResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResources  DescribeResourcesRequest
  * @return DescribeResourcesResponse
 */
async function describeResources(request: DescribeResourcesRequest): DescribeResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResources', 'GET', '/api/v1/resources', 'json', false, 'json', request);
}

model DescribeRulesRequest {
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='cae**********699', position='Query'),
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance', position='Query'),
}

model DescribeRulesResponseBody = {
  data?: {
    content?: [ 
      {
        checkFailedResourceCount?: long(name='CheckFailedResourceCount', example='0'),
        checkStatus?: string(name='CheckStatus', example='PASSED'),
        checkTime?: long(name='CheckTime', example='1704157635'),
        productType?: string(name='ProductType', example='ecs'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        riskyResourceCount?: long(name='RiskyResourceCount', example='0'),
        ruleId?: string(name='RuleId', example='rule-bp11ggd8wr762'),
        ruleTemplate?: string(name='RuleTemplate', example='ecs-backup'),
        totalResourceCount?: long(name='TotalResourceCount', example='1'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='0975951c75d7b41464c8d08ae17043ca'),
    totalCount?: long(name='TotalCount', example='42'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='86DEBAC9-AB6A-59AB-9E5C-A540E579ECC9'),
}

model DescribeRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRules  DescribeRulesRequest
  * @return DescribeRulesResponse
 */
async function describeRules(request: DescribeRulesRequest): DescribeRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRules', 'GET', '/api/v1/rules', 'json', false, 'json', request);
}

model DescribeTaskRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='t-0004d9ctt1ii********', position='Path'),
}

model DescribeTaskResponseBody = {
  data?: {
    completeTime?: long(name='CompleteTime', example='1724983927'),
    errorMessage?: string(name='ErrorMessage', example='too many requests.'),
    executionId?: string(name='ExecutionId'),
    expireTime?: long(name='ExpireTime', example='1719026680'),
    progress?: int32(name='Progress', example='100'),
    requestId?: string(name='RequestId', example='784076D6-BD6D-5564-9CEA-834EB11F0C62'),
    startTime?: long(name='StartTime', example='1724983927'),
    taskDescription?: string(name='TaskDescription'),
    taskDetail?: string(name='TaskDetail', example='{"resourceTypes":["ACS::ECS::Instance","ACS::OSS::Bucket","ACS::OTS::Instance","ACS::NAS::FileSystem"]}'),
    taskId?: string(name='TaskId', example='t-xxxxxxxx'),
    taskName?: string(name='TaskName', example='test5566'),
    taskPriority?: string(name='TaskPriority'),
    taskStatus?: string(name='TaskStatus', example='RUNNING'),
    taskType?: string(name='TaskType', example='UPDATE_RESOURCES'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='14DFF801-A4E3-5136-AAB8-7D246012CD7A'),
}

model DescribeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTask  DescribeTaskRequest
  * @return DescribeTaskResponse
 */
async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTask', 'GET', '/api/v1/tasks/{TaskId}', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='cae**********699', position='Query'),
  taskStatus?: string(name='TaskStatus', example='RUNNING', position='Query'),
}

model DescribeTasksResponseBody = {
  data?: {
    content?: [ 
      {
        completeTime?: long(name='CompleteTime', example='1724983927'),
        errorMessage?: string(name='ErrorMessage', example='device not online'),
        executionId?: string(name='ExecutionId', example='empty'),
        expireTime?: long(name='ExpireTime', example='1724983927'),
        progress?: int32(name='Progress', example='100'),
        requestId?: string(name='RequestId', example='AE43C4CB-8074-5EBD-9806-8CA6D12800B1'),
        startTime?: long(name='StartTime', example='1724983927'),
        taskDescription?: string(name='TaskDescription', example='empty'),
        taskDetail?: string(name='TaskDetail', example='{"resourceTypes":["ACS::ECS::Instance","ACS::OSS::Bucket","ACS::OTS::Instance","ACS::NAS::FileSystem"]}'),
        taskId?: string(name='TaskId', example='t-0000e4w0u1v592zdf6s7'),
        taskName?: string(name='TaskName', example='empty'),
        taskPriority?: string(name='TaskPriority', example='HIGH'),
        taskStatus?: string(name='TaskStatus', example='RUNNING'),
        taskType?: string(name='TaskType', example='UPDATE_RESOURCES'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='f4b8c2504545a3b41af5e75147d17d12e3818a0b9b2ff9a2'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AE43C4CB-8074-5EBD-9806-8CA6D12800B1'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTasks  DescribeTasksRequest
  * @return DescribeTasksResponse
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTasks', 'GET', '/api/v1/tasks', 'json', false, 'json', request);
}

model DescribeTopRiskyResourcesRequest {
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance', position='Query'),
}

model DescribeTopRiskyResourcesResponseBody = {
  data?: {
    content?: [ 
      {
        archiveDataSize?: long(name='ArchiveDataSize', example='0'),
        checkFailedCount?: long(name='CheckFailedCount', example='0'),
        coldArchiveDataSize?: long(name='ColdArchiveDataSize', example='0'),
        createTime?: long(name='CreateTime', example='1697798340'),
        enableCheck?: boolean(name='EnableCheck', example='true'),
        iaDataSize?: long(name='IaDataSize', example='0'),
        productType?: string(name='ProductType', example='ecs'),
        protectionScore?: int32(name='ProtectionScore', example='90'),
        protectionScoreUpdatedTime?: long(name='ProtectionScoreUpdatedTime', example='1726036498'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceArn?: string(name='ResourceArn', example='acs:ecs:cn-hangzhou:xxxxxxxx:instance/xxxxx'),
        resourceId?: string(name='ResourceId', example='i-xxxxxxxx'),
        resourceName?: string(name='ResourceName', example='test-server'),
        resourceType?: string(name='ResourceType', example='ACS::ECS::Instance'),
        riskCount?: long(name='RiskCount', example='0'),
        standardDataSize?: long(name='StandardDataSize', example='0'),
        status?: string(name='Status', example='Running'),
        totalDataSize?: long(name='TotalDataSize', example='0'),
        vSwitchId?: string(name='VSwitchId', description='vSwitch ID', example='vsw-xxxxxxxx'),
        vpcId?: string(name='VpcId', description='vpc ID', example='vpc-xxxxxxxx'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
      }
    ](name='Content'),
    maxResults?: int32(name='MaxResults', example='10'),
    nextToken?: string(name='NextToken', example='e557bc9a65fe22cb5e2a3b240f06b0de'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='34081B20-C4C0-514F-93F6-8EEC3D1A587E'),
}

model DescribeTopRiskyResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTopRiskyResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTopRiskyResources  DescribeTopRiskyResourcesRequest
  * @return DescribeTopRiskyResourcesResponse
 */
async function describeTopRiskyResources(request: DescribeTopRiskyResourcesRequest): DescribeTopRiskyResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTopRiskyResources', 'GET', '/api/v1/resources/top-risky', 'json', false, 'json', request);
}

model DisableCheckProductRequest {
  productType: string(name='ProductType', description='This parameter is required.', example='ecs', position='Body'),
}

model DisableCheckProductResponseBody = {
  requestId?: string(name='RequestId', example='89E3CBB7-16F3-52AE-BD32-31A43A2A807F'),
}

model DisableCheckProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCheckProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableCheckProduct  DisableCheckProductRequest
  * @return DisableCheckProductResponse
 */
async function disableCheckProduct(request: DisableCheckProductRequest): DisableCheckProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableCheckProduct', 'POST', '/api/v1/products/disable-check', 'json', true, 'form', request);
}

model DisableCheckResourceRequest {
  resourceArn: string(name='ResourceArn', description='This parameter is required.', example='acs:ecs:123***890:cn-shanghai:instance/i-001***90', position='Body'),
}

model DisableCheckResourceResponseBody = {
  requestId?: string(name='RequestId', example='86DEBAC9-AB6A-59AB-9E5C-A540E579ECC9'),
}

model DisableCheckResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableCheckResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableCheckResource  DisableCheckResourceRequest
  * @return DisableCheckResourceResponse
 */
async function disableCheckResource(request: DisableCheckResourceRequest): DisableCheckResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableCheckResource', 'POST', '/api/v1/resources/disable-check', 'json', true, 'form', request);
}

model EnableCheckProductRequest {
  productType: string(name='ProductType', description='This parameter is required.', example='ecs', position='Body'),
}

model EnableCheckProductResponseBody = {
  requestId?: string(name='RequestId', example='8724BC18-904D-5A0D-BFF4-F0554F0037E7'),
}

model EnableCheckProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCheckProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableCheckProduct  EnableCheckProductRequest
  * @return EnableCheckProductResponse
 */
async function enableCheckProduct(request: EnableCheckProductRequest): EnableCheckProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableCheckProduct', 'POST', '/api/v1/products/enable-check', 'json', true, 'form', request);
}

model EnableCheckResourceRequest {
  resourceArn: string(name='ResourceArn', description='This parameter is required.', example='acs:ecs:123***890:cn-shanghai:instance/i-001***90', position='Body'),
}

model EnableCheckResourceResponseBody = {
  requestId?: string(name='RequestId', example='E583A0FF-803C-51C4-9AC9-E029471ACD6A'),
}

model EnableCheckResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableCheckResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableCheckResource  EnableCheckResourceRequest
  * @return EnableCheckResourceResponse
 */
async function enableCheckResource(request: EnableCheckResourceRequest): EnableCheckResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableCheckResource', 'POST', '/api/v1/resources/enable-check', 'json', true, 'form', request);
}

model GetBdrcServiceRequest {
}

model GetBdrcServiceResponseBody = {
  data?: {
    openTime?: long(name='OpenTime', example='1726169608'),
    protectionScoreUpdatedTime?: long(name='ProtectionScoreUpdatedTime', example='1726169608'),
    serviceInitializeStatus?: string(name='ServiceInitializeStatus', example='SUCCESS'),
    serviceStatus?: string(name='ServiceStatus', example='OPENED'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='5748C531-80B1-5C31-8421-63A1830B9E48'),
}

model GetBdrcServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBdrcServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBdrcService  GetBdrcServiceRequest
  * @return GetBdrcServiceResponse
 */
async function getBdrcService(request: GetBdrcServiceRequest): GetBdrcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBdrcService', 'GET', '/api/v1/service', 'json', false, 'json', request);
}

model OpenBdrcServiceRequest {
}

model OpenBdrcServiceResponseBody = {
  requestId?: string(name='RequestId', example='86DEBAC9-AB6A-59AB-9E5C-A540E579ECC9'),
}

model OpenBdrcServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenBdrcServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenBdrcService  OpenBdrcServiceRequest
  * @return OpenBdrcServiceResponse
 */
async function openBdrcService(request: OpenBdrcServiceRequest): OpenBdrcServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OpenBdrcService', 'POST', '/api/v1/service/open', 'json', false, 'json', request);
}

model UpdateResourcesRequest {
  resourceType?: string(name='ResourceType', example='ACS::ECS::Instance', position='Body'),
}

model UpdateResourcesResponseBody = {
  data?: {
    taskId?: string(name='TaskId', example='t-bp1ewftyzmeg3bl4dtd2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='5B2F09BF-CEBD-5A7E-AC01-E7F86169A5E5'),
}

model UpdateResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResources  UpdateResourcesRequest
  * @return UpdateResourcesResponse
 */
async function updateResources(request: UpdateResourcesRequest): UpdateResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResources', 'POST', '/api/v1/resources/update', 'json', true, 'form', request);
}

