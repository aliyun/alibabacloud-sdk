/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'R-kvstore';
  @version = '2015-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'r-kvstore.aliyuncs.com',
    cn-beijing = 'r-kvstore.aliyuncs.com',
    cn-hangzhou = 'r-kvstore.aliyuncs.com',
    cn-shanghai = 'r-kvstore.aliyuncs.com',
    cn-shenzhen = 'r-kvstore.aliyuncs.com',
    cn-heyuan = 'r-kvstore.aliyuncs.com',
    ap-southeast-1 = 'r-kvstore.aliyuncs.com',
    us-west-1 = 'r-kvstore.aliyuncs.com',
    us-east-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-finance = 'r-kvstore.aliyuncs.com',
    cn-shanghai-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-north-2-gov-1 = 'r-kvstore.aliyuncs.com',
    ap-northeast-2-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-gov-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-nu16-b01 = 'r-kvstore.aliyuncs.com',
    cn-edge-1 = 'r-kvstore.aliyuncs.com',
    cn-fujian = 'r-kvstore.aliyuncs.com',
    cn-haidian-cm12-c01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-test-306 = 'r-kvstore.aliyuncs.com',
    cn-hongkong-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'r-kvstore.aliyuncs.com',
    cn-qingdao-nebula = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et15-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et2-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-inner = 'r-kvstore.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-inner = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'r-kvstore.aliyuncs.com',
    cn-wuhan = 'r-kvstore.aliyuncs.com',
    cn-wulanchabu = 'r-kvstore.aliyuncs.com',
    cn-yushanfang = 'r-kvstore.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'r-kvstore.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'r-kvstore.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'r-kvstore.aliyuncs.com',
    eu-west-1-oxs = 'r-kvstore.aliyuncs.com',
    rus-west-1-pop = 'r-kvstore.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddShardingNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shardCount?: int32(name='ShardCount', minimum=1, maximum=4096, position='Query'),
  sourceBiz?: string(name='SourceBiz', position='Query'),
}

model AddShardingNodeResponseBody = {
  nodeIds?: [ string ](name='NodeIds'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model AddShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddShardingNodeResponseBody(name='body'),
}

async function addShardingNode(request: AddShardingNodeRequest): AddShardingNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShardingNode', 'POST', '/', 'json', false, 'json', request);
}

model AllocateDirectConnectionRequest {
  regionId?: string(name='RegionId', position='Host'),
  connectionString?: string(name='ConnectionString', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AllocateDirectConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateDirectConnectionResponseBody(name='body'),
}

async function allocateDirectConnection(request: AllocateDirectConnectionRequest): AllocateDirectConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateDirectConnection', 'POST', '/', 'json', false, 'json', request);
}

model AllocateInstancePublicConnectionRequest {
  regionId?: string(name='RegionId', position='Host'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: string(name='Port', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckCloudResourceAuthorizedRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  authorizationState?: int32(name='AuthorizationState'),
  requestId?: string(name='RequestId'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCloudResourceAuthorized', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateAccountResponseBody = {
  acountName?: string(name='AcountName'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateBackupResponseBody = {
  backupJobID?: string(name='BackupJobID'),
  requestId?: string(name='RequestId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackup', 'POST', '/', 'json', false, 'json', request);
}

model CreateCacheAnalysisTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateCacheAnalysisTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCacheAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCacheAnalysisTaskResponseBody(name='body'),
}

async function createCacheAnalysisTask(request: CreateCacheAnalysisTaskRequest): CreateCacheAnalysisTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCacheAnalysisTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateGlobalDistributeCacheRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  seedSubInstanceId: string(name='SeedSubInstanceId', position='Query'),
}

model CreateGlobalDistributeCacheResponseBody = {
  globalInstanceId?: string(name='GlobalInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGlobalDistributeCacheResponseBody(name='body'),
}

async function createGlobalDistributeCache(request: CreateGlobalDistributeCacheRequest): CreateGlobalDistributeCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGlobalDistributeCache', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoRenew?: string(name='AutoRenew', position='Query'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: string(name='AutoUseCoupon', position='Query'),
  backupId?: string(name='BackupId', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  capacity?: long(name='Capacity', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  globalInstance?: boolean(name='GlobalInstance', position='Query'),
  globalInstanceId?: string(name='GlobalInstanceId', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  networkType?: string(name='NetworkType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  period?: string(name='Period', position='Query'),
  port?: string(name='Port', minLength=1, maxLength=5, position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', position='Query'),
  readOnlyCount?: int32(name='ReadOnlyCount', minimum=1, maximum=5, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  secondaryZoneId?: string(name='SecondaryZoneId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shardCount?: int32(name='ShardCount', minimum=1, maximum=64, position='Query'),
  srcDBInstanceId?: string(name='SrcDBInstanceId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  token?: string(name='Token', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateInstanceResponseBody = {
  bandwidth?: long(name='Bandwidth'),
  capacity?: long(name='Capacity'),
  chargeType?: string(name='ChargeType'),
  config?: string(name='Config'),
  connectionDomain?: string(name='ConnectionDomain'),
  connections?: long(name='Connections'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceStatus?: string(name='InstanceStatus'),
  networkType?: string(name='NetworkType'),
  nodeType?: string(name='NodeType'),
  orderId: long(name='OrderId'),
  port?: int32(name='Port'),
  privateIpAddr?: string(name='PrivateIpAddr'),
  QPS?: long(name='QPS'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  userName?: string(name='UserName'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  instances: string(name='Instances', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rebuildInstance?: boolean(name='RebuildInstance', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
}

model CreateInstancesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateTairInstanceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: string(name='AutoUseCoupon', position='Query'),
  backupId?: string(name='BackupId', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  globalInstanceId?: string(name='GlobalInstanceId', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  period?: int32(name='Period', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', position='Query'),
  readOnlyCount?: int32(name='ReadOnlyCount', minimum=1, maximum=5, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', minimum=1, maximum=4096, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryZoneId?: string(name='SecondaryZoneId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shardCount?: int32(name='ShardCount', minimum=1, maximum=64, position='Query'),
  shardType?: string(name='ShardType', position='Query'),
  srcDBInstanceId?: string(name='SrcDBInstanceId', position='Query'),
  storage?: int32(name='Storage', position='Query'),
  storageType?: string(name='StorageType', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateTairInstanceResponseBody = {
  bandwidth?: long(name='Bandwidth'),
  chargeType?: string(name='ChargeType'),
  config?: string(name='Config'),
  connectionDomain?: string(name='ConnectionDomain'),
  connections?: long(name='Connections'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  instanceStatus?: string(name='InstanceStatus'),
  orderId?: long(name='OrderId'),
  port?: int32(name='Port'),
  QPS?: long(name='QPS'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  zoneId?: string(name='ZoneId'),
}

model CreateTairInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTairInstanceResponseBody(name='body'),
}

async function createTairInstance(request: CreateTairInstanceRequest): CreateTairInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTairInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName: string(name='AccountName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  globalInstanceId?: string(name='GlobalInstanceId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteShardingNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', deprecated='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shardCount?: int32(name='ShardCount', minimum=1, maximum=4096, position='Query'),
}

model DeleteShardingNodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShardingNodeResponseBody(name='body'),
}

async function deleteShardingNode(request: DeleteShardingNodeRequest): DeleteShardingNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShardingNode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName?: string(name='AccountName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus'),
      accountType?: string(name='AccountType'),
      databasePrivileges?: {
        databasePrivilege?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege'),
        }
      ](name='DatabasePrivilege')
      }(name='DatabasePrivileges'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Account')
  }(name='Accounts'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  isHistory?: int32(name='IsHistory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=10, maximum=100, position='Query'),
  region: string(name='Region', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  taskType: string(name='TaskType', position='Query'),
}

model DescribeActiveOperationTaskResponseBody = {
  items?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      dbType?: string(name='DbType'),
      deadline?: string(name='Deadline'),
      id?: int32(name='Id'),
      insName?: string(name='InsName'),
      modifiedTime?: string(name='ModifiedTime'),
      prepareInterval?: string(name='PrepareInterval'),
      region?: string(name='Region'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      switchTime?: string(name='SwitchTime'),
      taskType?: string(name='TaskType'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskResponseBody(name='body'),
}

async function describeActiveOperationTask(request: DescribeActiveOperationTaskRequest): DescribeActiveOperationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogConfigRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAuditLogConfigResponseBody = {
  dbAudit?: string(name='DbAudit'),
  requestId?: string(name='RequestId'),
  retention?: string(name='Retention'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName?: string(name='AccountName', position='Query'),
  databaseName?: string(name='DatabaseName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  hostAddress?: string(name='HostAddress', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryKeywords?: string(name='QueryKeywords', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeAuditRecordsResponseBody = {
  endTime?: string(name='EndTime'),
  instanceName?: string(name='InstanceName'),
  items?: {
    SQL?: [ 
    {
      accountName?: string(name='AccountName'),
      databaseName?: string(name='DatabaseName'),
      executeTime?: string(name='ExecuteTime'),
      hostAddress?: string(name='HostAddress'),
      IPAddress?: string(name='IPAddress'),
      nodeId?: string(name='NodeId'),
      SQLText?: string(name='SQLText'),
      SQLType?: string(name='SQLType'),
      totalExecutionTimes?: string(name='TotalExecutionTimes'),
    }
  ](name='SQL')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeAuditRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditRecordsResponseBody(name='body'),
}

async function describeAuditRecords(request: DescribeAuditRecordsRequest): DescribeAuditRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  engine?: string(name='Engine', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      regionId?: string(name='RegionId'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine'),
          supportedEditionTypes?: {
            supportedEditionType?: [ 
            {
              editionType?: string(name='EditionType'),
              supportedSeriesTypes?: {
                supportedSeriesType?: [ 
                {
                  seriesType?: string(name='SeriesType'),
                  supportedEngineVersions?: {
                    supportedEngineVersion?: [ 
                    {
                      supportedArchitectureTypes?: {
                        supportedArchitectureType?: [ 
                        {
                          architecture?: string(name='Architecture'),
                          supportedShardNumbers?: {
                            supportedShardNumber?: [ 
                            {
                              shardNumber?: string(name='ShardNumber'),
                              supportedNodeTypes?: {
                                supportedNodeType?: [ 
                                {
                                  availableResources?: {
                                    availableResource?: [ 
                                    {
                                      capacity?: long(name='Capacity'),
                                      instanceClass?: string(name='InstanceClass'),
                                      instanceClassRemark?: string(name='InstanceClassRemark'),
                                    }
                                  ](name='AvailableResource')
                                  }(name='AvailableResources'),
                                  supportedNodeType?: string(name='SupportedNodeType'),
                                }
                              ](name='SupportedNodeType')
                              }(name='SupportedNodeTypes'),
                            }
                          ](name='SupportedShardNumber')
                          }(name='SupportedShardNumbers'),
                        }
                      ](name='SupportedArchitectureType')
                      }(name='SupportedArchitectureTypes'),
                      version?: string(name='Version'),
                    }
                  ](name='SupportedEngineVersion')
                  }(name='SupportedEngineVersions'),
                }
              ](name='SupportedSeriesType')
              }(name='SupportedSeriesTypes'),
            }
          ](name='SupportedEditionType')
          }(name='SupportedEditionTypes'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  enableBackupLog?: int32(name='EnableBackupLog'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupJobId?: string(name='BackupJobId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  jobMode?: string(name='JobMode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBackupTasksResponseBody = {
  backupJobs?: [ 
    {
      backupJobID?: int32(name='BackupJobID'),
      backupProgressStatus?: string(name='BackupProgressStatus'),
      jobMode?: string(name='JobMode'),
      nodeId?: string(name='NodeId'),
      process?: string(name='Process'),
      startTime?: string(name='StartTime'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='BackupJobs'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupId?: int32(name='BackupId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  needAof?: string(name='NeedAof', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupsResponseBody = {
  backups?: {
    backup?: [ 
    {
      backupDBNames?: string(name='BackupDBNames'),
      backupDownloadURL?: string(name='BackupDownloadURL'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: int32(name='BackupId'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL'),
      backupMethod?: string(name='BackupMethod'),
      backupMode?: string(name='BackupMode'),
      backupSize?: long(name='BackupSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      engineVersion?: string(name='EngineVersion'),
      nodeInstanceId?: string(name='NodeInstanceId'),
    }
  ](name='Backup')
  }(name='Backups'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCacheAnalysisReportRequest {
  regionId?: string(name='RegionId', position='Host'),
  analysisType: string(name='AnalysisType', position='Query'),
  date: string(name='Date', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumbers?: int32(name='PageNumbers', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCacheAnalysisReportResponseBody = {
  bigKeys?: [  map[string]any ](name='BigKeys'),
  hotKeys?: [  map[string]any ](name='HotKeys'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeCacheAnalysisReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisReportResponseBody(name='body'),
}

async function describeCacheAnalysisReport(request: DescribeCacheAnalysisReportRequest): DescribeCacheAnalysisReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCacheAnalysisReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCacheAnalysisReportListRequest {
  regionId?: string(name='RegionId', position='Host'),
  days?: int32(name='Days', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumbers?: int32(name='PageNumbers', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeCacheAnalysisReportListResponseBody = {
  dailyTasks?: {
    dailyTask?: [ 
    {
      date?: string(name='Date'),
      tasks?: {
        task?: [ 
        {
          nodeId?: string(name='NodeId'),
          startTime?: string(name='StartTime'),
          status?: string(name='Status'),
          taskId?: string(name='TaskId'),
        }
      ](name='Task')
      }(name='Tasks'),
    }
  ](name='DailyTask')
  }(name='DailyTasks'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model DescribeCacheAnalysisReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisReportListResponseBody(name='body'),
}

async function describeCacheAnalysisReportList(request: DescribeCacheAnalysisReportListRequest): DescribeCacheAnalysisReportListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCacheAnalysisReportList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterMemberInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeClusterMemberInfoResponseBody = {
  clusterChildren?: [ 
    {
      bandWidth?: long(name='BandWidth'),
      binlogRetentionDays?: int32(name='BinlogRetentionDays'),
      bizType?: string(name='BizType'),
      capacity?: long(name='Capacity'),
      classCode?: string(name='ClassCode'),
      connections?: long(name='Connections'),
      currentBandWidth?: long(name='CurrentBandWidth'),
      diskSizeMB?: int32(name='DiskSizeMB'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      replicaSize?: int32(name='ReplicaSize'),
      resourceGroupName?: string(name='ResourceGroupName'),
      service?: string(name='Service'),
      serviceVersion?: string(name='ServiceVersion'),
      userId?: string(name='UserId'),
    }
  ](name='ClusterChildren'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterMemberInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterMemberInfoResponseBody(name='body'),
}

async function describeClusterMemberInfo(request: DescribeClusterMemberInfoRequest): DescribeClusterMemberInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterMemberInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceNetInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  instanceNetworkType?: string(name='InstanceNetworkType'),
  netInfoItems?: {
    instanceNetInfo?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      directConnection?: int32(name='DirectConnection'),
      expiredTime?: string(name='ExpiredTime'),
      IPAddress?: string(name='IPAddress'),
      IPType?: string(name='IPType'),
      port?: string(name='Port'),
      upgradeable?: string(name='Upgradeable'),
      VPCId?: string(name='VPCId'),
      VPCInstanceId?: string(name='VPCInstanceId'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='InstanceNetInfo')
  }(name='NetInfoItems'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceNetInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedClusterInstanceListRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  dedicatedHostName?: string(name='DedicatedHostName', position='Query'),
  engine?: string(name='Engine', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceNetType?: string(name='InstanceNetType', position='Query'),
  instanceStatus?: int32(name='InstanceStatus', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeDedicatedClusterInstanceListResponseBody = {
  instances?: [ 
    {
      bandWidth?: long(name='BandWidth'),
      characterType?: string(name='CharacterType'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      connectionDomain?: string(name='ConnectionDomain'),
      createTime?: string(name='CreateTime'),
      currentBandWidth?: long(name='CurrentBandWidth'),
      customId?: string(name='CustomId'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      instanceClass?: string(name='InstanceClass'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceNodeList?: [ 
        {
          dedicatedHostName?: string(name='DedicatedHostName'),
          instanceId?: string(name='InstanceId'),
          nodeId?: int32(name='NodeId'),
          nodeIp?: string(name='NodeIp'),
          nodeType?: string(name='NodeType'),
          port?: int32(name='Port'),
          role?: string(name='Role'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='InstanceNodeList'),
      instanceStatus?: string(name='InstanceStatus'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      proxyCount?: int32(name='ProxyCount'),
      regionId?: string(name='RegionId'),
      shardCount?: int32(name='ShardCount'),
      storageType?: string(name='StorageType'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDedicatedClusterInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedClusterInstanceListResponseBody(name='body'),
}

async function describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): DescribeDedicatedClusterInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedClusterInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEncryptionKeyRequest {
  regionId?: string(name='RegionId', position='Host'),
  encryptionKey?: string(name='EncryptionKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeEncryptionKeyResponseBody = {
  creator?: string(name='Creator'),
  deleteDate?: string(name='DeleteDate'),
  description?: string(name='Description'),
  encryptionKey?: string(name='EncryptionKey'),
  encryptionKeyStatus?: string(name='EncryptionKeyStatus'),
  keyUsage?: string(name='KeyUsage'),
  materialExpireTime?: string(name='MaterialExpireTime'),
  origin?: string(name='Origin'),
  requestId?: string(name='RequestId'),
}

model DescribeEncryptionKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEncryptionKeyResponseBody(name='body'),
}

async function describeEncryptionKey(request: DescribeEncryptionKeyRequest): DescribeEncryptionKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEncryptionKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEncryptionKeyListRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeEncryptionKeyListResponseBody = {
  keyIds?: {
    keyId?: [ string ](name='KeyId')
  }(name='KeyIds'),
  requestId?: string(name='RequestId'),
}

model DescribeEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEncryptionKeyListResponseBody(name='body'),
}

async function describeEncryptionKeyList(request: DescribeEncryptionKeyListRequest): DescribeEncryptionKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEncryptionKeyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEngineVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeEngineVersionResponseBody = {
  DBVersionRelease?: string(name='DBVersionRelease'),
  enableUpgradeMajorVersion?: boolean(name='EnableUpgradeMajorVersion'),
  enableUpgradeMinorVersion?: boolean(name='EnableUpgradeMinorVersion'),
  engine?: string(name='Engine'),
  isLatestVersion?: boolean(name='IsLatestVersion'),
  isNewSSLMode?: string(name='IsNewSSLMode'),
  isRedisCompatibleVersion?: string(name='IsRedisCompatibleVersion'),
  isSSLEnable?: string(name='IsSSLEnable'),
  majorVersion?: string(name='MajorVersion'),
  minorVersion?: string(name='MinorVersion'),
  proxyMinorVersion?: string(name='ProxyMinorVersion'),
  proxyVersionRelease?: string(name='ProxyVersionRelease'),
  requestId?: string(name='RequestId'),
}

model DescribeEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEngineVersionResponseBody(name='body'),
}

async function describeEngineVersion(request: DescribeEngineVersionRequest): DescribeEngineVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEngineVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalDistributeCacheRequest {
  regionId?: string(name='RegionId', position='Host'),
  globalInstanceId?: string(name='GlobalInstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  subInstanceId?: string(name='SubInstanceId', position='Query'),
}

model DescribeGlobalDistributeCacheResponseBody = {
  globalDistributeCaches?: [ 
    {
      globalInstanceId?: string(name='GlobalInstanceId'),
      status?: string(name='Status'),
      subInstances?: [ 
        {
          globalInstanceId?: string(name='GlobalInstanceId'),
          instanceClass?: string(name='InstanceClass'),
          instanceID?: string(name='InstanceID'),
          instanceStatus?: string(name='InstanceStatus'),
          regionId?: string(name='RegionId'),
        }
      ](name='SubInstances'),
    }
  ](name='GlobalDistributeCaches'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalDistributeCacheResponseBody(name='body'),
}

async function describeGlobalDistributeCache(request: DescribeGlobalDistributeCacheRequest): DescribeGlobalDistributeCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalDistributeCache', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryMonitorValuesRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  intervalForHistory: string(name='IntervalForHistory', position='Query'),
  monitorKeys?: string(name='MonitorKeys', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeHistoryMonitorValuesResponseBody = {
  monitorHistory?: string(name='MonitorHistory'),
  requestId?: string(name='RequestId'),
}

model DescribeHistoryMonitorValuesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHistoryMonitorValuesResponseBody(name='body'),
}

async function describeHistoryMonitorValues(request: DescribeHistoryMonitorValuesRequest): DescribeHistoryMonitorValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryMonitorValues', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeInstanceAttributeResponseBody = {
  instances?: {
    DBInstanceAttribute?: [ 
    {
      architectureType?: string(name='ArchitectureType'),
      auditLogRetention?: string(name='AuditLogRetention'),
      availabilityValue?: string(name='AvailabilityValue'),
      backupLogStartTime?: string(name='BackupLogStartTime'),
      bandwidth?: long(name='Bandwidth'),
      capacity?: long(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      cloudType?: string(name='CloudType'),
      config?: string(name='Config'),
      connectionDomain?: string(name='ConnectionDomain'),
      connections?: long(name='Connections'),
      createTime?: string(name='CreateTime'),
      endTime?: string(name='EndTime'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      globalInstanceId?: string(name='GlobalInstanceId'),
      hasRenewChangeOrder?: string(name='HasRenewChangeOrder'),
      instanceClass?: string(name='InstanceClass'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceReleaseProtection?: boolean(name='InstanceReleaseProtection'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      isRds?: boolean(name='IsRds'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
      networkType?: string(name='NetworkType'),
      nodeType?: string(name='NodeType'),
      packageType?: string(name='PackageType'),
      port?: long(name='Port'),
      privateIp?: string(name='PrivateIp'),
      QPS?: long(name='QPS'),
      readOnlyCount?: int32(name='ReadOnlyCount'),
      realInstanceClass?: string(name='RealInstanceClass'),
      regionId?: string(name='RegionId'),
      replicaId?: string(name='ReplicaId'),
      replicationMode?: string(name='ReplicationMode'),
      resourceGroupId?: string(name='ResourceGroupId'),
      secondaryZoneId?: string(name='SecondaryZoneId'),
      securityIPList?: string(name='SecurityIPList'),
      shardCount?: int32(name='ShardCount'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      vpcAuthMode?: string(name='VpcAuthMode'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='DBInstanceAttribute')
  }(name='Instances'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstanceId?: string(name='DBInstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=200, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  items?: {
    item?: [ 
    {
      autoRenew?: string(name='AutoRenew'),
      DBInstanceId?: string(name='DBInstanceId'),
      duration?: int32(name='Duration'),
      regionId?: string(name='RegionId'),
    }
  ](name='Item')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAutoRenewalAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeInstanceConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceConfigResponseBody(name='body'),
}

async function describeInstanceConfig(request: DescribeInstanceConfigRequest): DescribeInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSSLRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  SSLEnabled?: string(name='SSLEnabled'),
  SSLExpiredTime?: string(name='SSLExpiredTime'),
}

model DescribeInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSSLResponseBody(name='body'),
}

async function describeInstanceSSL(request: DescribeInstanceSSLRequest): DescribeInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTDEStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeInstanceTDEStatusResponseBody = {
  requestId?: string(name='RequestId'),
  TDEStatus?: string(name='TDEStatus'),
}

model DescribeInstanceTDEStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTDEStatusResponseBody(name='body'),
}

async function describeInstanceTDEStatus(request: DescribeInstanceTDEStatusRequest): DescribeInstanceTDEStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTDEStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  architectureType?: string(name='ArchitectureType', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  editionType?: string(name='EditionType', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  expired?: string(name='Expired', position='Query'),
  globalInstance?: boolean(name='GlobalInstance', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  instanceStatus?: string(name='InstanceStatus', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  networkType?: string(name='NetworkType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=1000, position='Query'),
  privateIp?: string(name='PrivateIp', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    KVStoreInstance?: [ 
    {
      architectureType?: string(name='ArchitectureType'),
      bandwidth?: long(name='Bandwidth'),
      capacity?: long(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      cloudType?: string(name='CloudType'),
      config?: string(name='Config'),
      connectionDomain?: string(name='ConnectionDomain'),
      connectionMode?: string(name='ConnectionMode'),
      connections?: long(name='Connections'),
      createTime?: string(name='CreateTime'),
      destroyTime?: string(name='DestroyTime'),
      editionType?: string(name='EditionType'),
      endTime?: string(name='EndTime'),
      engineVersion?: string(name='EngineVersion'),
      globalInstanceId?: string(name='GlobalInstanceId'),
      hasRenewChangeOrder?: boolean(name='HasRenewChangeOrder'),
      instanceClass?: string(name='InstanceClass'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      isRds?: boolean(name='IsRds'),
      networkType?: string(name='NetworkType'),
      nodeType?: string(name='NodeType'),
      packageType?: string(name='PackageType'),
      port?: long(name='Port'),
      privateIp?: string(name='PrivateIp'),
      QPS?: long(name='QPS'),
      regionId?: string(name='RegionId'),
      replacateId?: string(name='ReplacateId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      secondaryZoneId?: string(name='SecondaryZoneId'),
      shardCount?: int32(name='ShardCount'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      userName?: string(name='UserName'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='KVStoreInstance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesOverviewRequest {
  architectureType?: string(name='ArchitectureType', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  editionType?: string(name='EditionType', position='Query'),
  engineVersion?: string(name='EngineVersion', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  instanceStatus?: string(name='InstanceStatus', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  networkType?: string(name='NetworkType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIp?: string(name='PrivateIp', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  searchKey?: string(name='SearchKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeInstancesOverviewResponseBody = {
  instances?: [ 
    {
      architectureType?: string(name='ArchitectureType'),
      capacity?: long(name='Capacity'),
      chargeType?: string(name='ChargeType'),
      connectionDomain?: string(name='ConnectionDomain'),
      createTime?: string(name='CreateTime'),
      endTime?: string(name='EndTime'),
      engineVersion?: string(name='EngineVersion'),
      globalInstanceId?: string(name='GlobalInstanceId'),
      instanceClass?: string(name='InstanceClass'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      networkType?: string(name='NetworkType'),
      privateIp?: string(name='PrivateIp'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInstancesOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesOverviewResponseBody(name='body'),
}

async function describeInstancesOverview(request: DescribeInstancesOverviewRequest): DescribeInstancesOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstancesOverview', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIntranetAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIntranetAttributeResponseBody = {
  autoRenewal?: boolean(name='AutoRenewal'),
  bandwidthExpireTime?: string(name='BandwidthExpireTime'),
  expireTime?: string(name='ExpireTime'),
  intranetBandwidth?: int32(name='IntranetBandwidth'),
  requestId?: string(name='RequestId'),
}

model DescribeIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIntranetAttributeResponseBody(name='body'),
}

async function describeIntranetAttribute(request: DescribeIntranetAttributeRequest): DescribeIntranetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIntranetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogicInstanceTopologyRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLogicInstanceTopologyResponseBody = {
  instanceId?: string(name='InstanceId'),
  redisProxyList?: {
    nodeInfo?: [ 
    {
      bandwidth?: string(name='Bandwidth'),
      capacity?: string(name='Capacity'),
      connection?: string(name='Connection'),
      nodeId?: string(name='NodeId'),
      nodeType?: string(name='NodeType'),
    }
  ](name='NodeInfo')
  }(name='RedisProxyList'),
  redisShardList?: {
    nodeInfo?: [ 
    {
      bandwidth?: string(name='Bandwidth'),
      capacity?: string(name='Capacity'),
      connection?: string(name='Connection'),
      nodeId?: string(name='NodeId'),
      nodeType?: string(name='NodeType'),
    }
  ](name='NodeInfo')
  }(name='RedisShardList'),
  requestId?: string(name='RequestId'),
}

model DescribeLogicInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogicInstanceTopologyResponseBody(name='body'),
}

async function describeLogicInstanceTopology(request: DescribeLogicInstanceTopologyRequest): DescribeLogicInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogicInstanceTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorItemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeMonitorItemsResponseBody = {
  monitorItems?: {
    KVStoreMonitorItem?: [ 
    {
      monitorKey?: string(name='MonitorKey'),
      unit?: string(name='Unit'),
    }
  ](name='KVStoreMonitorItem')
  }(name='MonitorItems'),
  requestId?: string(name='RequestId'),
}

model DescribeMonitorItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorItemsResponseBody(name='body'),
}

async function describeMonitorItems(request: DescribeMonitorItemsRequest): DescribeMonitorItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterModificationHistoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameterName?: string(name='ParameterName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeParameterModificationHistoryResponseBody = {
  historicalParameters?: {
    historicalParameter?: [ 
    {
      modifyTime?: string(name='ModifyTime'),
      newParameterValue?: string(name='NewParameterValue'),
      oldParameterValue?: string(name='OldParameterValue'),
      parameterName?: string(name='ParameterName'),
    }
  ](name='HistoricalParameter')
  }(name='HistoricalParameters'),
  requestId?: string(name='RequestId'),
}

model DescribeParameterModificationHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterModificationHistoryResponseBody(name='body'),
}

async function describeParameterModificationHistory(request: DescribeParameterModificationHistoryRequest): DescribeParameterModificationHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterModificationHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
  characterType: string(name='CharacterType', position='Query'),
  engine: string(name='Engine', position='Query'),
  engineVersion: string(name='EngineVersion', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeParameterTemplatesResponseBody = {
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  parameterCount?: string(name='ParameterCount'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      forceModify?: boolean(name='ForceModify'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='TemplateRecord')
  }(name='Parameters'),
  requestId?: string(name='RequestId'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeParametersResponseBody = {
  configParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      forceRestart?: boolean(name='ForceRestart'),
      modifiableStatus?: boolean(name='ModifiableStatus'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameter')
  }(name='ConfigParameters'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  requestId?: string(name='RequestId'),
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      forceRestart?: string(name='ForceRestart'),
      modifiableStatus?: string(name='ModifiableStatus'),
      parameterDescription?: string(name='ParameterDescription'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
    }
  ](name='Parameter')
  }(name='RunningParameters'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  businessInfo?: string(name='BusinessInfo', position='Query'),
  capacity?: long(name='Capacity', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  forceUpgrade?: boolean(name='ForceUpgrade', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instances?: string(name='Instances', position='Query'),
  nodeType?: string(name='NodeType', position='Query'),
  orderParamOut?: string(name='OrderParamOut', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: long(name='Period', position='Query'),
  quantity?: long(name='Quantity', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribePriceResponseBody = {
  order?: {
    coupons?: {
      coupon?: [ 
      {
        couponNo?: string(name='CouponNo'),
        description?: string(name='Description'),
        isSelected?: string(name='IsSelected'),
        name?: string(name='Name'),
      }
    ](name='Coupon')
    }(name='Coupons'),
    currency?: string(name='Currency'),
    discountAmount?: string(name='DiscountAmount'),
    handlingFeeAmount?: string(name='HandlingFeeAmount'),
    originalAmount?: string(name='OriginalAmount'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds'),
    tradeAmount?: string(name='TradeAmount'),
  }(name='Order'),
  orderParams?: string(name='OrderParams'),
  requestId?: string(name='RequestId'),
  rules?: {
    rule?: [ 
    {
      name?: string(name='Name'),
      ruleDescId?: long(name='RuleDescId'),
      title?: string(name='Title'),
    }
  ](name='Rule')
  }(name='Rules'),
  subOrders?: {
    subOrder?: [ 
    {
      discountAmount?: string(name='DiscountAmount'),
      instanceId?: string(name='InstanceId'),
      originalAmount?: string(name='OriginalAmount'),
      ruleIds?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIds'),
      tradeAmount?: string(name='TradeAmount'),
    }
  ](name='SubOrder')
  }(name='SubOrders'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regionIds?: {
    KVStoreRegion?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zoneIdList?: {
        zoneId?: [ string ](name='ZoneId')
      }(name='ZoneIdList'),
      zoneIds?: string(name='ZoneIds'),
    }
  ](name='KVStoreRegion')
  }(name='RegionIds'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoleZoneInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryType?: int32(name='QueryType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRoleZoneInfoResponseBody = {
  node?: {
    nodeInfo?: [ 
    {
      currentBandWidth?: long(name='CurrentBandWidth'),
      currentMinorVersion?: string(name='CurrentMinorVersion'),
      custinsId?: string(name='CustinsId'),
      defaultBandWidth?: long(name='DefaultBandWidth'),
      insName?: string(name='InsName'),
      insType?: int32(name='InsType'),
      isLatestVersion?: int32(name='IsLatestVersion'),
      isOpenBandWidthService?: boolean(name='IsOpenBandWidthService'),
      nodeId?: string(name='NodeId'),
      nodeType?: string(name='NodeType'),
      role?: string(name='Role'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='NodeInfo')
  }(name='Node'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRoleZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoleZoneInfoResponseBody(name='body'),
}

async function describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): DescribeRoleZoneInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoleZoneInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRunningLogRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  characterType?: string(name='CharacterType', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleType?: string(name='RoleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeRunningLogRecordsResponseBody = {
  engine?: string(name='Engine'),
  instanceId?: string(name='InstanceId'),
  items?: {
    logRecords?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      nodeId?: string(name='NodeId'),
    }
  ](name='LogRecords')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeRunningLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRunningLogRecordsResponseBody(name='body'),
}

async function describeRunningLogRecords(request: DescribeRunningLogRecordsRequest): DescribeRunningLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRunningLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      netType?: string(name='NetType'),
      regionId?: string(name='RegionId'),
      securityGroupId?: string(name='SecurityGroupId'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroupConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityIpsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
  securityIpGroups?: {
    securityIpGroup?: [ 
    {
      securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute'),
      securityIpGroupName?: string(name='SecurityIpGroupName'),
      securityIpList?: string(name='SecurityIpList'),
    }
  ](name='SecurityIpGroup')
  }(name='SecurityIpGroups'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  regionId?: string(name='RegionId', position='Host'),
  DBName?: string(name='DBName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slowLogRecordType?: string(name='SlowLogRecordType', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  engine?: string(name='Engine'),
  instanceId?: string(name='InstanceId'),
  items?: {
    logRecords?: [ 
    {
      account?: string(name='Account'),
      accountName?: string(name='AccountName'),
      command?: string(name='Command'),
      DBName?: string(name='DBName'),
      dataBaseName?: string(name='DataBaseName'),
      elapsedTime?: long(name='ElapsedTime'),
      executeTime?: string(name='ExecuteTime'),
      IPAddress?: string(name='IPAddress'),
      nodeId?: string(name='NodeId'),
    }
  ](name='LogRecords')
  }(name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  endTime: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  status: string(name='Status', position='Query'),
}

model DescribeTasksResponseBody = {
  items?: [ 
    {
      beginTime?: string(name='BeginTime'),
      currentStepName?: string(name='CurrentStepName'),
      finishTime?: string(name='FinishTime'),
      progress?: float(name='Progress'),
      remain?: int32(name='Remain'),
      status?: string(name='Status'),
      stepProgressInfo?: string(name='StepProgressInfo'),
      stepsInfo?: string(name='StepsInfo'),
      taskAction?: string(name='TaskAction'),
      taskId?: string(name='TaskId'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    KVStoreZone?: [ 
    {
      disabled?: boolean(name='Disabled'),
      isRds?: boolean(name='IsRds'),
      regionId?: string(name='RegionId'),
      switchNetwork?: boolean(name='SwitchNetwork'),
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
    }
  ](name='KVStoreZone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model EnableAdditionalBandwidthRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  bandwidth?: string(name='Bandwidth', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  orderTimeLength?: string(name='OrderTimeLength', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sourceBiz?: string(name='SourceBiz', position='Query'),
}

model EnableAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model EnableAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAdditionalBandwidthResponseBody(name='body'),
}

async function enableAdditionalBandwidth(request: EnableAdditionalBandwidthRequest): EnableAdditionalBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAdditionalBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model FlushExpireKeysRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model FlushExpireKeysResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model FlushExpireKeysResponse = {
  headers: map[string]string(name='headers'),
  body: FlushExpireKeysResponseBody(name='body'),
}

async function flushExpireKeys(request: FlushExpireKeysRequest): FlushExpireKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlushExpireKeys', 'POST', '/', 'json', false, 'json', request);
}

model FlushInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model FlushInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model FlushInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: FlushInstanceResponseBody(name='body'),
}

async function flushInstance(request: FlushInstanceRequest): FlushInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlushInstance', 'POST', '/', 'json', false, 'json', request);
}

model GrantAccountPrivilegeRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName: string(name='AccountName', position='Query'),
  accountPrivilege: string(name='AccountPrivilege', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model InitializeKvstorePermissionRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model InitializeKvstorePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeKvstorePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeKvstorePermissionResponseBody(name='body'),
}

async function initializeKvstorePermission(request: InitializeKvstorePermissionRequest): InitializeKvstorePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeKvstorePermission', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model MigrateToOtherZoneRequest {
  regionId?: string(name='RegionId', position='Host'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryZoneId?: string(name='SecondaryZoneId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model MigrateToOtherZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateToOtherZone', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountDescription: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPasswordRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName: string(name='AccountName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  newAccountPassword: string(name='NewAccountPassword', position='Query'),
  oldAccountPassword: string(name='OldAccountPassword', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  ids: string(name='Ids', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchTime: string(name='SwitchTime', position='Query'),
}

model ModifyActiveOperationTaskResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId'),
}

model ModifyActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationTaskResponseBody(name='body'),
}

async function modifyActiveOperationTask(request: ModifyActiveOperationTaskRequest): ModifyActiveOperationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAuditLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  dbAudit?: boolean(name='DbAudit', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retention?: int32(name='Retention', minimum=1, maximum=365, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAuditLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  enableBackupLog?: int32(name='EnableBackupLog', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  regionId?: string(name='RegionId', position='Host'),
  currentConnectionString: string(name='CurrentConnectionString', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  IPType?: string(name='IPType', position='Query'),
  newConnectionString?: string(name='NewConnectionString', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: string(name='Port', minLength=1, maxLength=5, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceReleaseProtection?: boolean(name='InstanceReleaseProtection', position='Query'),
  newPassword?: string(name='NewPassword', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  duration?: string(name='Duration', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAutoRenewalAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  config: string(name='Config', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceConfigResponseBody(name='body'),
}

async function modifyInstanceConfig(request: ModifyInstanceConfigRequest): ModifyInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMaintainTimeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  maintainEndTime: string(name='MaintainEndTime', position='Query'),
  maintainStartTime: string(name='MaintainStartTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMajorVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  majorVersion: string(name='MajorVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceMajorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMajorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMajorVersionResponseBody(name='body'),
}

async function modifyInstanceMajorVersion(request: ModifyInstanceMajorVersionRequest): ModifyInstanceMajorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMajorVersion', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMinorVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  minorversion?: string(name='Minorversion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceMinorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMinorVersionResponseBody(name='body'),
}

async function modifyInstanceMinorVersion(request: ModifyInstanceMinorVersionRequest): ModifyInstanceMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNetExpireTimeRequest {
  regionId?: string(name='RegionId', position='Host'),
  classicExpiredDays: int32(name='ClassicExpiredDays', position='Query'),
  connectionString: string(name='ConnectionString', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceNetExpireTimeResponseBody = {
  instanceId?: string(name='InstanceId'),
  netInfoItems?: {
    netInfoItem?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      expiredTime?: string(name='ExpiredTime'),
      IPAddress?: string(name='IPAddress'),
      port?: string(name='Port'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceNetExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNetExpireTimeResponseBody(name='body'),
}

async function modifyInstanceNetExpireTime(request: ModifyInstanceNetExpireTimeRequest): ModifyInstanceNetExpireTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceNetExpireTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceSSLRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  SSLEnabled: string(name='SSLEnabled', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyInstanceSSLResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSSLResponseBody(name='body'),
}

async function modifyInstanceSSL(request: ModifyInstanceSSLRequest): ModifyInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceSpecRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  forceUpgrade?: boolean(name='ForceUpgrade', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  majorVersion?: string(name='MajorVersion', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  readOnlyCount?: int32(name='ReadOnlyCount', minimum=0, maximum=5, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shardCount?: int32(name='ShardCount', minimum=1, maximum=4092, position='Query'),
  sourceBiz?: string(name='SourceBiz', position='Query'),
}

model ModifyInstanceSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceTDERequest {
  regionId?: string(name='RegionId', position='Host'),
  encryptionKey?: string(name='EncryptionKey', position='Query'),
  encryptionName?: string(name='EncryptionName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  TDEStatus: string(name='TDEStatus', position='Query'),
}

model ModifyInstanceTDEResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceTDEResponseBody(name='body'),
}

async function modifyInstanceTDE(request: ModifyInstanceTDERequest): ModifyInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceVpcAuthModeRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcAuthMode: string(name='VpcAuthMode', position='Query'),
}

model ModifyInstanceVpcAuthModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVpcAuthModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVpcAuthModeResponseBody(name='body'),
}

async function modifyInstanceVpcAuthMode(request: ModifyInstanceVpcAuthModeRequest): ModifyInstanceVpcAuthModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceVpcAuthMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIntranetAttributeRequest {
  regionId?: string(name='RegionId', position='Host'),
  bandWidth?: long(name='BandWidth', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIntranetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIntranetAttributeResponseBody(name='body'),
}

async function modifyIntranetAttribute(request: ModifyIntranetAttributeRequest): ModifyIntranetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIntranetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyResourceGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyResourceGroupResponseBody(name='body'),
}

async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIpsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  modifyMode?: string(name='ModifyMode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute', position='Query'),
  securityIpGroupName?: string(name='SecurityIpGroupName', position='Query'),
  securityIps: string(name='SecurityIps', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseDirectConnectionRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseDirectConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseDirectConnectionResponseBody(name='body'),
}

async function releaseDirectConnection(request: ReleaseDirectConnectionRequest): ReleaseDirectConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseDirectConnection', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  regionId?: string(name='RegionId', position='Host'),
  currentConnectionString: string(name='CurrentConnectionString', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSubInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveSubInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveSubInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSubInstanceResponseBody(name='body'),
}

async function removeSubInstance(request: RemoveSubInstanceRequest): RemoveSubInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSubInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewAdditionalBandwidthRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  orderTimeLength: string(name='OrderTimeLength', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sourceBiz?: string(name='SourceBiz', position='Query'),
}

model RenewAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: RenewAdditionalBandwidthResponseBody(name='body'),
}

async function renewAdditionalBandwidth(request: RenewAdditionalBandwidthRequest): RenewAdditionalBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAdditionalBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  businessInfo?: string(name='BusinessInfo', position='Query'),
  capacity?: string(name='Capacity', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  couponNo?: string(name='CouponNo', position='Query'),
  fromApp?: string(name='FromApp', position='Query'),
  instanceClass?: string(name='InstanceClass', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: long(name='Period', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RenewInstanceResponseBody = {
  endTime?: string(name='EndTime'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  regionId?: string(name='RegionId', position='Host'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveTime?: string(name='EffectiveTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  upgradeMinorVersion?: boolean(name='UpgradeMinorVersion', position='Query'),
}

model RestartInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartInstance', 'POST', '/', 'json', false, 'json', request);
}

model RestoreInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  backupId?: string(name='BackupId', position='Query'),
  filterKey?: string(name='FilterKey', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restoreTime?: string(name='RestoreTime', position='Query'),
  restoreType?: string(name='RestoreType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RestoreInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreInstanceResponseBody(name='body'),
}

async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchInstanceHARequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  nodeId?: string(name='NodeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchMode?: int32(name='SwitchMode', position='Query'),
  switchType?: string(name='SwitchType', position='Query'),
}

model SwitchInstanceHAResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchInstanceHAResponseBody(name='body'),
}

async function switchInstanceHA(request: SwitchInstanceHARequest): SwitchInstanceHAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchInstanceHA', 'POST', '/', 'json', false, 'json', request);
}

model SwitchInstanceProxyRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SwitchInstanceProxyResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchInstanceProxyResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchInstanceProxyResponseBody(name='body'),
}

async function switchInstanceProxy(request: SwitchInstanceProxyRequest): SwitchInstanceProxyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchInstanceProxy', 'POST', '/', 'json', false, 'json', request);
}

model SwitchNetworkRequest {
  regionId?: string(name='RegionId', position='Host'),
  classicExpiredDays?: string(name='ClassicExpiredDays', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retainClassic?: string(name='RetainClassic', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  targetNetworkType?: string(name='TargetNetworkType', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model SwitchNetworkResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchNetworkResponseBody(name='body'),
}

async function switchNetwork(request: SwitchNetworkRequest): SwitchNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchNetwork', 'POST', '/', 'json', false, 'json', request);
}

model SyncDtsStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', minLength=1, maxLength=64, position='Query'),
}

model SyncDtsStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SyncDtsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDtsStatusResponseBody(name='body'),
}

async function syncDtsStatus(request: SyncDtsStatusRequest): SyncDtsStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncDtsStatus', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TransformInstanceChargeTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: long(name='Period', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model TransformInstanceChargeTypeResponseBody = {
  endTime?: string(name='EndTime'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model TransformInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransformInstanceChargeTypeResponseBody(name='body'),
}

async function transformInstanceChargeType(request: TransformInstanceChargeTypeRequest): TransformInstanceChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformInstanceChargeType', 'POST', '/', 'json', false, 'json', request);
}

model TransformToPrePaidRequest {
  regionId?: string(name='RegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: long(name='Period', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model TransformToPrePaidResponseBody = {
  endTime?: string(name='EndTime'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model TransformToPrePaidResponse = {
  headers: map[string]string(name='headers'),
  body: TransformToPrePaidResponseBody(name='body'),
}

async function transformToPrePaid(request: TransformToPrePaidRequest): TransformToPrePaidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformToPrePaid', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

