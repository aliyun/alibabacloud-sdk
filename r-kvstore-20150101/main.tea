/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'r-kvstore.aliyuncs.com',
    cn-beijing = 'r-kvstore.aliyuncs.com',
    cn-hangzhou = 'r-kvstore.aliyuncs.com',
    cn-shanghai = 'r-kvstore.aliyuncs.com',
    cn-shenzhen = 'r-kvstore.aliyuncs.com',
    cn-heyuan = 'r-kvstore.aliyuncs.com',
    ap-southeast-1 = 'r-kvstore.aliyuncs.com',
    us-west-1 = 'r-kvstore.aliyuncs.com',
    us-east-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-finance = 'r-kvstore.aliyuncs.com',
    cn-shanghai-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-north-2-gov-1 = 'r-kvstore.aliyuncs.com',
    ap-northeast-2-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-gov-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-nu16-b01 = 'r-kvstore.aliyuncs.com',
    cn-edge-1 = 'r-kvstore.aliyuncs.com',
    cn-fujian = 'r-kvstore.aliyuncs.com',
    cn-haidian-cm12-c01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-test-306 = 'r-kvstore.aliyuncs.com',
    cn-hongkong-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'r-kvstore.aliyuncs.com',
    cn-qingdao-nebula = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et15-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et2-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-inner = 'r-kvstore.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-inner = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'r-kvstore.aliyuncs.com',
    cn-wuhan = 'r-kvstore.aliyuncs.com',
    cn-wulanchabu = 'r-kvstore.aliyuncs.com',
    cn-yushanfang = 'r-kvstore.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'r-kvstore.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'r-kvstore.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'r-kvstore.aliyuncs.com',
    eu-west-1-oxs = 'r-kvstore.aliyuncs.com',
    rus-west-1-pop = 'r-kvstore.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('r-kvstore', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddShardingNodeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  shardCount?: int32(name='ShardCount'),
  shardClass?: string(name='ShardClass'),
  autoPay?: boolean(name='AutoPay'),
  couponNo?: string(name='CouponNo'),
  businessInfo?: string(name='BusinessInfo'),
  sourceBiz?: string(name='SourceBiz'),
}

model AddShardingNodeResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: long(name='OrderId'),
  nodeIds?: [ string ](name='NodeIds'),
}

model AddShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  body: AddShardingNodeResponseBody(name='body'),
}

async function addShardingNodeWithOptions(request: AddShardingNodeRequest, runtime: Util.RuntimeOptions): AddShardingNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddShardingNode', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addShardingNode(request: AddShardingNodeRequest): AddShardingNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShardingNodeWithOptions(request, runtime);
}

model AllocateDirectConnectionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  connectionString?: string(name='ConnectionString'),
  port?: string(name='Port'),
}

model AllocateDirectConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateDirectConnectionResponseBody(name='body'),
}

async function allocateDirectConnectionWithOptions(request: AllocateDirectConnectionRequest, runtime: Util.RuntimeOptions): AllocateDirectConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateDirectConnection', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateDirectConnection(request: AllocateDirectConnectionRequest): AllocateDirectConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDirectConnectionWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateInstancePublicConnection', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CreateAccountRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  accountPrivilege?: string(name='AccountPrivilege'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
  accountType?: string(name='AccountType'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  acountName?: string(name='AcountName'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model CreateBackupResponseBody = {
  backupJobID?: string(name='BackupJobID'),
  requestId?: string(name='RequestId'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackup', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateCacheAnalysisTaskRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model CreateCacheAnalysisTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCacheAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCacheAnalysisTaskResponseBody(name='body'),
}

async function createCacheAnalysisTaskWithOptions(request: CreateCacheAnalysisTaskRequest, runtime: Util.RuntimeOptions): CreateCacheAnalysisTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCacheAnalysisTask', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCacheAnalysisTask(request: CreateCacheAnalysisTaskRequest): CreateCacheAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCacheAnalysisTaskWithOptions(request, runtime);
}

model CreateGlobalDistributeCacheRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  seedSubInstanceId?: string(name='SeedSubInstanceId'),
}

model CreateGlobalDistributeCacheResponseBody = {
  globalInstanceId?: string(name='GlobalInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGlobalDistributeCacheResponseBody(name='body'),
}

async function createGlobalDistributeCacheWithOptions(request: CreateGlobalDistributeCacheRequest, runtime: Util.RuntimeOptions): CreateGlobalDistributeCacheResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateGlobalDistributeCache', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createGlobalDistributeCache(request: CreateGlobalDistributeCacheRequest): CreateGlobalDistributeCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGlobalDistributeCacheWithOptions(request, runtime);
}

model CreateInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  token?: string(name='Token'),
  instanceName?: string(name='InstanceName'),
  password?: string(name='Password'),
  capacity?: long(name='Capacity'),
  instanceClass?: string(name='InstanceClass'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  networkType?: string(name='NetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  period?: string(name='Period'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  srcDBInstanceId?: string(name='SrcDBInstanceId'),
  backupId?: string(name='BackupId'),
  instanceType?: string(name='InstanceType'),
  engineVersion?: string(name='EngineVersion'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  autoUseCoupon?: string(name='AutoUseCoupon'),
  autoRenew?: string(name='AutoRenew'),
  autoRenewPeriod?: string(name='AutoRenewPeriod'),
  resourceGroupId?: string(name='ResourceGroupId'),
  restoreTime?: string(name='RestoreTime'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  globalInstanceId?: string(name='GlobalInstanceId'),
  globalInstance?: boolean(name='GlobalInstance'),
  secondaryZoneId?: string(name='SecondaryZoneId'),
  port?: string(name='Port'),
  dryRun?: boolean(name='DryRun'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateInstanceResponseBody = {
  vpcId?: string(name='VpcId'),
  QPS?: long(name='QPS'),
  capacity?: long(name='Capacity'),
  connectionDomain?: string(name='ConnectionDomain'),
  chargeType?: string(name='ChargeType'),
  networkType?: string(name='NetworkType'),
  instanceId?: string(name='InstanceId'),
  port?: int32(name='Port'),
  config?: string(name='Config'),
  regionId?: string(name='RegionId'),
  endTime?: string(name='EndTime'),
  vSwitchId?: string(name='VSwitchId'),
  requestId?: string(name='RequestId'),
  nodeType?: string(name='NodeType'),
  connections?: long(name='Connections'),
  bandwidth?: long(name='Bandwidth'),
  instanceName?: string(name='InstanceName'),
  zoneId?: string(name='ZoneId'),
  instanceStatus?: string(name='InstanceStatus'),
  privateIpAddr?: string(name='PrivateIpAddr'),
  userName?: string(name='UserName'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateInstancesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instances?: string(name='Instances'),
  token?: string(name='Token'),
  autoPay?: boolean(name='AutoPay'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  engineVersion?: string(name='EngineVersion'),
  rebuildInstance?: boolean(name='RebuildInstance'),
  autoRenew?: string(name='AutoRenew'),
}

model CreateInstancesResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancesResponseBody(name='body'),
}

async function createInstancesWithOptions(request: CreateInstancesRequest, runtime: Util.RuntimeOptions): CreateInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstances', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancesWithOptions(request, runtime);
}

model CreateTairInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceName?: string(name='InstanceName'),
  password?: string(name='Password'),
  instanceClass?: string(name='InstanceClass'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  period?: int32(name='Period'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  srcDBInstanceId?: string(name='SrcDBInstanceId'),
  backupId?: string(name='BackupId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  autoUseCoupon?: string(name='AutoUseCoupon'),
  autoRenew?: string(name='AutoRenew'),
  autoRenewPeriod?: string(name='AutoRenewPeriod'),
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken'),
  storageType?: string(name='StorageType'),
  storage?: int32(name='Storage'),
  shardType?: string(name='ShardType'),
  shardCount?: int32(name='ShardCount'),
  engineVersion?: string(name='EngineVersion'),
  instanceType?: string(name='InstanceType'),
}

model CreateTairInstanceResponseBody = {
  QPS?: long(name='QPS'),
  connectionDomain?: string(name='ConnectionDomain'),
  chargeType?: string(name='ChargeType'),
  instanceId?: string(name='InstanceId'),
  port?: int32(name='Port'),
  config?: string(name='Config'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  bandwidth?: long(name='Bandwidth'),
  connections?: long(name='Connections'),
  instanceName?: string(name='InstanceName'),
  zoneId?: string(name='ZoneId'),
  instanceStatus?: string(name='InstanceStatus'),
  taskId?: string(name='TaskId'),
}

model CreateTairInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTairInstanceResponseBody(name='body'),
}

async function createTairInstanceWithOptions(request: CreateTairInstanceRequest, runtime: Util.RuntimeOptions): CreateTairInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTairInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTairInstance(request: CreateTairInstanceRequest): CreateTairInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTairInstanceWithOptions(request, runtime);
}

model CreateUserClusterHostRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  clusterId?: string(name='ClusterId'),
  chargeType?: string(name='ChargeType'),
  hostClass?: string(name='HostClass'),
  orderNum?: int32(name='OrderNum'),
  orderPeriod?: int32(name='OrderPeriod'),
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  agentId?: string(name='AgentId'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
}

model CreateUserClusterHostResponseBody = {
  requestId?: string(name='RequestId'),
  hostId?: string(name='HostId'),
  clusterId?: string(name='ClusterId'),
}

model CreateUserClusterHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserClusterHostResponseBody(name='body'),
}

async function createUserClusterHostWithOptions(request: CreateUserClusterHostRequest, runtime: Util.RuntimeOptions): CreateUserClusterHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUserClusterHost', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUserClusterHost(request: CreateUserClusterHostRequest): CreateUserClusterHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserClusterHostWithOptions(request, runtime);
}

model DeleteAccountRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  globalInstanceId?: string(name='GlobalInstanceId'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteShardingNodeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
}

model DeleteShardingNodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShardingNodeResponseBody(name='body'),
}

async function deleteShardingNodeWithOptions(request: DeleteShardingNodeRequest, runtime: Util.RuntimeOptions): DeleteShardingNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteShardingNode', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteShardingNode(request: DeleteShardingNodeRequest): DeleteShardingNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShardingNodeWithOptions(request, runtime);
}

model DeleteUserClusterHostRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
}

model DeleteUserClusterHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserClusterHostResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserClusterHostResponseBody(name='body'),
}

async function deleteUserClusterHostWithOptions(request: DeleteUserClusterHostRequest, runtime: Util.RuntimeOptions): DeleteUserClusterHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserClusterHost', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserClusterHost(request: DeleteUserClusterHostRequest): DeleteUserClusterHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserClusterHostWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  accounts?: {
    account?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      instanceId?: string(name='InstanceId'),
      accountType?: string(name='AccountType'),
      accountStatus?: string(name='AccountStatus'),
      accountName?: string(name='AccountName'),
      databasePrivileges?: {
        databasePrivilege?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege'),
        }
      ](name='DatabasePrivilege')
      }(name='DatabasePrivileges'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeActiveOperationTaskRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  region?: string(name='Region'),
  taskType?: string(name='TaskType'),
  isHistory?: int32(name='IsHistory'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeActiveOperationTaskResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: [ 
    {
      status?: int32(name='Status'),
      deadline?: string(name='Deadline'),
      prepareInterval?: string(name='PrepareInterval'),
      taskType?: string(name='TaskType'),
      startTime?: string(name='StartTime'),
      modifiedTime?: string(name='ModifiedTime'),
      insName?: string(name='InsName'),
      dbType?: string(name='DbType'),
      region?: string(name='Region'),
      createdTime?: string(name='CreatedTime'),
      id?: int32(name='Id'),
      switchTime?: string(name='SwitchTime'),
    }
  ](name='Items'),
}

model DescribeActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskResponseBody(name='body'),
}

async function describeActiveOperationTaskWithOptions(request: DescribeActiveOperationTaskRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActiveOperationTask', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActiveOperationTask(request: DescribeActiveOperationTaskRequest): DescribeActiveOperationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTaskWithOptions(request, runtime);
}

model DescribeAuditRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  accountName?: string(name='AccountName'),
  databaseName?: string(name='DatabaseName'),
  queryKeywords?: string(name='QueryKeywords'),
  hostAddress?: string(name='HostAddress'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeAuditRecordsResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  instanceName?: string(name='InstanceName'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  items?: {
    SQL?: [ 
    {
      hostAddress?: string(name='HostAddress'),
      SQLText?: string(name='SQLText'),
      databaseName?: string(name='DatabaseName'),
      SQLType?: string(name='SQLType'),
      executeTime?: string(name='ExecuteTime'),
      totalExecutionTimes?: string(name='TotalExecutionTimes'),
      nodeId?: string(name='NodeId'),
      accountName?: string(name='AccountName'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='SQL')
  }(name='Items'),
}

model DescribeAuditRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAuditRecordsResponseBody(name='body'),
}

async function describeAuditRecordsWithOptions(request: DescribeAuditRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAuditRecords', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAuditRecords(request: DescribeAuditRecordsRequest): DescribeAuditRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditRecordsWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  orderType?: string(name='OrderType'),
  engine?: string(name='Engine'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: string(name='InstanceId'),
  acceptLanguage?: string(name='AcceptLanguage'),
  productType?: string(name='ProductType'),
}

model DescribeAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: {
    availableZone?: [ 
    {
      zoneId?: string(name='ZoneId'),
      zoneName?: string(name='ZoneName'),
      regionId?: string(name='RegionId'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine'),
          supportedEditionTypes?: {
            supportedEditionType?: [ 
            {
              editionType?: string(name='EditionType'),
              supportedSeriesTypes?: {
                supportedSeriesType?: [ 
                {
                  seriesType?: string(name='SeriesType'),
                  supportedEngineVersions?: {
                    supportedEngineVersion?: [ 
                    {
                      version?: string(name='Version'),
                      supportedArchitectureTypes?: {
                        supportedArchitectureType?: [ 
                        {
                          architecture?: string(name='Architecture'),
                          supportedShardNumbers?: {
                            supportedShardNumber?: [ 
                            {
                              shardNumber?: string(name='ShardNumber'),
                              supportedNodeTypes?: {
                                supportedNodeType?: [ 
                                {
                                  supportedNodeType?: string(name='SupportedNodeType'),
                                  availableResources?: {
                                    availableResource?: [ 
                                    {
                                      instanceClassRemark?: string(name='InstanceClassRemark'),
                                      instanceClass?: string(name='InstanceClass'),
                                    }
                                  ](name='AvailableResource')
                                  }(name='AvailableResources'),
                                }
                              ](name='SupportedNodeType')
                              }(name='SupportedNodeTypes'),
                            }
                          ](name='SupportedShardNumber')
                          }(name='SupportedShardNumbers'),
                        }
                      ](name='SupportedArchitectureType')
                      }(name='SupportedArchitectureTypes'),
                    }
                  ](name='SupportedEngineVersion')
                  }(name='SupportedEngineVersions'),
                }
              ](name='SupportedSeriesType')
              }(name='SupportedSeriesTypes'),
            }
          ](name='SupportedEditionType')
          }(name='SupportedEditionTypes'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
  requestId?: string(name='RequestId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  enableBackupLog?: int32(name='EnableBackupLog'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  backupId?: int32(name='BackupId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  needAof?: string(name='NeedAof'),
}

model DescribeBackupsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  backups?: {
    backup?: [ 
    {
      backupStatus?: string(name='BackupStatus'),
      backupStartTime?: string(name='BackupStartTime'),
      backupType?: string(name='BackupType'),
      backupDownloadURL?: string(name='BackupDownloadURL'),
      nodeInstanceId?: string(name='NodeInstanceId'),
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: int32(name='BackupId'),
      backupDBNames?: string(name='BackupDBNames'),
      engineVersion?: string(name='EngineVersion'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL'),
      backupSize?: long(name='BackupSize'),
      backupMode?: string(name='BackupMode'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Backup')
  }(name='Backups'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeBackupTasksRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  backupJobId?: string(name='BackupJobId'),
  jobMode?: string(name='JobMode'),
}

model DescribeBackupTasksResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  backupJobs?: [ 
    {
      startTime?: string(name='StartTime'),
      process?: string(name='Process'),
      jobMode?: string(name='JobMode'),
      backupJobID?: int32(name='BackupJobID'),
      backupProgressStatus?: string(name='BackupProgressStatus'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='BackupJobs'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: Util.RuntimeOptions): DescribeBackupTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupTasks', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTasksWithOptions(request, runtime);
}

model DescribeCacheAnalysisReportRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  date?: string(name='Date'),
  analysisType?: string(name='AnalysisType'),
  pageSize?: int32(name='PageSize'),
  pageNumbers?: int32(name='PageNumbers'),
  nodeId?: string(name='NodeId'),
}

model DescribeCacheAnalysisReportResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  bigKeys?: [  map[string]any ](name='BigKeys'),
  hotKeys?: [  map[string]any ](name='HotKeys'),
}

model DescribeCacheAnalysisReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisReportResponseBody(name='body'),
}

async function describeCacheAnalysisReportWithOptions(request: DescribeCacheAnalysisReportRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCacheAnalysisReport', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCacheAnalysisReport(request: DescribeCacheAnalysisReportRequest): DescribeCacheAnalysisReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisReportWithOptions(request, runtime);
}

model DescribeCacheAnalysisReportListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  days?: int32(name='Days'),
  pageSize?: int32(name='PageSize'),
  pageNumbers?: int32(name='PageNumbers'),
  nodeId?: string(name='NodeId'),
}

model DescribeCacheAnalysisReportListResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  dailyTasks?: {
    dailyTask?: [ 
    {
      date?: string(name='Date'),
      tasks?: {
        task?: [ 
        {
          status?: string(name='Status'),
          startTime?: string(name='StartTime'),
          taskId?: string(name='TaskId'),
          nodeId?: string(name='NodeId'),
        }
      ](name='Task')
      }(name='Tasks'),
    }
  ](name='DailyTask')
  }(name='DailyTasks'),
}

model DescribeCacheAnalysisReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCacheAnalysisReportListResponseBody(name='body'),
}

async function describeCacheAnalysisReportListWithOptions(request: DescribeCacheAnalysisReportListRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCacheAnalysisReportList', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCacheAnalysisReportList(request: DescribeCacheAnalysisReportListRequest): DescribeCacheAnalysisReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisReportListWithOptions(request, runtime);
}

model DescribeClusterMemberInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeClusterMemberInfoResponseBody = {
  requestId?: string(name='RequestId'),
  clusterChildren?: [ 
    {
      capacity?: long(name='Capacity'),
      userId?: string(name='UserId'),
      diskSizeMB?: int32(name='DiskSizeMB'),
      bandWidth?: long(name='BandWidth'),
      currentBandWidth?: long(name='CurrentBandWidth'),
      classCode?: string(name='ClassCode'),
      bizType?: string(name='BizType'),
      service?: string(name='Service'),
      binlogRetentionDays?: int32(name='BinlogRetentionDays'),
      connections?: long(name='Connections'),
      resourceGroupName?: string(name='ResourceGroupName'),
      serviceVersion?: string(name='ServiceVersion'),
      replicaSize?: int32(name='ReplicaSize'),
      name?: string(name='Name'),
      id?: long(name='Id'),
    }
  ](name='ClusterChildren'),
}

model DescribeClusterMemberInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterMemberInfoResponseBody(name='body'),
}

async function describeClusterMemberInfoWithOptions(request: DescribeClusterMemberInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterMemberInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClusterMemberInfo', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClusterMemberInfo(request: DescribeClusterMemberInfoRequest): DescribeClusterMemberInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterMemberInfoWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  instanceNetworkType?: string(name='InstanceNetworkType'),
  requestId?: string(name='RequestId'),
  netInfoItems?: {
    instanceNetInfo?: [ 
    {
      directConnection?: int32(name='DirectConnection'),
      vSwitchId?: string(name='VSwitchId'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      upgradeable?: string(name='Upgradeable'),
      expiredTime?: string(name='ExpiredTime'),
      connectionString?: string(name='ConnectionString'),
      IPType?: string(name='IPType'),
      VPCInstanceId?: string(name='VPCInstanceId'),
      port?: string(name='Port'),
      VPCId?: string(name='VPCId'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='InstanceNetInfo')
  }(name='NetInfoItems'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceNetInfo', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDedicatedClusterInstanceListRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: int32(name='InstanceStatus'),
  instanceNetType?: string(name='InstanceNetType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  clusterId?: string(name='ClusterId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDedicatedClusterInstanceListResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  instances?: [ 
    {
      vpcId?: string(name='VpcId'),
      characterType?: int32(name='CharacterType'),
      vswitchId?: string(name='VswitchId'),
      instanceClass?: string(name='InstanceClass'),
      maintainStartTime?: string(name='MaintainStartTime'),
      createTime?: string(name='CreateTime'),
      connectionDomain?: string(name='ConnectionDomain'),
      maintainEndTime?: string(name='MaintainEndTime'),
      storageType?: string(name='StorageType'),
      instanceId?: string(name='InstanceId'),
      bandWidth?: long(name='BandWidth'),
      currentBandWidth?: long(name='CurrentBandWidth'),
      engineVersion?: string(name='EngineVersion'),
      regionId?: string(name='RegionId'),
      instanceName?: string(name='InstanceName'),
      zoneId?: string(name='ZoneId'),
      clusterName?: string(name='ClusterName'),
      instanceStatus?: string(name='InstanceStatus'),
      engine?: string(name='Engine'),
      shardCount?: int32(name='ShardCount'),
      customId?: string(name='CustomId'),
      proxyCount?: int32(name='ProxyCount'),
      clusterId?: string(name='ClusterId'),
      instanceNodeList?: [ 
        {
          nodeIp?: string(name='NodeIp'),
          dedicatedHostName?: string(name='DedicatedHostName'),
          nodeType?: string(name='NodeType'),
          zoneId?: string(name='ZoneId'),
          instanceId?: string(name='InstanceId'),
          port?: int32(name='Port'),
          role?: string(name='Role'),
          nodeId?: int32(name='NodeId'),
        }
      ](name='InstanceNodeList'),
    }
  ](name='Instances'),
}

model DescribeDedicatedClusterInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedClusterInstanceListResponseBody(name='body'),
}

async function describeDedicatedClusterInstanceListWithOptions(request: DescribeDedicatedClusterInstanceListRequest, runtime: Util.RuntimeOptions): DescribeDedicatedClusterInstanceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedClusterInstanceList', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): DescribeDedicatedClusterInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedClusterInstanceListWithOptions(request, runtime);
}

model DescribeEngineVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeEngineVersionResponseBody = {
  isLatestVersion?: boolean(name='IsLatestVersion'),
  requestId?: string(name='RequestId'),
  enableUpgradeMajorVersion?: boolean(name='EnableUpgradeMajorVersion'),
  enableUpgradeMinorVersion?: boolean(name='EnableUpgradeMinorVersion'),
  engine?: string(name='Engine'),
  majorVersion?: string(name='MajorVersion'),
  minorVersion?: string(name='MinorVersion'),
}

model DescribeEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEngineVersionResponseBody(name='body'),
}

async function describeEngineVersionWithOptions(request: DescribeEngineVersionRequest, runtime: Util.RuntimeOptions): DescribeEngineVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEngineVersion', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEngineVersion(request: DescribeEngineVersionRequest): DescribeEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEngineVersionWithOptions(request, runtime);
}

model DescribeGlobalDistributeCacheRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  globalInstanceId?: string(name='GlobalInstanceId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  subInstanceId?: string(name='SubInstanceId'),
}

model DescribeGlobalDistributeCacheResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  globalDistributeCaches?: [ 
    {
      status?: string(name='Status'),
      globalInstanceId?: string(name='GlobalInstanceId'),
      subInstances?: [ 
        {
          instanceStatus?: string(name='InstanceStatus'),
          instanceID?: string(name='InstanceID'),
          instanceClass?: string(name='InstanceClass'),
          globalInstanceId?: string(name='GlobalInstanceId'),
          regionId?: string(name='RegionId'),
        }
      ](name='SubInstances'),
    }
  ](name='GlobalDistributeCaches'),
}

model DescribeGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalDistributeCacheResponseBody(name='body'),
}

async function describeGlobalDistributeCacheWithOptions(request: DescribeGlobalDistributeCacheRequest, runtime: Util.RuntimeOptions): DescribeGlobalDistributeCacheResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGlobalDistributeCache', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGlobalDistributeCache(request: DescribeGlobalDistributeCacheRequest): DescribeGlobalDistributeCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalDistributeCacheWithOptions(request, runtime);
}

model DescribeHistoryMonitorValuesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  intervalForHistory?: string(name='IntervalForHistory'),
  monitorKeys?: string(name='MonitorKeys'),
  nodeId?: string(name='NodeId'),
}

model DescribeHistoryMonitorValuesResponseBody = {
  monitorHistory?: string(name='MonitorHistory'),
  requestId?: string(name='RequestId'),
}

model DescribeHistoryMonitorValuesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHistoryMonitorValuesResponseBody(name='body'),
}

async function describeHistoryMonitorValuesWithOptions(request: DescribeHistoryMonitorValuesRequest, runtime: Util.RuntimeOptions): DescribeHistoryMonitorValuesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHistoryMonitorValues', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHistoryMonitorValues(request: DescribeHistoryMonitorValuesRequest): DescribeHistoryMonitorValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryMonitorValuesWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  instances?: {
    DBInstanceAttribute?: [ 
    {
      vpcId?: string(name='VpcId'),
      privateIp?: string(name='PrivateIp'),
      capacity?: long(name='Capacity'),
      createTime?: string(name='CreateTime'),
      connectionDomain?: string(name='ConnectionDomain'),
      isRds?: boolean(name='IsRds'),
      chargeType?: string(name='ChargeType'),
      vpcAuthMode?: string(name='VpcAuthMode'),
      architectureType?: string(name='ArchitectureType'),
      availabilityValue?: string(name='AvailabilityValue'),
      networkType?: string(name='NetworkType'),
      port?: long(name='Port'),
      secondaryZoneId?: string(name='SecondaryZoneId'),
      packageType?: string(name='PackageType'),
      engineVersion?: string(name='EngineVersion'),
      config?: string(name='Config'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      bandwidth?: long(name='Bandwidth'),
      instanceName?: string(name='InstanceName'),
      securityIPList?: string(name='SecurityIPList'),
      shardCount?: int32(name='ShardCount'),
      globalInstanceId?: string(name='GlobalInstanceId'),
      QPS?: long(name='QPS'),
      auditLogRetention?: string(name='AuditLogRetention'),
      zoneType?: string(name='ZoneType'),
      maintainStartTime?: string(name='MaintainStartTime'),
      instanceClass?: string(name='InstanceClass'),
      maintainEndTime?: string(name='MaintainEndTime'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      hasRenewChangeOrder?: string(name='HasRenewChangeOrder'),
      instanceReleaseProtection?: boolean(name='InstanceReleaseProtection'),
      replicationMode?: string(name='ReplicationMode'),
      regionId?: string(name='RegionId'),
      endTime?: string(name='EndTime'),
      vSwitchId?: string(name='VSwitchId'),
      replicaId?: string(name='ReplicaId'),
      nodeType?: string(name='NodeType'),
      connections?: long(name='Connections'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      instanceStatus?: string(name='InstanceStatus'),
      engine?: string(name='Engine'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='DBInstanceAttribute')
  }(name='Instances'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: {
    item?: [ 
    {
      duration?: int32(name='Duration'),
      DBInstanceId?: string(name='DBInstanceId'),
      autoRenew?: string(name='AutoRenew'),
      regionId?: string(name='RegionId'),
    }
  ](name='Item')
  }(name='Items'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAutoRenewalAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model DescribeInstanceConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceConfigResponseBody(name='body'),
}

async function describeInstanceConfigWithOptions(request: DescribeInstanceConfigRequest, runtime: Util.RuntimeOptions): DescribeInstanceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceConfig', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceConfig(request: DescribeInstanceConfigRequest): DescribeInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceConfigWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
  instanceStatus?: string(name='InstanceStatus'),
  chargeType?: string(name='ChargeType'),
  networkType?: string(name='NetworkType'),
  engineVersion?: string(name='EngineVersion'),
  instanceClass?: string(name='InstanceClass'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceType?: string(name='InstanceType'),
  searchKey?: string(name='SearchKey'),
  architectureType?: string(name='ArchitectureType'),
  expired?: string(name='Expired'),
  zoneId?: string(name='ZoneId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  globalInstance?: boolean(name='GlobalInstance'),
  editionType?: string(name='EditionType'),
  privateIp?: string(name='PrivateIp'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  instances?: {
    KVStoreInstance?: [ 
    {
      vpcId?: string(name='VpcId'),
      privateIp?: string(name='PrivateIp'),
      capacity?: long(name='Capacity'),
      replacateId?: string(name='ReplacateId'),
      createTime?: string(name='CreateTime'),
      connectionDomain?: string(name='ConnectionDomain'),
      isRds?: boolean(name='IsRds'),
      chargeType?: string(name='ChargeType'),
      architectureType?: string(name='ArchitectureType'),
      networkType?: string(name='NetworkType'),
      connectionMode?: string(name='ConnectionMode'),
      port?: long(name='Port'),
      engineVersion?: string(name='EngineVersion'),
      packageType?: string(name='PackageType'),
      config?: string(name='Config'),
      bandwidth?: long(name='Bandwidth'),
      instanceName?: string(name='InstanceName'),
      shardCount?: int32(name='ShardCount'),
      userName?: string(name='UserName'),
      QPS?: long(name='QPS'),
      instanceClass?: string(name='InstanceClass'),
      destroyTime?: string(name='DestroyTime'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      hasRenewChangeOrder?: boolean(name='HasRenewChangeOrder'),
      regionId?: string(name='RegionId'),
      searchKey?: string(name='SearchKey'),
      endTime?: string(name='EndTime'),
      vSwitchId?: string(name='VSwitchId'),
      nodeType?: string(name='NodeType'),
      connections?: long(name='Connections'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      instanceStatus?: string(name='InstanceStatus'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='KVStoreInstance')
  }(name='Instances'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstanceSSLRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceSSLResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  SSLEnabled?: string(name='SSLEnabled'),
  SSLExpiredTime?: string(name='SSLExpiredTime'),
  certCommonName?: string(name='CertCommonName'),
}

model DescribeInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSSLResponseBody(name='body'),
}

async function describeInstanceSSLWithOptions(request: DescribeInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSSL', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSSL(request: DescribeInstanceSSLRequest): DescribeInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSSLWithOptions(request, runtime);
}

model DescribeIntranetAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeIntranetAttributeResponseBody = {
  bandwidthExpireTime?: string(name='BandwidthExpireTime'),
  requestId?: string(name='RequestId'),
  expireTime?: string(name='ExpireTime'),
  intranetBandwidth?: int32(name='IntranetBandwidth'),
}

model DescribeIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIntranetAttributeResponseBody(name='body'),
}

async function describeIntranetAttributeWithOptions(request: DescribeIntranetAttributeRequest, runtime: Util.RuntimeOptions): DescribeIntranetAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIntranetAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIntranetAttribute(request: DescribeIntranetAttributeRequest): DescribeIntranetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIntranetAttributeWithOptions(request, runtime);
}

model DescribeLogicInstanceTopologyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeLogicInstanceTopologyResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  redisProxyList?: {
    nodeInfo?: [ 
    {
      capacity?: string(name='Capacity'),
      connection?: string(name='Connection'),
      nodeType?: string(name='NodeType'),
      bandwidth?: string(name='Bandwidth'),
      nodeId?: string(name='NodeId'),
    }
  ](name='NodeInfo')
  }(name='RedisProxyList'),
  redisShardList?: {
    nodeInfo?: [ 
    {
      capacity?: string(name='Capacity'),
      connection?: string(name='Connection'),
      nodeType?: string(name='NodeType'),
      bandwidth?: string(name='Bandwidth'),
      nodeId?: string(name='NodeId'),
    }
  ](name='NodeInfo')
  }(name='RedisShardList'),
}

model DescribeLogicInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogicInstanceTopologyResponseBody(name='body'),
}

async function describeLogicInstanceTopologyWithOptions(request: DescribeLogicInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeLogicInstanceTopologyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogicInstanceTopology', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogicInstanceTopology(request: DescribeLogicInstanceTopologyRequest): DescribeLogicInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogicInstanceTopologyWithOptions(request, runtime);
}

model DescribeMonitorItemsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeMonitorItemsResponseBody = {
  requestId?: string(name='RequestId'),
  monitorItems?: {
    KVStoreMonitorItem?: [ 
    {
      unit?: string(name='Unit'),
      monitorKey?: string(name='MonitorKey'),
    }
  ](name='KVStoreMonitorItem')
  }(name='MonitorItems'),
}

model DescribeMonitorItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorItemsResponseBody(name='body'),
}

async function describeMonitorItemsWithOptions(request: DescribeMonitorItemsRequest, runtime: Util.RuntimeOptions): DescribeMonitorItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMonitorItems', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMonitorItems(request: DescribeMonitorItemsRequest): DescribeMonitorItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMonitorItemsWithOptions(request, runtime);
}

model DescribeParametersRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  nodeId?: string(name='NodeId'),
}

model DescribeParametersResponseBody = {
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  configParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      modifiableStatus?: boolean(name='ModifiableStatus'),
    }
  ](name='Parameter')
  }(name='ConfigParameters'),
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceRestart?: string(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
      modifiableStatus?: string(name='ModifiableStatus'),
    }
  ](name='Parameter')
  }(name='RunningParameters'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameters', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  characterType?: string(name='CharacterType'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeParameterTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  parameterCount?: string(name='ParameterCount'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode'),
      parameterName?: string(name='ParameterName'),
      parameterValue?: string(name='ParameterValue'),
      forceModify?: boolean(name='ForceModify'),
      forceRestart?: boolean(name='ForceRestart'),
      parameterDescription?: string(name='ParameterDescription'),
    }
  ](name='TemplateRecord')
  }(name='Parameters'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterTemplates', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribePriceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  capacity?: long(name='Capacity'),
  instanceClass?: string(name='InstanceClass'),
  orderType?: string(name='OrderType'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  nodeType?: string(name='NodeType'),
  period?: long(name='Period'),
  quantity?: long(name='Quantity'),
  instanceId?: string(name='InstanceId'),
  instances?: string(name='Instances'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  forceUpgrade?: boolean(name='ForceUpgrade'),
  orderParamOut?: string(name='OrderParamOut'),
}

model DescribePriceResponseBody = {
  orderParams?: string(name='OrderParams'),
  requestId?: string(name='RequestId'),
  order?: {
    originalAmount?: string(name='OriginalAmount'),
    handlingFeeAmount?: string(name='HandlingFeeAmount'),
    currency?: string(name='Currency'),
    discountAmount?: string(name='DiscountAmount'),
    tradeAmount?: string(name='TradeAmount'),
    coupons?: {
      coupon?: [ 
      {
        isSelected?: string(name='IsSelected'),
        couponNo?: string(name='CouponNo'),
        name?: string(name='Name'),
        description?: string(name='Description'),
      }
    ](name='Coupon')
    }(name='Coupons'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds'),
  }(name='Order'),
  rules?: {
    rule?: [ 
    {
      ruleDescId?: long(name='RuleDescId'),
      title?: string(name='Title'),
      name?: string(name='Name'),
    }
  ](name='Rule')
  }(name='Rules'),
  subOrders?: {
    subOrder?: [ 
    {
      originalAmount?: string(name='OriginalAmount'),
      instanceId?: string(name='InstanceId'),
      discountAmount?: string(name='DiscountAmount'),
      tradeAmount?: string(name='TradeAmount'),
      ruleIds?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIds'),
    }
  ](name='SubOrder')
  }(name='SubOrders'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regionIds?: {
    KVStoreRegion?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
      zoneIds?: string(name='ZoneIds'),
      zoneIdList?: {
        zoneId?: [ string ](name='ZoneId')
      }(name='ZoneIdList'),
    }
  ](name='KVStoreRegion')
  }(name='RegionIds'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRoleZoneInfoRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  queryType?: int32(name='QueryType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRoleZoneInfoResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  node?: {
    nodeInfo?: [ 
    {
      defaultBandWidth?: long(name='DefaultBandWidth'),
      currentMinorVersion?: string(name='CurrentMinorVersion'),
      currentBandWidth?: long(name='CurrentBandWidth'),
      insType?: int32(name='InsType'),
      isLatestVersion?: int32(name='IsLatestVersion'),
      insName?: string(name='InsName'),
      nodeType?: string(name='NodeType'),
      zoneId?: string(name='ZoneId'),
      isOpenBandWidthService?: boolean(name='IsOpenBandWidthService'),
      custinsId?: string(name='CustinsId'),
      role?: string(name='Role'),
      nodeId?: string(name='NodeId'),
    }
  ](name='NodeInfo')
  }(name='Node'),
}

model DescribeRoleZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoleZoneInfoResponseBody(name='body'),
}

async function describeRoleZoneInfoWithOptions(request: DescribeRoleZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeRoleZoneInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoleZoneInfo', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): DescribeRoleZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoleZoneInfoWithOptions(request, runtime);
}

model DescribeRunningLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  roleType?: string(name='RoleType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroupId?: string(name='ResourceGroupId'),
  characterType?: string(name='CharacterType'),
  queryKeyword?: string(name='QueryKeyword'),
  orderType?: string(name='OrderType'),
}

model DescribeRunningLogRecordsResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  engine?: string(name='Engine'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logRecords?: [ 
    {
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      content?: string(name='Content'),
      nodeId?: string(name='NodeId'),
    }
  ](name='LogRecords')
  }(name='Items'),
}

model DescribeRunningLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRunningLogRecordsResponseBody(name='body'),
}

async function describeRunningLogRecordsWithOptions(request: DescribeRunningLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeRunningLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRunningLogRecords', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRunningLogRecords(request: DescribeRunningLogRecordsRequest): DescribeRunningLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRunningLogRecordsWithOptions(request, runtime);
}

model DescribeSecurityGroupConfigurationRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
      regionId?: string(name='RegionId'),
      netType?: string(name='NetType'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

async function describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupConfiguration', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupConfigurationWithOptions(request, runtime);
}

model DescribeSecurityIpsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model DescribeSecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
  securityIpGroups?: {
    securityIpGroup?: [ 
    {
      securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute'),
      securityIpList?: string(name='SecurityIpList'),
      securityIpGroupName?: string(name='SecurityIpGroupName'),
    }
  ](name='SecurityIpGroup')
  }(name='SecurityIpGroups'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityIps', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpsWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  DBName?: string(name='DBName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  slowLogRecordType?: string(name='SlowLogRecordType'),
  queryKeyword?: string(name='QueryKeyword'),
  orderType?: string(name='OrderType'),
  orderBy?: string(name='OrderBy'),
}

model DescribeSlowLogRecordsResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  pageRecordCount?: int32(name='PageRecordCount'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  engine?: string(name='Engine'),
  pageNumber?: int32(name='PageNumber'),
  items?: {
    logRecords?: [ 
    {
      account?: string(name='Account'),
      elapsedTime?: long(name='ElapsedTime'),
      command?: string(name='Command'),
      DBName?: string(name='DBName'),
      executeTime?: string(name='ExecuteTime'),
      dataBaseName?: string(name='DataBaseName'),
      nodeId?: string(name='NodeId'),
      accountName?: string(name='AccountName'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='LogRecords')
  }(name='Items'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeTasksRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  status?: string(name='Status'),
}

model DescribeTasksResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  items?: [ 
    {
      status?: string(name='Status'),
      finishTime?: string(name='FinishTime'),
      stepsInfo?: string(name='StepsInfo'),
      progress?: float(name='Progress'),
      beginTime?: string(name='BeginTime'),
      remain?: int32(name='Remain'),
      currentStepName?: string(name='CurrentStepName'),
      stepProgressInfo?: string(name='StepProgressInfo'),
      taskId?: string(name='TaskId'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='Items'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTasks', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeUserClusterHostRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  pageNumber?: int32(name='PageNumber'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  clusterId?: string(name='ClusterId'),
}

model DescribeUserClusterHostResponseBody = {
  itemNumbers?: int32(name='ItemNumbers'),
  totalRecords?: int32(name='TotalRecords'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  maxRecordsPerPage?: string(name='MaxRecordsPerPage'),
  hostItems?: [ 
    {
      hostIP?: string(name='HostIP'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      chargeType?: string(name='ChargeType'),
      hostStatus?: string(name='HostStatus'),
      hostName?: string(name='HostName'),
      hostStorage?: string(name='HostStorage'),
      instanceNumber?: string(name='InstanceNumber'),
      hostClass?: string(name='HostClass'),
      hostId?: string(name='HostId'),
      regionId?: string(name='RegionId'),
      allocationStatus?: string(name='AllocationStatus'),
      zoneId?: string(name='ZoneId'),
      hostCpu?: string(name='HostCpu'),
      engine?: string(name='Engine'),
      hostMem?: string(name='HostMem'),
      id?: int32(name='Id'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='HostItems'),
}

model DescribeUserClusterHostResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserClusterHostResponseBody(name='body'),
}

async function describeUserClusterHostWithOptions(request: DescribeUserClusterHostRequest, runtime: Util.RuntimeOptions): DescribeUserClusterHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserClusterHost', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserClusterHost(request: DescribeUserClusterHostRequest): DescribeUserClusterHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserClusterHostWithOptions(request, runtime);
}

model DescribeUserClusterHostInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  pageNumber?: int32(name='PageNumber'),
  zoneId?: string(name='ZoneId'),
  engine?: string(name='Engine'),
  clusterId?: string(name='ClusterId'),
  instanceIds?: string(name='InstanceIds'),
  instanceStatus?: string(name='InstanceStatus'),
}

model DescribeUserClusterHostInstanceResponseBody = {
  itemNumbers?: int32(name='ItemNumbers'),
  totalRecords?: int32(name='TotalRecords'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  maxRecordsPerPage?: int32(name='MaxRecordsPerPage'),
  instancesItems?: {
    instanceInfo?: [ 
    {
      instanceClass?: string(name='InstanceClass'),
      createTime?: string(name='CreateTime'),
      zoneId?: string(name='ZoneId'),
      instanceStatus?: string(name='InstanceStatus'),
      engine?: string(name='Engine'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      engineVersion?: string(name='EngineVersion'),
      regionId?: string(name='RegionId'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='InstanceInfo')
  }(name='InstancesItems'),
}

model DescribeUserClusterHostInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserClusterHostInstanceResponseBody(name='body'),
}

async function describeUserClusterHostInstanceWithOptions(request: DescribeUserClusterHostInstanceRequest, runtime: Util.RuntimeOptions): DescribeUserClusterHostInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserClusterHostInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserClusterHostInstance(request: DescribeUserClusterHostInstanceRequest): DescribeUserClusterHostInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserClusterHostInstanceWithOptions(request, runtime);
}

model DescribeZonesRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    KVStoreZone?: [ 
    {
      isRds?: boolean(name='IsRds'),
      zoneId?: string(name='ZoneId'),
      disabled?: boolean(name='Disabled'),
      switchNetwork?: boolean(name='SwitchNetwork'),
      zoneName?: string(name='ZoneName'),
      regionId?: string(name='RegionId'),
    }
  ](name='KVStoreZone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model EnableAdditionalBandwidthRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  couponNo?: string(name='CouponNo'),
  autoPay?: boolean(name='AutoPay'),
  nodeId?: string(name='NodeId'),
  bandwidth?: string(name='Bandwidth'),
  orderTimeLength?: string(name='OrderTimeLength'),
  sourceBiz?: string(name='SourceBiz'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
}

model EnableAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model EnableAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: EnableAdditionalBandwidthResponseBody(name='body'),
}

async function enableAdditionalBandwidthWithOptions(request: EnableAdditionalBandwidthRequest, runtime: Util.RuntimeOptions): EnableAdditionalBandwidthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableAdditionalBandwidth', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableAdditionalBandwidth(request: EnableAdditionalBandwidthRequest): EnableAdditionalBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAdditionalBandwidthWithOptions(request, runtime);
}

model FlushExpireKeysRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  effectiveTime?: string(name='EffectiveTime'),
}

model FlushExpireKeysResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model FlushExpireKeysResponse = {
  headers: map[string]string(name='headers'),
  body: FlushExpireKeysResponseBody(name='body'),
}

async function flushExpireKeysWithOptions(request: FlushExpireKeysRequest, runtime: Util.RuntimeOptions): FlushExpireKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FlushExpireKeys', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function flushExpireKeys(request: FlushExpireKeysRequest): FlushExpireKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return flushExpireKeysWithOptions(request, runtime);
}

model FlushInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model FlushInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model FlushInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: FlushInstanceResponseBody(name='body'),
}

async function flushInstanceWithOptions(request: FlushInstanceRequest, runtime: Util.RuntimeOptions): FlushInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FlushInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function flushInstance(request: FlushInstanceRequest): FlushInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return flushInstanceWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  accountPrivilege?: string(name='AccountPrivilege'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantAccountPrivilege', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model InitializeKvstorePermissionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model InitializeKvstorePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeKvstorePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeKvstorePermissionResponseBody(name='body'),
}

async function initializeKvstorePermissionWithOptions(request: InitializeKvstorePermissionRequest, runtime: Util.RuntimeOptions): InitializeKvstorePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitializeKvstorePermission', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initializeKvstorePermission(request: InitializeKvstorePermissionRequest): InitializeKvstorePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeKvstorePermissionWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MigrateToOtherZoneRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  zoneId?: string(name='ZoneId'),
  vSwitchId?: string(name='VSwitchId'),
  effectiveTime?: string(name='EffectiveTime'),
  secondaryZoneId?: string(name='SecondaryZoneId'),
}

model MigrateToOtherZoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

async function migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateToOtherZoneResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateToOtherZone', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateToOtherZoneWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPasswordRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  oldAccountPassword?: string(name='OldAccountPassword'),
  newAccountPassword?: string(name='NewAccountPassword'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountPassword', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPasswordWithOptions(request, runtime);
}

model ModifyActiveOperationTaskRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  ids?: string(name='Ids'),
  switchTime?: string(name='SwitchTime'),
}

model ModifyActiveOperationTaskResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId'),
}

model ModifyActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationTaskResponseBody(name='body'),
}

async function modifyActiveOperationTaskWithOptions(request: ModifyActiveOperationTaskRequest, runtime: Util.RuntimeOptions): ModifyActiveOperationTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyActiveOperationTask', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyActiveOperationTask(request: ModifyActiveOperationTaskRequest): ModifyActiveOperationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActiveOperationTaskWithOptions(request, runtime);
}

model ModifyAuditLogConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  retention?: int32(name='Retention'),
  dbAudit?: boolean(name='DbAudit'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

async function modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: Util.RuntimeOptions): ModifyAuditLogConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAuditLogConfig', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogConfigWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  enableBackupLog?: int32(name='EnableBackupLog'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  newConnectionString?: string(name='NewConnectionString'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  port?: string(name='Port'),
  IPType?: string(name='IPType'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceConnectionString', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  newPassword?: string(name='NewPassword'),
  instanceReleaseProtection?: boolean(name='InstanceReleaseProtection'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  duration?: string(name='Duration'),
  autoRenew?: string(name='AutoRenew'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAutoRenewalAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model ModifyInstanceConfigRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  config?: string(name='Config'),
}

model ModifyInstanceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceConfigResponseBody(name='body'),
}

async function modifyInstanceConfigWithOptions(request: ModifyInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyInstanceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceConfig', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceConfig(request: ModifyInstanceConfigRequest): ModifyInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceConfigWithOptions(request, runtime);
}

model ModifyInstanceMaintainTimeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  maintainStartTime?: string(name='MaintainStartTime'),
  maintainEndTime?: string(name='MaintainEndTime'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyInstanceMaintainTimeWithOptions(request: ModifyInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMaintainTime', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyInstanceMajorVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  majorVersion?: string(name='MajorVersion'),
  effectiveTime?: string(name='EffectiveTime'),
}

model ModifyInstanceMajorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMajorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMajorVersionResponseBody(name='body'),
}

async function modifyInstanceMajorVersionWithOptions(request: ModifyInstanceMajorVersionRequest, runtime: Util.RuntimeOptions): ModifyInstanceMajorVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMajorVersion', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMajorVersion(request: ModifyInstanceMajorVersionRequest): ModifyInstanceMajorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMajorVersionWithOptions(request, runtime);
}

model ModifyInstanceMinorVersionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  minorversion?: string(name='Minorversion'),
  effectiveTime?: string(name='EffectiveTime'),
}

model ModifyInstanceMinorVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMinorVersionResponseBody(name='body'),
}

async function modifyInstanceMinorVersionWithOptions(request: ModifyInstanceMinorVersionRequest, runtime: Util.RuntimeOptions): ModifyInstanceMinorVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMinorVersion', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMinorVersion(request: ModifyInstanceMinorVersionRequest): ModifyInstanceMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMinorVersionWithOptions(request, runtime);
}

model ModifyInstanceNetExpireTimeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  connectionString?: string(name='ConnectionString'),
  classicExpiredDays?: int32(name='ClassicExpiredDays'),
}

model ModifyInstanceNetExpireTimeResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  netInfoItems?: {
    netInfoItem?: [ 
    {
      port?: string(name='Port'),
      DBInstanceNetType?: string(name='DBInstanceNetType'),
      connectionString?: string(name='ConnectionString'),
      expiredTime?: string(name='ExpiredTime'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems'),
}

model ModifyInstanceNetExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNetExpireTimeResponseBody(name='body'),
}

async function modifyInstanceNetExpireTimeWithOptions(request: ModifyInstanceNetExpireTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceNetExpireTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceNetExpireTime', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceNetExpireTime(request: ModifyInstanceNetExpireTimeRequest): ModifyInstanceNetExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNetExpireTimeWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  instanceClass?: string(name='InstanceClass'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  forceUpgrade?: boolean(name='ForceUpgrade'),
  effectiveTime?: string(name='EffectiveTime'),
  autoPay?: boolean(name='AutoPay'),
  orderType?: string(name='OrderType'),
  majorVersion?: string(name='MajorVersion'),
  clientToken?: string(name='ClientToken'),
  sourceBiz?: string(name='SourceBiz'),
}

model ModifyInstanceSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceSpec', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceSSLRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  SSLEnabled?: string(name='SSLEnabled'),
}

model ModifyInstanceSSLResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model ModifyInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSSLResponseBody(name='body'),
}

async function modifyInstanceSSLWithOptions(request: ModifyInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyInstanceSSLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceSSL', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceSSL(request: ModifyInstanceSSLRequest): ModifyInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSSLWithOptions(request, runtime);
}

model ModifyInstanceVpcAuthModeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  vpcAuthMode?: string(name='VpcAuthMode'),
}

model ModifyInstanceVpcAuthModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVpcAuthModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVpcAuthModeResponseBody(name='body'),
}

async function modifyInstanceVpcAuthModeWithOptions(request: ModifyInstanceVpcAuthModeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAuthModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceVpcAuthMode', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceVpcAuthMode(request: ModifyInstanceVpcAuthModeRequest): ModifyInstanceVpcAuthModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAuthModeWithOptions(request, runtime);
}

model ModifyIntranetAttributeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  bandWidth?: long(name='BandWidth'),
  nodeId?: string(name='NodeId'),
}

model ModifyIntranetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIntranetAttributeResponseBody(name='body'),
}

async function modifyIntranetAttributeWithOptions(request: ModifyIntranetAttributeRequest, runtime: Util.RuntimeOptions): ModifyIntranetAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIntranetAttribute', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIntranetAttribute(request: ModifyIntranetAttributeRequest): ModifyIntranetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIntranetAttributeWithOptions(request, runtime);
}

model ModifyNodeSpecRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  instanceClass?: string(name='InstanceClass'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
  autoPay?: boolean(name='AutoPay'),
  orderType?: string(name='OrderType'),
  nodeId?: string(name='NodeId'),
  switchTimeMode?: string(name='SwitchTimeMode'),
}

model ModifyNodeSpecResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyNodeSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodeSpecResponseBody(name='body'),
}

async function modifyNodeSpecWithOptions(request: ModifyNodeSpecRequest, runtime: Util.RuntimeOptions): ModifyNodeSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNodeSpec', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNodeSpec(request: ModifyNodeSpecRequest): ModifyNodeSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNodeSpecWithOptions(request, runtime);
}

model ModifyResourceGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  regionId?: string(name='RegionId'),
}

model ModifyResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyResourceGroupResponseBody(name='body'),
}

async function modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyResourceGroup', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceGroupWithOptions(request, runtime);
}

model ModifySecurityGroupConfigurationRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBInstanceId?: string(name='DBInstanceId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

async function modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupConfiguration', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupConfigurationWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  securityIps?: string(name='SecurityIps'),
  securityIpGroupName?: string(name='SecurityIpGroupName'),
  securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityIps', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifyUserClusterHostRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
  clusterId?: string(name='ClusterId'),
  allocationStatus?: int32(name='AllocationStatus'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
}

model ModifyUserClusterHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserClusterHostResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserClusterHostResponseBody(name='body'),
}

async function modifyUserClusterHostWithOptions(request: ModifyUserClusterHostRequest, runtime: Util.RuntimeOptions): ModifyUserClusterHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserClusterHost', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserClusterHost(request: ModifyUserClusterHostRequest): ModifyUserClusterHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserClusterHostWithOptions(request, runtime);
}

model ReleaseDirectConnectionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model ReleaseDirectConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseDirectConnectionResponseBody(name='body'),
}

async function releaseDirectConnectionWithOptions(request: ReleaseDirectConnectionRequest, runtime: Util.RuntimeOptions): ReleaseDirectConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseDirectConnection', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseDirectConnection(request: ReleaseDirectConnectionRequest): ReleaseDirectConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDirectConnectionWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  currentConnectionString?: string(name='CurrentConnectionString'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstancePublicConnection', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model RenewAdditionalBandwidthRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  couponNo?: string(name='CouponNo'),
  autoPay?: boolean(name='AutoPay'),
  orderTimeLength?: string(name='OrderTimeLength'),
  sourceBiz?: string(name='SourceBiz'),
}

model RenewAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: RenewAdditionalBandwidthResponseBody(name='body'),
}

async function renewAdditionalBandwidthWithOptions(request: RenewAdditionalBandwidthRequest, runtime: Util.RuntimeOptions): RenewAdditionalBandwidthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewAdditionalBandwidth', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewAdditionalBandwidth(request: RenewAdditionalBandwidthRequest): RenewAdditionalBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewAdditionalBandwidthWithOptions(request, runtime);
}

model RenewInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  capacity?: string(name='Capacity'),
  instanceClass?: string(name='InstanceClass'),
  period?: long(name='Period'),
  autoPay?: boolean(name='AutoPay'),
  fromApp?: string(name='FromApp'),
  businessInfo?: string(name='BusinessInfo'),
  couponNo?: string(name='CouponNo'),
}

model RenewInstanceResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ReplaceUserClusterHostRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  clusterId?: string(name='ClusterId'),
  hostId?: string(name='HostId'),
  engine?: string(name='Engine'),
  zoneId?: string(name='ZoneId'),
}

model ReplaceUserClusterHostResponseBody = {
  newHostId?: string(name='NewHostId'),
  requestId?: string(name='RequestId'),
}

model ReplaceUserClusterHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceUserClusterHostResponseBody(name='body'),
}

async function replaceUserClusterHostWithOptions(request: ReplaceUserClusterHostRequest, runtime: Util.RuntimeOptions): ReplaceUserClusterHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReplaceUserClusterHost', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function replaceUserClusterHost(request: ReplaceUserClusterHostRequest): ReplaceUserClusterHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceUserClusterHostWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccountPassword', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  effectiveTime?: string(name='EffectiveTime'),
  upgradeMinorVersion?: boolean(name='UpgradeMinorVersion'),
}

model RestartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  taskId?: string(name='TaskId'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model RestoreInstanceRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  backupId?: string(name='BackupId'),
}

model RestoreInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestoreInstanceResponseBody(name='body'),
}

async function restoreInstanceWithOptions(request: RestoreInstanceRequest, runtime: Util.RuntimeOptions): RestoreInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestoreInstance', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreInstanceWithOptions(request, runtime);
}

model SwitchInstanceHARequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  switchMode?: int32(name='SwitchMode'),
  switchType?: string(name='SwitchType'),
}

model SwitchInstanceHAResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchInstanceHAResponseBody(name='body'),
}

async function switchInstanceHAWithOptions(request: SwitchInstanceHARequest, runtime: Util.RuntimeOptions): SwitchInstanceHAResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchInstanceHA', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchInstanceHA(request: SwitchInstanceHARequest): SwitchInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchInstanceHAWithOptions(request, runtime);
}

model SwitchInstanceProxyRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
}

model SwitchInstanceProxyResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchInstanceProxyResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchInstanceProxyResponseBody(name='body'),
}

async function switchInstanceProxyWithOptions(request: SwitchInstanceProxyRequest, runtime: Util.RuntimeOptions): SwitchInstanceProxyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchInstanceProxy', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchInstanceProxy(request: SwitchInstanceProxyRequest): SwitchInstanceProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchInstanceProxyWithOptions(request, runtime);
}

model SwitchNetworkRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  targetNetworkType?: string(name='TargetNetworkType'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  instanceId?: string(name='InstanceId'),
  retainClassic?: string(name='RetainClassic'),
  classicExpiredDays?: string(name='ClassicExpiredDays'),
}

model SwitchNetworkResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model SwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchNetworkResponseBody(name='body'),
}

async function switchNetworkWithOptions(request: SwitchNetworkRequest, runtime: Util.RuntimeOptions): SwitchNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchNetwork', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchNetwork(request: SwitchNetworkRequest): SwitchNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchNetworkWithOptions(request, runtime);
}

model SyncDtsStatusRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model SyncDtsStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SyncDtsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDtsStatusResponseBody(name='body'),
}

async function syncDtsStatusWithOptions(request: SyncDtsStatusRequest, runtime: Util.RuntimeOptions): SyncDtsStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncDtsStatus', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncDtsStatus(request: SyncDtsStatusRequest): SyncDtsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDtsStatusWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TransformInstanceChargeTypeRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
  autoPay?: boolean(name='AutoPay'),
  chargeType?: string(name='ChargeType'),
}

model TransformInstanceChargeTypeResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model TransformInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: TransformInstanceChargeTypeResponseBody(name='body'),
}

async function transformInstanceChargeTypeWithOptions(request: TransformInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): TransformInstanceChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransformInstanceChargeType', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transformInstanceChargeType(request: TransformInstanceChargeTypeRequest): TransformInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformInstanceChargeTypeWithOptions(request, runtime);
}

model TransformToPrePaidRequest {
  securityToken?: string(name='SecurityToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  period?: long(name='Period'),
  autoPay?: boolean(name='AutoPay'),
}

model TransformToPrePaidResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model TransformToPrePaidResponse = {
  headers: map[string]string(name='headers'),
  body: TransformToPrePaidResponseBody(name='body'),
}

async function transformToPrePaidWithOptions(request: TransformToPrePaidRequest, runtime: Util.RuntimeOptions): TransformToPrePaidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransformToPrePaid', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transformToPrePaid(request: TransformToPrePaidRequest): TransformToPrePaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformToPrePaidWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2015-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

