/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'r-kvstore.aliyuncs.com',
    cn-beijing = 'r-kvstore.aliyuncs.com',
    cn-hangzhou = 'r-kvstore.aliyuncs.com',
    cn-shanghai = 'r-kvstore.aliyuncs.com',
    cn-shenzhen = 'r-kvstore.aliyuncs.com',
    cn-heyuan = 'r-kvstore.aliyuncs.com',
    ap-southeast-1 = 'r-kvstore.aliyuncs.com',
    us-west-1 = 'r-kvstore.aliyuncs.com',
    us-east-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-finance = 'r-kvstore.aliyuncs.com',
    cn-shanghai-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-north-2-gov-1 = 'r-kvstore.aliyuncs.com',
    ap-northeast-2-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-beijing-gov-1 = 'r-kvstore.aliyuncs.com',
    cn-beijing-nu16-b01 = 'r-kvstore.aliyuncs.com',
    cn-edge-1 = 'r-kvstore.aliyuncs.com',
    cn-fujian = 'r-kvstore.aliyuncs.com',
    cn-haidian-cm12-c01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'r-kvstore.aliyuncs.com',
    cn-hangzhou-test-306 = 'r-kvstore.aliyuncs.com',
    cn-hongkong-finance-pop = 'r-kvstore.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'r-kvstore.aliyuncs.com',
    cn-qingdao-nebula = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et15-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-et2-b01 = 'r-kvstore.aliyuncs.com',
    cn-shanghai-inner = 'r-kvstore.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-inner = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'r-kvstore.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'r-kvstore.aliyuncs.com',
    cn-wuhan = 'r-kvstore.aliyuncs.com',
    cn-wulanchabu = 'r-kvstore.aliyuncs.com',
    cn-yushanfang = 'r-kvstore.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'r-kvstore.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'r-kvstore.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'r-kvstore.aliyuncs.com',
    eu-west-1-oxs = 'r-kvstore.aliyuncs.com',
    rus-west-1-pop = 'r-kvstore.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('r-kvstore', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddShardingNodeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **true**: enables automatic payment. Make sure that you have sufficient balance within your account.
*   **false**: disables automatic payment. In this case, you must manually renew the instance in the console before the instance expires. For more information, see [Renewal](~~26352~~).

> The default value is **true**.', example='false'),
  businessInfo?: string(name='BusinessInfo', description='The business information. This is an additional parameter.', example='000000000'),
  couponNo?: string(name='CouponNo', description='The ID of the coupon.', example='youhuiquan_promotion_option_id_for_blank'),
  forceTrans?: boolean(name='ForceTrans'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  shardCount?: int32(name='ShardCount', description='The number of data shards that you want to add. Default value: **1**.

> 

*   A cluster instance must contain 2 to 256 data shards. You can add a maximum of 64 data shards at a time.', example='2'),
  sourceBiz?: string(name='SourceBiz', description='The source of the operation. This parameter is used only for internal maintenance. You do not need to specify this parameter.', example='SDK'),
  vSwitchId?: string(name='VSwitchId'),
}

model AddShardingNodeResponseBody = {
  nodeIds?: [ string ](name='NodeIds', description='The IDs of the data shards.'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='20741011111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B79C1A90-495B-4E99-A2AA-A4DB13B8****'),
}

model AddShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShardingNodeResponseBody(name='body'),
}

/**
  * This operation is available only for cluster instances that use cloud disks.
  *
  * @param request AddShardingNodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddShardingNodeResponse
 */
async function addShardingNodeWithOptions(request: AddShardingNodeRequest, runtime: Util.RuntimeOptions): AddShardingNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.forceTrans)) {
    query['ForceTrans'] = request.forceTrans;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['ShardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.sourceBiz)) {
    query['SourceBiz'] = request.sourceBiz;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddShardingNode',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is available only for cluster instances that use cloud disks.
  *
  * @param request AddShardingNodeRequest
  * @return AddShardingNodeResponse
 */
async function addShardingNode(request: AddShardingNodeRequest): AddShardingNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShardingNodeWithOptions(request, runtime);
}

model AllocateDirectConnectionRequest {
  connectionString?: string(name='ConnectionString', description='The prefix of the private endpoint. The prefix must start with a lowercase letter and can contain lowercase letters and digits. The prefix must be 8 to 40 characters in length.', example='redisdirect123'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', description='The port number of the instance. Valid values: **1024** to **65535**. Default value: **6379**.', example='6379'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model AllocateDirectConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model AllocateDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateDirectConnectionResponseBody(name='body'),
}

/**
  * In direct connection mode, you can use private endpoints to bypass proxy nodes and connect to ApsaraDB for Redis instances from clients in the same manner as you connect to native Redis clusters. The direct connection mode can reduce communication overheads and accelerate the response speed. For more information, see [Enable the direct connection mode](~~146901~~).
  * To call this operation, the instance must meet the following requirements:
  * *   The instance is an ApsaraDB for Redis cluster instance.
  * *   The instance is a Community Edition instance that runs Redis 4.0 or 5.0, or an Enhanced Edition instance (Tair) that runs Redis 5.0.
  * *   The instance is deployed in a virtual private cloud (VPC). If the instance is deployed in the classic network, call the [SwitchNetwork](~~61005~~) operation to change the network type to VPC.
  * *   SSL encryption is disabled for the instance. If SSL encryption is enabled, you can call the [ModifyInstanceSSL](~~96194~~) operation to disable it.
  * *   The vSwitch to which the instance is connected has sufficient IP addresses to be allocated. For more information, see [Obtain the number of available IP addresses in the vSwitch to which an ApsaraDB for Redis instance is connected](~~183151~~).
  *
  * @param request AllocateDirectConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocateDirectConnectionResponse
 */
async function allocateDirectConnectionWithOptions(request: AllocateDirectConnectionRequest, runtime: Util.RuntimeOptions): AllocateDirectConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateDirectConnection',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In direct connection mode, you can use private endpoints to bypass proxy nodes and connect to ApsaraDB for Redis instances from clients in the same manner as you connect to native Redis clusters. The direct connection mode can reduce communication overheads and accelerate the response speed. For more information, see [Enable the direct connection mode](~~146901~~).
  * To call this operation, the instance must meet the following requirements:
  * *   The instance is an ApsaraDB for Redis cluster instance.
  * *   The instance is a Community Edition instance that runs Redis 4.0 or 5.0, or an Enhanced Edition instance (Tair) that runs Redis 5.0.
  * *   The instance is deployed in a virtual private cloud (VPC). If the instance is deployed in the classic network, call the [SwitchNetwork](~~61005~~) operation to change the network type to VPC.
  * *   SSL encryption is disabled for the instance. If SSL encryption is enabled, you can call the [ModifyInstanceSSL](~~96194~~) operation to disable it.
  * *   The vSwitch to which the instance is connected has sufficient IP addresses to be allocated. For more information, see [Obtain the number of available IP addresses in the vSwitch to which an ApsaraDB for Redis instance is connected](~~183151~~).
  *
  * @param request AllocateDirectConnectionRequest
  * @return AllocateDirectConnectionResponse
 */
async function allocateDirectConnection(request: AllocateDirectConnectionRequest): AllocateDirectConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDirectConnectionWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The operation that you want to perform. Set the value to **AllocateInstancePublicConnection**.', example='r-bp1zxszhcgatnx****'),
  instanceId?: string(name='InstanceId', description='The ID of the request.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', description='The prefix of the public endpoint. The prefix must start with a lowercase letter and can contain lowercase letters and digits. The prefix can be 8 to 40 characters in length.

>  The endpoint is in the `<prefix>.redis.rds.aliyuncs.com` format.', example='6379'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='20C8341E-B5AD-4B24-BD82-D73241522ABF'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

/**
  * r-bp1zxszhcgatnx****
  *
  * @param request AllocateInstancePublicConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocateInstancePublicConnectionResponse
 */
async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * r-bp1zxszhcgatnx****
  *
  * @param request AllocateInstancePublicConnectionRequest
  * @return AllocateInstancePublicConnectionResponse
 */
async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CheckCloudResourceAuthorizedRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the Resource Access Management (RAM) role that you want to attach to your ApsaraDB for Redis instance. The ARN must be in the format of `acs:ram::$accountID:role/$roleName`. After the role is attached, your ApsaraDB for Redis instance can use KMS.

> 

*   `$accountID`: the ID of the Alibaba Cloud account. To view the account ID, log on to the Alibaba Cloud console, move the pointer over your profile picture in the upper-right corner of the page, and then click **Security Settings**.

*   `$roleName`: the name of the RAM role. Replace $roleName with **AliyunRdsInstanceEncryptionDefaultRole**.', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
  securityToken?: string(name='SecurityToken'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  authorizationState?: int32(name='AuthorizationState', description='Indicates whether the instance is authorized to use KMS. Valid values:

*   **0**: The instance is authorized to use KMS.
*   **1**: The instance is not authorized to use KMS.
*   **2**: KMS is not activated. For more information, see [Activate KMS](~~153781~~).', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A501A191-BD70-5E50-98A9-C2A486A82****'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

/**
  * *   For information about Transparent Data Encryption (TDE) and the usage notes of TDE, see [Enable TDE](~~265913~~).
  * *   If the ApsaraDB for Redis instance is authorized to use KMS, you can call the [ModifyInstanceTDE](~~302337~~) operation to enable TDE.
  *
  * @param request CheckCloudResourceAuthorizedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CheckCloudResourceAuthorizedResponse
 */
async function checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: Util.RuntimeOptions): CheckCloudResourceAuthorizedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCloudResourceAuthorized',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   For information about Transparent Data Encryption (TDE) and the usage notes of TDE, see [Enable TDE](~~265913~~).
  * *   If the ApsaraDB for Redis instance is authorized to use KMS, you can call the [ModifyInstanceTDE](~~302337~~) operation to enable TDE.
  *
  * @param request CheckCloudResourceAuthorizedRequest
  * @return CheckCloudResourceAuthorizedResponse
 */
async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCloudResourceAuthorizedWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the account.

*   The description must start with a letter, and cannot start with `http://` or `https://`.
*   The description can contain letters, digits, underscores (\\_), and hyphens (-).
*   The description must be 2 to 256 characters in length.', example='testaccount'),
  accountName?: string(name='AccountName', description='The name of the account. The name must meet the following requirements:

*   The name can contain lowercase letters, digits, and hyphens (-), and must start with a lowercase letter.
*   The name can be up to 100 characters in length.
*   The name cannot be one of the reserved words in the [Reserved words for Redis account names](~~92665~~#title-84o-mok-b6h) section.', example='demoaccount'),
  accountPassword?: string(name='AccountPassword', description='The password of the account. The password must be 8 to 32 characters in length and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and specific special characters. These special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='uWonno21****'),
  accountPrivilege?: string(name='AccountPrivilege', description='The permissions of the account. Valid values:

*   **RoleReadOnly**: The account has read-only permissions.
*   **RoleReadWrite**: The account has read and write permissions.', example='RoleReadOnly'),
  accountType?: string(name='AccountType', description='The type of the account. Set the value to **Normal**, which indicates that the account is a standard account.', example='Normal'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CreateAccountResponseBody = {
  acountName?: string(name='AcountName', description='The name of the account.', example='demoaccount'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABAF95F6-35C1-4177-AF3A-70969EBD****'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

/**
  * > 
  * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0 or later.
  * *   The ApsaraDB for Redis instance for which you want to call this operation must be in the running state.
  * *   You can create up to 18 accounts for an ApsaraDB for Redis instance.
  * You can also create an account in the ApsaraDB for Redis console. For more information, see [Manage database accounts](~~92665~~).
  *
  * @param request CreateAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAccountResponse
 */
async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.accountPrivilege)) {
    query['AccountPrivilege'] = request.accountPrivilege;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > 
  * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0 or later.
  * *   The ApsaraDB for Redis instance for which you want to call this operation must be in the running state.
  * *   You can create up to 18 accounts for an ApsaraDB for Redis instance.
  * You can also create an account in the ApsaraDB for Redis console. For more information, see [Manage database accounts](~~92665~~).
  *
  * @param request CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CreateBackupResponseBody = {
  backupJobID?: string(name='BackupJobID', description='The ID of the backup task.', example='1162****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FF6158E-3394-4A90-B634-79C49184****'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackupResponseBody(name='body'),
}

/**
  * You can also back up an instance in the ApsaraDB for Redis console. For more information, see [Backup and recovery](~~43886~~).
  *
  * @param request CreateBackupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateBackupResponse
 */
async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackup',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also back up an instance in the ApsaraDB for Redis console. For more information, see [Backup and recovery](~~43886~~).
  *
  * @param request CreateBackupRequest
  * @return CreateBackupResponse
 */
async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateCacheAnalysisTaskRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CreateCacheAnalysisTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBC1E3D6-7C88-4DF5-9A3D-0DB1E6D9****'),
}

model CreateCacheAnalysisTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCacheAnalysisTaskResponseBody(name='body'),
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance is a Community Edition instance or an Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * This feature is unavailable for cloud disk-based cluster instances. For more information, see [Comparison between ApsaraDB for Redis instances that use local disks and those that use cloud disks](~~188068~~).
  * *   The instance is of the latest minor version. For more information about whether you must update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  * After you call this operation, you can call the [DescribeCacheAnalysisReport](~~128808~~) operation to view the analytic results.
  *
  * @param request CreateCacheAnalysisTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCacheAnalysisTaskResponse
 */
async function createCacheAnalysisTaskWithOptions(request: CreateCacheAnalysisTaskRequest, runtime: Util.RuntimeOptions): CreateCacheAnalysisTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCacheAnalysisTask',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance is a Community Edition instance or an Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * This feature is unavailable for cloud disk-based cluster instances. For more information, see [Comparison between ApsaraDB for Redis instances that use local disks and those that use cloud disks](~~188068~~).
  * *   The instance is of the latest minor version. For more information about whether you must update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  * After you call this operation, you can call the [DescribeCacheAnalysisReport](~~128808~~) operation to view the analytic results.
  *
  * @param request CreateCacheAnalysisTaskRequest
  * @return CreateCacheAnalysisTaskResponse
 */
async function createCacheAnalysisTask(request: CreateCacheAnalysisTaskRequest): CreateCacheAnalysisTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCacheAnalysisTaskWithOptions(request, runtime);
}

model CreateGlobalDistributeCacheRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  seedSubInstanceId?: string(name='SeedSubInstanceId', description='The ID of the existing instance.', example='r-bp1zxszhcgatnx****'),
}

model CreateGlobalDistributeCacheResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E681E498-5A0D-44F2-B1A7-912DC3******'),
}

model CreateGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGlobalDistributeCacheResponseBody(name='body'),
}

/**
  * You cannot directly create a distributed instance. If you require a distributed instance, you must call this operation to convert an existing instance to the first child instance of the distributed instance. After the instance is converted, the distributed instance is created. Before you call this operation, make sure that the following requirements are met:
  * *   A [DRAM-based instance](~~126164~~) of Enhanced Edition is used.
  * *   If the existing instance is a cluster instance, the direct connection mode must be disabled for the instance. For more information, see [Release a private endpoint](~~150047~~).
  * > You can also call the [CreateInstance](~~60873~~) operation to create an instance that is specified as the first child instance of a distributed instance. After the child instance is created, the distributed instance to which the child instance belongs is created.
  *
  * @param request CreateGlobalDistributeCacheRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateGlobalDistributeCacheResponse
 */
async function createGlobalDistributeCacheWithOptions(request: CreateGlobalDistributeCacheRequest, runtime: Util.RuntimeOptions): CreateGlobalDistributeCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.seedSubInstanceId)) {
    query['SeedSubInstanceId'] = request.seedSubInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGlobalDistributeCache',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot directly create a distributed instance. If you require a distributed instance, you must call this operation to convert an existing instance to the first child instance of the distributed instance. After the instance is converted, the distributed instance is created. Before you call this operation, make sure that the following requirements are met:
  * *   A [DRAM-based instance](~~126164~~) of Enhanced Edition is used.
  * *   If the existing instance is a cluster instance, the direct connection mode must be disabled for the instance. For more information, see [Release a private endpoint](~~150047~~).
  * > You can also call the [CreateInstance](~~60873~~) operation to create an instance that is specified as the first child instance of a distributed instance. After the child instance is created, the distributed instance to which the child instance belongs is created.
  *
  * @param request CreateGlobalDistributeCacheRequest
  * @return CreateGlobalDistributeCacheResponse
 */
async function createGlobalDistributeCache(request: CreateGlobalDistributeCacheRequest): CreateGlobalDistributeCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGlobalDistributeCacheWithOptions(request, runtime);
}

model CreateGlobalSecurityIPGroupRequest {
  GIpList?: string(name='GIpList', description='The IP address in the whitelist template.

>  Separate multiple IP addresses with commas (,). You can create up to 1,000 IP addresses or CIDR blocks for all IP whitelists.', example='111.175.56.206,47.253.88.168,111.181.0.162'),
  globalIgName?: string(name='GlobalIgName', description='The name of the IP whitelist template. The name must meet the following requirements:

*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must start with a letter and end with a letter or digit.
*   The name must be 2 to 120 characters in length.', example='test_123'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model CreateGlobalSecurityIPGroupResponseBody = {
  globalSecurityIPGroup?: [ 
    {
      GIpList?: string(name='GIpList', description='The IP address in the whitelist template.

>  Multiple IP addresses are separated by commas (,). You can create up to 1,000 IP addresses or CIDR blocks for all IP whitelists.', example='192.168.0.1'),
      globalIgName?: string(name='GlobalIgName', description='The name of the IP whitelist template. The name must meet the following requirements:

*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must start with a letter and end with a letter or digit.
*   The name must be 2 to 120 characters in length.', example='white_list_test_sg'),
      globalSecurityGroupId?: string(name='GlobalSecurityGroupId', description='The ID of the IP whitelist template.', example='g-sdgwqyp4f5j1x3qk7yvm'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='GlobalSecurityIPGroup', description='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model CreateGlobalSecurityIPGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGlobalSecurityIPGroupResponseBody(name='body'),
}

async function createGlobalSecurityIPGroupWithOptions(request: CreateGlobalSecurityIPGroupRequest, runtime: Util.RuntimeOptions): CreateGlobalSecurityIPGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.GIpList)) {
    query['GIpList'] = request.GIpList;
  }
  if (!Util.isUnset(request.globalIgName)) {
    query['GlobalIgName'] = request.globalIgName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGlobalSecurityIPGroup',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGlobalSecurityIPGroup(request: CreateGlobalSecurityIPGroupRequest): CreateGlobalSecurityIPGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGlobalSecurityIPGroupWithOptions(request, runtime);
}

model CreateInstanceRequest {
  appendonly?: string(name='Appendonly', description='指定新创建实例的 aof 参数配置。

> 
> 改参数适用于创建本地盘实例，云盘实例暂不支持指定 aof 参数。', example='yes'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. Default value: false. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal.', example='true'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', description='The subscription duration that is supported by auto-renewal. Unit: months. Valid values: **1**, **2**, **3**, **6**, and **12**.

> This parameter is required only if the **AutoRenew** parameter is set to **true**.', example='3'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to use a coupon. Default value: false. Valid values:

*   **true**: uses a coupon.
*   **false**: does not use a coupon.', example='false'),
  backupId?: string(name='BackupId', description='The ID of the backup file of the original instance. If you want to create an instance based on a backup file of a specified instance, you can specify this parameter after you specify the **SrcDBInstanceId** parameter. Then, the system creates an instance based on the backup file that is specified by this parameter. You can call the [DescribeBackups](~~61081~~) operation to query the IDs of backup files.

> After you specify the **SrcDBInstanceId** parameter, you must use the **BackupId** or **RestoreTime** parameter to specify the backup file.', example='111111111'),
  businessInfo?: string(name='BusinessInfo', description='The ID of the promotional event or business information.', example='000000000'),
  capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB.

> You must specify at least one of the **Capacity** and **InstanceClass** parameters when you call this operation.', example='16384'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Default value: PrePaid. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  couponNo?: string(name='CouponNo', description='The coupon code. Default value: `youhuiquan_promotion_option_id_for_blank`.', example='youhuiquan_promotion_option_id_for_blank'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='The ID of the dedicated cluster. This parameter is required if you create an instance in a dedicated cluster.', example='dhg-uv4fnk6r7zff****'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   **true**: performs a dry run and does not create the instance. The system prechecks the request parameters, request format, service limits, and available resources. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, the instance is created.', example='false'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **4.0**, **5.0**, **6.0**, and **7.0**.

> The default value is **5.0**.', example='4.0'),
  globalInstance?: boolean(name='GlobalInstance', description='Specifies whether to use the new instance as the first child instance of the distributed instance. Default value: false. Valid values:

*   **true**: uses the new instance as the first child instance.
*   **false**: does not use the new instance as the first child instance.

> 

*   If you want to create an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance that runs Redis 5.0, you must set this parameter to **true**.

*   This parameter is available only on the China site (aliyun.com).', example='false'),
  globalInstanceId?: string(name='GlobalInstanceId', description='The ID of the distributed instance. This parameter is available only on the China site (aliyun.com).', example='gr-bp14rkqrhac****'),
  globalSecurityGroupIds?: string(name='GlobalSecurityGroupIds', description='The global IP whitelist template for the instance. Multiple IP whitelist templates should be separated by English commas (,) and cannot be duplicated.', example='g-zsldxfiwjmti0kcm****'),
  instanceClass?: string(name='InstanceClass', description='The instance type of the instance. Example: redis.master.small.default. A redis.master.small.default instance is a 1 GB standard master-replica instance of the Community Edition that uses local disks. For more information, see [Overview](~~26350~~).

> You must specify at least one of the **Capacity** and **InstanceClass** parameters when you call this operation.', example='redis.master.small.default'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 80 characters in length and must start with a letter. It cannot contain spaces or specific special characters. These special characters include `@ / : = " < > { [ ] }`', example='apitest'),
  instanceType?: string(name='InstanceType', description='The category of the instance. Default value: Redis. Valid values:

*   **Redis**
*   **Memcache**', example='Redis'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Default value: VPC. Valid values:

*   **VPC**', example='VPC'),
  nodeType?: string(name='NodeType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  paramGroupId?: string(name='ParamGroupId'),
  password?: string(name='Password', description='The password that is used to connect to the instance. The password must be 8 to 32 characters in length and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and specific special characters. These special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='Pass!123456'),
  period?: string(name='Period', description='The subscription duration. Valid values: **1**, 2, 3, 4, 5, 6, 7, 8, **9**, **12**, **24**,**36**, and **60**. Unit: months.

> This parameter is available and required only if the **ChargeType** parameter is set to **PrePaid**.', example='12'),
  port?: string(name='Port', description='The port number that is used to connect to the instance. Valid values: **1024** to **65535**. Default value: **6379**.', example='6379'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance.

> The private IP address must be available within the CIDR block of the vSwitch to which to connect the instance.', example='172.16.0.***'),
  readOnlyCount?: int32(name='ReadOnlyCount', description='The number of read-only nodes in the instance. This parameter is available only if you create a read/write splitting instance that uses cloud disks. Valid values: 1 to 5.', example='5'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to create the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-resourcegroupid1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  restoreTime?: string(name='RestoreTime', description='The point in time at which the specified original instance is backed up. The point in time must be within the retention period of backup files of the original instance. If you want to create an instance based on a backup file of a specified instance, you can set this parameter to specify a point in time after you set the **SrcDBInstanceId** parameter. Then, the system creates an instance based on the backup file that was created at the specified point in time for the original instance. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> After you specify the **SrcDBInstanceId** parameter, you must use the **BackupId** or **RestoreTime** parameter to specify the backup file.', example='2019-06-19T16:00:00Z'),
  secondaryZoneId?: string(name='SecondaryZoneId', description='The secondary zone ID of the instance. You can call the [DescribeZones](~~94527~~) operation to query the most recent zone list.

> If you specify this parameter, the master node and replica node of the instance can be deployed in different zones and disaster recovery is implemented across zones. The instance can withstand failures in data centers.', example='cn-hangzhou-h'),
  securityToken?: string(name='SecurityToken'),
  shardCount?: int32(name='ShardCount', description='The number of data shards. This parameter is available only if you create a cluster instance that uses cloud disks. You can use this parameter to specify a custom number of data shards.', example='4'),
  srcDBInstanceId?: string(name='SrcDBInstanceId', description='The ID of the original instance. If you want to create an instance based on a backup file of a specified instance, you can specify this parameter and use the **BackupId** or **RestoreTime** parameter to specify the backup file.', example='r-bp1zxszhcgatnx****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags that are added to the instance.

> 

*   **N** specifies the serial number of the tag. Up to 20 tags can be added to a single instance. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag.

*   If the key of the tag does not exist, the tag is automatically created.', example='testkey'),
      value?: string(name='Value', description='The values of the tags that are added to the instance.

> **N** specifies the serial number of the tag. For example, **Tag.1.Value** specifies the value of the first tag and **Tag.2.Value** specifies the value of the second tag.', example='testvalue'),
    }
  ](name='Tag', description='The tags of the instance.'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the token is unique among different requests. The token is case-sensitive. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which you want the instance to connect.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1nme44gek34slfc****'),
  zoneId?: string(name='ZoneId', description='The primary zone ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent zone list.', example='cn-hangzhou-e'),
}

model CreateInstanceResponseBody = {
  bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the instance. Unit: MB/s.', example='32'),
  capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB.', example='16384'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  config?: string(name='Config', description='The configurations of the instance.', example='{\\"EvictionPolicy\\":\\"volatile-lru\\",\\"hash-max-ziplist-entries\\":512,\\"zset-max-ziplist-entries\\":128,\\"zset-max-ziplist-value\\":64,\\"set-max-intset-entries\\":512,\\"hash-max-ziplist-value\\":64}'),
  connectionDomain?: string(name='ConnectionDomain', description='The internal endpoint of the instance.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
  connections?: long(name='Connections', description='The maximum number of connections supported by the instance.', example='10000'),
  endTime?: string(name='EndTime', description='The time when the subscription expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-01-18T16:00:00Z'),
  instanceId?: string(name='InstanceId', description='The GUID of the instance.', example='r-bp1zxszhcgatnx****'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='apitest'),
  instanceStatus?: string(name='InstanceStatus', description='The state of the instance. The return value is Creating.', example='Creating'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='VPC'),
  nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **STAND_ALONE**: standalone
*   **MASTER_SLAVE**: master-replica', example='MASTER_SLAVE'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='2084452111111'),
  port?: int32(name='Port', description='The port number that is used to connect to the instance.', example='6379'),
  privateIpAddr?: string(name='PrivateIpAddr', description='The private IP address of the instance.', example='172.16.0.10'),
  QPS?: long(name='QPS', description='The expected maximum queries per second (QPS).', example='100000'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hongkong'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5DEA3CC9-F81D-4387-8E97-CEA40F09****'),
  userName?: string(name='UserName', description='The username that is used to connect to the instance. By default, ApsaraDB for Redis provides a username that is named after the instance ID.', example='r-bp1zxszhcgatnx****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance is connected.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-b'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * You can call this operation to create an ApsaraDB for Redis instance that uses local or cloud disks or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance that uses local disks. To create a Tair instance that uses cloud disks, call the [CreateTairInstance](~~208271~~) operation.
  * > You can also create an instance in the ApsaraDB for Redis console. For more information, see [Create an instance](~~26351~~).
  *
  * @param request CreateInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateInstanceResponse
 */
async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appendonly)) {
    query['Appendonly'] = request.appendonly;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.autoUseCoupon)) {
    query['AutoUseCoupon'] = request.autoUseCoupon;
  }
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.globalInstance)) {
    query['GlobalInstance'] = request.globalInstance;
  }
  if (!Util.isUnset(request.globalInstanceId)) {
    query['GlobalInstanceId'] = request.globalInstanceId;
  }
  if (!Util.isUnset(request.globalSecurityGroupIds)) {
    query['GlobalSecurityGroupIds'] = request.globalSecurityGroupIds;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.paramGroupId)) {
    query['ParamGroupId'] = request.paramGroupId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.readOnlyCount)) {
    query['ReadOnlyCount'] = request.readOnlyCount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.restoreTime)) {
    query['RestoreTime'] = request.restoreTime;
  }
  if (!Util.isUnset(request.secondaryZoneId)) {
    query['SecondaryZoneId'] = request.secondaryZoneId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['ShardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.srcDBInstanceId)) {
    query['SrcDBInstanceId'] = request.srcDBInstanceId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * You can call this operation to create an ApsaraDB for Redis instance that uses local or cloud disks or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance that uses local disks. To create a Tair instance that uses cloud disks, call the [CreateTairInstance](~~208271~~) operation.
  * > You can also create an instance in the ApsaraDB for Redis console. For more information, see [Create an instance](~~26351~~).
  *
  * @param request CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateInstancesRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **true** (default).
*   **false**. If automatic payment is disabled, you must perform the following steps to complete the payment in the ApsaraDB for Redis console: In the top navigation bar, choose **Expenses** > **Renewal Management**. In the left-side navigation pane, click **Orders**. On the **Orders** page, find the order and complete the payment.

>  This parameter is valid only if the value of the **ChargeType** field in the **Instances** parameter is set to **PrePaid**.', example='true'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. Default value: false. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter is available only if **ChargeType** in the **Instances** parameter is set to **PrePaid**.', example='false'),
  businessInfo?: string(name='BusinessInfo', description='The additional business information about the instance.', example='000000000'),
  couponNo?: string(name='CouponNo', description='The coupon code. Default value: `youhuiquan_promotion_option_id_for_blank`.', example='youhuiquan_promotion_option_id_for_blank'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **4.0** and **5.0**.

>  The default value is **5.0**.

Valid values:

*   2.8
*   4.0
*   5.0', example='5.0'),
  instances?: string(name='Instances', description='The JSON-formatted configurations of the instance. For more information, see the "Description of the Instances parameter" section of this topic.', example='[{	"RegionId": "cn-hangzhou",	"izNo": "cn-hangzhou-b",	"quantity": 2,	"instanceType": "Redis",	"instanceClass": "redis.master.small.default",	"EngineVersion": "5.0",	"ChargeType": "PostPaid"}]'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  rebuildInstance?: boolean(name='RebuildInstance', description='Specifies whether to restore the source instance from the recycle bin. Valid values:

*   **true**
*   **false** (default)

>  This parameter is valid only if the **SrcDBInstanceId** field in the **Instances** parameter is specified.', example='false'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-resourcegroupid1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token is case-sensitive. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
}

model CreateInstancesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds', description='The IDs of instances that were created.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20905403119****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='561AFBF1-BE20-44DB-9BD1-6988B53E****'),
}

model CreateInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstancesResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * >  For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
  * To create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks, call [CreateTairInstance](~~208271~~).
  *
  * @param request CreateInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateInstancesResponse
 */
async function createInstancesWithOptions(request: CreateInstancesRequest, runtime: Util.RuntimeOptions): CreateInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instances)) {
    query['Instances'] = request.instances;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rebuildInstance)) {
    query['RebuildInstance'] = request.rebuildInstance;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstances',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * >  For more information about how to create an instance that meets your requirements in the ApsaraDB for Redis console, see [Step 1: Create an ApsaraDB for Redis instance](~~26351~~).
  * To create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks, call [CreateTairInstance](~~208271~~).
  *
  * @param request CreateInstancesRequest
  * @return CreateInstancesResponse
 */
async function createInstances(request: CreateInstancesRequest): CreateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancesWithOptions(request, runtime);
}

model CreateTairInstanceRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Set the value to **true**.', example='true'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. Default value: false. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal.', example='true'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', description='The subscription duration that is supported by auto-renewal. Unit: months. Valid values: **1**, **2**, **3**, **6**, and **12**.

> This parameter is required only if the **AutoRenew** parameter is set to **true**.', example='3'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to use a coupon. Default value: false. Valid values:

*   **true**: uses a coupon.
*   **false**: does not use a coupon.', example='true'),
  backupId?: string(name='BackupId', description='The ID of the backup set of the source instance. You can call the [DescribeBackups](~~61081~~) operation to query the ID of the backup set.

> If you want to create an instance based on the backup set of an existing instance, you must specify this parameter after you specify the **SrcDBInstanceId** parameter. The system creates an instance based on the backup set that is specified by this parameter.', example='11111111'),
  businessInfo?: string(name='BusinessInfo', description='The ID of the promotion event or the business information.', example='000000000'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Default value: PrePaid. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the token is unique among different requests. The token is case-sensitive. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
  couponNo?: string(name='CouponNo', description='The coupon code.', example='youhuiquan_promotion_option_id_for_blank'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   **true**: performs a dry run and does not create the instance. The system prechecks the request parameters, request format, service limits, and available resources. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, the instance is created.', example='false'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Default value: **1.0**, which is developed by Alibaba Cloud and compatible with Redis 5.0.', example='1.0'),
  globalInstanceId?: string(name='GlobalInstanceId', description='The ID of the distributed instance.', example='gr-bp14rkqrhac****'),
  globalSecurityGroupIds?: string(name='GlobalSecurityGroupIds', description='The global IP whitelist template of the instance. Separate multiple IP whitelist templates with commas (,) and make sure that each IP whitelist template is unique.', example='g-zsldxfiwjmti0kcm****'),
  instanceClass?: string(name='InstanceClass', description='The instance type. For more information, see the following topics:

*   [DRAM-based instances](~~443844~~)
*   [Persistent memory-optimized instances](~~443845~~)
*   [ESSD-based instances](~~443846~~)', example='tair.scm.standard.4m.32d'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must meet the following requirements:

*   The name is 2 to 80 characters in length.
*   The name starts with a letter and does not contain spaces or special characters. Special characters include `@ / : = " < > { [ ] }`', example='apitest'),
  instanceType?: string(name='InstanceType', description='The storage type of the instance. Valid values:

*   **tair_rdb**: ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance
*   **tair_scm**: ApsaraDB for Redis Enhanced Edition (Tair) persistent memory-optimized instance
*   **tair_essd**: ApsaraDB for Redis Enhanced Edition (Tair) ESSD-based instance', example='tair_scm'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  paramGroupId?: string(name='ParamGroupId', description='参数模板ID，根据新创建的参数模板参数创建实例，不可重复。', example='g-50npzjcqb1ua6q6j****'),
  password?: string(name='Password', description='The password that is used to connect to the instance. The password must meet the following requirements:

*   The password is 8 to 32 characters in length.
*   The password contains at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='Pass!123456'),
  period?: int32(name='Period', description='The subscription duration. Valid values: **1**, 2, 3, 4, 5, 6, 7, 8, **9**, **12**, **24**,**36**, and **60**. Unit: months.

> This parameter is required only if you set the **ChargeType** parameter to **PrePaid**.', example='1'),
  port?: int32(name='Port', example='6379'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance.

> The IP address must be within the CIDR block of the vSwitch to which you want the instance to connect. You can call the [DescribeVSwitches](~~35748~~) operation of the VPC API to query the CIDR block information.', example='172.16.88.***'),
  readOnlyCount?: int32(name='ReadOnlyCount', description='The number of read-only nodes of the instance. This parameter is available only if you create a read/write splitting instance that uses cloud disks. You can use this parameter to specify a custom number of read-only nodes for the instance. Valid value: 1 to 5.', example='5'),
  regionId?: string(name='RegionId', description='The ID of the region where you want to create the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the instance.

> 

*   You can query resource group IDs by using the ApsaraDB for Redis console or by calling the [ListResourceGroups](~~158855~~) operation. For more information, see [View basic information of a resource group](~~151181~~).

*   Before you modify the resource group to which an instance belongs, you can call the [ListResources](~~158866~~) operation to view the current resource group of the instance.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryZoneId?: string(name='SecondaryZoneId', description='The ID of the secondary zone. You can call the [DescribeRegions](~~61012~~) operation to query the ID of the secondary zone.

> You cannot specify multiple zone IDs or set this parameter to a value that is the same as that of the ZoneId parameter.', example='cn-hangzhou-h'),
  securityToken?: string(name='SecurityToken'),
  shardCount?: int32(name='ShardCount', description='The number of data nodes in the instance. Valid values:

*   **1**: You can create an instance in the standard architecture that contains only one data node. For more information about the standard architecture, see [Cluster master-replica instances](~~52228~~). This is the default value.
*   **2** to **32**: You can create an instance in the cluster architecture that contains the specified number of data nodes. For more information about the cluster architecture, see [Cluster master-replica instances](~~52228~~).

> Only persistent memory-optimized instances can use the cluster architecture. Therefore, you can set this parameter to an integer from **2** to **32** only if you set the **InstanceType** parameter to **tair_scm**.', example='1'),
  shardType?: string(name='ShardType', description='The data shard type of the instance. Default value: MASTER_SLAVE. Valid values:

*   **MASTER_SLAVE**: runs in a master-replica architecture that provides high availability.
*   **STAND_ALONE**: runs in a standalone architecture. If the only node fails, the system creates a new instance and switches the workloads to the new instance. This may cause data loss. You can set this parameter to this value only if the instance uses the **single-zone** deployment type. If you set this parameter to this value, you cannot create cluster or read/write splitting instances.', example='MASTER_SLAVE'),
  srcDBInstanceId?: string(name='SrcDBInstanceId', description='The ID of the source instance.

> If you want to create an instance based on the backup set of an existing instance, set this parameter to the ID of the source instance and the **BackupId** parameter to the backup set that you want to use.', example='r-bp1zxszhcgatnx****'),
  storage?: int32(name='Storage', description='The storage space of cloud disks. Valid values vary based on the instance specifications. For more information, see [ESSD-based instances](~~443846~~).

> This parameter is available and required only if the **InstanceType** parameter is set to **tair_essd**.', example='60'),
  storageType?: string(name='StorageType', description='The storage type of the instance. Set the value to **essd_pl1**.

> This parameter is available only if the **InstanceType** parameter is set to **tair_essd**.', example='essd_pl1'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. A tag is a key-value pair.

> A maximum of five key-value pairs can be specified at a time.', example='key1_test'),
      value?: string(name='Value', description='The value of the tag.

> **N** specifies the serial number of the tag. For example, **Tag.1.Value** specifies the value of the first tag, and **Tag.2.Value** specifies the value of the second tag.', example='value1_test'),
    }
  ](name='Tag', description='The tags to add to the instance.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that belongs to the VPC. You can call the [DescribeVpcs](~~35739~~) operation to query the ID of the vSwitch.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). You can call the [DescribeVpcs](~~35739~~) operation to query the ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
  zoneId?: string(name='ZoneId', description='The primary zone ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the IDs of available zones.

>  You can also set the SecondaryZoneId parameter to specify the secondary zone. The primary and secondary nodes will then be deployed in the specified primary and secondary zones to implement the master-replica zone-disaster recovery architecture. For example, you can set the ZoneId parameter to cn-hangzhou-h and the SecondaryZoneId parameter to cn-hangzhou-g.', example='cn-hangzhou-e'),
}

model CreateTairInstanceResponseBody = {
  bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the instance. Unit: MB/s.', example='96'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid'),
  config?: string(name='Config', description='The detailed configurations of the instance. The value is a JSON string. For more information about the parameter description, see [Modify the parameters of an ApsaraDB for Redis instance](~~43885~~).', example='{\\"EvictionPolicy\\":\\"volatile-lru\\",\\"hash-max-ziplist-entries\\":512,\\"zset-max-ziplist-entries\\":128,\\"list-max-ziplist-entries\\":512,\\"list-max-ziplist-value\\":64,\\"zset-max-ziplist-value\\":64,\\"set-max-intset-entries\\":512,\\"hash-max-ziplist-value\\":64}'),
  connectionDomain?: string(name='ConnectionDomain', description='The internal endpoint of the instance.', example='r-bp13ac3d047b****.tairpena.rds.aliyuncs.com'),
  connections?: long(name='Connections', description='The maximum number of connections supported by the instance.', example='10000'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp13ac3d047b****'),
  instanceName?: string(name='InstanceName', description='The name of the instance.

**

This parameter is returned only if the **InstanceName** parameter is specified in the request.', example='redistest'),
  instanceStatus?: string(name='InstanceStatus', description='The state of the instance. The return value is **Creating**.', example='Creating'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='2084452111111'),
  port?: int32(name='Port', description='The port number that is used to connect to the instance.', example='6379'),
  QPS?: long(name='QPS', description='The maximum number of read and write operations that can be processed by the instance per second. The value is a theoretical value.', example='100000'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12123216-4B00-4378-BE4B-08005BFC****'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='10****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-h'),
}

model CreateTairInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTairInstanceResponseBody(name='body'),
}

/**
  * For more information about instance selection, see [Select an ApsaraDB for Redis instance](~~223808~~).
  * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * > 
  * *   For more information about how to create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks in the ApsaraDB for Redis console, see [Create an ApsaraDB for Redis instance](~~443863~~).
  * *   To create an instance of another edition or series such as a Community Edition instance or Tair [DRAM-based instance](~~126164~~) that uses local disks, call [CreateInstance](~~60873~~).
  *
  * @param request CreateTairInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateTairInstanceResponse
 */
async function createTairInstanceWithOptions(request: CreateTairInstanceRequest, runtime: Util.RuntimeOptions): CreateTairInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.autoUseCoupon)) {
    query['AutoUseCoupon'] = request.autoUseCoupon;
  }
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.globalInstanceId)) {
    query['GlobalInstanceId'] = request.globalInstanceId;
  }
  if (!Util.isUnset(request.globalSecurityGroupIds)) {
    query['GlobalSecurityGroupIds'] = request.globalSecurityGroupIds;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.paramGroupId)) {
    query['ParamGroupId'] = request.paramGroupId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.readOnlyCount)) {
    query['ReadOnlyCount'] = request.readOnlyCount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryZoneId)) {
    query['SecondaryZoneId'] = request.secondaryZoneId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['ShardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.shardType)) {
    query['ShardType'] = request.shardType;
  }
  if (!Util.isUnset(request.srcDBInstanceId)) {
    query['SrcDBInstanceId'] = request.srcDBInstanceId;
  }
  if (!Util.isUnset(request.storage)) {
    query['Storage'] = request.storage;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTairInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about instance selection, see [Select an ApsaraDB for Redis instance](~~223808~~).
  * Before you call this operation, make sure that you are familiar with the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * > 
  * *   For more information about how to create an ApsaraDB for Redis Enhanced Edition (Tair) instance that uses cloud disks in the ApsaraDB for Redis console, see [Create an ApsaraDB for Redis instance](~~443863~~).
  * *   To create an instance of another edition or series such as a Community Edition instance or Tair [DRAM-based instance](~~126164~~) that uses local disks, call [CreateInstance](~~60873~~).
  *
  * @param request CreateTairInstanceRequest
  * @return CreateTairInstanceResponse
 */
async function createTairInstance(request: CreateTairInstanceRequest): CreateTairInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTairInstanceWithOptions(request, runtime);
}

model DeleteAccountRequest {
  accountName?: string(name='AccountName', description='The username of the account. You can call the [DescribeAccounts](~~95802~~) operation to query the username of the account.', example='demoaccount'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8129F11A-D70B-43A6-9455-CE9EAA71****'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

/**
  * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0.
  * *   The ApsaraDB for Redis instance must be in the Running state.
  *
  * @param request DeleteAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAccountResponse
 */
async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation is supported only for ApsaraDB for Redis instances that run Redis 4.0.
  * *   The ApsaraDB for Redis instance must be in the Running state.
  *
  * @param request DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  globalInstanceId?: string(name='GlobalInstanceId', example='gr-bp14rkqrhac****'),
  instanceId?: string(name='InstanceId', description='The ID of the distributed instance to which the instance belongs. This parameter is applicable to only China site (aliyun.com).', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='5D622714-AEDD-4609-9167-F5DDD3D190D2'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * For more information about how to perform the corresponding operation in the console, see [Release an instance](~~43882~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the running state.
  * *   The instance is charged on a pay-as-you-go basis.
  * >  You cannot call this operation to release a subscription instance, which is automatically released when it expires. To release a subscription instance before it expires, submit a ticket.
  *
  * @param request DeleteInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalInstanceId)) {
    query['GlobalInstanceId'] = request.globalInstanceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about how to perform the corresponding operation in the console, see [Release an instance](~~43882~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the running state.
  * *   The instance is charged on a pay-as-you-go basis.
  * >  You cannot call this operation to release a subscription instance, which is automatically released when it expires. To release a subscription instance before it expires, submit a ticket.
  *
  * @param request DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteShardingNodeRequest {
  forceTrans?: boolean(name='ForceTrans'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the data shard that you want to remove. You can specify multiple IDs at a time. Separate multiple IDs with commas (,).

> If you specify both the NodeId and ShardCount parameters, the system prioritizes the NodeId parameter.', example='r-bp1zxszhcgatnx****-db-0,r-bp1zxszhcgatnx****-db-1', deprecated='true'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  shardCount?: int32(name='ShardCount', description='The number of data shards that you want to remove. Shard removal starts from the end of the shard list.

> For example, the instance has the following data shards: db-0, db-1, db-2, db-3, and db-4. In this case, if you set this parameter to 2, db-3 and db-4 are removed.', example='1'),
}

model DeleteShardingNodeResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order. On the Orders page in the Billing Management console, you can obtain the details of the order based on the order ID.', example='22179******0904'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model DeleteShardingNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShardingNodeResponseBody(name='body'),
}

/**
  * You can also remove data shards from an instance in the ApsaraDB for Redis console. For more information, see [Adjust the number of shards for an ApsaraDB for Redis instance with cloud disks](~~198082~~).\\
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The instance is a persistent memory-optimized instance in the cluster architecture. For more information about persistent memory-optimized instances, see [Persistent memory-optimized instances](~~183956~~).
  * *   The instance has more than one data shard.
  *
  * @param request DeleteShardingNodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteShardingNodeResponse
 */
async function deleteShardingNodeWithOptions(request: DeleteShardingNodeRequest, runtime: Util.RuntimeOptions): DeleteShardingNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceTrans)) {
    query['ForceTrans'] = request.forceTrans;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['ShardCount'] = request.shardCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShardingNode',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also remove data shards from an instance in the ApsaraDB for Redis console. For more information, see [Adjust the number of shards for an ApsaraDB for Redis instance with cloud disks](~~198082~~).\\
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The instance is a persistent memory-optimized instance in the cluster architecture. For more information about persistent memory-optimized instances, see [Persistent memory-optimized instances](~~183956~~).
  * *   The instance has more than one data shard.
  *
  * @param request DeleteShardingNodeRequest
  * @return DeleteShardingNodeResponse
 */
async function deleteShardingNode(request: DeleteShardingNodeRequest): DeleteShardingNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShardingNodeWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', description='r-bp1zxszhcgatnx****', example='demoaccount'),
  instanceId?: string(name='InstanceId', description='The name of the account.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountDescription?: string(name='AccountDescription', description='The name of the account that you want to query.', example='testdec'),
      accountName?: string(name='AccountName', description='The operation that you want to perform. Set the value to **DescribeAccounts**.', example='demoaccount'),
      accountStatus?: string(name='AccountStatus', description='The ID of the request.', example='Available'),
      accountType?: string(name='AccountType', description='The description of the account.', example='Normal'),
      databasePrivileges?: {
        databasePrivilege?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege', example='RoleReadWrite'),
        }
      ](name='DatabasePrivilege')
      }(name='DatabasePrivileges', description='The permission of the account. Default value: RoleReadWrite. Valid values:

*   **RoleReadOnly**: The account has the read-only permissions.
*   **RoleReadWrite**: The account has the read and write permissions.'),
      instanceId?: string(name='InstanceId', description='The type of the account. Valid values:

*   **Normal**: standard account
*   **Super**: super account', example='r-bp10noxlhcoim2****'),
    }
  ](name='Account')
  }(name='Accounts', description='Details about account permissions.'),
  requestId?: string(name='RequestId', description='The ID of the instance.', example='6C9E114C-217C-4118-83C0-B4070222****'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountsResponseBody(name='body'),
}

/**
  * Details about returned accounts of the instance.
  *
  * @param request DescribeAccountsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAccountsResponse
 */
async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Details about returned accounts of the instance.
  *
  * @param request DescribeAccountsRequest
  * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeActiveOperationTaskRequest {
  isHistory?: int32(name='IsHistory', description='The time when the O\\&M task was created. The time in UTC is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format.', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Specify a value greater than **10**. Default value: **30**.', example='30'),
  region?: string(name='Region', description='The ID of the O\\&M task.', example='all'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  taskType?: string(name='TaskType', description='The ID of the region.', example='all'),
}

model DescribeActiveOperationTaskResponseBody = {
  items?: [ 
    {
      createdTime?: string(name='CreatedTime', description='The time when the O\\&M task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-07-15 23:59:59'),
      dbType?: string(name='DbType', description='The engine type of the instance. The return value is **Redis**.', example='redis'),
      deadline?: string(name='Deadline', description='The deadline before which the time to perform the O\\&M task can be modified. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-07-19 23:59:59'),
      id?: int32(name='Id', description='The ID of the O\\&M task.', example='114111'),
      insName?: string(name='InsName', description='The ID of the ApsaraDB for Redis instance.', example='r-bp1lgal1sdvxrz****'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the O\\&M task was modified. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-07-19 14:00:00'),
      prepareInterval?: string(name='PrepareInterval', description='The required preparation period between the task start time and the switchover time. The time is displayed in the *HH:mm:ss* format.', example='14:00:00'),
      region?: string(name='Region', description='The region ID.', example='cn-hanghzou'),
      startTime?: string(name='StartTime', description='The time when the O\\&M task was performed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-07-19 10:00:00'),
      status?: int32(name='Status', description='The state of the O\\&M task. Valid values:

*   **2**: The task is waiting for users to specify a switchover time.
*   **3**: The task is waiting to be performed.
*   **4**: The task is being performed. If the task is in this state, the [ModifyActiveOperationTask](~~197384~~) operation cannot be called to modify the scheduled switchover time.
*   **5**: The task is performed.
*   **6**: The task fails.
*   **7**: The task is canceled.', example='5'),
      switchTime?: string(name='SwitchTime', description='The time when the switchover operation was performed. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2018-07-19 14:00:00'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **rds_apsaradb_ha**: primary/secondary switchover
*   **rds_apsaradb_transfer**: instance migration
*   **rds_apsaradb_upgrade**: minor version update
*   **all**: all types', example='rds_apsaradb_upgrade'),
    }
  ](name='Items', description='The O\\&M tasks of the instance.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. It must be an integer that is greater than **0** and less than or equal to the maximum value supported by the integer data type. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The total number of entries.', example='30'),
  requestId?: string(name='RequestId', description='The time when the O\\&M task was executed. The time in UTC is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format.', example='2E1FF0CC-F42A-4B6F-A1F4-A17B1451****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The ID of the region to which pending events belong. You can call the [DescribeRegions](~~61012~~) operation to query the region IDs.

>  A value of **all** indicates all region IDs.', example='1'),
}

model DescribeActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActiveOperationTaskResponseBody(name='body'),
}

/**
  * Specifies whether to return the historical tasks. Valid values:
  * *   **0**: returns the current task. This is the default value.
  * *   **1**: returns the historical tasks.
  *
  * @param request DescribeActiveOperationTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeActiveOperationTaskResponse
 */
async function describeActiveOperationTaskWithOptions(request: DescribeActiveOperationTaskRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isHistory)) {
    query['IsHistory'] = request.isHistory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActiveOperationTask',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specifies whether to return the historical tasks. Valid values:
  * *   **0**: returns the current task. This is the default value.
  * *   **1**: returns the historical tasks.
  *
  * @param request DescribeActiveOperationTaskRequest
  * @return DescribeActiveOperationTaskResponse
 */
async function describeActiveOperationTask(request: DescribeActiveOperationTaskRequest): DescribeActiveOperationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTaskWithOptions(request, runtime);
}

model DescribeAuditLogConfigRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeInstanceAttribute](~~60996~~) operation to query the region ID of the instance.', example='cn-hanghzou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAuditLogConfigResponseBody = {
  dbAudit?: string(name='DbAudit', description='Indicates whether the audit log feature is enabled. Valid values:

*   **true**: enabled
*   **false**: disabled

> You can call the [ModifyAuditLogConfig](~~130206~~) operation to enable or disable the audit log feature for an ApsaraDB for Redis instance.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2BE6E619-A657-42E3-AD2D-18F8428A****'),
  retention?: string(name='Retention', description='The retention period of audit logs. Unit: days.', example='5'),
}

model DescribeAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogConfigResponseBody(name='body'),
}

/**
  * > You can call the [ModifyAuditLogConfig](~~130206~~) operation to enable or disable the audit log feature for an ApsaraDB for Redis instance. For more information, see [Enable the new audit log feature](~~102015~~).
  * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest minor version.
  * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
  *
  * @param request DescribeAuditLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAuditLogConfigResponse
 */
async function describeAuditLogConfigWithOptions(request: DescribeAuditLogConfigRequest, runtime: Util.RuntimeOptions): DescribeAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditLogConfig',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call the [ModifyAuditLogConfig](~~130206~~) operation to enable or disable the audit log feature for an ApsaraDB for Redis instance. For more information, see [Enable the new audit log feature](~~102015~~).
  * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest minor version.
  * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
  *
  * @param request DescribeAuditLogConfigRequest
  * @return DescribeAuditLogConfigResponse
 */
async function describeAuditLogConfig(request: DescribeAuditLogConfigRequest): DescribeAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditLogConfigWithOptions(request, runtime);
}

model DescribeAuditRecordsRequest {
  accountName?: string(name='AccountName', description='The username of the account. If you do not specify this parameter, this call applies to all accounts of the instance.', example='demo'),
  databaseName?: string(name='DatabaseName', description='The name of the database in the instance. If you do not specify this parameter, all databases are queried. Valid values: 0 to 255. 0 specifies the database 0.', example='0'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> We recommend that you specify a time range of 10 minutes or less because audit logs contain a great number of entries. Do not specify a time range that is longer than one day.', example='2019-03-25T12:10:00Z'),
  hostAddress?: string(name='HostAddress', description='The IP address of the client. If you do not specify this parameter, this call applies to all clients.', example='127.0.0.1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the node in the instance. You can set this parameter to query the data of a specified node.

> 

*   This parameter is available only for read/write splitting or cluster instances of ApsaraDB for Redis.

*   You can call the [DescribeLogicInstanceTopology](~~94665~~) operation to query node IDs.', example='r-bp1zxszhcgatnx****-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='30'),
  queryKeywords?: string(name='QueryKeywords', description='The keyword based on which the audit logs are queried. You can specify a command as a keyword to query logs. By default, all commands are queried.

> You can specify only a single keyword in each call.', example='maxclients'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2019-03-24T12:10:00Z'),
}

model DescribeAuditRecordsResponseBody = {
  endTime?: string(name='EndTime', description='The end time of the query.', example='2019-03-25T12:10:00Z'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='r-bp1zxszhcgatnx****'),
  items?: {
    SQL?: [ 
    {
      accountName?: string(name='AccountName', description='The username of the account.', example='demo'),
      databaseName?: string(name='DatabaseName', description='The database name.', example='demo'),
      executeTime?: string(name='ExecuteTime', description='The time when the command was run.', example='2019-03-25T03:22:08Z'),
      hostAddress?: string(name='HostAddress', description='The IP address of the client.', example='127.0.0.1'),
      IPAddress?: string(name='IPAddress', description='The IP address of the instance.', example='192.16.100.***'),
      nodeId?: string(name='NodeId', description='The ID of the node.

> A specific node ID is returned only if the instance uses the cluster or read/write splitting architecture.', example='r-bp1zxszhcgatnx****-db-0'),
      SQLText?: string(name='SQLText', description='The command that was run.', example='CONFIG GET maxmemory'),
      SQLType?: string(name='SQLType', description='The type of the command.', example='non_read_write'),
      totalExecutionTimes?: string(name='TotalExecutionTimes', description='The amount of time consumed to run the command.', example='0'),
    }
  ](name='SQL')
  }(name='Items', description='The collection of returned audit log entries.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F5EB478-824E-4AC4-8D2B-58F31A02****'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2019-03-24T12:10:00Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='22222'),
}

model DescribeAuditRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditRecordsResponseBody(name='body'),
}

/**
  * This operation can be called up to 100 times per minute. You can also query audit logs in the ApsaraDB for Redis console. For more information, see [Query audit logs of an instance](~~101937~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance.
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
  *
  * @param request DescribeAuditRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAuditRecordsResponse
 */
async function describeAuditRecordsWithOptions(request: DescribeAuditRecordsRequest, runtime: Util.RuntimeOptions): DescribeAuditRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.databaseName)) {
    query['DatabaseName'] = request.databaseName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hostAddress)) {
    query['HostAddress'] = request.hostAddress;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeywords)) {
    query['QueryKeywords'] = request.queryKeywords;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAuditRecords',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can be called up to 100 times per minute. You can also query audit logs in the ApsaraDB for Redis console. For more information, see [Query audit logs of an instance](~~101937~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or an ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance.
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The audit log feature is enabled for the instance. For more information, see [ModifyAuditLogConfig](~~130206~~).
  *
  * @param request DescribeAuditRecordsRequest
  * @return DescribeAuditRecordsResponse
 */
async function describeAuditRecords(request: DescribeAuditRecordsRequest): DescribeAuditRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuditRecordsWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The display language of the response. Default value: zh-CN. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English', example='zh-CN'),
  engine?: string(name='Engine', description='The category of the instance. Valid values:

*   **Redis**
*   **Memcache**', example='Redis'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go

> The default value is **PrePaid**.', example='PrePaid'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This parameter is available and required only if the **OrderType** parameter is set to **UPGRADE** or **DOWNGRADE**.', example='r-bp1zxszhcgatnx****'),
  instanceScene?: string(name='InstanceScene', example='professional'),
  nodeId?: string(name='NodeId', description='The ID of the data node for which you want to query available resources that can be created. You can call the [DescribeLogicInstanceTopology](~~94665~~) operation to query the ID of the data node. Remove the number sign (`#`) and the content that follows the number sign. For example, retain only r-bp10noxlhcoim2\\*\\*\\*\\*-db-0.

> Before you specify this parameter, you must set the **InstanceId** parameter to the ID of an instance that uses the cluster or read/write splitting architecture.', example='r-bp1zxszhcgatnx****-db-0'),
  orderType?: string(name='OrderType', description='The type of the order. Default value: BUY. Valid values:

*   **BUY**: orders that are newly created
*   **UPGRADE**: orders that are used to upgrade instances
*   **DOWNGRADE**: orders that are used to downgrade instances', example='BUY'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType', description='The instance series. Valid values:

*   **Local**: ApsaraDB for Redis Community Edition instance that uses local disks or ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance that uses local disks
*   **Tair_rdb**: ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance that uses cloud disks
*   **Tair_scm**: ApsaraDB for Redis Enhanced Edition (Tair) persistent memory-optimized instance
*   **Tair_essd**: ApsaraDB for Redis Enhanced Edition (Tair) ESSD-based instance
*   **OnECS**: ApsaraDB for Redis Community Edition instance that uses cloud disks', example='Local'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. You can call the [ListResourceGroups](~~158855~~) operation to query the IDs of resource groups.

> You can also query the IDs of resource groups in the Resource Management console. For more information, see [View basic information about a resource group](~~151181~~).', example='rg-acfmyiu4e******'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~94527~~) operation to query the most recent zone list.', example='cn-hangzhou-h'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine', description='The database engine of the instance.', example='Redis'),
          supportedEditionTypes?: {
            supportedEditionType?: [ 
            {
              editionType?: string(name='EditionType', description='The edition of the instance. Valid values:

*   **Community**: Community Edition
*   **Enterprise**: Enhanced Edition (Tair)', example='Enterprise'),
              supportedSeriesTypes?: {
                supportedSeriesType?: [ 
                {
                  seriesType?: string(name='SeriesType', description='The instance series. Valid values:

*   **enhanced_performance_type**: ApsaraDB for Redis Enhanced Edition (Tair) DRAM-based instance
*   **hybrid_storage**: ApsaraDB for Redis Community Edition hybrid-storage instance', example='enhanced_performance_type'),
                  supportedEngineVersions?: {
                    supportedEngineVersion?: [ 
                    {
                      supportedArchitectureTypes?: {
                        supportedArchitectureType?: [ 
                        {
                          architecture?: string(name='Architecture', description='The architecture of the instance. Valid values:

*   **standard**: standard architecture
*   **cluster**: cluster architecture
*   **rwsplit**: read/write splitting architecture', example='cluster'),
                          supportedShardNumbers?: {
                            supportedShardNumber?: [ 
                            {
                              shardNumber?: string(name='ShardNumber', description='The number of shards.', example='8'),
                              supportedNodeTypes?: {
                                supportedNodeType?: [ 
                                {
                                  availableResources?: {
                                    availableResource?: [ 
                                    {
                                      capacity?: long(name='Capacity', description='The memory size of the instance. Unit: MB.', example='16384'),
                                      instanceClass?: string(name='InstanceClass', description='The code of the instance type. If you want to view the code of an instance type, you can search for the code of the instance type in Help Center.', example='redis.amber.logic.sharding.2g.8db.0rodb.24proxy.multithread'),
                                      instanceClassRemark?: string(name='InstanceClassRemark', description='The description of the instance type.', example='16 GB cluster instance with 8 nodes (1,920,000 queries per second and 240,000 connections)'),
                                    }
                                  ](name='AvailableResource')
                                  }(name='AvailableResources', description='The available instance types.'),
                                  supportedNodeType?: string(name='SupportedNodeType', description='The node type of the instance. Valid values:

*   **single**: standalone
*   **double**: master-replica', example='double'),
                                }
                              ](name='SupportedNodeType')
                              }(name='SupportedNodeTypes', description='The available node types.'),
                            }
                          ](name='SupportedShardNumber')
                          }(name='SupportedShardNumbers', description='The numbers of shards that are allowed.'),
                        }
                      ](name='SupportedArchitectureType')
                      }(name='SupportedArchitectureTypes', description='The available instance architectures.'),
                      version?: string(name='Version', description='The engine version of the instance.', example='5.0'),
                    }
                  ](name='SupportedEngineVersion')
                  }(name='SupportedEngineVersions', description='The available engine versions.'),
                }
              ](name='SupportedSeriesType')
              }(name='SupportedSeriesTypes', description='The available instance series.'),
            }
          ](name='SupportedEditionType')
          }(name='SupportedEditionTypes', description='The available instance editions.'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines', description='The available database engines.'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance is located.', example='cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', description='The name of the zone.', example='Hangzhou Zone H'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones', description='Details of the zones.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='493B7308-D9C2-55F6-B042-0313BD63****'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceScene)) {
    query['InstanceScene'] = request.instanceScene;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResource',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBackupPolicyResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='The retention period of the backup data. Unit: days.', example='7'),
  dbsInstance?: string(name='DbsInstance'),
  enableBackupLog?: int32(name='EnableBackupLog', description='Indicates whether incremental data backup is enabled. Valid values:

*   **1**: Incremental data backup is enabled.
*   **0**: Incremental data backup is disabled.', example='1'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The backup cycle. Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**', example='Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The time range during which the backup was created. The time follows the ISO 8601 standard in the *HH:mm*Z-*HH:mm*Z format. The time is displayed in UTC.', example='05:00Z-06:00Z'),
  preferredNextBackupTime?: string(name='PreferredNextBackupTime', description='The next backup time. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time is displayed in UTC.', example='2019-03-14T05:28Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90B82DB7-FB28-4CC2-ADBF-1F8659F3****'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupTasksRequest {
  backupJobId?: string(name='BackupJobId', description='The progress of the backup task in percentage.', example='1162****'),
  instanceId?: string(name='InstanceId', description='The details of the backup tasks.', example='r-bp1zxszhcgatnx****'),
  jobMode?: string(name='JobMode', description='The backup mode. Valid values:

*   **Automated**: automatic backup. You can call the [DescribeBackupPolicy](~~61078~~) operation to query the automatic backup policy.
*   **Manual**: manual backup.

> By default, the information about backup tasks in both modes is returned.', example='Manual'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBackupTasksResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  backupJobs?: [ 
    {
      backupJobID?: int32(name='BackupJobID', description='The ID of the backup task.', example='8491111'),
      backupProgressStatus?: string(name='BackupProgressStatus', description='The state of the backup task. Valid values:

*   **NoStart**: The backup task is not started.
*   **Preparing**: The backup task is being prepared.
*   **Waiting**: The backup task is pending.
*   **Uploading**: The system is uploading the backup file.
*   **Checking**: The system is checking the uploaded backup file.
*   **Finished**: The backup task is completed.', example='Automated'),
      jobMode?: string(name='JobMode', description='The backup mode. Valid values:

*   **Automated**: automatic backup
*   **Manual**: manual backup', example='Manual'),
      nodeId?: string(name='NodeId', description='The ID of the data node.', example='****'),
      process?: string(name='Process', description='The progress of the backup task in percentage.', example='0'),
      startTime?: string(name='StartTime', description='The start time of the backup task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-01-05T19:24:00Z'),
      taskAction?: string(name='TaskAction', description='The type of the backup task. Valid values:

*   **TempBackupTask**: The backup task was manually performed.
*   **NormalBackupTask**: The backup task was automatically performed.', example='NormalBackupTask'),
    }
  ](name='BackupJobs', description='The details of the backup tasks.'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='The status of the backup task. Valid values:

*   **NoStart**: The backup task is not started.
*   **Preparing**: The backup task is being prepared.
*   **Waiting**: The backup task is pending.
*   **Uploading:** The system is uploading the backup file.
*   **Checking:** The system is checking the uploaded backup file.
*   **Finished**: The backup task is complete.', example='BB73740C-23E2-4392-9DA4-2660C74C****'),
}

model DescribeBackupTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupTasksResponseBody(name='body'),
}

async function describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: Util.RuntimeOptions): DescribeBackupTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupJobId)) {
    query['BackupJobId'] = request.backupJobId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobMode)) {
    query['JobMode'] = request.jobMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupTasks',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTasksWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  backupId?: int32(name='BackupId', description='The ID of the backup file.', example='11611111'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC. The end time must be later than the start time.', example='2019-03-14T18:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance whose backup files you want to query.', example='r-bp1zxszhcgatnx****'),
  needAof?: string(name='NeedAof', description='Specifies whether to enable append-only files (AOFs) persistence. Valid values:

*   **0**: no
*   **1**: yes

>  The default value is **0**.', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 30, 50, 100, 200, and 300.', example='30'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2019-03-11T10:00Z'),
}

model DescribeBackupsResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  backups?: {
    backup?: [ 
    {
      backupDBNames?: string(name='BackupDBNames', description='The databases that are backed up. Default value: **all**, which indicates that all databases are backed up.', example='all'),
      backupDownloadURL?: string(name='BackupDownloadURL', description='The public download URL of the backup file.', example='https://rdsbak-hk45-v2.oss-cn-hongkong.aliyuncs.com/********'),
      backupEndTime?: string(name='BackupEndTime', description='The end time of the backup.', example='2019-03-14T05:31:13Z'),
      backupId?: int32(name='BackupId', description='The ID of the backup file.', example='165*****50'),
      backupIntranetDownloadURL?: string(name='BackupIntranetDownloadURL', description='The internal download URL of the backup file.

>  You can download the backup file by using this URL from the Elastic Compute Service (ECS) instance that is connected to the ApsaraDB for Redis instance. The ECS instance and ApsaraDB for Redis instance must reside in the classic network or the same virtual private cloud (VPC) within the same region.', example='https://rdsbak-hk45-v2.oss-cn-hongkong.aliyuncs.com/********'),
      backupJobID?: int32(name='BackupJobID', description='The ID of the backup task.', example='24340'),
      backupMethod?: string(name='BackupMethod', description='The backup method. Valid values:

*   **Logical**
*   **Physical**', example='Physical'),
      backupMode?: string(name='BackupMode', description='The backup mode. Valid values:

*   **Automated**
*   **Manual**', example='Automated'),
      backupSize?: long(name='BackupSize', description='The size of the backup file.', example='1024'),
      backupStartTime?: string(name='BackupStartTime', description='The start time of the backup.', example='2019-03-14T05:28:50Z'),
      backupStatus?: string(name='BackupStatus', description='The state of the backup task. Valid values:

*   **Success**: The task is successful.
*   **Failed**: The task failed.', example='Success'),
      backupType?: string(name='BackupType', description='The backup type of the backup file. Valid values:

*   **FullBackup**
*   **IncrementalBackup**', example='FullBackup'),
      engineVersion?: string(name='EngineVersion', description='The major engine version of the instance.', example='4.0'),
      nodeInstanceId?: string(name='NodeInstanceId', description='The node ID.

>  If a standard instance is used, the instance ID is returned.', example='r-bp10noxlhcoim2****-db-1'),
    }
  ](name='Backup')
  }(name='Backups', description='Details of the backup files.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='963C20F0-7CE1-4591-AAF3-6F3CD1CE****'),
  totalCount?: int32(name='TotalCount', description='The total number of backup files that were returned.', example='5'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupsResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeBackups\\&type=RPC\\&version=2015-01-01)
  *
  * @param request DescribeBackupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupsResponse
 */
async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.needAof)) {
    query['NeedAof'] = request.needAof;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackups',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=R-kvstore\\&api=DescribeBackups\\&type=RPC\\&version=2015-01-01)
  *
  * @param request DescribeBackupsRequest
  * @return DescribeBackupsResponse
 */
async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeCacheAnalysisReportRequest {
  analysisType?: string(name='AnalysisType', description='The type of analytics. Set the value to **BigKey**.', example='BigKey'),
  date?: string(name='Date', description='The date to query. You can query the report for one day each time. Specify the date in the *yyyy-MM-dd*Z format. The time must be in UTC.', example='2019-08-05Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the child node in the cluster instance.

> If this parameter is not specified, the analytics results of all child nodes in the instance are returned.', example='-bp1zxszhcgatnx****-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumbers?: int32(name='PageNumbers', description='The number of the page to return.

> If the parameter value exceeds the maximum number of the returned pages, an empty large key list is returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**.

> The default value is **30**.', example='30'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCacheAnalysisReportResponseBody = {
  bigKeys?: [  map[string]any ](name='BigKeys', description='Details of the large keys.'),
  hotKeys?: [  map[string]any ](name='HotKeys', description='Details of the hotkeys.

> This parameter is not returned because ApsaraDB for Redis does not support hotkey analytics.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='30'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A057C066-C3F5-4CC9-9FE4-A8D8B0DC****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of entries returned.', example='160'),
}

model DescribeCacheAnalysisReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCacheAnalysisReportResponseBody(name='body'),
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  *
  * @param request DescribeCacheAnalysisReportRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCacheAnalysisReportResponse
 */
async function describeCacheAnalysisReportWithOptions(request: DescribeCacheAnalysisReportRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.analysisType)) {
    query['AnalysisType'] = request.analysisType;
  }
  if (!Util.isUnset(request.date)) {
    query['Date'] = request.date;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumbers)) {
    query['PageNumbers'] = request.pageNumbers;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCacheAnalysisReport',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  *
  * @param request DescribeCacheAnalysisReportRequest
  * @return DescribeCacheAnalysisReportResponse
 */
async function describeCacheAnalysisReport(request: DescribeCacheAnalysisReportRequest): DescribeCacheAnalysisReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisReportWithOptions(request, runtime);
}

model DescribeCacheAnalysisReportListRequest {
  days?: int32(name='Days', description='The time range to query. Default value: 7. Unit: days.

> If daily automatic analysis has not started and manual analysis is not performed, no records are returned.', example='7'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the child node in the cluster instance.

> If this parameter is not specified, the analysis results of all child nodes in the instance are returned.', example='r-bp1zxszhcgatnx****-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumbers?: int32(name='PageNumbers', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**.

> The default value is **30**.', example='30'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeCacheAnalysisReportListResponseBody = {
  dailyTasks?: {
    dailyTask?: [ 
    {
      date?: string(name='Date', description='The date when the offline key analytics task was performed.', example='2019-08-01Z'),
      tasks?: {
        task?: [ 
        {
          nodeId?: string(name='NodeId', description='The ID of the child node in the cluster instance.', example='r-bp1zxszhcgatnx****-db-0'),
          startTime?: string(name='StartTime', description='The start time of the offline key analytics task.', example='2019-08-01T19:08:49Z'),
          status?: string(name='Status', description='The state of the offline key analytics task. Valid values:

*   **success**
*   **running**', example='success'),
          taskId?: string(name='TaskId', description='The ID of the task.', example='156465****'),
        }
      ](name='Task')
      }(name='Tasks', description='Details of the offline key analytics tasks.'),
    }
  ](name='DailyTask')
  }(name='DailyTasks', description='Details of the offline key analytics tasks.'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='1041xxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='743D0A03-52DE-4E6F-8D09-EC1414CF****'),
}

model DescribeCacheAnalysisReportListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCacheAnalysisReportListResponseBody(name='body'),
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  *
  * @param request DescribeCacheAnalysisReportListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCacheAnalysisReportListResponse
 */
async function describeCacheAnalysisReportListWithOptions(request: DescribeCacheAnalysisReportListRequest, runtime: Util.RuntimeOptions): DescribeCacheAnalysisReportListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumbers)) {
    query['PageNumbers'] = request.pageNumbers;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCacheAnalysisReportList',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > ApsaraDB for Redis has optimized the cache analytics feature to improve user experience. This API operation is phased out. You can use the new API operation for cache analytics. For more information, see [API operations for cache analytics are upgraded](~~186019~~).
  * Before you call this operation, make sure that the instance meets the following requirements:
  * *   The engine version of the instance is Redis 4.0 or later.
  * *   The instance uses the latest minor version. For more information about how to check whether to update the minor version of an instance, see [How do I check whether the minor version of an ApsaraDB for Redis instance is the latest?](~~129203~~)
  *
  * @param request DescribeCacheAnalysisReportListRequest
  * @return DescribeCacheAnalysisReportListResponse
 */
async function describeCacheAnalysisReportList(request: DescribeCacheAnalysisReportListRequest): DescribeCacheAnalysisReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCacheAnalysisReportListWithOptions(request, runtime);
}

model DescribeClusterMemberInfoRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query instance IDs.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**.

>  Default value: **30**.', example='30'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeClusterMemberInfoResponseBody = {
  clusterChildren?: [ 
    {
      bandWidth?: long(name='BandWidth', description='The maximum bandwidth of the node. Unit: MB/s.

> This parameter is returned only if the return value of **Service** is **redis**, which indicates a data node.', example='96'),
      binlogRetentionDays?: int32(name='BinlogRetentionDays', description='The retention period of binlogs.', example='7'),
      bizType?: string(name='BizType', description='The type of workload. The return value is **ALIYUN**.', example='ALIYUN'),
      capacity?: long(name='Capacity', description='The maximum memory capacity per data node. Unit: MB.

> This parameter is returned only if the return value of **Service** is **redis**, which indicates a data node.', example='1024'),
      classCode?: string(name='ClassCode', description='The specifications of the data node. For more information, see [Community Edition instances that use cloud disks](~~164477~~).', example='redis.shard.small.ce'),
      connections?: long(name='Connections', description='The maximum number of connections supported by the data node.', example='20000'),
      currentBandWidth?: long(name='CurrentBandWidth', description='The current bandwidth of the node, which consists of the default bandwidth and the increased bandwidth. Unit: MB/s.

> This parameter is returned only if the instance is created in a dedicated cluster.', example='100'),
      diskSizeMB?: int32(name='DiskSizeMB', description='The storage capacity of the [enhanced SSD (ESSD)](~~122389~~) that is used by the data node. Unit: MB.

> The ESSD is used only to store system operating data, such as Persistent Memory (PMEM). It is not used as a medium to write and read data.', example='4096'),
      id?: long(name='Id', description='The ID of the replica set in the node.', example='501791111'),
      name?: string(name='Name', description='The name of the data node.', example='r-bp1zxszhcgatnx****-db-0'),
      replicaSize?: int32(name='ReplicaSize', description='The number of replica nodes.', example='0'),
      resourceGroupName?: string(name='ResourceGroupName', description='The name of the resource group to which the node belongs.', example='GLOBAL_ZHANGJIAKOU_A'),
      service?: string(name='Service', description='The node type. Valid values:

*   **redis**: data node
*   **redis_cs**: config server', example='redis'),
      serviceVersion?: string(name='ServiceVersion', description='The major version of the node.', example='5.0'),
      userId?: string(name='UserId', description='The ID of the user.', example='2****_176498472570****'),
    }
  ](name='ClusterChildren', description='Details of nodes in the cluster instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D9F3768-EDA9-4811-943E-42C8006E****'),
}

model DescribeClusterMemberInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterMemberInfoResponseBody(name='body'),
}

/**
  * > This API operation is applicable only to ApsaraDB for Redis instances that use [cloud disks](~~188068~~) and the [cluster architecture](~~52228~~).
  *
  * @param request DescribeClusterMemberInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClusterMemberInfoResponse
 */
async function describeClusterMemberInfoWithOptions(request: DescribeClusterMemberInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterMemberInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterMemberInfo',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > This API operation is applicable only to ApsaraDB for Redis instances that use [cloud disks](~~188068~~) and the [cluster architecture](~~52228~~).
  *
  * @param request DescribeClusterMemberInfoRequest
  * @return DescribeClusterMemberInfoResponse
 */
async function describeClusterMemberInfo(request: DescribeClusterMemberInfoRequest): DescribeClusterMemberInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterMemberInfoWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest {
  instanceId?: string(name='InstanceId', description='r-bp1zxszhcgatnx****', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDBInstanceNetInfoResponseBody = {
  instanceNetworkType?: string(name='InstanceNetworkType', description='The ID of the vSwitch.', example='CLASSIC'),
  netInfoItems?: {
    instanceNetInfo?: [ 
    {
      connectionString?: string(name='ConnectionString', description='Indicates whether the address is a private endpoint. Valid values:

*   **0**: no.
*   **1**: yes.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The endpoint of the instance.', example='1'),
      directConnection?: int32(name='DirectConnection', description='The operation that you want to perform. Set the value to **DescribeDBInstanceNetInfo**.', example='0'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time of the classic network address of an ApsaraDB for Redis instance. Unit: seconds.', example='5183779'),
      IPAddress?: string(name='IPAddress', example='172.16.49.***'),
      IPType?: string(name='IPType', description='The network type of the IP address. Valid values:

*   **Public**: Internet.
*   **Inner**: classic network.
*   **Private**: VPC.', example='Inner'),
      port?: string(name='Port', description='The network type of the endpoint. Valid values:

*   **0**: the Internet.
*   **1**: classic network.
*   **2**: VPC.', example='6379'),
      upgradeable?: string(name='Upgradeable', description='The ID of the instance.', example='0'),
      VPCId?: string(name='VPCId', description='Queries the network information about an ApsaraDB for Redis instance.', example='vpc-bp1nme44gek34slfc****'),
      VPCInstanceId?: string(name='VPCInstanceId', description='The list of network information about the instance.', example='r-bp1ky7j6qc7umk****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the instance.', example='vsw-bp1e7clcw529l773d****'),
    }
  ](name='InstanceNetInfo')
  }(name='NetInfoItems', description='The network type. Valid values:

*   **CLASSIC**: The instance runs in a classic network.
*   **VPC**: The instance runs in a virtual private cloud (VPC).'),
  requestId?: string(name='RequestId', description='The IP address.', example='FC77D4E1-2A7C-4F0B-A4CC-CE0B9C314B9B'),
}

model DescribeDBInstanceNetInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceNetInfoResponseBody(name='body'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceNetInfo',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model DescribeDedicatedClusterInstanceListRequest {
  clusterId?: string(name='ClusterId', description='The ID of the dedicated cluster. You can view the dedicated cluster ID on the Dedicated Clusters page in the ApsaraDB for MyBase console.

> Separate multiple IDs with commas (,).', example='dhg-5f2v98840ioq****'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The ID of the host in the dedicated cluster. You can call the [DescribeDedicatedHosts](~~200944~~) operation to query the host ID.

> Separate multiple IDs with commas (,).', example='ch-t4n664a9mal4c****'),
  engine?: string(name='Engine', description='The database engine of the instance. Set the value to **Redis**.', example='Redis'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Set the value to **5.0**.', example='5.0'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> The instance must be created by using a dedicated cluster. For more information, see [What is ApsaraDB for MyBase?](~~141455~~)', example='r-bp1zxszhcgatnx****'),
  instanceNetType?: string(name='InstanceNetType', description='The network type of the instance. Valid values:

*   **0**: Internet
*   **1**: classic network
*   **2**: Virtual Private Cloud (VPC)', example='2'),
  instanceStatus?: int32(name='InstanceStatus', description='The state of the instance. Valid values:

*   **0**: The instance is being created.
*   **1**: The instance is running.
*   **3**: The instance is being deleted.
*   **5**: The configurations of the instance are being changed.
*   **6**: The instance is being migrated.
*   **7**: The instance is being restored from a backup.
*   **8**: A master-replica switchover is in progress.
*   **9**: Expired data of the instance is being deleted.', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~94527~~) operation to query the most recent zone list.', example='cn-hangzhou-e'),
}

model DescribeDedicatedClusterInstanceListResponseBody = {
  instances?: [ 
    {
      bandWidth?: long(name='BandWidth', description='The default bandwidth of the instance. Unit: Mbit/s.', example='24'),
      characterType?: string(name='CharacterType', description='The architecture of the instance. Valid values:

*   **logic**: cluster
*   **normal**: standard', example='logic'),
      clusterId?: string(name='ClusterId', description='The ID of the dedicated cluster.', example='dhg-rx71fc5ndh9o****'),
      clusterName?: string(name='ClusterName', description='The name of the dedicated cluster to which the instance belongs.', example='testname'),
      connectionDomain?: string(name='ConnectionDomain', description='The private endpoint of the instance.', example='r-t4ncdi1dgi0ja8****.redis.hangzhou.rds.aliyuncs.com'),
      createTime?: string(name='CreateTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2021-05-06T07:09:40Z'),
      currentBandWidth?: long(name='CurrentBandWidth', description='The current bandwidth of the instance, which consists of the default bandwidth and the additional bandwidth. Unit: Mbit/s.', example='50'),
      customId?: string(name='CustomId', description='The custom ID that is used for instance internal maintenance.', example='4652****'),
      engine?: string(name='Engine', description='The database engine of the instance. The return value is **Redis**.', example='redis'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. The return value is **5.0**.', example='5.0'),
      instanceClass?: string(name='InstanceClass', description='The instance type of the instance.', example='redis.cluster.sharding.common.ce'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1e7vl6ygf1yq****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='testdb'),
      instanceNodeList?: [ 
        {
          dedicatedHostName?: string(name='DedicatedHostName', description='The ID of the host in the dedicated cluster.', example='ch-bp13vf0y9gx3c****'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1e7vl6ygf1yq****'),
          nodeId?: int32(name='NodeId', description='The ID of the node.', example='17921111'),
          nodeIp?: string(name='NodeIp', description='The IP address of the node.', example='10.0.33.***'),
          nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **db**: data node.
*   **proxy**: proxy node.
*   **normal**: regular node. This value is returned when the instance runs in the standard architecture.', example='normal'),
          port?: int32(name='Port', description='The port number that is used to connect to the node.', example='3001'),
          role?: string(name='Role', description='The role of the node. Valid values:

*   **master**: master node
*   **slave**: replica node', example='master'),
          zoneId?: string(name='ZoneId', description='The zone ID of the node.', example='cn-hangzhou-h'),
        }
      ](name='InstanceNodeList', description='Details about the nodes.'),
      instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is suspended.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.', example='Normal'),
      maintainEndTime?: string(name='MaintainEndTime', description='The end time of the maintenance window. The time is in the *HH:mm*Z format. The time is displayed in UTC.', example='17:00Z'),
      maintainStartTime?: string(name='MaintainStartTime', description='The start time of the maintenance window. The time is in the *HH:mm*Z format. The time is displayed in UTC.', example='16:00Z'),
      proxyCount?: int32(name='ProxyCount', description='The number of proxy nodes.

> *   If the return value is **0**, the proxy mode is disabled. If the return value is an integer that is greater than **0**, the proxy mode is enabled. This integer indicates the number of proxy nodes in the instance. For example, a value of **1** indicates that the instance has one proxy node.
> *   This parameter is returned only when the instance is a [cluster instance](~~52228~~).', example='1'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      shardCount?: int32(name='ShardCount', description='The number of shards.

> This parameter is returned only when the ApsaraDB for Redis instance is a [cluster instance](~~52228~~).', example='3'),
      storageType?: string(name='StorageType', description='The storage type of the instance. The return value is LOCAL_SSD, which indicates [enhanced SSDs (ESSDs)](~~122389~~).', example='LOCAL_SSD'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-t4n2clc70t3hqwsrr****'),
      vswitchId?: string(name='VswitchId', description='The ID of the vSwitch.', example='vsw-t4nvrca24dczppq44****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-e'),
    }
  ](name='Instances', description='Details of the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='712CCF2A-16BD-411B-93F7-E978BEF2****'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model DescribeDedicatedClusterInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedClusterInstanceListResponseBody(name='body'),
}

/**
  * > If you want to query the information about ApsaraDB for Redis instances that are not deployed in a dedicated cluster, call the [DescribeInstanceAttribute](~~60996~~) operation.
  *
  * @param request DescribeDedicatedClusterInstanceListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDedicatedClusterInstanceListResponse
 */
async function describeDedicatedClusterInstanceListWithOptions(request: DescribeDedicatedClusterInstanceListRequest, runtime: Util.RuntimeOptions): DescribeDedicatedClusterInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceNetType)) {
    query['InstanceNetType'] = request.instanceNetType;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    query['InstanceStatus'] = request.instanceStatus;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedClusterInstanceList',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > If you want to query the information about ApsaraDB for Redis instances that are not deployed in a dedicated cluster, call the [DescribeInstanceAttribute](~~60996~~) operation.
  *
  * @param request DescribeDedicatedClusterInstanceListRequest
  * @return DescribeDedicatedClusterInstanceListResponse
 */
async function describeDedicatedClusterInstanceList(request: DescribeDedicatedClusterInstanceListRequest): DescribeDedicatedClusterInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedClusterInstanceListWithOptions(request, runtime);
}

model DescribeEncryptionKeyRequest {
  encryptionKey?: string(name='EncryptionKey', description='The ID of the custom key. You can call the [DescribeEncryptionKeyList](~~302339~~) operation to query the ID of the key.', example='ad463061-992d-4195-8a94-ed63********'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeEncryptionKeyResponseBody = {
  creator?: string(name='Creator', description='The ID of the Alibaba Cloud account that is used to create the custom key.', example='17649847********'),
  deleteDate?: string(name='DeleteDate', description='The time when the custom key is expected to be deleted. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> If the return value is an empty string, the custom key cannot be automatically deleted.', example='2021-09-24T18:22:03Z'),
  description?: string(name='Description', description='The description of the custom key. By default, an empty string is returned.', example='testkey'),
  encryptionKey?: string(name='EncryptionKey', description='The ID of the custom key.', example='ad463061-992d-4195-8a94-ed63********'),
  encryptionKeyStatus?: string(name='EncryptionKeyStatus', description='The state of the custom key. Valid values:

*   **Enabled**: The custom key is available.
*   **Disabled**: The custom key is unavailable.', example='Enabled'),
  encryptionName?: string(name='EncryptionName', description='The encryption algorithm.', example='AES-CTR-256'),
  keyUsage?: string(name='KeyUsage', description='The purpose of the custom key. A value of `ENCRYPT/DECRYPT` indicates encryption and decryption.', example='ENCRYPT/DECRYPT'),
  materialExpireTime?: string(name='MaterialExpireTime', description='The time when the custom key expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> If the return value is an empty string, the custom key does not expire.', example='2021-09-24T18:22:03Z'),
  origin?: string(name='Origin', description='The source of the custom key. A value of **Aliyun_KMS** indicates [Key Management Service (KMS)](~~28935~~) of Alibaba Cloud.', example='Aliyun_KMS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A931CE5-C926-5E09-B0EC-6299C4A6****'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the Resource Access Management (RAM) role to which you want to grant permissions.', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
}

model DescribeEncryptionKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEncryptionKeyResponseBody(name='body'),
}

/**
  * Before you call this operation, TDE must be enabled for the ApsaraDB for Redis instance by using a custom key. For more information, see [ModifyInstanceTDE](~~302337~~).
  * > For more information about TDE, see [Enable TDE](~~265913~~).
  *
  * @param request DescribeEncryptionKeyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEncryptionKeyResponse
 */
async function describeEncryptionKeyWithOptions(request: DescribeEncryptionKeyRequest, runtime: Util.RuntimeOptions): DescribeEncryptionKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEncryptionKey',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, TDE must be enabled for the ApsaraDB for Redis instance by using a custom key. For more information, see [ModifyInstanceTDE](~~302337~~).
  * > For more information about TDE, see [Enable TDE](~~265913~~).
  *
  * @param request DescribeEncryptionKeyRequest
  * @return DescribeEncryptionKeyResponse
 */
async function describeEncryptionKey(request: DescribeEncryptionKeyRequest): DescribeEncryptionKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEncryptionKeyWithOptions(request, runtime);
}

model DescribeEncryptionKeyListRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeEncryptionKeyListResponseBody = {
  keyIds?: {
    keyId?: [ string ](name='KeyId')
  }(name='KeyIds', description='The custom keys that are available in the region.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='10E2160B-959C-5C3E-BFE6-86EC5925****'),
}

model DescribeEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEncryptionKeyListResponseBody(name='body'),
}

/**
  * *   You can specify a custom key when you call the [ModifyInstanceTDE](~~302337~~) operation to enable Transparent Data Encryption (TDE). You can call the DescribeEncryptionKeyList operation to query the custom keys that are in use. To create a custom key, you can call the [CreateKey](~~28947~~) operation of Key Management Service (KMS).
  * *   For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
  *
  * @param request DescribeEncryptionKeyListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEncryptionKeyListResponse
 */
async function describeEncryptionKeyListWithOptions(request: DescribeEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeEncryptionKeyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEncryptionKeyList',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can specify a custom key when you call the [ModifyInstanceTDE](~~302337~~) operation to enable Transparent Data Encryption (TDE). You can call the DescribeEncryptionKeyList operation to query the custom keys that are in use. To create a custom key, you can call the [CreateKey](~~28947~~) operation of Key Management Service (KMS).
  * *   For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
  *
  * @param request DescribeEncryptionKeyListRequest
  * @return DescribeEncryptionKeyListResponse
 */
async function describeEncryptionKeyList(request: DescribeEncryptionKeyListRequest): DescribeEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEncryptionKeyListWithOptions(request, runtime);
}

model DescribeEngineVersionRequest {
  instanceId?: string(name='InstanceId', description='The instance ID. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeEngineVersionResponseBody = {
  DBVersionRelease?: string(name='DBVersionRelease', description='The release notes for the minor version of the instance, including the release date, minor version number, release type such as new feature, and description.', example='{\\\\"releaseInfo\\\\":{\\\\"createTime\\\\":\\\\"2021-07-27\\\\",\\\\"level\\\\":1,\\\\"releaseVersion\\\\":\\\\"0.5.4\\\\",\\\\"releaseNote\\\\":\\\\"\\[Optimized feature]: The stability is improved. \\\\"}],\\\\"versionChangesLevel\\\\":2}'),
  enableUpgradeMajorVersion?: boolean(name='EnableUpgradeMajorVersion', description='Indicates whether the instance major version can be upgraded. Valid values:

*   **true**: The major version can be upgraded.
*   **false**: The major version is the latest version and cannot be upgraded.

> To upgrade the major version, call the [ModifyInstanceMajorVersion](~~95259~~) operation.', example='true'),
  enableUpgradeMinorVersion?: boolean(name='EnableUpgradeMinorVersion', description='Indicates whether the instance minor version can be updated. Valid values:

*   **true**: The minor version can be updated.
*   **false**: The minor version is the latest version and cannot be updated.

> To update the minor version, call the [ModifyInstanceMinorVersion](~~129381~~) operation.', example='true'),
  engine?: string(name='Engine', description='The database engine of the instance. Valid values: **redis** and **memcache**.', example='redis'),
  isLatestVersion?: boolean(name='IsLatestVersion', description='Indicates whether the instance uses the latest minor version. Valid values:

*   **true**
*   **false**', example='false'),
  isNewSSLMode?: string(name='IsNewSSLMode', description='Indicates whether the instance supports the new SSL encryption feature.', example='1'),
  isRedisCompatibleVersion?: string(name='IsRedisCompatibleVersion', description='Indicates whether the instance runs a Redis version.', example='1'),
  isSSLEnable?: string(name='IsSSLEnable', description='Indicate whether the instance has the SSL encryption feature enabled.', example='1'),
  majorVersion?: string(name='MajorVersion', description='The major version of the instance.', example='5.0'),
  minorVersion?: string(name='MinorVersion', description='The minor version of the instance.', example='redis-5.0_0.5.0'),
  proxyMinorVersion?: string(name='ProxyMinorVersion', description='The minor version of proxy nodes.

> This parameter is returned only for cluster and read/write splitting instances.', example='6.6.0'),
  proxyVersionRelease?: string(name='ProxyVersionRelease', description='The release notes for the minor version of proxy nodes. The release notes include the release date, minor version number, release type such as new feature, and description.

> This parameter is returned only for cluster and read/write splitting instances.', example='{\\\\"releaseInfo\\\\":\\[{\\\\"createTime\\\\":\\\\"2021-06-08\\\\",\\\\"level\\\\":0,\\\\"releaseVersion\\\\":\\\\"6.6.2\\\\",\\\\"releaseNote\\\\":\\\\"\\[New feature]: More commands are available for internal use within ApsaraDB for Redis. \\\\"}],\\\\"versionChangesLevel\\\\":2}'),
  requestId?: string(name='RequestId', description='The request ID.', example='A52974D1-9D57-4805-86CC-92E6EDE8****'),
}

model DescribeEngineVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEngineVersionResponseBody(name='body'),
}

async function describeEngineVersionWithOptions(request: DescribeEngineVersionRequest, runtime: Util.RuntimeOptions): DescribeEngineVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEngineVersion',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEngineVersion(request: DescribeEngineVersionRequest): DescribeEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEngineVersionWithOptions(request, runtime);
}

model DescribeGlobalDistributeCacheRequest {
  globalInstanceId?: string(name='GlobalInstanceId', description='Details of the child instances.', example='gr-bp14rkqrhac****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='20'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  subInstanceId?: string(name='SubInstanceId', description='The ID of the distributed instance.', example='gr-bp1zcjlobkyrq****'),
}

model DescribeGlobalDistributeCacheResponseBody = {
  globalDistributeCaches?: [ 
    {
      globalInstanceId?: string(name='GlobalInstanceId', description='The state of the distributed instance. Valid values:

*   **Normal**: The instance is normal.
*   **Changing**: The configurations of the instance are being changed.
*   **Creating**: The instance is being created.', example='gr-bp14rkqrhac****'),
      status?: string(name='Status', description='The ID of the distributed instance.', example='Normal'),
      subInstances?: [ 
        {
          globalInstanceId?: string(name='GlobalInstanceId', example='gr-bp14rkqrhac****'),
          instanceClass?: string(name='InstanceClass', example='redis.amber.logic.sharding.2g.2db.0rodb.6proxy.multithread'),
          instanceID?: string(name='InstanceID', example='r-bp1zxszhcgatnx****'),
          instanceStatus?: string(name='InstanceStatus', example='Normal'),
          regionId?: string(name='RegionId', example='cn-hangzhou'),
        }
      ](name='SubInstances', description='The ID of the request.'),
    }
  ](name='GlobalDistributeCaches', description='Details of the distributed instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The instance type of the child instance. For more information, see the following topics:

*   [Standard DRAM-based instances](~~145228~~)
*   [Cluster DRAM-based instances](~~150458~~)
*   [Read/write splitting DRAM-based instances](~~150459~~)', example='20'),
  requestId?: string(name='RequestId', description='The ID of the child instance that is attached to the distributed instance.', example='F3F44BE3-5419-4B61-9BAC-E66E295A****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The number of entries returned per page.', example='1'),
}

model DescribeGlobalDistributeCacheResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGlobalDistributeCacheResponseBody(name='body'),
}

async function describeGlobalDistributeCacheWithOptions(request: DescribeGlobalDistributeCacheRequest, runtime: Util.RuntimeOptions): DescribeGlobalDistributeCacheResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalInstanceId)) {
    query['GlobalInstanceId'] = request.globalInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.subInstanceId)) {
    query['SubInstanceId'] = request.subInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGlobalDistributeCache',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGlobalDistributeCache(request: DescribeGlobalDistributeCacheRequest): DescribeGlobalDistributeCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalDistributeCacheWithOptions(request, runtime);
}

model DescribeGlobalSecurityIPGroupRequest {
  globalSecurityGroupId?: string(name='GlobalSecurityGroupId', description='The ID of the IP whitelist template.', example='g-zsldxfiwjmti0kcm****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeGlobalSecurityIPGroupResponseBody = {
  globalSecurityIPGroup?: [ 
    {
      DBInstances?: [ string ](name='DBInstances', description='The instance IDs.'),
      GIpList?: string(name='GIpList', description='The IP address in the whitelist template.

>  Multiple IP addresses are separated by commas (,). You can create up to 1,000 IP addresses or CIDR blocks for all IP whitelists.', example='125.38.177.62,221.197.232.185'),
      globalIgName?: string(name='GlobalIgName', description='The name of the IP whitelist template. The name must meet the following requirements:

*   The name can contain lowercase letters, digits, and underscores (\\_).
*   The name must start with a letter and end with a letter or digit.
*   The name must be 2 to 120 characters in length.', example='test_123'),
      globalSecurityGroupId?: string(name='GlobalSecurityGroupId', description='The ID of the IP whitelist template.', example='g-zsldxfiwjmti0kcm****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='GlobalSecurityIPGroup', description='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FF6158E-3394-4A90-B634-79C49184****'),
}

model DescribeGlobalSecurityIPGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGlobalSecurityIPGroupResponseBody(name='body'),
}

async function describeGlobalSecurityIPGroupWithOptions(request: DescribeGlobalSecurityIPGroupRequest, runtime: Util.RuntimeOptions): DescribeGlobalSecurityIPGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGlobalSecurityIPGroup',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGlobalSecurityIPGroup(request: DescribeGlobalSecurityIPGroupRequest): DescribeGlobalSecurityIPGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGlobalSecurityIPGroupWithOptions(request, runtime);
}

model DescribeHistoryMonitorValuesRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> 

*   You can query the monitoring data of the last month. The maximum time range that you can specify for a query is seven days.

*   If the number of data nodes in the instance is greater than 32, the time range to query for the Data Node Aggregation and Proxy Node Aggregation metrics cannot exceed 1 hour.', example='2022-11-06T00:30:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  intervalForHistory?: string(name='IntervalForHistory', description='The interval at which to collect monitoring data. Unit: minutes. Set the value to `01m`.', example='01m'),
  monitorKeys?: string(name='MonitorKeys', description='The monitoring metrics. Separate multiple metrics with commas (,).

> 

*   This parameter is empty by default, which indicates that the UsedMemory and quotaMemory metrics are returned. For more information about supported monitoring metrics and their descriptions, see [MonitorKeys](~~189831~~).

*   To ensure query efficiency, we recommend that you specify no more than five metrics for a single node at a time, and specify only a single metric when you query aggregate metrics.', example='memoryUsage'),
  nodeId?: string(name='NodeId', description='The ID of the node in the instance. You can set this parameter to query the data of a specified node.

> 

*   This parameter is available only for read/write splitting or cluster instances of ApsaraDB for Redis.

*   You can call the [DescribeLogicInstanceTopology](~~94665~~) operation to query node IDs.', example='r-bp1zxszhcgatnx****-db-0#1679****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.', example='2022-11-06T00:00:00Z'),
}

model DescribeHistoryMonitorValuesResponseBody = {
  monitorHistory?: string(name='MonitorHistory', description='The monitoring data returned in the JSON format. For more information, see [Metrics](~~189831~~).

> 

*   Only metrics whose values are not 0 are returned. This improves data transmission efficiency. Metrics that are not displayed are represented by the default value of **0**.

*   The query results are aligned with the data aggregation frequency. If the specified time range to query is less than or equal to 10 minutes and the data is aggregated once every 5 seconds, query results are returned at an interval of 5 seconds. If the specified StartTime value does not coincide with a point in time for data aggregation, the system returns the latest point in time for data aggregation as the first point in time. For example, if you set the StartTime parameter to 2022-01-20T12:01:48Z, the first point in time returned is 2022-01-20T12:01:45Z.', example='"{\\"2022-11-06T00:00:00Z\\":{\\"memoryUsage\\":\\"6.67\\"},\\"2022-11-06T00:00:05Z\\":{\\"memoryUsage\\":\\"6.67\\"},\\"2022-11-06T00:00:10Z\\":{\\"memoryUsage\\":\\"6.67\\"},\\"2022-11-06T00:00:15Z\\":{\\"memoryUsage\\":\\"6.67\\"},\\"2022-11-06T00:00:20Z\\":{\\"memoryUsage\\":\\"6.67\\"},\\"2022-11-06T00:00:25Z\\":{\\"memoryUsage\\":\\"6.67\\"}}"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0997EE8-F4C2-4503-9168-85177ED7****'),
}

model DescribeHistoryMonitorValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHistoryMonitorValuesResponseBody(name='body'),
}

/**
  * You can also query the performance monitoring data of an instance in the ApsaraDB for Redis console. For more information, see [Metrics](~~43887~~).
  *
  * @param request DescribeHistoryMonitorValuesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeHistoryMonitorValuesResponse
 */
async function describeHistoryMonitorValuesWithOptions(request: DescribeHistoryMonitorValuesRequest, runtime: Util.RuntimeOptions): DescribeHistoryMonitorValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intervalForHistory)) {
    query['IntervalForHistory'] = request.intervalForHistory;
  }
  if (!Util.isUnset(request.monitorKeys)) {
    query['MonitorKeys'] = request.monitorKeys;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHistoryMonitorValues',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also query the performance monitoring data of an instance in the ApsaraDB for Redis console. For more information, see [Metrics](~~43887~~).
  *
  * @param request DescribeHistoryMonitorValuesRequest
  * @return DescribeHistoryMonitorValuesResponse
 */
async function describeHistoryMonitorValues(request: DescribeHistoryMonitorValuesRequest): DescribeHistoryMonitorValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryMonitorValuesWithOptions(request, runtime);
}

model DescribeHistoryTasksRequest {
  fromExecTime?: int32(name='FromExecTime', description='The minimum execution duration of a task. This parameter is used to filter tasks whose execution duration is longer than the minimum execution duration. Unit: seconds. The default value is 0, which indicates that no limit is imposed.', example='0'),
  fromStartTime?: string(name='FromStartTime', description='The beginning of the time range to query. Only tasks that have a start time later than or equal to the time specified by this parameter are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. The start time can be up to 30 days earlier than the current time. If you set this parameter to a time more than 30 days earlier than the current time, this time is automatically converted to a time that is exactly 30 days earlier than the current time.', example='2022-01-02T11:31:03Z'),
  instanceId?: string(name='InstanceId', description='The instance ID. Separate multiple instance IDs with commas (,). You can specify up to 30 instance IDs. This parameter is empty by default, which indicates that you can specify an unlimited number of instance IDs.', example='r-uf62br2491p5l****'),
  instanceType?: string(name='InstanceType', description='Set the value to Instance.', example='Instance'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 10 to 100. Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the pending task. You can call the [DescribeRegions](https://next.api.aliyun.com/document/R-kvstore/2015-01-01/DescribeRegions) operation to query the most recent region list.', example='cn-beijing'),
  resourceOwnerAccount?: long(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status', description='The task status. Valid values:

*   Scheduled
*   Running
*   Succeed
*   Failed
*   Cancelling
*   Canceled
*   Waiting

Separate multiple states with commas (,). This parameter is empty by default, which indicates that tasks in all states are queried.', example='Scheduled'),
  taskId?: string(name='TaskId', description='The task ID. Separate multiple task IDs with commas (,). You can specify up to 30 task IDs. This parameter is empty by default, which indicates that you can specify an unlimited number of task IDs.', example='t-83br18hloy3faf****'),
  taskType?: string(name='TaskType', description='The task type. Separate multiple task types with commas (,). You can specify up to 30 task types. This parameter is empty by default, which indicates that you can specify an unlimited number of task types.', example='ModifyInsSpec'),
  toExecTime?: int32(name='ToExecTime', description='The maximum execution duration of a task. This parameter is used to filter tasks whose execution duration is shorter than or equal to the maximum execution duration. Unit: seconds. The default value is 0, which indicates that no limit is imposed.', example='0'),
  toStartTime?: string(name='ToStartTime', description='The end of the time range to query. Only tasks that have a start time earlier than or equal to the time specified by this parameter are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-03-02T11:31:03Z'),
}

model DescribeHistoryTasksResponseBody = {
  items?: [ 
    {
      actionInfo?: string(name='ActionInfo', example='{\\"steps\\":[{\\"action_info\\":{\\"Waiting\\":[\\"modifySwitchTime\\"]},\\"step_name\\":\\"exec_task\\"}]}'),
      callerSource?: string(name='CallerSource', example='141345906006****'),
      callerUid?: string(name='CallerUid', example='User'),
      currentStepName?: string(name='CurrentStepName', example='exec_task'),
      dbType?: string(name='DbType', example='redis'),
      endTime?: string(name='EndTime', example='2022-02-03T12:06:17Z'),
      instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
      instanceName?: string(name='InstanceName', example='dba-tair-test-qcloud'),
      instanceType?: string(name='InstanceType', example='Instance'),
      product?: string(name='Product', example='kvstore'),
      progress?: float(name='Progress', example='79.0'),
      reasonCode?: string(name='ReasonCode'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      remainTime?: int32(name='RemainTime', example='1000'),
      startTime?: string(name='StartTime', example='2022-02-03T11:31:03Z'),
      status?: int32(name='Status', example='Running'),
      taskDetail?: string(name='TaskDetail', example='{\\"callerUid\\":\\"test\\"}'),
      taskId?: string(name='TaskId', example='t-83br18hloy3faf****'),
      taskType?: string(name='TaskType', example='ModifyInsSpec'),
      uid?: string(name='Uid', example='141345906006****'),
    }
  ](name='Items', description='The request source. Valid values: System and User.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 10 to 100. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The unique ID of the request. If the request fails, provide this ID for technical support to troubleshoot the failure.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
  totalCount?: int32(name='TotalCount', description='The total number of tasks that meet these constraints without taking pagination into account.', example='5'),
}

model DescribeHistoryTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHistoryTasksResponseBody(name='body'),
}

async function describeHistoryTasksWithOptions(request: DescribeHistoryTasksRequest, runtime: Util.RuntimeOptions): DescribeHistoryTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fromExecTime)) {
    query['FromExecTime'] = request.fromExecTime;
  }
  if (!Util.isUnset(request.fromStartTime)) {
    query['FromStartTime'] = request.fromStartTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.toExecTime)) {
    query['ToExecTime'] = request.toExecTime;
  }
  if (!Util.isUnset(request.toStartTime)) {
    query['ToStartTime'] = request.toStartTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHistoryTasks',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHistoryTasks(request: DescribeHistoryTasksRequest): DescribeHistoryTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryTasksWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeInstanceAttributeResponseBody = {
  instances?: {
    DBInstanceAttribute?: [ 
    {
      architectureType?: string(name='ArchitectureType', description='The architecture of the instance. Valid values:

*   **cluster**: cluster architecture
*   **standard**: standard architecture
*   **rwsplit**: read/write splitting architecture', example='standard'),
      auditLogRetention?: string(name='AuditLogRetention', description='The retention period of audit logs. Unit: days. A value of 0 indicates that the audit log feature is disabled. For more information about how to enable the audit log feature, see [Enable the new audit log feature](~~102015~~).', example='15'),
      availabilityValue?: string(name='AvailabilityValue', description='The availability metric of the current month.', example='100%'),
      backupLogStartTime?: string(name='BackupLogStartTime', description='The earliest point in time to which you can restore data. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> 

*   This parameter is returned only when the data flashback feature is enabled for the instance. For more information, see [Use data flashback to restore data by point in time](~~148479~~).

*   When you call the [RestoreInstance](~~61083~~) operation to implement data flashback, you can obtain the earliest point in time for data flashback from the return value of this parameter and set the **RestoreTime** parameter to this point in time.', example='2021-07-06T05:49:55Z'),
      bandwidth?: long(name='Bandwidth', description='The bandwidth of the instance. Unit: Mbit/s.', example='10'),
      capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB.', example='1024'),
      chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
      cloudType?: string(name='CloudType', description='This parameter is returned only when the instance is in a cloud box.', example='cloudbox'),
      config?: string(name='Config', description='The parameter settings of the instance in the JSON format. For more information, see [Modify the parameters of an ApsaraDB for Redis instance](~~43885~~).', example='{\\"EvictionPolicy\\":\\"volatile-lru\\",\\"hash-max-ziplist-entries\\":512,\\"zset-max-ziplist-entries\\":128,\\"zset-max-ziplist-value\\":64,\\"set-max-intset-entries\\":512,\\"hash-max-ziplist-value\\":64}'),
      connectionDomain?: string(name='ConnectionDomain', description='The internal endpoint of the instance.', example='r-bp1d72gwl41z7f****.redis.rds.aliyuncs.com'),
      connections?: long(name='Connections', description='The maximum number of connections supported by the instance.', example='10000'),
      createTime?: string(name='CreateTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2019-03-06T10:42:03Z'),
      endTime?: string(name='EndTime', description='The time when the subscription instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-04-06T10:42:03Z'),
      engine?: string(name='Engine', description='The database engine of the instance. The return value is **Redis**.', example='Redis'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **2.8**, **4.0**, **5.0**, and **6.0**.', example='4.0'),
      globalInstanceId?: string(name='GlobalInstanceId', description='The ID of the distributed instance to which the instance belongs.

> This parameter is returned only when the instance is a child instance of a distributed instance.', example='gr-bp14rkqrhac****'),
      hasRenewChangeOrder?: string(name='HasRenewChangeOrder', description='Indicates whether your Alibaba Cloud account has pending orders for renewal and configuration change. Valid values:

*   **true**: Your Alibaba Cloud account has pending orders.
*   **false**: Your Alibaba Cloud account does not have pending orders.', example='false'),
      instanceClass?: string(name='InstanceClass', description='The instance type of the instance. For more information, see [Instance types](~~107984~~).', example='redis.master.small.default'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1d72gwl41z7f****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='apitest'),
      instanceReleaseProtection?: boolean(name='InstanceReleaseProtection', description='Indicates whether the release protection feature is enabled for the instance. Valid values:

*   **true**: Release protection is enabled.
*   **false**: Release protection is disabled.', example='false'),
      instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is suspended.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.

> For more information about instance states, see [Instance states and impacts](~~200740~~).', example='Normal'),
      instanceType?: string(name='InstanceType', description='The database engine of the instance. Valid values:

*   **Tair**
*   **Redis**
*   **Memcache**', example='Redis'),
      isOrderCompleted?: boolean(name='IsOrderCompleted', description='Whether the instance order has been completed is used to determine whether the modify instance specifications order has reached its final state. The return value is:

* **true**: The modify instance specifications operation has been completed or has not been made.

* **false**: Changing specifications, the order is not yet completed.', example='true'),
      isRds?: boolean(name='IsRds', description='Indicates whether the instance is managed by ApsaraDB RDS. Valid values:

*   **true**: The instance is managed by ApsaraDB RDS.
*   **false**: The instance is not managed by ApsaraDB RDS.', example='true'),
      isSupportTDE?: boolean(name='IsSupportTDE', description='Does the instance support enabling transparent data encryption (TDE) function? Return value:

* **true**: Supported, only supported for local disk, memory type Tair instance version. 
* **false**: Not Supported.', example='true'),
      maintainEndTime?: string(name='MaintainEndTime', description='The end time of the maintenance window. The time is in the *HH:mmZ* format. The time is displayed in UTC.', example='22:00Z'),
      maintainStartTime?: string(name='MaintainStartTime', description='The start time of the maintenance window. The time is in the *HH:mmZ* format. The time is displayed in UTC.', example='18:00Z'),
      networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='CLASSIC'),
      nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **double**: The instance contains a master node and a replica node.
*   **single**: The instance contains only a master node. This node type is phrased out.', example='double'),
      packageType?: string(name='PackageType', description='The plan type of the instance. Valid values:

*   **standard**: standard plan.
*   **customized**: custom plan. This plan type is phased out.', example='standard'),
      port?: long(name='Port', description='The port number of the instance.', example='6379'),
      privateIp?: string(name='PrivateIp', description='The private IP address of the instance.

> This parameter is not returned when the instance is deployed in the classic network.', example='172.16.49.***'),
      QPS?: long(name='QPS', description='The expected maximum queries per second (QPS).', example='100000'),
      readOnlyCount?: int32(name='ReadOnlyCount', description='The number of read-only nodes. This parameter is available only for read/write splitting instances that use cloud disks.', example='5'),
      realInstanceClass?: string(name='RealInstanceClass', description='If the instance is a cluster instance that uses cloud disks, this parameter indicates the instance type of each shard. In this case, the InstanceClass parameter indicates a virtual instance type.

> To query the costs of this instance type, specify the returned instance type for this parameter for the [DescribePrice](~~95612~~) operation and call the operation.', example='tair.rdb.with.proxy.1g'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      replicaId?: string(name='ReplicaId', description='The ID of the node.', example='bls-awxxxxxxxxxxxxx'),
      replicationMode?: string(name='ReplicationMode', description='The architecture of the instance. Valid values:

*   **master-slave**: standard master-replica architecture.
*   **cluster**: cluster architecture, which includes read/write splitting instances and cluster instances.', example='master-slave'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyiu4ekp****'),
      secondaryZoneId?: string(name='SecondaryZoneId', description='The ID of the secondary zone.

> This parameter is returned only when the instance has a secondary zone ID.', example='cn-hongkong-h'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses contained in a whitelist of the instance.', example='127.0.0.1'),
      shardCount?: int32(name='ShardCount', description='The number of shards. This parameter is available only for instances that are purchased on the China site (aliyun.com).

This parameter is returned only when the instance is a [cluster instance](~~52228~~) that uses cloud disks.', example='2'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='tagkey'),
          value?: string(name='Value', description='The value of the tag.', example='tagvalue'),
        }
      ](name='Tag')
      }(name='Tags', description='Details of the tags.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1e7clcw529l773d****'),
      vpcAuthMode?: string(name='VpcAuthMode', description='The VPC authentication mode. Valid values:

*   **Open**: enables password authentication.
*   **Close**: disables password authentication and enables password-free access. For more information, see [Enable password-free access](~~85168~~).', example='Open'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The ID of the VPC.', example='r-bp1d72gwl41z7f****'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1nme44gek34slfc****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hongkong-b'),
      zoneType?: string(name='ZoneType', description='The deployment type of the instance. Valid values:

*   **singlezone**: The instance is deployed in a single zone.
*   **doublezone**: The instance is deployed in two zones of the same region.', example='singlezone'),
    }
  ](name='DBInstanceAttribute')
  }(name='Instances', description='Details of the instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA40C261-EB72-4EDA-AC57-958722162595'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewalAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.

> By default, the system checks whether auto-renewal is enabled for all instances.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**.

> The default value is **30**.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceAutoRenewalAttributeResponseBody = {
  items?: {
    item?: [ 
    {
      autoRenew?: string(name='AutoRenew', description='Indicates whether auto-renewal is enabled. Valid values:

*   **true**: Auto-renewal is enabled.
*   **false**: Auto-renewal is disabled.', example='true'),
      DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
      duration?: int32(name='Duration', description='The auto-renewal period. Unit: months.', example='1'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-shanghai'),
    }
  ](name='Item')
  }(name='Items', description='Details of the auto-renewal information for the instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of entries returned on the current page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2B17D708-1D6D-49F3-B6D7-478371DD****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned entries.', example='1'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAutoRenewalAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAutoRenewalAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model DescribeInstanceConfigRequest {
  instanceId?: string(name='InstanceId', description='The instance ID. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeInstanceConfigResponseBody = {
  config?: string(name='Config', description='The parameter settings of the instance. For more information, see [Parameter overview and configuration guide](~~43885~~).', example='{\\"EvictionPolicy\\":\\"volatile-lru\\",\\"hash-max-ziplist-entries\\":512,\\"zset-max-ziplist-entries\\":128,\\"list-max-ziplist-entries\\":512,\\"list-max-ziplist-value\\":64,\\"zset-max-ziplist-value\\":64,\\"set-max-intset-entries\\":512,\\"hash-max-ziplist-value\\":64}'),
  requestId?: string(name='RequestId', description='The request ID.', example='4E2C08F6-2D11-4ECD-9A4C-27EF2D3D****'),
}

model DescribeInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceConfigResponseBody(name='body'),
}

/**
  * This operation is available only for instances that use cloud disks.
  * > You can call the [DescribeParameters](~~473847~~) operation to query the parameter settings of instances that use local disks.
  *
  * @param request DescribeInstanceConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceConfigResponse
 */
async function describeInstanceConfigWithOptions(request: DescribeInstanceConfigRequest, runtime: Util.RuntimeOptions): DescribeInstanceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceConfig',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is available only for instances that use cloud disks.
  * > You can call the [DescribeParameters](~~473847~~) operation to query the parameter settings of instances that use local disks.
  *
  * @param request DescribeInstanceConfigRequest
  * @return DescribeInstanceConfigResponse
 */
async function describeInstanceConfig(request: DescribeInstanceConfigRequest): DescribeInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceConfigWithOptions(request, runtime);
}

model DescribeInstanceSSLRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeInstanceSSLResponseBody = {
  certCommonName?: string(name='CertCommonName', description='The common name of the CA certificate. The default value is the internal endpoint of the instance.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
  certDownloadURL?: string(name='CertDownloadURL', description='The download URL of the CA certificate.', example='https://apsaradb-public.oss-ap-sout****-1.aliy****.com/ApsaraDB-CA-Chain.zip'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='02260F96-913E-4655-9BA5-A3651CAF****'),
  SSLEnabled?: string(name='SSLEnabled', description='The status of the TLS (SSL) encryption feature. Valid values:

*   **Enable**: SSL encryption is enabled.
*   **Disable**: SSL encryption is disabled.', example='Enable'),
  SSLExpiredTime?: string(name='SSLExpiredTime', description='The time when the CA certificate expires.', example='2020-08-05T09:05:53Z'),
}

model DescribeInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceSSLResponseBody(name='body'),
}

/**
  * SSL encryption is supported for ApsaraDB for Redis 2.8 standard master-replica instances, ApsaraDB for Redis 2.8 master-replica cluster instances, and ApsaraDB for Redis 4.0 master-replica cluster instances. You can enable SSL encryption to enhance data transmission security.
  * You can use one of the following methods to enable or disable SSL encryption or update the SSL certificate for an ApsaraDB for Redis instance:
  * *   Call the [ModifyInstanceSSL](~~96194~~) operation.
  * *   Enable or disable SSL encryption or update the SSL certificate in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
  * > After SSL encryption is enabled, the instance may respond slower.
  *
  * @param request DescribeInstanceSSLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceSSLResponse
 */
async function describeInstanceSSLWithOptions(request: DescribeInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSSL',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * SSL encryption is supported for ApsaraDB for Redis 2.8 standard master-replica instances, ApsaraDB for Redis 2.8 master-replica cluster instances, and ApsaraDB for Redis 4.0 master-replica cluster instances. You can enable SSL encryption to enhance data transmission security.
  * You can use one of the following methods to enable or disable SSL encryption or update the SSL certificate for an ApsaraDB for Redis instance:
  * *   Call the [ModifyInstanceSSL](~~96194~~) operation.
  * *   Enable or disable SSL encryption or update the SSL certificate in the ApsaraDB for Redis console. For more information, see [Configure SSL encryption](~~84898~~).
  * > After SSL encryption is enabled, the instance may respond slower.
  *
  * @param request DescribeInstanceSSLRequest
  * @return DescribeInstanceSSLResponse
 */
async function describeInstanceSSL(request: DescribeInstanceSSLRequest): DescribeInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSSLWithOptions(request, runtime);
}

model DescribeInstanceTDEStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query instance IDs.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeInstanceTDEStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
  TDEStatus?: string(name='TDEStatus', description='Indicates whether TDE is enabled. Valid values:

*   **Enabled**: TDE is enabled.
*   **Disable**: TDE is disabled.', example='Enabled'),
}

model DescribeInstanceTDEStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTDEStatusResponseBody(name='body'),
}

/**
  * For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
  * >  You can call the [ModifyInstanceTDE](~~302337~~) to enable or disable TDE.
  *
  * @param request DescribeInstanceTDEStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceTDEStatusResponse
 */
async function describeInstanceTDEStatusWithOptions(request: DescribeInstanceTDEStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceTDEStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTDEStatus',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about TDE and the usage notes of TDE, see [Enable TDE](~~265913~~).
  * >  You can call the [ModifyInstanceTDE](~~302337~~) to enable or disable TDE.
  *
  * @param request DescribeInstanceTDEStatusRequest
  * @return DescribeInstanceTDEStatusResponse
 */
async function describeInstanceTDEStatus(request: DescribeInstanceTDEStatusRequest): DescribeInstanceTDEStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTDEStatusWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  architectureType?: string(name='ArchitectureType', description='The architecture of the instance. Valid values:

*   **cluster**: cluster architecture
*   **standard**: standard architecture
*   **rwsplit**: read/write splitting architecture', example='standard'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  editionType?: string(name='EditionType', description='The edition of the instance. Valid values:

*   **Community**: Community Edition
*   **Enterprise**: Enhance Edition (Tair)', example='Enterprise'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **2.8**, **4.0**, **5.0**, and **6.0**.', example='4.0'),
  expired?: string(name='Expired', description='Specifies whether the instance has expired. Valid values:

*   **true**: The instance has expired.
*   **false**: The instance has not expired.', example='false'),
  globalInstance?: boolean(name='GlobalInstance', description='Specifies whether to return the child instances of distributed instances. Valid values:

*   **true**: Only child instances are returned.
*   **false**: Child instances are not returned.', example='true'),
  instanceClass?: string(name='InstanceClass', description='The instance type of the instance. For more information, see [Instance types](~~107984~~).', example='redis.master.small.default'),
  instanceIds?: string(name='InstanceIds', description='The ID of the instance.

> If you specify multiple instance IDs, separate these IDs with commas (,).', example='r-bp1zxszhcgatnx****'),
  instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is suspended.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.

> For more information about instance states, see [Instance states and impacts](~~200740~~).', example='Normal'),
  instanceType?: string(name='InstanceType', description='The database engine of the instance. Valid values:

*   **Tair**
*   **Redis**
*   **Memcache**', example='Redis'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: Virtual Private Cloud (VPC)', example='CLASSIC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10'),
  privateIp?: string(name='PrivateIp', description='The private IP address of the instance.', example='172.16.49.***'),
  regionId?: string(name='RegionId', description='The region ID of the instance.

> When you call this operation and specify the **Tag** parameter, you must also specify this parameter.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.

> You can query resource group IDs by using the ApsaraDB for Redis console or by calling the [ListResourceGroups](~~158855~~) operation. For more information, see [View basic information of a resource group](~~151181~~).', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  searchKey?: string(name='SearchKey', description='The keyword used for fuzzy search. The keyword can be based on an instance name or an instance ID.', example='apitest'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. A tag is a key-value pair.

> A maximum of five key-value pairs can be specified at a time.', example='Storage type'),
      value?: string(name='Value', description='The value of the tag. A tag is a key-value pair.', example='Local disk'),
    }
  ](name='Tag', description='The tags of the instance.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hongkong-b'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    KVStoreInstance?: [ 
    {
      architectureType?: string(name='ArchitectureType', description='The architecture of the instance. Default value: NULL. Valid values:

*   **cluster**: The instance is a cluster instance.
*   **standard**: The instance is a standard instance.
*   **rwsplit**: The instance is a read/write splitting instance.
*   **NULL**: The instance can be a cluster, standard, or read/write splitting instance.', example='cluster'),
      bandwidth?: long(name='Bandwidth', description='The bandwidth of the instance. Unit: Mbit/s.', example='96'),
      capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB.', example='4096'),
      chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
      cloudType?: string(name='CloudType', description='This parameter is returned only when the instance is in a cloud box.', example='cloudbox'),
      config?: string(name='Config', description='The parameter configurations of the instance. For more information, see [Modify parameters of an instance](~~43885~~).', example='{\\"maxmemory-policy\\":\\"volatile-lfu\\",\\"EvictionPolicy\\":\\"volatile-lru\\",\\"hash-max-ziplist-entries\\":512,\\"zset-max-ziplist-entries\\":128,\\"zset-max-ziplist-value\\":64,\\"set-max-intset-entries\\":512,\\"hash-max-ziplist-value\\":64,\\"#no_loose_disabled-commands\\":\\"flushall,flushdb\\",\\"lazyfree-lazy-eviction\\":\\"yes\\"}'),
      connectionDomain?: string(name='ConnectionDomain', description='The internal endpoint of the instance.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
      connectionMode?: string(name='ConnectionMode', description='The connection mode of the instance. Valid values:

*   **Standard**: standard mode
*   **Safe**: proxy mode', example='Standard'),
      connections?: long(name='Connections', description='The maximum number of connections supported by the instance.', example='20000'),
      createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2018-11-07T08:49:00Z'),
      destroyTime?: string(name='DestroyTime', description='The time when the instance was deleted.', example='2019-04-28T10:03:01Z'),
      editionType?: string(name='EditionType', description='The edition of the instance. Valid values:

*   **Community**: Community Edition
*   **Enterprise**: Enhance Edition (Tair)', example='Enterprise'),
      endTime?: string(name='EndTime', description='The time when the subscription instance expires.', example='2019-06-13T16:00:00Z'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **2.8**, **4.0**, **5.0**, and **6.0**.', example='4.0'),
      globalInstanceId?: string(name='GlobalInstanceId', description='The ID of the distributed instance.

> This parameter is returned only when the instance is a child instance of a distributed instance.', example='gr-bp14rkqrhac****'),
      hasRenewChangeOrder?: boolean(name='HasRenewChangeOrder', description='Indicates whether your Alibaba Cloud account has pending orders for renewal and configuration change. Valid values:

*   **true**: Your Alibaba Cloud account has pending orders for renewal and configuration change.
*   **false**: Your Alibaba Cloud account does not have pending orders for renewal and configuration change.', example='false'),
      instanceClass?: string(name='InstanceClass', description='The instance class of the instance.', example='redis.logic.sharding.2g.2db.0rodb.4proxy.default'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='apitest'),
      instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is suspended.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.', example='Normal'),
      instanceType?: string(name='InstanceType', description='The database engine of the instance. Valid values:

*   **Tair**
*   **Redis**
*   **Memcache**', example='Redis'),
      isRds?: boolean(name='IsRds', description='Indicates whether the instance is managed by ApsaraDB RDS. Valid values:

*   **true**: The instance is managed by ApsaraDB RDS.
*   **false**: The instance is not managed by ApsaraDB RDS.', example='true'),
      networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='CLASSIC'),
      nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **double**: The instance contains a master node and a replica node.
*   **single**: The instance contains only a master node. This node type is phrased out.', example='double'),
      packageType?: string(name='PackageType', description='The plan type of the instance. Valid values:

*   **standard**: standard plan
*   **customized**: custom plan', example='standard'),
      port?: long(name='Port', description='The port number of the instance.', example='6379'),
      privateIp?: string(name='PrivateIp', description='The private IP address of the instance.

> This parameter is not returned when the instance is deployed in the classic network.', example='172.16.49.***'),
      QPS?: long(name='QPS', description='The expected maximum queries per second (QPS).', example='100000'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      replacateId?: string(name='ReplacateId', description='The logical ID of the replica instance.', example='grr-bp11381ebc16****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyiu4ekp****'),
      secondaryZoneId?: string(name='SecondaryZoneId', description='The ID of the secondary zone.

> If multiple zones are returned for **ZoneId** such as cn-hangzhou-MAZ10(h,i), this parameter is ignored.', example='cn-hangzhou-h'),
      shardClass?: string(name='ShardClass', description='The shard class for the instance.', example='redis.shard.small.ce'),
      shardCount?: int32(name='ShardCount', description='The number of data shards in the instance.

> This parameter is returned only when the instance is a cluster instance that uses cloud disks.', example='3'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='key1'),
          value?: string(name='Value', description='The value of the tag.', example='value1'),
        }
      ](name='Tag')
      }(name='Tags', description='Details of the tags.'),
      userName?: string(name='UserName', description='The username that is used to connect to the instance. By default, the username that is named after the instance ID is returned.', example='r-bp1zxszhcgatnx****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1e7clcw529l773d****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-b'),
    }
  ](name='KVStoreInstance')
  }(name='Instances', description='Details of the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E83311F-0EE4-4922-A3BF-730B312B****'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='1'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.architectureType)) {
    query['ArchitectureType'] = request.architectureType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.editionType)) {
    query['EditionType'] = request.editionType;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.expired)) {
    query['Expired'] = request.expired;
  }
  if (!Util.isUnset(request.globalInstance)) {
    query['GlobalInstance'] = request.globalInstance;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    query['InstanceStatus'] = request.instanceStatus;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIp)) {
    query['PrivateIp'] = request.privateIp;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstancesOverviewRequest {
  architectureType?: string(name='ArchitectureType', description='The architecture of the instance. Valid values:

*   **cluster**: cluster architecture
*   **standard**: standard architecture
*   **rwsplit**: read/write splitting architecture', example='standard'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
  editionType?: string(name='EditionType', description='The edition of the instance. Valid values:

*   **Community**: Community Edition
*   **Enterprise**: Enhanced Edition (Tair)', example='Enterprise'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **2.8**, **4.0**, and **5.0**.', example='4.0'),
  instanceClass?: string(name='InstanceClass', description='The instance type of the instance. For more information, see [Instance types](~~107984~~).', example='redis.master.small.default'),
  instanceIds?: string(name='InstanceIds', description='The IDs of instances.

> By default, all instances that belong to this account are queried. If you specify multiple instance IDs, separate the instance IDs with commas (,).', example='r-bp1zxszhcgatnx****'),
  instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is unavailable.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.

> For more information about instance states, see [Instance states and impacts](~~200740~~).', example='Normal'),
  instanceType?: string(name='InstanceType', description='The category of the instance. Valid values:

*   **Tair**
*   **Redis**
*   **Memcache**', example='Redis'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: Virtual Private Cloud (VPC)', example='CLASSIC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIp?: string(name='PrivateIp', description='The private IP address of the instance.', example='172.16.49.***'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instances you want to query reside. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instances you want to query belong.

> You can query resource group IDs by using the ApsaraDB for Redis console or by calling the [ListResourceGroups](~~158855~~) operation. For more information, see [View basic information of a resource group](~~151181~~).', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  searchKey?: string(name='SearchKey', description='The keyword used for fuzzy search. The keyword can be based on an instance ID or an instance description.', example='apitest'),
  securityToken?: string(name='SecurityToken'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-b'),
}

model DescribeInstancesOverviewResponseBody = {
  instances?: [ 
    {
      architectureType?: string(name='ArchitectureType', description='The architecture of the instance. Valid values:

*   **cluster**: cluster architecture
*   **standard**: standard architecture
*   **rwsplit**: read/write splitting architecture', example='cluster'),
      capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB.', example='4096'),
      chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
      connectionDomain?: string(name='ConnectionDomain', description='The internal endpoint of the instance.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
      createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2018-11-07T08:49:00Z'),
      endTime?: string(name='EndTime', description='The time when the subscription instance expires.', example='2022-06-13T16:00:00Z'),
      engineVersion?: string(name='EngineVersion', description='The database engine version of the instance. Valid values: **2.8**, **4.0**, and **5.0**.', example='4.0'),
      globalInstanceId?: string(name='GlobalInstanceId', description='The ID of the distributed instance.

> This parameter is returned only when the instance is a child instance of a distributed instance.', example='gr-bp14rkqrhac****'),
      instanceClass?: string(name='InstanceClass', description='The instance type of the instance.', example='redis.logic.sharding.2g.2db.0rodb.4proxy.default'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='apitest'),
      instanceStatus?: string(name='InstanceStatus', description='The state of the instance. Valid values:

*   **Normal**: The instance is normal.
*   **Creating**: The instance is being created.
*   **Changing**: The configurations of the instance are being changed.
*   **Inactive**: The instance is disabled.
*   **Flushing**: The instance is being released.
*   **Released**: The instance is released.
*   **Transforming**: The billing method of the instance is being changed.
*   **Unavailable**: The instance is unavailable.
*   **Error**: The instance failed to be created.
*   **Migrating**: The instance is being migrated.
*   **BackupRecovering**: The instance is being restored from a backup.
*   **MinorVersionUpgrading**: The minor version of the instance is being updated.
*   **NetworkModifying**: The network type of the instance is being changed.
*   **SSLModifying**: The SSL certificate of the instance is being changed.
*   **MajorVersionUpgrading**: The major version of the instance is being upgraded. The instance remains accessible during the upgrade.', example='Normal'),
      instanceType?: string(name='InstanceType', description='The category of the instance. Valid values:

*   **Tair**
*   **Redis**
*   **Memcache**', example='Redis'),
      networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   **CLASSIC**: classic network
*   **VPC**: VPC', example='CLASSIC'),
      privateIp?: string(name='PrivateIp', description='The private IP address of the instance.

> This parameter is not returned when the instance is deployed in the classic network.', example='172.16.49.***'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmyiu4ekp****'),
      secondaryZoneId?: string(name='SecondaryZoneId', description='Instance\\"s secondary zone id.
> This parameter is only returned when the instance has a secondary zone ID.', example='cn-hangzhou-g'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance is connected.', example='vsw-bp1e7clcw529l773d****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1nme44gek34slfc****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-b'),
    }
  ](name='Instances', description='An array of instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1E83311F-0EE4-4922-A3BF-730B312B****'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='1'),
}

model DescribeInstancesOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesOverviewResponseBody(name='body'),
}

/**
  * If you do not specify the InstanceIds parameter when you call this operation, the overview information of all instances is returned.
  * > This operation returns non-paged results.
  *
  * @param request DescribeInstancesOverviewRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstancesOverviewResponse
 */
async function describeInstancesOverviewWithOptions(request: DescribeInstancesOverviewRequest, runtime: Util.RuntimeOptions): DescribeInstancesOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.architectureType)) {
    query['ArchitectureType'] = request.architectureType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.editionType)) {
    query['EditionType'] = request.editionType;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceStatus)) {
    query['InstanceStatus'] = request.instanceStatus;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIp)) {
    query['PrivateIp'] = request.privateIp;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstancesOverview',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you do not specify the InstanceIds parameter when you call this operation, the overview information of all instances is returned.
  * > This operation returns non-paged results.
  *
  * @param request DescribeInstancesOverviewRequest
  * @return DescribeInstancesOverviewResponse
 */
async function describeInstancesOverview(request: DescribeInstancesOverviewRequest): DescribeInstancesOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesOverviewWithOptions(request, runtime);
}

model DescribeIntranetAttributeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeIntranetAttributeResponseBody = {
  autoRenewal?: boolean(name='AutoRenewal', description='Indicates whether auto-renewal is enabled for the extra internal bandwidth that you purchased. Valid values:

*   **true**: Auto-renewal is enabled.
*   **false**: Auto-renewal is disabled.

> If no extra internal bandwidth is purchased, this parameter is not returned.', example='true'),
  bandwidthExpireTime?: string(name='BandwidthExpireTime', description='The expiration time of the purchased bandwidth. The time follows the ISO 8601 standard in the *yyyy-MM-dd* T *HH:mm:ss* Z format.

> If no extra internal bandwidth is purchased, this parameter is not returned.', example='2021-03-06T16:00:00Z'),
  bandwidthPrePaid?: string(name='BandwidthPrePaid', example='0'),
  expireTime?: string(name='ExpireTime', description='The time when the extra internal bandwidth that you purchased for temporary use expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.

> If no extra internal bandwidth for temporary use is purchased or the extra internal bandwidth that you purchased for temporary use has expired, **0** is returned for this parameter.', example='0'),
  hasPrePaidBandWidthOrderRunning?: boolean(name='HasPrePaidBandWidthOrderRunning', description='Specifies whether the instance has unexpired bandwidth plans. Valid values:

*   **true**: The instance has unexpired bandwidth plans.
*   **false**: The instance does not have unexpired bandwidth plans.

> If no extra internal bandwidth is purchased, this parameter is not returned.', example='true'),
  intranetBandwidth?: int32(name='IntranetBandwidth', description='The current internal bandwidth of the instance. Unit: Mbit/s.', example='102'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25D42CC3-FBA1-4AEC-BCE2-B8DD3137****'),
}

model DescribeIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIntranetAttributeResponseBody(name='body'),
}

/**
  * You can call the [EnableAdditionalBandwidth](~~206173~~) operation to increase the internal bandwidth of an instance.
  *
  * @param request DescribeIntranetAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeIntranetAttributeResponse
 */
async function describeIntranetAttributeWithOptions(request: DescribeIntranetAttributeRequest, runtime: Util.RuntimeOptions): DescribeIntranetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIntranetAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the [EnableAdditionalBandwidth](~~206173~~) operation to increase the internal bandwidth of an instance.
  *
  * @param request DescribeIntranetAttributeRequest
  * @return DescribeIntranetAttributeResponse
 */
async function describeIntranetAttribute(request: DescribeIntranetAttributeRequest): DescribeIntranetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIntranetAttributeWithOptions(request, runtime);
}

model DescribeLogicInstanceTopologyRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance whose topology information you want to query.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeLogicInstanceTopologyResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  redisProxyList?: {
    nodeInfo?: [ 
    {
      bandwidth?: string(name='Bandwidth', description='The bandwidth throttling of the node. Unit: MB/s.', example='96'),
      capacity?: string(name='Capacity', description='The storage capacity of the node. Unit: MB.', example='5120'),
      connection?: string(name='Connection', description='The maximum number of connections.', example='320000'),
      nodeId?: string(name='NodeId', description='The ID of the node.', example='r-bp10noxlhcoim2****-proxy-3#542****'),
      nodeType?: string(name='NodeType', description='The node type. Valid values:

*   **proxy**: proxy node
*   **db**: data node', example='proxy'),
    }
  ](name='NodeInfo')
  }(name='RedisProxyList', description='The detailed proxy information, including information about proxy nodes.'),
  redisShardList?: {
    nodeInfo?: [ 
    {
      bandwidth?: string(name='Bandwidth', example='96'),
      capacity?: string(name='Capacity', example='2048'),
      connection?: string(name='Connection', example='10000'),
      nodeId?: string(name='NodeId', example='r-bp10noxlhcoim2****-db-0#688****'),
      nodeType?: string(name='NodeType', example='db'),
      subInstanceType?: string(name='SubInstanceType'),
    }
  ](name='NodeInfo')
  }(name='RedisShardList'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='794120D1-E0CF-4713-BAE4-EBAEA04506AF'),
}

model DescribeLogicInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogicInstanceTopologyResponseBody(name='body'),
}

/**
  * This parameter is supported only for cluster and read/write splitting instances.
  *
  * @param request DescribeLogicInstanceTopologyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeLogicInstanceTopologyResponse
 */
async function describeLogicInstanceTopologyWithOptions(request: DescribeLogicInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeLogicInstanceTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogicInstanceTopology',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This parameter is supported only for cluster and read/write splitting instances.
  *
  * @param request DescribeLogicInstanceTopologyRequest
  * @return DescribeLogicInstanceTopologyResponse
 */
async function describeLogicInstanceTopology(request: DescribeLogicInstanceTopologyRequest): DescribeLogicInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogicInstanceTopologyWithOptions(request, runtime);
}

model DescribeMonitorItemsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeMonitorItemsResponseBody = {
  monitorItems?: {
    KVStoreMonitorItem?: [ 
    {
      monitorKey?: string(name='MonitorKey', description='DescribeMonitorItems', example='select'),
      unit?: string(name='Unit', description='Queries the metrics of an ApsaraDB for Redis instance.', example='Counts/s'),
    }
  ](name='KVStoreMonitorItem')
  }(name='MonitorItems', description='The unit of the metric.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DescribeMonitorItems**.', example='8BEB2618-9517-43F3-A233-E0B34512****'),
}

model DescribeMonitorItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMonitorItemsResponseBody(name='body'),
}

/**
  * >  ApsaraDB for Redis has upgraded the monitoring metrics. The DescribeMonitorItems operation is phased out. For more information, see [The DescribeMonitorItems operation supported by ApsaraDB for Redis is phased out](~~189893~~).
  * After you call this operation to retrieve a list of metrics for a specified ApsaraDB for Redis instance, you can call the [DescribeHistoryMonitorValues](~~61107~~) operation to query monitoring history of the instance.
  *
  * @param request DescribeMonitorItemsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeMonitorItemsResponse
 */
async function describeMonitorItemsWithOptions(request: DescribeMonitorItemsRequest, runtime: Util.RuntimeOptions): DescribeMonitorItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMonitorItems',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  ApsaraDB for Redis has upgraded the monitoring metrics. The DescribeMonitorItems operation is phased out. For more information, see [The DescribeMonitorItems operation supported by ApsaraDB for Redis is phased out](~~189893~~).
  * After you call this operation to retrieve a list of metrics for a specified ApsaraDB for Redis instance, you can call the [DescribeHistoryMonitorValues](~~61107~~) operation to query monitoring history of the instance.
  *
  * @param request DescribeMonitorItemsRequest
  * @return DescribeMonitorItemsResponse
 */
async function describeMonitorItems(request: DescribeMonitorItemsRequest): DescribeMonitorItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMonitorItemsWithOptions(request, runtime);
}

model DescribeParameterModificationHistoryRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-09-05T09:49:27Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the node.

> You can set this parameter to query the parameter settings of the specified node in a cluster instance.', example='r-bp1xxxxxxxxxxxxx-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parameterName?: string(name='ParameterName', description='The name of the parameter.', example='script_check_enable'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2022-09-05T08:49:27Z'),
}

model DescribeParameterModificationHistoryResponseBody = {
  historicalParameters?: {
    historicalParameter?: [ 
    {
      modifyTime?: string(name='ModifyTime', description='The time when the parameter was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-09-05T09:56:10Z'),
      newParameterValue?: string(name='NewParameterValue', description='The parameter value after modification.', example='0'),
      oldParameterValue?: string(name='OldParameterValue', description='The parameter value before modification.', example='-2'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='script_check_enable'),
    }
  ](name='HistoricalParameter')
  }(name='HistoricalParameters', description='Details of the parameter modification records.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='963C20F0-7CE1-4591-AAF3-6F3CD1CE****'),
}

model DescribeParameterModificationHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParameterModificationHistoryResponseBody(name='body'),
}

async function describeParameterModificationHistoryWithOptions(request: DescribeParameterModificationHistoryRequest, runtime: Util.RuntimeOptions): DescribeParameterModificationHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameterName)) {
    query['ParameterName'] = request.parameterName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameterModificationHistory',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameterModificationHistory(request: DescribeParameterModificationHistoryRequest): DescribeParameterModificationHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterModificationHistoryWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest {
  characterType?: string(name='CharacterType', description='The architecture of the instance. For more information, see [Overview](~~86132~~). Valid values:

*   **logic**: The instance is a cluster or read/write splitting instance.
*   **normal**: The instance is a standard master-replica instance.', example='logic'),
  engine?: string(name='Engine', description='The operation that you want to perform. Set the value to **DescribeParameterTemplates**.', example='Redis'),
  engineVersion?: string(name='EngineVersion', description='The database engine that is run on the instance. The value **Redis** is returned for this parameter.', example='5.0'),
  instanceId?: string(name='InstanceId', description='r-bp1zxszhcgatnx****', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the IDs of instances.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeParameterTemplatesResponseBody = {
  engine?: string(name='Engine', description='The valid values of the parameter.', example='redis'),
  engineVersion?: string(name='EngineVersion', description='The default value of the parameter.', example='5.0'),
  parameterCount?: string(name='ParameterCount', description='The architecture of the instance. For more information, see [Overview](~~86132~~). Valid values:

*   **logic**: The instance is a cluster master-replica instance or a read/write splitting instance.
*   **normal**: The instance is a standard master-replica instance.', example='24'),
  parameters?: {
    templateRecord?: [ 
    {
      checkingCode?: string(name='CheckingCode', description='The check code that indicates the valid values of the parameter.', example='[yes|no]'),
      forceModify?: boolean(name='ForceModify', description='Indicates whether the parameter can be reset. Valid values:

*   **true**: The parameter can be reset.
*   **false**: The parameter cannot be reset.', example='true'),
      forceRestart?: boolean(name='ForceRestart', description='Indicates whether a restart of the instance is required after the parameter is reset. Valid values:

*   **true**: After the parameter is reset, you must restart the instance to make the new value of the parameter take effect.
*   **false**: After the parameter is reset, the new value of the parameter immediately takes effect. You do not need to restart the instance.', example='false'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter. For more information about the parameters and the parameter settings, see [Parameters](~~259681~~).', example='appendonly'),
      parameterValue?: string(name='ParameterValue', description='The default value of the parameter.', example='yes'),
    }
  ](name='TemplateRecord')
  }(name='Parameters', description='Details of the returned parameters.'),
  requestId?: string(name='RequestId', description='The name of the parameter. For more information about the parameters and the parameter settings, see [Parameters](~~259681~~).', example='9DA28D8E-514D-4F12-ADED-70A9C818****'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

/**
  * An array that consists of the details about the parameters returned.
  *
  * @param request DescribeParameterTemplatesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeParameterTemplatesResponse
 */
async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.characterType)) {
    query['CharacterType'] = request.characterType;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameterTemplates',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * An array that consists of the details about the parameters returned.
  *
  * @param request DescribeParameterTemplatesRequest
  * @return DescribeParameterTemplatesResponse
 */
async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribeParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the node.

> You can set this parameter to query the parameter settings of the specified node in a cluster instance.', example='r-bp1xxxxxxxxxxxxx-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeParametersResponseBody = {
  configParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode', description='The check code that indicates the valid values of the parameter.', example='[0|1]'),
      forceRestart?: boolean(name='ForceRestart', description='Indicates whether the instance must be restarted for the modifications to take effect. Valid values:

*   **True**: The instance must be restarted for the modifications to take effect.
*   **False**: The instance does not need to be restarted for the modifications to take effect. Modifications immediately take effect.', example='true'),
      modifiableStatus?: boolean(name='ModifiableStatus', description='Indicates whether the parameter can be reset. Valid values:

*   **False**: The parameter cannot be reset.
*   **True**: The parameter can be reset.', example='true'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='Check all keys passed in the KEYS array map to the same slot.'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='script_check_enable'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter.', example='1'),
    }
  ](name='Parameter')
  }(name='ConfigParameters', description='The configuration parameters.'),
  engine?: string(name='Engine', description='The database engine that the instance runs.', example='redis'),
  engineVersion?: string(name='EngineVersion', description='The database engine version of the instance.', example='4.0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C1338BE-8DE8-4890-A900-E1BC06BF****'),
  runningParameters?: {
    parameter?: [ 
    {
      checkingCode?: string(name='CheckingCode', description='The check code that indicates the valid values of the parameter.', example='[0|1]'),
      forceRestart?: string(name='ForceRestart', description='Indicates whether the instance must be restarted for the modifications to take effect. Valid values:

*   **True**: The instance must be restarted for the modifications to take effect.
*   **False**: The instance does not need to be restarted for the modifications to take effect. Modifications immediately take effect.', example='true'),
      modifiableStatus?: string(name='ModifiableStatus', description='Indicates whether the parameter can be reset. Valid values:

*   **False**: The parameter cannot be reset.
*   **True**: The parameter can be reset.', example='true'),
      parameterDescription?: string(name='ParameterDescription', description='The description of the parameter.', example='You can disable some dangerous commands, for example \\"keys,flushdb,flushall\\", the commands must be in [flushall,flushdb,keys,hgetall,eval,evalsha,script].'),
      parameterName?: string(name='ParameterName', description='The name of the parameter.', example='#no_loose_disabled-commands'),
      parameterValue?: string(name='ParameterValue', description='The value of the parameter.', example='keys,flushall,flushdb'),
    }
  ](name='Parameter')
  }(name='RunningParameters', description='The running parameters.'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

/**
  * This operation is available only for instances that use local disks.
  * > You can call the [DescribeInstanceConfig](~~473846~~) operation to query the parameter settings of instances that use cloud disks.
  *
  * @param request DescribeParametersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeParametersResponse
 */
async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is available only for instances that use local disks.
  * > You can call the [DescribeInstanceConfig](~~473846~~) operation to query the parameter settings of instances that use cloud disks.
  *
  * @param request DescribeParametersRequest
  * @return DescribeParametersResponse
 */
async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribePriceRequest {
  businessInfo?: string(name='BusinessInfo', description='The extended information such as the promotional event ID and business information.', example='000000000000'),
  capacity?: long(name='Capacity', description='The storage capacity of the instance. Unit: MB. You must specify one of the **InstanceClass** and **Capacity** parameters to specify the instance type. We recommend that you use **InstanceClass** to specify the instance type.', example='1024'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   **PostPaid**: pay-as-you-go
*   **PrePaid**: subscription.

> The default value is **PostPaid**.', example='PostPaid'),
  couponNo?: string(name='CouponNo', description='The coupon code. Default value: youhuiquan_promotion_option_id_for_blank. This value indicates that no coupon code is available.', example='youhuiquan_promotion_option_id_for_blank'),
  forceUpgrade?: boolean(name='ForceUpgrade', description='Specifies whether to forcefully change the configurations of the instance. Valid values:

*   **false**: forcefully changes the configurations.
*   **true**: does not forcefully change the configurations.

> The default value is **true**.', example='true'),
  instanceClass?: string(name='InstanceClass', description='The instance type of the instance. You must specify one of the InstanceClass and Capacity parameters to specify the instance type. We recommend that you use InstanceClass to specify the instance type.

To query the instance type, perform the following steps:

1.  In the [Overview](~~26350~~) topic, click the link in the **Reference** column corresponding to the instance type that you want to view.
2.  In the instance type table of the page that appears, find the instance type in the **InstanceClass** column.', example='redis.master.small.default'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  instances?: string(name='Instances', description='A JSON string that contains multiple instances. For more information, see [Description of the Instances parameter in the DescribePrice API operation](~~161811~~).', example='Instances=[{"RegionId": "cn-hangzhou","ZoneId": "cn-hangzhou-b","InstanceClass": "redis.master.small.default","Period": "1","Quantity": "1","Capacity": "4096"}]'),
  nodeType?: string(name='NodeType', description='The node type. Set the value to MASTER_SLAVE. This value indicates that the node type is master-replica.', example='MASTER_SLAVE'),
  orderParamOut?: string(name='OrderParamOut', description='Specifies whether to return parameters related to the order. Valid values:

*   **false**: does not return parameters related to the order.
*   **true**: returns parameters related to the order.

> The default value is **false**.', example='true'),
  orderType?: string(name='OrderType', description='The order type. Valid values:

*   **BUY**: The order is used to purchase instances.
*   **UPGRADE**: The order is used to change the configurations of instances.
*   **RENEW**: The order is used to renew instances.
*   **CONVERT**: The order is used to change the billing methods of instances.', example='BUY'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: long(name='Period', description='The subscription duration. Unit: months. Valid values: **1**, 2, 3, 4, 5, 6, 7, 8, **9**, **12**, **24**, and **36**.', example='3'),
  quantity?: long(name='Quantity', description='The number of instances that you want to purchase. Valid values: **1** to **30**.

> The default value is **1**.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~94527~~) operation to query the most recent zone list.', example='cn-hangzhou-e'),
}

model DescribePriceResponseBody = {
  order?: {
    coupons?: {
      coupon?: [ 
      {
        couponNo?: string(name='CouponNo', description='The coupon number.', example='youhuiquan_promotion_option_id_for_blank'),
        description?: string(name='Description', description='The description of the coupon.', example='coupondemo'),
        isSelected?: string(name='IsSelected', description='Indicates whether the coupon was selected.', example='true'),
        name?: string(name='Name', description='The name of the coupon.', example='test'),
      }
    ](name='Coupon')
    }(name='Coupons', description='Details about coupons.'),
    currency?: string(name='Currency', description='The currency used for payment. A value of CNY is used when the order was generated on the China site (aliyun.com), and a value of USD is used when the order was generated on the international site (alibabacloud.com).', example='CNY'),
    discountAmount?: string(name='DiscountAmount', description='The discount amount of the order.', example='0.21'),
    handlingFeeAmount?: string(name='HandlingFeeAmount', description='The service fees of the order.', example='0.1'),
    originalAmount?: string(name='OriginalAmount', description='The original price of the order.', example='0.21'),
    ruleIds?: {
      ruleId?: [ string ](name='RuleId')
    }(name='RuleIds', description='Details about promotion rule IDs.'),
    tradeAmount?: string(name='TradeAmount', description='The transaction price of the order.', example='10'),
  }(name='Order', description='The order information.'),
  orderParams?: string(name='OrderParams', description='The parameters of the order. This parameter is returned when OrderParamOut is set to `true`.', example='String'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A40BE4E-1890-4972-889C-FEFA37663635'),
  rules?: {
    rule?: [ 
    {
      name?: string(name='Name', description='The name of the rule.', example='test'),
      ruleDescId?: long(name='RuleDescId', description='The ID of the rule.', example='1111111111'),
      title?: string(name='Title', description='The title of the rule.', example='test'),
    }
  ](name='Rule')
  }(name='Rules', description='Details about promotion rules.'),
  subOrders?: {
    subOrder?: [ 
    {
      discountAmount?: string(name='DiscountAmount', description='The discount amount of the order.', example='0.21'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1xxxxxxxxxxxxx'),
      originalAmount?: string(name='OriginalAmount', description='The original price of the order.', example='0.21'),
      ruleIds?: {
        ruleId?: [ string ](name='RuleId')
      }(name='RuleIds', description='Details about promotion rule IDs.'),
      tradeAmount?: string(name='TradeAmount', description='The transaction price of the order.', example='10'),
    }
  ](name='SubOrder')
  }(name='SubOrders', description='Details about rules that match the coupon.'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.forceUpgrade)) {
    query['ForceUpgrade'] = request.forceUpgrade;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instances)) {
    query['Instances'] = request.instances;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.orderParamOut)) {
    query['OrderParamOut'] = request.orderParamOut;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The diaplay language of the **LocalName** parameter value. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English

> The default value is **zh-CN**.', example='zh-CN'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRegionsResponseBody = {
  regionIds?: {
    KVStoreRegion?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='r-kvstore.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      zoneIdList?: {
        zoneId?: [ string ](name='ZoneId')
      }(name='ZoneIdList', description='The list of zone IDs.'),
      zoneIds?: string(name='ZoneIds', description='The zone ID of the instance.', example='cn-hangzhou-h'),
    }
  ](name='KVStoreRegion')
  }(name='RegionIds', description='The value of the **RegionIds** parameter is in the array format. Each element in the array contains the **RegionId** and **ZoneIds** parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD425AD3-CC7B-4EE2-A5CB-2F61BA73****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRoleZoneInfoRequest {
  instanceId?: string(name='InstanceId', description='The number of the page to return. The value must be an integer that is greater than **0** and less than or equal to the maximum value supported by the integer data type. Default value: **1**.', example='r-t4nlenc2p04uvb****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **10**, **20**, and **50**. Default value: **10**.', example='10'),
  queryType?: int32(name='QueryType', description='The type of the node to query. Default value: 1. Valid values:

*   **0**: proxy node

    **

    **Note**This parameter is supported only for cluster and read/write splitting instances.

*   **1**: data node', example='0'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRoleZoneInfoResponseBody = {
  node?: {
    nodeInfo?: [ 
    {
      currentBandWidth?: long(name='CurrentBandWidth', description='The number of the returned page.', example='100'),
      currentMinorVersion?: string(name='CurrentMinorVersion', description='The number of entries to return on each page. Valid values: **10**, **20**, and **50**. Default value: **10**.', example='redis-5.0_0.3.10'),
      custinsId?: string(name='CustinsId', example='30381****'),
      defaultBandWidth?: long(name='DefaultBandWidth', description='The node type. Valid values:

*   **db**: data node.
*   **proxy**: proxy node.
*   **normal**: regular node. This value is returned when the instance runs in the standard architecture.', example='96'),
      insName?: string(name='InsName', description='Indicates whether the minor version is the latest version. Valid values:

*   **0**: The minor version is not the latest version.
*   **1**: The minor version is the latest version.

>  To update the minor version, call the [ModifyInstanceMinorVersion](~~129381~~) operation.', example='r-t4nlenc2p04uvb****'),
      insType?: int32(name='InsType', description='Details about each node in an ApsaraDB for Redis instance.', example='3'),
      isLatestVersion?: int32(name='IsLatestVersion', description='The number of entries returned per page.', example='1'),
      isOpenBandWidthService?: boolean(name='IsOpenBandWidthService', description='DescribeRoleZoneInfo', example='true'),
      nodeId?: string(name='NodeId', example='10065****'),
      nodeType?: string(name='NodeType', description='The ID of the request.', example='normal'),
      role?: string(name='Role', example='master'),
      zoneId?: string(name='ZoneId', description='Queries information about the type, minor version, and bandwidth of specific nodes in an ApsaraDB for Redis instance, and zones where the nodes are deployed.', example='cn-hangzhou-b'),
    }
  ](name='NodeInfo')
  }(name='Node', description='The role of the node. Valid values:

*   **master**: master node
*   **slave**: replica node'),
  pageNumber?: int32(name='PageNumber', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query instance IDs.', example='1'),
  pageSize?: int32(name='PageSize', description='Indicates whether the bandwidth of the node is increased. Valid values:

*   **true**: The bandwidth of the node is not increased.
*   **false**: The bandwidth of the node is increased.', example='10'),
  requestId?: string(name='RequestId', description='This parameter is used only for internal maintenance of ApsaraDB for Redis instances.', example='224B97FB-A275-4EAC-86E9-8922FEA2****'),
  totalCount?: int32(name='TotalCount', description='Indicates whether the node is a read replica. If the node is a read replica, **3** is returned.

>  If the node is not a read replica, no value is returned.', example='2'),
}

model DescribeRoleZoneInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRoleZoneInfoResponseBody(name='body'),
}

async function describeRoleZoneInfoWithOptions(request: DescribeRoleZoneInfoRequest, runtime: Util.RuntimeOptions): DescribeRoleZoneInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoleZoneInfo',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoleZoneInfo(request: DescribeRoleZoneInfoRequest): DescribeRoleZoneInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoleZoneInfoWithOptions(request, runtime);
}

model DescribeRunningLogRecordsRequest {
  characterType?: string(name='CharacterType', description='The number of the page to return. The value must be an integer that is greater than **0** and less than or equal to the maximum value supported by the integer data type. Default value: **1**.', example='proxy'),
  DBName?: string(name='DBName', description='The name of the database.', example='0'),
  endTime?: string(name='EndTime', description='The operation that you want to perform. Set the value to **DescribeRunningLogRecords**.', example='2018-12-03T08:01Z'),
  instanceId?: string(name='InstanceId', description='The time when the log was generated. The time is in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The shard type of the cluster instance. Valid values:

*   **proxy**: proxy node
*   **db**: data node
*   **cs**: config server node

>  If you set this parameter, you must also set the **NodeId** parameter.', example='r-bp1zxszhcgatnx****-db-0'),
  orderType?: string(name='OrderType', description='The ID of the node in the instance. You can set this parameter to query the operational logs of a specified node.

> 
*   This parameter is available only for read/write splitting and cluster instances of ApsaraDB for Redis.
*   If you set this parameter, you must also set the **CharacterType** parameter.', example='asc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The ID of the instance.', example='1'),
  pageSize?: int32(name='PageSize', description='The role of the data shard. Default value: master. Valid values:

*   **master**: master node
*   **slave**: replica node', example='30'),
  queryKeyword?: string(name='QueryKeyword', description='The content of the log.', example='aof'),
  resourceGroupId?: string(name='ResourceGroupId', description='The method that is used to sort the returned log entries. Valid values:

*   **asc**: ascending order
*   **desc**: descending order', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleType?: string(name='RoleType', description='The total number of entries returned.', example='master'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='Details about the log entries.', example='2018-12-03T07:01Z'),
}

model DescribeRunningLogRecordsResponseBody = {
  engine?: string(name='Engine', description='The ID of the node.

>  If a standard instance is queried, `(null)` is returned.', example='Redis'),
  instanceId?: string(name='InstanceId', description='The ID of the resource group.', example='r-bp1zxszhcgatnx****'),
  items?: {
    logRecords?: [ 
    {
      content?: string(name='Content', description='The maximum number of entries returned on each page.', example='CONFIG REWRITE executed with success.'),
      createTime?: string(name='CreateTime', description='The end of the time range to query. The end time must be later than the start time. The time range cannot exceed one day. We recommend that you specify 1 hour. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2018-12-03T07:07:30Z'),
      instanceId?: string(name='InstanceId', description='The page number of the returned page.', example='r-bp1zxszhcgatnx****'),
      nodeId?: string(name='NodeId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****-db-0'),
    }
  ](name='LogRecords')
  }(name='Items', description='The beginning of the time range to query.'),
  pageNumber?: int32(name='PageNumber', description='The number of log entries returned on the current page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The ID of the instance.', example='5'),
  pageSize?: int32(name='PageSize', description='The keyword that is used to query operational logs.', example='30'),
  requestId?: string(name='RequestId', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='093B8579-9264-43A0-ABA9-AA86****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2018-12-03T07:01Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The type of the database engine.', example='5'),
}

model DescribeRunningLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRunningLogRecordsResponseBody(name='body'),
}

/**
  * For more information about how to view the operational logs of an instance in the ApsaraDB for Redis console, see [View active logs](~~101713~~).
  * This operation can be called up to 100 times per minute.
  *
  * @param request DescribeRunningLogRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRunningLogRecordsResponse
 */
async function describeRunningLogRecordsWithOptions(request: DescribeRunningLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeRunningLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.characterType)) {
    query['CharacterType'] = request.characterType;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleType)) {
    query['RoleType'] = request.roleType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRunningLogRecords',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about how to view the operational logs of an instance in the ApsaraDB for Redis console, see [View active logs](~~101713~~).
  * This operation can be called up to 100 times per minute.
  *
  * @param request DescribeRunningLogRecordsRequest
  * @return DescribeRunningLogRecordsResponse
 */
async function describeRunningLogRecords(request: DescribeRunningLogRecordsRequest): DescribeRunningLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRunningLogRecordsWithOptions(request, runtime);
}

model DescribeSecurityGroupConfigurationRequest {
  instanceId?: string(name='InstanceId', description='The list of security groups.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeSecurityGroupConfigurationResponseBody = {
  items?: {
    ecsSecurityGroupRelation?: [ 
    {
      netType?: string(name='NetType', example='vpc'),
      regionId?: string(name='RegionId', description='Queries the security groups that are included in the whitelist of an ApsaraDB for Redis instance.', example='cn-hangzhou'),
      securityGroupId?: string(name='SecurityGroupId', description='The operation that you want to perform. Set the value to **DescribeSecurityGroupConfiguration**.', example='sg-bp14p9y07ns3gwq****'),
    }
  ](name='EcsSecurityGroupRelation')
  }(name='Items', description='The network type of the security group. Valid values:

*   **classic**: the classic network.
*   **vpc**: the virtual private cloud (VPC).'),
  requestId?: string(name='RequestId', description='The ID of the security group.', example='981C0D6A-D9DD-466C-92DA-F29DF755****'),
}

model DescribeSecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityGroupConfigurationResponseBody(name='body'),
}

async function describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroupConfiguration',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupConfigurationWithOptions(request, runtime);
}

model DescribeSecurityIpsRequest {
  instanceId?: string(name='InstanceId', description='The IP addresses in the whitelist. A maximum of 1,000 IP addresses can be specified in a whitelist.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeSecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The name of the whitelist.', example='EFC9161F-15E3-4A6E-8A99-C09916D1****'),
  securityIpGroups?: {
    securityIpGroup?: [ 
    {
      securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute', description='The operation that you want to perform. Set the value to **DescribeSecurityIps**.', example='hidden'),
      securityIpGroupName?: string(name='SecurityIpGroupName', example='default'),
      securityIpList?: string(name='SecurityIpList', example='100.100.202.***/24,10.10.10.***'),
    }
  ](name='SecurityIpGroup')
  }(name='SecurityIpGroups', description='The ID of the request.'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityIps',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpsWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  DBName?: string(name='DBName', description='The name of the database.', example='0'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The end time must be later than the start time. The time range cannot exceed one day. We recommend that you specify 1 hour. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2019-03-22T14:11Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the node in the instance. You can specify this parameter to query the slow logs of a specified node.

> This parameter is available only if the instance uses the read/write splitting or cluster architecture.', example='r-bp1zxszhcgatnx****-db-0'),
  orderBy?: string(name='OrderBy', description='The dimension by which to sort the results. Default value: execution_time. Valid values:

*   **execution_time**: sorts the results by query start time.
*   **latency**: sorts the results by query latency.', example='execution_time'),
  orderType?: string(name='OrderType', description='The sorting order of the results to return. Default value: DESC. Valid values:

*   **ASC**: ascending order
*   **DESC**: descending order', example='ASC'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword based on which slow logs are queried. You can set this parameter to a value of the string type.', example='keyword1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  slowLogRecordType?: string(name='SlowLogRecordType', description='The type of the slow logs. Default value: db. Valid values:

*   **proxy**: slow logs of proxy nodes
*   **db**: slow logs of data nodes', example='proxy'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2019-03-10T14:11Z'),
}

model DescribeSlowLogRecordsResponseBody = {
  engine?: string(name='Engine', description='The database engine that the instance runs.', example='Redis'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp10n********'),
  items?: {
    logRecords?: [ 
    {
      account?: string(name='Account', description='The ID of the account.', example='0'),
      accountName?: string(name='AccountName', description='The username of the account.', example='demo'),
      command?: string(name='Command', description='The slow query statement.', example='KEYS *'),
      DBName?: string(name='DBName', description='The name of the database.', example='-1'),
      dataBaseName?: string(name='DataBaseName', description='The name of the database, which serves the same purpose as the **DBName** parameter. We recommend that you use the value of the **DBName** parameter.', example='-1'),
      elapsedTime?: long(name='ElapsedTime', description='The amount of time consumed to execute the slow query statement. Unit: microseconds.', example='248'),
      executeTime?: string(name='ExecuteTime', description='The start time when the slow query statement was executed. The time is displayed in the YYYY-MM-DDTHH:mm:ssZ format.', example='2019-03-20T09:18:41Z'),
      IPAddress?: string(name='IPAddress', description='The IP address of the client.', example='172.16.88.***'),
      nodeId?: string(name='NodeId', description='The node ID.', example='r-bp1zxszhcgatnx****-db-0'),
    }
  ](name='LogRecords')
  }(name='Items', description='The slow log entries.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', description='The number of log entries returned on the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The maximum number of log entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='686BB8A6-BBA5-47E5-8A75-D2ADE433****'),
  startTime?: string(name='StartTime', description='The start time of the query.', example='2019-03-10T13:11Z'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The total number of returned log entries.', example='1'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

/**
  * You can also query slow logs in the ApsaraDB for Redis console. For more information, see [Query slow logs of an instance](~~95874~~). This operation can be called up to 100 times per minute.
  *
  * @param request DescribeSlowLogRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.slowLogRecordType)) {
    query['SlowLogRecordType'] = request.slowLogRecordType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowLogRecords',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also query slow logs in the ApsaraDB for Redis console. For more information, see [Query slow logs of an instance](~~95874~~). This operation can be called up to 100 times per minute.
  *
  * @param request DescribeSlowLogRecordsRequest
  * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeTasksRequest {
  endTime?: string(name='EndTime', description='2020-11-26T01:00Z', example='2020-11-26T01:00Z'),
  instanceId?: string(name='InstanceId', description='The identifier of the task.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.', example='30'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime', description='The end of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-11-20T01:00Z'),
  status?: string(name='Status', description='The total number of entries.', example='2'),
}

model DescribeTasksResponseBody = {
  items?: [ 
    {
      beginTime?: string(name='BeginTime', description='The beginning time of the task. The time follows the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='2020-11-13T06:16:54Z'),
      currentStepName?: string(name='CurrentStepName', description='The ID of the request.', example='init_redis'),
      finishTime?: string(name='FinishTime', description='The beginning of the time range to query. Specify the time in the *yyyy-MM-dd*T*HH:mm*Z format. The time must be in UTC.', example='2020-11-13T06:17:18Z'),
      progress?: float(name='Progress', description='The number of entries returned on each page.', example='100'),
      remain?: int32(name='Remain', description='2', example='60'),
      status?: string(name='Status', description='1', example='2'),
      stepProgressInfo?: string(name='StepProgressInfo', description='The end time of the task. The time follows the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.', example='3/3'),
      stepsInfo?: string(name='StepsInfo', description='The page number of the returned page.', example='[{\\"remain\\":0,\\"name\\":\\"init_instance\\",\\"progress\\":100},{\\"remain\\":107,\\"name\\":\\"init_redis\\",\\"progress\\":12.3},{\\"remain\\":1881,\\"name\\":\\"init_config\\",\\"progress\\":0}]'),
      taskAction?: string(name='TaskAction', example='ModifyDBInstanceParameter'),
      taskId?: string(name='TaskId', description='The name of the subtask.', example='32302****'),
    }
  ](name='Items', description='The estimated remaining duration of the task. Unit: seconds.

>  If the task is not running, this parameter is not returned or the returned value is **0**.'),
  pageNumber?: int32(name='PageNumber', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query instance IDs.', example='1'),
  pageSize?: int32(name='PageSize', description='30', example='30'),
  requestId?: string(name='RequestId', description='The status of the task. Separate multiple values with commas (,). Valid values:

*   **0**: The task is pending.
*   **1**: The task is running.
*   **2**: The task is complete.
*   **4**: The task is closed.
*   **7**: The task is paused.
*   **8**: The task is interrupted.', example='608FAEC9-485E-4C65-82DE-2E5B955E****'),
  totalRecordCount?: int32(name='TotalRecordCount', description='The information about the subtask in the JSON format. This includes the expected remaining duration (**remain**), the name of the subtask (**name**), and the task progress (**progress**).

>  If the subtask does not exist, this parameter is not returned.', example='2'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTasksResponseBody(name='body'),
}

/**
  * The progress of the task. Unit: %.
  *
  * @param request DescribeTasksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTasksResponse
 */
async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The progress of the task. Unit: %.
  *
  * @param request DescribeTasksRequest
  * @return DescribeTasksResponse
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='en-US'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-huhehaote'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='1D42F072-72FE-4DC4-BB8E-64B1D298****'),
  zones?: {
    KVStoreZone?: [ 
    {
      disabled?: boolean(name='Disabled', description='Indicates whether ApsaraDB for Redis instances can be created in the current zone. Valid values:

*   **true**: ApsaraDB for Redis instances cannot be created in the current zone.
*   **false**: ApsaraDB for Redis instances can be created in the current zone.', example='true'),
      isRds?: boolean(name='IsRds', description='Indicates whether the zone is managed by ApsaraDB RDS. The return value of this parameter is **true** in ApsaraDB for Redis.', example='true'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-huhehaote'),
      switchNetwork?: boolean(name='SwitchNetwork', description='Indicates whether the network type of the instance can be changed from the classic network to Virtual Private Cloud (VPC). Valid values:

*   **true**: The network type of the instance can be changed from the classic network to VPC.
*   **false**: The network type of the instance cannot be changed from the classic network to VPC.', example='true'),
      zoneId?: string(name='ZoneId', description='The ID of the zone within the specified region.', example='cn-huhehaote-b'),
      zoneName?: string(name='ZoneName', description='The name of the zone within the specified region.'),
    }
  ](name='KVStoreZone')
  }(name='Zones', description='The queried zones.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model EnableAdditionalBandwidthRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Default value: true. Valid values:

*   **true**: enables automatic payment. Make sure that you have sufficient balance within your account.
*   **false**: disables automatic payment. If automatic payment is disabled, you must perform the following steps to complete the payment in the ApsaraDB for Redis console: In the top navigation bar, choose **Expenses** > **Renewal Management**. In the left-side navigation pane, click **Orders**. On the **Orders** page, find the order and complete the payment.', example='true'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal. This is the default value.', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal cycle based on which ApsaraDB for Redis automatically renews the purchased bandwidth. Unit: months. Valid values: **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**, **9**, **12**, **24**, **36**, and **60**.

> * This parameter takes effect and must be specified only when you set the **AutoRenew** parameter to **true**.
> * You cannot query the auto-renewal cycle by calling an API operation. To obtain the auto-renewal cycle, you can perform the following procedure: In the top navigation bar of the ApsaraDB for Redis console, choose **Expenses** > **Renewal Management**. On the page that appears, enter the ID of the instance and the `-bw` suffix in the **Instance ID** field. Example: r-bp1zxszhcgatnx****-bw.', example='1'),
  bandwidth?: string(name='Bandwidth', description='The amount of bandwidth that you want to purchase. Unit: MB/s. The value of this parameter must be an integer that is greater than or equal to **0**. You can set this parameter to a value that is up to two times the default bandwidth that is supported by the instance type. For example, if the default bandwidth that is supported by the instance type is 10 MB/s, you can set this parameter to a value within the range of **0** to **20**.

> * You call the [DescribeRoleZoneInfo](~~190794~~) operation to query the default bandwidth that is supported by an instance type. In the response, the default bandwidth is indicated by the **DefaultBandWidth** parameter. For more information about instance types, see [Overview](~~26350~~).
> * If you specify multiple data shard IDs in the **NodeId** parameter, you must specify the amount of bandwidth that you want to purchase for each specified data shard in the Bandwidth parameter. The bandwidth values that you specify in the Bandwidth parameter must be in the same sequence as the data shard IDs that you specify in the NodeId parameter. In addition, you must separate the bandwidth values with commas (,).', example='20'),
  chargeType?: string(name='ChargeType', description='The billing method of the bandwidth instance. Default value: PostPaid. Valid values:

- PrePaid: subscription
- PostPaid: pay-as-you-go', example='PostPaid'),
  couponNo?: string(name='CouponNo', description='The coupon ID.', example='youhuiquan_promotion_option_id_for_blank'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the IDs of instances.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the data shard for which you want to purchase a specific amount of bandwidth. You can call the [DescribeLogicInstanceTopology](~~94665~~) operation to query the IDs of the data shards in an instance. If you specify multiple data shard IDs, separate the data shard IDs with commas (,). You can also set this parameter to **All**, which specifies all the data shards of the instance.

> This parameter is available and required only if the instance is a [cluster master-replica](~~52228~~) or [read/write splitting](~~62870~~) instance.', example='r-bp1zxszhcgatnx****-db-0'),
  orderTimeLength?: string(name='OrderTimeLength', description='The validity period of the bandwidth that you purchase. Unit: day. Valid values: **1**, **2**, **3**, **7**, **14**, **30**, **60**, **90**, **180**, **365**, **730**, **1095**, and **1825**.

> If you want to continue using the purchased bandwidth after the specified period of time elapses, you must call the [RenewAdditionalBandwidth](~~211199~~) operation to submit a renewal order.', example='30'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  sourceBiz?: string(name='SourceBiz', description='The source of the operation. This parameter is used only for internal maintenance. You do not need to specify this parameter.', example='SDK'),
}

model EnableAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='2084452111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model EnableAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableAdditionalBandwidthResponseBody(name='body'),
}

/**
  * For more information about the fees, limits, and answers to some frequently asked questions about bandwidth adjustments, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~).
  * >  Before you call this operation, you can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the bandwidth of each data shard in the instance.
  *
  * @param request EnableAdditionalBandwidthRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableAdditionalBandwidthResponse
 */
async function enableAdditionalBandwidthWithOptions(request: EnableAdditionalBandwidthRequest, runtime: Util.RuntimeOptions): EnableAdditionalBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.orderTimeLength)) {
    query['OrderTimeLength'] = request.orderTimeLength;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sourceBiz)) {
    query['SourceBiz'] = request.sourceBiz;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableAdditionalBandwidth',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the fees, limits, and answers to some frequently asked questions about bandwidth adjustments, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~).
  * >  Before you call this operation, you can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the bandwidth of each data shard in the instance.
  *
  * @param request EnableAdditionalBandwidthRequest
  * @return EnableAdditionalBandwidthResponse
 */
async function enableAdditionalBandwidth(request: EnableAdditionalBandwidthRequest): EnableAdditionalBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableAdditionalBandwidthWithOptions(request, runtime);
}

model FlushExpireKeysRequest {
  effectiveTime?: string(name='EffectiveTime', description='The time when to delete the expired keys. Default value: Immediately. Valid values:

*   **Immediately**: deletes the keys immediately.
*   **MaintainTime**: deletes the keys during the maintenance window.

> You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.', example='Immediately'),
  instanceId?: string(name='InstanceId', description='The ID of the task.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model FlushExpireKeysResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **FlushExpireKeys**.', example='82E30AB7-E3A4-46AC-88A0-3E4DCDC5****'),
  taskId?: string(name='TaskId', example='21986****'),
}

model FlushExpireKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlushExpireKeysResponseBody(name='body'),
}

/**
  * The time when the minor version is upgraded. Valid values:
  * *   **Immediately**: immediately deletes expired keys.
  * *   **MaintainTime:**deletes expired key in the maintenance window.
  * >  You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.
  *
  * @param request FlushExpireKeysRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FlushExpireKeysResponse
 */
async function flushExpireKeysWithOptions(request: FlushExpireKeysRequest, runtime: Util.RuntimeOptions): FlushExpireKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlushExpireKeys',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The time when the minor version is upgraded. Valid values:
  * *   **Immediately**: immediately deletes expired keys.
  * *   **MaintainTime:**deletes expired key in the maintenance window.
  * >  You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.
  *
  * @param request FlushExpireKeysRequest
  * @return FlushExpireKeysResponse
 */
async function flushExpireKeys(request: FlushExpireKeysRequest): FlushExpireKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return flushExpireKeysWithOptions(request, runtime);
}

model FlushInstanceRequest {
  instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model FlushInstanceResponseBody = {
  requestId?: string(name='RequestId', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B3E7'),
}

model FlushInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlushInstanceResponseBody(name='body'),
}

/**
  * The ID of the instance.
  *
  * @param request FlushInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FlushInstanceResponse
 */
async function flushInstanceWithOptions(request: FlushInstanceRequest, runtime: Util.RuntimeOptions): FlushInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlushInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the instance.
  *
  * @param request FlushInstanceRequest
  * @return FlushInstanceResponse
 */
async function flushInstance(request: FlushInstanceRequest): FlushInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return flushInstanceWithOptions(request, runtime);
}

model FlushInstanceForDBRequest {
  dbIndex?: int32(name='DbIndex', description='The index number of the database. Valid values: 0 to 255.', example='1'),
  instanceId?: string(name='InstanceId', description='The instance ID. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model FlushInstanceForDBResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model FlushInstanceForDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FlushInstanceForDBResponseBody(name='body'),
}

/**
  * Each ApsaraDB for Redis or Tair instance can contain up to 256 databases. Each database does not have a separate memory usage limit. The memory capacity that a database can use is subject to the total memory limit of the instance. You can execute the `SELECT` statement to switch between databases. For more information, see [What is the size of each database on an ApsaraDB for Redis instance, and how can I choose databases?](~~38688~~)
  * >  This operation is available only for cloud-native instances that use cloud disks.
  *
  * @param request FlushInstanceForDBRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FlushInstanceForDBResponse
 */
async function flushInstanceForDBWithOptions(request: FlushInstanceForDBRequest, runtime: Util.RuntimeOptions): FlushInstanceForDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbIndex)) {
    query['DbIndex'] = request.dbIndex;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlushInstanceForDB',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each ApsaraDB for Redis or Tair instance can contain up to 256 databases. Each database does not have a separate memory usage limit. The memory capacity that a database can use is subject to the total memory limit of the instance. You can execute the `SELECT` statement to switch between databases. For more information, see [What is the size of each database on an ApsaraDB for Redis instance, and how can I choose databases?](~~38688~~)
  * >  This operation is available only for cloud-native instances that use cloud disks.
  *
  * @param request FlushInstanceForDBRequest
  * @return FlushInstanceForDBResponse
 */
async function flushInstanceForDB(request: FlushInstanceForDBRequest): FlushInstanceForDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return flushInstanceForDBWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest {
  accountName?: string(name='AccountName', description='GrantAccountPrivilege', example='demoaccount'),
  accountPrivilege?: string(name='AccountPrivilege', example='RoleReadWrite'),
  instanceId?: string(name='InstanceId', description='Modifies the permissions of an account for an ApsaraDB for Redis instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model GrantAccountPrivilegeResponseBody = {
  requestId?: string(name='RequestId', example='3845BDF5-15A6-4444-B770-78501819****'),
}

model GrantAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GrantAccountPrivilegeResponseBody(name='body'),
}

/**
  * The name of the account. You can call the [DescribeAccounts](~~95802~~) operation to obtain the name of the account.
  *
  * @param request GrantAccountPrivilegeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GrantAccountPrivilegeResponse
 */
async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPrivilege)) {
    query['AccountPrivilege'] = request.accountPrivilege;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantAccountPrivilege',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the account. You can call the [DescribeAccounts](~~95802~~) operation to obtain the name of the account.
  *
  * @param request GrantAccountPrivilegeRequest
  * @return GrantAccountPrivilegeResponse
 */
async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model InitializeKvstorePermissionRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to **InitializeKvstorePermission**.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model InitializeKvstorePermissionResponseBody = {
  requestId?: string(name='RequestId', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model InitializeKvstorePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeKvstorePermissionResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request InitializeKvstorePermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InitializeKvstorePermissionResponse
 */
async function initializeKvstorePermissionWithOptions(request: InitializeKvstorePermissionRequest, runtime: Util.RuntimeOptions): InitializeKvstorePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitializeKvstorePermission',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request InitializeKvstorePermissionRequest
  * @return InitializeKvstorePermissionResponse
 */
async function initializeKvstorePermission(request: InitializeKvstorePermissionRequest): InitializeKvstorePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeKvstorePermissionWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token used to start the next query to retrieve more results.

> This parameter is not required in the first query. If not all results are returned in one query, you can specify the **NextToken** value returned for the query to perform the next query.', example='212db86sca4384811e0b5e8707ec2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the instances.

> *   You must specify this parameter or the **Tag** parameter.', example='r-bp1zxszhcgatnx****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of the tags associated with the instances you want to query.', example='demokey'),
      value?: string(name='Value', description='The values of the tags associated with the instances you want to query.', example='demovalue'),
    }
  ](name='Tag', description='The tags of the instance. You must specify this parameter or the **ResourceId** parameter.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token required to obtain more results. If a query does not return all results, in the next query, you can provide the token returned by the previous query to obtain more results.', example='212db86sca4384811e0b5e8707ec2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='47A514A1-4B77-4E30-B4C5-2A880650****'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID, which is also the ID of the instance.', example='r-bp1zxszhcgatnx****'),
      resourceType?: string(name='ResourceType', description='The resource type. The return value is **ALIYUN::KVSTORE::INSTANCE**. This value indicates an ApsaraDB for Redis instance.', example='ALIYUN::KVSTORE::INSTANCE'),
      tagKey?: string(name='TagKey', description='The keys of the tags.', example='demokey'),
      tagValue?: string(name='TagValue', description='The values of the tags.', example='demovalue'),
    }
  ](name='TagResource')
  }(name='TagResources', description='Details of the instances and tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * You can also query the relationships between instances and tags in the ApsaraDB for Redis console. For more information, see [Filter ApsaraDB for Redis instances by tag](~~119160~~) and [View tags bound to an instance](~~134038~~).
  *
  * @param request ListTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also query the relationships between instances and tags in the ApsaraDB for Redis console. For more information, see [Filter ApsaraDB for Redis instances by tag](~~119160~~) and [View tags bound to an instance](~~134038~~).
  *
  * @param request ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MigrateToOtherZoneRequest {
  DBInstanceId?: string(name='DBInstanceId', example='r-bp1zxszhcgatnx****'),
  effectiveTime?: string(name='EffectiveTime', example='Immediately'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryZoneId?: string(name='SecondaryZoneId', example='cn-hangzhou-h'),
  securityToken?: string(name='SecurityToken'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1e7clcw529l773d****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
}

model MigrateToOtherZoneResponseBody = {
  requestId?: string(name='RequestId', example='29B0BF34-D069-4495-92C7-FA6D9452****'),
}

model MigrateToOtherZoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MigrateToOtherZoneResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request MigrateToOtherZoneRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return MigrateToOtherZoneResponse
 */
async function migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateToOtherZoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryZoneId)) {
    query['SecondaryZoneId'] = request.secondaryZoneId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MigrateToOtherZone',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request MigrateToOtherZoneRequest
  * @return MigrateToOtherZoneResponse
 */
async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateToOtherZoneWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the account.

*   The description must start with a letter and cannot start with `http://` or `https://`.
*   The description can contain letters, digits, underscores (\\_), and hyphens (-).
*   The description must be 2 to 256 characters in length.', example='testescription'),
  accountName?: string(name='AccountName', description='The username of the account. You can call the [DescribeAccounts](~~95802~~) operation to query the username of the account.', example='demoaccount'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B****'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
  * > This operation is supported only for instances that run Redis 4.0 or later.
  *
  * @param request ModifyAccountDescriptionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > This operation is supported only for instances that run Redis 4.0 or later.
  *
  * @param request ModifyAccountDescriptionRequest
  * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPasswordRequest {
  accountName?: string(name='AccountName', description='The username of the account for which you want to change the password. You can call the [DescribeAccounts](~~95802~~) operation to query the username of the account.', example='testaccount'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  newAccountPassword?: string(name='NewAccountPassword', description='The new password to be set for the account. The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and specific special characters. These special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='newPassWd888****'),
  oldAccountPassword?: string(name='OldAccountPassword', description='The current password of the account.

> If you forget your password, you can call the [ResetAccountPassword](~~95941~~) operation to reset your password.', example='oldPassWd999****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.newAccountPassword)) {
    query['NewAccountPassword'] = request.newAccountPassword;
  }
  if (!Util.isUnset(request.oldAccountPassword)) {
    query['OldAccountPassword'] = request.oldAccountPassword;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountPassword',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPasswordWithOptions(request, runtime);
}

model ModifyActiveOperationTaskRequest {
  ids?: string(name='Ids', description='The ID of the O\\&M task. Separate multiple IDs with commas (,).

> You can call the [DescribeActiveOperationTask](~~197387~~) operation to query the ID of an O\\&M task.', example='11111,22222'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  switchTime?: string(name='SwitchTime', description='The scheduled switchover time to be specified. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> The time cannot be later than the latest operation time. You can call the [DescribeActiveOperationTask](~~197387~~) operation to obtain the latest operation time, which is the value of the **Deadline** parameter in the response.', example='2019-10-17T18:50:00Z'),
}

model ModifyActiveOperationTaskResponseBody = {
  ids?: string(name='Ids', description='The ID of the O\\&M task. IDs are separated by commas (,).', example='11111,22222'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model ModifyActiveOperationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyActiveOperationTaskResponseBody(name='body'),
}

/**
  * You can receive notifications for ApsaraDB for Redis events such as instance migration and version upgrade by text message, phone call, email, internal message, or by using the ApsaraDB for Redis console. You can also change the scheduled switchover time of a task in the ApsaraDB for Redis console. For more information, see [Query or manage pending events](~~187022~~).
  *
  * @param request ModifyActiveOperationTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyActiveOperationTaskResponse
 */
async function modifyActiveOperationTaskWithOptions(request: ModifyActiveOperationTaskRequest, runtime: Util.RuntimeOptions): ModifyActiveOperationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyActiveOperationTask',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can receive notifications for ApsaraDB for Redis events such as instance migration and version upgrade by text message, phone call, email, internal message, or by using the ApsaraDB for Redis console. You can also change the scheduled switchover time of a task in the ApsaraDB for Redis console. For more information, see [Query or manage pending events](~~187022~~).
  *
  * @param request ModifyActiveOperationTaskRequest
  * @return ModifyActiveOperationTaskResponse
 */
async function modifyActiveOperationTask(request: ModifyActiveOperationTaskRequest): ModifyActiveOperationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActiveOperationTaskWithOptions(request, runtime);
}

model ModifyAuditLogConfigRequest {
  dbAudit?: boolean(name='DbAudit', description='Specifies whether to enable the audit log feature. Default value: true. Valid values:

*   **true**: enables the audit log feature.
*   **false**: disables the audit log feature.

> If the instance uses the [cluster architecture](~~52228~~) or [read/write splitting architecture](~~62870~~), the audit log feature is enabled or disabled for both the data nodes and proxy nodes. You cannot separately enable the audit log feature for the data nodes or proxy nodes.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retention?: int32(name='Retention', description='The retention period of audit logs. Valid values: **1** to **365**. Unit: days.

> *   This parameter is required only if the **DbAudit** parameter is set to **true**.
> *   The value of this parameter takes effect for all ApsaraDB for Redis instances in the current region.', example='10'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyAuditLogConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B****'),
}

model ModifyAuditLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAuditLogConfigResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of the audit log feature.
  * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest major version and minor version.
  *
  * @param request ModifyAuditLogConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyAuditLogConfigResponse
 */
async function modifyAuditLogConfigWithOptions(request: ModifyAuditLogConfigRequest, runtime: Util.RuntimeOptions): ModifyAuditLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbAudit)) {
    query['DbAudit'] = request.dbAudit;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAuditLogConfig',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of the audit log feature.
  * Before you call this operation, make sure that the ApsaraDB for Redis instance meets the following requirements:
  * *   The instance is an ApsaraDB for Redis Community Edition instance or ApsaraDB for Redis Enhanced Edition (Tair) [DRAM-based instance](~~126164~~).
  * *   The engine version of the instance is Redis 4.0 or later, and the latest minor version is used. You can call the [DescribeEngineVersion](~~95268~~) operation to check whether the instance uses the latest major version and minor version.
  *
  * @param request ModifyAuditLogConfigRequest
  * @return ModifyAuditLogConfigResponse
 */
async function modifyAuditLogConfig(request: ModifyAuditLogConfigRequest): ModifyAuditLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAuditLogConfigWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  enableBackupLog?: int32(name='EnableBackupLog', description='Enables or disables the data flashback feature for the instance. Valid values:

*   **1**: enables the data flashback feature. Before you can use data flashback, you must make sure that AOF persistence is enabled for the instance (`appendonly` set to `yes`).
*   **0** (default): disables the data flashback feature.

> This parameter is available only for Tair DRAM-based and persistent memory-optimized instances. For more information, see [Data flashback](~~443784~~).', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The days of the week to back up data. Valid values:

*   **Monday**: every Monday
*   **Tuesday**: every Tuesday
*   **Wednesday**: every Wednesday
*   **Thursday**: every Thursday
*   **Friday**: every Friday
*   **Saturday**: every Saturday
*   **Sunday**: every Sunday

>  Separate multiple options with commas (,).', example='Tuesday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The time range to back up data. Specify the time in the ISO 8601 standard in the *HH:mm*Z-*HH:mm*Z format. The time must be in UTC.

>  The beginning and end of the time range must be on the hour. The duration must be an hour.', example='07:00Z-08:00Z'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B****'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableBackupLog)) {
    query['EnableBackupLog'] = request.enableBackupLog;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.preferredBackupPeriod)) {
    query['PreferredBackupPeriod'] = request.preferredBackupPeriod;
  }
  if (!Util.isUnset(request.preferredBackupTime)) {
    query['PreferredBackupTime'] = request.preferredBackupTime;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  currentConnectionString?: string(name='CurrentConnectionString', description='The current endpoint of the instance.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  IPType?: string(name='IPType', description='The network type of the endpoint. Valid values:

*   **Private**: internal network
*   **Public**: Internet', example='Public'),
  newConnectionString?: string(name='NewConnectionString', description='The prefix of the new endpoint. Specify the endpoint in the `<prefix>.redis.rds.aliyuncs.com` format. The prefix can contain lowercase letters and digits, and must start with a lowercase letter. The prefix can be 8 to 40 characters in length.

> You must specify one of the **NewConnectionString** and **Port** parameters.', example='standardredis'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', description='The port number that is used to connect to the instance. Valid values: **1024** to **65535**.

> You must specify one of the **NewConnectionString** and **Port** parameters.', example='6379'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1790D68A-465C-44E3-BC24-9732652961F9'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

/**
  * You can also modify the endpoint or port number of an instance in the ApsaraDB for Redis console. For more information, see [Change the endpoint or port number of an instance](~~85683~~).
  *
  * @param request ModifyDBInstanceConnectionStringRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDBInstanceConnectionStringResponse
 */
async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.IPType)) {
    query['IPType'] = request.IPType;
  }
  if (!Util.isUnset(request.newConnectionString)) {
    query['NewConnectionString'] = request.newConnectionString;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also modify the endpoint or port number of an instance in the ApsaraDB for Redis console. For more information, see [Change the endpoint or port number of an instance](~~85683~~).
  *
  * @param request ModifyDBInstanceConnectionStringRequest
  * @return ModifyDBInstanceConnectionStringResponse
 */
async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  instanceName?: string(name='InstanceName', description='The new name of the instance. The name must be 2 to 80 characters in length. The name must start with a letter and cannot contain spaces and the following special characters: `@ / : = " < > { [ ] }`', example='newinstancename'),
  instanceReleaseProtection?: boolean(name='InstanceReleaseProtection', description='[The release protection state of the instance.](~~165005~~) Valid values:

*   **true**: enabled
*   **false**: disabled

> This parameter is available only for pay-as-you-go instances.', example='true'),
  newPassword?: string(name='NewPassword', description='The new password for the default account. The default account is named after the instance ID. Example: r-bp10noxlhcoim2\\*\\*\\*\\*.

> The password must be 8 to 32 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. These special characters include `! @ # $ % ^ & * ( ) _ + - =`', example='uW8+nsrp'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B3E76'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

/**
  * You can also modify the information of an instance in the ApsaraDB for Redis console. For more information, see [Change or reset the password](~~43874~~).
  *
  * @param request ModifyInstanceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceReleaseProtection)) {
    query['InstanceReleaseProtection'] = request.instanceReleaseProtection;
  }
  if (!Util.isUnset(request.newPassword)) {
    query['NewPassword'] = request.newPassword;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also modify the information of an instance in the ApsaraDB for Redis console. For more information, see [Change or reset the password](~~43874~~).
  *
  * @param request ModifyInstanceAttributeRequest
  * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewalAttributeRequest {
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable auto-renewal. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal.

> The default value is **false**.', example='true'),
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance. Separate multiple instance IDs with commas (,).

> You can specify up to 30 instance IDs.', example='r-bp1zxszhcgatnx****'),
  duration?: string(name='Duration', description='The auto-renewal period. Valid values: **1** to **12**. Unit: months. When the instance is about to expire, the instance is automatically renewed based on the number of months specified by this parameter.

> This parameter is available and required only if the **AutoRenew** parameter is set to **true**.', example='3'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceAutoRenewalAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='52D901ED-E0A5-42FB-B9DB-39C295C3****'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAutoRenewalAttributeResponseBody(name='body'),
}

/**
  * > Auto-renewal is triggered seven days before the expiration date of the instance.
  *
  * @param request ModifyInstanceAutoRenewalAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceAutoRenewalAttributeResponse
 */
async function modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAutoRenewalAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > Auto-renewal is triggered seven days before the expiration date of the instance.
  *
  * @param request ModifyInstanceAutoRenewalAttributeRequest
  * @return ModifyInstanceAutoRenewalAttributeResponse
 */
async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model ModifyInstanceConfigRequest {
  config?: string(name='Config', description='The configuration parameters of the instance in the JSON format.

> For more information, see [Supported parameters](~~259681~~).', example='{"maxmemory-policy":"volatile-lru","zset-max-ziplist-entries":128,"zset-max-ziplist-value":64,"hash-max-ziplist-entries":512,"set-max-intset-entries":512}'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B****'),
}

model ModifyInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceConfigResponseBody(name='body'),
}

async function modifyInstanceConfigWithOptions(request: ModifyInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyInstanceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceConfig',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceConfig(request: ModifyInstanceConfigRequest): ModifyInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceConfigWithOptions(request, runtime);
}

model ModifyInstanceMaintainTimeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  maintainEndTime?: string(name='MaintainEndTime', description='The end time of the maintenance window. The time is in the *HH:mm*Z format. The time is displayed in UTC. For example, if you want the maintenance to end at 2:00 (UTC+8), set this parameter to `18:00Z`.

> The end time must be one hour later than the start time. For example, if the value of the MaintainStartTime parameter is `17:00Z`, the value of the MaintainEndTime parameter must be `18:00Z`.', example='04:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', description='The start time of the maintenance window. The time is in the *HH:mm*Z format. The time is displayed in UTC. For example, if you want the maintenance to start at 1:00 (UTC+8), set this parameter to `17:00Z`. After you call the API operation, you can view the actual time in the ApsaraDB for Redis console. For more information, see [Set a maintenance window](~~55252~~).', example='03:00Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B3E76'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

/**
  * You can also modify the maintenance window of an instance in the ApsaraDB for Redis console. For more information, see [Set a maintenance window](~~55252~~).
  *
  * @param request ModifyInstanceMaintainTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceMaintainTimeResponse
 */
async function modifyInstanceMaintainTimeWithOptions(request: ModifyInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maintainEndTime)) {
    query['MaintainEndTime'] = request.maintainEndTime;
  }
  if (!Util.isUnset(request.maintainStartTime)) {
    query['MaintainStartTime'] = request.maintainStartTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMaintainTime',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also modify the maintenance window of an instance in the ApsaraDB for Redis console. For more information, see [Set a maintenance window](~~55252~~).
  *
  * @param request ModifyInstanceMaintainTimeRequest
  * @return ModifyInstanceMaintainTimeResponse
 */
async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyInstanceMajorVersionRequest {
  effectiveTime?: string(name='EffectiveTime', description='The time when the major version is upgraded. Valid values:

*   **Immediately**: immediately upgrades the major version. This is the default value.
*   **MaintainTime**: upgrades the major version in the maintenance window.

>  You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.', example='Immediately'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  majorVersion?: string(name='MajorVersion', description='The major version to which you want to upgrade the instance. Valid values: **4.0** and **5.0**.', example='5.0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceMajorVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA587FB2-2593-4DFE-BE13-2494C2DF****'),
}

model ModifyInstanceMajorVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMajorVersionResponseBody(name='body'),
}

/**
  * For more information about how to perform the corresponding operation in the console, see [Upgrade the major version](~~101764~~).
  *
  * @param request ModifyInstanceMajorVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceMajorVersionResponse
 */
async function modifyInstanceMajorVersionWithOptions(request: ModifyInstanceMajorVersionRequest, runtime: Util.RuntimeOptions): ModifyInstanceMajorVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.majorVersion)) {
    query['MajorVersion'] = request.majorVersion;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMajorVersion',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about how to perform the corresponding operation in the console, see [Upgrade the major version](~~101764~~).
  *
  * @param request ModifyInstanceMajorVersionRequest
  * @return ModifyInstanceMajorVersionResponse
 */
async function modifyInstanceMajorVersion(request: ModifyInstanceMajorVersionRequest): ModifyInstanceMajorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMajorVersionWithOptions(request, runtime);
}

model ModifyInstanceMinorVersionRequest {
  effectiveTime?: string(name='EffectiveTime', description='The time when the minor version is updated. Valid values:

*   **Immediately**: The minor version is immediately updated.
*   **MaintainTime**: The minor version is updated within the maintenance window.

>  You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.', example='Immediately'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  minorversion?: string(name='Minorversion', description='The minor version to which you want to update. Default value: **latest_version**.', example='latest_version'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceMinorVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='28761557-0B33-41DF-AEEB-322DFF96****'),
}

model ModifyInstanceMinorVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMinorVersionResponseBody(name='body'),
}

/**
  * The procedure to update the minor version of an instance varies based on types of ApsaraDB for Redis instances. For more information, see [Upgrade the minor version](~~56450~~).
  * > 
  * *   Before you call this operation, you can call the [DescribeEngineVersion](~~95268~~) operation to query the minor version of the current instance.
  * *   When you switch your workloads over from the original instance to a new instance or from the master node to the replica node in the original instance, you may experience disconnections that last a few seconds. The original instance stays in the read-only state within 60 seconds until all data is synchronized. We recommend that you upgrade the original instance during off-peak hours and make sure that your application is configured to automatically reconnect to the original instance.
  *
  * @param request ModifyInstanceMinorVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceMinorVersionResponse
 */
async function modifyInstanceMinorVersionWithOptions(request: ModifyInstanceMinorVersionRequest, runtime: Util.RuntimeOptions): ModifyInstanceMinorVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.minorversion)) {
    query['Minorversion'] = request.minorversion;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMinorVersion',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The procedure to update the minor version of an instance varies based on types of ApsaraDB for Redis instances. For more information, see [Upgrade the minor version](~~56450~~).
  * > 
  * *   Before you call this operation, you can call the [DescribeEngineVersion](~~95268~~) operation to query the minor version of the current instance.
  * *   When you switch your workloads over from the original instance to a new instance or from the master node to the replica node in the original instance, you may experience disconnections that last a few seconds. The original instance stays in the read-only state within 60 seconds until all data is synchronized. We recommend that you upgrade the original instance during off-peak hours and make sure that your application is configured to automatically reconnect to the original instance.
  *
  * @param request ModifyInstanceMinorVersionRequest
  * @return ModifyInstanceMinorVersionResponse
 */
async function modifyInstanceMinorVersion(request: ModifyInstanceMinorVersionRequest): ModifyInstanceMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMinorVersionWithOptions(request, runtime);
}

model ModifyInstanceNetExpireTimeRequest {
  classicExpiredDays?: int32(name='ClassicExpiredDays', description='The extension period to retain the classic network endpoint of the instance. Unit: days. Valid values: **14**, **30**, **60**, and **120**.', example='14'),
  connectionString?: string(name='ConnectionString', description='The endpoint of the classic network.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceNetExpireTimeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  netInfoItems?: {
    netInfoItem?: [ 
    {
      connectionString?: string(name='ConnectionString', description='The endpoint of the classic network.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
      DBInstanceNetType?: string(name='DBInstanceNetType', description='The network type of the instance. The returned value is **Classic**.', example='Classic'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time of the classic network endpoint.', example='2019-08-01T09:29:18Z'),
      IPAddress?: string(name='IPAddress', description='The IP address of the instance in the classic network.', example='100.118.142.***'),
      port?: string(name='Port', description='The port number that is used to connect to the instance.', example='6379'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems', description='Details of the extension period for which the classic network endpoint of the instance is retained.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C4AF387-1EA3-4C84-8013-3F6B973EDDF5'),
}

model ModifyInstanceNetExpireTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceNetExpireTimeResponseBody(name='body'),
}

/**
  * You can also perform this operation in the ApsaraDB for Redis console. For more information, see [Change the expiration time for the endpoint of the classic network](~~60062~~).
  * > For more information about how to switch the network type of an ApsaraDB for Redis instance from classic network to VPC, see [SwitchNetwork](~~61005~~).
  *
  * @param request ModifyInstanceNetExpireTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceNetExpireTimeResponse
 */
async function modifyInstanceNetExpireTimeWithOptions(request: ModifyInstanceNetExpireTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceNetExpireTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.classicExpiredDays)) {
    query['ClassicExpiredDays'] = request.classicExpiredDays;
  }
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceNetExpireTime',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also perform this operation in the ApsaraDB for Redis console. For more information, see [Change the expiration time for the endpoint of the classic network](~~60062~~).
  * > For more information about how to switch the network type of an ApsaraDB for Redis instance from classic network to VPC, see [SwitchNetwork](~~61005~~).
  *
  * @param request ModifyInstanceNetExpireTimeRequest
  * @return ModifyInstanceNetExpireTimeResponse
 */
async function modifyInstanceNetExpireTime(request: ModifyInstanceNetExpireTimeRequest): ModifyInstanceNetExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNetExpireTimeWithOptions(request, runtime);
}

model ModifyInstanceParameterRequest {
  instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parameterGroupId?: string(name='ParameterGroupId', example='g-idhwofwofewhf****'),
  parameters?: string(name='Parameters', example='{"hz": "50"}'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceParameterResponseBody = {
  instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='Id of the request', example='561AFBF1-BE20-44DB-9BD1-6988B53E****'),
  taskId?: long(name='TaskId', example='578678678'),
}

model ModifyInstanceParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceParameterResponseBody(name='body'),
}

async function modifyInstanceParameterWithOptions(request: ModifyInstanceParameterRequest, runtime: Util.RuntimeOptions): ModifyInstanceParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameterGroupId)) {
    query['ParameterGroupId'] = request.parameterGroupId;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceParameter',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceParameter(request: ModifyInstanceParameterRequest): ModifyInstanceParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceParameterWithOptions(request, runtime);
}

model ModifyInstanceSSLRequest {
  instanceId?: string(name='InstanceId', description='The ID of the task.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  SSLEnabled?: string(name='SSLEnabled', description='Specifies whether to enable TLS (SSL) encryption. Valid values:

*   **Disable**: disables SSL encryption.
*   **Enable**: enables SSL encryption.
*   **Update**: updates the SSL certificate.', example='Enable'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyInstanceSSLResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **ModifyInstanceSSL**.', example='AD7E16AA-6B23-43BF-979C-07D957FB****'),
  taskId?: string(name='TaskId', example='32184****'),
}

model ModifyInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceSSLResponseBody(name='body'),
}

/**
  * Modifies SSL encryption configurations. Valid values:
  * *   **Disable**: The SSL encryption is disabled.
  * *   **Enable**: The SSL encryption is enabled.
  * *   **Update**: The SSL certificate is updated.
  *
  * @param request ModifyInstanceSSLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceSSLResponse
 */
async function modifyInstanceSSLWithOptions(request: ModifyInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.SSLEnabled)) {
    query['SSLEnabled'] = request.SSLEnabled;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSSL',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Modifies SSL encryption configurations. Valid values:
  * *   **Disable**: The SSL encryption is disabled.
  * *   **Enable**: The SSL encryption is enabled.
  * *   **Update**: The SSL certificate is updated.
  *
  * @param request ModifyInstanceSSLRequest
  * @return ModifyInstanceSSLResponse
 */
async function modifyInstanceSSL(request: ModifyInstanceSSLRequest): ModifyInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSSLWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto-renewal. Default value: true. Valid values:

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal. If you set this parameter to **false**, the instance must be manually renewed before it expires. For more information, see [Renew an instance](~~26352~~).', example='true'),
  businessInfo?: string(name='BusinessInfo', description='The ID of the promotional event or business information.', example='000000001'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
  couponNo?: string(name='CouponNo', description='The coupon code. Default value: `youhuiquan_promotion_option_id_for_blank`.', example='youhuiquan_promotion_option_id_for_blank'),
  effectiveTime?: string(name='EffectiveTime', description='The time when to change the configurations. Default value: Immediately. Valid values:

*   **Immediately**: The configurations are immediately changed.
*   **MaintainTime**: The configurations are changed within the maintenance window. You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to change the maintenance window.', example='Immediately'),
  forceTrans?: boolean(name='ForceTrans', example='false'),
  forceUpgrade?: boolean(name='ForceUpgrade', description='Specifies whether to forcefully change the configurations of the instance. Default value: true. Valid values:

*   **false**: The system does not forcefully change the configurations.
*   **true**: The system forcefully changes the configurations.', example='true'),
  instanceClass?: string(name='InstanceClass', description='The new instance type. You can call the [DescribeAvailableResource](~~120580~~) operation to query the instance types available for configuration change within the zone to which the instance belongs.

>  For more information about the instance types, see [Overview](~~26350~~).', example='redis.master.small.default'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  majorVersion?: string(name='MajorVersion', description='The major version to which you want to upgrade. When you change the configurations of an instance, you can upgrade the major version of the instance by setting this parameter. Valid values: **4.0** and **5.0**.', example='5.0'),
  orderType?: string(name='OrderType', description='The change type. This parameter is required when you change the configurations of a subscription instance. Default value: UPGRADE. Valid values:

*   **UPGRADE**: upgrades the configurations of a subscription instance.
*   **DOWNGRADE**: downgrades the configurations of a subscription instance.

> *   To downgrade a subscription instance, you must set this parameter to **DOWNGRADE**.
> *   If the price of an instance increases after its configurations are changed, the instance is upgraded. If the price decreases, the instance is downgraded. For example, the price of an 8 GB read/write splitting instance with five read replicas is higher than that of a 16 GB cluster instance. If you want to change a 16 GB cluster instance to an 8 GB read/write splitting instance with five read replicas, you must upgrade the instance.', example='DOWNGRADE'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  readOnlyCount?: int32(name='ReadOnlyCount', description='The number of read-only nodes. This parameter is available only for read/write splitting instances that use cloud disks. Valid values: 1 to 5.', example='5'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  shardCount?: int32(name='ShardCount', description='The number of shards. This parameter is available only for cluster instances that use cloud disks.', example='8'),
  sourceBiz?: string(name='SourceBiz', description='The source of the operation. This parameter is used only for internal maintenance. You do not need to specify this parameter.', example='SDK'),
}

model ModifyInstanceSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='20722623431****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0DA1D7EF-C80D-432C-8758-7D225182626B'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

/**
  * >  For more information about the procedure, impacts, limits, and fees of this operation, see [Change the configurations of an instance](~~26353~~).
  *
  * @param request ModifyInstanceSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceSpecResponse
 */
async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.forceTrans)) {
    query['ForceTrans'] = request.forceTrans;
  }
  if (!Util.isUnset(request.forceUpgrade)) {
    query['ForceUpgrade'] = request.forceUpgrade;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.majorVersion)) {
    query['MajorVersion'] = request.majorVersion;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.readOnlyCount)) {
    query['ReadOnlyCount'] = request.readOnlyCount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['ShardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.sourceBiz)) {
    query['SourceBiz'] = request.sourceBiz;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSpec',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  For more information about the procedure, impacts, limits, and fees of this operation, see [Change the configurations of an instance](~~26353~~).
  *
  * @param request ModifyInstanceSpecRequest
  * @return ModifyInstanceSpecResponse
 */
async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceTDERequest {
  encryptionKey?: string(name='EncryptionKey', description='The ID of the custom key. You can call the [DescribeEncryptionKeyList](~~302339~~) operation to query the key ID.

> 

*   If you do not specify this parameter, [Key Management Service (KMS)](~~28935~~) automatically generates a key.

*   To create a custom key, you can call the [CreateKey](~~28947~~) operation of the KMS API.', example='ad463061-992d-4195-8a94-ed63********'),
  encryptionName?: string(name='EncryptionName', description='The encryption algorithm. Default value: AES-CTR-256.

> This parameter is available only if the **TDEStatus** parameter is set to **Enabled**.', example='AES-CTR-256'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the Resource Access Management (RAM) role that you want to attach to your ApsaraDB for Redis instance. The ARN must be in the format of `acs:ram::$accountID:role/$roleName`. After the role is attached, your ApsaraDB for Redis instance can use KMS.

> 

*   `$accountID`: the ID of the Alibaba Cloud account. To view the account ID, log on to the Alibaba Cloud console, move the pointer over your profile picture in the upper-right corner of the page, and then click **Security Settings**.

*   `$roleName`: the name of the RAM role. Replace $roleName with **AliyunRdsInstanceEncryptionDefaultRole**.', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
  securityToken?: string(name='SecurityToken'),
  TDEStatus?: string(name='TDEStatus', description='Specifies whether to enable TDE. Set the value to **Enabled**.

> TDE cannot be disabled after it is enabled. Before you enable it, evaluate whether this feature affects your business. For more information, see [Enable TDE](~~265913~~).', example='Enabled'),
}

model ModifyInstanceTDEResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model ModifyInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceTDEResponseBody(name='body'),
}

/**
  * > For more information about TDE and the impact of TDE, see [Enable TDE](~~265913~~).
  *
  * @param request ModifyInstanceTDERequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceTDEResponse
 */
async function modifyInstanceTDEWithOptions(request: ModifyInstanceTDERequest, runtime: Util.RuntimeOptions): ModifyInstanceTDEResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.encryptionName)) {
    query['EncryptionName'] = request.encryptionName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.TDEStatus)) {
    query['TDEStatus'] = request.TDEStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceTDE',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > For more information about TDE and the impact of TDE, see [Enable TDE](~~265913~~).
  *
  * @param request ModifyInstanceTDERequest
  * @return ModifyInstanceTDEResponse
 */
async function modifyInstanceTDE(request: ModifyInstanceTDERequest): ModifyInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceTDEWithOptions(request, runtime);
}

model ModifyInstanceVpcAuthModeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  vpcAuthMode?: string(name='VpcAuthMode', description='Specifies whether to disable password-free access. Valid values:

*   **Open**: disables password-free access.
*   **Close**: enables password-free access.

> The default value is **Open**.', example='Close'),
}

model ModifyInstanceVpcAuthModeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABAF95F6-35C1-4177-AF3A-70969EBD****'),
}

model ModifyInstanceVpcAuthModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceVpcAuthModeResponseBody(name='body'),
}

/**
  * When the password-free access feature is enabled, Elastic Compute Service (ECS) instances in the same virtual private cloud (VPC) can connect to the ApsaraDB for Redis instance without a password. You can also use the username and password to connect to the ApsaraDB for Redis instance.
  * > The ApsaraDB for Redis instance is deployed in a VPC. For more information, see [Enable password-free access](~~85168~~).
  *
  * @param request ModifyInstanceVpcAuthModeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceVpcAuthModeResponse
 */
async function modifyInstanceVpcAuthModeWithOptions(request: ModifyInstanceVpcAuthModeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAuthModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.vpcAuthMode)) {
    query['VpcAuthMode'] = request.vpcAuthMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceVpcAuthMode',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When the password-free access feature is enabled, Elastic Compute Service (ECS) instances in the same virtual private cloud (VPC) can connect to the ApsaraDB for Redis instance without a password. You can also use the username and password to connect to the ApsaraDB for Redis instance.
  * > The ApsaraDB for Redis instance is deployed in a VPC. For more information, see [Enable password-free access](~~85168~~).
  *
  * @param request ModifyInstanceVpcAuthModeRequest
  * @return ModifyInstanceVpcAuthModeResponse
 */
async function modifyInstanceVpcAuthMode(request: ModifyInstanceVpcAuthModeRequest): ModifyInstanceVpcAuthModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAuthModeWithOptions(request, runtime);
}

model ModifyIntranetAttributeRequest {
  bandWidth?: long(name='BandWidth', description='The amount of bandwidth that you want to add. Unit: Mbit/s. The value must be an integer greater than or equal to 0. In most cases, the maximum bandwidth that can be added can be two times the default maximum bandwidth of the current instance type. For more information about the bandwidth specifications supported by different instance types, see [Overview](~~26350~~). The bandwidth is also subject to the following limits:

*   The bandwidth of an individual instance cannot exceed 75% of the bandwidth of the host. For more information about the host specifications and bandwidth, see [Instance types of hosts](~~206343~~).
*   The total bandwidth of all of the instances on the host cannot exceed 150% of the bandwidth of the host. You can configure resource overcommitment to handle traffic spikes. For more information, see [Configure resource overcommitment to reduce costs](~~183798~~).

> If you do not specify this parameter for a standard instance, the bandwidth of the instance is set to two times that of the current bandwidth.', example='10'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the data node. You can call the [DescribeClusterMemberInfo](~~193462~~) operation to query the node ID. Separate multiple IDs with commas (,).

> This parameter is available and required only when the instance uses the [cluster architecture](~~52228~~).', example='r-bp1zxszhcgatnx****-db-0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ModifyIntranetAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='97AC8948-D7E4-457E-BE03-850CF04E****'),
}

model ModifyIntranetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIntranetAttributeResponseBody(name='body'),
}

/**
  * > 
  * *   This operation is applicable only to an ApsaraDB for Redis instance that is deployed in a dedicated cluster. To adjust the bandwidth of a standard ApsaraDB for Redis instance, call the [EnableAdditionalBandwidth](~~206173~~) operation.
  *
  * @param request ModifyIntranetAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyIntranetAttributeResponse
 */
async function modifyIntranetAttributeWithOptions(request: ModifyIntranetAttributeRequest, runtime: Util.RuntimeOptions): ModifyIntranetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandWidth)) {
    query['BandWidth'] = request.bandWidth;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIntranetAttribute',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > 
  * *   This operation is applicable only to an ApsaraDB for Redis instance that is deployed in a dedicated cluster. To adjust the bandwidth of a standard ApsaraDB for Redis instance, call the [EnableAdditionalBandwidth](~~206173~~) operation.
  *
  * @param request ModifyIntranetAttributeRequest
  * @return ModifyIntranetAttributeResponse
 */
async function modifyIntranetAttribute(request: ModifyIntranetAttributeRequest): ModifyIntranetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIntranetAttributeWithOptions(request, runtime);
}

model ModifyResourceGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the generated token is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length.', example='ETnLKlblzczshOTUbOCz****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to move the instance.

> 

*   You can query resource group IDs by using the ApsaraDB for Redis console or by calling the [ListResourceGroups](~~158855~~) operation. For more information, see [View basic information of a resource group](~~151181~~).

*   Before you modify the resource group to which an instance belongs, you can call the [ListResources](~~158866~~) operation to view the resource group of the instance.', example='rg-acfmyiu4ekp****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model ModifyResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyResourceGroupResponseBody(name='body'),
}

/**
  * Resource groups allow you to sort resources owned by your Alibaba Cloud account into groups. This simplifies resource and permission management within your Alibaba Cloud account. For more information, see [What is Resource Management?](~~94475~~)
  * > For more information about resource group API operations, see [Resource Management API overview](~~160024~~).
  *
  * @param request ModifyResourceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyResourceGroupResponse
 */
async function modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyResourceGroup',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Resource groups allow you to sort resources owned by your Alibaba Cloud account into groups. This simplifies resource and permission management within your Alibaba Cloud account. For more information, see [What is Resource Management?](~~94475~~)
  * > For more information about resource group API operations, see [Resource Management API overview](~~160024~~).
  *
  * @param request ModifyResourceGroupRequest
  * @return ModifyResourceGroupResponse
 */
async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceGroupWithOptions(request, runtime);
}

model ModifySecurityGroupConfigurationRequest {
  DBInstanceId?: string(name='DBInstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group that you want to manage. You can specify up to 10 security groups. Separate multiple security group IDs with commas (,).', example='sg-bpcfmyiu4ekp****'),
  securityToken?: string(name='SecurityToken'),
}

model ModifySecurityGroupConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='147CAC09-E8C6-43F8-9599-982A43D6****'),
}

model ModifySecurityGroupConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityGroupConfigurationResponseBody(name='body'),
}

/**
  * > After you call this operation, the security groups that are added to the whitelists of the ApsaraDB for Redis instance are deleted, and the security group specified by the **SecurityGroupId** parameter are added to the whitelists. For more information about how to reset security groups in the ApsaraDB for Redis console, see [Add security groups](~~148267~~).
  *
  * @param request ModifySecurityGroupConfigurationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityGroupConfigurationResponse
 */
async function modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupConfiguration',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > After you call this operation, the security groups that are added to the whitelists of the ApsaraDB for Redis instance are deleted, and the security group specified by the **SecurityGroupId** parameter are added to the whitelists. For more information about how to reset security groups in the ApsaraDB for Redis console, see [Add security groups](~~148267~~).
  *
  * @param request ModifySecurityGroupConfigurationRequest
  * @return ModifySecurityGroupConfigurationResponse
 */
async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupConfigurationWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  modifyMode?: string(name='ModifyMode', description='The method that is used to modify the whitelist. Valid values:

*   **Cover**: overwrites the original whitelist.
*   **Append**: appends data to the whitelist.
*   **Delete**: deletes the whitelist.', example='Append'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityIpGroupAttribute?: string(name='SecurityIpGroupAttribute', description='By default, this parameter is left empty. The attribute of the whitelist. The console does not display the whitelist whose value of this parameter is **hidden**.', example='hidden'),
  securityIpGroupName?: string(name='SecurityIpGroupName', description='The name of the whitelist.', example='default'),
  securityIps?: string(name='SecurityIps', description='The IP addresses in the whitelist. Up to 1,000 IP addresses can be specified in a whitelist. Separate multiple IP addresses with a comma (,). Specify an IP address in the 0.0.0.0/0, 10.23.12.24, or 10.23.12.24/24 format. In CIDR block 10.23.12.24/24, /24 specifies the length of the prefix of an IP address. The prefix length ranges from 1 to 32.', example='100.64.***.0/24,10.101.11.***'),
  securityToken?: string(name='SecurityToken'),
}

model ModifySecurityIpsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAAF99B1-69ED-4E80-8CD5-272C09E4****'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

/**
  * You can also modify the whitelists of an instance in the ApsaraDB for Redis console. For more information, see [Configure a whitelist for an instance](~~56464~~).
  *
  * @param request ModifySecurityIpsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityIpsResponse
 */
async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityIpGroupAttribute)) {
    query['SecurityIpGroupAttribute'] = request.securityIpGroupAttribute;
  }
  if (!Util.isUnset(request.securityIpGroupName)) {
    query['SecurityIpGroupName'] = request.securityIpGroupName;
  }
  if (!Util.isUnset(request.securityIps)) {
    query['SecurityIps'] = request.securityIps;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also modify the whitelists of an instance in the ApsaraDB for Redis console. For more information, see [Configure a whitelist for an instance](~~56464~~).
  *
  * @param request ModifySecurityIpsRequest
  * @return ModifySecurityIpsResponse
 */
async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ReleaseDirectConnectionRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ReleaseDirectConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model ReleaseDirectConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseDirectConnectionResponseBody(name='body'),
}

/**
  * In direct connection mode, clients can bypass proxy nodes and use private endpoints to connect to ApsaraDB for Redis instances. This is similar to the connection to a native Redis cluster. The direct connection mode can reduce communication overheads and the response time of ApsaraDB for Redis. For more information, see [Enable the direct connection mode](~~146901~~).
  *
  * @param request ReleaseDirectConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseDirectConnectionResponse
 */
async function releaseDirectConnectionWithOptions(request: ReleaseDirectConnectionRequest, runtime: Util.RuntimeOptions): ReleaseDirectConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseDirectConnection',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In direct connection mode, clients can bypass proxy nodes and use private endpoints to connect to ApsaraDB for Redis instances. This is similar to the connection to a native Redis cluster. The direct connection mode can reduce communication overheads and the response time of ApsaraDB for Redis. For more information, see [Enable the direct connection mode](~~146901~~).
  *
  * @param request ReleaseDirectConnectionRequest
  * @return ReleaseDirectConnectionResponse
 */
async function releaseDirectConnection(request: ReleaseDirectConnectionRequest): ReleaseDirectConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDirectConnectionWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  currentConnectionString?: string(name='CurrentConnectionString', description='The public endpoint to be released.', example='r-bp1zxszhcgatnx****.redis.rds.aliyuncs.com'),
  instanceId?: string(name='InstanceId', description='The operation that you want to perform. Set the value to **ReleaseInstancePublicConnection**.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='88F850B5-CC68-48B4-83CA-5497C3C191DE'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request ReleaseInstancePublicConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseInstancePublicConnectionResponse
 */
async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request ReleaseInstancePublicConnectionRequest
  * @return ReleaseInstancePublicConnectionResponse
 */
async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model RemoveSubInstanceRequest {
  instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RemoveSubInstanceResponseBody = {
  requestId?: string(name='RequestId', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model RemoveSubInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSubInstanceResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **RemoveSubInstance**.
  *
  * @param request RemoveSubInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveSubInstanceResponse
 */
async function removeSubInstanceWithOptions(request: RemoveSubInstanceRequest, runtime: Util.RuntimeOptions): RemoveSubInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSubInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **RemoveSubInstance**.
  *
  * @param request RemoveSubInstanceRequest
  * @return RemoveSubInstanceResponse
 */
async function removeSubInstance(request: RemoveSubInstanceRequest): RemoveSubInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSubInstanceWithOptions(request, runtime);
}

model RenewAdditionalBandwidthRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Default value: true. Valid values:

*   **true**: enables automatic payment.
*   **false**: disables automatic payment. If automatic payment is disabled, you must perform the following steps to complete the payment in the ApsaraDB for Redis console: In the top navigation bar, choose **Expenses** > **Renewal Management**. In the left-side navigation pane, click **Orders**. On the **Orders** page, find the order and complete the payment.', example='true'),
  couponNo?: string(name='CouponNo', description='The ID of the coupon.', example='youhuiquan_promotion_option_id_for_blank'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  orderTimeLength?: string(name='OrderTimeLength', description='The validity period of the bandwidth that you purchase. Unit: days. Valid values: **1**, **2**, **3**, **7**, **14**, **30**, **60**, **90**, **180**, **365**, **730**, **1095**, and **1825**.', example='30'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  sourceBiz?: string(name='SourceBiz', description='The source of the operation. This parameter is used only for internal maintenance. You do not need to specify this parameter.', example='SDK'),
}

model RenewAdditionalBandwidthResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='2084452111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model RenewAdditionalBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewAdditionalBandwidthResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * You can adjust the bandwidth of an instance in the ApsaraDB for Redis console. For more information, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~). You can also call the [EnableAdditionalBandwidth](~~206173~~) operation to adjust the bandwidth of an instance. If you want to continue using the bandwidth that you purchase after the validity period of the bandwidth, you must call the RenewAdditionalBandwidth operation to renew the bandwidth before the bandwidth expires.
  * > Before you call this operation, you can call the [DescribeIntranetAttribute](~~128715~~) operation, which returns the expiration time of the purchased bandwidth in the **BandwidthExpireTime** parameter.
  *
  * @param request RenewAdditionalBandwidthRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewAdditionalBandwidthResponse
 */
async function renewAdditionalBandwidthWithOptions(request: RenewAdditionalBandwidthRequest, runtime: Util.RuntimeOptions): RenewAdditionalBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderTimeLength)) {
    query['OrderTimeLength'] = request.orderTimeLength;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sourceBiz)) {
    query['SourceBiz'] = request.sourceBiz;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewAdditionalBandwidth',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you understand the billing methods and [pricing](~~54532~~) of ApsaraDB for Redis.
  * You can adjust the bandwidth of an instance in the ApsaraDB for Redis console. For more information, see [Adjust the bandwidth of an ApsaraDB for Redis instance](~~102588~~). You can also call the [EnableAdditionalBandwidth](~~206173~~) operation to adjust the bandwidth of an instance. If you want to continue using the bandwidth that you purchase after the validity period of the bandwidth, you must call the RenewAdditionalBandwidth operation to renew the bandwidth before the bandwidth expires.
  * > Before you call this operation, you can call the [DescribeIntranetAttribute](~~128715~~) operation, which returns the expiration time of the purchased bandwidth in the **BandwidthExpireTime** parameter.
  *
  * @param request RenewAdditionalBandwidthRequest
  * @return RenewAdditionalBandwidthResponse
 */
async function renewAdditionalBandwidth(request: RenewAdditionalBandwidthRequest): RenewAdditionalBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewAdditionalBandwidthWithOptions(request, runtime);
}

model RenewInstanceRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Default value: true. Valid values:

*   **true**: enables automatic payment.
*   **false**: disables automatic payment.

If you select false, you must choose **Expenses** > **Renewal Management** in the top navigation bar. In the left-side navigation pane, click **Orders**. Find the specified order and pay for it.', example='true'),
  businessInfo?: string(name='BusinessInfo', description='The ID of the promotional event or business information.', example='000000000'),
  capacity?: string(name='Capacity', description='The storage capacity of the instance. Unit: MB. When you renew the instance, you can specify this parameter to change specifications of the instance.

> To change the specifications when you renew the instance, you must specify at least one of the `Capacity` and `InstanceClass` parameters.', example='1024'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token is case-sensitive. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='TF-ModifyInstanceSpec-1686645570-7dac7257-4a14-4811-939c-51a282f'),
  couponNo?: string(name='CouponNo', description='The coupon code. Default value: `youhuiquan_promotion_option_id_for_blank`.', example='youhuiquan_promotion_option_id_for_blank'),
  fromApp?: string(name='FromApp', description='The source of the request. The default value is **OpenAPI** and cannot be changed.', example='OpenAPI'),
  instanceClass?: string(name='InstanceClass', description='The instance type code. For more information, see [Instance specifications overview](~~26350~~). When you renew the instance, you can specify this parameter to change specifications of the instance.

> To change the specifications when you renew the instance, you must specify at least one of the `Capacity` and `InstanceClass` parameters.', example='redis.master.small.default'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: long(name='Period', description='The renewal period. Valid values: **1**, 2, 3, 4, 5, 6, 7, 8, **9**, **12**, **24**, and **36**. Unit: months.', example='6'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RenewInstanceResponseBody = {
  endTime?: string(name='EndTime', description='The end time of the order.', example='2019-02-19T00:00:00Z'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2222245-222A-4155-9349-E22222****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * This operation is applicable only to subscription instances.
  *
  * @param request RenewInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewInstanceResponse
 */
async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.businessInfo)) {
    query['BusinessInfo'] = request.businessInfo;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.couponNo)) {
    query['CouponNo'] = request.couponNo;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.instanceClass)) {
    query['InstanceClass'] = request.instanceClass;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is applicable only to subscription instances.
  *
  * @param request RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', description='The operation that you want to perform. Set the value to **ResetAccountPassword**.', example='demoaccount'),
  accountPassword?: string(name='AccountPassword', description='The name of the account. You can call the [DescribeAccounts](~~95802~~) operation to obtain the name of the account.', example='uWonno_221****'),
  instanceId?: string(name='InstanceId', description='The ID of the request.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='8BE02313-5395-4EBE-BAE7-E90A053F****'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

/**
  * r-bp1zxszhcgatnx****
  *
  * @param request ResetAccountPasswordRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetAccountPasswordResponse
 */
async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * r-bp1zxszhcgatnx****
  *
  * @param request ResetAccountPasswordRequest
  * @return ResetAccountPasswordResponse
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartInstanceRequest {
  effectiveTime?: string(name='EffectiveTime', description='The time when you want to restart the instance. Default value: Immediately. Valid values:

*   **Immediately**: immediately restarts the instance.
*   **MaintainTime**: restarts the instance during the maintenance window.

Enumeration values:

*   0
*   1
*   Immediately
*   MaintainTime', example='Immediately'),
  instanceId?: string(name='InstanceId', description='The operation that you want to perform. Set the value to **RestartInstance**.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  upgradeMinorVersion?: boolean(name='UpgradeMinorVersion', description='Specifies whether to update the instance to the latest minor version when the instance is restarted. Valid values:

*   **true**: updates the minor version.
*   **false**: does not update the minor version.

> The default value is **true**.', example='true'),
}

model RestartInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='r-bp1zxszhcgatnx****'),
  requestId?: string(name='RequestId', example='EFC9161F-15E3-4A6E-8A99-C33331****'),
  taskId?: string(name='TaskId', example='11111****'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(request: RestartInstanceRequest, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveTime)) {
    query['EffectiveTime'] = request.effectiveTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.upgradeMinorVersion)) {
    query['UpgradeMinorVersion'] = request.upgradeMinorVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartInstanceWithOptions(request, runtime);
}

model RestoreInstanceRequest {
  backupId?: string(name='BackupId', description='The ID of the backup file. You can call the [DescribeBackups](~~61081~~) operation to query the IDs of backup files.', example='78241****'),
  filterKey?: string(name='FilterKey', description='The key that you want to restore. You can specify multiple keys. Separate multiple keys with commas (,). Regular expressions are supported.

> 

*   In a regular expression, an asterisk (`*`) matches zero or more occurrences of a subexpression that occurs before. For example, if you set this parameter to `h.*llo`, strings such as `hllo` and `heeeello` are matched.

*   This parameter is available only if you set the **RestoreType** parameter to **1**.', example='key:00000007198*'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  restoreTime?: string(name='RestoreTime', description='The point in time to which you want to restore data. Specify the time in the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.

> 

*   If the [data flashback](~~148479~~) feature is enabled for the instance, you can specify this parameter and the **FilterKey** parameter to restore the data of the specified key to the specified point in time that is accurate to the second. Other keys are not affected. This way, you can achieve more fine-grained data restoration.

*   This parameter is available only if you set the **RestoreType** parameter to **1**.', example='2021-07-06T07:25:57Z'),
  restoreType?: string(name='RestoreType', description='The restoration mode. Default value: 0. Valid values:

*   **0**: restores data from the specified backup set.
*   **1**: restores data to a specified point in time. You can specify this value only if the [data flashback](~~148479~~) feature is enabled for the instance. If you specify this value, you must also specify the **RestoreTime** parameter.', example='1'),
  securityToken?: string(name='SecurityToken'),
  timeShift?: string(name='TimeShift', description='The expiration offset time point of a key. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC. The key expires after the remaining validity period of the key elapses based on the expiration offset time point.

> This time point must be between the specified flashback time point and the submission time of the data restoration task.', example='2021-07-06T08:25:57Z'),
}

model RestoreInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D0C0AFC-E9CD-47A4-8395-5C31BF9B****'),
}

model RestoreInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreInstanceResponseBody(name='body'),
}

/**
  * *   If your instance is a [persistent memory-optimized instance](~~443828~~) or [DRAM-based instance](~~443827~~) that is compatible with Redis 5.0 and the [data flashback](~~443784~~) feature is enabled, you can call this operation to restore the data of a specified key to a specified point in time that is accurate to the second. Other keys are not affected. This way, you can achieve more fine-grained data restoration.
  * *   For other instance series, this operation overwrites the existing data of your instance with the backup data. Proceed with caution. We recommend that you call the [CreateInstance](~~60873~~) operation to create an instance. Then, you can restore data to the new instance.
  *
  * @param request RestoreInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RestoreInstanceResponse
 */
async function restoreInstanceWithOptions(request: RestoreInstanceRequest, runtime: Util.RuntimeOptions): RestoreInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupId)) {
    query['BackupId'] = request.backupId;
  }
  if (!Util.isUnset(request.filterKey)) {
    query['FilterKey'] = request.filterKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.restoreTime)) {
    query['RestoreTime'] = request.restoreTime;
  }
  if (!Util.isUnset(request.restoreType)) {
    query['RestoreType'] = request.restoreType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.timeShift)) {
    query['TimeShift'] = request.timeShift;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestoreInstance',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If your instance is a [persistent memory-optimized instance](~~443828~~) or [DRAM-based instance](~~443827~~) that is compatible with Redis 5.0 and the [data flashback](~~443784~~) feature is enabled, you can call this operation to restore the data of a specified key to a specified point in time that is accurate to the second. Other keys are not affected. This way, you can achieve more fine-grained data restoration.
  * *   For other instance series, this operation overwrites the existing data of your instance with the backup data. Proceed with caution. We recommend that you call the [CreateInstance](~~60873~~) operation to create an instance. Then, you can restore data to the new instance.
  *
  * @param request RestoreInstanceRequest
  * @return RestoreInstanceResponse
 */
async function restoreInstance(request: RestoreInstanceRequest): RestoreInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreInstanceWithOptions(request, runtime);
}

model SwitchInstanceHARequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  nodeId?: string(name='NodeId', description='The ID of the data shard. You can call the [DescribeRoleZoneInfo](~~190794~~) operation to obtain the value of the CustinsId parameter. Separate multiple data shard IDs with commas (,). `all` indicates that all data shards are specified.

> This parameter is available and required only for read/write splitting and cluster instances.', example='56****19,56****20'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  switchMode?: int32(name='SwitchMode', description='The time when to perform the switchover. Default value: 0. Valid values:

*   **0**: immediately performs the switchover.
*   **1**: performs the switchover during the maintenance window.

> You can call the [ModifyInstanceMaintainTime](~~61000~~) operation to modify the maintenance window of an ApsaraDB for Redis instance.', example='0'),
  switchType?: string(name='SwitchType', description='The switching mode. Valid values:

*   **AvailablePriority**: prioritizes the availability and performs a switchover immediately without considering the latency of data synchronization between the master and replica nodes. This may cause data loss.
*   **ReliabilityPriority**: prioritizes the reliability and performs a switchover after no latency of data synchronization between the master and replica nodes exists. This ensures data integrity. This mode may cause a switchover failure in scenarios that involve a large volume of data writes and persistent latency of data synchronization.

> You must evaluate the requirements for data and services based on your business scenarios and then select a switching mode.', example='AvailablePriority'),
}

model SwitchInstanceHAResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model SwitchInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchInstanceHAResponseBody(name='body'),
}

/**
  * > For more information about nearby access to applications that are deployed across zones, see [Switch node roles](~~164222~~).
  * The instance must be an ApsaraDB for Redis Community Edition instance or Enhanced Edition (Tair) [DRAM-based](~~126164~~) instance that uses local disks.
  * A call to this operation has the following impacts on your instance:
  * *   The data shards in the instance may change to the read-only state and experience transient connections within seconds. Make sure that your application is configured to automatically reconnect to the instance.
  * *   If the instance enters the switching state, you cannot manage this instance. For example, you cannot modify the instance configurations or migrate the instance to another zone.
  *
  * @param request SwitchInstanceHARequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SwitchInstanceHAResponse
 */
async function switchInstanceHAWithOptions(request: SwitchInstanceHARequest, runtime: Util.RuntimeOptions): SwitchInstanceHAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.switchMode)) {
    query['SwitchMode'] = request.switchMode;
  }
  if (!Util.isUnset(request.switchType)) {
    query['SwitchType'] = request.switchType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchInstanceHA',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > For more information about nearby access to applications that are deployed across zones, see [Switch node roles](~~164222~~).
  * The instance must be an ApsaraDB for Redis Community Edition instance or Enhanced Edition (Tair) [DRAM-based](~~126164~~) instance that uses local disks.
  * A call to this operation has the following impacts on your instance:
  * *   The data shards in the instance may change to the read-only state and experience transient connections within seconds. Make sure that your application is configured to automatically reconnect to the instance.
  * *   If the instance enters the switching state, you cannot manage this instance. For example, you cannot modify the instance configurations or migrate the instance to another zone.
  *
  * @param request SwitchInstanceHARequest
  * @return SwitchInstanceHAResponse
 */
async function switchInstanceHA(request: SwitchInstanceHARequest): SwitchInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchInstanceHAWithOptions(request, runtime);
}

model SwitchInstanceProxyRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model SwitchInstanceProxyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model SwitchInstanceProxyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchInstanceProxyResponseBody(name='body'),
}

/**
  * For more information about the proxy mode, see [Features of proxy nodes](~~142959~~). Before you call this operation, make sure that the following requirements are met:
  * *   Your ApsaraDB for Redis instance is created by using a dedicated cluster. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  * *   The instance uses the cluster architecture. For more information about the cluster architecture, see [Cluster master-replica instances](~~52228~~).
  * > Before you call the SwitchInstanceProxy operation, you must call the [DescribeDedicatedClusterInstanceList](~~229522~~) operation and view the value of the **ProxyCount** response parameter to check whether the proxy mode is enabled. A value of 0 indicates that the proxy mode is disabled. A value that is greater than 0 indicates that the proxy mode is enabled.
  *
  * @param request SwitchInstanceProxyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SwitchInstanceProxyResponse
 */
async function switchInstanceProxyWithOptions(request: SwitchInstanceProxyRequest, runtime: Util.RuntimeOptions): SwitchInstanceProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchInstanceProxy',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about the proxy mode, see [Features of proxy nodes](~~142959~~). Before you call this operation, make sure that the following requirements are met:
  * *   Your ApsaraDB for Redis instance is created by using a dedicated cluster. For more information, see [What is ApsaraDB MyBase?](~~141455~~)
  * *   The instance uses the cluster architecture. For more information about the cluster architecture, see [Cluster master-replica instances](~~52228~~).
  * > Before you call the SwitchInstanceProxy operation, you must call the [DescribeDedicatedClusterInstanceList](~~229522~~) operation and view the value of the **ProxyCount** response parameter to check whether the proxy mode is enabled. A value of 0 indicates that the proxy mode is disabled. A value that is greater than 0 indicates that the proxy mode is enabled.
  *
  * @param request SwitchInstanceProxyRequest
  * @return SwitchInstanceProxyResponse
 */
async function switchInstanceProxy(request: SwitchInstanceProxyRequest): SwitchInstanceProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchInstanceProxyWithOptions(request, runtime);
}

model SwitchNetworkRequest {
  classicExpiredDays?: string(name='ClassicExpiredDays', description='The operation that you want to perform. Set the value to **SwitchNetwork**.', example='30'),
  instanceId?: string(name='InstanceId', description='The ID of the task.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retainClassic?: string(name='RetainClassic', description='The ID of the request.', example='True'),
  securityToken?: string(name='SecurityToken'),
  targetNetworkType?: string(name='TargetNetworkType', description='The network type to which you want to switch. Set the value to **VPC**.

Valid values:

*   CLASSIC
*   VPC', example='VPC'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query instance IDs.', example='vsw-bp1e7clcw529l773d****'),
  vpcId?: string(name='VpcId', description='The ID of the vSwitch that belongs to the VPC to which you want to switch. You can call the [DescribeVpcs](~~35739~~) operation to query vSwitch IDs.

>  The vSwitch and the ApsaraDB for Redis instance must belong to the same zone.', example='vpc-bp1nme44gek34slfc****'),
}

model SwitchNetworkResponseBody = {
  requestId?: string(name='RequestId', description='Switches the network type of an ApsaraDB for Redis instance from classic network to Virtual Private Cloud (VPC).', example='F0997EE8-F4C2-4503-9168-85177ED78C70'),
  taskId?: string(name='TaskId', description='Specifies whether to retain the original endpoint for the classic network after you switch the instance from classic network to VPC. Valid values:

*   **True**: retains the original endpoint.
*   **False**: does not retain the original endpoint. This is the default value.

>  This parameter can be used only when the network type of the instance is classic network.', example='578678678'),
}

model SwitchNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchNetworkResponseBody(name='body'),
}

async function switchNetworkWithOptions(request: SwitchNetworkRequest, runtime: Util.RuntimeOptions): SwitchNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.classicExpiredDays)) {
    query['ClassicExpiredDays'] = request.classicExpiredDays;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retainClassic)) {
    query['RetainClassic'] = request.retainClassic;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.targetNetworkType)) {
    query['TargetNetworkType'] = request.targetNetworkType;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchNetwork',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchNetwork(request: SwitchNetworkRequest): SwitchNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchNetworkWithOptions(request, runtime);
}

model SyncDtsStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status', description='Disables configuration changes for the instance. Valid values:

*   **0**: does not disable configuration changes.
*   **1**: disables configuration changes. In this case, if you attempt to modify the configurations of the instance, the system informs you that the operation cannot be performed.', example='0'),
  taskId?: string(name='TaskId', description='The ID of the DTS instance. You can view the ID in the [DTS console](https://dts.console.aliyun.com/).

> An ApsaraDB for Redis instance may be involved in multiple data migration or synchronization tasks. If you want to cancel the restriction on the instance, you can specify this parameter to prevent repeated operation calls.', example='dtss0611o8vv90****'),
}

model SyncDtsStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D622714-AEDD-4609-9167-F5DDD3D1****'),
}

model SyncDtsStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncDtsStatusResponseBody(name='body'),
}

async function syncDtsStatusWithOptions(request: SyncDtsStatusRequest, runtime: Util.RuntimeOptions): SyncDtsStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncDtsStatus',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncDtsStatus(request: SyncDtsStatusRequest): SyncDtsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDtsStatusWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the instance.', example='r-bp1zxszhcgatnx****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag associated with the instance.

> * **N** specifies the serial number of the tag. For example, **Tag.1.Key** specifies the key of the first tag and **Tag.2.Key** specifies the key of the second tag.
> * If the key of the tag does not exist, the key is automatically created.', example='demokey'),
      value?: string(name='Value', description='The value of the tag associated with the instance.

> **N** specifies the serial number of the tag. For example, **Tag.1.Value** specifies the value of the first tag and **Tag.2.Value** specifies the value of the second tag.', example='demovalue'),
    }
  ](name='Tag', description='The tags of the instance.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4BD4E308-A3D8-4CD1-98B3-0ADAEE38****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can filter instances by tag.
  * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
  * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
  * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
  * *   You can add up to 20 tags to each instance.
  * *   You can add tags to up to 50 instances in each request.
  * You can also add tags to instances in the ApsaraDB for Redis console. For more information, see [Create a tag](~~118779~~).
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you have a large number of instances, you can create multiple tags and add these tags to the instances. Then, you can filter instances by tag.
  * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
  * *   If the tag that you specify does not exist, this tag is automatically created and added to the specified instance.
  * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
  * *   You can add up to 20 tags to each instance.
  * *   You can add tags to up to 50 instances in each request.
  * You can also add tags to instances in the ApsaraDB for Redis console. For more information, see [Create a tag](~~118779~~).
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TransformInstanceChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='true', example='true'),
  chargeType?: string(name='ChargeType', description='Specifies whether to enable automatic payment. Default value: true. Valid values:

*   **true**: Automatic payment is enabled.
*   **false**: Automatic payment is disabled. If automatic payment is disabled, you must perform the following steps to complete the payment: In the top navigation bar of the ApsaraDB for Redis console, choose **Expenses** > **Renewal Management**. In the left-side navigation pane of the Billing Management console, click **Orders**. On the **Orders** page, find the order and complete the payment.', example='PrePaid'),
  instanceId?: string(name='InstanceId', description='r-bp1zxszhcgatnx****', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: long(name='Period', description='The subscription duration. Unit: months. Valid values: **1**, 2, 3, 4, 5, 6, 7, 8, **9**, **12**, **24**, **36**.

>  This parameter is valid and required only if you set the **ChargeType** parameter to **PrePaid**.', example='1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model TransformInstanceChargeTypeResponseBody = {
  endTime?: string(name='EndTime', description='The new billing method. Valid values:

*   **PrePaid**: subscription. If you set this parameter to PrePaid, you must also set the **Period** parameter.
*   **PostPaid**: pay-as-you-go.', example='2021-05-13T00:00:00Z'),
  orderId?: string(name='OrderId', description='The operation that you want to perform. Set the value to **TransformInstanceChargeType**.', example='20881824000****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='82C791FB-8979-489E-853D-706D7743****'),
}

model TransformInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransformInstanceChargeTypeResponseBody(name='body'),
}

/**
  * 1
  *
  * @param request TransformInstanceChargeTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TransformInstanceChargeTypeResponse
 */
async function transformInstanceChargeTypeWithOptions(request: TransformInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): TransformInstanceChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransformInstanceChargeType',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1
  *
  * @param request TransformInstanceChargeTypeRequest
  * @return TransformInstanceChargeTypeResponse
 */
async function transformInstanceChargeType(request: TransformInstanceChargeTypeRequest): TransformInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformInstanceChargeTypeWithOptions(request, runtime);
}

model TransformToPrePaidRequest {
  autoPay?: boolean(name='AutoPay', description='true', example='true'),
  instanceId?: string(name='InstanceId', description='r-bp1zxszhcgatnx****', example='r-bp1zxszhcgatnx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: long(name='Period', description='The subscription duration of the instance. Unit: months. Valid values: **1** to **9**, **12**, **24**, and **36**.', example='12'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model TransformToPrePaidResponseBody = {
  endTime?: string(name='EndTime', description='Specifies whether to enable auto-renewal. Default value: false. Valid values:

*   **true**: yes
*   **false**: no. In this case, you can renew your instance in the ApsaraDB for Redis console. For more information, see [Manually renew an instance](~~26352~~).', example='2019-01-18T16:00:00Z'),
  orderId?: string(name='OrderId', description='The operation that you want to perform. Set the value to **TransformToPrePaid**.', example='111111111111111'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='426F1356-B6EF-4DAD-A1C3-DE53B9DAF586'),
}

model TransformToPrePaidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransformToPrePaidResponseBody(name='body'),
}

/**
  * The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.
  *
  * @param request TransformToPrePaidRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TransformToPrePaidResponse
 */
async function transformToPrePaidWithOptions(request: TransformToPrePaidRequest, runtime: Util.RuntimeOptions): TransformToPrePaidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransformToPrePaid',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID of the instance.
  *
  * @param request TransformToPrePaidRequest
  * @return TransformToPrePaidResponse
 */
async function transformToPrePaid(request: TransformToPrePaidRequest): TransformToPrePaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformToPrePaidWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the instance. Valid values:

*   **true**: removes all tags from the instance.
*   **false** (default): does not remove all tags from the instance.

> If you specify both this parameter and the **TagKey.N** parameter, this parameter does not take effect.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~61012~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the instances.', example='r-bp1zxszhcgatnx****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Set the value to **INSTANCE**.', example='INSTANCE'),
  tagKey?: [ string ](name='TagKey', description='The list of tag keys.', example='demokey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='601B6F25-21E7-4484-99D5-3EF2625C****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

/**
  * *   You can remove up to 20 tags at a time.
  * *   If a tag is removed from an instance and is not added to other instances, the tag is deleted.
  * You can also remove tags from instances in the ApsaraDB for Redis console. For more information, see [Remove a tag](~~119157~~).
  *
  * @param request UntagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2015-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can remove up to 20 tags at a time.
  * *   If a tag is removed from an instance and is not added to other instances, the tag is deleted.
  * You can also remove tags from instances in the ApsaraDB for Redis console. For more information, see [Remove a tag](~~119157~~).
  *
  * @param request UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

