/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'captcha';
  @version = '2023-03-05';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model VerifyCaptchaRequest {
  captchaVerifyParam?: string(name='CaptchaVerifyParam', example='dsjidsjidsjkds*djsjdiskds', position='Query'),
}

model VerifyCaptchaResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='95784F***D39FDC5'),
  result?: {
    verifyResult?: boolean(name='VerifyResult', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model VerifyCaptchaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyCaptchaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyCaptcha  VerifyCaptchaRequest
  * @return VerifyCaptchaResponse
 */
async function verifyCaptcha(request: VerifyCaptchaRequest): VerifyCaptchaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCaptcha', 'POST', '/', 'json', false, 'json', request);
}

model VerifyIntelligentCaptchaRequest {
  captchaVerifyParam?: string(name='CaptchaVerifyParam', example='dsjidsjidsjkds*djsjdiskds', position='Body'),
  sceneId?: string(name='SceneId', position='Body'),
}

model VerifyIntelligentCaptchaResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='95784F***D39FDC5'),
  result?: {
    certifyId?: string(name='CertifyId'),
    verifyCode?: string(name='VerifyCode'),
    verifyResult?: boolean(name='VerifyResult', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model VerifyIntelligentCaptchaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyIntelligentCaptchaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyIntelligentCaptcha  VerifyIntelligentCaptchaRequest
  * @return VerifyIntelligentCaptchaResponse
 */
async function verifyIntelligentCaptcha(request: VerifyIntelligentCaptchaRequest): VerifyIntelligentCaptchaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyIntelligentCaptcha', 'POST', '/', 'json', true, 'form', request);
}

