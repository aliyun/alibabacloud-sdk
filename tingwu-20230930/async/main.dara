/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tingwu';
  @version = '2023-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTaskRequest {
  appKey?: string(name='AppKey', example='JV1sRTisRMi****', position='Body'),
  input?: {
    audioChannelMode?: string(name='AudioChannelMode'),
    fileUrl?: string(name='FileUrl', example='http://xxx.com/zzz/1.wav'),
    format?: string(name='Format', example='pcm'),
    languageHints?: [ string ](name='LanguageHints'),
    multipleStreamsEnabled?: boolean(name='MultipleStreamsEnabled'),
    outputPath?: string(name='OutputPath'),
    progressiveCallbacksEnabled?: boolean(name='ProgressiveCallbacksEnabled'),
    sampleRate?: int32(name='SampleRate', example='16000'),
    sourceLanguage: string(name='SourceLanguage', description='This parameter is required.', example='cn'),
    taskId?: string(name='TaskId'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
  }(name='Input', position='Body'),
  parameters?: {
    autoChaptersEnabled?: boolean(name='AutoChaptersEnabled', example='true'),
    contentExtraction?: {
      extractionContents?: [ 
        {
          content?: string(name='Content'),
          identity?: string(name='Identity'),
          title?: string(name='Title'),
        }
      ](name='ExtractionContents'),
      sceneIntroduction?: string(name='SceneIntroduction'),
      speakerMap?: map[string]any(name='SpeakerMap'),
    }(name='ContentExtraction'),
    contentExtractionEnabled?: boolean(name='ContentExtractionEnabled'),
    customPrompt?: {
      contents?: [ 
        {
          model?: string(name='Model'),
          name: string(name='Name', description='This parameter is required.'),
          prompt: string(name='Prompt', description='This parameter is required.'),
          transType?: string(name='TransType'),
        }
      ](name='Contents'),
    }(name='CustomPrompt'),
    customPromptEnabled?: boolean(name='CustomPromptEnabled'),
    extraParams?: {
      domainEducationEnabled?: boolean(name='DomainEducationEnabled'),
      maxKeywords?: int32(name='MaxKeywords'),
      nfixEnabled?: boolean(name='NfixEnabled'),
      ocrAuxiliaryEnabled?: boolean(name='OcrAuxiliaryEnabled'),
      translateLlmSceneEnabled?: boolean(name='TranslateLlmSceneEnabled'),
    }(name='ExtraParams'),
    identityRecognition?: {
      identityContents?: [ 
        {
          description?: string(name='Description'),
          name?: string(name='Name'),
        }
      ](name='IdentityContents'),
      sceneIntroduction?: string(name='SceneIntroduction'),
    }(name='IdentityRecognition'),
    identityRecognitionEnabled?: boolean(name='IdentityRecognitionEnabled'),
    meetingAssistance?: {
      types?: [ string ](name='Types'),
    }(name='MeetingAssistance'),
    meetingAssistanceEnabled?: boolean(name='MeetingAssistanceEnabled', example='false'),
    pptExtractionEnabled?: boolean(name='PptExtractionEnabled'),
    serviceInspection?: {
      inspectionContents?: [ 
        {
          content?: string(name='Content'),
          title?: string(name='Title'),
        }
      ](name='InspectionContents'),
      inspectionIntroduction?: string(name='InspectionIntroduction'),
      sceneIntroduction?: string(name='SceneIntroduction'),
      speakerMap?: map[string]any(name='SpeakerMap'),
    }(name='ServiceInspection'),
    serviceInspectionEnabled?: boolean(name='ServiceInspectionEnabled'),
    summarization?: {
      types?: [ string ](name='Types', example='Paragraph'),
    }(name='Summarization'),
    summarizationEnabled?: boolean(name='SummarizationEnabled', example='false'),
    textPolishEnabled?: boolean(name='TextPolishEnabled'),
    transcoding?: {
      spectrumEnabled?: boolean(name='SpectrumEnabled', example='false'),
      targetAudioFormat?: string(name='TargetAudioFormat', example='mp3'),
      targetVideoFormat?: string(name='TargetVideoFormat', example='mp4'),
      videoThumbnailEnabled?: boolean(name='VideoThumbnailEnabled', example='false'),
    }(name='Transcoding'),
    transcription?: {
      additionalStreamOutputLevel?: int32(name='AdditionalStreamOutputLevel'),
      audioEventDetectionEnabled?: boolean(name='AudioEventDetectionEnabled', example='false'),
      diarization?: {
        speakerCount?: int32(name='SpeakerCount', example='2'),
      }(name='Diarization'),
      diarizationEnabled?: boolean(name='DiarizationEnabled', example='false'),
      model?: string(name='Model'),
      outputLevel?: int32(name='OutputLevel'),
      phraseId?: string(name='PhraseId'),
      realtimeDiarizationEnabled?: boolean(name='RealtimeDiarizationEnabled'),
    }(name='Transcription'),
    translation?: {
      additionalStreamOutputLevel?: int32(name='AdditionalStreamOutputLevel'),
      outputLevel?: int32(name='OutputLevel'),
      targetLanguages?: [ string ](name='TargetLanguages'),
    }(name='Translation'),
    translationEnabled?: boolean(name='TranslationEnabled', example='false'),
  }(name='Parameters', position='Body'),
  operation?: string(name='operation', example='stop', position='Query'),
  type: string(name='type', description='This parameter is required.', example='offline', position='Query'),
}

model CreateTaskResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    meetingJoinUrl?: string(name='MeetingJoinUrl'),
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
    taskStatus?: string(name='TaskStatus'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTask  CreateTaskRequest
  * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'PUT', '/openapi/tingwu/v2/tasks', 'json', false, 'json', request);
}

model CreateTranscriptionPhrasesRequest {
  description?: string(name='Description', example='custom fruit phrases list', minLength=1, maxLength=250, position='Body'),
  name: string(name='Name', description='This parameter is required.', example='fruit_phrase', minLength=1, maxLength=50, position='Body'),
  wordWeights: string(name='WordWeights', description='This parameter is required.', example='{"苹果":3,"西瓜":3}', position='Body'),
}

model CreateTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateTranscriptionPhrasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTranscriptionPhrasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTranscriptionPhrases  CreateTranscriptionPhrasesRequest
  * @return CreateTranscriptionPhrasesResponse
 */
async function createTranscriptionPhrases(request: CreateTranscriptionPhrasesRequest): CreateTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTranscriptionPhrases', 'POST', '/openapi/tingwu/v2/resources/phrases', 'json', false, 'json', request);
}

model DeleteTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', description='This parameter is required.', example='a93b91141c0f422fa114af203f8b****', position='Path'),
}

model DeleteTranscriptionPhrasesResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMessage?: string(name='ErrorMessage'),
    status?: string(name='Status'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  status?: string(name='Status', example='SUCCEEDED'),
}

model DeleteTranscriptionPhrasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTranscriptionPhrasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTranscriptionPhrases  DeleteTranscriptionPhrasesRequest
  * @return DeleteTranscriptionPhrasesResponse
 */
async function deleteTranscriptionPhrases(request: DeleteTranscriptionPhrasesRequest): DeleteTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTranscriptionPhrases', 'DELETE', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

model GetTaskInfoRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='c5394c6ee0fb474899d42215a3925c7e', position='Path'),
}

model GetTaskInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMessage?: string(name='ErrorMessage'),
    outputMp3Path?: string(name='OutputMp3Path'),
    outputMp4Path?: string(name='OutputMp4Path'),
    outputSpectrumPath?: string(name='OutputSpectrumPath'),
    outputThumbnailPath?: string(name='OutputThumbnailPath'),
    result?: {
      autoChapters?: string(name='AutoChapters'),
      contentExtraction?: string(name='ContentExtraction'),
      customPrompt?: string(name='CustomPrompt'),
      identityRecognition?: string(name='IdentityRecognition'),
      meetingAssistance?: string(name='MeetingAssistance'),
      pptExtraction?: string(name='PptExtraction'),
      serviceInspection?: string(name='ServiceInspection'),
      summarization?: string(name='Summarization'),
      textPolish?: string(name='TextPolish'),
      transcription?: string(name='Transcription'),
      translation?: string(name='Translation'),
    }(name='Result'),
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTaskInfo  GetTaskInfoRequest
  * @return GetTaskInfoResponse
 */
async function getTaskInfo(request: GetTaskInfoRequest): GetTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskInfo', 'GET', '/openapi/tingwu/v2/tasks/{TaskId}', 'json', false, 'json', request);
}

model GetTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', description='This parameter is required.', example='a93b91141c0f422fa114af203f8b****', position='Path'),
}

model GetTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    phrases?: [ 
      {
        description?: string(name='Description', example='custom fruit phrases list'),
        name?: string(name='Name', example='fruit_phrase'),
        phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
        wordWeights?: string(name='WordWeights', example='{"苹果":3,"西瓜":3}'),
      }
    ](name='Phrases'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetTranscriptionPhrasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTranscriptionPhrasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTranscriptionPhrases  GetTranscriptionPhrasesRequest
  * @return GetTranscriptionPhrasesResponse
 */
async function getTranscriptionPhrases(request: GetTranscriptionPhrasesRequest): GetTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTranscriptionPhrases', 'GET', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

model ListTranscriptionPhrasesRequest {
}

model ListTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='PHS.Exceed'),
    errorMessage?: string(name='ErrorMessage', example='The num of the phrase exceeds the upper limit.'),
    phrases?: [ 
      {
        description?: string(name='Description', example='custom fruit phrases list'),
        name?: string(name='Name', example='fruit_phrase'),
        phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
      }
    ](name='Phrases'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model ListTranscriptionPhrasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTranscriptionPhrasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTranscriptionPhrases  ListTranscriptionPhrasesRequest
  * @return ListTranscriptionPhrasesResponse
 */
async function listTranscriptionPhrases(request: ListTranscriptionPhrasesRequest): ListTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTranscriptionPhrases', 'GET', '/openapi/tingwu/v2/resources/phrases', 'json', false, 'json', request);
}

model UpdateTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', description='This parameter is required.', example='a93b91141c0f422fa114af203f8b****', position='Path'),
  description?: string(name='Description', example='custom fruit phrases list', minLength=1, maxLength=250, position='Body'),
  name: string(name='Name', description='This parameter is required.', example='fruit_phrase', minLength=1, maxLength=50, position='Body'),
  wordWeights: string(name='WordWeights', description='This parameter is required.', example='{"苹果":3,"西瓜":3}', position='Body'),
}

model UpdateTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model UpdateTranscriptionPhrasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTranscriptionPhrasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTranscriptionPhrases  UpdateTranscriptionPhrasesRequest
  * @return UpdateTranscriptionPhrasesResponse
 */
async function updateTranscriptionPhrases(request: UpdateTranscriptionPhrasesRequest): UpdateTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTranscriptionPhrases', 'PUT', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

