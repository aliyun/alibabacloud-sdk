/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tingwu';
  @version = '2023-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTaskRequest {
  appKey?: string(name='AppKey', example='JV1sRTisRMi****', position='Body'),
  input?: {
    fileUrl?: string(name='FileUrl', example='http://xxx.com/zzz/1.wav'),
    format?: string(name='Format', example='pcm'),
    progressiveCallbacksEnabled?: boolean(name='ProgressiveCallbacksEnabled'),
    sampleRate?: int32(name='SampleRate', example='16000'),
    sourceLanguage: string(name='SourceLanguage', example='cn'),
    taskId?: string(name='TaskId'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
  }(name='Input', position='Body'),
  parameters?: {
    autoChaptersEnabled?: boolean(name='AutoChaptersEnabled', example='true'),
    meetingAssistanceEnabled?: boolean(name='MeetingAssistanceEnabled', example='false'),
    pptExtractionEnabled?: boolean(name='PptExtractionEnabled'),
    summarization?: {
      types?: map[string]any(name='Types', example='Paragraph'),
    }(name='Summarization'),
    summarizationEnabled?: boolean(name='SummarizationEnabled', example='false'),
    transcoding?: {
      spectrumEnabled?: boolean(name='SpectrumEnabled', example='false'),
      targetAudioFormat?: string(name='TargetAudioFormat', example='mp3'),
      targetVideoFormat?: string(name='TargetVideoFormat', example='mp4'),
      videoThumbnailEnabled?: boolean(name='VideoThumbnailEnabled', example='false'),
    }(name='Transcoding'),
    transcription?: {
      audioEventDetectionEnabled?: boolean(name='AudioEventDetectionEnabled', example='false'),
      diarization?: {
        speakerCount?: int32(name='SpeakerCount', example='2'),
      }(name='Diarization'),
      diarizationEnabled?: boolean(name='DiarizationEnabled', example='false'),
      outputLevel?: int32(name='OutputLevel'),
    }(name='Transcription'),
    translation?: {
      outputLevel?: int32(name='OutputLevel'),
      targetLanguages?: map[string]any(name='TargetLanguages'),
    }(name='Translation'),
    translationEnabled?: boolean(name='TranslationEnabled', example='false'),
  }(name='Parameters', position='Body'),
  operation?: string(name='operation', example='stop', position='Query'),
  type: string(name='type', example='offline', position='Query'),
}

model CreateTaskResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'PUT', '/openapi/tingwu/v2/tasks', 'json', false, 'json', request);
}

model GetTaskInfoRequest {
  taskId: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e', position='Path'),
}

model GetTaskInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskInfoResponseBody(name='body'),
}

async function getTaskInfo(request: GetTaskInfoRequest): GetTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskInfo', 'GET', '/openapi/tingwu/v2/tasks/{TaskId}', 'json', false, 'json', request);
}

