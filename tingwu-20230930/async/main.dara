/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'tingwu';
  @version = '2023-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTaskRequest {
  appKey?: string(name='AppKey', example='JV1sRTisRMi****', position='Body'),
  input?: {
    fileUrl?: string(name='FileUrl', example='http://xxx.com/zzz/1.wav'),
    format?: string(name='Format', example='pcm'),
    progressiveCallbacksEnabled?: boolean(name='ProgressiveCallbacksEnabled'),
    sampleRate?: int32(name='SampleRate', example='16000'),
    sourceLanguage: string(name='SourceLanguage', example='cn'),
    taskId?: string(name='TaskId'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
  }(name='Input', position='Body'),
  parameters?: {
    autoChaptersEnabled?: boolean(name='AutoChaptersEnabled', example='true'),
    meetingAssistance?: {
      types?: [ string ](name='Types'),
    }(name='MeetingAssistance'),
    meetingAssistanceEnabled?: boolean(name='MeetingAssistanceEnabled', example='false'),
    pptExtractionEnabled?: boolean(name='PptExtractionEnabled'),
    summarization?: {
      types?: [ string ](name='Types', example='Paragraph'),
    }(name='Summarization'),
    summarizationEnabled?: boolean(name='SummarizationEnabled', example='false'),
    textPolishEnabled?: boolean(name='TextPolishEnabled'),
    transcoding?: {
      spectrumEnabled?: boolean(name='SpectrumEnabled', example='false'),
      targetAudioFormat?: string(name='TargetAudioFormat', example='mp3'),
      targetVideoFormat?: string(name='TargetVideoFormat', example='mp4'),
      videoThumbnailEnabled?: boolean(name='VideoThumbnailEnabled', example='false'),
    }(name='Transcoding'),
    transcription?: {
      audioEventDetectionEnabled?: boolean(name='AudioEventDetectionEnabled', example='false'),
      diarization?: {
        speakerCount?: int32(name='SpeakerCount', example='2'),
      }(name='Diarization'),
      diarizationEnabled?: boolean(name='DiarizationEnabled', example='false'),
      outputLevel?: int32(name='OutputLevel'),
      phraseId?: string(name='PhraseId'),
    }(name='Transcription'),
    translation?: {
      outputLevel?: int32(name='OutputLevel'),
      targetLanguages?: [ string ](name='TargetLanguages'),
    }(name='Translation'),
    translationEnabled?: boolean(name='TranslationEnabled', example='false'),
  }(name='Parameters', position='Body'),
  operation?: string(name='operation', example='stop', position='Query'),
  type: string(name='type', example='offline', position='Query'),
}

model CreateTaskResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'PUT', '/openapi/tingwu/v2/tasks', 'json', false, 'json', request);
}

model CreateTranscriptionPhrasesRequest {
  description?: string(name='Description', example='custom fruit phrases list', minLength=1, maxLength=250, position='Body'),
  name: string(name='Name', example='fruit_phrase', minLength=1, maxLength=50, position='Body'),
  wordWeights: string(name='WordWeights', example='{"苹果":3,"西瓜":3}', position='Body'),
}

model CreateTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model CreateTranscriptionPhrasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTranscriptionPhrasesResponseBody(name='body'),
}

async function createTranscriptionPhrases(request: CreateTranscriptionPhrasesRequest): CreateTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTranscriptionPhrases', 'POST', '/openapi/tingwu/v2/resources/phrases', 'json', false, 'json', request);
}

model DeleteTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****', position='Path'),
}

model DeleteTranscriptionPhrasesResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage', example='success'),
  status?: string(name='Status', example='SUCCEEDED'),
}

model DeleteTranscriptionPhrasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTranscriptionPhrasesResponseBody(name='body'),
}

async function deleteTranscriptionPhrases(request: DeleteTranscriptionPhrasesRequest): DeleteTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTranscriptionPhrases', 'DELETE', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

model GetTaskInfoRequest {
  taskId: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e', position='Path'),
}

model GetTaskInfoResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    result?: {
      autoChapters?: string(name='AutoChapters'),
      meetingAssistance?: string(name='MeetingAssistance'),
      pptExtraction?: string(name='PptExtraction'),
      summarization?: string(name='Summarization'),
      transcription?: string(name='Transcription'),
      translation?: string(name='Translation'),
    }(name='Result'),
    taskId?: string(name='TaskId', example='c5394c6ee0fb474899d42215a3925c7e'),
    taskKey?: string(name='TaskKey', example='task_tingwu_123'),
    taskStatus?: string(name='TaskStatus', example='COMPLETE'),
  }(name='Data'),
  message?: string(name='Message', example='Success.'),
  requestId?: string(name='RequestId', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskInfoResponseBody(name='body'),
}

async function getTaskInfo(request: GetTaskInfoRequest): GetTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskInfo', 'GET', '/openapi/tingwu/v2/tasks/{TaskId}', 'json', false, 'json', request);
}

model GetTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****', position='Path'),
}

model GetTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    phrases?: [ 
      {
        description?: string(name='Description', example='custom fruit phrases list'),
        name?: string(name='Name', example='fruit_phrase'),
        phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
        wordWeights?: string(name='WordWeights', example='{"苹果":3,"西瓜":3}'),
      }
    ](name='Phrases'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model GetTranscriptionPhrasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTranscriptionPhrasesResponseBody(name='body'),
}

async function getTranscriptionPhrases(request: GetTranscriptionPhrasesRequest): GetTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTranscriptionPhrases', 'GET', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

model ListTranscriptionPhrasesRequest {
}

model ListTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='PHS.Exceed'),
    errorMessage?: string(name='ErrorMessage', example='The num of the phrase exceeds the upper limit.'),
    phrases?: [ 
      {
        description?: string(name='Description', example='custom fruit phrases list'),
        name?: string(name='Name', example='fruit_phrase'),
        phraseId?: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****'),
      }
    ](name='Phrases'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model ListTranscriptionPhrasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTranscriptionPhrasesResponseBody(name='body'),
}

async function listTranscriptionPhrases(request: ListTranscriptionPhrasesRequest): ListTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTranscriptionPhrases', 'GET', '/openapi/tingwu/v2/resources/phrases', 'json', false, 'json', request);
}

model UpdateTranscriptionPhrasesRequest {
  phraseId: string(name='PhraseId', example='a93b91141c0f422fa114af203f8b****', position='Path'),
  description?: string(name='Description', example='custom fruit phrases list', minLength=1, maxLength=250, position='Body'),
  name: string(name='Name', example='fruit_phrase', minLength=1, maxLength=50, position='Body'),
  wordWeights: string(name='WordWeights', example='{"苹果":3,"西瓜":3}', position='Body'),
}

model UpdateTranscriptionPhrasesResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    errorCode?: string(name='ErrorCode', example='0'),
    errorMessage?: string(name='ErrorMessage', example='success'),
    status?: string(name='Status', example='SUCCEEDED'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='35124E1C-AE99-5D6C-A52E-BD689D8D****'),
}

model UpdateTranscriptionPhrasesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTranscriptionPhrasesResponseBody(name='body'),
}

async function updateTranscriptionPhrases(request: UpdateTranscriptionPhrasesRequest): UpdateTranscriptionPhrasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTranscriptionPhrases', 'PUT', '/openapi/tingwu/v2/resources/phrases/{PhraseId}', 'json', false, 'json', request);
}

