/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    ap-northeast-1 = 'alidns.ap-northeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'dns.aliyuncs.com',
    ap-south-1 = 'alidns.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'alidns.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'alidns.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'alidns.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'alidns.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'alidns.cn-beijing.aliyuncs.com',
    cn-beijing-finance-1 = 'dns.aliyuncs.com',
    cn-beijing-finance-pop = 'dns.aliyuncs.com',
    cn-beijing-gov-1 = 'dns.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dns.aliyuncs.com',
    cn-chengdu = 'alidns.cn-chengdu.aliyuncs.com',
    cn-edge-1 = 'dns.aliyuncs.com',
    cn-fujian = 'dns.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dns.aliyuncs.com',
    cn-hangzhou = 'alidns.cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dns.aliyuncs.com',
    cn-hangzhou-finance = 'alidns.cn-hangzhou-finance.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dns.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dns.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dns.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dns.aliyuncs.com',
    cn-hangzhou-test-306 = 'dns.aliyuncs.com',
    cn-hongkong = 'alidns.cn-hongkong.aliyuncs.com',
    cn-hongkong-finance-pop = 'dns.aliyuncs.com',
    cn-huhehaote = 'alidns.cn-huhehaote.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dns.aliyuncs.com',
    cn-north-2-gov-1 = 'alidns.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao = 'dns.aliyuncs.com',
    cn-qingdao-nebula = 'dns.aliyuncs.com',
    cn-shanghai = 'alidns.cn-shanghai.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dns.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dns.aliyuncs.com',
    cn-shanghai-finance-1 = 'alidns.cn-shanghai-finance-1.aliyuncs.com',
    cn-shanghai-inner = 'dns.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dns.aliyuncs.com',
    cn-shenzhen = 'alidns.cn-shenzhen.aliyuncs.com',
    cn-shenzhen-finance-1 = 'alidns.cn-shenzhen-finance-1.aliyuncs.com',
    cn-shenzhen-inner = 'dns.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dns.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dns.aliyuncs.com',
    cn-wuhan = 'dns.aliyuncs.com',
    cn-wulanchabu = 'dns.aliyuncs.com',
    cn-yushanfang = 'dns.aliyuncs.com',
    cn-zhangbei = 'dns.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dns.aliyuncs.com',
    cn-zhangjiakou = 'alidns.cn-zhangjiakou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dns.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dns.aliyuncs.com',
    eu-central-1 = 'alidns.eu-central-1.aliyuncs.com',
    eu-west-1 = 'alidns.eu-west-1.aliyuncs.com',
    eu-west-1-oxs = 'dns.aliyuncs.com',
    me-east-1 = 'alidns.me-east-1.aliyuncs.com',
    rus-west-1-pop = 'dns.aliyuncs.com',
    us-east-1 = 'alidns.us-east-1.aliyuncs.com',
    us-west-1 = 'alidns.us-west-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('alidns', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddCustomLineRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  lineName?: string(name='LineName'),
  ipSegment?: [ 
    {
      endIp?: string(name='EndIp'),
      startIp?: string(name='StartIp'),
    }
  ](name='IpSegment'),
}

model AddCustomLineResponseBody = {
  lineId?: long(name='LineId'),
  requestId?: string(name='RequestId'),
  lineCode?: string(name='LineCode'),
}

model AddCustomLineResponse = {
  headers: map[string]string(name='headers'),
  body: AddCustomLineResponseBody(name='body'),
}

async function addCustomLineWithOptions(request: AddCustomLineRequest, runtime: Util.RuntimeOptions): AddCustomLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCustomLine', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCustomLine(request: AddCustomLineRequest): AddCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCustomLineWithOptions(request, runtime);
}

model AddDnsCacheDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  instanceId?: string(name='InstanceId'),
  cacheTtlMin?: int32(name='CacheTtlMin'),
  cacheTtlMax?: int32(name='CacheTtlMax'),
  sourceProtocol?: string(name='SourceProtocol'),
  sourceEdns?: string(name='SourceEdns'),
  remark?: string(name='Remark'),
  sourceDnsServer?: [ 
    {
      host?: string(name='Host'),
      port?: string(name='Port'),
    }
  ](name='SourceDnsServer'),
}

model AddDnsCacheDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDnsCacheDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDnsCacheDomainResponseBody(name='body'),
}

async function addDnsCacheDomainWithOptions(request: AddDnsCacheDomainRequest, runtime: Util.RuntimeOptions): AddDnsCacheDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDnsCacheDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDnsCacheDomain(request: AddDnsCacheDomainRequest): AddDnsCacheDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnsCacheDomainWithOptions(request, runtime);
}

model AddDnsGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  strategyName?: string(name='StrategyName'),
  lines?: string(name='Lines'),
  defaultAddrPoolType?: string(name='DefaultAddrPoolType'),
  defaultLbaStrategy?: string(name='DefaultLbaStrategy'),
  defaultMinAvailableAddrNum?: int32(name='DefaultMinAvailableAddrNum'),
  defaultMaxReturnAddrNum?: int32(name='DefaultMaxReturnAddrNum'),
  defaultLatencyOptimization?: string(name='DefaultLatencyOptimization'),
  failoverAddrPoolType?: string(name='FailoverAddrPoolType'),
  failoverLbaStrategy?: string(name='FailoverLbaStrategy'),
  failoverMinAvailableAddrNum?: int32(name='FailoverMinAvailableAddrNum'),
  failoverMaxReturnAddrNum?: int32(name='FailoverMaxReturnAddrNum'),
  failoverLatencyOptimization?: string(name='FailoverLatencyOptimization'),
  strategyMode?: string(name='StrategyMode'),
  defaultAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      id?: string(name='Id'),
    }
  ](name='DefaultAddrPool'),
  failoverAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      id?: string(name='Id'),
    }
  ](name='FailoverAddrPool'),
}

model AddDnsGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategyId?: string(name='StrategyId'),
}

model AddDnsGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: AddDnsGtmAccessStrategyResponseBody(name='body'),
}

async function addDnsGtmAccessStrategyWithOptions(request: AddDnsGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): AddDnsGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDnsGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDnsGtmAccessStrategy(request: AddDnsGtmAccessStrategyRequest): AddDnsGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnsGtmAccessStrategyWithOptions(request, runtime);
}

model AddDnsGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  lbaStrategy?: string(name='LbaStrategy'),
  monitorStatus?: string(name='MonitorStatus'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  addr?: [ 
    {
      attributeInfo?: string(name='AttributeInfo'),
      remark?: string(name='Remark'),
      lbaWeight?: int32(name='LbaWeight'),
      addr?: string(name='Addr'),
      mode?: string(name='Mode'),
    }
  ](name='Addr'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model AddDnsGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
  addrPoolId?: string(name='AddrPoolId'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model AddDnsGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AddDnsGtmAddressPoolResponseBody(name='body'),
}

async function addDnsGtmAddressPoolWithOptions(request: AddDnsGtmAddressPoolRequest, runtime: Util.RuntimeOptions): AddDnsGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDnsGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDnsGtmAddressPool(request: AddDnsGtmAddressPoolRequest): AddDnsGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnsGtmAddressPoolWithOptions(request, runtime);
}

model AddDnsGtmMonitorRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model AddDnsGtmMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model AddDnsGtmMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: AddDnsGtmMonitorResponseBody(name='body'),
}

async function addDnsGtmMonitorWithOptions(request: AddDnsGtmMonitorRequest, runtime: Util.RuntimeOptions): AddDnsGtmMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDnsGtmMonitor', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDnsGtmMonitor(request: AddDnsGtmMonitorRequest): AddDnsGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnsGtmMonitorWithOptions(request, runtime);
}

model AddDomainRequest {
  lang?: string(name='Lang'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  userClientIp?: string(name='UserClientIp'),
}

model AddDomainResponseBody = {
  groupName?: string(name='GroupName'),
  domainId?: string(name='DomainId'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  punyCode?: string(name='PunyCode'),
  dnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='DnsServers'),
  groupId?: string(name='GroupId'),
}

model AddDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainResponseBody(name='body'),
}

async function addDomainWithOptions(request: AddDomainRequest, runtime: Util.RuntimeOptions): AddDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

model AddDomainBackupRequest {
  lang?: string(name='Lang'),
  domainName?: string(name='DomainName'),
  periodType?: string(name='PeriodType'),
  userClientIp?: string(name='UserClientIp'),
}

model AddDomainBackupResponseBody = {
  periodType?: string(name='PeriodType'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
}

model AddDomainBackupResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainBackupResponseBody(name='body'),
}

async function addDomainBackupWithOptions(request: AddDomainBackupRequest, runtime: Util.RuntimeOptions): AddDomainBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDomainBackup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDomainBackup(request: AddDomainBackupRequest): AddDomainBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainBackupWithOptions(request, runtime);
}

model AddDomainGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  groupName?: string(name='GroupName'),
}

model AddDomainGroupResponseBody = {
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
}

model AddDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainGroupResponseBody(name='body'),
}

async function addDomainGroupWithOptions(request: AddDomainGroupRequest, runtime: Util.RuntimeOptions): AddDomainGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDomainGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDomainGroup(request: AddDomainGroupRequest): AddDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainGroupWithOptions(request, runtime);
}

model AddDomainRecordRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  RR?: string(name='RR'),
  type?: string(name='Type'),
  value?: string(name='Value'),
  TTL?: long(name='TTL'),
  priority?: long(name='Priority'),
  line?: string(name='Line'),
}

model AddDomainRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
}

model AddDomainRecordResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainRecordResponseBody(name='body'),
}

async function addDomainRecordWithOptions(request: AddDomainRecordRequest, runtime: Util.RuntimeOptions): AddDomainRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDomainRecord', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDomainRecord(request: AddDomainRecordRequest): AddDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainRecordWithOptions(request, runtime);
}

model AddGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  strategyName?: string(name='StrategyName'),
  defaultAddrPoolId?: string(name='DefaultAddrPoolId'),
  failoverAddrPoolId?: string(name='FailoverAddrPoolId'),
  accessLines?: string(name='AccessLines'),
}

model AddGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategyId?: string(name='StrategyId'),
}

model AddGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: AddGtmAccessStrategyResponseBody(name='body'),
}

async function addGtmAccessStrategyWithOptions(request: AddGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): AddGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGtmAccessStrategy(request: AddGtmAccessStrategyRequest): AddGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmAccessStrategyWithOptions(request, runtime);
}

model AddGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  minAvailableAddrNum?: int32(name='MinAvailableAddrNum'),
  monitorStatus?: string(name='MonitorStatus'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  addr?: [ 
    {
      value?: string(name='Value'),
      lbaWeight?: int32(name='LbaWeight'),
      mode?: string(name='Mode'),
    }
  ](name='Addr'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model AddGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
  addrPoolId?: string(name='AddrPoolId'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model AddGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: AddGtmAddressPoolResponseBody(name='body'),
}

async function addGtmAddressPoolWithOptions(request: AddGtmAddressPoolRequest, runtime: Util.RuntimeOptions): AddGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGtmAddressPool(request: AddGtmAddressPoolRequest): AddGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmAddressPoolWithOptions(request, runtime);
}

model AddGtmMonitorRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model AddGtmMonitorResponseBody = {
  requestId?: string(name='RequestId'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model AddGtmMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: AddGtmMonitorResponseBody(name='body'),
}

async function addGtmMonitorWithOptions(request: AddGtmMonitorRequest, runtime: Util.RuntimeOptions): AddGtmMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGtmMonitor', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGtmMonitor(request: AddGtmMonitorRequest): AddGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmMonitorWithOptions(request, runtime);
}

model AddGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  name?: string(name='Name'),
  remark?: string(name='Remark'),
  faultAddrPool?: string(name='FaultAddrPool'),
}

model AddGtmRecoveryPlanResponseBody = {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  requestId?: string(name='RequestId'),
}

model AddGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: AddGtmRecoveryPlanResponseBody(name='body'),
}

async function addGtmRecoveryPlanWithOptions(request: AddGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): AddGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addGtmRecoveryPlan(request: AddGtmRecoveryPlanRequest): AddGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmRecoveryPlanWithOptions(request, runtime);
}

model BindInstanceDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  domainNames?: string(name='DomainNames'),
}

model BindInstanceDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  failedCount?: int32(name='FailedCount'),
  successCount?: int32(name='SuccessCount'),
}

model BindInstanceDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: BindInstanceDomainsResponseBody(name='body'),
}

async function bindInstanceDomainsWithOptions(request: BindInstanceDomainsRequest, runtime: Util.RuntimeOptions): BindInstanceDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindInstanceDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindInstanceDomains(request: BindInstanceDomainsRequest): BindInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindInstanceDomainsWithOptions(request, runtime);
}

model ChangeDomainGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model ChangeDomainGroupResponseBody = {
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
}

model ChangeDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeDomainGroupResponseBody(name='body'),
}

async function changeDomainGroupWithOptions(request: ChangeDomainGroupRequest, runtime: Util.RuntimeOptions): ChangeDomainGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeDomainGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeDomainGroup(request: ChangeDomainGroupRequest): ChangeDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeDomainGroupWithOptions(request, runtime);
}

model ChangeDomainOfDnsProductRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  newDomain?: string(name='NewDomain'),
  force?: boolean(name='Force'),
}

model ChangeDomainOfDnsProductResponseBody = {
  requestId?: string(name='RequestId'),
  originalDomain?: string(name='OriginalDomain'),
}

model ChangeDomainOfDnsProductResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeDomainOfDnsProductResponseBody(name='body'),
}

async function changeDomainOfDnsProductWithOptions(request: ChangeDomainOfDnsProductRequest, runtime: Util.RuntimeOptions): ChangeDomainOfDnsProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeDomainOfDnsProduct', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeDomainOfDnsProduct(request: ChangeDomainOfDnsProductRequest): ChangeDomainOfDnsProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeDomainOfDnsProductWithOptions(request, runtime);
}

model CopyGtmConfigRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  sourceId?: string(name='SourceId'),
  targetId?: string(name='TargetId'),
  copyType?: string(name='CopyType'),
}

model CopyGtmConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CopyGtmConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CopyGtmConfigResponseBody(name='body'),
}

async function copyGtmConfigWithOptions(request: CopyGtmConfigRequest, runtime: Util.RuntimeOptions): CopyGtmConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyGtmConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyGtmConfig(request: CopyGtmConfigRequest): CopyGtmConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyGtmConfigWithOptions(request, runtime);
}

model DeleteCustomLinesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  lineIds?: string(name='LineIds'),
}

model DeleteCustomLinesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCustomLinesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomLinesResponseBody(name='body'),
}

async function deleteCustomLinesWithOptions(request: DeleteCustomLinesRequest, runtime: Util.RuntimeOptions): DeleteCustomLinesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCustomLines', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCustomLines(request: DeleteCustomLinesRequest): DeleteCustomLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomLinesWithOptions(request, runtime);
}

model DeleteDnsCacheDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model DeleteDnsCacheDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDnsCacheDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDnsCacheDomainResponseBody(name='body'),
}

async function deleteDnsCacheDomainWithOptions(request: DeleteDnsCacheDomainRequest, runtime: Util.RuntimeOptions): DeleteDnsCacheDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDnsCacheDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDnsCacheDomain(request: DeleteDnsCacheDomainRequest): DeleteDnsCacheDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDnsCacheDomainWithOptions(request, runtime);
}

model DeleteDnsGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
}

model DeleteDnsGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDnsGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDnsGtmAccessStrategyResponseBody(name='body'),
}

async function deleteDnsGtmAccessStrategyWithOptions(request: DeleteDnsGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DeleteDnsGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDnsGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDnsGtmAccessStrategy(request: DeleteDnsGtmAccessStrategyRequest): DeleteDnsGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDnsGtmAccessStrategyWithOptions(request, runtime);
}

model DeleteDnsGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
}

model DeleteDnsGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDnsGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDnsGtmAddressPoolResponseBody(name='body'),
}

async function deleteDnsGtmAddressPoolWithOptions(request: DeleteDnsGtmAddressPoolRequest, runtime: Util.RuntimeOptions): DeleteDnsGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDnsGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDnsGtmAddressPool(request: DeleteDnsGtmAddressPoolRequest): DeleteDnsGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDnsGtmAddressPoolWithOptions(request, runtime);
}

model DeleteDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteDomainGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  groupId?: string(name='GroupId'),
}

model DeleteDomainGroupResponseBody = {
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainGroupResponseBody(name='body'),
}

async function deleteDomainGroupWithOptions(request: DeleteDomainGroupRequest, runtime: Util.RuntimeOptions): DeleteDomainGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomainGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomainGroup(request: DeleteDomainGroupRequest): DeleteDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainGroupWithOptions(request, runtime);
}

model DeleteDomainRecordRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
}

model DeleteDomainRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
}

model DeleteDomainRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainRecordResponseBody(name='body'),
}

async function deleteDomainRecordWithOptions(request: DeleteDomainRecordRequest, runtime: Util.RuntimeOptions): DeleteDomainRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomainRecord', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomainRecord(request: DeleteDomainRecordRequest): DeleteDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainRecordWithOptions(request, runtime);
}

model DeleteGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
}

model DeleteGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGtmAccessStrategyResponseBody(name='body'),
}

async function deleteGtmAccessStrategyWithOptions(request: DeleteGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DeleteGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteGtmAccessStrategy(request: DeleteGtmAccessStrategyRequest): DeleteGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmAccessStrategyWithOptions(request, runtime);
}

model DeleteGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
}

model DeleteGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGtmAddressPoolResponseBody(name='body'),
}

async function deleteGtmAddressPoolWithOptions(request: DeleteGtmAddressPoolRequest, runtime: Util.RuntimeOptions): DeleteGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteGtmAddressPool(request: DeleteGtmAddressPoolRequest): DeleteGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmAddressPoolWithOptions(request, runtime);
}

model DeleteGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
}

model DeleteGtmRecoveryPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGtmRecoveryPlanResponseBody(name='body'),
}

async function deleteGtmRecoveryPlanWithOptions(request: DeleteGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): DeleteGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteGtmRecoveryPlan(request: DeleteGtmRecoveryPlanRequest): DeleteGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmRecoveryPlanWithOptions(request, runtime);
}

model DeleteSubDomainRecordsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  RR?: string(name='RR'),
  type?: string(name='Type'),
}

model DeleteSubDomainRecordsResponseBody = {
  RR?: string(name='RR'),
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
}

model DeleteSubDomainRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubDomainRecordsResponseBody(name='body'),
}

async function deleteSubDomainRecordsWithOptions(request: DeleteSubDomainRecordsRequest, runtime: Util.RuntimeOptions): DeleteSubDomainRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSubDomainRecords', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSubDomainRecords(request: DeleteSubDomainRecordsRequest): DeleteSubDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubDomainRecordsWithOptions(request, runtime);
}

model DescribeBatchResultCountRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  taskId?: long(name='TaskId'),
  batchType?: string(name='BatchType'),
}

model DescribeBatchResultCountResponseBody = {
  status?: int32(name='Status'),
  totalCount?: int32(name='TotalCount'),
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
  failedCount?: int32(name='FailedCount'),
  successCount?: int32(name='SuccessCount'),
  batchType?: string(name='BatchType'),
  reason?: string(name='Reason'),
}

model DescribeBatchResultCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBatchResultCountResponseBody(name='body'),
}

async function describeBatchResultCountWithOptions(request: DescribeBatchResultCountRequest, runtime: Util.RuntimeOptions): DescribeBatchResultCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBatchResultCount', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBatchResultCount(request: DescribeBatchResultCountRequest): DescribeBatchResultCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchResultCountWithOptions(request, runtime);
}

model DescribeBatchResultDetailRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  taskId?: long(name='TaskId'),
  batchType?: string(name='BatchType'),
  status?: string(name='Status'),
}

model DescribeBatchResultDetailResponseBody = {
  totalCount?: long(name='TotalCount'),
  batchResultDetails?: {
    batchResultDetail?: [ 
    {
      status?: boolean(name='Status'),
      type?: string(name='Type'),
      domain?: string(name='Domain'),
      remark?: string(name='Remark'),
      recordId?: string(name='RecordId'),
      rr?: string(name='Rr'),
      priority?: string(name='Priority'),
      rrStatus?: string(name='RrStatus'),
      operateDateStr?: string(name='OperateDateStr'),
      newValue?: string(name='NewValue'),
      value?: string(name='Value'),
      ttl?: string(name='Ttl'),
      batchType?: string(name='BatchType'),
      line?: string(name='Line'),
      newRr?: string(name='NewRr'),
      reason?: string(name='Reason'),
    }
  ](name='BatchResultDetail')
  }(name='BatchResultDetails'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeBatchResultDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBatchResultDetailResponseBody(name='body'),
}

async function describeBatchResultDetailWithOptions(request: DescribeBatchResultDetailRequest, runtime: Util.RuntimeOptions): DescribeBatchResultDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBatchResultDetail', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBatchResultDetail(request: DescribeBatchResultDetailRequest): DescribeBatchResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchResultDetailWithOptions(request, runtime);
}

model DescribeCustomLineRequest {
  lineId?: long(name='LineId'),
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeCustomLineResponseBody = {
  requestId?: string(name='RequestId'),
  ipSegmentList?: [ 
    {
      endIp?: string(name='EndIp'),
      startIp?: string(name='StartIp'),
    }
  ](name='IpSegmentList'),
  domainName?: string(name='DomainName'),
  id?: long(name='Id'),
  code?: string(name='Code'),
  name?: string(name='Name'),
}

model DescribeCustomLineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomLineResponseBody(name='body'),
}

async function describeCustomLineWithOptions(request: DescribeCustomLineRequest, runtime: Util.RuntimeOptions): DescribeCustomLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCustomLine', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCustomLine(request: DescribeCustomLineRequest): DescribeCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLineWithOptions(request, runtime);
}

model DescribeCustomLinesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  domainName?: string(name='DomainName'),
}

model DescribeCustomLinesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  customLines?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
      id?: long(name='Id'),
    }
  ](name='CustomLines'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeCustomLinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomLinesResponseBody(name='body'),
}

async function describeCustomLinesWithOptions(request: DescribeCustomLinesRequest, runtime: Util.RuntimeOptions): DescribeCustomLinesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCustomLines', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCustomLines(request: DescribeCustomLinesRequest): DescribeCustomLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLinesWithOptions(request, runtime);
}

model DescribeDnsCacheDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  keyword?: string(name='Keyword'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDnsCacheDomainsResponseBody = {
  domains?: [ 
    {
      sourceProtocol?: string(name='SourceProtocol'),
      updateTime?: string(name='UpdateTime'),
      remark?: string(name='Remark'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      sourceEdns?: string(name='SourceEdns'),
      domainName?: string(name='DomainName'),
      domainId?: string(name='DomainId'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      expireTimestamp?: long(name='ExpireTimestamp'),
      cacheTtlMax?: int32(name='CacheTtlMax'),
      cacheTtlMin?: int32(name='CacheTtlMin'),
      versionCode?: string(name='VersionCode'),
      sourceDnsServers?: [ 
        {
          host?: string(name='Host'),
          port?: string(name='Port'),
        }
      ](name='SourceDnsServers'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Domains'),
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeDnsCacheDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsCacheDomainsResponseBody(name='body'),
}

async function describeDnsCacheDomainsWithOptions(request: DescribeDnsCacheDomainsRequest, runtime: Util.RuntimeOptions): DescribeDnsCacheDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsCacheDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsCacheDomains(request: DescribeDnsCacheDomainsRequest): DescribeDnsCacheDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsCacheDomainsWithOptions(request, runtime);
}

model DescribeDnsGtmAccessStrategiesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  strategyMode?: string(name='StrategyMode'),
}

model DescribeDnsGtmAccessStrategiesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  strategies?: {
    strategy?: [ 
    {
      effectiveLbaStrategy?: string(name='EffectiveLbaStrategy'),
      strategyId?: string(name='StrategyId'),
      strategyName?: string(name='StrategyName'),
      effectiveAddrPoolGroupType?: string(name='EffectiveAddrPoolGroupType'),
      createTime?: string(name='CreateTime'),
      effectiveAddrPools?: {
        effectiveAddrPool?: [ 
        {
          lbaWeight?: int32(name='LbaWeight'),
          name?: string(name='Name'),
          addrCount?: int32(name='AddrCount'),
          id?: string(name='Id'),
        }
      ](name='EffectiveAddrPool')
      }(name='EffectiveAddrPools'),
      createTimestamp?: long(name='CreateTimestamp'),
      effectiveAddrPoolType?: string(name='EffectiveAddrPoolType'),
      lines?: {
        line?: [ 
        {
          groupName?: string(name='GroupName'),
          lineCode?: string(name='LineCode'),
          lineName?: string(name='LineName'),
          groupCode?: string(name='GroupCode'),
        }
      ](name='Line')
      }(name='Lines'),
    }
  ](name='Strategy')
  }(name='Strategies'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeDnsGtmAccessStrategiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAccessStrategiesResponseBody(name='body'),
}

async function describeDnsGtmAccessStrategiesWithOptions(request: DescribeDnsGtmAccessStrategiesRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAccessStrategiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAccessStrategies', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAccessStrategies(request: DescribeDnsGtmAccessStrategiesRequest): DescribeDnsGtmAccessStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAccessStrategiesWithOptions(request, runtime);
}

model DescribeDnsGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
}

model DescribeDnsGtmAccessStrategyResponseBody = {
  failoverMinAvailableAddrNum?: int32(name='FailoverMinAvailableAddrNum'),
  defaultAddrPoolType?: string(name='DefaultAddrPoolType'),
  defaultAvailableAddrNum?: int32(name='DefaultAvailableAddrNum'),
  strategyId?: string(name='StrategyId'),
  failoverAddrPoolGroupStatus?: string(name='FailoverAddrPoolGroupStatus'),
  failoverAvailableAddrNum?: int32(name='FailoverAvailableAddrNum'),
  failoverLbaStrategy?: string(name='FailoverLbaStrategy'),
  defaultMaxReturnAddrNum?: int32(name='DefaultMaxReturnAddrNum'),
  strategyMode?: string(name='StrategyMode'),
  createTimestamp?: long(name='CreateTimestamp'),
  defaultLbaStrategy?: string(name='DefaultLbaStrategy'),
  defaultAddrPoolGroupStatus?: string(name='DefaultAddrPoolGroupStatus'),
  failoverAddrPoolType?: string(name='FailoverAddrPoolType'),
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  failoverAddrPools?: {
    failoverAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      id?: string(name='Id'),
    }
  ](name='FailoverAddrPool')
  }(name='FailoverAddrPools'),
  defaultLatencyOptimization?: string(name='DefaultLatencyOptimization'),
  effectiveAddrPoolGroupType?: string(name='EffectiveAddrPoolGroupType'),
  createTime?: string(name='CreateTime'),
  defaultAddrPools?: {
    defaultAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      id?: string(name='Id'),
    }
  ](name='DefaultAddrPool')
  }(name='DefaultAddrPools'),
  defaultMinAvailableAddrNum?: int32(name='DefaultMinAvailableAddrNum'),
  failoverLatencyOptimization?: string(name='FailoverLatencyOptimization'),
  strategyName?: string(name='StrategyName'),
  failoverMaxReturnAddrNum?: int32(name='FailoverMaxReturnAddrNum'),
  accessMode?: string(name='AccessMode'),
  lines?: {
    line?: [ 
    {
      groupName?: string(name='GroupName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
      groupCode?: string(name='GroupCode'),
    }
  ](name='Line')
  }(name='Lines'),
}

model DescribeDnsGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAccessStrategyResponseBody(name='body'),
}

async function describeDnsGtmAccessStrategyWithOptions(request: DescribeDnsGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAccessStrategy(request: DescribeDnsGtmAccessStrategyRequest): DescribeDnsGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAccessStrategyWithOptions(request, runtime);
}

model DescribeDnsGtmAccessStrategyAvailableConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  strategyMode?: string(name='StrategyMode'),
}

model DescribeDnsGtmAccessStrategyAvailableConfigResponseBody = {
  selectedDomainLines?: {
    selectedDomainLine?: [ string ](name='SelectedDomainLine')
  }(name='SelectedDomainLines'),
  domainAddrPools?: {
    domainAddrPool?: [ 
    {
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      id?: string(name='Id'),
    }
  ](name='DomainAddrPool')
  }(name='DomainAddrPools'),
  ipv4AddrPools?: {
    ipv4AddrPool?: [ 
    {
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      id?: string(name='Id'),
    }
  ](name='Ipv4AddrPool')
  }(name='Ipv4AddrPools'),
  requestId?: string(name='RequestId'),
  selectedIpv4Lines?: {
    selectedIpv4Line?: [ string ](name='SelectedIpv4Line')
  }(name='SelectedIpv4Lines'),
  ipv6AddrPools?: {
    ipv6AddrPool?: [ 
    {
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      id?: string(name='Id'),
    }
  ](name='Ipv6AddrPool')
  }(name='Ipv6AddrPools'),
  suggestSetDefaultLine?: boolean(name='SuggestSetDefaultLine'),
  selectedIpv6Lines?: {
    selectedIpv6Line?: [ string ](name='SelectedIpv6Line')
  }(name='SelectedIpv6Lines'),
  lines?: {
    line?: [ 
    {
      fatherCode?: string(name='FatherCode'),
      groupName?: string(name='GroupName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
      groupCode?: string(name='GroupCode'),
    }
  ](name='Line')
  }(name='Lines'),
}

model DescribeDnsGtmAccessStrategyAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAccessStrategyAvailableConfigResponseBody(name='body'),
}

async function describeDnsGtmAccessStrategyAvailableConfigWithOptions(request: DescribeDnsGtmAccessStrategyAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAccessStrategyAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAccessStrategyAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAccessStrategyAvailableConfig(request: DescribeDnsGtmAccessStrategyAvailableConfigRequest): DescribeDnsGtmAccessStrategyAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAccessStrategyAvailableConfigWithOptions(request, runtime);
}

model DescribeDnsGtmAddrAttributeInfoRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  type?: string(name='Type'),
  addrs?: string(name='Addrs'),
}

model DescribeDnsGtmAddrAttributeInfoResponseBody = {
  requestId?: string(name='RequestId'),
  addr?: {
    addr?: [ 
    {
      attributeInfo?: {
        fatherCode?: string(name='FatherCode'),
        groupName?: string(name='GroupName'),
        lineCode?: string(name='LineCode'),
        lineName?: string(name='LineName'),
        groupCode?: string(name='GroupCode'),
      }(name='AttributeInfo'),
      addr?: string(name='Addr'),
    }
  ](name='Addr')
  }(name='Addr'),
}

model DescribeDnsGtmAddrAttributeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAddrAttributeInfoResponseBody(name='body'),
}

async function describeDnsGtmAddrAttributeInfoWithOptions(request: DescribeDnsGtmAddrAttributeInfoRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAddrAttributeInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAddrAttributeInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAddrAttributeInfo(request: DescribeDnsGtmAddrAttributeInfoRequest): DescribeDnsGtmAddrAttributeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAddrAttributeInfoWithOptions(request, runtime);
}

model DescribeDnsGtmAddressPoolAvailableConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDnsGtmAddressPoolAvailableConfigResponseBody = {
  requestId?: string(name='RequestId'),
  attributeInfos?: {
    attributeInfo?: [ 
    {
      fatherCode?: string(name='FatherCode'),
      groupName?: string(name='GroupName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
      groupCode?: string(name='GroupCode'),
    }
  ](name='AttributeInfo')
  }(name='AttributeInfos'),
}

model DescribeDnsGtmAddressPoolAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAddressPoolAvailableConfigResponseBody(name='body'),
}

async function describeDnsGtmAddressPoolAvailableConfigWithOptions(request: DescribeDnsGtmAddressPoolAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAddressPoolAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAddressPoolAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAddressPoolAvailableConfig(request: DescribeDnsGtmAddressPoolAvailableConfigRequest): DescribeDnsGtmAddressPoolAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAddressPoolAvailableConfigWithOptions(request, runtime);
}

model DescribeDnsGtmAvailableAlertGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeDnsGtmAvailableAlertGroupResponseBody = {
  requestId?: string(name='RequestId'),
  availableAlertGroup?: string(name='AvailableAlertGroup'),
}

model DescribeDnsGtmAvailableAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmAvailableAlertGroupResponseBody(name='body'),
}

async function describeDnsGtmAvailableAlertGroupWithOptions(request: DescribeDnsGtmAvailableAlertGroupRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmAvailableAlertGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmAvailableAlertGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmAvailableAlertGroup(request: DescribeDnsGtmAvailableAlertGroupRequest): DescribeDnsGtmAvailableAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmAvailableAlertGroupWithOptions(request, runtime);
}

model DescribeDnsGtmInstanceRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDnsGtmInstanceResponseBody = {
  expireTimestamp?: long(name='ExpireTimestamp'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: string(name='InstanceId'),
  taskQuota?: int32(name='TaskQuota'),
  config?: {
    ttl?: int32(name='Ttl'),
    alertGroup?: string(name='AlertGroup'),
    cnameType?: string(name='CnameType'),
    strategyMode?: string(name='StrategyMode'),
    instanceName?: string(name='InstanceName'),
    publicCnameMode?: string(name='PublicCnameMode'),
    alertConfig?: {
      alertConfig?: [ 
      {
        smsNotice?: boolean(name='SmsNotice'),
        noticeType?: string(name='NoticeType'),
        emailNotice?: boolean(name='EmailNotice'),
      }
    ](name='AlertConfig')
    }(name='AlertConfig'),
    publicUserDomainName?: string(name='PublicUserDomainName'),
    pubicZoneName?: string(name='PubicZoneName'),
  }(name='Config'),
  createTime?: string(name='CreateTime'),
  smsQuota?: int32(name='SmsQuota'),
  versionCode?: string(name='VersionCode'),
  paymentType?: string(name='PaymentType'),
  expireTime?: string(name='ExpireTime'),
  createTimestamp?: long(name='CreateTimestamp'),
  usedQuota?: {
    emailUsedCount?: int32(name='EmailUsedCount'),
    taskUsedCount?: int32(name='TaskUsedCount'),
    smsUsedCount?: int32(name='SmsUsedCount'),
  }(name='UsedQuota'),
}

model DescribeDnsGtmInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstanceResponseBody(name='body'),
}

async function describeDnsGtmInstanceWithOptions(request: DescribeDnsGtmInstanceRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstance', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstance(request: DescribeDnsGtmInstanceRequest): DescribeDnsGtmInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstanceWithOptions(request, runtime);
}

model DescribeDnsGtmInstanceAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
}

model DescribeDnsGtmInstanceAddressPoolResponseBody = {
  addrs?: {
    addr?: [ 
    {
      updateTimestamp?: long(name='UpdateTimestamp'),
      attributeInfo?: string(name='AttributeInfo'),
      updateTime?: string(name='UpdateTime'),
      alertStatus?: string(name='AlertStatus'),
      remark?: string(name='Remark'),
      lbaWeight?: int32(name='LbaWeight'),
      addr?: string(name='Addr'),
      createTime?: string(name='CreateTime'),
      mode?: string(name='Mode'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Addr')
  }(name='Addrs'),
  requestId?: string(name='RequestId'),
  lbaStrategy?: string(name='LbaStrategy'),
  createTime?: string(name='CreateTime'),
  addrCount?: int32(name='AddrCount'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  addrPoolId?: string(name='AddrPoolId'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  monitorConfigId?: string(name='MonitorConfigId'),
  monitorStatus?: string(name='MonitorStatus'),
  createTimestamp?: long(name='CreateTimestamp'),
}

model DescribeDnsGtmInstanceAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstanceAddressPoolResponseBody(name='body'),
}

async function describeDnsGtmInstanceAddressPoolWithOptions(request: DescribeDnsGtmInstanceAddressPoolRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstanceAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstanceAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstanceAddressPool(request: DescribeDnsGtmInstanceAddressPoolRequest): DescribeDnsGtmInstanceAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstanceAddressPoolWithOptions(request, runtime);
}

model DescribeDnsGtmInstanceAddressPoolsRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDnsGtmInstanceAddressPoolsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  addrPools?: {
    addrPool?: [ 
    {
      type?: string(name='Type'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      monitorStatus?: string(name='MonitorStatus'),
      updateTime?: string(name='UpdateTime'),
      createTime?: string(name='CreateTime'),
      addrPoolId?: string(name='AddrPoolId'),
      lbaStrategy?: string(name='LbaStrategy'),
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      monitorConfigId?: string(name='MonitorConfigId'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='AddrPool')
  }(name='AddrPools'),
}

model DescribeDnsGtmInstanceAddressPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstanceAddressPoolsResponseBody(name='body'),
}

async function describeDnsGtmInstanceAddressPoolsWithOptions(request: DescribeDnsGtmInstanceAddressPoolsRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstanceAddressPoolsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstanceAddressPools', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstanceAddressPools(request: DescribeDnsGtmInstanceAddressPoolsRequest): DescribeDnsGtmInstanceAddressPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstanceAddressPoolsWithOptions(request, runtime);
}

model DescribeDnsGtmInstancesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDnsGtmInstancesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  gtmInstances?: [ 
    {
      paymentType?: string(name='PaymentType'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      smsQuota?: int32(name='SmsQuota'),
      instanceId?: string(name='InstanceId'),
      config?: {
        ttl?: int32(name='Ttl'),
        alertGroup?: string(name='AlertGroup'),
        publicZoneName?: string(name='PublicZoneName'),
        cnameType?: string(name='CnameType'),
        strategyMode?: string(name='StrategyMode'),
        instanceName?: string(name='InstanceName'),
        publicCnameMode?: string(name='PublicCnameMode'),
        alertConfig?: [ 
          {
            smsNotice?: string(name='SmsNotice'),
            noticeType?: string(name='NoticeType'),
            emailNotice?: string(name='EmailNotice'),
          }
        ](name='AlertConfig'),
        publicUserDomainName?: string(name='PublicUserDomainName'),
      }(name='Config'),
      expireTimestamp?: long(name='ExpireTimestamp'),
      resourceGroupId?: string(name='ResourceGroupId'),
      versionCode?: string(name='VersionCode'),
      usedQuota?: {
        emailUsedCount?: int32(name='EmailUsedCount'),
        taskUsedCount?: int32(name='TaskUsedCount'),
        smsUsedCount?: int32(name='SmsUsedCount'),
      }(name='UsedQuota'),
      taskQuota?: int32(name='TaskQuota'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='GtmInstances'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeDnsGtmInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstancesResponseBody(name='body'),
}

async function describeDnsGtmInstancesWithOptions(request: DescribeDnsGtmInstancesRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstances', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstances(request: DescribeDnsGtmInstancesRequest): DescribeDnsGtmInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstancesWithOptions(request, runtime);
}

model DescribeDnsGtmInstanceStatusRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDnsGtmInstanceStatusResponseBody = {
  strategyNotAvailableNum?: int32(name='StrategyNotAvailableNum'),
  addrAvailableNum?: int32(name='AddrAvailableNum'),
  requestId?: string(name='RequestId'),
  switchToFailoverStrategyNum?: int32(name='SwitchToFailoverStrategyNum'),
  addrNotAvailableNum?: int32(name='AddrNotAvailableNum'),
  addrPoolGroupNotAvailableNum?: int32(name='AddrPoolGroupNotAvailableNum'),
}

model DescribeDnsGtmInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstanceStatusResponseBody(name='body'),
}

async function describeDnsGtmInstanceStatusWithOptions(request: DescribeDnsGtmInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstanceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstanceStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstanceStatus(request: DescribeDnsGtmInstanceStatusRequest): DescribeDnsGtmInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstanceStatusWithOptions(request, runtime);
}

model DescribeDnsGtmInstanceSystemCnameRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDnsGtmInstanceSystemCnameResponseBody = {
  systemCname?: string(name='SystemCname'),
  requestId?: string(name='RequestId'),
}

model DescribeDnsGtmInstanceSystemCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmInstanceSystemCnameResponseBody(name='body'),
}

async function describeDnsGtmInstanceSystemCnameWithOptions(request: DescribeDnsGtmInstanceSystemCnameRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmInstanceSystemCnameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmInstanceSystemCname', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmInstanceSystemCname(request: DescribeDnsGtmInstanceSystemCnameRequest): DescribeDnsGtmInstanceSystemCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmInstanceSystemCnameWithOptions(request, runtime);
}

model DescribeDnsGtmLogsRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTimestamp?: long(name='StartTimestamp'),
  endTimestamp?: long(name='EndTimestamp'),
}

model DescribeDnsGtmLogsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  logs?: {
    log?: [ 
    {
      operTimestamp?: long(name='OperTimestamp'),
      entityId?: string(name='EntityId'),
      entityType?: string(name='EntityType'),
      operTime?: string(name='OperTime'),
      operAction?: string(name='OperAction'),
      content?: string(name='Content'),
      entityName?: string(name='EntityName'),
      id?: long(name='Id'),
    }
  ](name='Log')
  }(name='Logs'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeDnsGtmLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmLogsResponseBody(name='body'),
}

async function describeDnsGtmLogsWithOptions(request: DescribeDnsGtmLogsRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmLogs', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmLogs(request: DescribeDnsGtmLogsRequest): DescribeDnsGtmLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmLogsWithOptions(request, runtime);
}

model DescribeDnsGtmMonitorAvailableConfigRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
}

model DescribeDnsGtmMonitorAvailableConfigResponseBody = {
  ipv4IspCityNodes?: {
    ipv4IspCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      groupName?: string(name='GroupName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      ispName?: string(name='IspName'),
      groupType?: string(name='GroupType'),
      defaultSelected?: boolean(name='DefaultSelected'),
    }
  ](name='Ipv4IspCityNode')
  }(name='Ipv4IspCityNodes'),
  domainIpv4IspCityNodes?: {
    domainIpv4IspCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      groupName?: string(name='GroupName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      ispName?: string(name='IspName'),
      groupType?: string(name='GroupType'),
      defaultSelected?: boolean(name='DefaultSelected'),
    }
  ](name='DomainIpv4IspCityNode')
  }(name='DomainIpv4IspCityNodes'),
  requestId?: string(name='RequestId'),
  domainIpv6IspCityNodes?: {
    domainIpv6IspCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      groupName?: string(name='GroupName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      ispName?: string(name='IspName'),
      groupType?: string(name='GroupType'),
      defaultSelected?: boolean(name='DefaultSelected'),
    }
  ](name='DomainIpv6IspCityNode')
  }(name='DomainIpv6IspCityNodes'),
  ipv6IspCityNodes?: {
    ipv6IspCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      groupName?: string(name='GroupName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      ispName?: string(name='IspName'),
      groupType?: string(name='GroupType'),
      defaultSelected?: boolean(name='DefaultSelected'),
    }
  ](name='Ipv6IspCityNode')
  }(name='Ipv6IspCityNodes'),
}

model DescribeDnsGtmMonitorAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmMonitorAvailableConfigResponseBody(name='body'),
}

async function describeDnsGtmMonitorAvailableConfigWithOptions(request: DescribeDnsGtmMonitorAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmMonitorAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmMonitorAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmMonitorAvailableConfig(request: DescribeDnsGtmMonitorAvailableConfigRequest): DescribeDnsGtmMonitorAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmMonitorAvailableConfigWithOptions(request, runtime);
}

model DescribeDnsGtmMonitorConfigRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model DescribeDnsGtmMonitorConfigResponseBody = {
  requestId?: string(name='RequestId'),
  timeout?: int32(name='Timeout'),
  protocolType?: string(name='ProtocolType'),
  ispCityNodes?: {
    ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      countryName?: string(name='CountryName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      countryCode?: string(name='CountryCode'),
      ispName?: string(name='IspName'),
    }
  ](name='IspCityNode')
  }(name='IspCityNodes'),
  createTime?: string(name='CreateTime'),
  updateTime?: string(name='UpdateTime'),
  evaluationCount?: int32(name='EvaluationCount'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  monitorConfigId?: string(name='MonitorConfigId'),
  createTimestamp?: long(name='CreateTimestamp'),
  interval?: int32(name='Interval'),
}

model DescribeDnsGtmMonitorConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsGtmMonitorConfigResponseBody(name='body'),
}

async function describeDnsGtmMonitorConfigWithOptions(request: DescribeDnsGtmMonitorConfigRequest, runtime: Util.RuntimeOptions): DescribeDnsGtmMonitorConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsGtmMonitorConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsGtmMonitorConfig(request: DescribeDnsGtmMonitorConfigRequest): DescribeDnsGtmMonitorConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsGtmMonitorConfigWithOptions(request, runtime);
}

model DescribeDnsProductInstanceRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDnsProductInstanceResponseBody = {
  monitorNodeCount?: long(name='MonitorNodeCount'),
  inBlackHole?: boolean(name='InBlackHole'),
  bindDomainCount?: long(name='BindDomainCount'),
  regionLines?: boolean(name='RegionLines'),
  bindCount?: long(name='BindCount'),
  endTime?: string(name='EndTime'),
  startTimestamp?: long(name='StartTimestamp'),
  ISPLines?: string(name='ISPLines'),
  endTimestamp?: long(name='EndTimestamp'),
  dnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='DnsServers'),
  DDosDefendQuery?: long(name='DDosDefendQuery'),
  dnsSecurity?: string(name='DnsSecurity'),
  domainType?: string(name='DomainType'),
  URLForwardCount?: long(name='URLForwardCount'),
  TTLMinValue?: long(name='TTLMinValue'),
  paymentType?: string(name='PaymentType'),
  versionName?: string(name='VersionName'),
  overseaLine?: string(name='OverseaLine'),
  ISPRegionLines?: string(name='ISPRegionLines'),
  gslb?: boolean(name='Gslb'),
  bindUsedCount?: long(name='BindUsedCount'),
  requestId?: string(name='RequestId'),
  dnsSLBCount?: long(name='DnsSLBCount'),
  instanceId?: string(name='InstanceId'),
  monitorTaskCount?: long(name='MonitorTaskCount'),
  startTime?: string(name='StartTime'),
  DDosDefendFlow?: long(name='DDosDefendFlow'),
  monitorFrequency?: long(name='MonitorFrequency'),
  searchEngineLines?: string(name='SearchEngineLines'),
  bindDomainUsedCount?: long(name='BindDomainUsedCount'),
  versionCode?: string(name='VersionCode'),
  overseaDDosDefendFlow?: long(name='OverseaDDosDefendFlow'),
  inClean?: boolean(name='InClean'),
  subDomainLevel?: long(name='SubDomainLevel'),
  domain?: string(name='Domain'),
}

model DescribeDnsProductInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsProductInstanceResponseBody(name='body'),
}

async function describeDnsProductInstanceWithOptions(request: DescribeDnsProductInstanceRequest, runtime: Util.RuntimeOptions): DescribeDnsProductInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsProductInstance', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsProductInstance(request: DescribeDnsProductInstanceRequest): DescribeDnsProductInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsProductInstanceWithOptions(request, runtime);
}

model DescribeDnsProductInstancesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  versionCode?: string(name='VersionCode'),
  domainType?: string(name='DomainType'),
}

model DescribeDnsProductInstancesResponseBody = {
  totalCount?: long(name='TotalCount'),
  domainType?: string(name='DomainType'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  dnsProducts?: {
    dnsProduct?: [ 
    {
      overseaLine?: string(name='OverseaLine'),
      paymentType?: string(name='PaymentType'),
      monitorNodeCount?: long(name='MonitorNodeCount'),
      inBlackHole?: boolean(name='InBlackHole'),
      bindDomainUsedCount?: long(name='BindDomainUsedCount'),
      ISPRegionLines?: string(name='ISPRegionLines'),
      TTLMinValue?: long(name='TTLMinValue'),
      ISPLines?: string(name='ISPLines'),
      searchEngineLines?: string(name='SearchEngineLines'),
      endTimestamp?: long(name='EndTimestamp'),
      versionName?: string(name='VersionName'),
      versionCode?: string(name='VersionCode'),
      monitorTaskCount?: long(name='MonitorTaskCount'),
      bindUsedCount?: long(name='BindUsedCount'),
      domain?: string(name='Domain'),
      monitorFrequency?: long(name='MonitorFrequency'),
      inClean?: boolean(name='InClean'),
      URLForwardCount?: long(name='URLForwardCount'),
      startTimestamp?: long(name='StartTimestamp'),
      DDosDefendQuery?: long(name='DDosDefendQuery'),
      instanceId?: string(name='InstanceId'),
      DDosDefendFlow?: long(name='DDosDefendFlow'),
      bindCount?: long(name='BindCount'),
      subDomainLevel?: long(name='SubDomainLevel'),
      bindDomainCount?: long(name='BindDomainCount'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      overseaDDosDefendFlow?: long(name='OverseaDDosDefendFlow'),
      regionLines?: boolean(name='RegionLines'),
      gslb?: boolean(name='Gslb'),
      dnsSecurity?: string(name='DnsSecurity'),
      dnsSLBCount?: long(name='DnsSLBCount'),
    }
  ](name='DnsProduct')
  }(name='DnsProducts'),
}

model DescribeDnsProductInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDnsProductInstancesResponseBody(name='body'),
}

async function describeDnsProductInstancesWithOptions(request: DescribeDnsProductInstancesRequest, runtime: Util.RuntimeOptions): DescribeDnsProductInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDnsProductInstances', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDnsProductInstances(request: DescribeDnsProductInstancesRequest): DescribeDnsProductInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsProductInstancesWithOptions(request, runtime);
}

model DescribeDNSSLBSubDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  rr?: string(name='Rr'),
}

model DescribeDNSSLBSubDomainsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  slbSubDomains?: {
    slbSubDomain?: [ 
    {
      type?: string(name='Type'),
      recordCount?: long(name='RecordCount'),
      open?: boolean(name='Open'),
      subDomain?: string(name='SubDomain'),
      lineAlgorithms?: {
        lineAlgorithm?: [ 
        {
          line?: string(name='Line'),
          open?: boolean(name='Open'),
        }
      ](name='LineAlgorithm')
      }(name='LineAlgorithms'),
    }
  ](name='SlbSubDomain')
  }(name='SlbSubDomains'),
}

model DescribeDNSSLBSubDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDNSSLBSubDomainsResponseBody(name='body'),
}

async function describeDNSSLBSubDomainsWithOptions(request: DescribeDNSSLBSubDomainsRequest, runtime: Util.RuntimeOptions): DescribeDNSSLBSubDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDNSSLBSubDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDNSSLBSubDomains(request: DescribeDNSSLBSubDomainsRequest): DescribeDNSSLBSubDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDNSSLBSubDomainsWithOptions(request, runtime);
}

model DescribeDohAccountStatisticsRequest {
  lang?: string(name='Lang'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeDohAccountStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: [ 
    {
      v6HttpCount?: long(name='V6HttpCount'),
      v4HttpsCount?: long(name='V4HttpsCount'),
      timestamp?: long(name='Timestamp'),
      totalCount?: long(name='TotalCount'),
      v4HttpCount?: long(name='V4HttpCount'),
      v6HttpsCount?: long(name='V6HttpsCount'),
    }
  ](name='Statistics'),
}

model DescribeDohAccountStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohAccountStatisticsResponseBody(name='body'),
}

async function describeDohAccountStatisticsWithOptions(request: DescribeDohAccountStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDohAccountStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohAccountStatistics', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohAccountStatistics(request: DescribeDohAccountStatisticsRequest): DescribeDohAccountStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohAccountStatisticsWithOptions(request, runtime);
}

model DescribeDohDomainStatisticsRequest {
  lang?: string(name='Lang'),
  domainName?: string(name='DomainName'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeDohDomainStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: [ 
    {
      v6HttpCount?: long(name='V6HttpCount'),
      v4HttpsCount?: long(name='V4HttpsCount'),
      timestamp?: long(name='Timestamp'),
      totalCount?: long(name='TotalCount'),
      v4HttpCount?: long(name='V4HttpCount'),
      v6HttpsCount?: long(name='V6HttpsCount'),
    }
  ](name='Statistics'),
}

model DescribeDohDomainStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohDomainStatisticsResponseBody(name='body'),
}

async function describeDohDomainStatisticsWithOptions(request: DescribeDohDomainStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDohDomainStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohDomainStatistics', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohDomainStatistics(request: DescribeDohDomainStatisticsRequest): DescribeDohDomainStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohDomainStatisticsWithOptions(request, runtime);
}

model DescribeDohDomainStatisticsSummaryRequest {
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  domainName?: string(name='DomainName'),
}

model DescribeDohDomainStatisticsSummaryResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  statistics?: [ 
    {
      v6HttpCount?: long(name='V6HttpCount'),
      v4HttpsCount?: long(name='V4HttpsCount'),
      ipCount?: long(name='IpCount'),
      totalCount?: long(name='TotalCount'),
      httpCount?: long(name='HttpCount'),
      domainName?: string(name='DomainName'),
      httpsCount?: long(name='HttpsCount'),
      v4HttpCount?: long(name='V4HttpCount'),
      v6HttpsCount?: long(name='V6HttpsCount'),
    }
  ](name='Statistics'),
}

model DescribeDohDomainStatisticsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohDomainStatisticsSummaryResponseBody(name='body'),
}

async function describeDohDomainStatisticsSummaryWithOptions(request: DescribeDohDomainStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeDohDomainStatisticsSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohDomainStatisticsSummary', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohDomainStatisticsSummary(request: DescribeDohDomainStatisticsSummaryRequest): DescribeDohDomainStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohDomainStatisticsSummaryWithOptions(request, runtime);
}

model DescribeDohSubDomainStatisticsRequest {
  lang?: string(name='Lang'),
  subDomain?: string(name='SubDomain'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeDohSubDomainStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: [ 
    {
      v6HttpCount?: long(name='V6HttpCount'),
      v4HttpsCount?: long(name='V4HttpsCount'),
      timestamp?: long(name='Timestamp'),
      totalCount?: long(name='TotalCount'),
      v4HttpCount?: long(name='V4HttpCount'),
      v6HttpsCount?: long(name='V6HttpsCount'),
    }
  ](name='Statistics'),
}

model DescribeDohSubDomainStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohSubDomainStatisticsResponseBody(name='body'),
}

async function describeDohSubDomainStatisticsWithOptions(request: DescribeDohSubDomainStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDohSubDomainStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohSubDomainStatistics', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohSubDomainStatistics(request: DescribeDohSubDomainStatisticsRequest): DescribeDohSubDomainStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohSubDomainStatisticsWithOptions(request, runtime);
}

model DescribeDohSubDomainStatisticsSummaryRequest {
  lang?: string(name='Lang'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  subDomain?: string(name='SubDomain'),
  domainName?: string(name='DomainName'),
}

model DescribeDohSubDomainStatisticsSummaryResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  statistics?: [ 
    {
      v6HttpCount?: long(name='V6HttpCount'),
      v4HttpsCount?: long(name='V4HttpsCount'),
      ipCount?: long(name='IpCount'),
      subDomain?: string(name='SubDomain'),
      totalCount?: long(name='TotalCount'),
      httpCount?: long(name='HttpCount'),
      httpsCount?: long(name='HttpsCount'),
      v4HttpCount?: long(name='V4HttpCount'),
      v6HttpsCount?: long(name='V6HttpsCount'),
    }
  ](name='Statistics'),
}

model DescribeDohSubDomainStatisticsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohSubDomainStatisticsSummaryResponseBody(name='body'),
}

async function describeDohSubDomainStatisticsSummaryWithOptions(request: DescribeDohSubDomainStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeDohSubDomainStatisticsSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohSubDomainStatisticsSummary', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohSubDomainStatisticsSummary(request: DescribeDohSubDomainStatisticsSummaryRequest): DescribeDohSubDomainStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohSubDomainStatisticsSummaryWithOptions(request, runtime);
}

model DescribeDohUserInfoRequest {
  lang?: string(name='Lang'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeDohUserInfoResponseBody = {
  requestId?: string(name='RequestId'),
  subDomainCount?: int32(name='SubDomainCount'),
  pdnsId?: long(name='PdnsId'),
  domainCount?: int32(name='DomainCount'),
}

model DescribeDohUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDohUserInfoResponseBody(name='body'),
}

async function describeDohUserInfoWithOptions(request: DescribeDohUserInfoRequest, runtime: Util.RuntimeOptions): DescribeDohUserInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDohUserInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDohUserInfo(request: DescribeDohUserInfoRequest): DescribeDohUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDohUserInfoWithOptions(request, runtime);
}

model DescribeDomainDnssecInfoRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model DescribeDomainDnssecInfoResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  digest?: string(name='Digest'),
  domainName?: string(name='DomainName'),
  publicKey?: string(name='PublicKey'),
  digestType?: string(name='DigestType'),
  dsRecord?: string(name='DsRecord'),
  keyTag?: string(name='KeyTag'),
  flags?: string(name='Flags'),
  algorithm?: string(name='Algorithm'),
}

model DescribeDomainDnssecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainDnssecInfoResponseBody(name='body'),
}

async function describeDomainDnssecInfoWithOptions(request: DescribeDomainDnssecInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainDnssecInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainDnssecInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainDnssecInfo(request: DescribeDomainDnssecInfoRequest): DescribeDomainDnssecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDnssecInfoWithOptions(request, runtime);
}

model DescribeDomainGroupsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  keyWord?: string(name='KeyWord'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDomainGroupsResponseBody = {
  domainGroups?: {
    domainGroup?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      domainCount?: long(name='DomainCount'),
    }
  ](name='DomainGroup')
  }(name='DomainGroups'),
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeDomainGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainGroupsResponseBody(name='body'),
}

async function describeDomainGroupsWithOptions(request: DescribeDomainGroupsRequest, runtime: Util.RuntimeOptions): DescribeDomainGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainGroups', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainGroups(request: DescribeDomainGroupsRequest): DescribeDomainGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainGroupsWithOptions(request, runtime);
}

model DescribeDomainInfoRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes'),
}

model DescribeDomainInfoResponseBody = {
  recordLineTreeJson?: string(name='RecordLineTreeJson'),
  groupName?: string(name='GroupName'),
  inBlackHole?: boolean(name='InBlackHole'),
  regionLines?: boolean(name='RegionLines'),
  slaveDns?: boolean(name='SlaveDns'),
  aliDomain?: boolean(name='AliDomain'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: string(name='InstanceId'),
  domainName?: string(name='DomainName'),
  createTime?: string(name='CreateTime'),
  punyCode?: string(name='PunyCode'),
  dnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='DnsServers'),
  remark?: string(name='Remark'),
  groupId?: string(name='GroupId'),
  versionCode?: string(name='VersionCode'),
  recordLines?: {
    recordLine?: [ 
    {
      fatherCode?: string(name='FatherCode'),
      lineDisplayName?: string(name='LineDisplayName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
    }
  ](name='RecordLine')
  }(name='RecordLines'),
  domainId?: string(name='DomainId'),
  availableTtls?: {
    availableTtl?: [ string ](name='AvailableTtl')
  }(name='AvailableTtls'),
  minTtl?: long(name='MinTtl'),
  inClean?: boolean(name='InClean'),
  versionName?: string(name='VersionName'),
  lineType?: string(name='LineType'),
}

model DescribeDomainInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainInfoResponseBody(name='body'),
}

async function describeDomainInfoWithOptions(request: DescribeDomainInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainInfo(request: DescribeDomainInfoRequest): DescribeDomainInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainInfoWithOptions(request, runtime);
}

model DescribeDomainLogsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  keyWord?: string(name='KeyWord'),
  groupId?: string(name='GroupId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='endDate'),
  type?: string(name='Type'),
}

model DescribeDomainLogsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  domainLogs?: {
    domainLog?: [ 
    {
      action?: string(name='Action'),
      actionTimestamp?: long(name='ActionTimestamp'),
      zoneId?: string(name='ZoneId'),
      clientIp?: string(name='ClientIp'),
      message?: string(name='Message'),
      actionTime?: string(name='ActionTime'),
      domainName?: string(name='DomainName'),
    }
  ](name='DomainLog')
  }(name='DomainLogs'),
}

model DescribeDomainLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainLogsResponseBody(name='body'),
}

async function describeDomainLogsWithOptions(request: DescribeDomainLogsRequest, runtime: Util.RuntimeOptions): DescribeDomainLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainLogs', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainLogs(request: DescribeDomainLogsRequest): DescribeDomainLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainLogsWithOptions(request, runtime);
}

model DescribeDomainNsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  domainType?: string(name='DomainType'),
}

model DescribeDomainNsResponseBody = {
  allAliDns?: boolean(name='AllAliDns'),
  requestId?: string(name='RequestId'),
  expectDnsServers?: {
    expectDnsServer?: [ string ](name='ExpectDnsServer')
  }(name='ExpectDnsServers'),
  dnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='DnsServers'),
  includeAliDns?: boolean(name='IncludeAliDns'),
}

model DescribeDomainNsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNsResponseBody(name='body'),
}

async function describeDomainNsWithOptions(request: DescribeDomainNsRequest, runtime: Util.RuntimeOptions): DescribeDomainNsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainNs', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainNs(request: DescribeDomainNsRequest): DescribeDomainNsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNsWithOptions(request, runtime);
}

model DescribeDomainRecordInfoRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
}

model DescribeDomainRecordInfoResponseBody = {
  status?: string(name='Status'),
  RR?: string(name='RR'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  priority?: long(name='Priority'),
  punyCode?: string(name='PunyCode'),
  TTL?: long(name='TTL'),
  groupId?: string(name='GroupId'),
  line?: string(name='Line'),
  locked?: boolean(name='Locked'),
  type?: string(name='Type'),
  domainId?: string(name='DomainId'),
  value?: string(name='Value'),
  recordId?: string(name='RecordId'),
}

model DescribeDomainRecordInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRecordInfoResponseBody(name='body'),
}

async function describeDomainRecordInfoWithOptions(request: DescribeDomainRecordInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainRecordInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRecordInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRecordInfo(request: DescribeDomainRecordInfoRequest): DescribeDomainRecordInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRecordInfoWithOptions(request, runtime);
}

model DescribeDomainRecordsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  RRKeyWord?: string(name='RRKeyWord'),
  typeKeyWord?: string(name='TypeKeyWord'),
  valueKeyWord?: string(name='ValueKeyWord'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  searchMode?: string(name='SearchMode'),
  groupId?: long(name='GroupId'),
  type?: string(name='Type'),
  line?: string(name='Line'),
  status?: string(name='Status'),
}

model DescribeDomainRecordsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  domainRecords?: {
    record?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      remark?: string(name='Remark'),
      TTL?: long(name='TTL'),
      recordId?: string(name='RecordId'),
      priority?: long(name='Priority'),
      RR?: string(name='RR'),
      domainName?: string(name='DomainName'),
      weight?: int32(name='Weight'),
      value?: string(name='Value'),
      line?: string(name='Line'),
      locked?: boolean(name='Locked'),
    }
  ](name='Record')
  }(name='DomainRecords'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeDomainRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainRecordsResponseBody(name='body'),
}

async function describeDomainRecordsWithOptions(request: DescribeDomainRecordsRequest, runtime: Util.RuntimeOptions): DescribeDomainRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainRecords', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainRecords(request: DescribeDomainRecordsRequest): DescribeDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRecordsWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  keyWord?: string(name='KeyWord'),
  groupId?: string(name='GroupId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  searchMode?: string(name='SearchMode'),
  resourceGroupId?: string(name='ResourceGroupId'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  starmark?: boolean(name='Starmark'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  tag?: [ 
    {
    }
  ](name='Tag'),
}

model DescribeDomainsResponseBody = {
  domains?: {
    domain?: [ 
    {
      remark?: string(name='Remark'),
      createTime?: string(name='CreateTime'),
      recordCount?: long(name='RecordCount'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceId?: string(name='InstanceId'),
      domainName?: string(name='DomainName'),
      domainId?: string(name='DomainId'),
      aliDomain?: boolean(name='AliDomain'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      instanceEndTime?: string(name='InstanceEndTime'),
      instanceExpired?: boolean(name='InstanceExpired'),
      versionName?: string(name='VersionName'),
      dnsServers?: {
        dnsServer?: [ string ](name='DnsServer')
      }(name='DnsServers'),
      versionCode?: string(name='VersionCode'),
      punyCode?: string(name='PunyCode'),
      registrantEmail?: string(name='RegistrantEmail'),
      createTimestamp?: long(name='CreateTimestamp'),
      starmark?: boolean(name='Starmark'),
    }
  ](name='Domain')
  }(name='Domains'),
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeDomainStatisticsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  domainType?: string(name='DomainType'),
}

model DescribeDomainStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    statistic?: [ 
    {
      timestamp?: long(name='Timestamp'),
      count?: long(name='Count'),
    }
  ](name='Statistic')
  }(name='Statistics'),
}

model DescribeDomainStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatisticsResponseBody(name='body'),
}

async function describeDomainStatisticsWithOptions(request: DescribeDomainStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDomainStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainStatistics', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainStatistics(request: DescribeDomainStatisticsRequest): DescribeDomainStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatisticsWithOptions(request, runtime);
}

model DescribeDomainStatisticsSummaryRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  searchMode?: string(name='SearchMode'),
  keyword?: string(name='Keyword'),
  threshold?: long(name='Threshold'),
}

model DescribeDomainStatisticsSummaryResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  statistics?: {
    statistic?: [ 
    {
      domainName?: string(name='DomainName'),
      count?: long(name='Count'),
      domainType?: string(name='DomainType'),
    }
  ](name='Statistic')
  }(name='Statistics'),
}

model DescribeDomainStatisticsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatisticsSummaryResponseBody(name='body'),
}

async function describeDomainStatisticsSummaryWithOptions(request: DescribeDomainStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeDomainStatisticsSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainStatisticsSummary', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainStatisticsSummary(request: DescribeDomainStatisticsSummaryRequest): DescribeDomainStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatisticsSummaryWithOptions(request, runtime);
}

model DescribeGtmAccessStrategiesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeGtmAccessStrategiesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  strategies?: {
    strategy?: [ 
    {
      accessMode?: string(name='AccessMode'),
      strategyName?: string(name='StrategyName'),
      defaultAddrPoolMonitorStatus?: string(name='DefaultAddrPoolMonitorStatus'),
      strategyMode?: string(name='StrategyMode'),
      createTime?: string(name='CreateTime'),
      defaultAddrPoolStatus?: string(name='DefaultAddrPoolStatus'),
      instanceId?: string(name='InstanceId'),
      lines?: {
        line?: [ 
        {
          groupName?: string(name='GroupName'),
          lineCode?: string(name='LineCode'),
          lineName?: string(name='LineName'),
          groupCode?: string(name='GroupCode'),
        }
      ](name='Line')
      }(name='Lines'),
      failoverAddrPoolId?: string(name='FailoverAddrPoolId'),
      defaultAddrPoolId?: string(name='DefaultAddrPoolId'),
      strategyId?: string(name='StrategyId'),
      failoverAddrPoolStatus?: string(name='FailoverAddrPoolStatus'),
      accessStatus?: string(name='AccessStatus'),
      failoverAddrPoolMonitorStatus?: string(name='FailoverAddrPoolMonitorStatus'),
      defaultAddrPoolName?: string(name='DefaultAddrPoolName'),
      failoverAddrPoolName?: string(name='FailoverAddrPoolName'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Strategy')
  }(name='Strategies'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeGtmAccessStrategiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmAccessStrategiesResponseBody(name='body'),
}

async function describeGtmAccessStrategiesWithOptions(request: DescribeGtmAccessStrategiesRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategiesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmAccessStrategies', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmAccessStrategies(request: DescribeGtmAccessStrategiesRequest): DescribeGtmAccessStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategiesWithOptions(request, runtime);
}

model DescribeGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
}

model DescribeGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  strategyId?: string(name='StrategyId'),
  defaultAddrPoolStatus?: string(name='DefaultAddrPoolStatus'),
  failoverAddrPoolId?: string(name='FailoverAddrPoolId'),
  accessStatus?: string(name='AccessStatus'),
  defaultAddrPoolMonitorStatus?: string(name='DefaultAddrPoolMonitorStatus'),
  defaultAddrPoolName?: string(name='DefaultAddrPoolName'),
  defultAddrPoolId?: string(name='DefultAddrPoolId'),
  strategyName?: string(name='StrategyName'),
  failoverAddrPoolStatus?: string(name='FailoverAddrPoolStatus'),
  accessMode?: string(name='AccessMode'),
  strategyMode?: string(name='StrategyMode'),
  failoverAddrPoolMonitorStatus?: string(name='FailoverAddrPoolMonitorStatus'),
  failoverAddrPoolName?: string(name='FailoverAddrPoolName'),
  lines?: {
    line?: [ 
    {
      groupName?: string(name='GroupName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
      groupCode?: string(name='GroupCode'),
    }
  ](name='Line')
  }(name='Lines'),
}

model DescribeGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmAccessStrategyResponseBody(name='body'),
}

async function describeGtmAccessStrategyWithOptions(request: DescribeGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmAccessStrategy(request: DescribeGtmAccessStrategyRequest): DescribeGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategyWithOptions(request, runtime);
}

model DescribeGtmAccessStrategyAvailableConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeGtmAccessStrategyAvailableConfigResponseBody = {
  requestId?: string(name='RequestId'),
  addrPools?: {
    addrPool?: [ 
    {
      addrPoolId?: string(name='AddrPoolId'),
      addrPoolName?: string(name='AddrPoolName'),
    }
  ](name='AddrPool')
  }(name='AddrPools'),
  lines?: {
    line?: [ 
    {
      status?: string(name='Status'),
      fatherCode?: string(name='FatherCode'),
      lineCode?: string(name='LineCode'),
      groupName?: string(name='GroupName'),
      lineName?: string(name='LineName'),
      groupCode?: string(name='GroupCode'),
    }
  ](name='Line')
  }(name='Lines'),
}

model DescribeGtmAccessStrategyAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmAccessStrategyAvailableConfigResponseBody(name='body'),
}

async function describeGtmAccessStrategyAvailableConfigWithOptions(request: DescribeGtmAccessStrategyAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategyAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmAccessStrategyAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmAccessStrategyAvailableConfig(request: DescribeGtmAccessStrategyAvailableConfigRequest): DescribeGtmAccessStrategyAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategyAvailableConfigWithOptions(request, runtime);
}

model DescribeGtmAvailableAlertGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeGtmAvailableAlertGroupResponseBody = {
  requestId?: string(name='RequestId'),
  availableAlertGroup?: string(name='AvailableAlertGroup'),
}

model DescribeGtmAvailableAlertGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmAvailableAlertGroupResponseBody(name='body'),
}

async function describeGtmAvailableAlertGroupWithOptions(request: DescribeGtmAvailableAlertGroupRequest, runtime: Util.RuntimeOptions): DescribeGtmAvailableAlertGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmAvailableAlertGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmAvailableAlertGroup(request: DescribeGtmAvailableAlertGroupRequest): DescribeGtmAvailableAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAvailableAlertGroupWithOptions(request, runtime);
}

model DescribeGtmInstanceRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes'),
}

model DescribeGtmInstanceResponseBody = {
  expireTimestamp?: long(name='ExpireTimestamp'),
  userDomainName?: string(name='UserDomainName'),
  requestId?: string(name='RequestId'),
  lbaStrategy?: string(name='LbaStrategy'),
  instanceId?: string(name='InstanceId'),
  createTime?: string(name='CreateTime'),
  cnameMode?: string(name='CnameMode'),
  ttl?: int32(name='Ttl'),
  cname?: string(name='Cname'),
  instanceName?: string(name='InstanceName'),
  versionCode?: string(name='VersionCode'),
  alertGroup?: string(name='AlertGroup'),
  addressPoolNum?: int32(name='AddressPoolNum'),
  accessStrategyNum?: int32(name='AccessStrategyNum'),
  expireTime?: string(name='ExpireTime'),
  createTimestamp?: long(name='CreateTimestamp'),
}

model DescribeGtmInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstanceResponseBody(name='body'),
}

async function describeGtmInstanceWithOptions(request: DescribeGtmInstanceRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstance', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstance(request: DescribeGtmInstanceRequest): DescribeGtmInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceWithOptions(request, runtime);
}

model DescribeGtmInstanceAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
}

model DescribeGtmInstanceAddressPoolResponseBody = {
  status?: string(name='Status'),
  addrs?: {
    addr?: [ 
    {
      value?: string(name='Value'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      updateTime?: string(name='UpdateTime'),
      alertStatus?: string(name='AlertStatus'),
      lbaWeight?: int32(name='LbaWeight'),
      createTime?: string(name='CreateTime'),
      addrId?: long(name='AddrId'),
      mode?: string(name='Mode'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='Addr')
  }(name='Addrs'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  addrCount?: int32(name='AddrCount'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  addrPoolId?: string(name='AddrPoolId'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  monitorConfigId?: string(name='MonitorConfigId'),
  minAvailableAddrNum?: int32(name='MinAvailableAddrNum'),
  monitorStatus?: string(name='MonitorStatus'),
  createTimestamp?: long(name='CreateTimestamp'),
}

model DescribeGtmInstanceAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstanceAddressPoolResponseBody(name='body'),
}

async function describeGtmInstanceAddressPoolWithOptions(request: DescribeGtmInstanceAddressPoolRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstanceAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstanceAddressPool(request: DescribeGtmInstanceAddressPoolRequest): DescribeGtmInstanceAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceAddressPoolWithOptions(request, runtime);
}

model DescribeGtmInstanceAddressPoolsRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeGtmInstanceAddressPoolsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  addrPools?: {
    addrPool?: [ 
    {
      type?: string(name='Type'),
      status?: string(name='Status'),
      updateTime?: string(name='UpdateTime'),
      createTime?: string(name='CreateTime'),
      monitorConfigId?: string(name='MonitorConfigId'),
      minAvailableAddrNum?: int32(name='MinAvailableAddrNum'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      monitorStatus?: string(name='MonitorStatus'),
      addrPoolId?: string(name='AddrPoolId'),
      name?: string(name='Name'),
      addrCount?: int32(name='AddrCount'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='AddrPool')
  }(name='AddrPools'),
}

model DescribeGtmInstanceAddressPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstanceAddressPoolsResponseBody(name='body'),
}

async function describeGtmInstanceAddressPoolsWithOptions(request: DescribeGtmInstanceAddressPoolsRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceAddressPoolsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstanceAddressPools', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstanceAddressPools(request: DescribeGtmInstanceAddressPoolsRequest): DescribeGtmInstanceAddressPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceAddressPoolsWithOptions(request, runtime);
}

model DescribeGtmInstancesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
  resourceGroupId?: string(name='ResourceGroupId'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes'),
}

model DescribeGtmInstancesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  gtmInstances?: {
    gtmInstance?: [ 
    {
      expireTime?: string(name='ExpireTime'),
      accessStrategyNum?: int32(name='AccessStrategyNum'),
      createTime?: string(name='CreateTime'),
      cnameMode?: string(name='CnameMode'),
      instanceId?: string(name='InstanceId'),
      expireTimestamp?: long(name='ExpireTimestamp'),
      ttl?: int32(name='Ttl'),
      alertGroup?: string(name='AlertGroup'),
      addressPoolNum?: int32(name='AddressPoolNum'),
      instanceName?: string(name='InstanceName'),
      lbaStrategy?: string(name='LbaStrategy'),
      cname?: string(name='Cname'),
      versionCode?: string(name='VersionCode'),
      userDomainName?: string(name='UserDomainName'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='GtmInstance')
  }(name='GtmInstances'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeGtmInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstancesResponseBody(name='body'),
}

async function describeGtmInstancesWithOptions(request: DescribeGtmInstancesRequest, runtime: Util.RuntimeOptions): DescribeGtmInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstances', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstances(request: DescribeGtmInstancesRequest): DescribeGtmInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstancesWithOptions(request, runtime);
}

model DescribeGtmInstanceStatusRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
}

model DescribeGtmInstanceStatusResponseBody = {
  status?: string(name='Status'),
  strategyNotAvailableNum?: int32(name='StrategyNotAvailableNum'),
  requestId?: string(name='RequestId'),
  switchToFailoverStrategyNum?: int32(name='SwitchToFailoverStrategyNum'),
  statusReason?: string(name='StatusReason'),
  addrNotAvailableNum?: int32(name='AddrNotAvailableNum'),
  addrPoolNotAvailableNum?: int32(name='AddrPoolNotAvailableNum'),
}

model DescribeGtmInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstanceStatusResponseBody(name='body'),
}

async function describeGtmInstanceStatusWithOptions(request: DescribeGtmInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstanceStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstanceStatus(request: DescribeGtmInstanceStatusRequest): DescribeGtmInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceStatusWithOptions(request, runtime);
}

model DescribeGtmInstanceSystemCnameRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model DescribeGtmInstanceSystemCnameResponseBody = {
  systemCname?: string(name='SystemCname'),
  requestId?: string(name='RequestId'),
}

model DescribeGtmInstanceSystemCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmInstanceSystemCnameResponseBody(name='body'),
}

async function describeGtmInstanceSystemCnameWithOptions(request: DescribeGtmInstanceSystemCnameRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceSystemCnameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmInstanceSystemCname', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmInstanceSystemCname(request: DescribeGtmInstanceSystemCnameRequest): DescribeGtmInstanceSystemCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceSystemCnameWithOptions(request, runtime);
}

model DescribeGtmLogsRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTimestamp?: long(name='StartTimestamp'),
  endTimestamp?: long(name='EndTimestamp'),
}

model DescribeGtmLogsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  logs?: {
    log?: [ 
    {
      operTimestamp?: long(name='OperTimestamp'),
      entityId?: string(name='EntityId'),
      entityType?: string(name='EntityType'),
      operTime?: string(name='OperTime'),
      operIp?: string(name='OperIp'),
      operAction?: string(name='OperAction'),
      content?: string(name='Content'),
      entityName?: string(name='EntityName'),
      id?: long(name='Id'),
    }
  ](name='Log')
  }(name='Logs'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeGtmLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmLogsResponseBody(name='body'),
}

async function describeGtmLogsWithOptions(request: DescribeGtmLogsRequest, runtime: Util.RuntimeOptions): DescribeGtmLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmLogs', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmLogs(request: DescribeGtmLogsRequest): DescribeGtmLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmLogsWithOptions(request, runtime);
}

model DescribeGtmMonitorAvailableConfigRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
}

model DescribeGtmMonitorAvailableConfigResponseBody = {
  requestId?: string(name='RequestId'),
  ispCityNodes?: {
    ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      mainland?: boolean(name='Mainland'),
      groupName?: string(name='GroupName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      ispName?: string(name='IspName'),
      groupType?: string(name='GroupType'),
      defaultSelected?: boolean(name='DefaultSelected'),
    }
  ](name='IspCityNode')
  }(name='IspCityNodes'),
}

model DescribeGtmMonitorAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmMonitorAvailableConfigResponseBody(name='body'),
}

async function describeGtmMonitorAvailableConfigWithOptions(request: DescribeGtmMonitorAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmMonitorAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmMonitorAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmMonitorAvailableConfig(request: DescribeGtmMonitorAvailableConfigRequest): DescribeGtmMonitorAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmMonitorAvailableConfigWithOptions(request, runtime);
}

model DescribeGtmMonitorConfigRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
}

model DescribeGtmMonitorConfigResponseBody = {
  requestId?: string(name='RequestId'),
  timeout?: int32(name='Timeout'),
  protocolType?: string(name='ProtocolType'),
  ispCityNodes?: {
    ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      countryName?: string(name='CountryName'),
      ispCode?: string(name='IspCode'),
      cityName?: string(name='CityName'),
      countryCode?: string(name='CountryCode'),
      ispName?: string(name='IspName'),
    }
  ](name='IspCityNode')
  }(name='IspCityNodes'),
  createTime?: string(name='CreateTime'),
  updateTime?: string(name='UpdateTime'),
  evaluationCount?: int32(name='EvaluationCount'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  monitorConfigId?: string(name='MonitorConfigId'),
  createTimestamp?: long(name='CreateTimestamp'),
  interval?: int32(name='Interval'),
}

model DescribeGtmMonitorConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmMonitorConfigResponseBody(name='body'),
}

async function describeGtmMonitorConfigWithOptions(request: DescribeGtmMonitorConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmMonitorConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmMonitorConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmMonitorConfig(request: DescribeGtmMonitorConfigRequest): DescribeGtmMonitorConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmMonitorConfigWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlanRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
}

model DescribeGtmRecoveryPlanResponseBody = {
  status?: string(name='Status'),
  lastRollbackTime?: string(name='LastRollbackTime'),
  faultAddrPoolNum?: int32(name='FaultAddrPoolNum'),
  faultAddrPools?: {
    faultAddrPool?: [ 
    {
      addrs?: {
        addr?: [ 
        {
          value?: string(name='Value'),
          mode?: string(name='Mode'),
          id?: long(name='Id'),
        }
      ](name='Addr')
      }(name='Addrs'),
      addrPoolId?: string(name='AddrPoolId'),
      instanceId?: string(name='InstanceId'),
      addrPoolName?: string(name='AddrPoolName'),
    }
  ](name='FaultAddrPool')
  }(name='FaultAddrPools'),
  lastExecuteTime?: string(name='LastExecuteTime'),
  requestId?: string(name='RequestId'),
  createTime?: string(name='CreateTime'),
  lastExecuteTimestamp?: long(name='LastExecuteTimestamp'),
  remark?: string(name='Remark'),
  name?: string(name='Name'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
  updateTime?: string(name='UpdateTime'),
  updateTimestamp?: long(name='UpdateTimestamp'),
  lastRollbackTimestamp?: long(name='LastRollbackTimestamp'),
  createTimestamp?: long(name='CreateTimestamp'),
}

model DescribeGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmRecoveryPlanResponseBody(name='body'),
}

async function describeGtmRecoveryPlanWithOptions(request: DescribeGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmRecoveryPlan(request: DescribeGtmRecoveryPlanRequest): DescribeGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlanWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlanAvailableConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
}

model DescribeGtmRecoveryPlanAvailableConfigResponseBody = {
  instances?: {
    instance?: [ 
    {
      addrPools?: {
        addrPool?: [ 
        {
          addrPoolId?: string(name='AddrPoolId'),
          name?: string(name='Name'),
        }
      ](name='AddrPool')
      }(name='AddrPools'),
      instanceName?: string(name='InstanceName'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Instance')
  }(name='Instances'),
  requestId?: string(name='RequestId'),
}

model DescribeGtmRecoveryPlanAvailableConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmRecoveryPlanAvailableConfigResponseBody(name='body'),
}

async function describeGtmRecoveryPlanAvailableConfigWithOptions(request: DescribeGtmRecoveryPlanAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlanAvailableConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmRecoveryPlanAvailableConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmRecoveryPlanAvailableConfig(request: DescribeGtmRecoveryPlanAvailableConfigRequest): DescribeGtmRecoveryPlanAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlanAvailableConfigWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlansRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  keyword?: string(name='Keyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeGtmRecoveryPlansResponseBody = {
  recoveryPlans?: {
    recoveryPlan?: [ 
    {
      status?: string(name='Status'),
      lastRollbackTimestamp?: long(name='LastRollbackTimestamp'),
      updateTime?: string(name='UpdateTime'),
      remark?: string(name='Remark'),
      createTime?: string(name='CreateTime'),
      recoveryPlanId?: long(name='RecoveryPlanId'),
      updateTimestamp?: long(name='UpdateTimestamp'),
      lastExecuteTimestamp?: long(name='LastExecuteTimestamp'),
      lastExecuteTime?: string(name='LastExecuteTime'),
      lastRollbackTime?: string(name='LastRollbackTime'),
      name?: string(name='Name'),
      faultAddrPoolNum?: int32(name='FaultAddrPoolNum'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='RecoveryPlan')
  }(name='RecoveryPlans'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeGtmRecoveryPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGtmRecoveryPlansResponseBody(name='body'),
}

async function describeGtmRecoveryPlansWithOptions(request: DescribeGtmRecoveryPlansRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGtmRecoveryPlans', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGtmRecoveryPlans(request: DescribeGtmRecoveryPlansRequest): DescribeGtmRecoveryPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlansWithOptions(request, runtime);
}

model DescribeInstanceDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceDomainsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  instanceDomains?: [ 
    {
      createTime?: string(name='CreateTime'),
      domainName?: string(name='DomainName'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='InstanceDomains'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model DescribeInstanceDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDomainsResponseBody(name='body'),
}

async function describeInstanceDomainsWithOptions(request: DescribeInstanceDomainsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceDomains(request: DescribeInstanceDomainsRequest): DescribeInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDomainsWithOptions(request, runtime);
}

model DescribeRecordLogsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  keyWord?: string(name='KeyWord'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='endDate'),
}

model DescribeRecordLogsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  recordLogs?: {
    recordLog?: [ 
    {
      action?: string(name='Action'),
      actionTimestamp?: long(name='ActionTimestamp'),
      clientIp?: string(name='ClientIp'),
      message?: string(name='Message'),
      actionTime?: string(name='ActionTime'),
    }
  ](name='RecordLog')
  }(name='RecordLogs'),
}

model DescribeRecordLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordLogsResponseBody(name='body'),
}

async function describeRecordLogsWithOptions(request: DescribeRecordLogsRequest, runtime: Util.RuntimeOptions): DescribeRecordLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordLogs', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordLogs(request: DescribeRecordLogsRequest): DescribeRecordLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordLogsWithOptions(request, runtime);
}

model DescribeRecordStatisticsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  domainName?: string(name='DomainName'),
  rr?: string(name='Rr'),
  domainType?: string(name='DomainType'),
}

model DescribeRecordStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  statistics?: {
    statistic?: [ 
    {
      timestamp?: long(name='Timestamp'),
      count?: long(name='Count'),
    }
  ](name='Statistic')
  }(name='Statistics'),
}

model DescribeRecordStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordStatisticsResponseBody(name='body'),
}

async function describeRecordStatisticsWithOptions(request: DescribeRecordStatisticsRequest, runtime: Util.RuntimeOptions): DescribeRecordStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordStatistics', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordStatistics(request: DescribeRecordStatisticsRequest): DescribeRecordStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordStatisticsWithOptions(request, runtime);
}

model DescribeRecordStatisticsSummaryRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
  orderBy?: string(name='OrderBy'),
  direction?: string(name='Direction'),
  domainName?: string(name='DomainName'),
  searchMode?: string(name='SearchMode'),
  keyword?: string(name='Keyword'),
  threshold?: long(name='Threshold'),
  domainType?: string(name='DomainType'),
}

model DescribeRecordStatisticsSummaryResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
  statistics?: {
    statistic?: [ 
    {
      subDomain?: string(name='SubDomain'),
      count?: long(name='Count'),
    }
  ](name='Statistic')
  }(name='Statistics'),
}

model DescribeRecordStatisticsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecordStatisticsSummaryResponseBody(name='body'),
}

async function describeRecordStatisticsSummaryWithOptions(request: DescribeRecordStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeRecordStatisticsSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecordStatisticsSummary', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecordStatisticsSummary(request: DescribeRecordStatisticsSummaryRequest): DescribeRecordStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordStatisticsSummaryWithOptions(request, runtime);
}

model DescribeSubDomainRecordsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  subDomain?: string(name='SubDomain'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  type?: string(name='Type'),
  line?: string(name='Line'),
  domainName?: string(name='DomainName'),
}

model DescribeSubDomainRecordsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  domainRecords?: {
    record?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      weight?: int32(name='Weight'),
      value?: string(name='Value'),
      TTL?: long(name='TTL'),
      line?: string(name='Line'),
      recordId?: string(name='RecordId'),
      priority?: long(name='Priority'),
      RR?: string(name='RR'),
      domainName?: string(name='DomainName'),
      locked?: boolean(name='Locked'),
    }
  ](name='Record')
  }(name='DomainRecords'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeSubDomainRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubDomainRecordsResponseBody(name='body'),
}

async function describeSubDomainRecordsWithOptions(request: DescribeSubDomainRecordsRequest, runtime: Util.RuntimeOptions): DescribeSubDomainRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSubDomainRecords', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSubDomainRecords(request: DescribeSubDomainRecordsRequest): DescribeSubDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubDomainRecordsWithOptions(request, runtime);
}

model DescribeSupportLinesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model DescribeSupportLinesResponseBody = {
  recordLines?: {
    recordLine?: [ 
    {
      fatherCode?: string(name='FatherCode'),
      lineDisplayName?: string(name='LineDisplayName'),
      lineCode?: string(name='LineCode'),
      lineName?: string(name='LineName'),
    }
  ](name='RecordLine')
  }(name='RecordLines'),
  requestId?: string(name='RequestId'),
}

model DescribeSupportLinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportLinesResponseBody(name='body'),
}

async function describeSupportLinesWithOptions(request: DescribeSupportLinesRequest, runtime: Util.RuntimeOptions): DescribeSupportLinesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSupportLines', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSupportLines(request: DescribeSupportLinesRequest): DescribeSupportLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportLinesWithOptions(request, runtime);
}

model DescribeTagsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  resourceType?: string(name='ResourceType'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeTagsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  tags?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTags', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeTransferDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  transferType?: string(name='TransferType'),
  domainName?: string(name='DomainName'),
  fromUserId?: long(name='FromUserId'),
  targetUserId?: long(name='TargetUserId'),
}

model DescribeTransferDomainsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  domainTransfers?: {
    domainTransfer?: [ 
    {
      fromUserId?: long(name='FromUserId'),
      createTime?: string(name='CreateTime'),
      targetUserId?: long(name='TargetUserId'),
      domainName?: string(name='DomainName'),
      id?: long(name='Id'),
      createTimestamp?: long(name='CreateTimestamp'),
    }
  ](name='DomainTransfer')
  }(name='DomainTransfers'),
}

model DescribeTransferDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTransferDomainsResponseBody(name='body'),
}

async function describeTransferDomainsWithOptions(request: DescribeTransferDomainsRequest, runtime: Util.RuntimeOptions): DescribeTransferDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTransferDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTransferDomains(request: DescribeTransferDomainsRequest): DescribeTransferDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransferDomainsWithOptions(request, runtime);
}

model ExecuteGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
}

model ExecuteGtmRecoveryPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExecuteGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteGtmRecoveryPlanResponseBody(name='body'),
}

async function executeGtmRecoveryPlanWithOptions(request: ExecuteGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): ExecuteGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeGtmRecoveryPlan(request: ExecuteGtmRecoveryPlanRequest): ExecuteGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeGtmRecoveryPlanWithOptions(request, runtime);
}

model GetMainDomainNameRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  inputString?: string(name='InputString'),
}

model GetMainDomainNameResponseBody = {
  RR?: string(name='RR'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  domainLevel?: long(name='DomainLevel'),
}

model GetMainDomainNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetMainDomainNameResponseBody(name='body'),
}

async function getMainDomainNameWithOptions(request: GetMainDomainNameRequest, runtime: Util.RuntimeOptions): GetMainDomainNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMainDomainName', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMainDomainName(request: GetMainDomainNameRequest): GetMainDomainNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMainDomainNameWithOptions(request, runtime);
}

model GetTxtRecordForVerifyRequest {
  lang?: string(name='Lang'),
  domainName?: string(name='DomainName'),
  type?: string(name='Type'),
  userClientIp?: string(name='UserClientIp'),
}

model GetTxtRecordForVerifyResponseBody = {
  RR?: string(name='RR'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  value?: string(name='Value'),
}

model GetTxtRecordForVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: GetTxtRecordForVerifyResponseBody(name='body'),
}

async function getTxtRecordForVerifyWithOptions(request: GetTxtRecordForVerifyRequest, runtime: Util.RuntimeOptions): GetTxtRecordForVerifyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTxtRecordForVerify', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTxtRecordForVerify(request: GetTxtRecordForVerifyRequest): GetTxtRecordForVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTxtRecordForVerifyWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  size?: int32(name='Size'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyHichinaDomainDNSRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model ModifyHichinaDomainDNSResponseBody = {
  requestId?: string(name='RequestId'),
  newDnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='NewDnsServers'),
  originalDnsServers?: {
    dnsServer?: [ string ](name='DnsServer')
  }(name='OriginalDnsServers'),
}

model ModifyHichinaDomainDNSResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHichinaDomainDNSResponseBody(name='body'),
}

async function modifyHichinaDomainDNSWithOptions(request: ModifyHichinaDomainDNSRequest, runtime: Util.RuntimeOptions): ModifyHichinaDomainDNSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHichinaDomainDNS', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHichinaDomainDNS(request: ModifyHichinaDomainDNSRequest): ModifyHichinaDomainDNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHichinaDomainDNSWithOptions(request, runtime);
}

model MoveDomainResourceGroupRequest {
  lang?: string(name='Lang'),
  resourceId?: string(name='ResourceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  userClientIp?: string(name='UserClientIp'),
}

model MoveDomainResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveDomainResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveDomainResourceGroupResponseBody(name='body'),
}

async function moveDomainResourceGroupWithOptions(request: MoveDomainResourceGroupRequest, runtime: Util.RuntimeOptions): MoveDomainResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveDomainResourceGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveDomainResourceGroup(request: MoveDomainResourceGroupRequest): MoveDomainResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveDomainResourceGroupWithOptions(request, runtime);
}

model MoveGtmResourceGroupRequest {
  lang?: string(name='Lang'),
  resourceId?: string(name='ResourceId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  userClientIp?: string(name='UserClientIp'),
}

model MoveGtmResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveGtmResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveGtmResourceGroupResponseBody(name='body'),
}

async function moveGtmResourceGroupWithOptions(request: MoveGtmResourceGroupRequest, runtime: Util.RuntimeOptions): MoveGtmResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveGtmResourceGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveGtmResourceGroup(request: MoveGtmResourceGroupRequest): MoveGtmResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveGtmResourceGroupWithOptions(request, runtime);
}

model OperateBatchDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  type?: string(name='Type'),
  domainRecordInfo?: [ 
    {
      type?: string(name='Type'),
      value?: string(name='Value'),
      ttl?: int32(name='Ttl'),
      domain?: string(name='Domain'),
      line?: string(name='Line'),
      newRr?: string(name='NewRr'),
      rr?: string(name='Rr'),
      priority?: int32(name='Priority'),
      newType?: string(name='NewType'),
      newValue?: string(name='NewValue'),
    }
  ](name='DomainRecordInfo'),
}

model OperateBatchDomainResponseBody = {
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model OperateBatchDomainResponse = {
  headers: map[string]string(name='headers'),
  body: OperateBatchDomainResponseBody(name='body'),
}

async function operateBatchDomainWithOptions(request: OperateBatchDomainRequest, runtime: Util.RuntimeOptions): OperateBatchDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateBatchDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateBatchDomain(request: OperateBatchDomainRequest): OperateBatchDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateBatchDomainWithOptions(request, runtime);
}

model PreviewGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model PreviewGtmRecoveryPlanResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  previews?: {
    preview?: [ 
    {
      instanceId?: string(name='InstanceId'),
      switchInfos?: {
        switchInfo?: [ 
        {
          strategyName?: string(name='StrategyName'),
          content?: string(name='Content'),
        }
      ](name='SwitchInfo')
      }(name='SwitchInfos'),
      name?: string(name='Name'),
      userDomainName?: string(name='UserDomainName'),
    }
  ](name='Preview')
  }(name='Previews'),
  totalPages?: int32(name='TotalPages'),
  totalItems?: int32(name='TotalItems'),
}

model PreviewGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: PreviewGtmRecoveryPlanResponseBody(name='body'),
}

async function previewGtmRecoveryPlanWithOptions(request: PreviewGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): PreviewGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreviewGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function previewGtmRecoveryPlan(request: PreviewGtmRecoveryPlanRequest): PreviewGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return previewGtmRecoveryPlanWithOptions(request, runtime);
}

model RetrieveDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
}

model RetrieveDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model RetrieveDomainResponse = {
  headers: map[string]string(name='headers'),
  body: RetrieveDomainResponseBody(name='body'),
}

async function retrieveDomainWithOptions(request: RetrieveDomainRequest, runtime: Util.RuntimeOptions): RetrieveDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RetrieveDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function retrieveDomain(request: RetrieveDomainRequest): RetrieveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrieveDomainWithOptions(request, runtime);
}

model RollbackGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
}

model RollbackGtmRecoveryPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackGtmRecoveryPlanResponseBody(name='body'),
}

async function rollbackGtmRecoveryPlanWithOptions(request: RollbackGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): RollbackGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackGtmRecoveryPlan(request: RollbackGtmRecoveryPlanRequest): RollbackGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackGtmRecoveryPlanWithOptions(request, runtime);
}

model SetDnsGtmAccessModeRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
  accessMode?: string(name='AccessMode'),
}

model SetDnsGtmAccessModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDnsGtmAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: SetDnsGtmAccessModeResponseBody(name='body'),
}

async function setDnsGtmAccessModeWithOptions(request: SetDnsGtmAccessModeRequest, runtime: Util.RuntimeOptions): SetDnsGtmAccessModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDnsGtmAccessMode', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDnsGtmAccessMode(request: SetDnsGtmAccessModeRequest): SetDnsGtmAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDnsGtmAccessModeWithOptions(request, runtime);
}

model SetDnsGtmMonitorStatusRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
  status?: string(name='Status'),
}

model SetDnsGtmMonitorStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDnsGtmMonitorStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDnsGtmMonitorStatusResponseBody(name='body'),
}

async function setDnsGtmMonitorStatusWithOptions(request: SetDnsGtmMonitorStatusRequest, runtime: Util.RuntimeOptions): SetDnsGtmMonitorStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDnsGtmMonitorStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDnsGtmMonitorStatus(request: SetDnsGtmMonitorStatusRequest): SetDnsGtmMonitorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDnsGtmMonitorStatusWithOptions(request, runtime);
}

model SetDNSSLBStatusRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  subDomain?: string(name='SubDomain'),
  open?: boolean(name='Open'),
  domainName?: string(name='DomainName'),
  type?: string(name='Type'),
  line?: string(name='Line'),
}

model SetDNSSLBStatusResponseBody = {
  requestId?: string(name='RequestId'),
  recordCount?: long(name='RecordCount'),
  open?: boolean(name='Open'),
}

model SetDNSSLBStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDNSSLBStatusResponseBody(name='body'),
}

async function setDNSSLBStatusWithOptions(request: SetDNSSLBStatusRequest, runtime: Util.RuntimeOptions): SetDNSSLBStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDNSSLBStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDNSSLBStatus(request: SetDNSSLBStatusRequest): SetDNSSLBStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDNSSLBStatusWithOptions(request, runtime);
}

model SetDomainDnssecStatusRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  domainName?: string(name='DomainName'),
  status?: string(name='Status'),
}

model SetDomainDnssecStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainDnssecStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainDnssecStatusResponseBody(name='body'),
}

async function setDomainDnssecStatusWithOptions(request: SetDomainDnssecStatusRequest, runtime: Util.RuntimeOptions): SetDomainDnssecStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainDnssecStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainDnssecStatus(request: SetDomainDnssecStatusRequest): SetDomainDnssecStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainDnssecStatusWithOptions(request, runtime);
}

model SetDomainRecordStatusRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
  status?: string(name='Status'),
}

model SetDomainRecordStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
}

model SetDomainRecordStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDomainRecordStatusResponseBody(name='body'),
}

async function setDomainRecordStatusWithOptions(request: SetDomainRecordStatusRequest, runtime: Util.RuntimeOptions): SetDomainRecordStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDomainRecordStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDomainRecordStatus(request: SetDomainRecordStatusRequest): SetDomainRecordStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainRecordStatusWithOptions(request, runtime);
}

model SetGtmAccessModeRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
  accessMode?: string(name='AccessMode'),
}

model SetGtmAccessModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGtmAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: SetGtmAccessModeResponseBody(name='body'),
}

async function setGtmAccessModeWithOptions(request: SetGtmAccessModeRequest, runtime: Util.RuntimeOptions): SetGtmAccessModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetGtmAccessMode', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setGtmAccessMode(request: SetGtmAccessModeRequest): SetGtmAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGtmAccessModeWithOptions(request, runtime);
}

model SetGtmMonitorStatusRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
  status?: string(name='Status'),
}

model SetGtmMonitorStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGtmMonitorStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetGtmMonitorStatusResponseBody(name='body'),
}

async function setGtmMonitorStatusWithOptions(request: SetGtmMonitorStatusRequest, runtime: Util.RuntimeOptions): SetGtmMonitorStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetGtmMonitorStatus', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setGtmMonitorStatus(request: SetGtmMonitorStatusRequest): SetGtmMonitorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGtmMonitorStatusWithOptions(request, runtime);
}

model SwitchDnsGtmInstanceStrategyModeRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  strategyMode?: string(name='StrategyMode'),
}

model SwitchDnsGtmInstanceStrategyModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchDnsGtmInstanceStrategyModeResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDnsGtmInstanceStrategyModeResponseBody(name='body'),
}

async function switchDnsGtmInstanceStrategyModeWithOptions(request: SwitchDnsGtmInstanceStrategyModeRequest, runtime: Util.RuntimeOptions): SwitchDnsGtmInstanceStrategyModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SwitchDnsGtmInstanceStrategyMode', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function switchDnsGtmInstanceStrategyMode(request: SwitchDnsGtmInstanceStrategyModeRequest): SwitchDnsGtmInstanceStrategyModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDnsGtmInstanceStrategyModeWithOptions(request, runtime);
}

model TagResourcesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  resourceType?: string(name='ResourceType'),
  overWrite?: boolean(name='OverWrite'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TransferDomainRequest {
  lang?: string(name='Lang'),
  domainNames?: string(name='DomainNames'),
  remark?: string(name='Remark'),
  targetUserId?: long(name='TargetUserId'),
  userClientIp?: string(name='UserClientIp'),
}

model TransferDomainResponseBody = {
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model TransferDomainResponse = {
  headers: map[string]string(name='headers'),
  body: TransferDomainResponseBody(name='body'),
}

async function transferDomainWithOptions(request: TransferDomainRequest, runtime: Util.RuntimeOptions): TransferDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransferDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transferDomain(request: TransferDomainRequest): TransferDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferDomainWithOptions(request, runtime);
}

model UnbindInstanceDomainsRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainNames?: string(name='DomainNames'),
  instanceId?: string(name='InstanceId'),
}

model UnbindInstanceDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  failedCount?: int32(name='FailedCount'),
  successCount?: int32(name='SuccessCount'),
}

model UnbindInstanceDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindInstanceDomainsResponseBody(name='body'),
}

async function unbindInstanceDomainsWithOptions(request: UnbindInstanceDomainsRequest, runtime: Util.RuntimeOptions): UnbindInstanceDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindInstanceDomains', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindInstanceDomains(request: UnbindInstanceDomainsRequest): UnbindInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindInstanceDomainsWithOptions(request, runtime);
}

model UntagResourcesRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCustomLineRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  lineName?: string(name='LineName'),
  lineId?: long(name='LineId'),
  ipSegment?: [ 
    {
      endIp?: string(name='EndIp'),
      startIp?: string(name='StartIp'),
    }
  ](name='IpSegment'),
}

model UpdateCustomLineResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCustomLineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCustomLineResponseBody(name='body'),
}

async function updateCustomLineWithOptions(request: UpdateCustomLineRequest, runtime: Util.RuntimeOptions): UpdateCustomLineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCustomLine', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCustomLine(request: UpdateCustomLineRequest): UpdateCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomLineWithOptions(request, runtime);
}

model UpdateDnsCacheDomainRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  instanceId?: string(name='InstanceId'),
  cacheTtlMin?: int32(name='CacheTtlMin'),
  cacheTtlMax?: int32(name='CacheTtlMax'),
  sourceProtocol?: string(name='SourceProtocol'),
  sourceEdns?: string(name='SourceEdns'),
  sourceDnsServer?: [ 
    {
      host?: string(name='Host'),
      port?: string(name='Port'),
    }
  ](name='SourceDnsServer'),
}

model UpdateDnsCacheDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDnsCacheDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsCacheDomainResponseBody(name='body'),
}

async function updateDnsCacheDomainWithOptions(request: UpdateDnsCacheDomainRequest, runtime: Util.RuntimeOptions): UpdateDnsCacheDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsCacheDomain', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsCacheDomain(request: UpdateDnsCacheDomainRequest): UpdateDnsCacheDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsCacheDomainWithOptions(request, runtime);
}

model UpdateDnsCacheDomainRemarkRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  remark?: string(name='Remark'),
}

model UpdateDnsCacheDomainRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDnsCacheDomainRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsCacheDomainRemarkResponseBody(name='body'),
}

async function updateDnsCacheDomainRemarkWithOptions(request: UpdateDnsCacheDomainRemarkRequest, runtime: Util.RuntimeOptions): UpdateDnsCacheDomainRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsCacheDomainRemark', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsCacheDomainRemark(request: UpdateDnsCacheDomainRemarkRequest): UpdateDnsCacheDomainRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsCacheDomainRemarkWithOptions(request, runtime);
}

model UpdateDnsGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
  strategyName?: string(name='StrategyName'),
  lines?: string(name='Lines'),
  defaultAddrPoolType?: string(name='DefaultAddrPoolType'),
  defaultLbaStrategy?: string(name='DefaultLbaStrategy'),
  defaultMinAvailableAddrNum?: int32(name='DefaultMinAvailableAddrNum'),
  defaultMaxReturnAddrNum?: int32(name='DefaultMaxReturnAddrNum'),
  defaultLatencyOptimization?: string(name='DefaultLatencyOptimization'),
  failoverAddrPoolType?: string(name='FailoverAddrPoolType'),
  failoverLbaStrategy?: string(name='FailoverLbaStrategy'),
  failoverMinAvailableAddrNum?: int32(name='FailoverMinAvailableAddrNum'),
  failoverMaxReturnAddrNum?: int32(name='FailoverMaxReturnAddrNum'),
  failoverLatencyOptimization?: string(name='FailoverLatencyOptimization'),
  defaultAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      id?: string(name='Id'),
    }
  ](name='DefaultAddrPool'),
  failoverAddrPool?: [ 
    {
      lbaWeight?: int32(name='LbaWeight'),
      id?: string(name='Id'),
    }
  ](name='FailoverAddrPool'),
}

model UpdateDnsGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategyId?: string(name='StrategyId'),
}

model UpdateDnsGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsGtmAccessStrategyResponseBody(name='body'),
}

async function updateDnsGtmAccessStrategyWithOptions(request: UpdateDnsGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): UpdateDnsGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsGtmAccessStrategy(request: UpdateDnsGtmAccessStrategyRequest): UpdateDnsGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsGtmAccessStrategyWithOptions(request, runtime);
}

model UpdateDnsGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
  name?: string(name='Name'),
  lbaStrategy?: string(name='LbaStrategy'),
  addr?: [ 
    {
      attributeInfo?: string(name='AttributeInfo'),
      remark?: string(name='Remark'),
      lbaWeight?: int32(name='LbaWeight'),
      addr?: string(name='Addr'),
      mode?: string(name='Mode'),
    }
  ](name='Addr'),
}

model UpdateDnsGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDnsGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsGtmAddressPoolResponseBody(name='body'),
}

async function updateDnsGtmAddressPoolWithOptions(request: UpdateDnsGtmAddressPoolRequest, runtime: Util.RuntimeOptions): UpdateDnsGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsGtmAddressPool(request: UpdateDnsGtmAddressPoolRequest): UpdateDnsGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsGtmAddressPoolWithOptions(request, runtime);
}

model UpdateDnsGtmInstanceGlobalConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  ttl?: int32(name='Ttl'),
  publicCnameMode?: string(name='PublicCnameMode'),
  publicUserDomainName?: string(name='PublicUserDomainName'),
  publicZoneName?: string(name='PublicZoneName'),
  alertGroup?: string(name='AlertGroup'),
  cnameType?: string(name='CnameType'),
  alertConfig?: [ 
    {
      smsNotice?: boolean(name='SmsNotice'),
      noticeType?: string(name='NoticeType'),
      emailNotice?: boolean(name='EmailNotice'),
    }
  ](name='AlertConfig'),
}

model UpdateDnsGtmInstanceGlobalConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDnsGtmInstanceGlobalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsGtmInstanceGlobalConfigResponseBody(name='body'),
}

async function updateDnsGtmInstanceGlobalConfigWithOptions(request: UpdateDnsGtmInstanceGlobalConfigRequest, runtime: Util.RuntimeOptions): UpdateDnsGtmInstanceGlobalConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsGtmInstanceGlobalConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsGtmInstanceGlobalConfig(request: UpdateDnsGtmInstanceGlobalConfigRequest): UpdateDnsGtmInstanceGlobalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsGtmInstanceGlobalConfigWithOptions(request, runtime);
}

model UpdateDnsGtmMonitorRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model UpdateDnsGtmMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDnsGtmMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDnsGtmMonitorResponseBody(name='body'),
}

async function updateDnsGtmMonitorWithOptions(request: UpdateDnsGtmMonitorRequest, runtime: Util.RuntimeOptions): UpdateDnsGtmMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDnsGtmMonitor', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDnsGtmMonitor(request: UpdateDnsGtmMonitorRequest): UpdateDnsGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDnsGtmMonitorWithOptions(request, runtime);
}

model UpdateDNSSLBWeightRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
  weight?: int32(name='Weight'),
}

model UpdateDNSSLBWeightResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
  weight?: int32(name='Weight'),
}

model UpdateDNSSLBWeightResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDNSSLBWeightResponseBody(name='body'),
}

async function updateDNSSLBWeightWithOptions(request: UpdateDNSSLBWeightRequest, runtime: Util.RuntimeOptions): UpdateDNSSLBWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDNSSLBWeight', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDNSSLBWeight(request: UpdateDNSSLBWeightRequest): UpdateDNSSLBWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDNSSLBWeightWithOptions(request, runtime);
}

model UpdateDomainGroupRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
}

model UpdateDomainGroupResponseBody = {
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  groupId?: string(name='GroupId'),
}

model UpdateDomainGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDomainGroupResponseBody(name='body'),
}

async function updateDomainGroupWithOptions(request: UpdateDomainGroupRequest, runtime: Util.RuntimeOptions): UpdateDomainGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDomainGroup', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDomainGroup(request: UpdateDomainGroupRequest): UpdateDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainGroupWithOptions(request, runtime);
}

model UpdateDomainRecordRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
  RR?: string(name='RR'),
  type?: string(name='Type'),
  value?: string(name='Value'),
  TTL?: long(name='TTL'),
  priority?: long(name='Priority'),
  line?: string(name='Line'),
}

model UpdateDomainRecordResponseBody = {
  requestId?: string(name='RequestId'),
  recordId?: string(name='RecordId'),
}

model UpdateDomainRecordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDomainRecordResponseBody(name='body'),
}

async function updateDomainRecordWithOptions(request: UpdateDomainRecordRequest, runtime: Util.RuntimeOptions): UpdateDomainRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDomainRecord', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDomainRecord(request: UpdateDomainRecordRequest): UpdateDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRecordWithOptions(request, runtime);
}

model UpdateDomainRecordRemarkRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recordId?: string(name='RecordId'),
  remark?: string(name='Remark'),
}

model UpdateDomainRecordRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDomainRecordRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDomainRecordRemarkResponseBody(name='body'),
}

async function updateDomainRecordRemarkWithOptions(request: UpdateDomainRecordRemarkRequest, runtime: Util.RuntimeOptions): UpdateDomainRecordRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDomainRecordRemark', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDomainRecordRemark(request: UpdateDomainRecordRemarkRequest): UpdateDomainRecordRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRecordRemarkWithOptions(request, runtime);
}

model UpdateDomainRemarkRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  domainName?: string(name='DomainName'),
  remark?: string(name='Remark'),
}

model UpdateDomainRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDomainRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDomainRemarkResponseBody(name='body'),
}

async function updateDomainRemarkWithOptions(request: UpdateDomainRemarkRequest, runtime: Util.RuntimeOptions): UpdateDomainRemarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDomainRemark', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDomainRemark(request: UpdateDomainRemarkRequest): UpdateDomainRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRemarkWithOptions(request, runtime);
}

model UpdateGtmAccessStrategyRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  strategyId?: string(name='StrategyId'),
  strategyName?: string(name='StrategyName'),
  defaultAddrPoolId?: string(name='DefaultAddrPoolId'),
  failoverAddrPoolId?: string(name='FailoverAddrPoolId'),
  accessLines?: string(name='AccessLines'),
}

model UpdateGtmAccessStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGtmAccessStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGtmAccessStrategyResponseBody(name='body'),
}

async function updateGtmAccessStrategyWithOptions(request: UpdateGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): UpdateGtmAccessStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGtmAccessStrategy', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGtmAccessStrategy(request: UpdateGtmAccessStrategyRequest): UpdateGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmAccessStrategyWithOptions(request, runtime);
}

model UpdateGtmAddressPoolRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  addrPoolId?: string(name='AddrPoolId'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  minAvailableAddrNum?: int32(name='MinAvailableAddrNum'),
  addr?: [ 
    {
      value?: string(name='Value'),
      lbaWeight?: int32(name='LbaWeight'),
      mode?: string(name='Mode'),
    }
  ](name='Addr'),
}

model UpdateGtmAddressPoolResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGtmAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGtmAddressPoolResponseBody(name='body'),
}

async function updateGtmAddressPoolWithOptions(request: UpdateGtmAddressPoolRequest, runtime: Util.RuntimeOptions): UpdateGtmAddressPoolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGtmAddressPool', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGtmAddressPool(request: UpdateGtmAddressPoolRequest): UpdateGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmAddressPoolWithOptions(request, runtime);
}

model UpdateGtmInstanceGlobalConfigRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  ttl?: int32(name='Ttl'),
  userDomainName?: string(name='UserDomainName'),
  lbaStrategy?: string(name='LbaStrategy'),
  alertGroup?: string(name='AlertGroup'),
  cnameMode?: string(name='CnameMode'),
  cnameCustomDomainName?: string(name='CnameCustomDomainName'),
}

model UpdateGtmInstanceGlobalConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGtmInstanceGlobalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGtmInstanceGlobalConfigResponseBody(name='body'),
}

async function updateGtmInstanceGlobalConfigWithOptions(request: UpdateGtmInstanceGlobalConfigRequest, runtime: Util.RuntimeOptions): UpdateGtmInstanceGlobalConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGtmInstanceGlobalConfig', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGtmInstanceGlobalConfig(request: UpdateGtmInstanceGlobalConfigRequest): UpdateGtmInstanceGlobalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmInstanceGlobalConfigWithOptions(request, runtime);
}

model UpdateGtmMonitorRequest {
  userClientIp?: string(name='UserClientIp'),
  lang?: string(name='Lang'),
  monitorConfigId?: string(name='MonitorConfigId'),
  protocolType?: string(name='ProtocolType'),
  interval?: int32(name='Interval'),
  evaluationCount?: int32(name='EvaluationCount'),
  timeout?: int32(name='Timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo'),
  ispCityNode?: [ 
    {
      cityCode?: string(name='CityCode'),
      ispCode?: string(name='IspCode'),
    }
  ](name='IspCityNode'),
}

model UpdateGtmMonitorResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGtmMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGtmMonitorResponseBody(name='body'),
}

async function updateGtmMonitorWithOptions(request: UpdateGtmMonitorRequest, runtime: Util.RuntimeOptions): UpdateGtmMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGtmMonitor', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGtmMonitor(request: UpdateGtmMonitorRequest): UpdateGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmMonitorWithOptions(request, runtime);
}

model UpdateGtmRecoveryPlanRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  recoveryPlanId?: long(name='RecoveryPlanId'),
  name?: string(name='Name'),
  remark?: string(name='Remark'),
  faultAddrPool?: string(name='FaultAddrPool'),
}

model UpdateGtmRecoveryPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateGtmRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGtmRecoveryPlanResponseBody(name='body'),
}

async function updateGtmRecoveryPlanWithOptions(request: UpdateGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): UpdateGtmRecoveryPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateGtmRecoveryPlan', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateGtmRecoveryPlan(request: UpdateGtmRecoveryPlanRequest): UpdateGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmRecoveryPlanWithOptions(request, runtime);
}

model ValidateDnsGtmAttributeInfoRequest {
  lang?: string(name='Lang'),
  userClientIp?: string(name='UserClientIp'),
  lineCode?: string(name='LineCode'),
}

model ValidateDnsGtmAttributeInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model ValidateDnsGtmAttributeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateDnsGtmAttributeInfoResponseBody(name='body'),
}

async function validateDnsGtmAttributeInfoWithOptions(request: ValidateDnsGtmAttributeInfoRequest, runtime: Util.RuntimeOptions): ValidateDnsGtmAttributeInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ValidateDnsGtmAttributeInfo', '2015-01-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function validateDnsGtmAttributeInfo(request: ValidateDnsGtmAttributeInfoRequest): ValidateDnsGtmAttributeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateDnsGtmAttributeInfoWithOptions(request, runtime);
}

