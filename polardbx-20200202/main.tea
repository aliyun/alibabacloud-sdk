/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'polardbx.aliyuncs.com',
    ap-northeast-2-pop = 'polardbx.aliyuncs.com',
    ap-south-1 = 'polardbx.aliyuncs.com',
    ap-southeast-2 = 'polardbx.aliyuncs.com',
    ap-southeast-3 = 'polardbx.aliyuncs.com',
    ap-southeast-5 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-1 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-pop = 'polardbx.aliyuncs.com',
    cn-beijing-gov-1 = 'polardbx.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardbx.aliyuncs.com',
    cn-edge-1 = 'polardbx.aliyuncs.com',
    cn-fujian = 'polardbx.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-finance = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardbx.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardbx.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardbx.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardbx.aliyuncs.com',
    cn-north-2-gov-1 = 'polardbx.aliyuncs.com',
    cn-qingdao-nebula = 'polardbx.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardbx.aliyuncs.com',
    cn-shanghai-inner = 'polardbx.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-inner = 'polardbx.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardbx.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardbx.aliyuncs.com',
    cn-wuhan = 'polardbx.aliyuncs.com',
    cn-wulanchabu = 'polardbx.aliyuncs.com',
    cn-yushanfang = 'polardbx.aliyuncs.com',
    cn-zhangbei = 'polardbx.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardbx.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardbx.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardbx.aliyuncs.com',
    eu-central-1 = 'polardbx.aliyuncs.com',
    eu-west-1 = 'polardbx.aliyuncs.com',
    eu-west-1-oxs = 'polardbx.aliyuncs.com',
    me-east-1 = 'polardbx.aliyuncs.com',
    rus-west-1-pop = 'polardbx.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('polardbx', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AlignStoragePrimaryAzoneRequest {
  DBInstanceName?: string(name='DBInstanceName'),
  regionId?: string(name='RegionId'),
  storageInstanceName?: string(name='StorageInstanceName'),
  switchTime?: string(name='SwitchTime'),
  switchTimeMode?: string(name='SwitchTimeMode'),
}

model AlignStoragePrimaryAzoneResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AlignStoragePrimaryAzoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AlignStoragePrimaryAzoneResponseBody(name='body'),
}

async function alignStoragePrimaryAzoneWithOptions(request: AlignStoragePrimaryAzoneRequest, runtime: Util.RuntimeOptions): AlignStoragePrimaryAzoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageInstanceName)) {
    query['StorageInstanceName'] = request.storageInstanceName;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AlignStoragePrimaryAzone',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function alignStoragePrimaryAzone(request: AlignStoragePrimaryAzoneRequest): AlignStoragePrimaryAzoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return alignStoragePrimaryAzoneWithOptions(request, runtime);
}

model AllocateColdDataVolumeRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzravgpt8q****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AllocateColdDataVolumeResponseBody = {
  requestId?: string(name='RequestId', example='D6A4256F-7B83-5BD7-9AC0-72E1FAC05330'),
}

model AllocateColdDataVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateColdDataVolumeResponseBody(name='body'),
}

async function allocateColdDataVolumeWithOptions(request: AllocateColdDataVolumeRequest, runtime: Util.RuntimeOptions): AllocateColdDataVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateColdDataVolume',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateColdDataVolume(request: AllocateColdDataVolumeRequest): AllocateColdDataVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateColdDataVolumeWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='pxc-**************'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-**************'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  port?: string(name='Port', example='3306'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateInstancePublicConnection',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CancelActiveOperationTasksRequest {
  ids?: string(name='Ids', example='111'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CancelActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='111,1223'),
  requestId?: string(name='RequestId', example='AE4F6C34-065F-45AA-B5DC-4B8D816F6305'),
}

model CancelActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelActiveOperationTasksResponseBody(name='body'),
}

async function cancelActiveOperationTasksWithOptions(request: CancelActiveOperationTasksRequest, runtime: Util.RuntimeOptions): CancelActiveOperationTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelActiveOperationTasks',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelActiveOperationTasks(request: CancelActiveOperationTasksRequest): CancelActiveOperationTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelActiveOperationTasksWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-acfmwolx3j4****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', example='pxc-szrwrbp693****'),
  resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3WE34'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CheckCloudResourceAuthorizedRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleArn?: string(name='RoleArn', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  data?: {
    authorizationState?: string(name='AuthorizationState', example='0'),
    roleArn?: string(name='RoleArn', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A501A191-BD70-5E50-98A9-C2A486A82****'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorizedWithOptions(request: CheckCloudResourceAuthorizedRequest, runtime: Util.RuntimeOptions): CheckCloudResourceAuthorizedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCloudResourceAuthorized',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCloudResourceAuthorizedWithOptions(request, runtime);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', example='test'),
  accountName?: string(name='AccountName', example='testAccount'),
  accountPassword?: string(name='AccountPassword', example='Test@1111'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-**************'),
  DBName?: string(name='DBName', example='testdb'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword'),
}

model CreateAccountResponseBody = {
  message?: string(name='Message', example='****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.accountPrivilege)) {
    query['AccountPrivilege'] = request.accountPrivilege;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  backupType?: string(name='BackupType', example='0'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-**************'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateBackupResponseBody = {
  data?: [ 
    {
      backupSetId?: long(name='BackupSetId', example='627833'),
    }
  ](name='Data'),
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupType)) {
    query['BackupType'] = request.backupType;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackup',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateDBRequest {
  accountName?: string(name='AccountName', example='testaccount'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
  charset?: string(name='Charset', example='utf8mb4'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-**************'),
  dbDescription?: string(name='DbDescription', example='db for test'),
  dbName?: string(name='DbName', example='testdb'),
  mode?: string(name='Mode', example='auto'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword'),
}

model CreateDBResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBResponseBody(name='body'),
}

async function createDBWithOptions(request: CreateDBRequest, runtime: Util.RuntimeOptions): CreateDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPrivilege)) {
    query['AccountPrivilege'] = request.accountPrivilege;
  }
  if (!Util.isUnset(request.charset)) {
    query['Charset'] = request.charset;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbDescription)) {
    query['DbDescription'] = request.dbDescription;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDB',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDB(request: CreateDBRequest): CreateDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', example='true'),
  CNNodeCount?: string(name='CNNodeCount'),
  clientToken?: string(name='ClientToken', example='xxxxxx-xxx'),
  cnClass?: string(name='CnClass'),
  DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.2xlarge.2d'),
  DBNodeCount?: int32(name='DBNodeCount', example='2'),
  DNNodeCount?: string(name='DNNodeCount'),
  dnClass?: string(name='DnClass'),
  engineVersion?: string(name='EngineVersion', example='2.0'),
  isReadDBInstance?: boolean(name='IsReadDBInstance', example='false'),
  networkType?: string(name='NetworkType', example='vpc'),
  payType?: string(name='PayType', example='PREPAY'),
  period?: string(name='Period', example='Month'),
  primaryDBInstanceName?: string(name='PrimaryDBInstanceName', example='pxc-*********'),
  primaryZone?: string(name='PrimaryZone', example='cn-shenzhen-e'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='null'),
  secondaryZone?: string(name='SecondaryZone', example='cn-shenzhen-a'),
  tertiaryZone?: string(name='TertiaryZone', example='cn-shenzhen-e'),
  topologyType?: string(name='TopologyType', example='3azones'),
  usedTime?: int32(name='UsedTime', example='1'),
  VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-*****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-*********'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
}

model CreateDBInstanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  orderId?: string(name='OrderId', example='12345'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.CNNodeCount)) {
    query['CNNodeCount'] = request.CNNodeCount;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.cnClass)) {
    query['CnClass'] = request.cnClass;
  }
  if (!Util.isUnset(request.DBNodeClass)) {
    query['DBNodeClass'] = request.DBNodeClass;
  }
  if (!Util.isUnset(request.DBNodeCount)) {
    query['DBNodeCount'] = request.DBNodeCount;
  }
  if (!Util.isUnset(request.DNNodeCount)) {
    query['DNNodeCount'] = request.DNNodeCount;
  }
  if (!Util.isUnset(request.dnClass)) {
    query['DnClass'] = request.dnClass;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.isReadDBInstance)) {
    query['IsReadDBInstance'] = request.isReadDBInstance;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.primaryDBInstanceName)) {
    query['PrimaryDBInstanceName'] = request.primaryDBInstanceName;
  }
  if (!Util.isUnset(request.primaryZone)) {
    query['PrimaryZone'] = request.primaryZone;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.secondaryZone)) {
    query['SecondaryZone'] = request.secondaryZone;
  }
  if (!Util.isUnset(request.tertiaryZone)) {
    query['TertiaryZone'] = request.tertiaryZone;
  }
  if (!Util.isUnset(request.topologyType)) {
    query['TopologyType'] = request.topologyType;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateSuperAccountRequest {
  accountDescription?: string(name='AccountDescription', example='testdbadescription'),
  accountName?: string(name='AccountName', example='dba'),
  accountPassword?: string(name='AccountPassword', example='testdbapassword'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-************'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateSuperAccountResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateSuperAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSuperAccountResponseBody(name='body'),
}

async function createSuperAccountWithOptions(request: CreateSuperAccountRequest, runtime: Util.RuntimeOptions): CreateSuperAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSuperAccount',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSuperAccount(request: CreateSuperAccountRequest): CreateSuperAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSuperAccountWithOptions(request, runtime);
}

model DeleteAccountRequest {
  accountName?: string(name='AccountName', example='testaccount'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword'),
}

model DeleteAccountResponseBody = {
  message?: string(name='Message', example='****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteDBRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  dbName?: string(name='DbName', example='testdb'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDBResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDBResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBResponseBody(name='body'),
}

async function deleteDBWithOptions(request: DeleteDBRequest, runtime: Util.RuntimeOptions): DeleteDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDB',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DescribeAccountListRequest {
  accountName?: string(name='AccountName', example='testaccount'),
  accountType?: string(name='AccountType', example='0'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAccountListResponseBody = {
  data?: [ 
    {
      accountDescription?: string(name='AccountDescription', example='testaccount desc'),
      accountName?: string(name='AccountName', example='testAccount'),
      accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
      accountType?: string(name='AccountType', example='0'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
      DBName?: string(name='DBName', example='testdb'),
      gmtCreated?: string(name='GmtCreated', example='2012-06-08T15:00Z'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAccountListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountListResponseBody(name='body'),
}

async function describeAccountListWithOptions(request: DescribeAccountListRequest, runtime: Util.RuntimeOptions): DescribeAccountListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccountList(request: DescribeAccountListRequest): DescribeAccountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountListWithOptions(request, runtime);
}

model DescribeActiveOperationMaintainConfRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeActiveOperationMaintainConfResponseBody = {
  config?: {
    createdTime?: string(name='CreatedTime', example='2021-08-11T10:08:27Z'),
    cycleTime?: string(name='CycleTime', example='1,2,3,4,5,6,7'),
    cycleType?: string(name='CycleType', example='Week'),
    maintainEndTime?: string(name='MaintainEndTime', example='04:00:00Z'),
    maintainStartTime?: string(name='MaintainStartTime', example='04:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', example='2021-08-11T10:08:27Z'),
    status?: long(name='Status', example='1'),
  }(name='Config'),
  hasConfig?: long(name='HasConfig', example='1'),
  requestId?: string(name='RequestId', example='1A586DCB-39A6-4050-81CC-C7BD4CCDB49F'),
}

model DescribeActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActiveOperationMaintainConfResponseBody(name='body'),
}

async function describeActiveOperationMaintainConfWithOptions(request: DescribeActiveOperationMaintainConfRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationMaintainConfResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActiveOperationMaintainConf',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeActiveOperationMaintainConf(request: DescribeActiveOperationMaintainConfRequest): DescribeActiveOperationMaintainConfResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationMaintainConfWithOptions(request, runtime);
}

model DescribeActiveOperationTaskCountRequest {
  category?: string(name='Category', example='Category'),
  product?: string(name='Product', example='polarx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeActiveOperationTaskCountResponseBody = {
  needPop?: long(name='NeedPop', example='1'),
  requestId?: string(name='RequestId', example='EC7E27FC-58F8-4722-89BB-D1B6D0971956'),
  taskCount?: long(name='TaskCount', example='20'),
}

model DescribeActiveOperationTaskCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActiveOperationTaskCountResponseBody(name='body'),
}

async function describeActiveOperationTaskCountWithOptions(request: DescribeActiveOperationTaskCountRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTaskCountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActiveOperationTaskCount',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeActiveOperationTaskCount(request: DescribeActiveOperationTaskCountRequest): DescribeActiveOperationTaskCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTaskCountWithOptions(request, runtime);
}

model DescribeActiveOperationTasksRequest {
  allowCancel?: long(name='AllowCancel', example='-1'),
  allowChange?: long(name='AllowChange', example='-1'),
  changeLevel?: string(name='ChangeLevel', example='all'),
  dbType?: string(name='DbType', example='polarx'),
  insName?: string(name='InsName', example='pxc-xxxxx'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='25'),
  productId?: string(name='ProductId', example='polarx'),
  region?: string(name='Region', example='cn-hangzhou'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: long(name='Status', example='-1'),
  taskType?: string(name='TaskType', example='all'),
}

model DescribeActiveOperationTasksResponseBody = {
  items?: [ 
    {
      allowCancel?: string(name='AllowCancel', example='0'),
      allowChange?: string(name='AllowChange', example='0'),
      changeLevel?: string(name='ChangeLevel', example='Risk'),
      changeLevelEn?: string(name='ChangeLevelEn', example='Risk repairment'),
      changeLevelZh?: string(name='ChangeLevelZh'),
      createdTime?: string(name='CreatedTime', example='2021-06-15T16:00:00Z'),
      currentAVZ?: string(name='CurrentAVZ', example='cn-shanghai-et-a'),
      dbType?: string(name='DbType', example='polarx'),
      dbVersion?: string(name='DbVersion', example='2.0'),
      deadline?: string(name='Deadline', example='2021-06-15T16:00:00Z'),
      id?: long(name='Id', example='1'),
      impact?: string(name='Impact', example='--'),
      impactEn?: string(name='ImpactEn', example='Transient instance disconnection'),
      impactZh?: string(name='ImpactZh'),
      insComment?: string(name='InsComment', example='xxx'),
      insName?: string(name='InsName', example='pxc-dd'),
      modifiedTime?: string(name='ModifiedTime', example='2021-06-15T16:00:00Z'),
      prepareInterval?: string(name='PrepareInterval', example='03:00:00'),
      region?: string(name='Region', example='cn-shanghai-et15-b01'),
      resultInfo?: string(name='ResultInfo', example='--'),
      startTime?: string(name='StartTime', example='2021-06-15T16:00:00Z'),
      status?: long(name='Status', example='3'),
      subInsNames?: [ string ](name='SubInsNames'),
      switchTime?: string(name='SwitchTime', example='2021-06-15T16:00:00Z'),
      taskType?: string(name='TaskType', example='rds_apsaradb_transfer'),
      taskTypeEn?: string(name='TaskTypeEn', example='--'),
      taskTypeZh?: string(name='TaskTypeZh', example='--'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='12'),
  requestId?: string(name='RequestId', example='xxxx'),
  totalRecordCount?: long(name='TotalRecordCount', example='23'),
}

model DescribeActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActiveOperationTasksResponseBody(name='body'),
}

async function describeActiveOperationTasksWithOptions(request: DescribeActiveOperationTasksRequest, runtime: Util.RuntimeOptions): DescribeActiveOperationTasksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActiveOperationTasks',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): DescribeActiveOperationTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActiveOperationTasksWithOptions(request, runtime);
}

model DescribeArchiveTableListRequest {
  DBInstanceName?: string(name='DBInstanceName'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  schemaName?: string(name='SchemaName'),
  status?: string(name='Status'),
  tableName?: string(name='TableName'),
}

model DescribeArchiveTableListResponseBody = {
  data?: {
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    pausedCount?: int32(name='PausedCount'),
    runningCount?: int32(name='RunningCount'),
    successCount?: int32(name='SuccessCount'),
    tables?: [ 
      {
        archiveStatus?: string(name='ArchiveStatus'),
        createdDate?: long(name='CreatedDate'),
        fileCount?: int32(name='FileCount'),
        lastSuccessArchiveTime?: long(name='LastSuccessArchiveTime'),
        schemaName?: string(name='SchemaName'),
        spaceSize?: double(name='SpaceSize'),
        tableName?: string(name='TableName'),
      }
    ](name='Tables'),
    tobeArchivedConut?: int32(name='TobeArchivedConut'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeArchiveTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeArchiveTableListResponseBody(name='body'),
}

async function describeArchiveTableListWithOptions(request: DescribeArchiveTableListRequest, runtime: Util.RuntimeOptions): DescribeArchiveTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['SchemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeArchiveTableList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeArchiveTableList(request: DescribeArchiveTableListRequest): DescribeArchiveTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeArchiveTableListWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod', example='1001000'),
      backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z'),
      backupSetRetention?: int32(name='BackupSetRetention', example='7'),
      backupType?: string(name='BackupType', example='0'),
      backupWay?: string(name='BackupWay', example='P'),
      coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30'),
      coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30'),
      crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention'),
      crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-xxxxxx'),
      destCrossRegion?: string(name='DestCrossRegion'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1'),
      isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled'),
      isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled'),
      isEnabled?: int32(name='IsEnabled', example='1'),
      localLogRetention?: int32(name='LocalLogRetention', example='30'),
      localLogRetentionNumber?: int32(name='LocalLogRetentionNumber'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30'),
      removeLogRetention?: int32(name='RemoveLogRetention', example='7'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B87E2AB3-B7C9-4394-9160-7F639F732031'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupSetRequest {
  backupSetId?: string(name='BackupSetId', example='111'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-htri0ori2r****'),
  destCrossRegion?: string(name='DestCrossRegion'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeBackupSetResponseBody = {
  data?: [ 
    {
      backupModel?: int32(name='BackupModel', example='0'),
      backupSetId?: long(name='BackupSetId', example='111'),
      backupSetSize?: long(name='BackupSetSize', example='88803195'),
      backupType?: int32(name='BackupType', example='1'),
      beginTime?: long(name='BeginTime', example='1650250861754'),
      endTime?: long(name='EndTime', example='1650251308000'),
      OSSList?: [ 
        {
          backupSetFile?: string(name='BackupSetFile', example='hins3084_data_20220418110623_qp.xb'),
          downloadLink?: string(name='DownloadLink', example='https://pre-rdsbak-cn-xxx.oss-cn-beijing.aliyuncs.com/custins2255/hins3084_data_20220418110623_qp.xb?OSSAccessKeyId=LTAI5tJEmRFdJ8aBPDR7****&Expires=1650441697&dd=7KJzkUSbXf6dwy'),
          intranetDownloadLink?: string(name='IntranetDownloadLink', example='http://pre-rdsbak-cn-beijing.oss-cn-beijing-internal.aliyuncs.com/custins2255/hins3084_data_20220418110623_qp.xb?'),
          linkExpiredTime?: string(name='LinkExpiredTime', example='2022-04-20T08:01:37Z'),
        }
      ](name='OSSList'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successs'),
  requestId?: string(name='RequestId', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupSetResponseBody(name='body'),
}

async function describeBackupSetWithOptions(request: DescribeBackupSetRequest, runtime: Util.RuntimeOptions): DescribeBackupSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupSetId)) {
    query['BackupSetId'] = request.backupSetId;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.destCrossRegion)) {
    query['DestCrossRegion'] = request.destCrossRegion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupSet',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupSet(request: DescribeBackupSetRequest): DescribeBackupSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetWithOptions(request, runtime);
}

model DescribeBackupSetListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-xxxxxx'),
  destCrossRegion?: string(name='DestCrossRegion'),
  endTime?: long(name='EndTime', example='1635707845000'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1635707845000'),
}

model DescribeBackupSetListResponseBody = {
  data?: [ 
    {
      backupModel?: int32(name='BackupModel', example='0'),
      backupSetId?: long(name='BackupSetId', example='111'),
      backupSetSize?: long(name='BackupSetSize', example='88803195'),
      backupType?: int32(name='BackupType', example='1'),
      beginTime?: long(name='BeginTime', example='1635706960956'),
      endTime?: long(name='EndTime', example='1635706960956'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupSetListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupSetListResponseBody(name='body'),
}

async function describeBackupSetListWithOptions(request: DescribeBackupSetListRequest, runtime: Util.RuntimeOptions): DescribeBackupSetListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupSetList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupSetList(request: DescribeBackupSetListRequest): DescribeBackupSetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetListWithOptions(request, runtime);
}

model DescribeBinaryLogListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hz1fds'),
  endTime?: string(name='EndTime', example='2021-11-09 10:27:46'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2021-09-09 10:27:46'),
}

model DescribeBinaryLogListResponseBody = {
  logList?: [ 
    {
      beginTime?: string(name='BeginTime', example='2021-09-09 10:27:46'),
      createdTime?: string(name='CreatedTime', example='2021-09-09 10:27:46'),
      downloadLink?: string(name='DownloadLink', example='http://polarx-cdc-binlog-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/polardbx_cdc/pxc-hzfd132143sfds1/binlog.000001?Expires=1636469502&OSSAccessKeyId=LT13fds12dsafddsf&Signature=fdpm%bdsfadsa%2F%bdsafdsaf%3D'),
      endTime?: string(name='EndTime', example='2021-11-09 10:27:46'),
      fileName?: string(name='FileName', example='binlog.000001'),
      id?: long(name='Id', example='100'),
      logSize?: long(name='LogSize', example='536870912'),
      modifiedTime?: string(name='ModifiedTime', example='2021-11-09 10:27:46'),
      purgeStatus?: int32(name='PurgeStatus', example='0'),
      uploadHost?: string(name='UploadHost', example='10.110.88.9'),
      uploadStatus?: int32(name='UploadStatus', example='2'),
    }
  ](name='LogList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='2DFF784E-DC31-5BBC-9B25-9261CD9E0AA9'),
  totalNumber?: int32(name='TotalNumber', example='100'),
}

model DescribeBinaryLogListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBinaryLogListResponseBody(name='body'),
}

async function describeBinaryLogListWithOptions(request: DescribeBinaryLogListRequest, runtime: Util.RuntimeOptions): DescribeBinaryLogListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBinaryLogList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBinaryLogList(request: DescribeBinaryLogListRequest): DescribeBinaryLogListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBinaryLogListWithOptions(request, runtime);
}

model DescribeCharacterSetRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCharacterSetResponseBody = {
  data?: {
    characterSet?: [ string ](name='CharacterSet'),
    engine?: string(name='Engine', example='polarx'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='709C1E40-092D-4A3D-9958-6D7438******'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCharacterSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCharacterSetResponseBody(name='body'),
}

async function describeCharacterSetWithOptions(request: DescribeCharacterSetRequest, runtime: Util.RuntimeOptions): DescribeCharacterSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCharacterSet',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCharacterSet(request: DescribeCharacterSetRequest): DescribeCharacterSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCharacterSetWithOptions(request, runtime);
}

model DescribeColdDataBasicInfoRequest {
  DBInstanceName?: string(name='DBInstanceName'),
  regionId?: string(name='RegionId'),
}

model DescribeColdDataBasicInfoResponseBody = {
  data?: {
    backupSetCount?: int32(name='BackupSetCount'),
    backupSetSpaceSize?: double(name='BackupSetSpaceSize'),
    cloudProduct?: string(name='CloudProduct'),
    currentSpaceSize?: double(name='CurrentSpaceSize'),
    dataRedundancyType?: string(name='DataRedundancyType'),
    enableStatus?: boolean(name='EnableStatus'),
    readAccessNum?: long(name='ReadAccessNum'),
    regionId?: string(name='RegionId'),
    volumeName?: string(name='VolumeName'),
    writeAccessNum?: double(name='WriteAccessNum'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeColdDataBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeColdDataBasicInfoResponseBody(name='body'),
}

async function describeColdDataBasicInfoWithOptions(request: DescribeColdDataBasicInfoRequest, runtime: Util.RuntimeOptions): DescribeColdDataBasicInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeColdDataBasicInfo',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeColdDataBasicInfo(request: DescribeColdDataBasicInfoRequest): DescribeColdDataBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColdDataBasicInfoWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzaxhezhs5***'),
}

model DescribeDBInstanceAttributeResponseBody = {
  DBInstance?: {
    cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.xlarge.2e'),
    cnNodeCount?: int32(name='CnNodeCount', example='2'),
    commodityCode?: string(name='CommodityCode', example='drds_polarxpost_public_cn'),
    connAddrs?: [ 
      {
        connectionString?: string(name='ConnectionString', example='polardbx-xxx.aliyuncs.com'),
        port?: long(name='Port', example='3306'),
        type?: string(name='Type', example='VPC'),
        VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxxx'),
        vSwitchId?: string(name='VSwitchId'),
        vpcInstanceId?: string(name='VpcInstanceId', example='pxc-zkralxpc5d****'),
      }
    ](name='ConnAddrs'),
    connectionString?: string(name='ConnectionString'),
    createTime?: string(name='CreateTime', example='2021-08-31T08:56:25.000+0000'),
    DBInstanceType?: string(name='DBInstanceType', example='ReadWrite'),
    DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.large.2e'),
    DBNodeCount?: int32(name='DBNodeCount', example='2'),
    DBNodes?: [ 
      {
        computeNodeId?: string(name='ComputeNodeId'),
        dataNodeId?: string(name='DataNodeId', example='pxc-xdb-xxxxxx'),
        id?: string(name='Id'),
        nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
      }
    ](name='DBNodes'),
    DBType?: string(name='DBType', example='polarx'),
    DBVersion?: string(name='DBVersion', example='5.5'),
    description?: string(name='Description', example='test instance'),
    dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.x8.large.25'),
    dnNodeCount?: int32(name='DnNodeCount', example='2'),
    engine?: string(name='Engine', example='polarx'),
    expireDate?: string(name='ExpireDate', example='2022-08-31T16:00:00.000+0000'),
    expired?: string(name='Expired', example='false'),
    id?: string(name='Id', example='pxc-zkralxpc5d****'),
    kindCode?: int32(name='KindCode', example='18'),
    LTSVersions?: [ string ](name='LTSVersions'),
    latestMinorVersion?: string(name='LatestMinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    lockMode?: string(name='LockMode', example='Unlock'),
    maintainEndTime?: string(name='MaintainEndTime', example='06:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='06:00'),
    minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    network?: string(name='Network', example='VPC'),
    payType?: string(name='PayType', example='Postpaid'),
    port?: string(name='Port', example='3306'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxx'),
    rightsSeparationEnabled?: boolean(name='RightsSeparationEnabled', example='false'),
    rightsSeparationStatus?: string(name='RightsSeparationStatus', example='disabled'),
    series?: string(name='Series', example='enterprise'),
    status?: string(name='Status', example='Running'),
    storageUsed?: long(name='StorageUsed', example='17042505728'),
    tagSet?: [ 
      {
        key?: string(name='Key', example='key2'),
        value?: string(name='Value', example='value2'),
      }
    ](name='TagSet'),
    type?: string(name='Type', example='ReadWrite'),
    VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxx'),
    vSwitchId?: string(name='VSwitchId'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceConfigRequest {
  configName?: string(name='ConfigName', example='htap'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDBInstanceConfigResponseBody = {
  data?: {
    configName?: string(name='ConfigName', example='htap'),
    configValue?: string(name='ConfigValue'),
    dbInstanceName?: string(name='DbInstanceName'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceConfigResponseBody(name='body'),
}

async function describeDBInstanceConfigWithOptions(request: DescribeDBInstanceConfigRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configName)) {
    query['ConfigName'] = request.configName;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceConfig',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceConfig(request: DescribeDBInstanceConfigRequest): DescribeDBInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceConfigWithOptions(request, runtime);
}

model DescribeDBInstanceHARequest {
  DBInstanceName?: string(name='DBInstanceName'),
  regionId?: string(name='RegionId'),
}

model DescribeDBInstanceHAResponseBody = {
  data?: {
    primaryAzoneId?: string(name='PrimaryAzoneId'),
    primaryRegionId?: string(name='PrimaryRegionId'),
    secondaryAzoneId?: string(name='SecondaryAzoneId'),
    secondaryRegionId?: string(name='SecondaryRegionId'),
    topologyType?: string(name='TopologyType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceHAResponseBody(name='body'),
}

async function describeDBInstanceHAWithOptions(request: DescribeDBInstanceHARequest, runtime: Util.RuntimeOptions): DescribeDBInstanceHAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceHA',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceHA(request: DescribeDBInstanceHARequest): DescribeDBInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceHAWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDBInstanceSSLResponseBody = {
  data?: {
    certCommonName?: string(name='CertCommonName', example='pxc-sddddddcym7g7w****.polarx.singapore.rds.aliyuncs.com'),
    SSLEnabled?: boolean(name='SSLEnabled', example='false'),
    SSLExpiredTime?: string(name='SSLExpiredTime', example='2022-11-04T09:39:07Z'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceSSL',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeDBInstanceTDERequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDBInstanceTDEResponseBody = {
  data?: {
    TDEStatus?: string(name='TDEStatus', example='0'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceTDEResponseBody(name='body'),
}

async function describeDBInstanceTDEWithOptions(request: DescribeDBInstanceTDERequest, runtime: Util.RuntimeOptions): DescribeDBInstanceTDEResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceTDE',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceTDEWithOptions(request, runtime);
}

model DescribeDBInstanceTopologyRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  endTime?: string(name='EndTime'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime'),
}

model DescribeDBInstanceTopologyResponseBody = {
  data?: {
    logicInstanceTopology?: {
      DBInstanceConnType?: string(name='DBInstanceConnType', example='lvs'),
      DBInstanceCreateTime?: string(name='DBInstanceCreateTime', example='2021-10-21T10:30:45Z 04:00:00'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='pxc-sprcym7g7wj7k'),
      DBInstanceId?: string(name='DBInstanceId', example='304726047'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-sprcym7g7w****'),
      DBInstanceStatus?: int32(name='DBInstanceStatus', example='8'),
      DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription', example='TDE_MODIFYING'),
      DBInstanceStorage?: int32(name='DBInstanceStorage', example='1'),
      engine?: string(name='Engine', example='polarx'),
      engineVersion?: string(name='EngineVersion', example='2.0'),
      historyItems?: [ 
        {
          activated?: boolean(name='Activated'),
          azone?: string(name='Azone'),
          characterType?: string(name='CharacterType'),
          DBInstanceId?: string(name='DBInstanceId'),
          DBInstanceName?: string(name='DBInstanceName'),
          phyInstanceName?: string(name='PhyInstanceName'),
          region?: string(name='Region'),
          role?: string(name='Role'),
        }
      ](name='HistoryItems'),
      items?: [ 
        {
          activated?: boolean(name='Activated', example='true'),
          azone?: string(name='Azone', example='cn-hangzhou-a'),
          azoneRoleList?: [ 
            {
              azone?: string(name='Azone', example='cn-hangzhou-a'),
              role?: string(name='Role', example='leader'),
            }
          ](name='AzoneRoleList'),
          characterType?: string(name='CharacterType'),
          connectionIp?: [ 
            {
              connectionString?: string(name='ConnectionString', example='pxc-xdb-m-pxcdym7g7w********.mysql.singapore.rds.aliyuncs.com'),
              DBInstanceNetType?: int32(name='DBInstanceNetType', example='1'),
              port?: string(name='Port', example='3306'),
            }
          ](name='ConnectionIp'),
          DBInstanceConnType?: int32(name='DBInstanceConnType'),
          DBInstanceCreateTime?: string(name='DBInstanceCreateTime', example='2021-10-21T10:30:45Z'),
          DBInstanceDescription?: string(name='DBInstanceDescription'),
          DBInstanceId?: string(name='DBInstanceId', example='304726049'),
          DBInstanceName?: string(name='DBInstanceName', example='pxc-i-tk6t4z****'),
          DBInstanceStatus?: int32(name='DBInstanceStatus', example='8'),
          DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription'),
          diskSize?: long(name='DiskSize', example='3145728'),
          engine?: string(name='Engine', example='mysql'),
          engineVersion?: string(name='EngineVersion', example='5.7'),
          lockMode?: int32(name='LockMode', example='0'),
          lockReason?: string(name='LockReason'),
          maintainEndTime?: string(name='MaintainEndTime'),
          maintainStartTime?: string(name='MaintainStartTime'),
          maxConnections?: int32(name='MaxConnections', example='4000'),
          maxIops?: int32(name='MaxIops', example='7000'),
          nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
          phyInstanceName?: string(name='PhyInstanceName'),
          region?: string(name='Region', example='cn-hangzhou'),
          role?: string(name='Role', example='master'),
          status?: string(name='Status', example='0'),
          version?: string(name='Version', example='polarx-cdc-kernel-2.0.0-3985896'),
        }
      ](name='Items'),
      lockMode?: int32(name='LockMode', example='0'),
      lockReason?: string(name='LockReason'),
      maintainEndTime?: string(name='MaintainEndTime', example='05:00:00'),
      maintainStartTime?: string(name='MaintainStartTime', example='04:00:00'),
    }(name='LogicInstanceTopology'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceTopologyResponseBody(name='body'),
}

async function describeDBInstanceTopologyWithOptions(request: DescribeDBInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceTopology',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceTopology(request: DescribeDBInstanceTopologyRequest): DescribeDBInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceTopologyWithOptions(request, runtime);
}

model DescribeDBInstanceViaEndpointRequest {
  endpoint?: string(name='Endpoint', example='pxc-hz*******.polarx.rds.aliyuncs.com'),
  regionId?: string(name='RegionId'),
}

model DescribeDBInstanceViaEndpointResponseBody = {
  DBInstance?: {
    cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.xlarge.2e'),
    cnNodeCount?: int32(name='CnNodeCount', example='2'),
    commodityCode?: string(name='CommodityCode', example='drds_polarxpost_public_cn'),
    connAddrs?: [ 
      {
        connectionString?: string(name='ConnectionString', example='polardbx-xxx.aliyuncs.com'),
        port?: long(name='Port', example='3306'),
        type?: string(name='Type', example='VPC'),
        VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxxx'),
        vSwitchId?: string(name='VSwitchId', example='vsw-*********'),
        vpcInstanceId?: string(name='VpcInstanceId', example='pxc-zkralxpc5d****'),
      }
    ](name='ConnAddrs'),
    connectionString?: string(name='ConnectionString', example='pxc-sprpx766vo****.polarx.singapore.rds.aliyuncs.com'),
    createTime?: string(name='CreateTime', example='2021-08-31T08:56:25.000+0000'),
    DBInstanceType?: string(name='DBInstanceType', example='ReadWrite'),
    DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.large.2e'),
    DBNodeCount?: int32(name='DBNodeCount', example='2'),
    DBNodes?: [ 
      {
        computeNodeId?: string(name='ComputeNodeId', example='pxc-i-********'),
        dataNodeId?: string(name='DataNodeId', example='pxc-xdb-xxxxxx'),
        id?: string(name='Id', example='pxi-*********'),
        nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
      }
    ](name='DBNodes'),
    DBType?: string(name='DBType', example='polarx'),
    DBVersion?: string(name='DBVersion', example='5.5'),
    description?: string(name='Description', example='test instance'),
    dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.x8.large.25'),
    dnNodeCount?: int32(name='DnNodeCount', example='2'),
    engine?: string(name='Engine', example='MySQL'),
    expireDate?: string(name='ExpireDate', example='2022-08-31T16:00:00.000+0000'),
    expired?: string(name='Expired', example='false'),
    id?: string(name='Id', example='pxc-zkralxpc5d****'),
    kindCode?: int32(name='KindCode', example='18'),
    LTSVersions?: [ string ](name='LTSVersions'),
    latestMinorVersion?: string(name='LatestMinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    lockMode?: string(name='LockMode', example='Unlock'),
    maintainEndTime?: string(name='MaintainEndTime', example='06:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='06:00'),
    minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    network?: string(name='Network', example='VPC'),
    payType?: string(name='PayType', example='Postpaid'),
    port?: string(name='Port', example='3306'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxx'),
    rightsSeparationEnabled?: boolean(name='RightsSeparationEnabled', example='false'),
    rightsSeparationStatus?: string(name='RightsSeparationStatus', example='disabled'),
    series?: string(name='Series', example='enterprise'),
    status?: string(name='Status', example='Running'),
    storageUsed?: long(name='StorageUsed', example='17042505728'),
    tagSet?: [ 
      {
        key?: string(name='Key', example='key2'),
        value?: string(name='Value', example='value2'),
      }
    ](name='TagSet'),
    type?: string(name='Type', example='ReadWrite'),
    VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxx'),
    vSwitchId?: string(name='VSwitchId', example='vsw-********'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId', example='14036EBE-CF2E-44DB-ACE9-AC6157D3A6FC'),
}

model DescribeDBInstanceViaEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstanceViaEndpointResponseBody(name='body'),
}

async function describeDBInstanceViaEndpointWithOptions(request: DescribeDBInstanceViaEndpointRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceViaEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceViaEndpoint',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstanceViaEndpoint(request: DescribeDBInstanceViaEndpointRequest): DescribeDBInstanceViaEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceViaEndpointWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  instanceId?: string(name='InstanceId', example='dinga93c84f4d***'),
  mustHasCdc?: boolean(name='MustHasCdc'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyst47hjw***'),
  series?: string(name='Series', example='enterprise'),
  tags?: string(name='Tags', example='[{\\"TagKey\\":\\"test\\",\\"TagValue\\":\\"test-value\\"}]'),
}

model DescribeDBInstancesResponseBody = {
  DBInstances?: [ 
    {
      cdcInstanceName?: string(name='CdcInstanceName', example='pxc-c-dmlgit****'),
      cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.large.2e'),
      cnNodeCount?: int32(name='CnNodeCount', example='2'),
      commodityCode?: string(name='CommodityCode', example='drds_polarxpre_public_cn'),
      containBinlogX?: boolean(name='ContainBinlogX', example='true'),
      createTime?: string(name='CreateTime', example='2021-11-01T03:49:50.000+0000'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-xxxxx'),
      DBType?: string(name='DBType', example='polarx'),
      DBVersion?: string(name='DBVersion', example='5.7'),
      description?: string(name='Description'),
      dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.n4.medium.25'),
      dnNodeCount?: int32(name='DnNodeCount', example='2'),
      engine?: string(name='Engine', example='polarx'),
      expireTime?: string(name='ExpireTime', example='2021-12-01T16:00:00.000+0000'),
      expired?: boolean(name='Expired', example='false'),
      id?: string(name='Id', example='pxc-hzr2yeov9jmg3z'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason'),
      minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.12-16349923_xcluster-20210926'),
      network?: string(name='Network', example='VPC'),
      nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
      nodeCount?: int32(name='NodeCount', example='5'),
      nodes?: [ 
        {
          classCode?: string(name='ClassCode', example='polarx.x4.large.2e'),
          id?: string(name='Id'),
          regionId?: string(name='RegionId', example='cn-hangzhou-g-aliyun'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
        }
      ](name='Nodes'),
      payType?: string(name='PayType', example='Prepaid'),
      readDBInstances?: [ string ](name='ReadDBInstances'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxxxx'),
      series?: string(name='Series', example='enterprise'),
      status?: string(name='Status', example='Running'),
      storageUsed?: long(name='StorageUsed', example='40658534400'),
      supportBinlogX?: boolean(name='SupportBinlogX', example='true'),
      tagSet?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='TagSet'),
      type?: string(name='Type', example='ReadWrite'),
      VPCId?: string(name='VPCId', description='VPC ID。', example='VPCID'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='DBInstances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  totalNumber?: int32(name='TotalNumber', example='30'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mustHasCdc)) {
    query['MustHasCdc'] = request.mustHasCdc;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.series)) {
    query['Series'] = request.series;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBNodePerformanceRequest {
  characterType?: string(name='CharacterType', example='polarx_cn'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*******'),
  DBNodeIds?: string(name='DBNodeIds', example='pxc-i-******,pxc-i-*******'),
  DBNodeRole?: string(name='DBNodeRole', example='master'),
  endTime?: string(name='EndTime', example='2012-06-18T15:00Z'),
  key?: string(name='Key', example='Cpu_Usage,Mem_Usage'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2012-06-08T15:00Z'),
}

model DescribeDBNodePerformanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  endTime?: string(name='EndTime', example='2021-10-20T02:00Z'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      DBNodeId?: string(name='DBNodeId', example='pxc-i-********'),
      measurement?: string(name='Measurement', example='Logic_TPS'),
      metricName?: string(name='MetricName', example='logic_tps'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp', example='1600822800000'),
          value?: string(name='Value', example='42.38'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId', example='EFB5E10B-5268-170F-A378-9AF86CCEACC8'),
  startTime?: string(name='StartTime', example='2021-10-20T00:00Z'),
}

model DescribeDBNodePerformanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDBNodePerformanceResponseBody(name='body'),
}

async function describeDBNodePerformanceWithOptions(request: DescribeDBNodePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBNodePerformanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.characterType)) {
    query['CharacterType'] = request.characterType;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.DBNodeIds)) {
    query['DBNodeIds'] = request.DBNodeIds;
  }
  if (!Util.isUnset(request.DBNodeRole)) {
    query['DBNodeRole'] = request.DBNodeRole;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBNodePerformance',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBNodePerformanceWithOptions(request, runtime);
}

model DescribeDbListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  DBName?: string(name='DBName', example='db_name'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDbListResponseBody = {
  data?: [ 
    {
      accounts?: [ 
        {
          accountName?: string(name='AccountName', example='root4test'),
          accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
        }
      ](name='Accounts'),
      characterSetName?: string(name='CharacterSetName', example='utf8mb4'),
      DBDescription?: string(name='DBDescription', example='test'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
      DBName?: string(name='DBName', example='test'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDbListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDbListResponseBody(name='body'),
}

async function describeDbListWithOptions(request: DescribeDbListRequest, runtime: Util.RuntimeOptions): DescribeDbListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDbList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDbList(request: DescribeDbListRequest): DescribeDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbListWithOptions(request, runtime);
}

model DescribeDistributeTableListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  dbName?: string(name='DbName', example='sbtest1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDistributeTableListResponseBody = {
  data?: {
    tables?: [ 
      {
        dbKey?: string(name='DbKey', example='id'),
        tableName?: string(name='TableName', example='sbtest1'),
        tableType?: string(name='TableType', example='multi'),
        tbKey?: string(name='TbKey', example='“”'),
      }
    ](name='Tables'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDistributeTableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDistributeTableListResponseBody(name='body'),
}

async function describeDistributeTableListWithOptions(request: DescribeDistributeTableListRequest, runtime: Util.RuntimeOptions): DescribeDistributeTableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDistributeTableList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDistributeTableList(request: DescribeDistributeTableListRequest): DescribeDistributeTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDistributeTableListWithOptions(request, runtime);
}

model DescribeEventsRequest {
  endTime?: string(name='EndTime', example='2021-10-18T03:07:25Z'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2021-10-18T03:07:25Z'),
}

model DescribeEventsResponseBody = {
  eventItems?: [ 
    {
      eventId?: long(name='EventId', example='50421290'),
      eventName?: string(name='EventName', example='ModifySecurityIps'),
      eventPayload?: string(name='EventPayload', example='{\\"Domain\\": \\"rds-cn-hangzhou.aliyuncs.com\\"}'),
      eventReason?: string(name='EventReason', example='FROM_USER'),
      eventRecordTime?: string(name='EventRecordTime', example='2021-10-15T06:39:49Z'),
      eventTime?: string(name='EventTime', example='2021-10-15T06:35:00Z'),
      eventType?: string(name='EventType', example='SecurityManagement'),
      eventUserType?: string(name='EventUserType', example='USRE'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceName?: string(name='ResourceName', example='px-bp1v8udesc89g156g'),
      resourceType?: string(name='ResourceType', example='instance'),
    }
  ](name='EventItems'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='4748127A-6D50-432C-B635-433467074C27'),
  totalRecordCount?: long(name='TotalRecordCount', example='20'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEvents',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventsWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest {
  DBInstanceId?: string(name='DBInstanceId', example='pxc-********'),
  paramLevel?: string(name='ParamLevel', example='compute'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeParameterTemplatesResponseBody = {
  data?: {
    engine?: string(name='Engine', example='polarx'),
    engineVersion?: string(name='EngineVersion', example='2.0'),
    parameterCount?: int32(name='ParameterCount', example='218'),
    parameters?: [ 
      {
        checkingCode?: string(name='CheckingCode', example='[0|1]'),
        dynamic?: int32(name='Dynamic', example='0'),
        parameterDescription?: string(name='ParameterDescription', example='polarx hatp addition param'),
        parameterName?: string(name='ParameterName', example='loose_enable_gts'),
        parameterValue?: string(name='ParameterValue', example='1'),
        revisable?: int32(name='Revisable', example='0'),
      }
    ](name='Parameters'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.paramLevel)) {
    query['ParamLevel'] = request.paramLevel;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameterTemplates',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribeParametersRequest {
  DBInstanceId?: string(name='DBInstanceId', example='pxc-********'),
  paramLevel?: string(name='ParamLevel', example='compute'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeParametersResponseBody = {
  data?: {
    configParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName', example='CONN_POOL_XPROTO_STORAGE_DB_PORT'),
        parameterValue?: string(name='ParameterValue', example='-1'),
      }
    ](name='ConfigParameters'),
    engine?: string(name='Engine', example='polarx'),
    engineVersion?: string(name='EngineVersion', example='2.0'),
    runningParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName', example='CONN_POOL_XPROTO_STORAGE_DB_PORT'),
        parameterValue?: string(name='ParameterValue', example='-1'),
      }
    ](name='RunningParameters'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6BA32080EEA'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.paramLevel)) {
    query['ParamLevel'] = request.paramLevel;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeParameters',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  code?: int32(name='Code', example='200'),
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='success'),
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', example='ch-hangzhou'),
      supportPolarx10?: boolean(name='SupportPolarx10', example='true'),
      supportPolarx20?: boolean(name='SupportPolarx20', example='true'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', example='true'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DescribeScaleOutMigrateTaskListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeScaleOutMigrateTaskListResponseBody = {
  progress?: int32(name='Progress', example='32'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeScaleOutMigrateTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScaleOutMigrateTaskListResponseBody(name='body'),
}

async function describeScaleOutMigrateTaskListWithOptions(request: DescribeScaleOutMigrateTaskListRequest, runtime: Util.RuntimeOptions): DescribeScaleOutMigrateTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScaleOutMigrateTaskList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScaleOutMigrateTaskList(request: DescribeScaleOutMigrateTaskListRequest): DescribeScaleOutMigrateTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScaleOutMigrateTaskListWithOptions(request, runtime);
}

model DescribeSecurityIpsRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeSecurityIpsResponseBody = {
  data?: {
    DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName', example='defaultGroup'),
        securityIPList?: string(name='SecurityIPList', example='127.0.0.1,172.168.0.0'),
      }
    ](name='GroupItems'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='14036EBE-CF2E-44DB-ACE9-AC6157D3A6FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityIps',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpsWithOptions(request, runtime);
}

model DescribeTagsRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-xxx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tagKey?: string(name='TagKey', example='test'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='requestid'),
  tagInfos?: [ 
    {
      DBInstanceIds?: [ string ](name='DBInstanceIds'),
      tagKey?: string(name='TagKey', example='testKey'),
      tagValue?: string(name='TagValue', example='testValue'),
    }
  ](name='TagInfos'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeTasksRequest {
  DBInstanceId?: string(name='DBInstanceId', example='pxc-hzjasd****'),
  endTime?: string(name='EndTime', example='2021-11-04'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', example='30'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', example='2021-11-01'),
}

model DescribeTasksResponseBody = {
  items?: [ 
    {
      beginTime?: string(name='BeginTime', example='2021-10-20T19:40:00Z'),
      DBName?: string(name='DBName', example='DBName'),
      finishTime?: string(name='FinishTime', example='2021-10-20T20:00:00Z'),
      progress?: string(name='Progress', example='80'),
      progressInfo?: string(name='ProgressInfo', example='ProgressInfo'),
      scaleOutToken?: string(name='ScaleOutToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
      status?: string(name='Status', example='RUNNING'),
      taskAction?: string(name='TaskAction', example='multi_scale_out'),
      taskErrorCode?: string(name='TaskErrorCode', example='TaskErrorCode'),
      taskErrorMessage?: string(name='TaskErrorMessage', example='TaskErrorMessage'),
      taskId?: string(name='TaskId', example='20089398'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='30'),
  requestId?: string(name='RequestId', example='D6045D78-C119-5A17-9DEA-0F810394E008'),
  totalRecordCount?: int32(name='TotalRecordCount', example='2'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeUserEncryptionKeyListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  data?: {
    keyIds?: [ string ](name='KeyIds'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyListWithOptions(request: DescribeUserEncryptionKeyListRequest, runtime: Util.RuntimeOptions): DescribeUserEncryptionKeyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserEncryptionKeyList',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserEncryptionKeyListWithOptions(request, runtime);
}

model DisableRightsSeparationRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-sprcym7g7w****'),
  dbaAccountName?: string(name='DbaAccountName', example='account_1'),
  dbaAccountPassword?: string(name='DbaAccountPassword', example='*****'),
  regionId?: string(name='RegionId', example='cn-hanghzou'),
}

model DisableRightsSeparationResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FE5D94E3-3C93-3594-95D9-AAED2A980915'),
  success?: boolean(name='Success', example='true'),
}

model DisableRightsSeparationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableRightsSeparationResponseBody(name='body'),
}

async function disableRightsSeparationWithOptions(request: DisableRightsSeparationRequest, runtime: Util.RuntimeOptions): DisableRightsSeparationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbaAccountName)) {
    query['DbaAccountName'] = request.dbaAccountName;
  }
  if (!Util.isUnset(request.dbaAccountPassword)) {
    query['DbaAccountPassword'] = request.dbaAccountPassword;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableRightsSeparation',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableRightsSeparation(request: DisableRightsSeparationRequest): DisableRightsSeparationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableRightsSeparationWithOptions(request, runtime);
}

model EnableRightsSeparationRequest {
  auditAccountDescription?: string(name='AuditAccountDescription', example='test123'),
  auditAccountName?: string(name='AuditAccountName', example='account_audit'),
  auditAccountPassword?: string(name='AuditAccountPassword', example='******'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountDescription?: string(name='SecurityAccountDescription', example='test123'),
  securityAccountName?: string(name='SecurityAccountName', example='account_sec'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='*****'),
}

model EnableRightsSeparationResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model EnableRightsSeparationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableRightsSeparationResponseBody(name='body'),
}

async function enableRightsSeparationWithOptions(request: EnableRightsSeparationRequest, runtime: Util.RuntimeOptions): EnableRightsSeparationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditAccountDescription)) {
    query['AuditAccountDescription'] = request.auditAccountDescription;
  }
  if (!Util.isUnset(request.auditAccountName)) {
    query['AuditAccountName'] = request.auditAccountName;
  }
  if (!Util.isUnset(request.auditAccountPassword)) {
    query['AuditAccountPassword'] = request.auditAccountPassword;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountDescription)) {
    query['SecurityAccountDescription'] = request.securityAccountDescription;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableRightsSeparation',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableRightsSeparation(request: EnableRightsSeparationRequest): EnableRightsSeparationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableRightsSeparationWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='xxdds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
  tag?: [ 
    {
      key?: string(name='Key', example='1'),
      value?: string(name='Value', example='2'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='xxdd'),
  requestId?: string(name='RequestId', example='xxxx-xxxxxx'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='pxc-xxxx'),
      resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
      tagKey?: string(name='TagKey', example='1'),
      tagValue?: string(name='TagValue', example='1'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription'),
  accountName?: string(name='AccountName', example='account'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyAccountDescriptionResponseBody = {
  message?: string(name='Message', example='msg'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountDescription)) {
    query['AccountDescription'] = request.accountDescription;
  }
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyAccountPrivilegeRequest {
  accountName?: string(name='AccountName', example='account_sec'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p'),
  dbName?: string(name='DbName', example='sbtest'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountName?: string(name='SecurityAccountName', example='account_audit'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='*****'),
}

model ModifyAccountPrivilegeResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountPrivilegeResponseBody(name='body'),
}

async function modifyAccountPrivilegeWithOptions(request: ModifyAccountPrivilegeRequest, runtime: Util.RuntimeOptions): ModifyAccountPrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPrivilege)) {
    query['AccountPrivilege'] = request.accountPrivilege;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountPrivilege',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPrivilegeWithOptions(request, runtime);
}

model ModifyActiveOperationMaintainConfRequest {
  cycleTime?: string(name='CycleTime', example='1,2,3,4,5,6,7'),
  cycleType?: string(name='CycleType', example='Week'),
  maintainEndTime?: string(name='MaintainEndTime', example='02:00:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', example='02:00:00Z'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: int32(name='Status', example='1'),
}

model ModifyActiveOperationMaintainConfResponseBody = {
  requestId?: string(name='RequestId', example='4035409E-7297-4115-ABC9-C1C3942BC069'),
}

model ModifyActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyActiveOperationMaintainConfResponseBody(name='body'),
}

async function modifyActiveOperationMaintainConfWithOptions(request: ModifyActiveOperationMaintainConfRequest, runtime: Util.RuntimeOptions): ModifyActiveOperationMaintainConfResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyActiveOperationMaintainConf',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyActiveOperationMaintainConf(request: ModifyActiveOperationMaintainConfRequest): ModifyActiveOperationMaintainConfResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActiveOperationMaintainConfWithOptions(request, runtime);
}

model ModifyActiveOperationTasksRequest {
  ids?: string(name='Ids', example='1'),
  immediateStart?: long(name='ImmediateStart', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  switchTime?: string(name='SwitchTime', example='2021-08-15T12:00:00Z'),
}

model ModifyActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='1'),
  requestId?: string(name='RequestId', example='8C9CC90A-9532-4752-B59F-580112C5A45B'),
}

model ModifyActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyActiveOperationTasksResponseBody(name='body'),
}

async function modifyActiveOperationTasksWithOptions(request: ModifyActiveOperationTasksRequest, runtime: Util.RuntimeOptions): ModifyActiveOperationTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.immediateStart)) {
    query['ImmediateStart'] = request.immediateStart;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyActiveOperationTasks',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): ModifyActiveOperationTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActiveOperationTasksWithOptions(request, runtime);
}

model ModifyDBInstanceClassRequest {
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  cnClass?: string(name='CnClass'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  dnClass?: string(name='DnClass'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass', example='polarx.x4.xlarge.2e'),
}

model ModifyDBInstanceClassResponseBody = {
  orderId?: string(name='OrderId', example='20211103105558'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceClassResponseBody(name='body'),
}

async function modifyDBInstanceClassWithOptions(request: ModifyDBInstanceClassRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceClassResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.cnClass)) {
    query['CnClass'] = request.cnClass;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dnClass)) {
    query['DnClass'] = request.dnClass;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.targetDBInstanceClass)) {
    query['TargetDBInstanceClass'] = request.targetDBInstanceClass;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceClass',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceClassWithOptions(request, runtime);
}

model ModifyDBInstanceConfigRequest {
  configName?: string(name='ConfigName', example='ENABLE_CONSISTENT_REPLICA_READ'),
  configValue?: string(name='ConfigValue', example='true'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDBInstanceConfigResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfigWithOptions(request: ModifyDBInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configName)) {
    query['ConfigName'] = request.configName;
  }
  if (!Util.isUnset(request.configValue)) {
    query['ConfigValue'] = request.configValue;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConfig',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConfigWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionString?: string(name='ConnectionString', example='pxc-unrf5ssig0ecg8.polarx.huhehaote.rds.aliyuncs.com'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-unrf5ssig0ecg8'),
  newPort?: string(name='NewPort', example='3300'),
  newPrefix?: string(name='NewPrefix', example='test2'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    connectionString?: string(name='ConnectionString', example='test2.polarx.huhehaote.rds.aliyuncs.com'),
    DBInstanceName?: string(name='DBInstanceName', example='pxc-unrf5ssig0ecg8'),
    DBInstanceNetType?: string(name='DBInstanceNetType', example='1'),
    port?: string(name='Port', example='3300'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='c3cf535c-a585-11ea-8263-00163e04d3a7'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.newPort)) {
    query['NewPort'] = request.newPort;
  }
  if (!Util.isUnset(request.newPrefix)) {
    query['NewPrefix'] = request.newPrefix;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceDescription',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDatabaseDescriptionRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  dbDescription?: string(name='DbDescription'),
  dbName?: string(name='DbName', example='testDB'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDatabaseDescriptionResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescriptionWithOptions(request: ModifyDatabaseDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDatabaseDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.dbDescription)) {
    query['DbDescription'] = request.dbDescription;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDatabaseDescription',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseDescriptionWithOptions(request, runtime);
}

model ModifyParameterRequest {
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  DBInstanceId?: string(name='DBInstanceId', example='pxc-hzjasdyuoo'),
  paramLevel?: string(name='ParamLevel', example='compute'),
  parameters?: string(name='Parameters', example='{"CONN_POOL_BLOCK_TIMEOUT":6000}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameterWithOptions(request: ModifyParameterRequest, runtime: Util.RuntimeOptions): ModifyParameterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.paramLevel)) {
    query['ParamLevel'] = request.paramLevel;
  }
  if (!Util.isUnset(request.parameters)) {
    query['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyParameter',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  groupName?: string(name='GroupName', example='default'),
  modifyMode?: string(name='ModifyMode', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1,192.168.0.0'),
}

model ModifySecurityIpsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIps',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ReleaseColdDataVolumeRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzravgpt8q****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ReleaseColdDataVolumeResponseBody = {
  requestId?: string(name='RequestId', example='EA330983-C895-57C0-AE82-5A63106EBB10'),
}

model ReleaseColdDataVolumeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseColdDataVolumeResponseBody(name='body'),
}

async function releaseColdDataVolumeWithOptions(request: ReleaseColdDataVolumeRequest, runtime: Util.RuntimeOptions): ReleaseColdDataVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseColdDataVolume',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseColdDataVolume(request: ReleaseColdDataVolumeRequest): ReleaseColdDataVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseColdDataVolumeWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  currentConnectionString?: string(name='CurrentConnectionString', example='pxc-hzjasdyuoo.polarx.rds.aliyuncs.com'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentConnectionString)) {
    query['CurrentConnectionString'] = request.currentConnectionString;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstancePublicConnection',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  accountName?: string(name='AccountName', example='account'),
  accountPassword?: string(name='AccountPassword', example='*****'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityAccountName?: string(name='SecurityAccountName', example='account_sec'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='*****'),
}

model ResetAccountPasswordResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityAccountName)) {
    query['SecurityAccountName'] = request.securityAccountName;
  }
  if (!Util.isUnset(request.securityAccountPassword)) {
    query['SecurityAccountPassword'] = request.securityAccountPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBInstance',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model SwitchDBInstanceHARequest {
  DBInstanceName?: string(name='DBInstanceName'),
  regionId?: string(name='RegionId'),
  switchTime?: string(name='SwitchTime'),
  switchTimeMode?: string(name='SwitchTimeMode'),
  targetPrimaryAzoneId?: string(name='TargetPrimaryAzoneId'),
  targetPrimaryRegionId?: string(name='TargetPrimaryRegionId'),
}

model SwitchDBInstanceHAResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchDBInstanceHAResponseBody(name='body'),
}

async function switchDBInstanceHAWithOptions(request: SwitchDBInstanceHARequest, runtime: Util.RuntimeOptions): SwitchDBInstanceHAResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  if (!Util.isUnset(request.targetPrimaryAzoneId)) {
    query['TargetPrimaryAzoneId'] = request.targetPrimaryAzoneId;
  }
  if (!Util.isUnset(request.targetPrimaryRegionId)) {
    query['TargetPrimaryRegionId'] = request.targetPrimaryRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchDBInstanceHA',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceHAWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
  tag?: [ 
    {
      key?: string(name='Key', example='12'),
      value?: string(name='Value', example='22'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='requestId', example='xxxx-xxxx'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='xxxxxx'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateBackupPolicyRequest {
  backupPeriod?: string(name='BackupPeriod', example='1001000'),
  backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z'),
  backupSetRetention?: int32(name='BackupSetRetention', example='30'),
  backupType?: string(name='BackupType', example='0'),
  backupWay?: string(name='BackupWay', example='P'),
  coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30'),
  coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30'),
  crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention'),
  crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasdyuoo'),
  destCrossRegion?: string(name='DestCrossRegion'),
  forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1'),
  isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled'),
  isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled'),
  isEnabled?: int32(name='IsEnabled', example='1'),
  localLogRetention?: int32(name='LocalLogRetention', example='7'),
  localLogRetentionNumber?: int32(name='LocalLogRetentionNumber'),
  logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  removeLogRetention?: int32(name='RemoveLogRetention', example='7'),
}

model UpdateBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod', example='1001000'),
      backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z'),
      backupSetRetention?: int32(name='BackupSetRetention', example='30'),
      backupType?: string(name='BackupType', example='0'),
      backupWay?: string(name='BackupWay', example='P'),
      coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30'),
      coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30'),
      crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention'),
      crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasdyuoo'),
      destCrossRegion?: string(name='DestCrossRegion'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1'),
      isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled'),
      isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled'),
      isEnabled?: int32(name='IsEnabled', example='1'),
      localLogRetention?: int32(name='LocalLogRetention', example='7'),
      localLogRetentionNumber?: int32(name='LocalLogRetentionNumber'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30'),
      removeLogRetention?: int32(name='RemoveLogRetention', example='7'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model UpdateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBackupPolicyResponseBody(name='body'),
}

async function updateBackupPolicyWithOptions(request: UpdateBackupPolicyRequest, runtime: Util.RuntimeOptions): UpdateBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupPeriod)) {
    query['BackupPeriod'] = request.backupPeriod;
  }
  if (!Util.isUnset(request.backupPlanBegin)) {
    query['BackupPlanBegin'] = request.backupPlanBegin;
  }
  if (!Util.isUnset(request.backupSetRetention)) {
    query['BackupSetRetention'] = request.backupSetRetention;
  }
  if (!Util.isUnset(request.backupType)) {
    query['BackupType'] = request.backupType;
  }
  if (!Util.isUnset(request.backupWay)) {
    query['BackupWay'] = request.backupWay;
  }
  if (!Util.isUnset(request.coldDataBackupInterval)) {
    query['ColdDataBackupInterval'] = request.coldDataBackupInterval;
  }
  if (!Util.isUnset(request.coldDataBackupRetention)) {
    query['ColdDataBackupRetention'] = request.coldDataBackupRetention;
  }
  if (!Util.isUnset(request.crossRegionDataBackupRetention)) {
    query['CrossRegionDataBackupRetention'] = request.crossRegionDataBackupRetention;
  }
  if (!Util.isUnset(request.crossRegionLogBackupRetention)) {
    query['CrossRegionLogBackupRetention'] = request.crossRegionLogBackupRetention;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.destCrossRegion)) {
    query['DestCrossRegion'] = request.destCrossRegion;
  }
  if (!Util.isUnset(request.forceCleanOnHighSpaceUsage)) {
    query['ForceCleanOnHighSpaceUsage'] = request.forceCleanOnHighSpaceUsage;
  }
  if (!Util.isUnset(request.isCrossRegionDataBackupEnabled)) {
    query['IsCrossRegionDataBackupEnabled'] = request.isCrossRegionDataBackupEnabled;
  }
  if (!Util.isUnset(request.isCrossRegionLogBackupEnabled)) {
    query['IsCrossRegionLogBackupEnabled'] = request.isCrossRegionLogBackupEnabled;
  }
  if (!Util.isUnset(request.isEnabled)) {
    query['IsEnabled'] = request.isEnabled;
  }
  if (!Util.isUnset(request.localLogRetention)) {
    query['LocalLogRetention'] = request.localLogRetention;
  }
  if (!Util.isUnset(request.localLogRetentionNumber)) {
    query['LocalLogRetentionNumber'] = request.localLogRetentionNumber;
  }
  if (!Util.isUnset(request.logLocalRetentionSpace)) {
    query['LogLocalRetentionSpace'] = request.logLocalRetentionSpace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeLogRetention)) {
    query['RemoveLogRetention'] = request.removeLogRetention;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBackupPolicy',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBackupPolicy(request: UpdateBackupPolicyRequest): UpdateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBackupPolicyWithOptions(request, runtime);
}

model UpdateDBInstanceSSLRequest {
  certCommonName?: string(name='CertCommonName', example='pxc-hzrqjarxdocd4t.polarx.rds.aliyuncs.com'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  enableSSL?: boolean(name='EnableSSL', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateDBInstanceSSLResponseBody = {
  data?: {
    taskId?: long(name='TaskId', example='2209883'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdateDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDBInstanceSSLResponseBody(name='body'),
}

async function updateDBInstanceSSLWithOptions(request: UpdateDBInstanceSSLRequest, runtime: Util.RuntimeOptions): UpdateDBInstanceSSLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certCommonName)) {
    query['CertCommonName'] = request.certCommonName;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.enableSSL)) {
    query['EnableSSL'] = request.enableSSL;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDBInstanceSSL',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDBInstanceSSL(request: UpdateDBInstanceSSLRequest): UpdateDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDBInstanceSSLWithOptions(request, runtime);
}

model UpdateDBInstanceTDERequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  encryptionKey?: string(name='EncryptionKey', example='RkVBNURDMjAtNkQ4QS01OTc5LTk3QUEtRkM1NzU0Nk******'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleArn?: string(name='RoleArn', example='acs:ram::1406926****:role/aliyunrdsinstanceencryptiondefaultrole'),
  TDEStatus?: int32(name='TDEStatus', example='1'),
}

model UpdateDBInstanceTDEResponseBody = {
  data?: {
    taskId?: string(name='TaskId', example='42292****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdateDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDBInstanceTDEResponseBody(name='body'),
}

async function updateDBInstanceTDEWithOptions(request: UpdateDBInstanceTDERequest, runtime: Util.RuntimeOptions): UpdateDBInstanceTDEResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.encryptionKey)) {
    query['EncryptionKey'] = request.encryptionKey;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.TDEStatus)) {
    query['TDEStatus'] = request.TDEStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDBInstanceTDE',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDBInstanceTDE(request: UpdateDBInstanceTDERequest): UpdateDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDBInstanceTDEWithOptions(request, runtime);
}

model UpdatePolarDBXInstanceNodeRequest {
  CNNodeCount?: string(name='CNNodeCount', example='2'),
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasdyuoo'),
  DNNodeCount?: string(name='DNNodeCount', example='2'),
  dbInstanceNodeCount?: string(name='DbInstanceNodeCount', example='3'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdatePolarDBXInstanceNodeResponseBody = {
  orderId?: string(name='OrderId', example='20211103105558'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdatePolarDBXInstanceNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePolarDBXInstanceNodeResponseBody(name='body'),
}

async function updatePolarDBXInstanceNodeWithOptions(request: UpdatePolarDBXInstanceNodeRequest, runtime: Util.RuntimeOptions): UpdatePolarDBXInstanceNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.CNNodeCount)) {
    query['CNNodeCount'] = request.CNNodeCount;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.DNNodeCount)) {
    query['DNNodeCount'] = request.DNNodeCount;
  }
  if (!Util.isUnset(request.dbInstanceNodeCount)) {
    query['DbInstanceNodeCount'] = request.dbInstanceNodeCount;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePolarDBXInstanceNode',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePolarDBXInstanceNode(request: UpdatePolarDBXInstanceNodeRequest): UpdatePolarDBXInstanceNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePolarDBXInstanceNodeWithOptions(request, runtime);
}

model UpgradeDBInstanceKernelVersionRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.12-16349923_xcluster-20210926'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  switchMode?: string(name='SwitchMode', example='0'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  targetMinorVersion?: string(name='TargetMinorVersion', example='polarx-kernel_5.4.7-16001481_xcluster-20200910'),
  taskId?: string(name='TaskId', example='422922413'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceKernelVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceName)) {
    query['DBInstanceName'] = request.DBInstanceName;
  }
  if (!Util.isUnset(request.minorVersion)) {
    query['MinorVersion'] = request.minorVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchMode)) {
    query['SwitchMode'] = request.switchMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeDBInstanceKernelVersion',
    version = '2020-02-02',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceKernelVersionWithOptions(request, runtime);
}

