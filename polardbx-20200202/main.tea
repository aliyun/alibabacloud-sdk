/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'polardbx.aliyuncs.com',
    ap-northeast-2-pop = 'polardbx.aliyuncs.com',
    ap-south-1 = 'polardbx.aliyuncs.com',
    ap-southeast-2 = 'polardbx.aliyuncs.com',
    ap-southeast-3 = 'polardbx.aliyuncs.com',
    ap-southeast-5 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-1 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-pop = 'polardbx.aliyuncs.com',
    cn-beijing-gov-1 = 'polardbx.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardbx.aliyuncs.com',
    cn-edge-1 = 'polardbx.aliyuncs.com',
    cn-fujian = 'polardbx.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-finance = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardbx.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardbx.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardbx.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardbx.aliyuncs.com',
    cn-north-2-gov-1 = 'polardbx.aliyuncs.com',
    cn-qingdao-nebula = 'polardbx.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardbx.aliyuncs.com',
    cn-shanghai-inner = 'polardbx.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-inner = 'polardbx.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardbx.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardbx.aliyuncs.com',
    cn-wuhan = 'polardbx.aliyuncs.com',
    cn-wulanchabu = 'polardbx.aliyuncs.com',
    cn-yushanfang = 'polardbx.aliyuncs.com',
    cn-zhangbei = 'polardbx.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardbx.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardbx.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardbx.aliyuncs.com',
    eu-central-1 = 'polardbx.aliyuncs.com',
    eu-west-1 = 'polardbx.aliyuncs.com',
    eu-west-1-oxs = 'polardbx.aliyuncs.com',
    me-east-1 = 'polardbx.aliyuncs.com',
    rus-west-1-pop = 'polardbx.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('polardbx', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AllocateInstancePublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
  port?: string(name='Port'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateInstancePublicConnection', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model CancelPolarxOrderRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  scaleOutToken?: string(name='ScaleOutToken'),
}

model CancelPolarxOrderResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPolarxOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPolarxOrderResponseBody(name='body'),
}

async function cancelPolarxOrderWithOptions(request: CancelPolarxOrderRequest, runtime: Util.RuntimeOptions): CancelPolarxOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelPolarxOrder', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelPolarxOrder(request: CancelPolarxOrderRequest): CancelPolarxOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPolarxOrderWithOptions(request, runtime);
}

model CreateAccountRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  DBName?: string(name='DBName'),
  accountPrivilege?: string(name='AccountPrivilege'),
  accountDescription?: string(name='AccountDescription'),
}

model CreateAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateBackupRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  backupType?: string(name='BackupType'),
}

model CreateBackupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      backupSetId?: long(name='BackupSetId'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackup', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateDBRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
  charset?: string(name='Charset'),
  dbName?: string(name='DbName'),
  accountPrivilege?: string(name='AccountPrivilege'),
  dbDescription?: string(name='DbDescription'),
}

model CreateDBResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResponseBody(name='body'),
}

async function createDBWithOptions(request: CreateDBRequest, runtime: Util.RuntimeOptions): CreateDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDB', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDB(request: CreateDBRequest): CreateDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  regionId?: string(name='RegionId'),
  payType?: string(name='PayType'),
  DBNodeCount?: int32(name='DBNodeCount'),
  DBNodeClass?: string(name='DBNodeClass'),
  zoneId?: string(name='ZoneId'),
  clientToken?: string(name='ClientToken'),
  networkType?: string(name='NetworkType'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  usedTime?: int32(name='UsedTime'),
  period?: string(name='Period'),
  resourceGroupId?: string(name='ResourceGroupId'),
  autoRenew?: boolean(name='AutoRenew'),
  engineVersion?: string(name='EngineVersion'),
  isReadDBInstance?: boolean(name='IsReadDBInstance'),
  primaryDBInstanceName?: string(name='PrimaryDBInstanceName'),
}

model CreateDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBInstance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreatePolarxInstanceRequest {
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  type?: string(name='Type'),
  quantity?: int32(name='Quantity'),
  instanceSeries?: string(name='InstanceSeries'),
  specification?: string(name='Specification'),
  clientToken?: string(name='ClientToken'),
  payType?: string(name='PayType'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  isHa?: boolean(name='isHa'),
  pricingCycle?: string(name='PricingCycle'),
  duration?: int32(name='Duration'),
  isAutoRenew?: boolean(name='IsAutoRenew'),
  masterInstId?: string(name='MasterInstId'),
  mySQLVersion?: int32(name='MySQLVersion'),
}

model CreatePolarxInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    drdsInstanceIdList?: {
      drdsInstanceIdList?: [ string ](name='drdsInstanceIdList')
    }(name='DrdsInstanceIdList'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model CreatePolarxInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolarxInstanceResponseBody(name='body'),
}

async function createPolarxInstanceWithOptions(request: CreatePolarxInstanceRequest, runtime: Util.RuntimeOptions): CreatePolarxInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolarxInstance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolarxInstance(request: CreatePolarxInstanceRequest): CreatePolarxInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolarxInstanceWithOptions(request, runtime);
}

model CreatePolarxOrderRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  nodeCount?: string(name='NodeCount'),
}

model CreatePolarxOrderResponseBody = {
  requestId?: string(name='RequestId'),
  orderResultList?: [ 
    {
      DBInstanceName?: string(name='DBInstanceName'),
      orderId?: long(name='OrderId'),
    }
  ](name='OrderResultList'),
}

model CreatePolarxOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolarxOrderResponseBody(name='body'),
}

async function createPolarxOrderWithOptions(request: CreatePolarxOrderRequest, runtime: Util.RuntimeOptions): CreatePolarxOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolarxOrder', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolarxOrder(request: CreatePolarxOrderRequest): CreatePolarxOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolarxOrderWithOptions(request, runtime);
}

model CreateSuperAccountRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
}

model CreateSuperAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSuperAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSuperAccountResponseBody(name='body'),
}

async function createSuperAccountWithOptions(request: CreateSuperAccountRequest, runtime: Util.RuntimeOptions): CreateSuperAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSuperAccount', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSuperAccount(request: CreateSuperAccountRequest): CreateSuperAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSuperAccountWithOptions(request, runtime);
}

model DeleteAccountRequest {
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
  regionId?: string(name='RegionId'),
}

model DeleteAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteDBRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  dbName?: string(name='DbName'),
}

model DeleteDBResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDBResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResponseBody(name='body'),
}

async function deleteDBWithOptions(request: DeleteDBRequest, runtime: Util.RuntimeOptions): DeleteDBResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDB', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBInstance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DescribeAccountListRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      DBInstanceName?: string(name='DBInstanceName'),
      accountDescription?: string(name='AccountDescription'),
      DBName?: string(name='DBName'),
      accountPrivilege?: string(name='AccountPrivilege'),
      accountType?: string(name='AccountType'),
      accountName?: string(name='AccountName'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeAccountListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountListResponseBody(name='body'),
}

async function describeAccountListWithOptions(request: DescribeAccountListRequest, runtime: Util.RuntimeOptions): DescribeAccountListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccountList', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccountList(request: DescribeAccountListRequest): DescribeAccountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountListWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeBackupPolicyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace'),
      DBInstanceName?: string(name='DBInstanceName'),
      backupWay?: string(name='BackupWay'),
      backupPeriod?: string(name='BackupPeriod'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage'),
      backupType?: string(name='BackupType'),
      localLogRetention?: int32(name='LocalLogRetention'),
      removeLogRetention?: int32(name='RemoveLogRetention'),
      backupPlanBegin?: string(name='BackupPlanBegin'),
      backupSetRetention?: int32(name='BackupSetRetention'),
      isEnabled?: int32(name='IsEnabled'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupSetListRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupSetListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endTime?: long(name='EndTime'),
      status?: int32(name='Status'),
      backupSetSize?: long(name='BackupSetSize'),
      backupSetId?: long(name='BackupSetId'),
      backupType?: int32(name='BackupType'),
      beginTime?: long(name='BeginTime'),
      backupModel?: int32(name='BackupModel'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeBackupSetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetListResponseBody(name='body'),
}

async function describeBackupSetListWithOptions(request: DescribeBackupSetListRequest, runtime: Util.RuntimeOptions): DescribeBackupSetListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeBackupSetList', '2020-02-02', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeBackupSetList(request: DescribeBackupSetListRequest): DescribeBackupSetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupSetListWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstance?: {
    type?: string(name='Type'),
    status?: string(name='Status'),
    DBNodeCount?: int32(name='DBNodeCount'),
    expired?: string(name='Expired'),
    createTime?: string(name='CreateTime'),
    payType?: string(name='PayType'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    port?: string(name='Port'),
    lockMode?: string(name='LockMode'),
    connAddrs?: [ 
      {
        type?: string(name='Type'),
        vSwitchId?: string(name='VSwitchId'),
        connectionString?: string(name='ConnectionString'),
        port?: string(name='Port'),
        VPCId?: string(name='VPCId'),
      }
    ](name='ConnAddrs'),
    description?: string(name='Description'),
    connectionString?: string(name='ConnectionString'),
    storageUsed?: long(name='StorageUsed'),
    expireDate?: string(name='ExpireDate'),
    commodityCode?: string(name='CommodityCode'),
    maintainStartTime?: string(name='MaintainStartTime'),
    DBInstanceType?: string(name='DBInstanceType'),
    DBNodeClass?: string(name='DBNodeClass'),
    maintainEndTime?: string(name='MaintainEndTime'),
    latestMinorVersion?: string(name='LatestMinorVersion'),
    DBType?: string(name='DBType'),
    VPCId?: string(name='VPCId'),
    minorVersion?: string(name='MinorVersion'),
    regionId?: string(name='RegionId'),
    DBNodes?: [ 
      {
        nodeClass?: string(name='NodeClass'),
        zoneId?: string(name='ZoneId'),
        id?: string(name='Id'),
        regionId?: string(name='RegionId'),
      }
    ](name='DBNodes'),
    network?: string(name='Network'),
    DBVersion?: string(name='DBVersion'),
    vSwitchId?: string(name='VSwitchId'),
    zoneId?: string(name='ZoneId'),
    engine?: string(name='Engine'),
    id?: string(name='Id'),
  }(name='DBInstance'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstanceAttribute', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDBInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  totalNumber?: int32(name='TotalNumber'),
  DBInstances?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      expired?: boolean(name='Expired'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      readDBInstances?: [ string ](name='ReadDBInstances'),
      lockMode?: string(name='LockMode'),
      description?: string(name='Description'),
      nodeClass?: string(name='NodeClass'),
      storageUsed?: long(name='StorageUsed'),
      nodes?: [ 
        {
          zoneId?: string(name='ZoneId'),
          id?: string(name='Id'),
          classCode?: string(name='ClassCode'),
          regionId?: string(name='RegionId'),
        }
      ](name='Nodes'),
      commodityCode?: string(name='CommodityCode'),
      expireTime?: string(name='ExpireTime'),
      lockReason?: string(name='LockReason'),
      DBType?: string(name='DBType'),
      VPCId?: string(name='VPCId'),
      minorVersion?: string(name='MinorVersion'),
      regionId?: string(name='RegionId'),
      network?: string(name='Network'),
      DBVersion?: string(name='DBVersion'),
      nodeCount?: int32(name='NodeCount'),
      zoneId?: string(name='ZoneId'),
      engine?: string(name='Engine'),
      id?: string(name='Id'),
    }
  ](name='DBInstances'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBInstances', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDbListRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  DBName?: string(name='DBName'),
}

model DescribeDbListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      DBDescription?: string(name='DBDescription'),
      DBInstanceName?: string(name='DBInstanceName'),
      DBName?: string(name='DBName'),
      characterSetName?: string(name='CharacterSetName'),
      accounts?: [ 
        {
          accountPrivilege?: string(name='AccountPrivilege'),
          accountName?: string(name='AccountName'),
        }
      ](name='Accounts'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbListResponseBody(name='body'),
}

async function describeDbListWithOptions(request: DescribeDbListRequest, runtime: Util.RuntimeOptions): DescribeDbListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDbList', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDbList(request: DescribeDbListRequest): DescribeDbListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDbListWithOptions(request, runtime);
}

model DescribeDistributeTableListRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  dbName?: string(name='DbName'),
}

model DescribeDistributeTableListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    tables?: [ 
      {
        tableName?: string(name='TableName'),
        dbKey?: string(name='DbKey'),
        tableType?: string(name='TableType'),
        tbKey?: string(name='TbKey'),
      }
    ](name='Tables'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeDistributeTableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDistributeTableListResponseBody(name='body'),
}

async function describeDistributeTableListWithOptions(request: DescribeDistributeTableListRequest, runtime: Util.RuntimeOptions): DescribeDistributeTableListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDistributeTableList', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDistributeTableList(request: DescribeDistributeTableListRequest): DescribeDistributeTableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDistributeTableListWithOptions(request, runtime);
}

model DescribeInstanceDbPerformanceRequest {
  regionId?: string(name='RegionId'),
  dbInstanceName?: string(name='DbInstanceName'),
  keys?: string(name='Keys'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  dbName?: string(name='DbName'),
}

model DescribeInstanceDbPerformanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    performanceItems?: [ 
      {
        metricName?: string(name='MetricName'),
        measurement?: string(name='Measurement'),
        points?: [ 
          {
            value?: string(name='Value'),
            timestamp?: long(name='Timestamp'),
          }
        ](name='Points'),
      }
    ](name='PerformanceItems'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeInstanceDbPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDbPerformanceResponseBody(name='body'),
}

async function describeInstanceDbPerformanceWithOptions(request: DescribeInstanceDbPerformanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceDbPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceDbPerformance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceDbPerformance(request: DescribeInstanceDbPerformanceRequest): DescribeInstanceDbPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDbPerformanceWithOptions(request, runtime);
}

model DescribeInstancePerformanceRequest {
  dbInstanceName?: string(name='DbInstanceName'),
  nodeId?: string(name='NodeId'),
  keys?: string(name='Keys'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeInstancePerformanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    performanceItems?: [ 
      {
        metricName?: string(name='MetricName'),
        measurement?: string(name='Measurement'),
        points?: [ 
          {
            value?: string(name='Value'),
            timestamp?: long(name='Timestamp'),
          }
        ](name='Points'),
      }
    ](name='PerformanceItems'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeInstancePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancePerformanceResponseBody(name='body'),
}

async function describeInstancePerformanceWithOptions(request: DescribeInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeInstancePerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstancePerformance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstancePerformance(request: DescribeInstancePerformanceRequest): DescribeInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancePerformanceWithOptions(request, runtime);
}

model DescribeInstanceStoragePerformanceRequest {
  regionId?: string(name='RegionId'),
  dbInstanceName?: string(name='DbInstanceName'),
  storageInstanceId?: string(name='StorageInstanceId'),
  keys?: string(name='Keys'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeInstanceStoragePerformanceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    performanceItems?: [ 
      {
        metricName?: string(name='MetricName'),
        measurement?: string(name='Measurement'),
        points?: [ 
          {
            value?: string(name='Value'),
            timestamp?: long(name='Timestamp'),
          }
        ](name='Points'),
      }
    ](name='PerformanceItems'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeInstanceStoragePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStoragePerformanceResponseBody(name='body'),
}

async function describeInstanceStoragePerformanceWithOptions(request: DescribeInstanceStoragePerformanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceStoragePerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceStoragePerformance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceStoragePerformance(request: DescribeInstanceStoragePerformanceRequest): DescribeInstanceStoragePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStoragePerformanceWithOptions(request, runtime);
}

model DescribeParametersRequest {
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  paramLevel?: string(name='ParamLevel'),
}

model DescribeParametersResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    configParameters?: [ 
      {
        parameterName?: string(name='ParameterName'),
        parameterValue?: string(name='ParameterValue'),
        parameterDescription?: string(name='ParameterDescription'),
      }
    ](name='ConfigParameters'),
    engine?: string(name='Engine'),
    runningParameters?: [ 
      {
        parameterName?: string(name='ParameterName'),
        parameterValue?: string(name='ParameterValue'),
        parameterDescription?: string(name='ParameterDescription'),
      }
    ](name='RunningParameters'),
    engineVersion?: string(name='EngineVersion'),
  }(name='Data'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameters', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribePolarxDbInstancesRequest {
  drdsInstanceId?: string(name='DrdsInstanceId'),
  dbName?: string(name='DbName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribePolarxDbInstancesResponseBody = {
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  total?: string(name='Total'),
  dbInstances?: {
    dbInstance?: [ 
    {
      status?: string(name='Status'),
      expireTime?: string(name='ExpireTime'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      DBType?: string(name='DBType'),
      VPCId?: string(name='VPCId'),
      lockMode?: string(name='LockMode'),
      regionId?: string(name='RegionId'),
      network?: string(name='Network'),
      DBVersion?: string(name='DBVersion'),
      description?: string(name='Description'),
      nodeClass?: string(name='NodeClass'),
      storageUsed?: int32(name='StorageUsed'),
      nodeCount?: int32(name='NodeCount'),
      zoneId?: string(name='ZoneId'),
      DBInstanceId?: string(name='DBInstanceId'),
      engine?: string(name='Engine'),
      lockReason?: string(name='lockReason'),
      statusDesc?: string(name='StatusDesc'),
    }
  ](name='DbInstance')
  }(name='DbInstances'),
  success?: boolean(name='Success'),
}

model DescribePolarxDbInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolarxDbInstancesResponseBody(name='body'),
}

async function describePolarxDbInstancesWithOptions(request: DescribePolarxDbInstancesRequest, runtime: Util.RuntimeOptions): DescribePolarxDbInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolarxDbInstances', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolarxDbInstances(request: DescribePolarxDbInstancesRequest): DescribePolarxDbInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolarxDbInstancesWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      supportPolarx10?: boolean(name='SupportPolarx10'),
      zones?: {
        zone?: [ 
        {
          zoneId?: string(name='ZoneId'),
          vpcEnabled?: boolean(name='VpcEnabled'),
        }
      ](name='Zone')
      }(name='Zones'),
      supportPolarx20?: boolean(name='SupportPolarx20'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  errorCode?: int32(name='ErrorCode'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DescribeRegions', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DescribeScaleOutMigrateTaskListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeScaleOutMigrateTaskListResponseBody = {
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
}

model DescribeScaleOutMigrateTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScaleOutMigrateTaskListResponseBody(name='body'),
}

async function describeScaleOutMigrateTaskListWithOptions(request: DescribeScaleOutMigrateTaskListRequest, runtime: Util.RuntimeOptions): DescribeScaleOutMigrateTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScaleOutMigrateTaskList', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScaleOutMigrateTaskList(request: DescribeScaleOutMigrateTaskListRequest): DescribeScaleOutMigrateTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScaleOutMigrateTaskListWithOptions(request, runtime);
}

model DescribeSecurityIpsRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model DescribeSecurityIpsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    DBInstanceName?: string(name='DBInstanceName'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName'),
        securityIPList?: string(name='SecurityIPList'),
      }
    ](name='GroupItems'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIpsWithOptions(request: DescribeSecurityIpsRequest, runtime: Util.RuntimeOptions): DescribeSecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityIps', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIpsWithOptions(request, runtime);
}

model DescribeSqlAuditInfoRequest {
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeSqlAuditInfoResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    isEnabled?: boolean(name='IsEnabled'),
    authenticated?: string(name='Authenticated'),
  }(name='Data'),
}

model DescribeSqlAuditInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSqlAuditInfoResponseBody(name='body'),
}

async function describeSqlAuditInfoWithOptions(request: DescribeSqlAuditInfoRequest, runtime: Util.RuntimeOptions): DescribeSqlAuditInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSqlAuditInfo', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSqlAuditInfo(request: DescribeSqlAuditInfoRequest): DescribeSqlAuditInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSqlAuditInfoWithOptions(request, runtime);
}

model DescribeTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  status?: string(name='Status'),
  taskAction?: string(name='TaskAction'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model DescribeTasksResponseBody = {
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  items?: [ 
    {
      DBName?: string(name='DBName'),
      beginTime?: string(name='BeginTime'),
      progressInfo?: string(name='ProgressInfo'),
      finishTime?: string(name='FinishTime'),
      taskAction?: string(name='TaskAction'),
      taskId?: string(name='TaskId'),
      progress?: string(name='Progress'),
      status?: string(name='Status'),
      taskErrorCode?: string(name='TaskErrorCode'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      scaleOutToken?: string(name='ScaleOutToken'),
    }
  ](name='Items'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTasks', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model GetPolarxCommodityRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  orderType?: string(name='OrderType'),
}

model GetPolarxCommodityResponseBody = {
  requestId?: string(name='RequestId'),
  DBInstance?: {
    type?: string(name='Type'),
    status?: string(name='Status'),
    DBNodeCount?: int32(name='DBNodeCount'),
    expired?: string(name='Expired'),
    createTime?: string(name='CreateTime'),
    payType?: string(name='PayType'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    port?: string(name='Port'),
    lockMode?: string(name='LockMode'),
    connAddrs?: [ 
      {
        type?: string(name='Type'),
        vSwitchId?: string(name='VSwitchId'),
        connectionString?: string(name='ConnectionString'),
        port?: string(name='Port'),
        VPCId?: string(name='VPCId'),
      }
    ](name='ConnAddrs'),
    description?: string(name='Description'),
    connectionString?: string(name='ConnectionString'),
    storageUsed?: long(name='StorageUsed'),
    expireDate?: string(name='ExpireDate'),
    commodityCode?: string(name='CommodityCode'),
    maintainStartTime?: string(name='MaintainStartTime'),
    DBInstanceType?: string(name='DBInstanceType'),
    DBNodeClass?: string(name='DBNodeClass'),
    maintainEndTime?: string(name='MaintainEndTime'),
    latestMinorVersion?: string(name='LatestMinorVersion'),
    DBType?: string(name='DBType'),
    VPCId?: string(name='VPCId'),
    minorVersion?: string(name='MinorVersion'),
    regionId?: string(name='RegionId'),
    DBNodes?: [ 
      {
        nodeClass?: string(name='NodeClass'),
        zoneId?: string(name='ZoneId'),
        id?: string(name='Id'),
        regionId?: string(name='RegionId'),
      }
    ](name='DBNodes'),
    network?: string(name='Network'),
    DBVersion?: string(name='DBVersion'),
    vSwitchId?: string(name='VSwitchId'),
    zoneId?: string(name='ZoneId'),
    engine?: string(name='Engine'),
    id?: string(name='Id'),
  }(name='DBInstance'),
  componentList?: [ 
    {
      type?: string(name='Type'),
      values?: [ string ](name='Values'),
      name?: string(name='Name'),
    }
  ](name='ComponentList'),
}

model GetPolarxCommodityResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolarxCommodityResponseBody(name='body'),
}

async function getPolarxCommodityWithOptions(request: GetPolarxCommodityRequest, runtime: Util.RuntimeOptions): GetPolarxCommodityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPolarxCommodity', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPolarxCommodity(request: GetPolarxCommodityRequest): GetPolarxCommodityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolarxCommodityWithOptions(request, runtime);
}

model GetPolarXPriceRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  nodeCount?: string(name='NodeCount'),
}

model GetPolarXPriceResponseBody = {
  requestId?: string(name='RequestId'),
  orderPriceList?: [ 
    {
      DBInstanceName?: string(name='DBInstanceName'),
      originalAmount?: string(name='OriginalAmount'),
      discountAmount?: string(name='DiscountAmount'),
      tradeAmount?: string(name='TradeAmount'),
      payType?: string(name='PayType'),
      totalCostAmount?: string(name='TotalCostAmount'),
      rules?: [ 
        {
          ruleDescId?: long(name='RuleDescId'),
          title?: string(name='Title'),
          name?: string(name='Name'),
        }
      ](name='Rules'),
    }
  ](name='OrderPriceList'),
}

model GetPolarXPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolarXPriceResponseBody(name='body'),
}

async function getPolarXPriceWithOptions(request: GetPolarXPriceRequest, runtime: Util.RuntimeOptions): GetPolarXPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPolarXPrice', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPolarXPrice(request: GetPolarXPriceRequest): GetPolarXPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolarXPriceWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyDatabaseDescriptionRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  dbName?: string(name='DbName'),
  dbDescription?: string(name='DbDescription'),
}

model ModifyDatabaseDescriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescriptionWithOptions(request: ModifyDatabaseDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDatabaseDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDatabaseDescription', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDatabaseDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceClassRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass'),
  clientToken?: string(name='ClientToken'),
}

model ModifyDBInstanceClassResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceClassResponseBody(name='body'),
}

async function modifyDBInstanceClassWithOptions(request: ModifyDBInstanceClassRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceClass', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceClassWithOptions(request, runtime);
}

model ModifyDBInstanceConfigRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  configName?: string(name='ConfigName'),
  configValue?: string(name='ConfigValue'),
}

model ModifyDBInstanceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfigWithOptions(request: ModifyDBInstanceConfigRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceConfig', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConfigWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceDescription', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyParameterRequest {
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
  paramLevel?: string(name='ParamLevel'),
  parameters?: string(name='Parameters'),
  clientToken?: string(name='ClientToken'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameterWithOptions(request: ModifyParameterRequest, runtime: Util.RuntimeOptions): ModifyParameterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyParameter', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterWithOptions(request, runtime);
}

model ModifySecurityIpsRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  groupName?: string(name='GroupName'),
  securityIPList?: string(name='SecurityIPList'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifySecurityIpsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityIps', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  DBInstanceName?: string(name='DBInstanceName'),
  currentConnectionString?: string(name='CurrentConnectionString'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseInstancePublicConnection', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDBInstance', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model RetryPolarxOrderRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  scaleOutToken?: string(name='ScaleOutToken'),
}

model RetryPolarxOrderResponseBody = {
  requestId?: string(name='RequestId'),
}

model RetryPolarxOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RetryPolarxOrderResponseBody(name='body'),
}

async function retryPolarxOrderWithOptions(request: RetryPolarxOrderRequest, runtime: Util.RuntimeOptions): RetryPolarxOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RetryPolarxOrder', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function retryPolarxOrder(request: RetryPolarxOrderRequest): RetryPolarxOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryPolarxOrderWithOptions(request, runtime);
}

model UpdateBackupPolicyRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  backupPeriod?: string(name='BackupPeriod'),
  backupPlanBegin?: string(name='BackupPlanBegin'),
  backupSetRetention?: int32(name='BackupSetRetention'),
  backupType?: string(name='BackupType'),
  backupWay?: string(name='BackupWay'),
  forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage'),
  isEnabled?: int32(name='IsEnabled'),
  localLogRetention?: int32(name='LocalLogRetention'),
  removeLogRetention?: int32(name='RemoveLogRetention'),
  logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace'),
}

model UpdateBackupPolicyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace'),
      DBInstanceName?: string(name='DBInstanceName'),
      backupWay?: string(name='BackupWay'),
      backupPeriod?: string(name='BackupPeriod'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage'),
      backupType?: string(name='BackupType'),
      localLogRetention?: int32(name='LocalLogRetention'),
      removeLogRetention?: int32(name='RemoveLogRetention'),
      backupPlanBegin?: string(name='BackupPlanBegin'),
      backupSetRetention?: int32(name='BackupSetRetention'),
      isEnabled?: int32(name='IsEnabled'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model UpdateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBackupPolicyResponseBody(name='body'),
}

async function updateBackupPolicyWithOptions(request: UpdateBackupPolicyRequest, runtime: Util.RuntimeOptions): UpdateBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateBackupPolicy', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateBackupPolicy(request: UpdateBackupPolicyRequest): UpdateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBackupPolicyWithOptions(request, runtime);
}

model UpdatePolarDBXInstanceNodeRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  dbInstanceNodeCount?: string(name='DbInstanceNodeCount'),
  clientToken?: string(name='ClientToken'),
}

model UpdatePolarDBXInstanceNodeResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model UpdatePolarDBXInstanceNodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePolarDBXInstanceNodeResponseBody(name='body'),
}

async function updatePolarDBXInstanceNodeWithOptions(request: UpdatePolarDBXInstanceNodeRequest, runtime: Util.RuntimeOptions): UpdatePolarDBXInstanceNodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdatePolarDBXInstanceNode', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updatePolarDBXInstanceNode(request: UpdatePolarDBXInstanceNodeRequest): UpdatePolarDBXInstanceNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePolarDBXInstanceNodeWithOptions(request, runtime);
}

model UpgradeDBInstanceKernelVersionRequest {
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  upgradeTime?: string(name='UpgradeTime'),
  switchTime?: string(name='SwitchTime'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  targetMinorVersion?: string(name='TargetMinorVersion'),
  DBInstanceName?: string(name='DBInstanceName'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceKernelVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeDBInstanceKernelVersion', '2020-02-02', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceKernelVersionWithOptions(request, runtime);
}

