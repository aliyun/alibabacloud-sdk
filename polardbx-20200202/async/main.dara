/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'polardbx';
  @version = '2020-02-02';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'polardbx.aliyuncs.com',
    ap-northeast-2-pop = 'polardbx.aliyuncs.com',
    ap-south-1 = 'polardbx.aliyuncs.com',
    ap-southeast-2 = 'polardbx.aliyuncs.com',
    ap-southeast-3 = 'polardbx.aliyuncs.com',
    ap-southeast-5 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-1 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-pop = 'polardbx.aliyuncs.com',
    cn-beijing-gov-1 = 'polardbx.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardbx.aliyuncs.com',
    cn-edge-1 = 'polardbx.aliyuncs.com',
    cn-fujian = 'polardbx.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-finance = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardbx.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardbx.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardbx.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardbx.aliyuncs.com',
    cn-north-2-gov-1 = 'polardbx.aliyuncs.com',
    cn-qingdao-nebula = 'polardbx.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardbx.aliyuncs.com',
    cn-shanghai-inner = 'polardbx.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-inner = 'polardbx.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardbx.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardbx.aliyuncs.com',
    cn-wuhan = 'polardbx.aliyuncs.com',
    cn-wulanchabu = 'polardbx.aliyuncs.com',
    cn-yushanfang = 'polardbx.aliyuncs.com',
    cn-zhangbei = 'polardbx.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardbx.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardbx.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardbx.aliyuncs.com',
    eu-central-1 = 'polardbx.aliyuncs.com',
    eu-west-1 = 'polardbx.aliyuncs.com',
    eu-west-1-oxs = 'polardbx.aliyuncs.com',
    me-east-1 = 'polardbx.aliyuncs.com',
    rus-west-1-pop = 'polardbx.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AlignStoragePrimaryAzoneRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  storageInstanceName?: string(name='StorageInstanceName', position='Query'),
  switchTime?: string(name='SwitchTime', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', position='Query'),
}

model AlignStoragePrimaryAzoneResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AlignStoragePrimaryAzoneResponse = {
  headers: map[string]string(name='headers'),
  body: AlignStoragePrimaryAzoneResponseBody(name='body'),
}

async function alignStoragePrimaryAzone(request: AlignStoragePrimaryAzoneRequest): AlignStoragePrimaryAzoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AlignStoragePrimaryAzone', 'POST', '/', 'json', false, 'json', request);
}

model AllocateColdDataVolumeRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzravgpt8q****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AllocateColdDataVolumeResponseBody = {
  requestId?: string(name='RequestId', example='D6A4256F-7B83-5BD7-9AC0-72E1FAC05330'),
}

model AllocateColdDataVolumeResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateColdDataVolumeResponseBody(name='body'),
}

async function allocateColdDataVolume(request: AllocateColdDataVolumeRequest): AllocateColdDataVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateColdDataVolume', 'POST', '/', 'json', false, 'json', request);
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', example='pxc-**************', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-**************', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: string(name='Port', example='3306', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CancelActiveOperationTasksRequest {
  ids: string(name='Ids', example='111', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CancelActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='111,1223'),
  requestId?: string(name='RequestId', example='AE4F6C34-065F-45AA-B5DC-4B8D816F6305'),
}

model CancelActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: CancelActiveOperationTasksResponseBody(name='body'),
}

async function cancelActiveOperationTasks(request: CancelActiveOperationTasksRequest): CancelActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelActiveOperationTasks', 'GET', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-acfmwolx3j4****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='pxc-szrwrbp693****', position='Query'),
  resourceType: string(name='ResourceType', example='PolarDBXInstance', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3WE34'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckCloudResourceAuthorizedRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  roleArn?: string(name='RoleArn', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole', position='Query'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  data?: {
    authorizationState?: string(name='AuthorizationState', example='0'),
    roleArn?: string(name='RoleArn', example='acs:ram::123456789012****:role/AliyunRdsInstanceEncryptionDefaultRole'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A501A191-BD70-5E50-98A9-C2A486A82****'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCloudResourceAuthorized', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', example='test', position='Query'),
  accountName: string(name='AccountName', example='testAccount', position='Query'),
  accountPassword: string(name='AccountPassword', example='Test@1111', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-**************', position='Query'),
  DBName?: string(name='DBName', example='testdb', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword', position='Query'),
}

model CreateAccountResponseBody = {
  message?: string(name='Message', example='****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupRequest {
  backupType?: string(name='BackupType', example='0', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-**************', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateBackupResponseBody = {
  data?: [ 
    {
      backupSetId?: long(name='BackupSetId', example='627833'),
    }
  ](name='Data'),
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBRequest {
  accountName: string(name='AccountName', example='testaccount', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite', position='Query'),
  charset: string(name='Charset', example='utf8mb4', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-**************', position='Query'),
  dbDescription?: string(name='DbDescription', example='db for test', position='Query'),
  dbName: string(name='DbName', example='testdb', position='Query'),
  mode?: string(name='Mode', example='auto', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword', position='Query'),
}

model CreateDBResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResponseBody(name='body'),
}

async function createDB(request: CreateDBRequest): CreateDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDB', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', example='true', position='Query'),
  CNNodeCount?: string(name='CNNodeCount', position='Query'),
  clientToken?: string(name='ClientToken', example='xxxxxx-xxx', position='Query'),
  cnClass?: string(name='CnClass', position='Query'),
  DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.2xlarge.2d', position='Query'),
  DBNodeCount?: int32(name='DBNodeCount', example='2', position='Query'),
  DNNodeCount?: string(name='DNNodeCount', position='Query'),
  dnClass?: string(name='DnClass', position='Query'),
  engineVersion: string(name='EngineVersion', example='2.0', position='Query'),
  isReadDBInstance?: boolean(name='IsReadDBInstance', example='false', position='Query'),
  networkType?: string(name='NetworkType', example='vpc', position='Query'),
  payType: string(name='PayType', example='PREPAY', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  primaryDBInstanceName?: string(name='PrimaryDBInstanceName', example='pxc-*********', position='Query'),
  primaryZone?: string(name='PrimaryZone', example='cn-shenzhen-e', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='null', position='Query'),
  secondaryZone?: string(name='SecondaryZone', example='cn-shenzhen-a', position='Query'),
  tertiaryZone?: string(name='TertiaryZone', example='cn-shenzhen-e', position='Query'),
  topologyType: string(name='TopologyType', example='3azones', position='Query'),
  usedTime?: int32(name='UsedTime', example='1', position='Query'),
  VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-*****', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-*********', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-a', position='Query'),
}

model CreateDBInstanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
  orderId?: string(name='OrderId', example='12345'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSuperAccountRequest {
  accountDescription?: string(name='AccountDescription', example='testdbadescription', position='Query'),
  accountName: string(name='AccountName', example='dba', position='Query'),
  accountPassword: string(name='AccountPassword', example='testdbapassword', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-************', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateSuperAccountResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model CreateSuperAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSuperAccountResponseBody(name='body'),
}

async function createSuperAccount(request: CreateSuperAccountRequest): CreateSuperAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSuperAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', example='testaccount', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-*********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', example='securityAccount', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='securityPassword', position='Query'),
}

model DeleteAccountResponseBody = {
  message?: string(name='Message', example='****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  dbName: string(name='DbName', example='testdb', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDBResponseBody = {
  message?: string(name='Message', example='*****'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDBResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResponseBody(name='body'),
}

async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountListRequest {
  accountName?: string(name='AccountName', example='testaccount', position='Query'),
  accountType?: string(name='AccountType', example='0', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeAccountListResponseBody = {
  data?: [ 
    {
      accountDescription?: string(name='AccountDescription', example='testaccount desc'),
      accountName?: string(name='AccountName', example='testAccount'),
      accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
      accountType?: string(name='AccountType', example='0'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-*********'),
      DBName?: string(name='DBName', example='testdb'),
      gmtCreated?: string(name='GmtCreated', example='2012-06-08T15:00Z'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
  success?: boolean(name='Success', example='true'),
}

model DescribeAccountListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountListResponseBody(name='body'),
}

async function describeAccountList(request: DescribeAccountListRequest): DescribeAccountListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationMaintainConfRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeActiveOperationMaintainConfResponseBody = {
  config?: {
    createdTime?: string(name='CreatedTime', example='2021-08-11T10:08:27Z'),
    cycleTime?: string(name='CycleTime', example='1,2,3,4,5,6,7'),
    cycleType?: string(name='CycleType', example='Week'),
    maintainEndTime?: string(name='MaintainEndTime', example='04:00:00Z'),
    maintainStartTime?: string(name='MaintainStartTime', example='04:00:00Z'),
    modifiedTime?: string(name='ModifiedTime', example='2021-08-11T10:08:27Z'),
    status?: long(name='Status', example='1'),
  }(name='Config'),
  hasConfig?: long(name='HasConfig', example='1'),
  requestId?: string(name='RequestId', example='1A586DCB-39A6-4050-81CC-C7BD4CCDB49F'),
}

model DescribeActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationMaintainConfResponseBody(name='body'),
}

async function describeActiveOperationMaintainConf(request: DescribeActiveOperationMaintainConfRequest): DescribeActiveOperationMaintainConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationMaintainConf', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTaskCountRequest {
  category?: string(name='Category', example='Category', position='Query'),
  product?: string(name='Product', example='polarx', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeActiveOperationTaskCountResponseBody = {
  needPop?: long(name='NeedPop', example='1'),
  requestId?: string(name='RequestId', example='EC7E27FC-58F8-4722-89BB-D1B6D0971956'),
  taskCount?: long(name='TaskCount', example='20'),
}

model DescribeActiveOperationTaskCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskCountResponseBody(name='body'),
}

async function describeActiveOperationTaskCount(request: DescribeActiveOperationTaskCountRequest): DescribeActiveOperationTaskCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTaskCount', 'GET', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTasksRequest {
  allowCancel?: long(name='AllowCancel', example='-1', position='Query'),
  allowChange?: long(name='AllowChange', example='-1', position='Query'),
  changeLevel?: string(name='ChangeLevel', example='all', position='Query'),
  dbType?: string(name='DbType', example='polarx', position='Query'),
  insName?: string(name='InsName', example='pxc-xxxxx', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='25', position='Query'),
  productId?: string(name='ProductId', example='polarx', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  status?: long(name='Status', example='-1', position='Query'),
  taskType?: string(name='TaskType', example='all', position='Query'),
}

model DescribeActiveOperationTasksResponseBody = {
  items?: [ 
    {
      allowCancel?: string(name='AllowCancel', example='0'),
      allowChange?: string(name='AllowChange', example='0'),
      changeLevel?: string(name='ChangeLevel', example='Risk'),
      changeLevelEn?: string(name='ChangeLevelEn', example='Risk repairment'),
      changeLevelZh?: string(name='ChangeLevelZh'),
      createdTime?: string(name='CreatedTime', example='2021-06-15T16:00:00Z'),
      currentAVZ?: string(name='CurrentAVZ', example='cn-shanghai-et-a'),
      dbType?: string(name='DbType', example='polarx'),
      dbVersion?: string(name='DbVersion', example='2.0'),
      deadline?: string(name='Deadline', example='2021-06-15T16:00:00Z'),
      id?: long(name='Id', example='1'),
      impact?: string(name='Impact', example='--'),
      impactEn?: string(name='ImpactEn', example='Transient instance disconnection'),
      impactZh?: string(name='ImpactZh'),
      insComment?: string(name='InsComment', example='xxx'),
      insName?: string(name='InsName', example='pxc-dd'),
      modifiedTime?: string(name='ModifiedTime', example='2021-06-15T16:00:00Z'),
      prepareInterval?: string(name='PrepareInterval', example='03:00:00'),
      region?: string(name='Region', example='cn-shanghai-et15-b01'),
      resultInfo?: string(name='ResultInfo', example='--'),
      startTime?: string(name='StartTime', example='2021-06-15T16:00:00Z'),
      status?: long(name='Status', example='3'),
      subInsNames?: [ string ](name='SubInsNames'),
      switchTime?: string(name='SwitchTime', example='2021-06-15T16:00:00Z'),
      taskType?: string(name='TaskType', example='rds_apsaradb_transfer'),
      taskTypeEn?: string(name='TaskTypeEn', example='--'),
      taskTypeZh?: string(name='TaskTypeZh', example='--'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='12'),
  requestId?: string(name='RequestId', example='xxxx'),
  totalRecordCount?: long(name='TotalRecordCount', example='23'),
}

model DescribeActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTasksResponseBody(name='body'),
}

async function describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): DescribeActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTasks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeArchiveTableListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  pageIndex: long(name='PageIndex', minimum=1, maximum=1000, position='Query'),
  pageSize: long(name='PageSize', minimum=20, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  schemaName?: string(name='SchemaName', position='Query'),
  status?: string(name='Status', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeArchiveTableListResponseBody = {
  data?: {
    pageIndex?: long(name='PageIndex'),
    pageSize?: long(name='PageSize'),
    pausedCount?: int32(name='PausedCount'),
    runningCount?: int32(name='RunningCount'),
    successCount?: int32(name='SuccessCount'),
    tables?: [ 
      {
        archiveStatus?: string(name='ArchiveStatus'),
        createdDate?: long(name='CreatedDate'),
        fileCount?: int32(name='FileCount'),
        lastSuccessArchiveTime?: long(name='LastSuccessArchiveTime'),
        schemaName?: string(name='SchemaName'),
        spaceSize?: double(name='SpaceSize'),
        tableName?: string(name='TableName'),
      }
    ](name='Tables'),
    tobeArchivedConut?: int32(name='TobeArchivedConut'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeArchiveTableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeArchiveTableListResponseBody(name='body'),
}

async function describeArchiveTableList(request: DescribeArchiveTableListRequest): DescribeArchiveTableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeArchiveTableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod', example='1001000'),
      backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z'),
      backupSetRetention?: int32(name='BackupSetRetention', example='7'),
      backupType?: string(name='BackupType', example='0'),
      backupWay?: string(name='BackupWay', example='P'),
      coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30'),
      coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30'),
      crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention'),
      crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-xxxxxx'),
      destCrossRegion?: string(name='DestCrossRegion'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1'),
      isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled'),
      isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled'),
      isEnabled?: int32(name='IsEnabled', example='1'),
      localLogRetention?: int32(name='LocalLogRetention', example='30'),
      localLogRetentionNumber?: int32(name='LocalLogRetentionNumber'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30'),
      removeLogRetention?: int32(name='RemoveLogRetention', example='7'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B87E2AB3-B7C9-4394-9160-7F639F732031'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSetRequest {
  backupSetId: string(name='BackupSetId', example='111', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-htri0ori2r****', position='Query'),
  destCrossRegion?: string(name='DestCrossRegion', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeBackupSetResponseBody = {
  data?: [ 
    {
      backupModel?: int32(name='BackupModel', example='0'),
      backupSetId?: long(name='BackupSetId', example='111'),
      backupSetSize?: long(name='BackupSetSize', example='88803195'),
      backupType?: int32(name='BackupType', example='1'),
      beginTime?: long(name='BeginTime', example='1650250861754'),
      endTime?: long(name='EndTime', example='1650251308000'),
      OSSList?: [ 
        {
          backupSetFile?: string(name='BackupSetFile', example='hins3084_data_20220418110623_qp.xb'),
          downloadLink?: string(name='DownloadLink', example='https://pre-rdsbak-cn-xxx.oss-cn-beijing.aliyuncs.com/custins2255/hins3084_data_20220418110623_qp.xb?OSSAccessKeyId=LTAI5tJEmRFdJ8aBPDR7****&Expires=1650441697&dd=7KJzkUSbXf6dwy'),
          intranetDownloadLink?: string(name='IntranetDownloadLink', example='http://pre-rdsbak-cn-beijing.oss-cn-beijing-internal.aliyuncs.com/custins2255/hins3084_data_20220418110623_qp.xb?'),
          linkExpiredTime?: string(name='LinkExpiredTime', example='2022-04-20T08:01:37Z'),
        }
      ](name='OSSList'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='successs'),
  requestId?: string(name='RequestId', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetResponseBody(name='body'),
}

async function describeBackupSet(request: DescribeBackupSetRequest): DescribeBackupSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSetListRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-xxxxxx', position='Query'),
  destCrossRegion?: string(name='DestCrossRegion', position='Query'),
  endTime?: long(name='EndTime', example='1635707845000', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', example='1635707845000', position='Query'),
}

model DescribeBackupSetListResponseBody = {
  data?: [ 
    {
      backupModel?: int32(name='BackupModel', example='0'),
      backupSetId?: long(name='BackupSetId', example='111'),
      backupSetSize?: long(name='BackupSetSize', example='88803195'),
      backupType?: int32(name='BackupType', example='1'),
      beginTime?: long(name='BeginTime', example='1635706960956'),
      endTime?: long(name='EndTime', example='1635706960956'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1A6D328C-84B8-40DC-BF49-6C73984D7494'),
  success?: boolean(name='Success', example='true'),
}

model DescribeBackupSetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetListResponseBody(name='body'),
}

async function describeBackupSetList(request: DescribeBackupSetListRequest): DescribeBackupSetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSetList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeBinaryLogListRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hz1fds', position='Query'),
  endTime: string(name='EndTime', example='2021-11-09 10:27:46', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=5, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', example='2021-09-09 10:27:46', position='Query'),
}

model DescribeBinaryLogListResponseBody = {
  logList?: [ 
    {
      beginTime?: string(name='BeginTime', example='2021-09-09 10:27:46'),
      createdTime?: string(name='CreatedTime', example='2021-09-09 10:27:46'),
      downloadLink?: string(name='DownloadLink', example='http://polarx-cdc-binlog-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/polardbx_cdc/pxc-hzfd132143sfds1/binlog.000001?Expires=1636469502&OSSAccessKeyId=LT13fds12dsafddsf&Signature=fdpm%bdsfadsa%2F%bdsafdsaf%3D'),
      endTime?: string(name='EndTime', example='2021-11-09 10:27:46'),
      fileName?: string(name='FileName', example='binlog.000001'),
      id?: long(name='Id', example='100'),
      logSize?: long(name='LogSize', example='536870912'),
      modifiedTime?: string(name='ModifiedTime', example='2021-11-09 10:27:46'),
      purgeStatus?: int32(name='PurgeStatus', example='0'),
      uploadHost?: string(name='UploadHost', example='10.110.88.9'),
      uploadStatus?: int32(name='UploadStatus', example='2'),
    }
  ](name='LogList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='2DFF784E-DC31-5BBC-9B25-9261CD9E0AA9'),
  totalNumber?: int32(name='TotalNumber', example='100'),
}

model DescribeBinaryLogListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBinaryLogListResponseBody(name='body'),
}

async function describeBinaryLogList(request: DescribeBinaryLogListRequest): DescribeBinaryLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBinaryLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCharacterSetRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-*********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeCharacterSetResponseBody = {
  data?: {
    characterSet?: [ string ](name='CharacterSet'),
    engine?: string(name='Engine', example='polarx'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='709C1E40-092D-4A3D-9958-6D7438******'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCharacterSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetResponseBody(name='body'),
}

async function describeCharacterSet(request: DescribeCharacterSetRequest): DescribeCharacterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharacterSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColdDataBasicInfoRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeColdDataBasicInfoResponseBody = {
  data?: {
    backupSetCount?: int32(name='BackupSetCount'),
    backupSetSpaceSize?: double(name='BackupSetSpaceSize'),
    cloudProduct?: string(name='CloudProduct'),
    currentSpaceSize?: double(name='CurrentSpaceSize'),
    dataRedundancyType?: string(name='DataRedundancyType'),
    enableStatus?: boolean(name='EnableStatus'),
    readAccessNum?: long(name='ReadAccessNum'),
    regionId?: string(name='RegionId'),
    volumeName?: string(name='VolumeName'),
    writeAccessNum?: double(name='WriteAccessNum'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeColdDataBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColdDataBasicInfoResponseBody(name='body'),
}

async function describeColdDataBasicInfo(request: DescribeColdDataBasicInfoRequest): DescribeColdDataBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColdDataBasicInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzaxhezhs5***', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  DBInstance?: {
    cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.xlarge.2e'),
    cnNodeCount?: int32(name='CnNodeCount', example='2'),
    commodityCode?: string(name='CommodityCode', example='drds_polarxpost_public_cn'),
    connAddrs?: [ 
      {
        connectionString?: string(name='ConnectionString', example='polardbx-xxx.aliyuncs.com'),
        port?: long(name='Port', example='3306'),
        type?: string(name='Type', example='VPC'),
        VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxxx'),
        vSwitchId?: string(name='VSwitchId'),
        vpcInstanceId?: string(name='VpcInstanceId', example='pxc-zkralxpc5d****'),
      }
    ](name='ConnAddrs'),
    connectionString?: string(name='ConnectionString'),
    createTime?: string(name='CreateTime', example='2021-08-31T08:56:25.000+0000'),
    DBInstanceType?: string(name='DBInstanceType', example='ReadWrite'),
    DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.large.2e'),
    DBNodeCount?: int32(name='DBNodeCount', example='2'),
    DBNodes?: [ 
      {
        computeNodeId?: string(name='ComputeNodeId'),
        dataNodeId?: string(name='DataNodeId', example='pxc-xdb-xxxxxx'),
        id?: string(name='Id'),
        nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
      }
    ](name='DBNodes'),
    DBType?: string(name='DBType', example='polarx'),
    DBVersion?: string(name='DBVersion', example='5.5'),
    description?: string(name='Description', example='test instance'),
    dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.x8.large.25'),
    dnNodeCount?: int32(name='DnNodeCount', example='2'),
    engine?: string(name='Engine', example='polarx'),
    expireDate?: string(name='ExpireDate', example='2022-08-31T16:00:00.000+0000'),
    expired?: string(name='Expired', example='false'),
    id?: string(name='Id', example='pxc-zkralxpc5d****'),
    kindCode?: int32(name='KindCode', example='18'),
    LTSVersions: [ string ](name='LTSVersions'),
    latestMinorVersion?: string(name='LatestMinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    lockMode?: string(name='LockMode', example='Unlock'),
    maintainEndTime?: string(name='MaintainEndTime', example='06:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='06:00'),
    minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    network?: string(name='Network', example='VPC'),
    payType?: string(name='PayType', example='Postpaid'),
    port?: string(name='Port', example='3306'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxx'),
    rightsSeparationEnabled?: boolean(name='RightsSeparationEnabled', example='false'),
    rightsSeparationStatus?: string(name='RightsSeparationStatus', example='disabled'),
    series?: string(name='Series', example='enterprise'),
    status?: string(name='Status', example='Running'),
    storageUsed?: long(name='StorageUsed', example='17042505728'),
    tagSet?: [ 
      {
        key?: string(name='Key', example='key2'),
        value?: string(name='Value', example='value2'),
      }
    ](name='TagSet'),
    type?: string(name='Type', example='ReadWrite'),
    VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxx'),
    vSwitchId?: string(name='VSwitchId'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId', example='9B2F3840-5C98-475C-B269-2D5C3A31797C'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceConfigRequest {
  configName: string(name='ConfigName', example='htap', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-*********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDBInstanceConfigResponseBody = {
  data?: {
    configName?: string(name='ConfigName', example='htap'),
    configValue?: string(name='ConfigValue'),
    dbInstanceName?: string(name='DbInstanceName'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceConfigResponseBody(name='body'),
}

async function describeDBInstanceConfig(request: DescribeDBInstanceConfigRequest): DescribeDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceHARequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceHAResponseBody = {
  data?: {
    primaryAzoneId?: string(name='PrimaryAzoneId'),
    primaryRegionId?: string(name='PrimaryRegionId'),
    secondaryAzoneId?: string(name='SecondaryAzoneId'),
    secondaryRegionId?: string(name='SecondaryRegionId'),
    topologyType?: string(name='TopologyType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceHAResponseBody(name='body'),
}

async function describeDBInstanceHA(request: DescribeDBInstanceHARequest): DescribeDBInstanceHAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceHA', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-*********', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDBInstanceSSLResponseBody = {
  data?: {
    certCommonName?: string(name='CertCommonName', example='pxc-sddddddcym7g7w****.polarx.singapore.rds.aliyuncs.com'),
    SSLEnabled?: boolean(name='SSLEnabled', example='false'),
    SSLExpiredTime?: string(name='SSLExpiredTime', example='2022-11-04T09:39:07Z'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceTDERequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDBInstanceTDEResponseBody = {
  data?: {
    TDEStatus?: string(name='TDEStatus', example='0'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTDEResponseBody(name='body'),
}

async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceTopologyRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDBInstanceTopologyResponseBody = {
  data?: {
    logicInstanceTopology?: {
      DBInstanceConnType?: string(name='DBInstanceConnType', example='lvs'),
      DBInstanceCreateTime?: string(name='DBInstanceCreateTime', example='2021-10-21T10:30:45Z 04:00:00'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='pxc-sprcym7g7wj7k'),
      DBInstanceId?: string(name='DBInstanceId', example='304726047'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-sprcym7g7w****'),
      DBInstanceStatus?: int32(name='DBInstanceStatus', example='8'),
      DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription', example='TDE_MODIFYING'),
      DBInstanceStorage?: int32(name='DBInstanceStorage', example='1'),
      engine?: string(name='Engine', example='polarx'),
      engineVersion?: string(name='EngineVersion', example='2.0'),
      historyItems?: [ 
        {
          activated?: boolean(name='Activated'),
          azone?: string(name='Azone'),
          characterType?: string(name='CharacterType'),
          DBInstanceId?: string(name='DBInstanceId'),
          DBInstanceName?: string(name='DBInstanceName'),
          phyInstanceName?: string(name='PhyInstanceName'),
          region?: string(name='Region'),
          role?: string(name='Role'),
        }
      ](name='HistoryItems'),
      items?: [ 
        {
          activated?: boolean(name='Activated', example='true'),
          azone?: string(name='Azone', example='cn-hangzhou-a'),
          azoneRoleList?: [ 
            {
              azone?: string(name='Azone', example='cn-hangzhou-a'),
              role?: string(name='Role', example='leader'),
            }
          ](name='AzoneRoleList'),
          characterType?: string(name='CharacterType'),
          connectionIp?: [ 
            {
              connectionString?: string(name='ConnectionString', example='pxc-xdb-m-pxcdym7g7w********.mysql.singapore.rds.aliyuncs.com'),
              DBInstanceNetType?: int32(name='DBInstanceNetType', example='1'),
              port?: string(name='Port', example='3306'),
            }
          ](name='ConnectionIp'),
          DBInstanceConnType?: int32(name='DBInstanceConnType'),
          DBInstanceCreateTime?: string(name='DBInstanceCreateTime', example='2021-10-21T10:30:45Z'),
          DBInstanceDescription?: string(name='DBInstanceDescription'),
          DBInstanceId?: string(name='DBInstanceId', example='304726049'),
          DBInstanceName?: string(name='DBInstanceName', example='pxc-i-tk6t4z****'),
          DBInstanceStatus?: int32(name='DBInstanceStatus', example='8'),
          DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription'),
          diskSize?: long(name='DiskSize', example='3145728'),
          engine?: string(name='Engine', example='mysql'),
          engineVersion?: string(name='EngineVersion', example='5.7'),
          lockMode?: int32(name='LockMode', example='0'),
          lockReason?: string(name='LockReason'),
          maintainEndTime?: string(name='MaintainEndTime'),
          maintainStartTime?: string(name='MaintainStartTime'),
          maxConnections?: int32(name='MaxConnections', example='4000'),
          maxIops?: int32(name='MaxIops', example='7000'),
          nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
          phyInstanceName?: string(name='PhyInstanceName'),
          region?: string(name='Region', example='cn-hangzhou'),
          role?: string(name='Role', example='master'),
          status?: string(name='Status', example='0'),
          version?: string(name='Version', example='polarx-cdc-kernel-2.0.0-3985896'),
        }
      ](name='Items'),
      lockMode?: int32(name='LockMode', example='0'),
      lockReason?: string(name='LockReason'),
      maintainEndTime?: string(name='MaintainEndTime', example='05:00:00'),
      maintainStartTime?: string(name='MaintainStartTime', example='04:00:00'),
    }(name='LogicInstanceTopology'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeDBInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTopologyResponseBody(name='body'),
}

async function describeDBInstanceTopology(request: DescribeDBInstanceTopologyRequest): DescribeDBInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceViaEndpointRequest {
  endpoint: string(name='Endpoint', example='pxc-hz*******.polarx.rds.aliyuncs.com', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceViaEndpointResponseBody = {
  DBInstance?: {
    cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.xlarge.2e'),
    cnNodeCount?: int32(name='CnNodeCount', example='2'),
    commodityCode?: string(name='CommodityCode', example='drds_polarxpost_public_cn'),
    connAddrs?: [ 
      {
        connectionString?: string(name='ConnectionString', example='polardbx-xxx.aliyuncs.com'),
        port?: long(name='Port', example='3306'),
        type?: string(name='Type', example='VPC'),
        VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxxx'),
        vSwitchId?: string(name='VSwitchId', example='vsw-*********'),
        vpcInstanceId?: string(name='VpcInstanceId', example='pxc-zkralxpc5d****'),
      }
    ](name='ConnAddrs'),
    connectionString?: string(name='ConnectionString', example='pxc-sprpx766vo****.polarx.singapore.rds.aliyuncs.com'),
    createTime?: string(name='CreateTime', example='2021-08-31T08:56:25.000+0000'),
    DBInstanceType?: string(name='DBInstanceType', example='ReadWrite'),
    DBNodeClass?: string(name='DBNodeClass', example='polarx.x4.large.2e'),
    DBNodeCount?: int32(name='DBNodeCount', example='2'),
    DBNodes?: [ 
      {
        computeNodeId?: string(name='ComputeNodeId', example='pxc-i-********'),
        dataNodeId?: string(name='DataNodeId', example='pxc-xdb-xxxxxx'),
        id?: string(name='Id', example='pxi-*********'),
        nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
      }
    ](name='DBNodes'),
    DBType?: string(name='DBType', example='polarx'),
    DBVersion?: string(name='DBVersion', example='5.5'),
    description?: string(name='Description', example='test instance'),
    dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.x8.large.25'),
    dnNodeCount?: int32(name='DnNodeCount', example='2'),
    engine?: string(name='Engine', example='MySQL'),
    expireDate?: string(name='ExpireDate', example='2022-08-31T16:00:00.000+0000'),
    expired?: string(name='Expired', example='false'),
    id?: string(name='Id', example='pxc-zkralxpc5d****'),
    kindCode?: int32(name='KindCode', example='18'),
    LTSVersions: [ string ](name='LTSVersions'),
    latestMinorVersion?: string(name='LatestMinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    lockMode?: string(name='LockMode', example='Unlock'),
    maintainEndTime?: string(name='MaintainEndTime', example='06:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='06:00'),
    minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.11-16301083_xcluster-20210805'),
    network?: string(name='Network', example='VPC'),
    payType?: string(name='PayType', example='Postpaid'),
    port?: string(name='Port', example='3306'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxx'),
    rightsSeparationEnabled?: boolean(name='RightsSeparationEnabled', example='false'),
    rightsSeparationStatus?: string(name='RightsSeparationStatus', example='disabled'),
    series?: string(name='Series', example='enterprise'),
    status?: string(name='Status', example='Running'),
    storageUsed?: long(name='StorageUsed', example='17042505728'),
    tagSet?: [ 
      {
        key?: string(name='Key', example='key2'),
        value?: string(name='Value', example='value2'),
      }
    ](name='TagSet'),
    type?: string(name='Type', example='ReadWrite'),
    VPCId?: string(name='VPCId', description='VPC ID。', example='vpc-xxxxx'),
    vSwitchId?: string(name='VSwitchId', example='vsw-********'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId', example='14036EBE-CF2E-44DB-ACE9-AC6157D3A6FC'),
}

model DescribeDBInstanceViaEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceViaEndpointResponseBody(name='body'),
}

async function describeDBInstanceViaEndpoint(request: DescribeDBInstanceViaEndpointRequest): DescribeDBInstanceViaEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceViaEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  instanceId?: string(name='InstanceId', example='dinga93c84f4d***', position='Query'),
  mustHasCdc?: boolean(name='MustHasCdc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=5, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyst47hjw***', position='Query'),
  series?: string(name='Series', example='enterprise', position='Query'),
  tags?: string(name='Tags', example='[{\\"TagKey\\":\\"test\\",\\"TagValue\\":\\"test-value\\"}]', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  DBInstances?: [ 
    {
      cdcInstanceName?: string(name='CdcInstanceName', example='pxc-c-dmlgit****'),
      cnNodeClassCode?: string(name='CnNodeClassCode', example='polarx.x4.large.2e'),
      cnNodeCount?: int32(name='CnNodeCount', example='2'),
      commodityCode?: string(name='CommodityCode', example='drds_polarxpre_public_cn'),
      containBinlogX?: boolean(name='ContainBinlogX', example='true'),
      createTime?: string(name='CreateTime', example='2021-11-01T03:49:50.000+0000'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-xxxxx'),
      DBType?: string(name='DBType', example='polarx'),
      DBVersion?: string(name='DBVersion', example='5.7'),
      description?: string(name='Description'),
      dnNodeClassCode?: string(name='DnNodeClassCode', example='mysql.n4.medium.25'),
      dnNodeCount?: int32(name='DnNodeCount', example='2'),
      engine?: string(name='Engine', example='polarx'),
      expireTime?: string(name='ExpireTime', example='2021-12-01T16:00:00.000+0000'),
      expired?: boolean(name='Expired', example='false'),
      id?: string(name='Id', example='pxc-hzr2yeov9jmg3z'),
      lockMode?: string(name='LockMode', example='Unlock'),
      lockReason?: string(name='LockReason'),
      minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.12-16349923_xcluster-20210926'),
      network?: string(name='Network', example='VPC'),
      nodeClass?: string(name='NodeClass', example='polarx.x4.large.2e'),
      nodeCount?: int32(name='NodeCount', example='5'),
      nodes?: [ 
        {
          classCode?: string(name='ClassCode', example='polarx.x4.large.2e'),
          id?: string(name='Id'),
          regionId?: string(name='RegionId', example='cn-hangzhou-g-aliyun'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
        }
      ](name='Nodes'),
      payType?: string(name='PayType', example='Prepaid'),
      readDBInstances?: [ string ](name='ReadDBInstances'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-xxxxxx'),
      series?: string(name='Series', example='enterprise'),
      status?: string(name='Status', example='Running'),
      storageUsed?: long(name='StorageUsed', example='40658534400'),
      supportBinlogX?: boolean(name='SupportBinlogX', example='true'),
      tagSet?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='TagSet'),
      type?: string(name='Type', example='ReadWrite'),
      VPCId?: string(name='VPCId', description='VPC ID。', example='VPCID'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='DBInstances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  totalNumber?: int32(name='TotalNumber', example='30'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBNodePerformanceRequest {
  characterType: string(name='CharacterType', example='polarx_cn', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-*******', position='Query'),
  DBNodeIds: string(name='DBNodeIds', example='pxc-i-******,pxc-i-*******', position='Query'),
  DBNodeRole?: string(name='DBNodeRole', example='master', position='Query'),
  endTime: string(name='EndTime', example='2012-06-18T15:00Z', position='Query'),
  key: string(name='Key', example='Cpu_Usage,Mem_Usage', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', example='2012-06-08T15:00Z', position='Query'),
}

model DescribeDBNodePerformanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
  endTime?: string(name='EndTime', example='2021-10-20T02:00Z'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      DBNodeId?: string(name='DBNodeId', example='pxc-i-********'),
      measurement?: string(name='Measurement', example='Logic_TPS'),
      metricName?: string(name='MetricName', example='logic_tps'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp', example='1600822800000'),
          value?: string(name='Value', example='42.38'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId', example='EFB5E10B-5268-170F-A378-9AF86CCEACC8'),
  startTime?: string(name='StartTime', example='2021-10-20T00:00Z'),
}

model DescribeDBNodePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBNodePerformanceResponseBody(name='body'),
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBNodePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbListRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  DBName?: string(name='DBName', example='db_name', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDbListResponseBody = {
  data?: [ 
    {
      accounts?: [ 
        {
          accountName?: string(name='AccountName', example='root4test'),
          accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite'),
        }
      ](name='Accounts'),
      characterSetName?: string(name='CharacterSetName', example='utf8mb4'),
      DBDescription?: string(name='DBDescription', example='test'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-********'),
      DBName?: string(name='DBName', example='test'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbListResponseBody(name='body'),
}

async function describeDbList(request: DescribeDbListRequest): DescribeDbListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDistributeTableListRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  dbName: string(name='DbName', example='sbtest1', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDistributeTableListResponseBody = {
  data?: {
    tables?: [ 
      {
        dbKey?: string(name='DbKey', example='id'),
        tableName?: string(name='TableName', example='sbtest1'),
        tableType?: string(name='TableType', example='multi'),
        tbKey?: string(name='TbKey', example='“”'),
      }
    ](name='Tables'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeDistributeTableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDistributeTableListResponseBody(name='body'),
}

async function describeDistributeTableList(request: DescribeDistributeTableListRequest): DescribeDistributeTableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDistributeTableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  endTime?: string(name='EndTime', example='2021-10-18T03:07:25Z', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', example='2021-10-18T03:07:25Z', position='Query'),
}

model DescribeEventsResponseBody = {
  eventItems?: [ 
    {
      eventId?: long(name='EventId', example='50421290'),
      eventName?: string(name='EventName', example='ModifySecurityIps'),
      eventPayload?: string(name='EventPayload', example='{\\"Domain\\": \\"rds-cn-hangzhou.aliyuncs.com\\"}'),
      eventReason?: string(name='EventReason', example='FROM_USER'),
      eventRecordTime?: string(name='EventRecordTime', example='2021-10-15T06:39:49Z'),
      eventTime?: string(name='EventTime', example='2021-10-15T06:35:00Z'),
      eventType?: string(name='EventType', example='SecurityManagement'),
      eventUserType?: string(name='EventUserType', example='USRE'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceName?: string(name='ResourceName', example='px-bp1v8udesc89g156g'),
      resourceType?: string(name='ResourceType', example='instance'),
    }
  ](name='EventItems'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='4748127A-6D50-432C-B635-433467074C27'),
  totalRecordCount?: long(name='TotalRecordCount', example='20'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvents', 'GET', '/', 'json', false, 'json', request);
}

model DescribeParameterTemplatesRequest {
  DBInstanceId: string(name='DBInstanceId', example='pxc-********', position='Query'),
  paramLevel?: string(name='ParamLevel', example='compute', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeParameterTemplatesResponseBody = {
  data?: {
    engine?: string(name='Engine', example='polarx'),
    engineVersion?: string(name='EngineVersion', example='2.0'),
    parameterCount?: int32(name='ParameterCount', example='218'),
    parameters?: [ 
      {
        checkingCode?: string(name='CheckingCode', example='[0|1]'),
        dynamic?: int32(name='Dynamic', example='0'),
        parameterDescription?: string(name='ParameterDescription', example='polarx hatp addition param'),
        parameterName?: string(name='ParameterName', example='loose_enable_gts'),
        parameterValue?: string(name='ParameterValue', example='1'),
        revisable?: int32(name='Revisable', example='0'),
      }
    ](name='Parameters'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  DBInstanceId: string(name='DBInstanceId', example='pxc-********', position='Query'),
  paramLevel?: string(name='ParamLevel', example='compute', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeParametersResponseBody = {
  data?: {
    configParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName', example='CONN_POOL_XPROTO_STORAGE_DB_PORT'),
        parameterValue?: string(name='ParameterValue', example='-1'),
      }
    ](name='ConfigParameters'),
    engine?: string(name='Engine', example='polarx'),
    engineVersion?: string(name='EngineVersion', example='2.0'),
    runningParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName', example='CONN_POOL_XPROTO_STORAGE_DB_PORT'),
        parameterValue?: string(name='ParameterValue', example='-1'),
      }
    ](name='RunningParameters'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6BA32080EEA'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  code?: int32(name='Code', example='200'),
  errorCode?: int32(name='ErrorCode', example='200'),
  message?: string(name='Message', example='success'),
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', example='ch-hangzhou'),
      supportPolarx10?: boolean(name='SupportPolarx10', example='true'),
      supportPolarx20?: boolean(name='SupportPolarx20', example='true'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', example='true'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScaleOutMigrateTaskListRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-********', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeScaleOutMigrateTaskListResponseBody = {
  progress?: int32(name='Progress', example='32'),
  requestId?: string(name='RequestId', example='C458B1E8-1683-3645-B154-6BA32080EEA'),
}

model DescribeScaleOutMigrateTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScaleOutMigrateTaskListResponseBody(name='body'),
}

async function describeScaleOutMigrateTaskList(request: DescribeScaleOutMigrateTaskListRequest): DescribeScaleOutMigrateTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScaleOutMigrateTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityIpsRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeSecurityIpsResponseBody = {
  data?: {
    DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName', example='defaultGroup'),
        securityIPList?: string(name='SecurityIPList', example='127.0.0.1,172.168.0.0'),
      }
    ](name='GroupItems'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='14036EBE-CF2E-44DB-ACE9-AC6157D3A6FC'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-xxx', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tagKey?: string(name='TagKey', example='test', position='Query'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='requestid'),
  tagInfos?: [ 
    {
      DBInstanceIds?: [ string ](name='DBInstanceIds'),
      tagKey?: string(name='TagKey', example='testKey'),
      tagValue?: string(name='TagValue', example='testValue'),
    }
  ](name='TagInfos'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  DBInstanceId: string(name='DBInstanceId', example='pxc-hzjasd****', position='Query'),
  endTime: string(name='EndTime', example='2021-11-04', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='30', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='2021-11-01', position='Query'),
}

model DescribeTasksResponseBody = {
  items?: [ 
    {
      beginTime?: string(name='BeginTime', example='2021-10-20T19:40:00Z'),
      DBName?: string(name='DBName', example='DBName'),
      finishTime?: string(name='FinishTime', example='2021-10-20T20:00:00Z'),
      progress?: string(name='Progress', example='80'),
      progressInfo?: string(name='ProgressInfo', example='ProgressInfo'),
      scaleOutToken?: string(name='ScaleOutToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
      status?: string(name='Status', example='RUNNING'),
      taskAction?: string(name='TaskAction', example='multi_scale_out'),
      taskErrorCode?: string(name='TaskErrorCode', example='TaskErrorCode'),
      taskErrorMessage?: string(name='TaskErrorMessage', example='TaskErrorMessage'),
      taskId?: string(name='TaskId', example='20089398'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='30'),
  requestId?: string(name='RequestId', example='D6045D78-C119-5A17-9DEA-0F810394E008'),
  totalRecordCount?: int32(name='TotalRecordCount', example='2'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserEncryptionKeyListRequest {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  data?: {
    keyIds?: [ string ](name='KeyIds'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserEncryptionKeyList', 'POST', '/', 'json', false, 'json', request);
}

model DisableRightsSeparationRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-sprcym7g7w****', position='Query'),
  dbaAccountName: string(name='DbaAccountName', example='account_1', position='Query'),
  dbaAccountPassword: string(name='DbaAccountPassword', example='*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hanghzou', position='Query'),
}

model DisableRightsSeparationResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FE5D94E3-3C93-3594-95D9-AAED2A980915'),
  success?: boolean(name='Success', example='true'),
}

model DisableRightsSeparationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRightsSeparationResponseBody(name='body'),
}

async function disableRightsSeparation(request: DisableRightsSeparationRequest): DisableRightsSeparationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableRightsSeparation', 'POST', '/', 'json', false, 'json', request);
}

model EnableRightsSeparationRequest {
  auditAccountDescription?: string(name='AuditAccountDescription', example='test123', position='Query'),
  auditAccountName: string(name='AuditAccountName', example='account_audit', position='Query'),
  auditAccountPassword: string(name='AuditAccountPassword', example='******', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountDescription?: string(name='SecurityAccountDescription', example='test123', position='Query'),
  securityAccountName: string(name='SecurityAccountName', example='account_sec', position='Query'),
  securityAccountPassword: string(name='SecurityAccountPassword', example='*****', position='Query'),
}

model EnableRightsSeparationResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model EnableRightsSeparationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRightsSeparationResponseBody(name='body'),
}

async function enableRightsSeparation(request: EnableRightsSeparationRequest): EnableRightsSeparationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableRightsSeparation', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='xxdds', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='PolarDBXInstance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='1'),
      value?: string(name='Value', example='2'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='xxdd'),
  requestId?: string(name='RequestId', example='xxxx-xxxxxx'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='pxc-xxxx'),
      resourceType?: string(name='ResourceType', example='PolarDBXInstance'),
      tagKey?: string(name='TagKey', example='1'),
      tagValue?: string(name='TagValue', example='1'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', example='account', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  message?: string(name='Message', example='msg'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPrivilegeRequest {
  accountName: string(name='AccountName', example='account_sec', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', example='ReadWrite', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p', position='Query'),
  dbName?: string(name='DbName', example='sbtest', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', example='account_audit', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='*****', position='Query'),
}

model ModifyAccountPrivilegeResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountPrivilegeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPrivilegeResponseBody(name='body'),
}

async function modifyAccountPrivilege(request: ModifyAccountPrivilegeRequest): ModifyAccountPrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPrivilege', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationMaintainConfRequest {
  cycleTime: string(name='CycleTime', example='1,2,3,4,5,6,7', position='Query'),
  cycleType: string(name='CycleType', example='Week', position='Query'),
  maintainEndTime: string(name='MaintainEndTime', example='02:00:00Z', position='Query'),
  maintainStartTime: string(name='MaintainStartTime', example='02:00:00Z', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  status: int32(name='Status', example='1', position='Query'),
}

model ModifyActiveOperationMaintainConfResponseBody = {
  requestId?: string(name='RequestId', example='4035409E-7297-4115-ABC9-C1C3942BC069'),
}

model ModifyActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationMaintainConfResponseBody(name='body'),
}

async function modifyActiveOperationMaintainConf(request: ModifyActiveOperationMaintainConfRequest): ModifyActiveOperationMaintainConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationMaintainConf', 'GET', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationTasksRequest {
  ids: string(name='Ids', example='1', position='Query'),
  immediateStart?: long(name='ImmediateStart', example='1', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  switchTime?: string(name='SwitchTime', example='2021-08-15T12:00:00Z', position='Query'),
}

model ModifyActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='1'),
  requestId?: string(name='RequestId', example='8C9CC90A-9532-4752-B59F-580112C5A45B'),
}

model ModifyActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationTasksResponseBody(name='body'),
}

async function modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): ModifyActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceClassRequest {
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20', position='Query'),
  cnClass?: string(name='CnClass', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  dnClass?: string(name='DnClass', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass', example='polarx.x4.xlarge.2e', position='Query'),
}

model ModifyDBInstanceClassResponseBody = {
  orderId?: string(name='OrderId', example='20211103105558'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceClassResponseBody(name='body'),
}

async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConfigRequest {
  configName: string(name='ConfigName', example='ENABLE_CONSISTENT_REPLICA_READ', position='Query'),
  configValue: string(name='ConfigValue', example='true', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDBInstanceConfigResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionString: string(name='ConnectionString', example='pxc-unrf5ssig0ecg8.polarx.huhehaote.rds.aliyuncs.com', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-unrf5ssig0ecg8', position='Query'),
  newPort: string(name='NewPort', example='3300', position='Query'),
  newPrefix: string(name='NewPrefix', example='test2', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    connectionString?: string(name='ConnectionString', example='test2.polarx.huhehaote.rds.aliyuncs.com'),
    DBInstanceName?: string(name='DBInstanceName', example='pxc-unrf5ssig0ecg8'),
    DBInstanceNetType?: string(name='DBInstanceNetType', example='1'),
    port?: string(name='Port', example='3300'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='c3cf535c-a585-11ea-8263-00163e04d3a7'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription: string(name='DBInstanceDescription', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseDescriptionRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  dbDescription: string(name='DbDescription', position='Query'),
  dbName: string(name='DbName', example='testDB', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseDescriptionResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParameterRequest {
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20', position='Query'),
  DBInstanceId: string(name='DBInstanceId', example='pxc-hzjasdyuoo', position='Query'),
  paramLevel?: string(name='ParamLevel', example='compute', position='Query'),
  parameters: string(name='Parameters', example='{"CONN_POOL_BLOCK_TIMEOUT":6000}', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIpsRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  groupName?: string(name='GroupName', example='default', position='Query'),
  modifyMode?: string(name='ModifyMode', example='1', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityIPList: string(name='SecurityIPList', example='127.0.0.1,192.168.0.0', position='Query'),
}

model ModifySecurityIpsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseColdDataVolumeRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzravgpt8q****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ReleaseColdDataVolumeResponseBody = {
  requestId?: string(name='RequestId', example='EA330983-C895-57C0-AE82-5A63106EBB10'),
}

model ReleaseColdDataVolumeResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseColdDataVolumeResponseBody(name='body'),
}

async function releaseColdDataVolume(request: ReleaseColdDataVolumeRequest): ReleaseColdDataVolumeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseColdDataVolume', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  currentConnectionString: string(name='CurrentConnectionString', example='pxc-hzjasdyuoo.polarx.rds.aliyuncs.com', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', example='account', position='Query'),
  accountPassword: string(name='AccountPassword', example='*****', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-htri0ori2r4k9p', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', example='account_sec', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', example='*****', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73559800-3c8c-11ec-bd40-99cfcff3fe1e'),
  success?: boolean(name='Success', example='true'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBInstanceRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchDBInstanceHARequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  switchTime?: string(name='SwitchTime', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', position='Query'),
  targetPrimaryAzoneId?: string(name='TargetPrimaryAzoneId', position='Query'),
  targetPrimaryRegionId?: string(name='TargetPrimaryRegionId', position='Query'),
}

model SwitchDBInstanceHAResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SwitchDBInstanceHAResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchDBInstanceHAResponseBody(name='body'),
}

async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchDBInstanceHA', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='PolarDBXInstance', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='12'),
      value?: string(name='Value', example='22'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='requestId', example='xxxx-xxxx'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='PolarDBXInstance', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='RequestId', example='xxxxxx'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBackupPolicyRequest {
  backupPeriod?: string(name='BackupPeriod', example='1001000', position='Query'),
  backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z', position='Query'),
  backupSetRetention?: int32(name='BackupSetRetention', example='30', position='Query'),
  backupType?: string(name='BackupType', example='0', position='Query'),
  backupWay?: string(name='BackupWay', example='P', position='Query'),
  coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30', position='Query'),
  coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30', position='Query'),
  crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention', position='Query'),
  crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasdyuoo', position='Query'),
  destCrossRegion?: string(name='DestCrossRegion', position='Query'),
  forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1', position='Query'),
  isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled', position='Query'),
  isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled', position='Query'),
  isEnabled?: int32(name='IsEnabled', example='1', position='Query'),
  localLogRetention?: int32(name='LocalLogRetention', example='7', position='Query'),
  localLogRetentionNumber?: int32(name='LocalLogRetentionNumber', position='Query'),
  logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  removeLogRetention?: int32(name='RemoveLogRetention', example='7', position='Query'),
}

model UpdateBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod', example='1001000'),
      backupPlanBegin?: string(name='BackupPlanBegin', example='03:00Z'),
      backupSetRetention?: int32(name='BackupSetRetention', example='30'),
      backupType?: string(name='BackupType', example='0'),
      backupWay?: string(name='BackupWay', example='P'),
      coldDataBackupInterval?: int32(name='ColdDataBackupInterval', example='30'),
      coldDataBackupRetention?: int32(name='ColdDataBackupRetention', example='30'),
      crossRegionDataBackupRetention?: int32(name='CrossRegionDataBackupRetention'),
      crossRegionLogBackupRetention?: int32(name='CrossRegionLogBackupRetention'),
      DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasdyuoo'),
      destCrossRegion?: string(name='DestCrossRegion'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', example='1'),
      isCrossRegionDataBackupEnabled?: boolean(name='IsCrossRegionDataBackupEnabled'),
      isCrossRegionLogBackupEnabled?: boolean(name='IsCrossRegionLogBackupEnabled'),
      isEnabled?: int32(name='IsEnabled', example='1'),
      localLogRetention?: int32(name='LocalLogRetention', example='7'),
      localLogRetentionNumber?: int32(name='LocalLogRetentionNumber'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', example='30'),
      removeLogRetention?: int32(name='RemoveLogRetention', example='7'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  success?: boolean(name='Success', example='true'),
}

model UpdateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBackupPolicyResponseBody(name='body'),
}

async function updateBackupPolicy(request: UpdateBackupPolicyRequest): UpdateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDBInstanceSSLRequest {
  certCommonName?: string(name='CertCommonName', example='pxc-hzrqjarxdocd4t.polarx.rds.aliyuncs.com', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  enableSSL: boolean(name='EnableSSL', example='true', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateDBInstanceSSLResponseBody = {
  data?: {
    taskId?: long(name='TaskId', example='2209883'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdateDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDBInstanceSSLResponseBody(name='body'),
}

async function updateDBInstanceSSL(request: UpdateDBInstanceSSLRequest): UpdateDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDBInstanceTDERequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  encryptionKey?: string(name='EncryptionKey', example='RkVBNURDMjAtNkQ4QS01OTc5LTk3QUEtRkM1NzU0Nk******', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  roleArn?: string(name='RoleArn', example='acs:ram::1406926****:role/aliyunrdsinstanceencryptiondefaultrole', position='Query'),
  TDEStatus: int32(name='TDEStatus', example='1', position='Query'),
}

model UpdateDBInstanceTDEResponseBody = {
  data?: {
    taskId?: string(name='TaskId', example='42292****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdateDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDBInstanceTDEResponseBody(name='body'),
}

async function updateDBInstanceTDE(request: UpdateDBInstanceTDERequest): UpdateDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePolarDBXInstanceNodeRequest {
  CNNodeCount?: string(name='CNNodeCount', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20', position='Query'),
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasdyuoo', position='Query'),
  DNNodeCount?: string(name='DNNodeCount', example='2', position='Query'),
  dbInstanceNodeCount?: string(name='DbInstanceNodeCount', example='3', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdatePolarDBXInstanceNodeResponseBody = {
  orderId?: string(name='OrderId', example='20211103105558'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
}

model UpdatePolarDBXInstanceNodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePolarDBXInstanceNodeResponseBody(name='body'),
}

async function updatePolarDBXInstanceNode(request: UpdatePolarDBXInstanceNodeRequest): UpdatePolarDBXInstanceNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePolarDBXInstanceNode', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceKernelVersionRequest {
  DBInstanceName: string(name='DBInstanceName', example='pxc-hzjasd****', position='Query'),
  minorVersion?: string(name='MinorVersion', example='polarx-kernel_5.4.12-16349923_xcluster-20210926', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  switchMode?: string(name='SwitchMode', example='0', position='Query'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName', example='pxc-hzjasd****'),
  requestId?: string(name='RequestId', example='FEA5DC20-6D8A-5979-97AA-FC57546ADC20'),
  targetMinorVersion?: string(name='TargetMinorVersion', example='polarx-kernel_5.4.7-16001481_xcluster-20200910'),
  taskId?: string(name='TaskId', example='422922413'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceKernelVersion', 'POST', '/', 'json', false, 'json', request);
}

