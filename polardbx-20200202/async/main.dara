/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'polardbx';
  @version = '2020-02-02';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'polardbx.aliyuncs.com',
    ap-northeast-2-pop = 'polardbx.aliyuncs.com',
    ap-south-1 = 'polardbx.aliyuncs.com',
    ap-southeast-2 = 'polardbx.aliyuncs.com',
    ap-southeast-3 = 'polardbx.aliyuncs.com',
    ap-southeast-5 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-1 = 'polardbx.aliyuncs.com',
    cn-beijing-finance-pop = 'polardbx.aliyuncs.com',
    cn-beijing-gov-1 = 'polardbx.aliyuncs.com',
    cn-beijing-nu16-b01 = 'polardbx.aliyuncs.com',
    cn-edge-1 = 'polardbx.aliyuncs.com',
    cn-fujian = 'polardbx.aliyuncs.com',
    cn-haidian-cm12-c01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'polardbx.aliyuncs.com',
    cn-hangzhou-finance = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'polardbx.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'polardbx.aliyuncs.com',
    cn-hangzhou-test-306 = 'polardbx.aliyuncs.com',
    cn-hongkong-finance-pop = 'polardbx.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'polardbx.aliyuncs.com',
    cn-north-2-gov-1 = 'polardbx.aliyuncs.com',
    cn-qingdao-nebula = 'polardbx.aliyuncs.com',
    cn-shanghai-et15-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-et2-b01 = 'polardbx.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardbx.aliyuncs.com',
    cn-shanghai-inner = 'polardbx.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardbx.aliyuncs.com',
    cn-shenzhen-inner = 'polardbx.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'polardbx.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'polardbx.aliyuncs.com',
    cn-wuhan = 'polardbx.aliyuncs.com',
    cn-wulanchabu = 'polardbx.aliyuncs.com',
    cn-yushanfang = 'polardbx.aliyuncs.com',
    cn-zhangbei = 'polardbx.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'polardbx.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'polardbx.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'polardbx.aliyuncs.com',
    eu-central-1 = 'polardbx.aliyuncs.com',
    eu-west-1 = 'polardbx.aliyuncs.com',
    eu-west-1-oxs = 'polardbx.aliyuncs.com',
    me-east-1 = 'polardbx.aliyuncs.com',
    rus-west-1-pop = 'polardbx.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateInstancePublicConnectionRequest {
  connectionStringPrefix: string(name='ConnectionStringPrefix', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port: string(name='Port', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateInstancePublicConnectionResponseBody(name='body'),
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CancelActiveOperationTasksRequest {
  ids: string(name='Ids', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CancelActiveOperationTasksResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: CancelActiveOperationTasksResponseBody(name='body'),
}

async function cancelActiveOperationTasks(request: CancelActiveOperationTasksRequest): CancelActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelActiveOperationTasks', 'GET', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='新资源组ID', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: string(name='ResourceId', description='资源ID', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckCloudResourceAuthorizedRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
}

model CheckCloudResourceAuthorizedResponseBody = {
  data?: {
    authorizationState?: string(name='AuthorizationState'),
    roleArn?: string(name='RoleArn'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckCloudResourceAuthorizedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudResourceAuthorizedResponseBody(name='body'),
}

async function checkCloudResourceAuthorized(request: CheckCloudResourceAuthorizedRequest): CheckCloudResourceAuthorizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCloudResourceAuthorized', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', position='Query'),
}

model CreateAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupRequest {
  backupType?: string(name='BackupType', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateBackupResponseBody = {
  data?: [ 
    {
      backupSetId?: long(name='BackupSetId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBackupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupResponseBody(name='body'),
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPrivilege?: string(name='AccountPrivilege', position='Query'),
  charset: string(name='Charset', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  dbDescription?: string(name='DbDescription', position='Query'),
  dbName: string(name='DbName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', position='Query'),
}

model CreateDBResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDBResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBResponseBody(name='body'),
}

async function createDB(request: CreateDBRequest): CreateDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDB', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  DBNodeClass: string(name='DBNodeClass', position='Query'),
  DBNodeCount: int32(name='DBNodeCount', position='Query'),
  engineVersion: string(name='EngineVersion', position='Query'),
  isReadDBInstance?: boolean(name='IsReadDBInstance', position='Query'),
  networkType?: string(name='NetworkType', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  primaryDBInstanceName?: string(name='PrimaryDBInstanceName', position='Query'),
  primaryZone?: string(name='PrimaryZone', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  secondaryZone?: string(name='SecondaryZone', position='Query'),
  tertiaryZone?: string(name='TertiaryZone', position='Query'),
  topologyType?: string(name='TopologyType', position='Query'),
  usedTime?: int32(name='UsedTime', position='Query'),
  VPCId?: string(name='VPCId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateDBInstanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSuperAccountRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateSuperAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSuperAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSuperAccountResponseBody(name='body'),
}

async function createSuperAccount(request: CreateSuperAccountRequest): CreateSuperAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSuperAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityAccountName?: string(name='SecurityAccountName', position='Query'),
  securityAccountPassword?: string(name='SecurityAccountPassword', position='Query'),
}

model DeleteAccountResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  dbName: string(name='DbName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteDBResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDBResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBResponseBody(name='body'),
}

async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBInstanceRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBInstanceResponseBody(name='body'),
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountListRequest {
  accountName?: string(name='AccountName', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeAccountListResponseBody = {
  data?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountPrivilege?: string(name='AccountPrivilege'),
      accountType?: string(name='AccountType'),
      DBInstanceName?: string(name='DBInstanceName'),
      DBName?: string(name='DBName'),
      gmtCreated?: string(name='GmtCreated'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAccountListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountListResponseBody(name='body'),
}

async function describeAccountList(request: DescribeAccountListRequest): DescribeAccountListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationMaintainConfRequest {
  regionId: string(name='RegionId', description='区域ID', position='Query'),
}

model DescribeActiveOperationMaintainConfResponseBody = {
  config?: {
    createdTime?: string(name='CreatedTime', description='创建时间'),
    cycleTime?: string(name='CycleTime', description='循环时间'),
    cycleType?: string(name='CycleType', description='循环类型'),
    maintainEndTime?: string(name='MaintainEndTime', description='运维结束时间'),
    maintainStartTime?: string(name='MaintainStartTime', description='运维开始时间'),
    modifiedTime?: string(name='ModifiedTime', description='修改时间'),
    status?: long(name='Status', description='状态'),
  }(name='Config', description='配置信息'),
  hasConfig?: long(name='HasConfig', description='用户是否配置：1:已经配置。 0.未配置'),
  requestId?: string(name='RequestId', description='requestid'),
}

model DescribeActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationMaintainConfResponseBody(name='body'),
}

async function describeActiveOperationMaintainConf(request: DescribeActiveOperationMaintainConfRequest): DescribeActiveOperationMaintainConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationMaintainConf', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTaskCountRequest {
  category?: string(name='Category', position='Query'),
  product?: string(name='Product', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeActiveOperationTaskCountResponseBody = {
  needPop?: long(name='NeedPop'),
  requestId?: string(name='RequestId', description='Id of the request'),
  taskCount?: long(name='TaskCount'),
}

model DescribeActiveOperationTaskCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTaskCountResponseBody(name='body'),
}

async function describeActiveOperationTaskCount(request: DescribeActiveOperationTaskCountRequest): DescribeActiveOperationTaskCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTaskCount', 'GET', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTasksRequest {
  allowCancel?: long(name='AllowCancel', position='Query'),
  allowChange?: long(name='AllowChange', position='Query'),
  changeLevel?: string(name='ChangeLevel', position='Query'),
  dbType?: string(name='DbType', position='Query'),
  insName?: string(name='InsName', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  productId?: string(name='ProductId', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  status?: long(name='Status', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
}

model DescribeActiveOperationTasksResponseBody = {
  items?: [ 
    {
      allowCancel?: string(name='AllowCancel'),
      allowChange?: string(name='AllowChange'),
      changeLevel?: string(name='ChangeLevel'),
      changeLevelEn?: string(name='ChangeLevelEn'),
      changeLevelZh?: string(name='ChangeLevelZh'),
      createdTime?: string(name='CreatedTime'),
      currentAVZ?: string(name='CurrentAVZ'),
      dbType?: string(name='DbType'),
      dbVersion?: string(name='DbVersion'),
      deadline?: string(name='Deadline'),
      id?: long(name='Id'),
      impact?: string(name='Impact'),
      impactEn?: string(name='ImpactEn'),
      impactZh?: string(name='ImpactZh'),
      insComment?: string(name='InsComment'),
      insName?: string(name='InsName'),
      modifiedTime?: string(name='ModifiedTime'),
      prepareInterval?: string(name='PrepareInterval'),
      region?: string(name='Region'),
      resultInfo?: string(name='ResultInfo'),
      startTime?: string(name='StartTime'),
      status?: long(name='Status'),
      subInsNames?: [ string ](name='SubInsNames'),
      switchTime?: string(name='SwitchTime'),
      taskType?: string(name='TaskType'),
      taskTypeEn?: string(name='TaskTypeEn'),
      taskTypeZh?: string(name='TaskTypeZh'),
    }
  ](name='Items'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: long(name='TotalRecordCount'),
}

model DescribeActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveOperationTasksResponseBody(name='body'),
}

async function describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): DescribeActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTasks', 'GET', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod'),
      backupPlanBegin?: string(name='BackupPlanBegin'),
      backupSetRetention?: int32(name='BackupSetRetention'),
      backupType?: string(name='BackupType'),
      backupWay?: string(name='BackupWay'),
      DBInstanceName?: string(name='DBInstanceName'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage'),
      isEnabled?: int32(name='IsEnabled'),
      localLogRetention?: int32(name='LocalLogRetention'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace'),
      removeLogRetention?: int32(name='RemoveLogRetention'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSetListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeBackupSetListResponseBody = {
  data?: [ 
    {
      backupModel?: int32(name='BackupModel'),
      backupSetId?: long(name='BackupSetId'),
      backupSetSize?: long(name='BackupSetSize'),
      backupType?: int32(name='BackupType'),
      beginTime?: long(name='BeginTime'),
      endTime?: long(name='EndTime'),
      status?: int32(name='Status'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupSetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetListResponseBody(name='body'),
}

async function describeBackupSetList(request: DescribeBackupSetListRequest): DescribeBackupSetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSetList', 'GET', '/', 'json', false, 'json', request);
}

model DescribeBinaryLogListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBinaryLogListResponseBody = {
  logList?: [ 
    {
      beginTime?: string(name='BeginTime'),
      createdTime?: string(name='CreatedTime'),
      downloadLink?: string(name='DownloadLink'),
      endTime?: string(name='EndTime'),
      fileName?: string(name='FileName'),
      id?: long(name='Id'),
      logSize?: long(name='LogSize'),
      modifiedTime?: string(name='ModifiedTime'),
      purgeStatus?: int32(name='PurgeStatus'),
      uploadHost?: string(name='UploadHost'),
      uploadStatus?: int32(name='UploadStatus'),
    }
  ](name='LogList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNumber?: int32(name='TotalNumber'),
}

model DescribeBinaryLogListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBinaryLogListResponseBody(name='body'),
}

async function describeBinaryLogList(request: DescribeBinaryLogListRequest): DescribeBinaryLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBinaryLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCharacterSetRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeCharacterSetResponseBody = {
  data?: {
    characterSet?: [ string ](name='CharacterSet'),
    engine?: string(name='Engine'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeCharacterSetResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCharacterSetResponseBody(name='body'),
}

async function describeCharacterSet(request: DescribeCharacterSetRequest): DescribeCharacterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCharacterSet', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
}

model DescribeDBInstanceAttributeResponseBody = {
  DBInstance?: {
    commodityCode?: string(name='CommodityCode'),
    connAddrs?: [ 
      {
        connectionString?: string(name='ConnectionString'),
        port?: long(name='Port'),
        type?: string(name='Type'),
        VPCId?: string(name='VPCId'),
        vSwitchId?: string(name='VSwitchId'),
      }
    ](name='ConnAddrs'),
    connectionString?: string(name='ConnectionString'),
    createTime?: string(name='CreateTime'),
    DBInstanceType?: string(name='DBInstanceType'),
    DBNodeClass?: string(name='DBNodeClass'),
    DBNodeCount?: int32(name='DBNodeCount'),
    DBNodes?: [ 
      {
        computeNodeId?: string(name='ComputeNodeId'),
        dataNodeId?: string(name='DataNodeId'),
        id?: string(name='Id'),
        nodeClass?: string(name='NodeClass'),
        regionId?: string(name='RegionId'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='DBNodes'),
    DBType?: string(name='DBType'),
    DBVersion?: string(name='DBVersion'),
    description?: string(name='Description'),
    engine?: string(name='Engine'),
    expireDate?: string(name='ExpireDate'),
    expired?: string(name='Expired'),
    id?: string(name='Id'),
    kindCode?: int32(name='KindCode'),
    latestMinorVersion?: string(name='LatestMinorVersion'),
    lockMode?: string(name='LockMode'),
    maintainEndTime?: string(name='MaintainEndTime'),
    maintainStartTime?: string(name='MaintainStartTime'),
    minorVersion?: string(name='MinorVersion'),
    network?: string(name='Network'),
    payType?: string(name='PayType'),
    port?: string(name='Port'),
    readDBInstances?: [ string ](name='ReadDBInstances'),
    regionId?: string(name='RegionId'),
    resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
    rightsSeparationEnabled?: boolean(name='RightsSeparationEnabled'),
    rightsSeparationStatus?: string(name='RightsSeparationStatus'),
    status?: string(name='Status'),
    storageUsed?: long(name='StorageUsed'),
    tagSet?: [ 
      {
        key?: string(name='Key', description='标签名称'),
        value?: string(name='Value', description='标签值'),
      }
    ](name='TagSet', description='标签集合'),
    type?: string(name='Type'),
    VPCId?: string(name='VPCId'),
    vSwitchId?: string(name='VSwitchId'),
    zoneId?: string(name='ZoneId'),
  }(name='DBInstance'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceAttributeResponseBody(name='body'),
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceConfigRequest {
  configName: string(name='ConfigName', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceConfigResponseBody = {
  data?: {
    configName?: string(name='ConfigName'),
    configValue?: string(name='ConfigValue'),
    dbInstanceName?: string(name='DbInstanceName'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceConfigResponseBody(name='body'),
}

async function describeDBInstanceConfig(request: DescribeDBInstanceConfigRequest): DescribeDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceSSLRequest {
  DBInstanceName?: string(name='DBInstanceName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceSSLResponseBody = {
  data?: {
    certCommonName?: string(name='CertCommonName'),
    SSLEnabled?: boolean(name='SSLEnabled'),
    SSLExpiredTime?: string(name='SSLExpiredTime'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceSSLResponseBody(name='body'),
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceTDERequest {
  DBInstanceName?: string(name='DBInstanceName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceTDEResponseBody = {
  data?: {
    TDEStatus?: string(name='TDEStatus'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTDEResponseBody(name='body'),
}

async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceTopologyRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDBInstanceTopologyResponseBody = {
  data?: {
    logicInstanceTopology?: {
      DBInstanceConnType?: string(name='DBInstanceConnType'),
      DBInstanceCreateTime?: string(name='DBInstanceCreateTime'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      DBInstanceName?: string(name='DBInstanceName'),
      DBInstanceStatus?: int32(name='DBInstanceStatus'),
      DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription'),
      DBInstanceStorage?: int32(name='DBInstanceStorage'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      items?: [ 
        {
          activated?: boolean(name='Activated'),
          azone?: string(name='Azone'),
          azoneRoleList?: [ 
            {
              azone?: string(name='Azone'),
              role?: string(name='Role'),
            }
          ](name='AzoneRoleList'),
          characterType?: string(name='CharacterType'),
          connectionIp?: [ 
            {
              connectionString?: string(name='ConnectionString'),
              DBInstanceNetType?: int32(name='DBInstanceNetType'),
              port?: string(name='Port'),
            }
          ](name='ConnectionIp'),
          DBInstanceConnType?: int32(name='DBInstanceConnType'),
          DBInstanceCreateTime?: string(name='DBInstanceCreateTime'),
          DBInstanceDescription?: string(name='DBInstanceDescription'),
          DBInstanceId?: string(name='DBInstanceId'),
          DBInstanceName?: string(name='DBInstanceName'),
          DBInstanceStatus?: int32(name='DBInstanceStatus'),
          DBInstanceStatusDescription?: string(name='DBInstanceStatusDescription'),
          diskSize?: long(name='DiskSize'),
          engine?: string(name='Engine'),
          engineVersion?: string(name='EngineVersion'),
          lockMode?: int32(name='LockMode'),
          lockReason?: string(name='LockReason'),
          maintainEndTime?: string(name='MaintainEndTime'),
          maintainStartTime?: string(name='MaintainStartTime'),
          maxConnections?: int32(name='MaxConnections'),
          maxIops?: int32(name='MaxIops'),
          region?: string(name='Region'),
          role?: string(name='Role'),
        }
      ](name='Items'),
      lockMode?: int32(name='LockMode'),
      lockReason?: string(name='LockReason'),
      maintainEndTime?: string(name='MaintainEndTime'),
      maintainStartTime?: string(name='MaintainStartTime'),
    }(name='LogicInstanceTopology'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDBInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstanceTopologyResponseBody(name='body'),
}

async function describeDBInstanceTopology(request: DescribeDBInstanceTopologyRequest): DescribeDBInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstancesRequest {
  instanceId?: string(name='InstanceId', description='实例名称', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=5, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', position='Query'),
  tags?: string(name='Tags', description='标签过滤条件', position='Query'),
}

model DescribeDBInstancesResponseBody = {
  DBInstances?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      createTime?: string(name='CreateTime'),
      DBInstanceName?: string(name='DBInstanceName', description='数据库实例名称'),
      DBType?: string(name='DBType'),
      DBVersion?: string(name='DBVersion'),
      description?: string(name='Description'),
      engine?: string(name='Engine'),
      expireTime?: string(name='ExpireTime'),
      expired?: boolean(name='Expired'),
      id?: string(name='Id'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      minorVersion?: string(name='MinorVersion'),
      network?: string(name='Network'),
      nodeClass?: string(name='NodeClass'),
      nodeCount?: int32(name='NodeCount'),
      nodes?: [ 
        {
          classCode?: string(name='ClassCode'),
          id?: string(name='Id'),
          regionId?: string(name='RegionId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Nodes'),
      payType?: string(name='PayType'),
      readDBInstances?: [ string ](name='ReadDBInstances'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
      status?: string(name='Status'),
      storageUsed?: long(name='StorageUsed'),
      tagSet?: [ 
        {
          key?: string(name='Key', description='标签名称'),
          value?: string(name='Value', description='标签值'),
        }
      ](name='TagSet', description='标签集合'),
      type?: string(name='Type'),
      VPCId?: string(name='VPCId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBInstances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalNumber?: int32(name='TotalNumber'),
}

model DescribeDBInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBInstancesResponseBody(name='body'),
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBNodePerformanceRequest {
  characterType: string(name='CharacterType', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  DBNodeIds: string(name='DBNodeIds', position='Query'),
  DBNodeRole?: string(name='DBNodeRole', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBNodePerformanceResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  endTime?: string(name='EndTime'),
  performanceKeys?: {
    performanceItem?: [ 
    {
      DBNodeId?: string(name='DBNodeId'),
      measurement?: string(name='Measurement'),
      metricName?: string(name='MetricName'),
      points?: {
        performanceItemValue?: [ 
        {
          timestamp?: long(name='Timestamp'),
          value?: string(name='Value'),
        }
      ](name='PerformanceItemValue')
      }(name='Points'),
    }
  ](name='PerformanceItem')
  }(name='PerformanceKeys'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBNodePerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBNodePerformanceResponseBody(name='body'),
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBNodePerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  DBName?: string(name='DBName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDbListResponseBody = {
  data?: [ 
    {
      accounts?: [ 
        {
          accountName?: string(name='AccountName'),
          accountPrivilege?: string(name='AccountPrivilege'),
        }
      ](name='Accounts'),
      characterSetName?: string(name='CharacterSetName'),
      DBDescription?: string(name='DBDescription'),
      DBInstanceName?: string(name='DBInstanceName'),
      DBName?: string(name='DBName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDbListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbListResponseBody(name='body'),
}

async function describeDbList(request: DescribeDbListRequest): DescribeDbListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDistributeTableListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  dbName: string(name='DbName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDistributeTableListResponseBody = {
  data?: {
    tables?: [ 
      {
        dbKey?: string(name='DbKey'),
        tableName?: string(name='TableName'),
        tableType?: string(name='TableType'),
        tbKey?: string(name='TbKey'),
      }
    ](name='Tables'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDistributeTableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDistributeTableListResponseBody(name='body'),
}

async function describeDistributeTableList(request: DescribeDistributeTableListRequest): DescribeDistributeTableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDistributeTableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  endTime?: string(name='EndTime', description='结束时间', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页面下标', position='Query'),
  pageSize?: int32(name='PageSize', description='页面大小', position='Query'),
  regionId: string(name='RegionId', description='区域ID', position='Query'),
  startTime?: string(name='StartTime', description='开始时间', position='Query'),
}

model DescribeEventsResponseBody = {
  eventItems?: [ 
    {
      eventId?: long(name='EventId', description='事件ID'),
      eventName?: string(name='EventName', description='事件名称'),
      eventPayload?: string(name='EventPayload', description='补充信息'),
      eventReason?: string(name='EventReason', description='原因'),
      eventRecordTime?: string(name='EventRecordTime', description='记录时间'),
      eventTime?: string(name='EventTime', description='事件时间'),
      eventType?: string(name='EventType', description='事件类型'),
      eventUserType?: string(name='EventUserType', description='事件用户类型'),
      regionId?: string(name='RegionId', description='区域ID'),
      resourceName?: string(name='ResourceName', description='资源名'),
      resourceType?: string(name='ResourceType', description='资源类型'),
    }
  ](name='EventItems', description='事件体'),
  pageNumber?: long(name='PageNumber', description='页面下标'),
  pageSize?: long(name='PageSize', description='页面大小'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalRecordCount?: long(name='TotalRecordCount', description='总页数'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvents', 'GET', '/', 'json', false, 'json', request);
}

model DescribeParameterTemplatesRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  paramLevel?: string(name='ParamLevel', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeParameterTemplatesResponseBody = {
  data?: {
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    parameterCount?: int32(name='ParameterCount'),
    parameters?: [ 
      {
        checkingCode?: string(name='CheckingCode'),
        dynamic?: int32(name='Dynamic'),
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName'),
        parameterValue?: string(name='ParameterValue'),
        revisable?: int32(name='Revisable'),
      }
    ](name='Parameters'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeParameterTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterTemplatesResponseBody(name='body'),
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  paramLevel?: string(name='ParamLevel', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeParametersResponseBody = {
  data?: {
    configParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='ConfigParameters'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    runningParameters?: [ 
      {
        parameterDescription?: string(name='ParameterDescription'),
        parameterName?: string(name='ParameterName'),
        parameterValue?: string(name='ParameterValue'),
      }
    ](name='RunningParameters'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  code?: int32(name='Code'),
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId'),
      supportPolarx10?: boolean(name='SupportPolarx10'),
      supportPolarx20?: boolean(name='SupportPolarx20'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeScaleOutMigrateTaskListRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeScaleOutMigrateTaskListResponseBody = {
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
}

model DescribeScaleOutMigrateTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScaleOutMigrateTaskListResponseBody(name='body'),
}

async function describeScaleOutMigrateTaskList(request: DescribeScaleOutMigrateTaskListRequest): DescribeScaleOutMigrateTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeScaleOutMigrateTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityIpsRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeSecurityIpsResponseBody = {
  data?: {
    DBInstanceName?: string(name='DBInstanceName'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName'),
        securityIPList?: string(name='SecurityIPList'),
      }
    ](name='GroupItems'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityIpsResponseBody(name='body'),
}

async function describeSecurityIps(request: DescribeSecurityIpsRequest): DescribeSecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlinkTaskInfoRequest {
  failPageNumber?: int32(name='FailPageNumber', position='Query'),
  failPageSize?: int32(name='FailPageSize', minimum=5, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  slinkTaskId: string(name='SlinkTaskId', position='Query'),
  successPageNumber?: long(name='SuccessPageNumber', position='Query'),
  successPageSize?: long(name='SuccessPageSize', position='Query'),
}

model DescribeSlinkTaskInfoResponseBody = {
  code?: long(name='Code'),
  data?: {
    dataImportTaskDetailInfo?: {
      fsmId?: long(name='FsmId'),
      fsmState?: string(name='FsmState'),
      fsmStatus?: string(name='FsmStatus'),
      serviceDetailList?: [ 
        {
          id?: long(name='Id'),
          status?: string(name='Status'),
          taskDetailList?: [ 
            {
              delay?: long(name='Delay'),
              lastError?: string(name='LastError'),
              physicalDbName?: string(name='PhysicalDbName'),
              progress?: long(name='Progress'),
              statistics?: string(name='Statistics'),
              status?: string(name='Status'),
              taskId?: long(name='TaskId'),
              type?: string(name='Type'),
            }
          ](name='TaskDetailList'),
          type?: string(name='Type'),
        }
      ](name='ServiceDetailList'),
    }(name='DataImportTaskDetailInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: string(name='Success'),
}

model DescribeSlinkTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlinkTaskInfoResponseBody(name='body'),
}

async function describeSlinkTaskInfo(request: DescribeSlinkTaskInfoRequest): DescribeSlinkTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlinkTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  DBInstanceName?: string(name='DBInstanceName', description='实例名称', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  tagKey?: string(name='TagKey', description='标签Key', position='Query'),
}

model DescribeTagsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  tagInfos?: [ 
    {
      DBInstanceIds?: [ string ](name='DBInstanceIds', description='标签关联数据库实例列表'),
      tagKey?: string(name='TagKey', description='标签Key'),
      tagValue?: string(name='TagValue', description='标签Value'),
    }
  ](name='TagInfos', description='标签信息列表'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeTasksResponseBody = {
  items?: [ 
    {
      beginTime?: string(name='BeginTime'),
      DBName?: string(name='DBName'),
      finishTime?: string(name='FinishTime'),
      progress?: string(name='Progress'),
      progressInfo?: string(name='ProgressInfo'),
      scaleOutToken?: string(name='ScaleOutToken'),
      status?: string(name='Status'),
      taskAction?: string(name='TaskAction'),
      taskErrorCode?: string(name='TaskErrorCode'),
      taskErrorMessage?: string(name='TaskErrorMessage'),
      taskId?: string(name='TaskId'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber'),
  pageRecordCount?: int32(name='PageRecordCount'),
  requestId?: string(name='RequestId'),
  totalRecordCount?: int32(name='TotalRecordCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserEncryptionKeyListRequest {
  DBInstanceName?: string(name='DBInstanceName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeUserEncryptionKeyListResponseBody = {
  data?: {
    keyIds?: [ string ](name='KeyIds'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeUserEncryptionKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserEncryptionKeyListResponseBody(name='body'),
}

async function describeUserEncryptionKeyList(request: DescribeUserEncryptionKeyListRequest): DescribeUserEncryptionKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserEncryptionKeyList', 'POST', '/', 'json', false, 'json', request);
}

model InitDBInstanceResourceGroupIdRequest {
  DBInstanceName: string(name='DBInstanceName', description='资源类型', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
}

model InitDBInstanceResourceGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitDBInstanceResourceGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: InitDBInstanceResourceGroupIdResponseBody(name='body'),
}

async function initDBInstanceResourceGroupId(request: InitDBInstanceResourceGroupIdRequest): InitDBInstanceResourceGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitDBInstanceResourceGroupId', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='下一个查询开始Token', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='下一个查询开始Token，NextToken为空说明没有下一个'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='标签键'),
      tagValue?: string(name='TagValue', description='标签值'),
    }
  ](name='TagResource')
  }(name='TagResources', description='资源列表'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationMaintainConfRequest {
  cycleTime?: string(name='CycleTime', position='Query'),
  cycleType?: string(name='CycleType', position='Query'),
  maintainEndTime?: string(name='MaintainEndTime', position='Query'),
  maintainStartTime?: string(name='MaintainStartTime', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model ModifyActiveOperationMaintainConfResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyActiveOperationMaintainConfResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationMaintainConfResponseBody(name='body'),
}

async function modifyActiveOperationMaintainConf(request: ModifyActiveOperationMaintainConfRequest): ModifyActiveOperationMaintainConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationMaintainConf', 'GET', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationTasksRequest {
  ids?: string(name='Ids', position='Query'),
  immediateStart?: long(name='ImmediateStart', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  switchTime?: string(name='SwitchTime', position='Query'),
}

model ModifyActiveOperationTasksResponseBody = {
  ids?: string(name='Ids'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyActiveOperationTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyActiveOperationTasksResponseBody(name='body'),
}

async function modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): ModifyActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceClassRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  targetDBInstanceClass: string(name='TargetDBInstanceClass', position='Query'),
}

model ModifyDBInstanceClassResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceClassResponseBody(name='body'),
}

async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConfigRequest {
  configName: string(name='ConfigName', position='Query'),
  configValue: string(name='ConfigValue', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyDBInstanceConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConfigResponseBody(name='body'),
}

async function modifyDBInstanceConfig(request: ModifyDBInstanceConfigRequest): ModifyDBInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionString: string(name='ConnectionString', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  newPort: string(name='NewPort', position='Query'),
  newPrefix: string(name='NewPrefix', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  code?: long(name='Code'),
  data?: {
    connectionString?: string(name='ConnectionString'),
    DBInstanceName?: string(name='DBInstanceName'),
    DBInstanceNetType?: string(name='DBInstanceNetType'),
    port?: string(name='Port'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceConnectionString', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBInstanceDescriptionRequest {
  DBInstanceDescription: string(name='DBInstanceDescription', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyDBInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceDescriptionResponseBody(name='body'),
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseDescriptionRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  dbDescription?: string(name='DbDescription', position='Query'),
  dbName: string(name='DbName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyDatabaseDescriptionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyDatabaseDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDatabaseDescriptionResponseBody(name='body'),
}

async function modifyDatabaseDescription(request: ModifyDatabaseDescriptionRequest): ModifyDatabaseDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParameterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  paramLevel?: string(name='ParamLevel', position='Query'),
  parameters: string(name='Parameters', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityIpsRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  modifyMode?: string(name='ModifyMode', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  securityIPList: string(name='SecurityIPList', position='Query'),
}

model ModifySecurityIpsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySecurityIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityIpsResponseBody(name='body'),
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityIps', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstancePublicConnectionRequest {
  currentConnectionString: string(name='CurrentConnectionString', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseInstancePublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstancePublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstancePublicConnectionResponseBody(name='body'),
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstancePublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model RestartDBInstanceRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model RestartDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDBInstanceResponseBody(name='body'),
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='是否全部删除，只针对TagKey.N为空时有效。 取值范围： true  false True False  默认是 false', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID，最多50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tagKey?: [ string ](name='TagKey', description='标签键，最多20个子项', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBackupPolicyRequest {
  backupPeriod?: string(name='BackupPeriod', position='Query'),
  backupPlanBegin?: string(name='BackupPlanBegin', position='Query'),
  backupSetRetention?: int32(name='BackupSetRetention', position='Query'),
  backupType?: string(name='BackupType', position='Query'),
  backupWay?: string(name='BackupWay', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage', position='Query'),
  isEnabled?: int32(name='IsEnabled', position='Query'),
  localLogRetention?: int32(name='LocalLogRetention', position='Query'),
  logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removeLogRetention?: int32(name='RemoveLogRetention', position='Query'),
}

model UpdateBackupPolicyResponseBody = {
  data?: [ 
    {
      backupPeriod?: string(name='BackupPeriod'),
      backupPlanBegin?: string(name='BackupPlanBegin'),
      backupSetRetention?: int32(name='BackupSetRetention'),
      backupType?: string(name='BackupType'),
      backupWay?: string(name='BackupWay'),
      DBInstanceName?: string(name='DBInstanceName'),
      forceCleanOnHighSpaceUsage?: int32(name='ForceCleanOnHighSpaceUsage'),
      isEnabled?: int32(name='IsEnabled'),
      localLogRetention?: int32(name='LocalLogRetention'),
      logLocalRetentionSpace?: int32(name='LogLocalRetentionSpace'),
      removeLogRetention?: int32(name='RemoveLogRetention'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBackupPolicyResponseBody(name='body'),
}

async function updateBackupPolicy(request: UpdateBackupPolicyRequest): UpdateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDBInstanceSSLRequest {
  certCommonName?: string(name='CertCommonName', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  enableSSL: boolean(name='EnableSSL', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model UpdateDBInstanceSSLResponseBody = {
  data?: {
    taskId?: long(name='TaskId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateDBInstanceSSLResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDBInstanceSSLResponseBody(name='body'),
}

async function updateDBInstanceSSL(request: UpdateDBInstanceSSLRequest): UpdateDBInstanceSSLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDBInstanceSSL', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDBInstanceTDERequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  encryptionKey?: string(name='EncryptionKey', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  TDEStatus: int32(name='TDEStatus', position='Query'),
}

model UpdateDBInstanceTDEResponseBody = {
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model UpdateDBInstanceTDEResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDBInstanceTDEResponseBody(name='body'),
}

async function updateDBInstanceTDE(request: UpdateDBInstanceTDERequest): UpdateDBInstanceTDEResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDBInstanceTDE', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePolarDBXInstanceNodeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  dbInstanceNodeCount: string(name='DbInstanceNodeCount', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpdatePolarDBXInstanceNodeResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpdatePolarDBXInstanceNodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePolarDBXInstanceNodeResponseBody(name='body'),
}

async function updatePolarDBXInstanceNode(request: UpdatePolarDBXInstanceNodeRequest): UpdatePolarDBXInstanceNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePolarDBXInstanceNode', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeDBInstanceKernelVersionRequest {
  DBInstanceName: string(name='DBInstanceName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model UpgradeDBInstanceKernelVersionResponseBody = {
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  targetMinorVersion?: string(name='TargetMinorVersion'),
  taskId?: string(name='TaskId'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeDBInstanceKernelVersionResponseBody(name='body'),
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeDBInstanceKernelVersion', 'POST', '/', 'json', false, 'json', request);
}

