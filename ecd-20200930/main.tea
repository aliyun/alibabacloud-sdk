/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CdsFileShareLinkModel {
  accessCount?: long(name='AccessCount'),
  createTime?: string(name='CreateTime'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  disableDownload?: boolean(name='DisableDownload'),
  disablePreview?: boolean(name='DisablePreview'),
  disableSave?: boolean(name='DisableSave'),
  downloadCount?: long(name='DownloadCount'),
  downloadLimit?: long(name='DownloadLimit'),
  driveId?: string(name='DriveId'),
  expiration?: string(name='Expiration'),
  expired?: boolean(name='Expired'),
  fileIds?: string(name='FileIds'),
  modifiyTime?: string(name='ModifiyTime'),
  previewCount?: long(name='PreviewCount'),
  previewLimit?: long(name='PreviewLimit'),
  reportCount?: long(name='ReportCount'),
  saveCount?: long(name='SaveCount'),
  saveLimit?: long(name='SaveLimit'),
  shareId?: string(name='ShareId'),
  shareLink?: string(name='ShareLink'),
  shareName?: string(name='ShareName'),
  sharePwd?: string(name='SharePwd'),
  status?: string(name='Status'),
  videoPreviewCount?: long(name='VideoPreviewCount'),
}

model FilePermissionMember {
  cdsIdentity?: {
    id?: string(name='Id'),
    type?: string(name='Type'),
  }(name='CdsIdentity'),
  disinheritSubGroup?: boolean(name='DisinheritSubGroup'),
  expireTime?: long(name='ExpireTime'),
  roleId?: string(name='RoleId'),
}

model ActivateOfficeSiteRequest {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the convenience workspace that is locked.', example='cn-hangzhou+dir-803704****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ActivateOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model ActivateOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateOfficeSiteResponseBody(name='body'),
}

/**
  * To improve resource utilization, the system automatically locks a workspace of the convenience account type to release virtual private cloud (VPC) resources, and the workspace has been no longer used for a long time. If you want to continue using the locked workspace, you can call this operation to activate it. When you activate the locked workspace, the system recreates VPC resources based on the original configurations.
  *
  * @param request ActivateOfficeSiteRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ActivateOfficeSiteResponse
 */
async function activateOfficeSiteWithOptions(request: ActivateOfficeSiteRequest, runtime: Util.RuntimeOptions): ActivateOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To improve resource utilization, the system automatically locks a workspace of the convenience account type to release virtual private cloud (VPC) resources, and the workspace has been no longer used for a long time. If you want to continue using the locked workspace, you can call this operation to activate it. When you activate the locked workspace, the system recreates VPC resources based on the original configurations.
  *
  * @param request ActivateOfficeSiteRequest
  * @return ActivateOfficeSiteResponse
 */
async function activateOfficeSite(request: ActivateOfficeSiteRequest): ActivateOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateOfficeSiteWithOptions(request, runtime);
}

model AddDevicesRequest {
  clientType?: int32(name='ClientType', description='The type of the Alibaba Cloud Workspace client that runs on the device.

*   1: the hardware client
*   2: the software client', example='2'),
  deviceIds?: [ string ](name='DeviceIds', description='The list of devices.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model AddDevicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
}

model AddDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDevicesResponseBody(name='body'),
}

/**
  * You can add only one device to a tenant.
  *
  * @param request AddDevicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddDevicesResponse
 */
async function addDevicesWithOptions(request: AddDevicesRequest, runtime: Util.RuntimeOptions): AddDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can add only one device to a tenant.
  *
  * @param request AddDevicesRequest
  * @return AddDevicesResponse
 */
async function addDevices(request: AddDevicesRequest): AddDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDevicesWithOptions(request, runtime);
}

model AddFilePermissionRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberList?: [ 
    {
      cdsIdentity?: {
        id?: string(name='Id', example='user01'),
        type?: string(name='Type', example='IT_User'),
      }(name='CdsIdentity'),
      disinheritSubGroup?: boolean(name='DisinheritSubGroup', example='false'),
      expireTime?: long(name='ExpireTime', example='4775500800000'),
      roleId?: string(name='RoleId', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddFilePermissionShrinkRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberListShrink?: string(name='MemberList'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddFilePermissionResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddFilePermissionResponseBody(name='body'),
}

async function addFilePermissionWithOptions(tmpReq: AddFilePermissionRequest, runtime: Util.RuntimeOptions): AddFilePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new AddFilePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.memberList)) {
    request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, 'MemberList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.memberListShrink)) {
    query['MemberList'] = request.memberListShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addFilePermission(request: AddFilePermissionRequest): AddFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFilePermissionWithOptions(request, runtime);
}

model AddUserToDesktopGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group that you want to assign to more regular users.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the desktop groups.'),
  endUserIds?: [ string ](name='EndUserIds', description='The regular users to whom you want to assign the desktop group.'),
  regionId?: string(name='RegionId', description='The ID of the region', example='cn-hangzhou'),
}

model AddUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserToDesktopGroupResponseBody(name='body'),
}

async function addUserToDesktopGroupWithOptions(request: AddUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): AddUserToDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupIds)) {
    query['DesktopGroupIds'] = request.desktopGroupIds;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserToDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserToDesktopGroup(request: AddUserToDesktopGroupRequest): AddUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToDesktopGroupWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of cloud desktops. You can specify 1 to 20 cloud desktops.'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-ejtum8j5tfcw7****'),
  regionId?: string(name='RegionId', description='The region ID of the cloud desktop. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='63740E03-1B4B-5A18-AC27-2745A4F2****'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as instructed in the Change Automatic Snapshot Policy panel.
  * After you associate an automatic snapshot policy with the cloud desktop, EDS creates snapshots for the cloud desktop based on the policy.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as instructed in the Change Automatic Snapshot Policy panel.
  * After you associate an automatic snapshot policy with the cloud desktop, EDS creates snapshots for the cloud desktop based on the policy.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ApplyCoordinatePrivilegeRequest {
  coId?: string(name='CoId', description='The ID of the application for the coordinate permissions.', example='co-fqsm6e8ee75w61fp9'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='zhangsan'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The type of user who requires the coordinate permissions.

Valid value: TENANT_ADMIN.', example='TENANT_ADMIN'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='8b241d415da244a6936d6d6fa4f20f4d'),
}

model ApplyCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C43EEAC3-84F8-5C1E-A067-4751C3D1422E'),
}

model ApplyCoordinatePrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCoordinatePrivilegeResponseBody(name='body'),
}

async function applyCoordinatePrivilegeWithOptions(request: ApplyCoordinatePrivilegeRequest, runtime: Util.RuntimeOptions): ApplyCoordinatePrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coId)) {
    query['CoId'] = request.coId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCoordinatePrivilege',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCoordinatePrivilege(request: ApplyCoordinatePrivilegeRequest): ApplyCoordinatePrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCoordinatePrivilegeWithOptions(request, runtime);
}

model ApplyCoordinationForMonitoringRequest {
  coordinatePolicyType?: string(name='CoordinatePolicyType', example='FULL_CONTROL'),
  endUserId?: string(name='EndUserId', example='alice'),
  initiatorType?: string(name='InitiatorType', example='ADMIN_INITIATE'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceCandidates?: [ 
    {
      ownerAliUid?: long(name='OwnerAliUid', example='130247021517****'),
      ownerEndUserId?: string(name='OwnerEndUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ecd-08zhejm3h7ilr****'),
      resourceName?: string(name='ResourceName', example='TestDesktop'),
      resourceProperties?: string(name='ResourceProperties', example='TestProperty'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='CLOUD_DESKTOP'),
    }
  ](name='ResourceCandidates'),
  uuid?: string(name='Uuid', example='62f2f1f252f04e0e9d8bc****'),
}

model ApplyCoordinationForMonitoringResponseBody = {
  coordinateFlowModels?: [ 
    {
      coId?: string(name='CoId', example='co-0sot77uale3****'),
      coordinateStatus?: string(name='CoordinateStatus', example='PENDING'),
      coordinateTicket?: string(name='CoordinateTicket', example='1VDQ0VTUw0KW0Rlc2t0b3BdDQpHV1Rva2VuPTAwTzgwL3liS25zUEVGdkF6eU1Pc1ExeHZWdmk4VEE3NFJvU1V1d0dPYm1BNkNJWklDMHVNQklWcjU2NS80S0ZQekQ4aGFTR0ZHelZqMTFGbkRpWWgvUFF1Zm1xSXNGdFRFNFRWMExJNit3TkU0L2RMb04wNXBBSE5Tc3M4dWFXY3lwWE****'),
      initiatorType?: string(name='InitiatorType', example='COORDINATOR_INITIATE_FORCE'),
      ownerUserId?: string(name='OwnerUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ecd-96vi03f9emqnl****'),
      resourceName?: string(name='ResourceName', example='TestDesktop'),
    }
  ](name='CoordinateFlowModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApplyCoordinationForMonitoringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCoordinationForMonitoringResponseBody(name='body'),
}

async function applyCoordinationForMonitoringWithOptions(request: ApplyCoordinationForMonitoringRequest, runtime: Util.RuntimeOptions): ApplyCoordinationForMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coordinatePolicyType)) {
    query['CoordinatePolicyType'] = request.coordinatePolicyType;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.initiatorType)) {
    query['InitiatorType'] = request.initiatorType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceCandidates)) {
    query['ResourceCandidates'] = request.resourceCandidates;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCoordinationForMonitoring',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCoordinationForMonitoring(request: ApplyCoordinationForMonitoringRequest): ApplyCoordinationForMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCoordinationForMonitoringWithOptions(request, runtime);
}

model ApproveFotaUpdateRequest {
  appVersion?: string(name='AppVersion', description='The version of the custom image. You can call the [DescribeImages](~~188895~~) operation to obtain the value of this parameter.', example='0.0.1-D-20220513.143129'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ApproveFotaUpdateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveFotaUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveFotaUpdateResponseBody(name='body'),
}

async function approveFotaUpdateWithOptions(request: ApproveFotaUpdateRequest, runtime: Util.RuntimeOptions): ApproveFotaUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApproveFotaUpdate',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveFotaUpdate(request: ApproveFotaUpdateRequest): ApproveFotaUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveFotaUpdateWithOptions(request, runtime);
}

model AssociateNetworkPackageRequest {
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package. You can call the [DescribeNetworkPackages](~~216079~~) operation to query the ID of the Internet access package.', example='np-e0iodl3yzb62q****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace. You can call the [DescribeOfficeSites](~~216071~~) operation to query the ID of the workspace.', example='cn-hangzhou+dir-*********'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model AssociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AssociateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateNetworkPackageResponseBody(name='body'),
}

async function associateNetworkPackageWithOptions(request: AssociateNetworkPackageRequest, runtime: Util.RuntimeOptions): AssociateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateNetworkPackage(request: AssociateNetworkPackageRequest): AssociateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateNetworkPackageWithOptions(request, runtime);
}

model AttachCenRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.

*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to the Alibaba Cloud account, skip this parameter.
*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the exact Alibaba Cloud account.', example='102681951715****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the SendVerifyCode operation to obtain the verification code.', example='12****'),
}

model AttachCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachCenResponseBody(name='body'),
}

/**
  * ## Description
  * *   A Cloud Enterprise Network (CEN) instance is created.
  * *   A workspace of the convenience account type is created.
  * >  The secure office network of a workspace of the enterprise Active Directory (AD) account type is attached to a CEN instance when you create the workspace. The secure office network that corresponds to each workspace can be attached only to a single CEN instance.
  *
  * @param request AttachCenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachCenResponse
 */
async function attachCenWithOptions(request: AttachCenRequest, runtime: Util.RuntimeOptions): AttachCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   A Cloud Enterprise Network (CEN) instance is created.
  * *   A workspace of the convenience account type is created.
  * >  The secure office network of a workspace of the enterprise Active Directory (AD) account type is attached to a CEN instance when you create the workspace. The secure office network that corresponds to each workspace can be attached only to a single CEN instance.
  *
  * @param request AttachCenRequest
  * @return AttachCenResponse
 */
async function attachCen(request: AttachCenRequest): AttachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCenWithOptions(request, runtime);
}

model AttachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: int32(name='ClientType', description='The type of the Alibaba Cloud Workspace client that runs on the device.

*   1: the hardware client
*   2: the software client', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='111810122200F0C24CF7F1BF-*05AY****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the user.', example='moli'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The account type of the user.

*   SIMPLE: the convenience user
*   AD: the AD user', example='SIMPLE'),
}

model AttachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachEndUserResponseBody(name='body'),
}

async function attachEndUserWithOptions(request: AttachEndUserRequest, runtime: Util.RuntimeOptions): AttachEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEndUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachEndUser(request: AttachEndUserRequest): AttachEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEndUserWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. Valid values of N: 1 to 50. You cannot leave this parameter empty. The value can be up to 64 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://.](http://https://。)'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-78lhzpe7kjfnd****'),
  regionId?: string(name='RegionId', description='The region ID of the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-352282****'),
  shareId?: string(name='ShareId', example='7JQX1Fsw****'),
}

model CancelCdsFileShareLinkResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='true'),
}

model CancelCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCdsFileShareLinkResponseBody(name='body'),
}

async function cancelCdsFileShareLinkWithOptions(request: CancelCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): CancelCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCdsFileShareLink(request: CancelCdsFileShareLinkRequest): CancelCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCdsFileShareLinkWithOptions(request, runtime);
}

model CancelCoordinationForMonitoringRequest {
  coIds?: [ string ](name='CoIds'),
  endUserId?: string(name='EndUserId', example='alice'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  userType?: string(name='UserType', example='TENANT_ADMIN'),
}

model CancelCoordinationForMonitoringResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelCoordinationForMonitoringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCoordinationForMonitoringResponseBody(name='body'),
}

async function cancelCoordinationForMonitoringWithOptions(request: CancelCoordinationForMonitoringRequest, runtime: Util.RuntimeOptions): CancelCoordinationForMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coIds)) {
    query['CoIds'] = request.coIds;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCoordinationForMonitoring',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCoordinationForMonitoring(request: CancelCoordinationForMonitoringRequest): CancelCoordinationForMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCoordinationForMonitoringWithOptions(request, runtime);
}

model CancelCopyImageRequest {
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCopyImageResponseBody(name='body'),
}

async function cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: Util.RuntimeOptions): CancelCopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCopyImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCopyImageWithOptions(request, runtime);
}

model ClonePolicyGroupRequest {
  name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that you want to clone.', example='pg-gx2x1dhsmthe9****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ClonePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the new policy.', example='pg-7jcaznnx6go6n****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ClonePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClonePolicyGroupResponseBody(name='body'),
}

async function clonePolicyGroupWithOptions(request: ClonePolicyGroupRequest, runtime: Util.RuntimeOptions): ClonePolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClonePolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clonePolicyGroup(request: ClonePolicyGroupRequest): ClonePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return clonePolicyGroupWithOptions(request, runtime);
}

model CompleteCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-shanghai+cds-465878****'),
  endUserId?: string(name='EndUserId', example='test0'),
  fileId?: string(name='FileId', example='635a316c94f40f35f5354da29b2aee88c9d1****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  uploadId?: string(name='UploadId', example='6C48B55A1FAC4E1A9E0579059514****'),
}

model CompleteCdsFileResponseBody = {
  requestId?: string(name='RequestId', example='05C2791F-41A7-5E7C-B5E4-1401FD0E****'),
}

model CompleteCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompleteCdsFileResponseBody(name='body'),
}

async function completeCdsFileWithOptions(request: CompleteCdsFileRequest, runtime: Util.RuntimeOptions): CompleteCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.uploadId)) {
    query['UploadId'] = request.uploadId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompleteCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function completeCdsFile(request: CompleteCdsFileRequest): CompleteCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeCdsFileWithOptions(request, runtime);
}

model ConfigADConnectorTrustRequest {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-778418****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  trustKey?: string(name='TrustKey', description='The trust password. You can specify the password when you configure a trust relationship between the AD domain and the ecd.acs domain.', example='password123***'),
}

model ConfigADConnectorTrustResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorTrustResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigADConnectorTrustResponseBody(name='body'),
}

async function configADConnectorTrustWithOptions(request: ConfigADConnectorTrustRequest, runtime: Util.RuntimeOptions): ConfigADConnectorTrustResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.trustKey)) {
    query['TrustKey'] = request.trustKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigADConnectorTrust',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configADConnectorTrust(request: ConfigADConnectorTrustRequest): ConfigADConnectorTrustResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorTrustWithOptions(request, runtime);
}

model ConfigADConnectorUserRequest {
  domainPassword?: string(name='DomainPassword', description='The password of the AD user that has the permissions to join computers to domains.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the AD user that has the permissions to join computers to domains.

After the username is configured, the cloud desktops in the same AD workspace are joined to the specified OU.', example='Administrator'),
  OUName?: string(name='OUName', description='The name of the OU in the AD domain. You can call the [ListUserAdOrganizationUnits](~~311259~~) to obtain the OU name.', example='example.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-778418****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ConfigADConnectorUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigADConnectorUserResponseBody(name='body'),
}

async function configADConnectorUserWithOptions(request: ConfigADConnectorUserRequest, runtime: Util.RuntimeOptions): ConfigADConnectorUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigADConnectorUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configADConnectorUser(request: ConfigADConnectorUserRequest): ConfigADConnectorUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorUserWithOptions(request, runtime);
}

model CopyCdsFileRequest {
  autoRename?: boolean(name='AutoRename', example='true'),
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='640985a0ca2f71f489d2497682ca0bf468de****'),
  parentFolderId?: string(name='ParentFolderId', example='root'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CopyCdsFileResponseBody = {
  code?: string(name='Code', example='success'),
  copyCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', example='4221bf6e6ab43a255edc4463bffa6f5f5d31****'),
    fileId?: string(name='FileId', example='6400727cb878821bcb414615a609b4072463****'),
  }(name='CopyCdsFileModel'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='93AD30C1-16B8-5C54-AD23-A51FF53F****'),
  success?: string(name='Success', example='true'),
}

model CopyCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyCdsFileResponseBody(name='body'),
}

async function copyCdsFileWithOptions(request: CopyCdsFileRequest, runtime: Util.RuntimeOptions): CopyCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRename)) {
    query['AutoRename'] = request.autoRename;
  }
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyCdsFile(request: CopyCdsFileRequest): CopyCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCdsFileWithOptions(request, runtime);
}

model CopyImageRequest {
  destinationDescription?: string(name='DestinationDescription', example='This is a test.'),
  destinationImageName?: string(name='DestinationImageName', example='Office_Shanghai'),
  destinationRegionId?: string(name='DestinationRegionId', example='cn-shenzhen'),
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId', example='m-2g65ljy3ynrdq****'),
  requestId?: string(name='RequestId', example='28A40F12-F340-442B-A35F-46EF6A03****'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyImageResponseBody(name='body'),
}

async function copyImageWithOptions(request: CopyImageRequest, runtime: Util.RuntimeOptions): CopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationDescription)) {
    query['DestinationDescription'] = request.destinationDescription;
  }
  if (!Util.isUnset(request.destinationImageName)) {
    query['DestinationImageName'] = request.destinationImageName;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CreateADConnectorDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method that is used to connect the client to cloud desktops.', example='Internet'),
  directoryName?: string(name='DirectoryName', description='The name of the AD directory. The name must be 2 to 255 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='testDirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress', description='Details of the IP addresses of the Domain Name System (DNS) servers of the enterprise AD system. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.', example='127.0.**.**'),
  domainName?: string(name='DomainName', description='The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.', example='corp.example.com'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The password can be up to 64 characters in length.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.', example='sAMAccountName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the permissions of the local administrator to the regular user of the cloud desktop.', example='true'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA). If you enable MFA, all AD users in the AD directory must enter the password and the dynamic verification code generated by the MFA device when they log on to a cloud desktop.

>  The first time you log on to the Elastic Desktop Service (EDS) client as a regular user, you must bind an MFA device.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  specification?: long(name='Specification', description='The type of the AD connector.', example='1'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the enterprise AD subdomain.\\
If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='127.0.**.**'),
  subDomainName?: string(name='SubDomainName', description='The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.', example='child.example.com'),
  vSwitchId?: [ string ](name='VSwitchId', description='Details of the vSwitch IDs. You can specify only one vSwitch ID.', example='vsw-bp19ocz3erfx15uon****'),
}

model CreateADConnectorDirectoryResponseBody = {
  adConnectors?: [ 
    {
      address?: string(name='Address', description='The IP address of the AD connector.', example='127.0.**.**'),
    }
  ](name='AdConnectors', description='Details of the AD connectors.'),
  directoryId?: string(name='DirectoryId', description='The ID of the AD directory.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FE99D5E-93A1-493F-B1CB-0ABD4D05BEFF'),
  trustPassword?: string(name='TrustPassword', description='The AD trust password.', example='82Tg****'),
}

model CreateADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateADConnectorDirectoryResponseBody(name='body'),
}

/**
  * AD directories are used to connect to enterprise AD systems and are suitable for large-scale desktop deployments. You are charged for AD directories that are used to connect to enterprise AD systems. For more information, see [Billing overview](~~188395~~).
  *
  * @param request CreateADConnectorDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateADConnectorDirectoryResponse
 */
async function createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): CreateADConnectorDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateADConnectorDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * AD directories are used to connect to enterprise AD systems and are suitable for large-scale desktop deployments. You are charged for AD directories that are used to connect to enterprise AD systems. For more information, see [Billing overview](~~188395~~).
  *
  * @param request CreateADConnectorDirectoryRequest
  * @return CreateADConnectorDirectoryResponse
 */
async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorDirectoryWithOptions(request, runtime);
}

model CreateADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', description='Host name. The host name must comply with the Windows host convention.', example='beijing-ad01'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth value. Valid values: 0 to 200.

If you do not specify this parameter or you set this parameter to 0, Internet access is disabled.', example='1'),
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.

*   If you do not specify the CenId parameter, or the CEN instance that you specify for the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the exact Alibaba Cloud account.', example='102681951715****'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block in the secure office network of the workspace. The system creates a virtual private cloud (VPC) based on the IPv4 CIDR block that you specify. We recommend that you set the IPv4 CIDR block to 10.0.0.0/12, 172.16.0.0/12, 192.168.0.0/16, or a subnet of these CIDR blocks. If you set the IPv4 CIDR block to 10.0.0.0/12 or 172.16.0.0/12, the mask is 12 to 24 bits in length. If you set the IPv4 CIDR block to 192.168.0.0/16, the mask is 16 to 24 bits in length.', example='47.100.XX.XX'),
  desktopAccessType?: string(name='DesktopAccessType', description='The method that you use to connect to cloud desktops. Valid values:

*   Internet: connects clients to cloud desktops only over the Internet.
*   VPC: connects clients to cloud desktops only over a VPC.
*   Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method when you use a client to connect to the cloud desktop.

Default value: Internet.

>  The VPC connection method is provided by Alibaba Cloud PrivateLink. You are not charged for PrivateLink. When you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='Internet'),
  dnsAddress?: [ string ](name='DnsAddress', example='192.168.XX.XX'),
  domainName?: string(name='DomainName', description='The domain name of the enterprise AD system. You can register each domain name only once.', example='example.com'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The password can be up to 64 characters in length.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

>  Specify the value of the sAMAccountName parameter instead of the value of the userPrincipalName parameter as the username.', example='Administrator'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the permissions of the local administrator to the desktop users. Default value: true.', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access.', example='true'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA).', example='false'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace. The name must be 2 to 255 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain digits, colons (:), underscores (\\_), and hyphens (-).

Default value: null.', example='test'),
  protocolType?: string(name='ProtocolType', description='Protocol Type. Valid values: ASP.', example='ASP'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  specification?: long(name='Specification', description='Specification of AD Connector.

*   1: General.
*   2: High.', example='1'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', example='192.168.XX.XX'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the enterprise AD subdomain.', example='child.example.com'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the SendVerifyCode operation to obtain the verification code.', example='12****'),
}

model CreateADConnectorOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateADConnectorOfficeSiteResponseBody(name='body'),
}

/**
  * - When you create a workspace of the enterprise Active Directory (AD) account type, AD connectors are automatically created for you to connect to enterprise AD systems. You are charged for the AD connectors. For more information, see [Billing overview](~~188395~~).
  * - After you call this operation to create the AD workspace, you must configure the AD domain. To configure the AD domain, perform the following operations:
  *     1. Configure the conditional forwarder in the Domain Name System (DNS) server.
  *     2. Configure the trust relationship in the AD domain server, and call the [ConfigADConnectorTrust](~~311258~~) operation to configure the trust relationship for the AD workspace.
  *     3. Call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the organizational unit (OU) details of the AD domain. Then, call the [ConfigADConnectorUser](~~311262~~) operation to specify an OU and an administrator for the AD workspace.
  *     > If you specify the DomainUserName and DomainPassword parameters when you create the AD workspace, you need to configure only the conditional forwarder. If you do not specify the DomainUserName and DomainPassword parameters, you need to configure the conditional forwarder, trust relationship, and OU.
  * For more information, see [Create a workspace of the enterprise account type](~~214469~~).
  *
  * @param request CreateADConnectorOfficeSiteRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateADConnectorOfficeSiteResponse
 */
async function createADConnectorOfficeSiteWithOptions(request: CreateADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateADConnectorOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * - When you create a workspace of the enterprise Active Directory (AD) account type, AD connectors are automatically created for you to connect to enterprise AD systems. You are charged for the AD connectors. For more information, see [Billing overview](~~188395~~).
  * - After you call this operation to create the AD workspace, you must configure the AD domain. To configure the AD domain, perform the following operations:
  *     1. Configure the conditional forwarder in the Domain Name System (DNS) server.
  *     2. Configure the trust relationship in the AD domain server, and call the [ConfigADConnectorTrust](~~311258~~) operation to configure the trust relationship for the AD workspace.
  *     3. Call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the organizational unit (OU) details of the AD domain. Then, call the [ConfigADConnectorUser](~~311262~~) operation to specify an OU and an administrator for the AD workspace.
  *     > If you specify the DomainUserName and DomainPassword parameters when you create the AD workspace, you need to configure only the conditional forwarder. If you do not specify the DomainUserName and DomainPassword parameters, you need to configure the conditional forwarder, trust relationship, and OU.
  * For more information, see [Create a workspace of the enterprise account type](~~214469~~).
  *
  * @param request CreateADConnectorOfficeSiteRequest
  * @return CreateADConnectorOfficeSiteResponse
 */
async function createADConnectorOfficeSite(request: CreateADConnectorOfficeSiteRequest): CreateADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorOfficeSiteWithOptions(request, runtime);
}

model CreateAndBindNasFileSystemRequest {
  description?: string(name='Description', example='newDescription'),
  desktopGroupId?: string(name='DesktopGroupId', example='dg-fh0vdzyh6rdc*****'),
  encryptType?: int32(name='EncryptType', example='0'),
  endUserIds?: [ string ](name='EndUserIds'),
  fileSystemName?: string(name='FileSystemName', example='szy-asp-upm-test'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-15657*****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  storageType?: string(name='StorageType', example='Capacity'),
}

model CreateAndBindNasFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
}

model CreateAndBindNasFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAndBindNasFileSystemResponseBody(name='body'),
}

async function createAndBindNasFileSystemWithOptions(request: CreateAndBindNasFileSystemRequest, runtime: Util.RuntimeOptions): CreateAndBindNasFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.fileSystemName)) {
    query['FileSystemName'] = request.fileSystemName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAndBindNasFileSystem',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAndBindNasFileSystem(request: CreateAndBindNasFileSystemRequest): CreateAndBindNasFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAndBindNasFileSystemWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression for periodic scheduling.', example='0 0 2 ? * 1-7'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='test_auto_policy'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created. You can call the [DescribeRegions](~~25609~~) operation to query the latest region list.', example='cn-hangzhou'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of automatic snapshots. Unit: days. Valid values:

*   \\-1: Automatic snapshots are retained until they are deleted.
*   1 to 65536: Automatic snapshots are retained for the specified number of days.', example='30'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3hpa78d0qyt99****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateBundleRequest {
  bundleName?: string(name='BundleName', description='The name of the desktop template.', example='testBundleName'),
  description?: string(name='Description', description='The description of the desktop template.', example='test'),
  desktopType?: string(name='DesktopType', description='The type of the cloud desktop. You can call the DescribeBundles operation to query the cloud desktop templates and obtain the supported desktop type from the value of the DesktopType parameter.

>  You can select GPU-accelerated desktop types only when you use GPU-accelerated images.', example='ecd.basic.large'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
  language?: string(name='Language', description='The language of the OS. This parameter is available only for system images. Valid values:

*   zh-CN: Simplified Chinese
*   zh-HK: Traditional Chinese (Hong Kong)
*   en-US: English
*   ja-JP: Japanese', example='zh-CN'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

For more information about the differences between disks at different PLs, see [Enhanced SSDs](~~122389~~).', example='PL1'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The size of the system disk. Unit: GiB.

The value of this parameter must be consistent with the system disk size supported by the cloud desktop type. For more information, see [Cloud desktop types](~~188609~~).', example='80'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

For more information about the differences between disks at different PLs, see [Enhanced SSDs](~~122389~~).', example='PL1'),
  userDiskSizeGib?: [ int32 ](name='UserDiskSizeGib', example='70'),
}

model CreateBundleResponseBody = {
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-cezrnfgecbich****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateBundleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBundleResponseBody(name='body'),
}

/**
  * ## Description
  * Desktop templates are categorized into system templates and custom templates. System templates are the templates provided by Alibaba Cloud. You can call this operation to create a custom template.
  *
  * @param request CreateBundleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateBundleResponse
 */
async function createBundleWithOptions(request: CreateBundleRequest, runtime: Util.RuntimeOptions): CreateBundleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleName)) {
    query['BundleName'] = request.bundleName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskPerformanceLevel)) {
    query['RootDiskPerformanceLevel'] = request.rootDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.rootDiskSizeGib)) {
    query['RootDiskSizeGib'] = request.rootDiskSizeGib;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskSizeGib)) {
    query['UserDiskSizeGib'] = request.userDiskSizeGib;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBundle',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * Desktop templates are categorized into system templates and custom templates. System templates are the templates provided by Alibaba Cloud. You can call this operation to create a custom template.
  *
  * @param request CreateBundleRequest
  * @return CreateBundleResponse
 */
async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBundleWithOptions(request, runtime);
}

model CreateCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-82414*****'),
  conflictPolicy?: string(name='ConflictPolicy', example='ignore'),
  endUserId?: string(name='EndUserId', example='test1'),
  fileHash?: string(name='FileHash', example='7C4A8D09CA3762AF61E59520943DC26494F8****'),
  fileLength?: long(name='FileLength', example='2048'),
  fileName?: string(name='FileName', example='testFile.txt'),
  fileType?: string(name='FileType', example='file'),
  parentFileId?: string(name='ParentFileId', example='637c9163b453b1a384874264ba79f3f9eab9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateCdsFileResponseBody = {
  fileModels?: [ 
    {
      fileId?: string(name='FileId', example='6396c7c92c2248e10229412899c2b4af9021****'),
      uploadId?: string(name='UploadId', example='09E4E108E68D436CBFA08F56CB8F****'),
      uploadUrl?: string(name='UploadUrl', example='https://data.aliyunpds.com/xxx/xxx?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx&partNumber=1&uploadId=0CC175B9C0F1B6A831C399E26977****'),
    }
  ](name='FileModels'),
  requestId?: string(name='RequestId', example='2BAFE05D-FFB9-5938-96D0-08017DB9****'),
}

model CreateCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdsFileResponseBody(name='body'),
}

async function createCdsFileWithOptions(request: CreateCdsFileRequest, runtime: Util.RuntimeOptions): CreateCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileHash)) {
    query['FileHash'] = request.fileHash;
  }
  if (!Util.isUnset(request.fileLength)) {
    query['FileLength'] = request.fileLength;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.parentFileId)) {
    query['ParentFileId'] = request.parentFileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCdsFile(request: CreateCdsFileRequest): CreateCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdsFileWithOptions(request, runtime);
}

model CreateCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', example='cn-shanghai+cds-135515****'),
  description?: string(name='Description'),
  disableDownload?: boolean(name='DisableDownload', example='false'),
  disablePreview?: boolean(name='DisablePreview', example='false'),
  disableSave?: boolean(name='DisableSave', example='false'),
  downloadLimit?: long(name='DownloadLimit', example='100'),
  endUserId?: string(name='EndUserId', example='user01'),
  expiration?: string(name='Expiration', example='2020-06-28T11:33:00.000+08:00'),
  fileIds?: [ string ](name='FileIds'),
  previewLimit?: long(name='PreviewLimit', example='100'),
  saveLimit?: long(name='SaveLimit', example='100'),
  shareName?: string(name='ShareName', example='view.txt'),
  sharePwd?: string(name='SharePwd', example='12345678'),
}

model CreateCdsFileShareLinkResponseBody = {
  code?: string(name='Code', example='success'),
  data?: CdsFileShareLinkModel(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  success?: boolean(name='Success', example='true'),
}

model CreateCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdsFileShareLinkResponseBody(name='body'),
}

async function createCdsFileShareLinkWithOptions(request: CreateCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): CreateCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    query['DisableDownload'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    query['DisablePreview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    query['DisableSave'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    query['DownloadLimit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.fileIds)) {
    query['FileIds'] = request.fileIds;
  }
  if (!Util.isUnset(request.previewLimit)) {
    query['PreviewLimit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.saveLimit)) {
    query['SaveLimit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    query['SharePwd'] = request.sharePwd;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCdsFileShareLink(request: CreateCdsFileShareLinkRequest): CreateCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdsFileShareLinkWithOptions(request, runtime);
}

model CreateDesktopGroupRequest {
  allClassifyUsers?: boolean(name='AllClassifyUsers', description='The end users whom you want to add to all types of desktop groups.', example='Alice'),
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required.', example='1'),
  allowBufferCount?: int32(name='AllowBufferCount', description='Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not allow the system to reserve cloud desktops. N: allows the system to reserve N cloud desktops. The variable N must be an integer that ranges from 1 to 100.', example='1'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='true'),
  autoRenew?: boolean(name='AutoRenew'),
  bindAmount?: long(name='BindAmount', description='The number of sessions that are allowed per cloud desktop in a multi-session desktop group.', example='1'),
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of cloud desktops that you want to purchase. Valid values: 0 to 200.', example='3'),
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktops in the desktop group.', example='PrePaid'),
  classify?: string(name='Classify', description='The type of the desktop group.', example='teacher'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  comments?: string(name='Comments', description='The remarks on the desktop group.', example='test'),
  connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.', example='300000'),
  defaultInitDesktopCount?: int32(name='DefaultInitDesktopCount', description='The default number of cloud desktops to create when you create the desktop group. Default value: 1.', example='1'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='desktopGroupName1'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='hide'),
  endUserIds?: [ string ](name='EndUserIds', description='The end users that can use the desktop group.'),
  fileSystemId?: string(name='FileSystemId', description='The Apsara File Storage NAS (NAS) file system that is used after data roaming is enabled.', example='04f314****'),
  groupVersion?: int32(name='GroupVersion'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum period of time for which a session remains idle. If an end user performs no operations on a cloud desktop by using keyboards or mouses during a session, the session becomes idle. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.', example='300000'),
  keepDuration?: long(name='KeepDuration', description='The retention period of the cloud desktop after the end user disconnects from the cloud desktop. Unit: milliseconds.', example='6000'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.', example='50'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.', example='1'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  ownType?: int32(name='OwnType', description='The type of the desktop group.', example='0'),
  period?: int32(name='Period', description='The subscription period of the cloud desktops in the desktop group. The unit is specified by the PeriodUnit parameter. The Period parameter takes effect only if you set the ChargeType parameter to PrePaid.

*   Valid values if you set the PeriodUnit parameter to Month:

    *   1
    *   2
    *   3
    *   6

*   Valid values if you set the PeriodUnit parameter to Year:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-9c2d6t2dwflqr****'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable data roaming.', example='false'),
  ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.', example='0.5'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resetType?: long(name='ResetType', description='Specifies which type of the disk to reset for cloud desktops in the desktop group.', example='0'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy.

> This parameter is unavailable.', example='hide'),
  stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud desktop is stopped. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a stopped cloud desktop, the cloud desktop automatically starts. Unit: milliseconds.', example='300000'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create the desktop group.', example='hide'),
}

model CreateDesktopGroupResponseBody = {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  orderIds?: [ string ](name='OrderIds', description='The IDs of the orders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
}

model CreateDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDesktopGroupResponseBody(name='body'),
}

/**
  * # Description
  * Before you call this operation to create a desktop group, make sure that the following operations are complete:
  * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](~~290959~~) of desktop groups.
  * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
  *
  * @param request CreateDesktopGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDesktopGroupResponse
 */
async function createDesktopGroupWithOptions(request: CreateDesktopGroupRequest, runtime: Util.RuntimeOptions): CreateDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allClassifyUsers)) {
    query['AllClassifyUsers'] = request.allClassifyUsers;
  }
  if (!Util.isUnset(request.allowAutoSetup)) {
    query['AllowAutoSetup'] = request.allowAutoSetup;
  }
  if (!Util.isUnset(request.allowBufferCount)) {
    query['AllowBufferCount'] = request.allowBufferCount;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bindAmount)) {
    query['BindAmount'] = request.bindAmount;
  }
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.buyDesktopsCount)) {
    query['BuyDesktopsCount'] = request.buyDesktopsCount;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.classify)) {
    query['Classify'] = request.classify;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comments)) {
    query['Comments'] = request.comments;
  }
  if (!Util.isUnset(request.connectDuration)) {
    query['ConnectDuration'] = request.connectDuration;
  }
  if (!Util.isUnset(request.defaultInitDesktopCount)) {
    query['DefaultInitDesktopCount'] = request.defaultInitDesktopCount;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.groupVersion)) {
    query['GroupVersion'] = request.groupVersion;
  }
  if (!Util.isUnset(request.idleDisconnectDuration)) {
    query['IdleDisconnectDuration'] = request.idleDisconnectDuration;
  }
  if (!Util.isUnset(request.keepDuration)) {
    query['KeepDuration'] = request.keepDuration;
  }
  if (!Util.isUnset(request.loadPolicy)) {
    query['LoadPolicy'] = request.loadPolicy;
  }
  if (!Util.isUnset(request.maxDesktopsCount)) {
    query['MaxDesktopsCount'] = request.maxDesktopsCount;
  }
  if (!Util.isUnset(request.minDesktopsCount)) {
    query['MinDesktopsCount'] = request.minDesktopsCount;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.ownType)) {
    query['OwnType'] = request.ownType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.profileFollowSwitch)) {
    query['ProfileFollowSwitch'] = request.profileFollowSwitch;
  }
  if (!Util.isUnset(request.ratioThreshold)) {
    query['RatioThreshold'] = request.ratioThreshold;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.scaleStrategyId)) {
    query['ScaleStrategyId'] = request.scaleStrategyId;
  }
  if (!Util.isUnset(request.stopDuration)) {
    query['StopDuration'] = request.stopDuration;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  if (!Util.isUnset(request.volumeEncryptionKey)) {
    query['VolumeEncryptionKey'] = request.volumeEncryptionKey;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * # Description
  * Before you call this operation to create a desktop group, make sure that the following operations are complete:
  * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](~~290959~~) of desktop groups.
  * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
  *
  * @param request CreateDesktopGroupRequest
  * @return CreateDesktopGroupResponse
 */
async function createDesktopGroup(request: CreateDesktopGroupRequest): CreateDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopGroupWithOptions(request, runtime);
}

model CreateDesktopsRequest {
  amount?: int32(name='Amount', description='The number of cloud desktops that you want to create. Valid values: 1 to 300. Default value: 1.', example='1'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.````', example='false'),
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
  bundleModels?: [ 
    {
      amount?: int32(name='Amount', description='The number of cloud desktops that you want to create. Valid values: 1 to 300. Default value: 0.', example='1'),
      bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
      endUserIds?: [ string ](name='EndUserIds', description='The users to whom you want to assign the cloud desktops.'),
      hostname?: string(name='Hostname', description='The hostname that you specify for the cloud desktop. You can only specify the hostname of a Windows cloud desktop in the workspace of the enterprise AD account type.

The hostname must meet the following requirements:

*   It must be 2 to 15 characters in length.
*   It can contain letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

If you create multiple cloud desktops, you can use the`  name_prefix[begin_number,bits]name_suffix ` format to determine the hostnames of the cloud desktops. For example, if you set Hostname to ecd-\\[1,4]-test, the hostname of the first cloud desktop is ecd-0001-test and the hostname of the second cloud desktop is ecd-0002-test. Other hostnames follow the same rule.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the ordered numbers in the hostname. begin_number: the start number. Valid values: 0 to 999999. Default value: 0. bits: the digit. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='BundleModels', description='The desktop templates that you want to use.'),
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PrePaid'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop. The name must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). It must start with a letter but cannot start with http:// or https://.', example='testDesktopName'),
  desktopNameSuffix?: boolean(name='DesktopNameSuffix', description='Specifies whether to automatically add a suffix to the cloud desktop name when you create multiple cloud desktops at a time.', example='false'),
  directoryId?: string(name='DirectoryId', description='This parameter is not available.', example='To be hidden.'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users that you want to authorize to use the cloud desktop. The cloud desktop is assigned to the users. You can specify IDs of 1 to 100 users.

*   Only one user can use the cloud desktop at a time.
*   If you do not specify the `EndUserId` parameter, the cloud desktop that you create is not assigned to users.', example='123456789'),
  groupId?: string(name='GroupId', description='The ID of the desktop group.', example='dg-boyczi8enfyc5****'),
  hostname?: string(name='Hostname', description='The hostname that you specify for the cloud desktop. You can specify only the hostname of a Windows cloud desktop in the workspace of the enterprise AD account type.

The hostname must meet the following requirements:

*   It must be 2 to 15 characters in length.
*   It can contain letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

If you create multiple cloud desktops, you can use the`  name_prefix[begin_number,bits]name_suffix ` format to determine the hostnames of the cloud desktops. For example, if you set Hostname to ecd-\\[1,4]-test, the hostname of the first cloud desktop is ecd-0001-test and the hostname of the second cloud desktop is ecd-0002-test. Other hostnames follow the same rule.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the ordered numbers in the hostname. begin_number: the start number. Valid values: 0 to 999999. Default value: 0. bits: the digit. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  period?: int32(name='Period', description='The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.

*   Valid values if the `PeriodUnit` parameter is set to `Month`:

    *   1
    *   2
    *   3
    *   6

*   Valid values if the `PeriodUnit` parameter is set to `Year`:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify 1 to 20 keys for a tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. You can specify 1 to 20 values for a tag.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the cloud desktop.'),
  userAssignMode?: string(name='UserAssignMode', description='The assignment mode of the cloud desktop.

> If you do not specify the `EndUserId` parameter, the cloud desktop that you create is not assigned to users.', example='ALL'),
  userCommands?: [ 
    {
      content?: string(name='Content', description='The content of the command.', example='bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****'),
      contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content (CommandContent).', example='Base64'),
      contentType?: string(name='ContentType', description='The language type of the command.', example='RunPowerShellScript'),
    }
  ](name='UserCommands', description='The custom command scripts of the user.'),
  userName?: string(name='UserName', description='This parameter is not available.', example='To be hidden.'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
  vpcId?: string(name='VpcId', description='This parameter is not available.', example='To be hidden.'),
}

model CreateDesktopsResponseBody = {
  desktopId?: [ string ](name='DesktopId', description='If multiple cloud desktops are created in a call, the IDs of the cloud desktops are returned.'),
  orderId?: string(name='OrderId', description='The ID of the order.

> This parameter is returned only when you set the ChargeType parameter to PrePaid.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDesktopsResponseBody(name='body'),
}

/**
  * 1\\. Before you create a cloud desktop in Elastic Desktop Service (EDS), make sure that the following operations are complete:
  * *   A workspace and a user are created. For more information, see the following topics:
  *     *   Create a workspace of the convenience account type and a convenience user: [CreateSimpleOfficeSite](~~215416~~) and [Create a convenience user](~~214472~~)
  *     *   Create a workspace of the enterprise Active Directory (AD) account type and an enterprise AD user: [CreateADConnectorOfficeSite](~~215417~~) and [Create an enterprise AD user](~~188619~~)
  * *   A cloud desktop template is created by calling the [CreateBundle](~~188883~~) operation, or an existing cloud desktop template is used.
  * *   A policy is created by calling the [CreatePolicyGroup](~~188889~~) operation, or an existing policy is used.
  * 2\\. A custom command script that can be automatically executed after you create the cloud desktop is prepared. You can customize a command script by using the UserCommands parameter.
  *
  * @param request CreateDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDesktopsResponse
 */
async function createDesktopsWithOptions(request: CreateDesktopsRequest, runtime: Util.RuntimeOptions): CreateDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleModels)) {
    query['BundleModels'] = request.bundleModels;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopNameSuffix)) {
    query['DesktopNameSuffix'] = request.desktopNameSuffix;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userAssignMode)) {
    query['UserAssignMode'] = request.userAssignMode;
  }
  if (!Util.isUnset(request.userCommands)) {
    query['UserCommands'] = request.userCommands;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  if (!Util.isUnset(request.volumeEncryptionKey)) {
    query['VolumeEncryptionKey'] = request.volumeEncryptionKey;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. Before you create a cloud desktop in Elastic Desktop Service (EDS), make sure that the following operations are complete:
  * *   A workspace and a user are created. For more information, see the following topics:
  *     *   Create a workspace of the convenience account type and a convenience user: [CreateSimpleOfficeSite](~~215416~~) and [Create a convenience user](~~214472~~)
  *     *   Create a workspace of the enterprise Active Directory (AD) account type and an enterprise AD user: [CreateADConnectorOfficeSite](~~215417~~) and [Create an enterprise AD user](~~188619~~)
  * *   A cloud desktop template is created by calling the [CreateBundle](~~188883~~) operation, or an existing cloud desktop template is used.
  * *   A policy is created by calling the [CreatePolicyGroup](~~188889~~) operation, or an existing policy is used.
  * 2\\. A custom command script that can be automatically executed after you create the cloud desktop is prepared. You can customize a command script by using the UserCommands parameter.
  *
  * @param request CreateDesktopsRequest
  * @return CreateDesktopsResponse
 */
async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsWithOptions(request, runtime);
}

model CreateDiskEncryptionServiceRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model CreateDiskEncryptionServiceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='214552063030752'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateDiskEncryptionServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskEncryptionServiceResponseBody(name='body'),
}

async function createDiskEncryptionServiceWithOptions(request: CreateDiskEncryptionServiceRequest, runtime: Util.RuntimeOptions): CreateDiskEncryptionServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskEncryptionService',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskEncryptionService(request: CreateDiskEncryptionServiceRequest): CreateDiskEncryptionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskEncryptionServiceWithOptions(request, runtime);
}

model CreateImageRequest {
  autoCleanUserdata?: boolean(name='AutoCleanUserdata', description='Specifies whether to clear private data of users. If you set AutoCleanUserdata to `true`, the custom image clears the data directories, excluding the `Administrator` and `Public` directories, in the `C:\\Users` directory.', example='false'),
  description?: string(name='Description', description='The description of the custom image. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='This is description.'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
  diskType?: string(name='DiskType', description='The disk data that is contained in the custom image.', example='ALL'),
  imageName?: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='testImageName'),
  imageResourceType?: string(name='ImageResourceType', description='This parameter is not available to the public.', example='To be hidden.'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2zefuwk8l6ytcgd3bf4o'),
  snapshotIds?: [ string ](name='SnapshotIds', description='The ID of the snapshot.'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoCleanUserdata)) {
    query['AutoCleanUserdata'] = request.autoCleanUserdata;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageResourceType)) {
    query['ImageResourceType'] = request.imageResourceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateNASFileSystemRequest {
  description?: string(name='Description', description='The description of the NAS file system.', example='testDescription'),
  encryptType?: string(name='EncryptType', description='Specifies whether to encrypt the data in the NAS file system. You can use keys that are managed by Key Management Service (KMS) to encrypt the data that is stored in a NAS file system. When you read and write the encrypted data, the data is automatically decrypted. Valid values:

*   0: does not encrypt the data in the NAS file system.
*   1: encrypts the data in the NAS file system by using NAS-managed keys.

Default value: 0.', example='0'),
  name?: string(name='Name', example='testNAS'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  storageType?: string(name='StorageType', description='The storage type of the NAS file system. Valid values:

*   Capacity
*   Performance

Default value: Capacity.', example='Capacity'),
}

model CreateNASFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='04f314****'),
  fileSystemName?: string(name='FileSystemName', description='The name of the NAS file system.', example='testNAS'),
  mountTargetDomain?: string(name='MountTargetDomain', description='The domain name of the mount target.', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNASFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNASFileSystemResponseBody(name='body'),
}

/**
  * *   You can create a NAS file system for each standard workspace so that cloud desktops within the workspace can share files.
  * *   The system creates a General-purpose NAS file system and generates a default mount target. The storage types of the NAS file system includes Capacity type and Performance type. The Capacity type provides 10 PiB of storage while the Performance type provides only 1 PiB of storage.
  * *   NAS file systems are billed on a pay-as-you-go basis. You are charged based on the amount of used storage. You can also purchase resource plans to offset the storage fees of the NAS file systems.
  * For more information, see [Create a NAS file system](~~214481~~).
  *
  * @param request CreateNASFileSystemRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNASFileSystemResponse
 */
async function createNASFileSystemWithOptions(request: CreateNASFileSystemRequest, runtime: Util.RuntimeOptions): CreateNASFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNASFileSystem',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can create a NAS file system for each standard workspace so that cloud desktops within the workspace can share files.
  * *   The system creates a General-purpose NAS file system and generates a default mount target. The storage types of the NAS file system includes Capacity type and Performance type. The Capacity type provides 10 PiB of storage while the Performance type provides only 1 PiB of storage.
  * *   NAS file systems are billed on a pay-as-you-go basis. You are charged based on the amount of used storage. You can also purchase resource plans to offset the storage fees of the NAS file systems.
  * For more information, see [Create a NAS file system](~~214481~~).
  *
  * @param request CreateNASFileSystemRequest
  * @return CreateNASFileSystemResponse
 */
async function createNASFileSystem(request: CreateNASFileSystemRequest): CreateNASFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNASFileSystemWithOptions(request, runtime);
}

model CreateNetworkPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal.', example='false'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Unit: Mbit/s.\\
Valid values for the pay-by-data-transfer type (PayByTraffic): 10 to 200. Valid values for the pay-by-bandwith type (PayByBandwidth): 10 to 1000.', example='10'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the pay-as-you-go Internet access package. Valid values: PayByTraffic: pay-by-data-transfer. PayByBandwidth: pay-by-bandwidth. Default value: PayByTraffic.', example='PayByTraffic'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  payType?: string(name='PayType', description='The billing method of the Internet access package.', example='PrePaid'),
  period?: int32(name='Period', description='The duration of the Internet access package.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of duration that you want to use for the Internet access package.', example='Month'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model CreateNetworkPackageResponseBody = {
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-amtp8e8q1o9e4****'),
  orderId?: string(name='OrderId', description='The ID of the bill.', example='234526262716724'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkPackageResponseBody(name='body'),
}

async function createNetworkPackageWithOptions(request: CreateNetworkPackageRequest, runtime: Util.RuntimeOptions): CreateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkPackage(request: CreateNetworkPackageRequest): CreateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkPackageWithOptions(request, runtime);
}

model CreatePolicyGroupRequest {
  appContentProtection?: string(name='AppContentProtection', description='Specifies whether to enable the anti-screenshot feature.', example='off'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block that you want to access from the client.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client IP address whitelist.', example='North China Branch'),
    }
  ](name='AuthorizeAccessPolicyRule', description='The client IP address whitelists. Only the client IP addresses in whitelists can access the cloud desktop.'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the security group rule.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.', example='tcp'),
      policy?: string(name='Policy', description='The authorization policy of the security group rule.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.

*   If you set the IpProtocol parameter to TCP or UDP, the value range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set the IpProtocol parameter to ICMP, the start port number and the end port number are -1/-1.
*   If you set the IpProtocol parameter to GRE, the start port number and the end port number are -1/-1.
*   If you set the IpProtocol parameter to ALL, the start port number and the end port number are -1/-1.

For more information about the common ports of applications, see [Common ports](~~40724~~).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value specifies a higher priority.\\
Valid values: 1 to 60.\\
Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule.', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', description='The security group rules.'),
  cameraRedirect?: string(name='CameraRedirect', description='Specifies whether to enable the webcam redirection feature.', example='on'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', description='The type of the client.

> By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.', example='windows'),
      status?: string(name='Status', description='Specifies whether a specific client type can be used to connect to the cloud desktop.

> By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.', example='ON'),
    }
  ](name='ClientType', description='The logon methods. You can use this parameter to determine which clients can be used to connect to the cloud desktop.'),
  clipboard?: string(name='Clipboard', description='The permissions on the clipboard.', example='off'),
  domainList?: string(name='DomainList', description='The blacklist or whitelist of domain names. You can use asterisks (\\*) as wildcard characters for domain names. Separate multiple domain names with commas (,). Valid values:

*   \\[black:],example1.com,example2.com: domain name blacklist. The cloud desktop is not allowed to access the domain names that are specified in the blacklist.
*   \\[white:],example1.com,example2.com: domain name whitelist. The cloud desktop is allowed to access only the domain names that are specified in the whitelist.', example='[black:],example.com'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate'),
  gpuAcceleration?: string(name='GpuAcceleration', description='Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional design scenarios.', example='off'),
  html5Access?: string(name='Html5Access', description='The policy for HTML5 client access.

> To manage the type of Alibaba Cloud Workspace client for desktop connection, we recommend that you use the ClientType parameter.', example='off'),
  html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer policy for HTML5 clients.', example='off'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol that you want to use for network communication. Valid values: -TCP: Only TCP is allowed. -BOTH: Automatic switch between TCP and UDP is allowed. Default value: TCP.', example='both'),
  localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.', example='off'),
  name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName'),
  netRedirect?: string(name='NetRedirect', description='Specifies whether to enable the network redirection feature.', example='off'),
  preemptLogin?: string(name='PreemptLogin', description='Specifies whether to allow user preemption.

> To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time. The default value of this parameter is `off`, and the value cannot be changed.', example='off'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser', description='The names of the end users that are allowed to connect to a cloud desktop to which another end user is connecting. You can specify up to five usernames.

> To improve user experience and ensure data security, we recommend that you disable the user preemption feature.', example='Alice'),
  printerRedirection?: string(name='PrinterRedirection', description='The policy for printer redirection.', example='on'),
  recordContent?: string(name='RecordContent', description='Specifies whether to enable the custom screen recording feature.', example='OFF'),
  recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30'),
  recording?: string(name='Recording', description='Specifies whether to enable screen recording.', example='OFF'),
  recordingAudio?: string(name='RecordingAudio', description='Specifies whether to record audio data during the screen recording. Valid values:

*   on: records audio and video data.
*   off: records only video data.', example='on'),
  recordingDuration?: int32(name='RecordingDuration', description='The duration from the time when the screen recording starts to the time when the screen recording stops. If you specify the Recording parameter, you must also specify the RecordingDuration parameter. When the specified duration ends, a recording file is generated.', example='15'),
  recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording stops. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.', example='08:59:00'),
  recordingExpires?: long(name='RecordingExpires', description='The duration in which the screen recording is valid. Unit: days.', example='15'),
  recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording.', example='2'),
  recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording starts. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.', example='08:00:00'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions to control the keyboard and the mouse during remote assistance.', example='fullControl'),
  scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: takes effect globally.
*   IP: takes effect based on the IP address.', example='GLOBAL'),
  scopeValue?: [ string ](name='ScopeValue', description='The effective CIDR block range. If you set the Scope parameter to IP, you must specify this parameter.'),
  usbRedirect?: string(name='UsbRedirect', description='Specifies whether to enable USB redirection.', example='off'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description', description='The description of the rule.', example='Test rule'),
      deviceClass?: string(name='DeviceClass', description='The class of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
      productId?: string(name='ProductId', description='The ID of the product.', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', description='The type of USB redirection.', example='1'),
      usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.', example='1'),
      vendorId?: string(name='VendorId', description='The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf\\_1.pdf).', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', description='The USB redirection rule.'),
  videoRedirect?: string(name='VideoRedirect', description='Specifies whether to enable the multimedia redirection. Valid values:

*   on: enables the multimedia redirection.
*   off: disables the multimedia redirection.', example='on'),
  visualQuality?: string(name='VisualQuality', description='The policy for image display quality.', example='medium'),
  watermark?: string(name='Watermark', description='Specifies whether to enable watermarking.', example='off'),
  watermarkColor?: int32(name='WatermarkColor', description='The font color of the watermark. Valid values: 0 to 16777215.', example='0'),
  watermarkDegree?: double(name='WatermarkDegree', description='The inclination angle of the watermark. Valid values: -10 to -30.', example='-10'),
  watermarkFontSize?: int32(name='WatermarkFontSize', description='The font size of the watermark. Valid values: 10 to 20.', example='10'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', description='The font style of the watermark. Valid values:

*   plain
*   bold', example='plain'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows. This parameter is not supported.', example='5'),
  watermarkTransparency?: string(name='WatermarkTransparency', description='The transparency of the watermark.', example='LIGHT'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The transparency of the watermark. A larger value specifies that the watermark is less transparent. Valid values: 10 to 1000.', example='10'),
  watermarkType?: string(name='WatermarkType', description='The type of the watermark. You can specify multiple types of watermarks at the same time. Separate multiple watermark types with commas (,).', example='EndUserId'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-gx2x1dhsmthe9****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePolicyGroupResponseBody(name='body'),
}

/**
  * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](~~189345~~).
  *
  * @param request CreatePolicyGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appContentProtection)) {
    query['AppContentProtection'] = request.appContentProtection;
  }
  if (!Util.isUnset(request.authorizeAccessPolicyRule)) {
    query['AuthorizeAccessPolicyRule'] = request.authorizeAccessPolicyRule;
  }
  if (!Util.isUnset(request.authorizeSecurityPolicyRule)) {
    query['AuthorizeSecurityPolicyRule'] = request.authorizeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.cameraRedirect)) {
    query['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.clipboard)) {
    query['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.endUserApplyAdminCoordinate)) {
    query['EndUserApplyAdminCoordinate'] = request.endUserApplyAdminCoordinate;
  }
  if (!Util.isUnset(request.endUserGroupCoordinate)) {
    query['EndUserGroupCoordinate'] = request.endUserGroupCoordinate;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.html5Access)) {
    query['Html5Access'] = request.html5Access;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    query['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.internetCommunicationProtocol)) {
    query['InternetCommunicationProtocol'] = request.internetCommunicationProtocol;
  }
  if (!Util.isUnset(request.localDrive)) {
    query['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netRedirect)) {
    query['NetRedirect'] = request.netRedirect;
  }
  if (!Util.isUnset(request.preemptLogin)) {
    query['PreemptLogin'] = request.preemptLogin;
  }
  if (!Util.isUnset(request.preemptLoginUser)) {
    query['PreemptLoginUser'] = request.preemptLoginUser;
  }
  if (!Util.isUnset(request.printerRedirection)) {
    query['PrinterRedirection'] = request.printerRedirection;
  }
  if (!Util.isUnset(request.recordContent)) {
    query['RecordContent'] = request.recordContent;
  }
  if (!Util.isUnset(request.recordContentExpires)) {
    query['RecordContentExpires'] = request.recordContentExpires;
  }
  if (!Util.isUnset(request.recording)) {
    query['Recording'] = request.recording;
  }
  if (!Util.isUnset(request.recordingAudio)) {
    query['RecordingAudio'] = request.recordingAudio;
  }
  if (!Util.isUnset(request.recordingDuration)) {
    query['RecordingDuration'] = request.recordingDuration;
  }
  if (!Util.isUnset(request.recordingEndTime)) {
    query['RecordingEndTime'] = request.recordingEndTime;
  }
  if (!Util.isUnset(request.recordingExpires)) {
    query['RecordingExpires'] = request.recordingExpires;
  }
  if (!Util.isUnset(request.recordingFps)) {
    query['RecordingFps'] = request.recordingFps;
  }
  if (!Util.isUnset(request.recordingStartTime)) {
    query['RecordingStartTime'] = request.recordingStartTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCoordinate)) {
    query['RemoteCoordinate'] = request.remoteCoordinate;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeValue)) {
    query['ScopeValue'] = request.scopeValue;
  }
  if (!Util.isUnset(request.usbRedirect)) {
    query['UsbRedirect'] = request.usbRedirect;
  }
  if (!Util.isUnset(request.usbSupplyRedirectRule)) {
    query['UsbSupplyRedirectRule'] = request.usbSupplyRedirectRule;
  }
  if (!Util.isUnset(request.videoRedirect)) {
    query['VideoRedirect'] = request.videoRedirect;
  }
  if (!Util.isUnset(request.visualQuality)) {
    query['VisualQuality'] = request.visualQuality;
  }
  if (!Util.isUnset(request.watermark)) {
    query['Watermark'] = request.watermark;
  }
  if (!Util.isUnset(request.watermarkColor)) {
    query['WatermarkColor'] = request.watermarkColor;
  }
  if (!Util.isUnset(request.watermarkDegree)) {
    query['WatermarkDegree'] = request.watermarkDegree;
  }
  if (!Util.isUnset(request.watermarkFontSize)) {
    query['WatermarkFontSize'] = request.watermarkFontSize;
  }
  if (!Util.isUnset(request.watermarkFontStyle)) {
    query['WatermarkFontStyle'] = request.watermarkFontStyle;
  }
  if (!Util.isUnset(request.watermarkRowAmount)) {
    query['WatermarkRowAmount'] = request.watermarkRowAmount;
  }
  if (!Util.isUnset(request.watermarkTransparency)) {
    query['WatermarkTransparency'] = request.watermarkTransparency;
  }
  if (!Util.isUnset(request.watermarkTransparencyValue)) {
    query['WatermarkTransparencyValue'] = request.watermarkTransparencyValue;
  }
  if (!Util.isUnset(request.watermarkType)) {
    query['WatermarkType'] = request.watermarkType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](~~189345~~).
  *
  * @param request CreatePolicyGroupRequest
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model CreateRAMDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method that you use to connect clients to cloud desktops. Valid values:

*   Internet: connects clients to cloud desktops only over the Internet.
*   VPC: connects clients to cloud desktops only over a VPC.
*   Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method when you connect clients to cloud desktops.

Default value: Internet.


> The VPC connection method is provided by Alibaba Cloud PrivateLink. You are not charged for PrivateLink. If you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='Internet'),
  directoryName?: string(name='DirectoryName', description='The name of the directory. The name must be 2 to 255 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testDirectoryName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the permissions of the local administrator to the desktop users.

Default value: true.', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable the Internet access feature.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  vSwitchId?: [ string ](name='VSwitchId', description='The IDs of vSwitches. You can configure only one vSwitch.'),
}

model CreateRAMDirectoryResponseBody = {
  directoryId?: string(name='DirectoryId', description='The ID of the RAM directory.', example='dri-uf62w3qzt4aigvlcb****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateRAMDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRAMDirectoryResponseBody(name='body'),
}

/**
  * Before you create a RAM directory, make sure that you have completed the following operations:
  * *   You have created a virtual private cloud (VPC) by calling the [CreateVpc](~~35737~~) operation in a region where EDS is available.
  * *   You have created a vSwitch in the VPC by calling the [CreateVSwitch](~~35745~~) operation, and the vSwitch resides in a zone where EDS is available.
  *
  * @param request CreateRAMDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRAMDirectoryResponse
 */
async function createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: Util.RuntimeOptions): CreateRAMDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRAMDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you create a RAM directory, make sure that you have completed the following operations:
  * *   You have created a virtual private cloud (VPC) by calling the [CreateVpc](~~35737~~) operation in a region where EDS is available.
  * *   You have created a vSwitch in the VPC by calling the [CreateVSwitch](~~35745~~) operation, and the vSwitch resides in a zone where EDS is available.
  *
  * @param request CreateRAMDirectoryRequest
  * @return CreateRAMDirectoryResponse
 */
async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRAMDirectoryWithOptions(request, runtime);
}

model CreateSimpleOfficeSiteRequest {
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Value range: 10 to 200. Unit: Mbit/s. This parameter is available if you set `EnableInternetAccess` to `true`.', example='10'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.

> If you want to connect to your cloud desktops over a VPC, you can attach the network of the workspace to the CEN instance. The CEN instance is connected to the on-premises network over VPN Gateway or Express Connect.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.

- If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
- If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.', example='118272523431****'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block in the secure office network of the workspace. The IPv4 CIDR block that the system uses to create a virtual private cloud (VPC) for the workspace. We recommend that you set the IPv4 CIDR block to 10.0.0.0/12, 172.16.0.0/12, 192.168.0.0/16, or a subnet of these CIDR blocks. If you set the IPv4 CIDR block to 10.0.0.0/12 or 172.16.0.0/12, the mask is 1224 bits in length. If you set the IPv4 CIDR block to 192.168.0.0/16, the mask is 1624 bits in length.', example='172.16.0.0/12'),
  cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', description='Specifies whether the workspace is a CloudBox-based workspace.', example='false'),
  desktopAccessType?: string(name='DesktopAccessType', description='The method that is used to connect the client to cloud desktops.

> VPC connections are established by using Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='Internet'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the permissions of the local administrator to the regular user of the cloud desktop.', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access. By default, Internet access is not enabled.', example='false'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='Specifies whether to enable trusted device verification.', example='true'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace. The name must be 2 to 255 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='TestOfficeSite_Simple'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  vSwitchId?: [ string ](name='VSwitchId', description='The IDs of the vSwitches in the VPC. This parameter is required when you create a CloudBox-based workspace.'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](~~335132~~) operation to obtain the verification code.', example='123456'),
}

model CreateSimpleOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateSimpleOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimpleOfficeSiteResponseBody(name='body'),
}

async function createSimpleOfficeSiteWithOptions(request: CreateSimpleOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateSimpleOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.cloudBoxOfficeSite)) {
    query['CloudBoxOfficeSite'] = request.cloudBoxOfficeSite;
  }
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.needVerifyZeroDevice)) {
    query['NeedVerifyZeroDevice'] = request.needVerifyZeroDevice;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimpleOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSimpleOfficeSite(request: CreateSimpleOfficeSiteRequest): CreateSimpleOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimpleOfficeSiteWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  description?: string(name='Description', description='The description of the snapshot. The description can be up to 128 characters in length.', example='testDescription'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****"'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length.\\
It cannot start with auto because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the disk for which you want to create a snapshot. Valid values:

*   system: system disk
*   data: data disk', example='system'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2ze81owrnv9pity4****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * The cloud desktop for which you want to create a snapshot must be in the **Running** state or **Stopped** state.
  *
  * @param request CreateSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSnapshotResponse
 */
async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop for which you want to create a snapshot must be in the **Running** state or **Stopped** state.
  *
  * @param request CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  policyId?: [ string ](name='PolicyId', description='The ID of the policy template that you want to manage.

> You can call the [ListDefensePolicies](~~195814~~) operation to query the IDs of all policy templates.'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created.', example='cn-hangzhou'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteBundlesRequest {
  bundleId?: [ string ](name='BundleId', description='The desktop bundles that you want to delete.', example='b-cezrnfgecbich****'),
  regionId?: string(name='RegionId', description='The ID of the region where the desktop bundles to delete are located.', example='cn-hangzhou'),
}

model DeleteBundlesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteBundlesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBundlesResponseBody(name='body'),
}

async function deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: Util.RuntimeOptions): DeleteBundlesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBundles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBundlesWithOptions(request, runtime);
}

model DeleteCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteCdsFileResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5CC5E450-FC43-4F5B-B540-9964BD31****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdsFileResponseBody(name='body'),
}

async function deleteCdsFileWithOptions(request: DeleteCdsFileRequest, runtime: Util.RuntimeOptions): DeleteCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCdsFile(request: DeleteCdsFileRequest): DeleteCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdsFileWithOptions(request, runtime);
}

model DeleteCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-hangzhou+cds-532033****'),
  groupId?: [ string ](name='GroupId', description='The IDs of the teams that you want to delete.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is `success`.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. The value true indicates success. The value false indicates failure.', example='true'),
}

model DeleteCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudDriveGroupsResponseBody(name='body'),
}

async function deleteCloudDriveGroupsWithOptions(request: DeleteCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): DeleteCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudDriveGroups(request: DeleteCloudDriveGroupsRequest): DeleteCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudDriveGroupsWithOptions(request, runtime);
}

model DeleteCloudDriveUsersRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-64326*****'),
  endUserId?: [ string ](name='EndUserId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId', example='EAEFFE4B-E87B-5F76-B165-9248F3774F9D'),
}

model DeleteCloudDriveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudDriveUsersResponseBody(name='body'),
}

async function deleteCloudDriveUsersWithOptions(request: DeleteCloudDriveUsersRequest, runtime: Util.RuntimeOptions): DeleteCloudDriveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudDriveUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudDriveUsers(request: DeleteCloudDriveUsersRequest): DeleteCloudDriveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudDriveUsersWithOptions(request, runtime);
}

model DeleteDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDesktopGroupResponseBody(name='body'),
}

async function deleteDesktopGroupWithOptions(request: DeleteDesktopGroupRequest, runtime: Util.RuntimeOptions): DeleteDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDesktopGroup(request: DeleteDesktopGroupRequest): DeleteDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopGroupWithOptions(request, runtime);
}

model DeleteDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops that you want to release. You can configure up to 100 desktop IDs.'),
  regionId?: string(name='RegionId', description='The ID of the region where the cloud desktops to release are located.', example='cn-hangzhou'),
}

model DeleteDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDesktopsResponseBody(name='body'),
}

async function deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: Util.RuntimeOptions): DeleteDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopsWithOptions(request, runtime);
}

model DeleteDevicesRequest {
  clientType?: int32(name='ClientType', description='The type of the device.

*   1: the hardware client device
*   2: the software client device', example='2'),
  deviceIds?: [ string ](name='DeviceIds', description='The list of universally unique identifiers (UUIDs) of devices.'),
  force?: int32(name='Force', description='Specifies whether to forcefully delete the device.

*   1: forcefully deletes the device.
*   0: does not forcefully delete the device. (You cannot delete a device to which a user is bound.)', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteDevicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2AF861B4-0ECC-130C-B100-21A01E02****'),
}

model DeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicesResponseBody(name='body'),
}

/**
  * You can call the operation to manage client devices.
  *
  * @param request DeleteDevicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDevicesResponse
 */
async function deleteDevicesWithOptions(request: DeleteDevicesRequest, runtime: Util.RuntimeOptions): DeleteDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to manage client devices.
  *
  * @param request DeleteDevicesRequest
  * @return DeleteDevicesResponse
 */
async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicesWithOptions(request, runtime);
}

model DeleteDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', description='The IDs of directories.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteDirectoriesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5CC5E450-FC43-4F5B-B540-9964BD313427'),
}

model DeleteDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDirectoriesResponseBody(name='body'),
}

/**
  * You cannot delete directories that are in use by cloud desktops.
  *
  * @param request DeleteDirectoriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDirectoriesResponse
 */
async function deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: Util.RuntimeOptions): DeleteDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectories',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You cannot delete directories that are in use by cloud desktops.
  *
  * @param request DeleteDirectoriesRequest
  * @return DeleteDirectoriesResponse
 */
async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoriesWithOptions(request, runtime);
}

model DeleteImagesRequest {
  deleteCascadedBundle?: boolean(name='DeleteCascadedBundle'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images that you want to delete.'),
  regionId?: string(name='RegionId', description='The ID of the region where the images to delete are located.', example='cn-hangzhou'),
}

model DeleteImagesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImagesResponseBody(name='body'),
}

/**
  * ## Description
  * *   Images include system images and custom images. System images cannot be deleted.
  * *   If an image to delete is used by a desktop bundle, call the [DeleteBundles](~~188885~~) operation to delete the desktop bundle.
  *
  * @param request DeleteImagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteImagesResponse
 */
async function deleteImagesWithOptions(request: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteCascadedBundle)) {
    query['DeleteCascadedBundle'] = request.deleteCascadedBundle;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   Images include system images and custom images. System images cannot be deleted.
  * *   If an image to delete is used by a desktop bundle, call the [DeleteBundles](~~188885~~) operation to delete the desktop bundle.
  *
  * @param request DeleteImagesRequest
  * @return DeleteImagesResponse
 */
async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DeleteNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId', description='The IDs of the NAS file systems.', example='04f314****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteNASFileSystemsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNASFileSystemsResponseBody(name='body'),
}

/**
  * ## Description
  * Before you delete a NAS file system, make sure that the data you want to retain is backed up.
  * >  If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
  *
  * @param request DeleteNASFileSystemsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNASFileSystemsResponse
 */
async function deleteNASFileSystemsWithOptions(request: DeleteNASFileSystemsRequest, runtime: Util.RuntimeOptions): DeleteNASFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNASFileSystems',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * Before you delete a NAS file system, make sure that the data you want to retain is backed up.
  * >  If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
  *
  * @param request DeleteNASFileSystemsRequest
  * @return DeleteNASFileSystemsResponse
 */
async function deleteNASFileSystems(request: DeleteNASFileSystemsRequest): DeleteNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNASFileSystemsWithOptions(request, runtime);
}

model DeleteNetworkPackagesRequest {
  networkPackageId?: [ string ](name='NetworkPackageId', description='The IDs of Internet access packages.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteNetworkPackagesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkPackagesResponseBody(name='body'),
}

async function deleteNetworkPackagesWithOptions(request: DeleteNetworkPackagesRequest, runtime: Util.RuntimeOptions): DeleteNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkPackages(request: DeleteNetworkPackagesRequest): DeleteNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkPackagesWithOptions(request, runtime);
}

model DeleteOfficeSitesRequest {
  officeSiteId?: [ string ](name='OfficeSiteId', description='The IDs of the workspaces. You can specify up to 100 workspace IDs.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteOfficeSitesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOfficeSitesResponseBody(name='body'),
}

/**
  * Before you delete a workspace, make sure that the following operations are complete:
  * *   All cloud desktops in the workspace are released.
  * *   The data that you want to retain is backed up.
  * >  After a workspace is deleted, its resources and data cannot be restored. Proceed with caution.
  *
  * @param request DeleteOfficeSitesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteOfficeSitesResponse
 */
async function deleteOfficeSitesWithOptions(request: DeleteOfficeSitesRequest, runtime: Util.RuntimeOptions): DeleteOfficeSitesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOfficeSites',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you delete a workspace, make sure that the following operations are complete:
  * *   All cloud desktops in the workspace are released.
  * *   The data that you want to retain is backed up.
  * >  After a workspace is deleted, its resources and data cannot be restored. Proceed with caution.
  *
  * @param request DeleteOfficeSitesRequest
  * @return DeleteOfficeSitesResponse
 */
async function deleteOfficeSites(request: DeleteOfficeSitesRequest): DeleteOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOfficeSitesWithOptions(request, runtime);
}

model DeletePolicyGroupsRequest {
  policyGroupId?: [ string ](name='PolicyGroupId', description='The ID of the policy. You can specify 1 to 100 policy IDs.', example='pg-gx2x1dhsmthe9****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeletePolicyGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeletePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyGroupsResponseBody(name='body'),
}

/**
  * *   System policies cannot be deleted.
  * *   Custom policies that are associated with cloud desktops cannot be deleted.
  *
  * @param request DeletePolicyGroupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeletePolicyGroupsResponse
 */
async function deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   System policies cannot be deleted.
  * *   Custom policies that are associated with cloud desktops cannot be deleted.
  *
  * @param request DeletePolicyGroupsRequest
  * @return DeletePolicyGroupsResponse
 */
async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupsWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  snapshotId?: [ string ](name='SnapshotId', description='The IDs of the snapshots. You can specify 1 to 100 IDs of snapshots.', example='s-2ze81owrnv9pity4****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * If the IDs of the snapshots that you specify do not exist, requests are ignored.
  *
  * @param request DeleteSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the IDs of the snapshots that you specify do not exist, requests are ignored.
  *
  * @param request DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound to AD users.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

/**
  * ## Description
  * If an MFA device is deleted, the device is unbound, reset, and disabled. When the Active Directory (AD) user wants to log on to the cloud desktop, the AD user must bind a new MFA device.
  *
  * @param request DeleteVirtualMFADeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADeviceWithOptions(request: DeleteVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): DeleteVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * If an MFA device is deleted, the device is unbound, reset, and disabled. When the Active Directory (AD) user wants to log on to the cloud desktop, the AD user must bind a new MFA device.
  *
  * @param request DeleteVirtualMFADeviceRequest
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualMFADeviceWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
  eventName?: string(name='EventName', description='The name of the alert event.'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  uniqueInfo?: string(name='UniqueInfo', description='The ID of the alert event.', example='8604b4db8dc6d02ab13b4ae06293****'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  stackInfo?: string(name='StackInfo', description='The stack information of the alert details.', example='3011 ruby -rosocket -e exit xxxx'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventStackInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeAutoSnapshotPolicyRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6mqIGdPhID94rjhZFGsvpJo'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-c5tv9d64ebjnj****'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='Test 1201'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicies?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the automatic snapshot policy was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time is displayed in UTC.', example='2023-01-11T09:14:00Z'),
      cronExpression?: string(name='CronExpression', description='The CRON expression that is used to create the snapshot.', example='0 0 5,7 ? * 2/2'),
      desktopNum?: int32(name='DesktopNum', description='The number of cloud desktops that are associated with the automatic snapshot policy.', example='5'),
      policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3e3bmfcdkjfl1****'),
      policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='snapshot01'),
      regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy resides.', example='cn-hangzhou'),
      retentionDays?: string(name='RetentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65536: The automatic snapshot is retained for the specified number of days.', example='3'),
      status?: string(name='Status', description='The state of the automatic snapshot policy. Valid values:

*   Normal: The automatic snapshot policy is normal.
*   Expire: The automatic snapshot policy cannot be used because your account has an overdue payment.', example='Normal'),
      timePoints?: string(name='TimePoints', description='The points in time at which automatic snapshots are created.

The time is displayed in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Multiple points in time can be specified.

The parameter value is a JSON array that contains up to 24 points in time separated by commas (,). Example: `["0", "1", ... "23"]`.', example='["17","18"]'),
    }
  ](name='AutoSnapshotPolicies', description='Details of the automatic snapshot policies.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results haven been returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7F6612E-59CC-59F9-9DD1-91867FCC****'),
}

model DescribeAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
  *
  * @param request DescribeAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAutoSnapshotPolicyResponse
 */
async function describeAutoSnapshotPolicyWithOptions(request: DescribeAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
  *
  * @param request DescribeAutoSnapshotPolicyRequest
  * @return DescribeAutoSnapshotPolicyResponse
 */
async function describeAutoSnapshotPolicy(request: DescribeAutoSnapshotPolicyRequest): DescribeAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPolicyWithOptions(request, runtime);
}

model DescribeBundlesRequest {
  bundleId?: [ string ](name='BundleId', description='The IDs of the desktop templates. You can specify 1 to 100 desktop templates.', example='bundle_ecd_graphics.2xlarge_s15d15_win2019'),
  bundleType?: string(name='BundleType', description='The type of the desktop template.', example='SYSTEM'),
  checkStock?: boolean(name='CheckStock', description='Specifies whether to query the inventory status of the desktop type.', example='true'),
  cpuCount?: int32(name='CpuCount', description='The number of vCPUs of the desktop type.', example='2'),
  desktopTypeFamily?: string(name='DesktopTypeFamily', description='The family of the desktop type.', example='eds.general'),
  fotaChannel?: string(name='FotaChannel', description='This parameter is now in invitational preview and unavailable.', example='This parameter is now in invitational preview and unavailable.'),
  fromDesktopGroup?: boolean(name='FromDesktopGroup', description='Specifies whether the cloud desktop that uses the desktop template belongs to the desktop group. Default value: `false`.', example='false'),
  gpuCount?: float(name='GpuCount', description='The number of GPUs of the desktop type.', example='1'),
  imageId?: [ string ](name='ImageId'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  memorySize?: int32(name='MemorySize', description='The memory size of the desktop type. Unit: GiB.', example='4'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  selectedBundle?: boolean(name='SelectedBundle', description='The desktop template that is selected based on specific criteria.', example='true'),
  sessionType?: string(name='SessionType', description='The type of the session.', example='SingleSession'),
  supportMultiSession?: boolean(name='SupportMultiSession', description='Specifies whether to return multi-session desktop templates in this call. Default value: false.', example='false'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
}

model DescribeBundlesResponseBody = {
  bundles?: [ 
    {
      bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='bundle_ecd_graphics.2xlarge_s15d15_win2019'),
      bundleName?: string(name='BundleName', description='The name of the desktop template.', example='Advanced graphics with Windows 2019'),
      bundleType?: string(name='BundleType', description='The type of the desktop template.', example='SYSTEM'),
      creationTime?: string(name='CreationTime', description='The time when the desktop template was created.', example='2021-09-30T06:09Z'),
      description?: string(name='Description', description='The description of the desktop template.', example='test'),
      desktopType?: string(name='DesktopType', description='The desktop type.', example='ecd.graphics.2xlarge'),
      desktopTypeAttribute?: {
        cpuCount?: int32(name='CpuCount', description='The number of vCPUs.', example='10'),
        gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='0.5'),
        gpuSpec?: string(name='GpuSpec', description='The type of the GPU.', example='NVIDIA T4'),
        memorySize?: int32(name='MemorySize', description='The size of the memory. Unit: MB.', example='47104'),
      }(name='DesktopTypeAttribute', description='Details of the desktop type.'),
      desktopTypeFamily?: string(name='DesktopTypeFamily', description='The family of the desktop type.', example='eds.general'),
      disks?: [ 
        {
          diskPerformanceLevel?: string(name='DiskPerformanceLevel', description='The performance level (PL) of the disk.', example='PL0'),
          diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GiB.', example='150'),
          diskType?: string(name='DiskType', description='The type of the disk.', example='SYSTEM'),
        }
      ](name='Disks', description='Details of the disks.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='desktopimage-windows-server-2019-64-ch-vgpu'),
      imageName?: string(name='ImageName', description='The name of the image.', example='Windows server 2019 Chinese'),
      imageStatus?: string(name='ImageStatus'),
      language?: string(name='Language', description='The OS language of the image.', example='en-US'),
      osType?: string(name='OsType', description='The type of the OS.', example='Windows'),
      platform?: string(name='Platform', description='The information about the OS platform. Valid values:

*   CentOS
*   Ubuntu
*   Windows Server 2016
*   Windows Server 2019
*   UOS', example='Windows Server 2019'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      sessionType?: string(name='SessionType', description='The type of the session.', example='0'),
      stockState?: string(name='StockState', description='The inventory status of the desktop type. This parameter is returned only if you set the `CheckStock` parameter to `True`.', example='Sufficient'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Bundles', description='Details of the desktop templates.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If null is returned, the next query is not required.', example='AAAAAV3MpHK1AP0pfERHZN5pu6lu3PTF6h3zE8egwlYuv8M8'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCC854D8-5D1E-46D3-96EF-797A5DD36789'),
}

model DescribeBundlesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBundlesResponseBody(name='body'),
}

async function describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: Util.RuntimeOptions): DescribeBundlesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleType)) {
    query['BundleType'] = request.bundleType;
  }
  if (!Util.isUnset(request.checkStock)) {
    query['CheckStock'] = request.checkStock;
  }
  if (!Util.isUnset(request.cpuCount)) {
    query['CpuCount'] = request.cpuCount;
  }
  if (!Util.isUnset(request.desktopTypeFamily)) {
    query['DesktopTypeFamily'] = request.desktopTypeFamily;
  }
  if (!Util.isUnset(request.fotaChannel)) {
    query['FotaChannel'] = request.fotaChannel;
  }
  if (!Util.isUnset(request.fromDesktopGroup)) {
    query['FromDesktopGroup'] = request.fromDesktopGroup;
  }
  if (!Util.isUnset(request.gpuCount)) {
    query['GpuCount'] = request.gpuCount;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.memorySize)) {
    query['MemorySize'] = request.memorySize;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.selectedBundle)) {
    query['SelectedBundle'] = request.selectedBundle;
  }
  if (!Util.isUnset(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  if (!Util.isUnset(request.supportMultiSession)) {
    query['SupportMultiSession'] = request.supportMultiSession;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBundles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBundlesWithOptions(request, runtime);
}

model DescribeCdsFileShareLinksRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-532033****'),
  creators?: [ string ](name='Creators'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  shareId?: string(name='ShareId', example='7JQX1Fs****'),
  shareName?: string(name='ShareName', example='user'),
  status?: string(name='Status', example='disabled'),
}

model DescribeCdsFileShareLinksResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [
    CdsFileShareLinkModel
  ](name='Data'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6mnFXZiT7NdvGNgkInJ****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCdsFileShareLinksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdsFileShareLinksResponseBody(name='body'),
}

async function describeCdsFileShareLinksWithOptions(request: DescribeCdsFileShareLinksRequest, runtime: Util.RuntimeOptions): DescribeCdsFileShareLinksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.creators)) {
    query['Creators'] = request.creators;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdsFileShareLinks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdsFileShareLinks(request: DescribeCdsFileShareLinksRequest): DescribeCdsFileShareLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdsFileShareLinksWithOptions(request, runtime);
}

model DescribeCensRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries to return on each page.

Default value: 50.', example='50'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeCensResponseBody = {
  cens?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
      creationTime?: string(name='CreationTime', description='The time when the CEN instance was created.', example='2021-06-16T08:46Z'),
      description?: string(name='Description', description='The description of the CEN instance.', example='test'),
      ipv6Level?: string(name='Ipv6Level', description='Indicates whether IPv6 is supported. Valid value: DISABLED. This value indicates that IPv6 is not supported.

>  IPv6 is not supported.', example='DISABLED'),
      name?: string(name='Name', description='The name of the CEN instance.', example='testCen'),
      packageIds?: [ 
        {
          packageId?: string(name='PackageId', description='The ID of the bandwidth plan that is associated with the CEN instance.', example='cenbwp-4c2zaavbvh5f42****'),
        }
      ](name='PackageIds', description='The IDs of the bandwidth plans that are associated with the CEN instance.'),
      protectionLevel?: string(name='ProtectionLevel', description='The level of CIDR block overlapping. Valid value: REDUCED. This value indicates that the CIDR blocks can overlap with each other but must not be the same.', example='REDUCED'),
      status?: string(name='Status', description='The status of the CEN instance. Valid values:

*   Creating: The CEN instance is being created.
*   Active: The CEN instance is running.
*   Deleting: The CEN instance is being deleted.', example='Active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the CEN instance.', example='testKey'),
          value?: string(name='Value', description='The tag value of the CEN instance.', example='testValue'),
        }
      ](name='Tags', description='The tags of the CEN instance.'),
    }
  ](name='Cens', description='Details about CEN instances.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of CEN instances returned.', example='1'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCensWithOptions(request: DescribeCensRequest, runtime: Util.RuntimeOptions): DescribeCensResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCens',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCensWithOptions(request, runtime);
}

model DescribeClientEventsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.', example='ecd-8fupvkhg0aayu****'),
  desktopIp?: string(name='DesktopIp', description='The IP address of the cloud desktop. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.', example='10.10.*.*'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='test'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, the current time is used.', example='2020-11-31T06:32:31Z'),
  endUserId?: string(name='EndUserId', description='The information about the regular user that connects to the cloud desktop from the EDS client. The information can be the RAM user ID or Active Directory (AD) username. If you do not specify a value for this parameter, events of all regular users in the specified region are queried.', example='28961708130834****'),
  eventType?: string(name='EventType', description='The type of event that you want to query. Valid values:

*   DESKTOP_CONNECT: The desktop session is established.
*   DESKTOP_DISCONNECT: The desktop session is disconnected.
*   DESKTOP_REBOOT: The cloud desktop is restarted.
*   CLIENT_AD_LOGIN: The AD user logs on to the client.
*   GET_CONNECTION_TICKET: The request to connect to the cloud desktop is sent.
*   DESKTOP_START: The cloud desktop is started.
*   DESKTOP_STOP: The cloud desktop is stopped.

If you do not specify a value for this parameter, events of all types are queried.', example='DESKTOP_DISCONNECT'),
  eventTypes?: [ string ](name='EventTypes', description='The types of event.'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Default value: 100.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value that is returned from the last call to the DescribeClientEvents operation.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the cloud desktop belongs. If you do not specify a value for this parameter, events of all workspaces in the specified region are queried.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region where the cloud desktop resides.', example='cn-hangzhou'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.', example='2020-11-30T06:32:31Z'),
}

model DescribeClientEventsResponseBody = {
  events?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account with which the event is associated.', example='112259558861****'),
      bytesReceived?: string(name='BytesReceived', description='The number of bytes that are received.', example='8665'),
      bytesSend?: string(name='BytesSend', description='The number of bytes that are sent.', example='2345'),
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='100.68.*.*'),
      clientOS?: string(name='ClientOS', description='The OS that the client runs.', example='Darwin 17.7.0 x64'),
      clientVersion?: string(name='ClientVersion', description='The version of the client.', example='1.0.4 202012021700'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-kadkdfaf****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='testName'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-8fupvkhg0aayu****'),
      desktopIp?: string(name='DesktopIp', description='The IP address of the cloud desktop.', example='10.10.*.*'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='test'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      directoryType?: string(name='DirectoryType', description='The type of the directory.', example='RAM'),
      endUserId?: string(name='EndUserId', description='The information about the regular user that connects to the cloud desktop from the EDS client. The information can be the RAM user ID or AD username.', example='28961708130834****'),
      eventId?: string(name='EventId', description='The ID of the event.', example='5651188b-3070-d1cc-5311-75753d59****'),
      eventTime?: string(name='EventTime', description='The time when the event occurred.', example='2020-11-30T06:32:31Z'),
      eventType?: string(name='EventType', description='The type of the event.', example='DESKTOP_DISCONNECT'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace. Valid values:

*   SIMPLE: convenience account
*   AD_CONNECTOR: enterprise AD account', example='SIMPLE'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the event. This parameter is returned if you set the EventType parameter to DESKTOP_DISCONNECT or GET_CONNECTION_TICKET. Valid values:

*   200\\. The value indicates that the request is successful.
*   An error message. The value indicates that the request failed. Example: FailedToGetConnectionTicket.', example='200'),
    }
  ](name='Events', description='Details about the events.'),
  nextToken?: string(name='NextToken', description='The query token that is returned in this call.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28A40F12-F340-442B-A35F-46EF6A03227B'),
}

model DescribeClientEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientEventsResponseBody(name='body'),
}

/**
  * You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
  *
  * @param request DescribeClientEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClientEventsResponse
 */
async function describeClientEventsWithOptions(request: DescribeClientEventsRequest, runtime: Util.RuntimeOptions): DescribeClientEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopIp)) {
    query['DesktopIp'] = request.desktopIp;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.eventTypes)) {
    query['EventTypes'] = request.eventTypes;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
  *
  * @param request DescribeClientEventsRequest
  * @return DescribeClientEventsResponse
 */
async function describeClientEvents(request: DescribeClientEventsRequest): DescribeClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientEventsWithOptions(request, runtime);
}

model DescribeCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-shanghai+cds-135515****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  directoryName?: string(name='DirectoryName', description='The name of the workspace.', example='testDirectoryName'),
  driveStatus?: string(name='DriveStatus', description='The status of the team space. Default value: enabled. Valid values:

*   Enabled: available
*   disabled: unavailable', example='enabled'),
  driveType?: string(name='DriveType', description='Specifies whether one or more spaces are added.

*   binding: One or more spaces are added.
*   unbound: One or more spaces are not added.

Default value: null. This value indicates that all results are queried.', example='binding'),
  groupId?: [ string ](name='GroupId', description='The ID of the team.'),
  groupName?: string(name='GroupName', description='The name of a team for fuzzy search.', example='Test Team 1'),
  groupType?: string(name='GroupType', description='The type of the team.

*   org: organizational structure
*   directory: workspace

Default value: null. This value indicates that all results are queried.', example='org'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6lY3I2VNHLwy+nIoSXh****'),
  parentGroupId?: string(name='ParentGroupId', description='The ID of the parent ID. If a parent node ID is specified, the subnode list is queried. If you set the value of this parameter to root, the root nodes are queried. Default value: null. This value indicates that all results are queried.', example='cg-e70ga4ixp30ur****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeCloudDriveGroupsResponseBody = {
  cloudDriveGroups?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the team space was created.', example='2022-04-11T07:44:21Z'),
      directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-959593****'),
      driveId?: string(name='DriveId', description='The ID of the team space.', example='sh1234'),
      groupId?: string(name='GroupId', description='The ID of the team.', example='cg-e70ga4ixp30ur****'),
      groupName?: string(name='GroupName', description='The name of the team space.', example='Test Team 1'),
      status?: string(name='Status', description='The status of the team space. Default value: enabled. Valid values:

*   Enabled: available
*   disabled: unavailable', example='enabled'),
      totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='5368709120'),
      usedSize?: string(name='UsedSize', description='The space that is used. Unit: bytes.', example='1024000000'),
    }
  ](name='CloudDriveGroups', description='The list of team spaces.'),
  count?: long(name='Count', description='The total number of entries that is returned.', example='0'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF015AE5-B30A-5189-B519-735CEE40****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudDriveGroupsResponseBody(name='body'),
}

async function describeCloudDriveGroupsWithOptions(request: DescribeCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): DescribeCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.driveStatus)) {
    query['DriveStatus'] = request.driveStatus;
  }
  if (!Util.isUnset(request.driveType)) {
    query['DriveType'] = request.driveType;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    query['ParentGroupId'] = request.parentGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudDriveGroups(request: DescribeCloudDriveGroupsRequest): DescribeCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDriveGroupsWithOptions(request, runtime);
}

model DescribeCloudDrivePermissionsRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-82414*****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudDrivePermissionsResponseBody = {
  cloudDrivePermissionModels?: [ 
    {
      endUsers?: [ string ](name='EndUsers'),
      permission?: string(name='Permission', example='CDS_DOWNLOAD'),
    }
  ](name='CloudDrivePermissionModels'),
  requestId?: string(name='RequestId', example='A87DBB05-653A-5E4B-B72B-5F4A1E07E5B3'),
}

model DescribeCloudDrivePermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudDrivePermissionsResponseBody(name='body'),
}

async function describeCloudDrivePermissionsWithOptions(request: DescribeCloudDrivePermissionsRequest, runtime: Util.RuntimeOptions): DescribeCloudDrivePermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDrivePermissions',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudDrivePermissions(request: DescribeCloudDrivePermissionsRequest): DescribeCloudDrivePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDrivePermissionsWithOptions(request, runtime);
}

model DescribeCustomizedListHeadersRequest {
  langType?: string(name='LangType', description='The language in which the exported cloud desktop list is displayed.', example='zh-CN'),
  listType?: string(name='ListType', description='The type of the list.', example='desktop'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeCustomizedListHeadersResponseBody = {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', description='The display type of the header. You can call the `ModifyCustomizedListHeaders` operation to modify the display type of the header.', example='display'),
      headerKey?: string(name='HeaderKey', description='The key of the header.', example='pay_type'),
      headerName?: string(name='HeaderName', description='The name of the header.', example='Cloud Desktop ID/Name'),
    }
  ](name='Headers', description='The headers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeCustomizedListHeadersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizedListHeadersResponseBody(name='body'),
}

async function describeCustomizedListHeadersWithOptions(request: DescribeCustomizedListHeadersRequest, runtime: Util.RuntimeOptions): DescribeCustomizedListHeadersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizedListHeaders',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizedListHeaders(request: DescribeCustomizedListHeadersRequest): DescribeCustomizedListHeadersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizedListHeadersWithOptions(request, runtime);
}

model DescribeDesktopGroupsRequest {
  bundleId?: [ string ](name='BundleId'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group that you want to query. Fuzzy search is supported.', example='testName'),
  endUserIds?: [ string ](name='EndUserIds', description='The authorized users.'),
  excludedEndUserIds?: [ string ](name='ExcludedEndUserIds', description='The authorized users that you want to exclude.'),
  imageId?: [ string ](name='ImageId'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the desktop group belongs.', example='cn-hangzhou+dir-467671****'),
  ownType?: long(name='OwnType', description='The type of the desktop group.', example='0'),
  period?: int32(name='Period', description='The duration during which the desktop group is valid. The unit is specified by the PeriodUnit parameter.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the duration.', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy with which you want to associate the desktop group.', example='pg-53iyi2aar0nd6****'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol. Valid values:

*   Adaptive Streaming Protocol (ASP)
*   High-definition Experience (HDX)', example='ASP'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: int32(name='Status', description='The status of the desktop group.', example='1'),
}

model DescribeDesktopGroupsResponseBody = {
  desktopGroups?: [ 
    {
      bindAmount?: long(name='BindAmount', description='The number of sessions that are allowed for each cloud desktop in the multi-session desktop group.', example='1'),
      buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of purchased cloud desktops. Valid values: 0 to 200.', example='5'),
      comments?: string(name='Comments', description='The remarks on the desktop group.', example='test'),
      connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops of the same desktop group.', example='90000'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
      createTime?: string(name='CreateTime', description='The time when the desktop group was created.', example='2022-02-17T14:51:07Z'),
      creator?: string(name='Creator', description='The ID of the Alibaba Cloud account that is used to create the desktop group.', example='1007214305******'),
      dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk.', example='cloud_ssd'),
      dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='50'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='test1'),
      endUserCount?: int32(name='EndUserCount', description='The number of users that are authorized to use the desktop group.', example='1'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-03-17T16:00:00Z'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuSpec?: string(name='GpuSpec', description='The GPU memory.', example='16 GiB'),
      idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum period of time during which the session is idle. When a session is idle, no operations performed by using keyboards or mouses are detected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops of the same desktop group.', example='90000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-gq15cq5ydlvwn****'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration of the cloud desktop after the end user disconnects from the cloud desktop. Unit: ms.', example='1000'),
      loadPolicy?: long(name='LoadPolicy', description='The load balancing policy for the multi-session desktop group.', example='1'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain.', example='10'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='16384'),
      minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of desktops that the desktop group must contain.', example='1'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-467671****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='testName'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace. Valid values: -simple: convenience account type. -ad_connector: enterprise Active Directory (AD) account.', example='SIMPLE'),
      osType?: string(name='OsType', description='The OS. Valid values:

*   Windows
*   Linux', example='Windows'),
      ownBundleId?: string(name='OwnBundleId', description='The ID of the desktop template.', example='bundle_eds_general_4c8g_s8d5_win2019'),
      ownBundleName?: string(name='OwnBundleName', description='The name of the desktop template.', example='test'),
      ownType?: long(name='OwnType', description='The type of the desktop group.', example='0'),
      payType?: string(name='PayType', description='The billing method of the desktop group.', example='PrePaid'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-53iyi2aar0nd6c8qj'),
      policyGroupName?: string(name='PolicyGroupName', description='The name of the policy.', example='test-policy'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol. Valid values:

*   Adaptive Streaming Protocol (ASP)
*   High-definition Experience (HDX)', example='ASP'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.', example='0.85'),
      resetType?: long(name='ResetType', description='Indicates which type of disk that is used by cloud desktops in the desktop group is reset.', example='0'),
      status?: int32(name='Status', description='The status of the desktop group.', example='1'),
      stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud desktop stops. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a cloud desktop that is in the Stopped state, the cloud desktop automatically restarts. Unit: milliseconds.', example='900000'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.', example='cloud_ssd'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='80'),
      version?: int32(name='Version', description='The version number of the desktop group.', example='2'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key for the disk.', example='e5409ada-xxxx-xxxx-xxxx-89e31e23e993'),
    }
  ](name='DesktopGroups', description='Details about desktop groups.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopGroupsResponseBody(name='body'),
}

async function describeDesktopGroupsWithOptions(request: DescribeDesktopGroupsRequest, runtime: Util.RuntimeOptions): DescribeDesktopGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.excludedEndUserIds)) {
    query['ExcludedEndUserIds'] = request.excludedEndUserIds;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.ownType)) {
    query['OwnType'] = request.ownType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopGroups(request: DescribeDesktopGroupsRequest): DescribeDesktopGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopGroupsWithOptions(request, runtime);
}

model DescribeDesktopIdsByVulNamesRequest {
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability or the risk level of the vulnerability. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='cve'),
  vulName?: [ string ](name='VulName'),
}

model DescribeDesktopIdsByVulNamesResponseBody = {
  desktopItems?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.'),
    }
  ](name='DesktopItems', description='Details about cloud desktops.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopIdsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopIdsByVulNamesResponseBody(name='body'),
}

async function describeDesktopIdsByVulNamesWithOptions(request: DescribeDesktopIdsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeDesktopIdsByVulNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopIdsByVulNames',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopIdsByVulNames(request: DescribeDesktopIdsByVulNamesRequest): DescribeDesktopIdsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopIdsByVulNamesWithOptions(request, runtime);
}

model DescribeDesktopTypesRequest {
  appliedScope?: string(name='AppliedScope', description='The applicable scope of the desktop type. Default value: `Public`.', example='Public'),
  cpuCount?: int32(name='CpuCount', description='The number of vCPUs.', example='2'),
  desktopIdForModify?: string(name='DesktopIdForModify', description='The ID of the cloud desktop whose desktop type that you want to modify. If you specify this parameter, the information that is returned includes whether the desktop type is compatible with the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  desktopTypeId?: string(name='DesktopTypeId', description='The ID of the desktop type. Valid values:

*   eds.graphics.16c1t4
*   eds.graphics.24c1t4
*   eds.hf.12c24g
*   eds.hf.8c16g
*   eds.hf.4c8g
*   eds.general.8c32g
*   eds.general.16c32g
*   eds.general.8c16g
*   eds.general.4c16g
*   eds.general.4c8g
*   eds.general.2c8g
*   eds.general.2c4g
*   eds.general.2c2g
*   ecd.graphics.xlarge
*   ecd.graphics.2xlarge
*   ecd.performance.2xlarge
*   ecd.advanced.xlarge
*   ecd.advanced.large
*   ecd.basic.large
*   ecd.basic.small

> When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all desktop types are queried.', example='ecd.graphics.xlarge'),
  gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The family of the cloud desktop type. Valid values:

*   eds.graphics
*   eds.hf
*   eds.general
*   ecd.graphics
*   ecd.performance
*   ecd.advanced
*   ecd.basic

> When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all desktop types are queried.', example='ecd.graphics'),
  memorySize?: int32(name='MemorySize', description='The size of the memory. Unit: GiB.', example='4'),
  orderType?: string(name='OrderType', description='The type of the order that you want to place.', example='DOWNGRADE'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeDesktopTypesResponseBody = {
  desktopTypes?: [ 
    {
      cpuCount?: string(name='CpuCount', description='The number of vCPUs.', example='2'),
      dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='150'),
      desktopTypeId?: string(name='DesktopTypeId', description='The ID of the desktop type.', example='ecd.graphics.xlarge'),
      desktopTypeStatus?: string(name='DesktopTypeStatus', description='The status of the desktop type. If `SUFFICIENT` is returned, the number of cloud desktops of the specified desktop type is sufficient.', example='SUFFICIENT'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuSpec?: string(name='GpuSpec', description='The GPU memory.', example='16 GiB'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The family of the desktop type.', example='ecd.graphics'),
      memorySize?: string(name='MemorySize', description='The size of the memory. Unit: MiB.', example='23552'),
      systemDiskSize?: string(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='150'),
    }
  ](name='DesktopTypes', description='Details of the desktop types.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopTypesResponseBody(name='body'),
}

async function describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: Util.RuntimeOptions): DescribeDesktopTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appliedScope)) {
    query['AppliedScope'] = request.appliedScope;
  }
  if (!Util.isUnset(request.cpuCount)) {
    query['CpuCount'] = request.cpuCount;
  }
  if (!Util.isUnset(request.desktopIdForModify)) {
    query['DesktopIdForModify'] = request.desktopIdForModify;
  }
  if (!Util.isUnset(request.desktopTypeId)) {
    query['DesktopTypeId'] = request.desktopTypeId;
  }
  if (!Util.isUnset(request.gpuCount)) {
    query['GpuCount'] = request.gpuCount;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.memorySize)) {
    query['MemorySize'] = request.memorySize;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopTypes',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopTypesWithOptions(request, runtime);
}

model DescribeDesktopsRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PostPaid'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.``', example='dg-2i8qxpv6t1a03****'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 100 IDs of cloud desktops.', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
  desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
  desktopType?: string(name='DesktopType', description='The new desktop type. You can call the [DescribeDesktopTypes](~~188882~~) operation to query the IDs of supported desktop types.', example='eds.general.2c8g'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory. The ID is the same as the workspace ID.', example='cn-hangzhou+dir-363353****'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users that are assigned the cloud desktop. You can specify IDs of 1 to 100 users.

> Only one user can use the cloud desktop at a time.', example='alice'),
  excludedEndUserId?: [ string ](name='ExcludedEndUserId', description='The IDs of the users that are excluded from the users that are assigned the cloud desktop. You can specify IDs of 1 to 100 users.', example='andy'),
  expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-12-31T15:59:59Z'),
  filterDesktopGroup?: boolean(name='FilterDesktopGroup', description='Specifies whether to filter cloud desktops in the desktop group.', example='false'),
  groupId?: string(name='GroupId', description='The ID of the desktop group.', example='dg-boyczi8enfyc5****'),
  imageId?: [ string ](name='ImageId', description='镜像ID列表。'),
  managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='testName'),
  onlyDesktopGroup?: boolean(name='OnlyDesktopGroup', description='Specifies whether to query cloud desktops in the desktop group.', example='true'),
  osTypes?: [ string ](name='OsTypes', description='The types of the OSs.'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
  queryFotaUpdate?: boolean(name='QueryFotaUpdate', description='Specifies whether to query the information about image version of the cloud desktop.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-hb12mclyne09xw***'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud desktops by group for easy searching and batch operations. For more information, see [Use tags to manage cloud desktops](~~203781~~).'),
  userName?: string(name='UserName', description='The name of the user.', example='Alice'),
}

model DescribeDesktopsResponseBody = {
  desktops?: [ 
    {
      bindAmount?: int32(name='BindAmount', description='The number of sessions allowed for each cloud desktop in the multi-session desktop group.', example='10'),
      bundleId?: string(name='BundleId', description='The ID of the desktop template that is used to create the cloud desktop.', example='b-2g65ljy4291vl****'),
      bundleName?: string(name='BundleName', description='The name of the desktop template that is used to create the cloud desktop.', example='Name'),
      chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PostPaid'),
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the user.', example='Disconnected'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the cloud desktop was created.', example='2020-11-06T08:28Z'),
      dataDiskCategory?: string(name='DataDiskCategory', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      dataDiskSize?: string(name='DataDiskSize', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the group to which the cloud desktop belongs. Default value: null.', example='null'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
      desktopType?: string(name='DesktopType', description='The desktop type.', example='ecd.basic.large'),
      directoryId?: string(name='DirectoryId', description='The ID is the same as the workspace ID that is indicated by the value of the OfficeSiteId parameter.', example='cn-hangzhou+dir-363353****'),
      directoryType?: string(name='DirectoryType', description='This parameter is in invitational preview and unavailable for general users.', example='SIMPLE'),
      disks?: [ 
        {
          diskId?: string(name='DiskId', description='The ID of the disk.', example='d-jedbpr4sl9l37****'),
          diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GiB.', example='80'),
          diskType?: string(name='DiskType', description='The type of the disk.', example='SYSTEM'),
          performanceLevel?: string(name='PerformanceLevel', description='The performance level (PL) of the disk that is an enhanced SSD (ESSD). Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

For more information about the differences between disks of different PLs, see [Enhanced SSDs](~~122389~~).', example='PL0'),
        }
      ](name='Disks', description='Details of the disks.'),
      downgradeQuota?: long(name='DowngradeQuota', description='The number of times for which the cloud desktop can be downgraded.', example='3'),
      downgradedTimes?: long(name='DowngradedTimes', description='The number of times for which the cloud desktop is downgraded.', example='0'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of the users that have the permissions to connect to the cloud desktops.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2021-12-31T15:59Z'),
      fotaUpdate?: {
        currentAppVersion?: string(name='CurrentAppVersion', description='The current version of the cloud desktop.', example='0.0.0-D-20220102.000000'),
        newAppVersion?: string(name='NewAppVersion', description='The version to which the cloud desktop can be updated.', example='0.0.0-R-20220307.190736'),
        releaseNote?: string(name='ReleaseNote', description='The description of the version to which the cloud desktop can be updated.', example='Upgrade package for testing 03-07'),
        size?: long(name='Size', description='The size of the installation package for the version to which the cloud desktop can be updated. Unit: KB.', example='108815097'),
      }(name='FotaUpdate', description='The information about the image version that the cloud desktop uses.'),
      gpuCategory?: long(name='GpuCategory', description='Indicates whether the cloud desktop is of the GPU-accelerated type.', example='0'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver with which the cloud desktop is equipped.', example='null'),
      gpuSpec?: string(name='GpuSpec', description='The GPU model.', example='NVIDIA T4'),
      hibernationOptionsConfigured?: boolean(name='HibernationOptionsConfigured', description='> This parameter is in invitational preview and is unavailable to the public.', example='true'),
      hostName?: string(name='HostName', description='The hostname of the cloud desktop.', example='testName'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='4096'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the secondary network interface controller (NIC) created by the RAM user or Active Directory (AD) user in EDS. You do not have the permissions to modify this ID.', example='123456'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', description='The IP address of the secondary NIC that is created by the RAM user or AD user in EDS.', example='192.168.74.165'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.', example='SIMPLE'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The virtual private cloud (VPC) type of the workspace.', example='basic'),
      osType?: string(name='OsType', description='The type of the OS.', example='Windows'),
      platform?: string(name='Platform', description='The information about the OS platform. Valid values:

*   CentOS
*   Ubuntu
*   Windows Server 2016
*   Windows Server 2019
*   UOS', example='Ubuntu'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
      policyGroupIdList?: [ string ](name='PolicyGroupIdList', description='The IDs of the policies.'),
      policyGroupName?: string(name='PolicyGroupName', description='The name of the policy.', example='test'),
      policyGroupNameList?: [ string ](name='PolicyGroupNameList', description='The names of the policies.'),
      progress?: string(name='Progress', description='The progress when the cloud desktop was created.', example='100%'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      sessionType?: string(name='SessionType', description='The type of the session.', example='SINGLE_SESSION'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', description='The ID of the user that logged on to the cloud desktop.', example='29615820929547****'),
          establishmentTime?: string(name='EstablishmentTime', description='The time when the desktop session was established.', example='2021-03-07T08:23Z'),
          externalUserName?: string(name='ExternalUserName', description='The name of the external user.', example='Testname'),
        }
      ](name='Sessions', description='Details of the desktop sessions that users hold.'),
      snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the snapshot policy.', example='sp-gi007jgyc3kcey2bb'),
      snapshotPolicyName?: string(name='SnapshotPolicyName', description='The name of the snapshot policy.', example='testSnapshotName'),
      startTime?: string(name='StartTime', description='The first time when the cloud desktop was started.', example='2020-11-06T08:31Z'),
      supportHibernation?: boolean(name='SupportHibernation', description='Indicates whether hibernation is supported for the cloud desktop.', example='true'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      systemDiskSize?: int32(name='SystemDiskSize', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='TestKey'),
          value?: string(name='Value', description='The value of the tag.', example='TestValue'),
        }
      ](name='Tags', description='Details of the tags.'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
      zoneType?: string(name='ZoneType', description='The type of the zone. Default value: **AvailabilityZone**. This value indicates Alibaba Cloud zones.', example='AvailabilityZone'),
    }
  ](name='Desktops', description='Details of the cloud desktops.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  totalCount?: int32(name='TotalCount', description='The total number of cloud desktops.', example='1'),
}

model DescribeDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopsResponseBody(name='body'),
}

async function describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: Util.RuntimeOptions): DescribeDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopStatus)) {
    query['DesktopStatus'] = request.desktopStatus;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.excludedEndUserId)) {
    query['ExcludedEndUserId'] = request.excludedEndUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.filterDesktopGroup)) {
    query['FilterDesktopGroup'] = request.filterDesktopGroup;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.managementFlag)) {
    query['ManagementFlag'] = request.managementFlag;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.onlyDesktopGroup)) {
    query['OnlyDesktopGroup'] = request.onlyDesktopGroup;
  }
  if (!Util.isUnset(request.osTypes)) {
    query['OsTypes'] = request.osTypes;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.queryFotaUpdate)) {
    query['QueryFotaUpdate'] = request.queryFotaUpdate;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotPolicyId)) {
    query['SnapshotPolicyId'] = request.snapshotPolicyId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsWithOptions(request, runtime);
}

model DescribeDesktopsInGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  ignoreDeleted?: boolean(name='IgnoreDeleted', description='Specifies whether to ignore the deleted cloud desktops.', example='true'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If you do not specify this parameter, null is returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  payType?: string(name='PayType', description='The billing method of the desktop group.', example='PrePaid'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeDesktopsInGroupResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlinePrePaidDesktopsCount?: int32(name='OnlinePrePaidDesktopsCount', description='The number of subscription cloud desktops that are connected.', example='100'),
  paidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud desktop.', example='Connected'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ud-7ftf5b6yu77b0****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
      diskType?: string(name='DiskType', description='The type of the disk.', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='Details of the IDs of users that are connected to cloud desktops. If no users are connected, no values are returned.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='Details of the names of users that are connected to cloud desktops. If no users are connected, no values are returned.'),
      fotaVersion?: string(name='FotaVersion', description='The version of the image.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='1.0'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used for management.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member Elastic Network Interface (ENI).', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS.', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary ENI.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
      resetTime?: string(name='ResetTime', description='The point in time when the cloud desktop was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='80'),
    }
  ](name='PaidDesktops', description='Details of the subscription cloud desktops.'),
  paidDesktopsCount?: int32(name='PaidDesktopsCount', description='The total number of subscription cloud desktops.', example='10'),
  postPaidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud desktop.', example='Connected'),
      createDuration?: string(name='CreateDuration', description='The retention period.', example='4153958447'),
      createTime?: string(name='CreateTime', description='The time when the cloud desktop was created.', example='2022-01-21T06:34:57Z'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ud-2i8qxpv6t1a07****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Stopped'),
      diskType?: string(name='DiskType', description='The type of the disk.', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='Details of the IDs of users that are connected to cloud desktops. If no users are connected, no values are returned.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='Details of the names of users that are connected to cloud desktops. If no users are connected, no values are returned.'),
      fotaVersion?: string(name='FotaVersion', description='The version of the image.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='1.0'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used for management.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member ENI.', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS.', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary ENI.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol. Valid values:

*   ASP
*   HDX', example='HDX'),
      releaseTime?: string(name='ReleaseTime', description='The time when the cloud desktop was released.', example='2022-01-21T16:34:57Z'),
      resetTime?: string(name='ResetTime', description='The point in time when the cloud desktop was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='80'),
    }
  ](name='PostPaidDesktops', description='Details of the pay-as-you-go cloud desktops.'),
  postPaidDesktopsCount?: int32(name='PostPaidDesktopsCount', description='The total number of pay-as-you-go cloud desktops.', example='10'),
  postPaidDesktopsTotalAmount?: int32(name='PostPaidDesktopsTotalAmount', description='The total bill amount for the pay-as-you-go cloud desktops.', example='10000'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  runningPrePaidDesktopsCount?: int32(name='RunningPrePaidDesktopsCount', description='The number of subscription cloud desktops that are running.', example='100'),
  stopedPrePaidDesktopsCount?: int32(name='StopedPrePaidDesktopsCount', description='The number of subscription cloud desktops that are stopped.', example='100'),
}

model DescribeDesktopsInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopsInGroupResponseBody(name='body'),
}

async function describeDesktopsInGroupWithOptions(request: DescribeDesktopsInGroupRequest, runtime: Util.RuntimeOptions): DescribeDesktopsInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.ignoreDeleted)) {
    query['IgnoreDeleted'] = request.ignoreDeleted;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopsInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopsInGroup(request: DescribeDesktopsInGroupRequest): DescribeDesktopsInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsInGroupWithOptions(request, runtime);
}

model DescribeDevicesRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: string(name='ClientType', description='The type of client.

*   1: the hardware client
*   2: the software client', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='5F52817BE267A43C608D245070D2****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the convenience user to which you want to bind the device.', example='moli'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return per page.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of pages to return.', example='1'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The type of the user account.

*   SIMPLE: the convenience account
*   AD: the AD account', example='SIMPLE'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the device.', example='5F52817BE267A43C608D245070D2****'),
      endUserList?: [ 
        {
          adDomain?: string(name='AdDomain', description='The address of the AD workspace.', example='xn--0zw****'),
          directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
          endUserId?: string(name='EndUserId', description='The ID of the user.', example='moli'),
          userType?: string(name='UserType', description='The type of the account.', example='SIMPLE'),
        }
      ](name='EndUserList', description='The users that are bound.'),
    }
  ](name='Devices', description='The devices that are returned.'),
  requestId?: string(name='RequestId', description='The ID that is returned.', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: Util.RuntimeOptions): DescribeDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDevicesWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', description='Details of directory IDs. You can specify one or more directory IDs.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  directoryStatus?: string(name='DirectoryStatus', description='The status of the directory. The value of this parameter is the same as the value of the `Status` parameter.', example='REGISTERED'),
  directoryType?: string(name='DirectoryType', description='The type of the directory.', example='RAM'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the workspace.', example='REGISTERED'),
}

model DescribeDirectoriesResponseBody = {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows.', example='cnshsv21hmc****'),
  directories?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', description='The address of the AD connector.', example='172.17.**.**'),
          connectorStatus?: string(name='ConnectorStatus', description='The status of the AD connector.', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the network interface controller (NIC) with which the AD connector is associated.', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', description='The type of the AD connector.', example='1'),
          trustKey?: string(name='TrustKey', description='The trust password of the AD domain controller.', example='yfpoAD****'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the AD connector is associated.', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors', description='Details of the AD connectors.'),
      creationTime?: string(name='CreationTime', description='The time when the directory was created.', example='2020-11-02T01:44Z'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', description='The ID of the security group.', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', description='The method that is used to connect the client to cloud desktops.', example='Internet'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', description='The endpoint that is used to connect to cloud desktops over a VPC.', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      directoryType?: string(name='DirectoryType', description='The type of the directory.', example='RAM'),
      dnsAddress?: [ string ](name='DnsAddress', description='Details of the DNS addresses of the directory.'),
      dnsUserName?: string(name='DnsUserName', description='The username of the Domain Name System (DNS) user.', example='testDnsUserName'),
      domainName?: string(name='DomainName', description='The name of the domain.', example='example.com'),
      domainPassword?: string(name='DomainPassword', description='The password of the domain administrator.', example='testPassword'),
      domainUserName?: string(name='DomainUserName', description='The username of the domain administrator.', example='sAMAccountName'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the permissions of the local administrator are granted to the regular user of the cloud desktop.', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Indicates whether the desktop communication feature is enabled for cloud desktops in the same workspace.

If the feature is enabled, the cloud desktops in the same workspace can access each other.', example='true'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', description='Indicates whether access over the Internet is allowed.

>  This parameter is unavailable.', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds', description='Details of the IDs of the Apsara File Storage NAS (NAS) file systems.'),
      logs?: [ 
        {
          level?: string(name='Level', description='The level of the log entry.', example='INFO'),
          message?: string(name='Message', description='Details of the log entry.', example='code:success | message:Create Connector complete.'),
          step?: string(name='Step', description='The step that corresponds to the log entry.', example='DescribeDirectories'),
          timeStamp?: string(name='TimeStamp', description='The time when the log entry was printed.', example='2021-01-22T06:45Z'),
        }
      ](name='Logs', description='Details of the registration logs.'),
      mfaEnabled?: boolean(name='MfaEnabled', description='Indicates whether multi-factor authentication (MFA) is enabled.', example='false'),
      name?: string(name='Name', description='The name of the directory.', example='testDirectoryName'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Indicates whether two-factor verification for logons is enabled. This parameter is returned only for workspaces of the convenience account type.\\
If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the Elastic Desktop Service (EDS) client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.', example='false'),
      ouName?: string(name='OuName', description='The name of the organizational unit (OU) that you specified when you add cloud desktops to domains.', example='example.com/Domain Controllers'),
      ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether single sign-on (SSO) is enabled.', example='false'),
      status?: string(name='Status', description='The status of the AD directory. Valid values:

*   REGISTERING
*   REGISTERED', example='REGISTERING'),
      subDnsAddress?: [ string ](name='SubDnsAddress', description='Details of the DNS addresses of the AD subdomain.'),
      subDomainName?: string(name='SubDomainName', description='The fully qualified domain name (FQDN) of the enterprise AD subdomain. The value must contain the hostname and the subdomain name. Example: child.example.com.', example='child.example.com'),
      trustPassword?: string(name='TrustPassword', description='The AD trust password.', example='82Tg****'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='Details of vSwitch IDs that are specified when the directory is being created.'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the vSwitch belongs.', example='vpc-uf6tz5k67puge5jn8****'),
    }
  ](name='Directories', description='Details of the directories.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F369A091-002F-49C8-AD55-02A776297C7B'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryStatus)) {
    query['DirectoryStatus'] = request.directoryStatus;
  }
  if (!Util.isUnset(request.directoryType)) {
    query['DirectoryType'] = request.directoryType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectories',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeFlowMetricRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query data. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.', example='1664714703743'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. The value can be the ID of the cloud desktop or the ID of the Internet access package.', example='ecd-fwq23f13\\*\\*\\*\\* or np-6inxqsvcyv6z8\\*\\*\\*\\*'),
  instanceType?: string(name='InstanceType', description='The type of the instance. You can select a cloud desktop or a network package as an instance. If you select a cloud desktop as an instance, you need to configure the `InstanceId` and `MetricType` parameters. If you select a network package as an instance, you also need to must configure the parameters.', example='desktop'),
  metricType?: string(name='MetricType', description='The type of the monitoring data. The monitoring data includes the inbound bandwidth and the outbound bandwidth of the cloud desktop, or the workspace bandwidth that is originated from or destined for the Internet.', example='intranetOutRate'),
  period?: int32(name='Period', description='The interval at which monitoring data is collected. Unit: seconds.', example='60'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.', example='1651817220643'),
}

model DescribeFlowMetricResponseBody = {
  data?: string(name='Data', description='The monitoring data.', example='{\\"instanceId\\": \\"np-4wrye3ishxi47****\\", \\"requestId\\": \\"4F0CD5B6-70D6-5115-A2F7-7EAC3981****\\", \\"dataPoints\\": [{\\"timeStamp\\": 1636510320000, \\"Average\\": 293752.0}]}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6857EDCB-631F-5405-BE95-45CBB4C3****'),
}

model DescribeFlowMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowMetricResponseBody(name='body'),
}

async function describeFlowMetricWithOptions(request: DescribeFlowMetricRequest, runtime: Util.RuntimeOptions): DescribeFlowMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowMetric',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowMetric(request: DescribeFlowMetricRequest): DescribeFlowMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowMetricWithOptions(request, runtime);
}

model DescribeFlowStatisticRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.\\
Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  period?: int32(name='Period', description='The interval to query the traffic data. Unit: seconds. Valid values:

*   3600
*   10800
*   86400', example='3600'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeFlowStatisticResponseBody = {
  desktopCount?: int32(name='DesktopCount', description='The number of available cloud desktops in the workspace.', example='10'),
  desktopFlowStatistic?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-8bslxqq0csytn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='desktop-1'),
      flowIn?: string(name='FlowIn', description='The amount of the traffic. Unit: KB.', example='1000'),
      flowRank?: int32(name='FlowRank', description='The traffic ranking.', example='1'),
    }
  ](name='DesktopFlowStatistic', description='Details of the traffic that is consumed by cloud desktops.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC2****'),
}

model DescribeFlowStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowStatisticResponseBody(name='body'),
}

/**
  * > You can query only the traffic data in the last 90 days.
  *
  * @param request DescribeFlowStatisticRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeFlowStatisticResponse
 */
async function describeFlowStatisticWithOptions(request: DescribeFlowStatisticRequest, runtime: Util.RuntimeOptions): DescribeFlowStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowStatistic',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can query only the traffic data in the last 90 days.
  *
  * @param request DescribeFlowStatisticRequest
  * @return DescribeFlowStatisticResponse
 */
async function describeFlowStatistic(request: DescribeFlowStatisticRequest): DescribeFlowStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowStatisticWithOptions(request, runtime);
}

model DescribeFotaPendingDesktopsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  taskUid?: string(name='TaskUid', description='The ID of the image update task. You can call the DescribeFotaTasks operation to obtain the value of this parameter.', example='aot-c4khwrp9ocml4****'),
}

model DescribeFotaPendingDesktopsResponseBody = {
  fotaPendingDesktops?: [ 
    {
      currentAppVersion?: string(name='CurrentAppVersion', description='The image version of the cloud desktop.', example='0.0.1-D-20220513.143129'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-bvdtu3jn97o1r****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='TestDesktop'),
      fotaProject?: string(name='FotaProject', example='To be hidden.'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-815419****'),
    }
  ](name='FotaPendingDesktops', description='Details about the cloud desktops whose images have not been updated. The cloud desktops can be updated to the image of a specific version that is described in an image update task (TaskUid).'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaPendingDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFotaPendingDesktopsResponseBody(name='body'),
}

async function describeFotaPendingDesktopsWithOptions(request: DescribeFotaPendingDesktopsRequest, runtime: Util.RuntimeOptions): DescribeFotaPendingDesktopsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFotaPendingDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFotaPendingDesktops(request: DescribeFotaPendingDesktopsRequest): DescribeFotaPendingDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFotaPendingDesktopsWithOptions(request, runtime);
}

model DescribeFotaTasksRequest {
  fotaStatus?: string(name='FotaStatus', description='This parameter is not available to the public.', example='To be hidden.'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  taskUid?: [ string ](name='TaskUid', description='The ID of the image update task. You can call the DescribeFotaTasks operation to obtain the value of this parameter.'),
  userStatus?: string(name='UserStatus', description='Specifies whether to automatically push the image update task.', example='Pending'),
}

model DescribeFotaTasksResponseBody = {
  fotaTasks?: [ 
    {
      appVersion?: string(name='AppVersion', description='The version of the custom image. You can call the [DescribeImages](~~188895~~) operation to obtain the value of this parameter.', example='0.0.1-D-20220513.143129'),
      fotaProject?: string(name='FotaProject', description='This parameter is not available to the public.', example='To be hidden.'),
      pendingCustomImageCount?: int32(name='PendingCustomImageCount'),
      pendingDesktopCount?: int32(name='PendingDesktopCount', description='The number of cloud desktops for which the images can be updated to this version.', example='1'),
      publishTime?: string(name='PublishTime', description='The time when the updated image was published.', example='2022-05-31T04:28:48Z'),
      releaseNote?: string(name='ReleaseNote', description='The description of the image version to which the original image is updated.', example='test'),
      size?: int32(name='Size', description='The size of the image update package. Unit: KB.', example='568533470'),
      status?: string(name='Status', description='Indicates whether the user can update the image of the cloud desktop.', example='valid'),
      taskUid?: string(name='TaskUid', description='The ID of the image update task.', example='aot-c4khwrp9ocml4****'),
    }
  ](name='FotaTasks', description='Details about the image update tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFotaTasksResponseBody(name='body'),
}

async function describeFotaTasksWithOptions(request: DescribeFotaTasksRequest, runtime: Util.RuntimeOptions): DescribeFotaTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fotaStatus)) {
    query['FotaStatus'] = request.fotaStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskUid)) {
    query['TaskUid'] = request.taskUid;
  }
  if (!Util.isUnset(request.userStatus)) {
    query['UserStatus'] = request.userStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFotaTasks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFotaTasks(request: DescribeFotaTasksRequest): DescribeFotaTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFotaTasksWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  operateType?: string(name='OperateType', description='The type of the action that you want to perform on the vulnerability. Valid value: vul_fix.', example='vul_fix'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: the Linux software vulnerability
*   sys: the Windows system vulnerability', example='sys'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop that is affected by the vulnerability.', example='ecd-bvolet79zmpkq****'),
      name?: string(name='Name', description='The name of the vulnerability.', example='5000803'),
      tag?: string(name='Tag', description='The tag that you want to add to the vulnerability.', example='system'),
    }
  ](name='VulInfo', description='Details of the vulnerabilities. You can enter a maximum of 50 vulnerabilities.'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-bvolet79zmpkq****'),
      patchList?: [ 
        {
          aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='2021-02 servicing stack update for Windows Server 2016 (x64) systems (KB5001078)'),
          name?: string(name='Name', description='The name of the vulnerability.', example='5001078'),
        }
      ](name='PatchList', description='Details about patches.'),
    }
  ](name='FrontPatchList', description='Details about patches of one or more vulnerabilities before you fix the current vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

/**
  * You can query the information about patches of up to 50 vulnerabilities in each request before you fix the current vulnerability.
  *
  * @param request DescribeFrontVulPatchListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeFrontVulPatchListResponse
 */
async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulInfo)) {
    query['VulInfo'] = request.vulInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFrontVulPatchList',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query the information about patches of up to 50 vulnerabilities in each request before you fix the current vulnerability.
  *
  * @param request DescribeFrontVulPatchListRequest
  * @return DescribeFrontVulPatchListResponse
 */
async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  dealed?: string(name='Dealed', description='The processing status of the vulnerability. Valid values:

*   y: handled
*   n: unhandled', example='y'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability or the risk level of the vulnerability. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries to return on each page.

Default value: 20.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='cve'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The maximum number of entries returned per page.', example='20'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
      asapCount?: int32(name='AsapCount', description='The number of high-risk vulnerabilities.', example='1'),
      gmtLast?: string(name='GmtLast', description='The time when the vulnerability was last detected. The timestamp follows the UNIX time format. It is the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970.', example='1554185744000'),
      handledCount?: int32(name='HandledCount', description='The number of vulnerabilities processed.', example='0'),
      laterCount?: int32(name='LaterCount', description='The number of medium-risk vulnerabilities.', example='1'),
      name?: string(name='Name', description='The name of the vulnerability.'),
      nntfCount?: int32(name='NntfCount', description='The number of low-risk vulnerabilities.', example='0'),
      tags?: string(name='Tags', description='The tags of the vulnerability.'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='cve'),
    }
  ](name='GroupedVulItems', description='Details about vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

/**
  * ## Description
  * After security protection is enabled, the system scans your cloud desktops for vulnerabilities once every day.
  *
  * @param request DescribeGroupedVulRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeGroupedVulResponse
 */
async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedVul',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * After security protection is enabled, the system scans your cloud desktops for vulnerabilities once every day.
  *
  * @param request DescribeGroupedVulRequest
  * @return DescribeGroupedVulResponse
 */
async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeImageModifiedRecordsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-bd53sfmysz8ir****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the NextToken value that is returned from the last call.', example='AAAAAV3MpHK1AP0pfERHZN5pu6l3d+SWeOobbIlDLjwhjkTk'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeImageModifiedRecordsResponseBody = {
  imageModifiedRecords?: [ 
    {
      imageId?: string(name='ImageId', description='The ID of the original image.', example='m-8rnz2imrpcfuh****'),
      imageName?: string(name='ImageName', description='The name of the original image.', example='win10-0307'),
      newImageId?: string(name='NewImageId', description='The ID of the new image.', example='xxxNewImageID'),
      newImageName?: string(name='NewImageName', description='The name of the new image.', example='xxxxImageID'),
      status?: int32(name='Status', description='The status of the image.', example='1'),
      updateTime?: string(name='UpdateTime', description='The time when the image was last changed.', example='2022-03-03T02:43:44.851Z'),
    }
  ](name='ImageModifiedRecords', description='The image change records.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is left empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6koN7RqHg3d2z8LKmSoe821'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC40EE61-7E83-59ED-AEA6-7EE9C437F352'),
  totalCount?: int32(name='TotalCount', description='The total number of image change records.', example='20'),
}

model DescribeImageModifiedRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageModifiedRecordsResponseBody(name='body'),
}

/**
  * If you have changed the image for a cloud desktop, you can go to the Elastic Desktop Service (EDS) console to query the image change records. To query the image change records of a cloud desktop, find the cloud desktop that you want to manage, click **Change Image History** to the right of **Image ID/Name** on the **Basic Information** tab.
  *
  * @param request DescribeImageModifiedRecordsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageModifiedRecordsResponse
 */
async function describeImageModifiedRecordsWithOptions(request: DescribeImageModifiedRecordsRequest, runtime: Util.RuntimeOptions): DescribeImageModifiedRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageModifiedRecords',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you have changed the image for a cloud desktop, you can go to the Elastic Desktop Service (EDS) console to query the image change records. To query the image change records of a cloud desktop, find the cloud desktop that you want to manage, click **Change Image History** to the right of **Image ID/Name** on the **Basic Information** tab.
  *
  * @param request DescribeImageModifiedRecordsRequest
  * @return DescribeImageModifiedRecordsResponse
 */
async function describeImageModifiedRecords(request: DescribeImageModifiedRecordsRequest): DescribeImageModifiedRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageModifiedRecordsWithOptions(request, runtime);
}

model DescribeImagePermissionRequest {
  imageId?: string(name='ImageId', example='m-4zfb6zj728hhr****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeImagePermissionResponseBody = {
  aliUids?: [ string ](name='AliUids'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribeImagePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagePermissionResponseBody(name='body'),
}

async function describeImagePermissionWithOptions(request: DescribeImagePermissionRequest, runtime: Util.RuntimeOptions): DescribeImagePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImagePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImagePermission(request: DescribeImagePermissionRequest): DescribeImagePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePermissionWithOptions(request, runtime);
}

model DescribeImagesRequest {
  desktopInstanceType?: string(name='DesktopInstanceType', description='The type of the cloud desktop. You can call the [DescribeBundles](~~188884~~) operation to query the available types of cloud desktops.', example='ecd.graphics.xlarge'),
  gpuCategory?: boolean(name='GpuCategory', description='Specifies whether the image is a GPU-accelerated image.', example='false'),
  gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='417.22'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images. You can specify the IDs of one or more images.', example='m-gx2x1dhsmusr2****'),
  imageStatus?: string(name='ImageStatus', description='The state of the image.', example='Available'),
  imageType?: string(name='ImageType', description='The type of the image.', example='SYSTEM'),
  languageType?: string(name='LanguageType', description='The language of the OS.', example='en-US'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  osType?: string(name='OsType', description='The OS of the image. Default value: `null`.', example='Windows'),
  protocolType?: string(name='ProtocolType', description='The protocol.', example='ASP'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  sessionType?: string(name='SessionType', description='The type of the session.', example='SINGLE_SESSION'),
}

model DescribeImagesResponseBody = {
  images?: [ 
    {
      appVersion?: string(name='AppVersion', description='The version of the image.', example='1.0.0'),
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2018-01-10T01:01:10Z'),
      dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='150'),
      description?: string(name='Description', description='The description of the image.', example='This is description.'),
      gpuCategory?: boolean(name='GpuCategory', description='Indicates whether the image is a GPU-accelerated image.', example='false'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='417.22'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****'),
      imageType?: string(name='ImageType', description='The type of the image.', example='SYSTEM'),
      name?: string(name='Name', description='The name of the image.', example='testImageName'),
      osType?: string(name='OsType', description='The OS of the image.', example='WINDOWS'),
      platform?: string(name='Platform', description='The operating system type of the image.', example='Windows Server 2019'),
      progress?: string(name='Progress', description='The progress of image creation. Unit: percentage (%).', example='100%'),
      protocolType?: string(name='ProtocolType', description='The protocol.', example='ASP'),
      sessionType?: string(name='SessionType', description='The session type of the image. Valid values:

*   SINGLE_SESSION: single-session image
*   MULTIPLE_SESSION: multi-session image', example='MULTIPLE_SESSION'),
      sharedCount?: int32(name='SharedCount', description='The number of shared images.', example='1'),
      size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='40'),
      status?: string(name='Status', description='The state of the image.', example='Available'),
      supportedLanguages?: [ string ](name='SupportedLanguages', description='The language of the OS.'),
      updateTime?: string(name='UpdateTime', description='The time when the image was last modified.', example='2021-12-22T02:48:43Z'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Images', description='Details of the images.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopInstanceType)) {
    query['DesktopInstanceType'] = request.desktopInstanceType;
  }
  if (!Util.isUnset(request.gpuCategory)) {
    query['GpuCategory'] = request.gpuCategory;
  }
  if (!Util.isUnset(request.gpuDriverVersion)) {
    query['GpuDriverVersion'] = request.gpuDriverVersion;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageStatus)) {
    query['ImageStatus'] = request.imageStatus;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.languageType)) {
    query['LanguageType'] = request.languageType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  commandType?: string(name='CommandType', description='The type of the command. Valid values:

*   RunBatScript
*   RunPowerShellScript', example='RunPowerShellScript'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding method of the command content and outputs. Valid values:

*   PlainText
*   Base64

Default value: Base64.', example='PlainText'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop. If you specify a cloud desktop, all execution records of Cloud Assistant commands on the cloud desktop are queried.', example='ecd-7w78ozhjcwa3u****'),
  desktopIds?: [ string ](name='DesktopIds', description='The IDs of the cloud desktops. The DesktopId parameter will be discontinued. We recommend that you use the DesktopIds parameter to specify the IDs of cloud desktops.'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='test1'),
  includeOutput?: boolean(name='IncludeOutput', description='Specifies whether to return command outputs in the response. Valid values:

*   true
*   false

Default value: false.', example='false'),
  invokeId?: string(name='InvokeId', description='The ID of the execution.', example='t-hz0jdfwd9f****'),
  invokeStatus?: string(name='InvokeStatus', description='The overall execution status of the command. The overall execution status is determined by the execution status of the command on one or more cloud desktops. Valid values:

*   Running: The execution is in progress on one or more cloud desktops.
*   Finished: The execution is complete on all cloud desktops, or the execution is manually stopped on specific cloud desktops and the execution is complete on other cloud desktops.
*   Failed: The execution failed on all cloud desktops.
*   PartialFailed: The execution failed on specific cloud desktops.
*   Stopped: The execution is stopped.

Default value: Running.', example='Finished'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Set the value to the NextToken value that is returned from the last call.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', description='The command content that is encoded in Base64.', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
      commandType?: string(name='CommandType', description='The type of the command.', example='RunPowerShellScript'),
      creationTime?: string(name='CreationTime', description='The time when the task was created.', example='2020-12-19T09:15:46Z'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='User1'),
      invocationStatus?: string(name='InvocationStatus', description='The overall execution status of the command. The overall execution status is determined by the execution status of the command on all related cloud desktops. Valid values:

*   Pending: The system is verifying or sending the command. If the execution status on at least one cloud desktop is Pending, the overall execution status is Pending.

*   Running: The execution is in progress on cloud desktops. If the execution status on at least one cloud desktop is Running, the overall execution status is Running.

*   Success: If the execution status on at least one cloud desktop is Success, and the execution status on other cloud desktops is Success or Stopped, the overall execution status is Success.

*   Failed: If the execution status on all cloud desktops is Stopped or Failed, the overall execution status is Failed. If one or more execution status on a cloud desktop is one of the following values, Failed is returned:

    *   Invalid: The command is invalid.
    *   Aborted: The command failed to be sent.
    *   Failed: The execution is complete, but the exit code is not 0.
    *   Timeout: The execution times out.
    *   Error: An error occurs when the execution is in progress.

*   Stopping: The execution is being stopped. If the execution status on at least one cloud desktop is Stopping, the overall execution status is Stopping.

*   Stopped: The execution is stopped. If the execution status on all cloud desktops is Stopped, the overall execution status is Stopped. If the execution status on a cloud desktop is one of the following values, Stopped is returned:

    *   Cancelled: The execution is canceled.
    *   Terminated: The execution is terminated.

*   PartialFailed: The execution is successful on specific cloud desktops and failed on other cloud desktops. If the execution status on different cloud desktops includes Success, Failed, and Stopped, the overall execution status is PartialFailed.', example='Pending'),
      invokeDesktops?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the command execution was created.', example='2020-12-20T06:15:54Z'),
          desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
          dropped?: int32(name='Dropped', description='The size of the text that is truncated and discarded when the value of the Output parameter exceeds 24 KB in size.', example='0'),
          errorCode?: string(name='ErrorCode', description='The error code that is returned if the command failed to be sent or run.

*   If null is returned, the command is run normally.
*   If InstanceNotExists is returned, the specified cloud desktop does not exist or is released.
*   If InstanceReleased is returned, the specified cloud desktop is released during the command execution.
*   If InstanceNotRunning is returned, the specified cloud desktop is not in the Running state when the execution is created.
*   If CommandNotApplicable is returned, the command cannot be run on the specified cloud desktop.
*   If ClientNotRunning is returned, Cloud Assistant is not running.
*   If ClientNotResponse is returned, Cloud Assistant does not respond to your request.
*   If ClientIsUpgrading is returned, Cloud Assistant is being upgraded.
*   If ClientNeedUpgrade is returned, you must upgrade Cloud Assistant.
*   If DeliveryTimeout is returned, the operation to send the command times out.
*   If ExecutionTimeout is returned, the command execution times out.
*   If ExecutionException is returned, an execution occurs during the command execution.
*   If ExecutionInterrupted is returned, the command execution is interrupted.
*   If ExitCodeNonzero is returned, the command execution is complete, but the exit code is not 0.', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', description='The error message that is returned if the command failed to be sent or run.

*   If null is returned, the command is run normally.
*   If "the specified instance does not exist" is returned, the specified cloud desktop does not exist or is released.
*   If "the instance has released when create task" is returned, the specified cloud desktop is released during the command execution.
*   If "the instance is not running when create task" is returned, the specified cloud desktop is not in the Running state when the execution is created.
*   If "the command is not applicable" is returned, the command cannot be run on the specified cloud desktop.
*   If "the aliyun service is not running on the instance" is returned, Cloud Assistant is not running.
*   If "the aliyun service in the instance does not response" is returned, Cloud Assistant does not respond to your request.
*   If "the aliyun service in the instance is upgrading now" is returned, Cloud Assistant is being upgraded.
*   If "the aliyun service in the instance need upgrade" is returned, you must upgrade Cloud Assistant.
*   If "the command delivery has been timeout" is returned, the operation to send the command times out.
*   If "the command execution has been timeout" is returned, the command execution times out.
*   If "the command execution got an exception" is returned, an exception occurs during the command execution.
*   If "the command execution has been interrupted" is returned, the command execution is interrupted.
*   If "the command execution exit code is not zero" is returned, the command execution is complete, but the exit code is not 0.', example='The specified instance does not exist.'),
          exitCode?: long(name='ExitCode', description='The exit code of the execution.', example='0'),
          finishTime?: string(name='FinishTime', description='The end time of the command execution.', example='2020-12-20T06:15:56Z'),
          invocationStatus?: string(name='InvocationStatus', description='The execution status on a cloud desktop.', example='Success'),
          output?: string(name='Output', description='The command output.

*   If the IncludeOutput parameter is set to false, no value of the Output parameter is returned.
*   If the ContentEncoding parameter is set to Base64, the value of the Output parameter is encoded in Base64.', example='OutPutTestmsg'),
          repeats?: int32(name='Repeats', description='The number of times that the command is run on the cloud desktop.', example='0'),
          startTime?: string(name='StartTime', description='The start time of the command execution on the cloud desktop.', example='2020-12-20T06:15:55Z'),
          stopTime?: string(name='StopTime', description='If you called the [stopInvocation](~~196957~~) operation, the value of this parameter indicates the time when you made the call.', example='2020-12-25T09:15:47Z'),
          updateTime?: string(name='UpdateTime', description='The time when the execution status was last updated.', example='2020-12-25T06:15:56Z'),
        }
      ](name='InvokeDesktops', description='The cloud desktops on which the command is run.'),
      invokeId?: string(name='InvokeId', description='The ID of the execution.', example='t-hz0jdfwd9f****'),
    }
  ](name='Invocations', description='The command execution records.'),
  nextToken?: string(name='NextToken', description='The query token that is returned in this call.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the execution result.
  * *   You can query the execution information in the previous two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationsResponse
 */
async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandType)) {
    query['CommandType'] = request.commandType;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopIds)) {
    query['DesktopIds'] = request.desktopIds;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.includeOutput)) {
    query['IncludeOutput'] = request.includeOutput;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.invokeStatus)) {
    query['InvokeStatus'] = request.invokeStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the execution result.
  * *   You can query the execution information in the previous two weeks. Up to 100,000 lines of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeKmsKeysRequest {
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeKmsKeysResponseBody = {
  authorizeStatus?: string(name='AuthorizeStatus', description='The authorization status.', example='authorized'),
  keys?: [ 
    {
      alias?: string(name='Alias', description='The alias of the key.', example='TestAlias'),
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the key in KMS.', example='acs:kms:cn-hangzhou:154035569884****:key/05754286-3ba2-4fa6-8d41-4323aca6****'),
      keyId?: string(name='KeyId', description='The ID of the key.', example='05754286-3ba2-4fa6-8d41-4323aca6****'),
      type?: string(name='Type', description='The type of the key.', example='ServiceKey'),
    }
  ](name='Keys', description='Details about the customer master keys (CMKs).'),
  kmsServiceStatus?: string(name='KmsServiceStatus', description='Indicates whether KMS is activated.', example='enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeKmsKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKmsKeysResponseBody(name='body'),
}

async function describeKmsKeysWithOptions(request: DescribeKmsKeysRequest, runtime: Util.RuntimeOptions): DescribeKmsKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKmsKeys',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKmsKeys(request: DescribeKmsKeysRequest): DescribeKmsKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKmsKeysWithOptions(request, runtime);
}

model DescribeNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId', description='The IDs of the NAS file systems.', example='04f314****'),
  matchCompatibleProfile?: boolean(name='MatchCompatibleProfile', description='Specifies whether to filter NAS file systems that only support the user profile management (UPM) feature.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the NextToken value that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeNASFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      capacity?: long(name='Capacity', description='The total capacity of the NAS file system. Unit: GiB.

*   The Capacity type has 10 PiB of storage, which is equal to 10,485,760 GiB.
*   The Performance type has 1 PiB of storage, which is equal to 1,048,576 GiB.', example='10485760'),
      createTime?: string(name='CreateTime', description='The time when the NAS file system was created.', example='2021-05-10T11:39Z'),
      description?: string(name='Description', description='The description of the NAS file system.', example='testDescription'),
      desktopGroups?: [ 
        {
          desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-9eeyf15b25nyl****'),
          desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='test_dg'),
        }
      ](name='DesktopGroups', description='The desktop groups that are associated with the NAS file systems that support the UPM feature.'),
      encryptionEnabled?: boolean(name='EncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='04f314****'),
      fileSystemName?: string(name='FileSystemName', description='The name of the NAS file system.', example='testNAS'),
      fileSystemStatus?: string(name='FileSystemStatus', description='The status of the NAS file system.', example='Running'),
      fileSystemType?: string(name='FileSystemType', description='The type of the NAS file system. Valid value: `standard`.', example='standard'),
      meteredSize?: long(name='MeteredSize', description='The used storage of the NAS file system. Unit: byte.', example='0'),
      mountTargetDomain?: string(name='MountTargetDomain', description='The domain name of the mount target.', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
      mountTargetStatus?: string(name='MountTargetStatus', description='The status of the mount target.', example='Active'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      profileCompatible?: boolean(name='ProfileCompatible', description='Indicates whether the UPM feature is supported.', example='false'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      storageType?: string(name='StorageType', description='The storage type of the NAS file system.', example='Capacity'),
      supportAcl?: boolean(name='SupportAcl', description='Indicates whether the Server Message Block (SMB) access control list (ACL) feature is enabled.', example='false'),
      zoneId?: string(name='ZoneId', description='The zone.', example='cn-hangzhou-f'),
    }
  ](name='FileSystems', description='Details of the NAS file systems.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model DescribeNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNASFileSystemsResponseBody(name='body'),
}

async function describeNASFileSystemsWithOptions(request: DescribeNASFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeNASFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.matchCompatibleProfile)) {
    query['MatchCompatibleProfile'] = request.matchCompatibleProfile;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNASFileSystems',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNASFileSystems(request: DescribeNASFileSystemsRequest): DescribeNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNASFileSystemsWithOptions(request, runtime);
}

model DescribeNetworkPackagesRequest {
  internetChargeType?: string(name='InternetChargeType', description='The billing method of the Internet access package. Valid values:

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByBandwidth'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  networkPackageId?: [ string ](name='NetworkPackageId', description='The IDs of the Internet access packages. You can specify 1 to 100 IDs of Internet access packages.', example='np-amtp8e8q1o9e4****'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeNetworkPackagesResponseBody = {
  networkPackages?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the Internet access package. Unit: Mbit/s.', example='10'),
      createTime?: string(name='CreateTime', description='The time when the Internet access package was created.', example='2021-05-10T02:35:26Z'),
      eipAddresses?: [ string ](name='EipAddresses', description='The elastic IP addresses (EIPs) of the Internet access package for outbound traffic.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the Internet access package expires.

*   If the Internet access package is metered on a pay-by-bandwidth basis, the actual expiration time is returned.
*   If the Internet access package is metered on a pay-by-data-transfer basis, 2099-12-31T15:59:59Z is returned.', example='2099-12-31T15:59:59Z'),
      internetChargeType?: string(name='InternetChargeType', description='The billing method of the network bandwidth.

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByTraffic'),
      networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-amtp8e8q1o9e4****'),
      networkPackageStatus?: string(name='NetworkPackageStatus', description='The state of the Internet access package. Valid values:

*   Creating
*   InUse
*   Releasing
*   Released', example='InUse'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The type of the workspace. Valid values:

*   basic
*   standard
*   customized', example='basic'),
      payType?: string(name='PayType', description='The billing method for the network.

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the reserved network bandwidth takes effect.', example='2021-07-10T00:00:00Z'),
      reservationBandwidth?: int32(name='ReservationBandwidth', description='The peak bandwidth of the reserved network bandwidth. Unit: Mbit/s.', example='20'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The billing method of the reserved network bandwidth.

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByBandwidth'),
    }
  ](name='NetworkPackages', description='Details of the Internet access packages.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkPackagesResponseBody(name='body'),
}

async function describeNetworkPackagesWithOptions(request: DescribeNetworkPackagesRequest, runtime: Util.RuntimeOptions): DescribeNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkPackages(request: DescribeNetworkPackagesRequest): DescribeNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkPackagesWithOptions(request, runtime);
}

model DescribeOfficeSitesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='The IDs of the workspaces. You can specify 1 to 100 IDs of workspaces.', example='cn-hangzhou+dir-363353****'),
  officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.', example='SIMPLE'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: string(name='Status', description='The state of the workspace.', example='REGISTERED'),
}

model DescribeOfficeSitesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSites?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', description='The IP address of the AD connector.', example='172.24.*.*'),
          connectorStatus?: string(name='ConnectorStatus', description='The state of the AD connector.', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the network interface controller (NIC) that is associated with the AD connector.', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', description='The type of the AD connector.', example='1'),
          trustKey?: string(name='TrustKey', description='The trust password that is specified when you configured the AD trust relationship.', example='password123***'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that corresponds to the network of the AD connector.', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors', description='Details of the AD connectors.'),
      adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.', example='beijing-ad01'),
      bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the Internet access package. Valid values: 0 to 1000.\\
If the value of this parameter is 0, Internet access is disabled.', example='10'),
      cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-3gwy16dojz1m65****'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block that is included in the secure office network of the workspace.', example='172.16.0.0/16'),
      cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', description='Indicates whether the workspace is created for cloud desktops on a cloud box.', example='true'),
      creationTime?: string(name='CreationTime', description='The time when the workspace was created.', example='2021-05-06T05:58Z'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', description='The ID of the security group.', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', description='The method used to connect the Alibaba Cloud Workspace client to cloud desktops.', example='INTERNET'),
      desktopCount?: long(name='DesktopCount', description='The number of cloud desktops that are created.', example='1'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', description='The endpoint that is used to connect to cloud desktops over a VPC.', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      dnsAddress?: [ string ](name='DnsAddress', description='The DNS addresses of the AD domains.'),
      dnsUserName?: string(name='DnsUserName', description='The username of the DNS account.', example='testDnsUserName'),
      domainName?: string(name='DomainName', description='The domain name of the enterprise Active Directory (AD) system.', example='example.com'),
      domainPassword?: string(name='DomainPassword', description='The password of the domain administrator.', example='testPassword'),
      domainUserName?: string(name='DomainUserName', description='The username of the domain administrator.', example='Administrator'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the permissions of the desktop administrator are granted to the user of the cloud desktop.', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Indicates whether the desktop communication feature is enabled for cloud desktops in the same workspace. If the feature is enabled, cloud desktops in the same workspace can access each other.', example='false'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', description='Indicates whether Internet access is enabled.', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds', description='The IDs of the Apsara File Storage NAS (NAS) file systems.'),
      logs?: [ 
        {
          level?: string(name='Level', description='The log level.', example='INFO'),
          message?: string(name='Message', description='Details of the log entry.', example='code:success | message:Create Connector complete'),
          step?: string(name='Step', description='The step that corresponds to the log entry.', example='CREATE_CONNECTOR'),
          timeStamp?: string(name='TimeStamp', description='The time when the log entry was printed.', example='2021-05-12T09:42Z'),
        }
      ](name='Logs', description='Details of the registration logs.'),
      mfaEnabled?: boolean(name='MfaEnabled', description='Indicates whether multi-factor authentication (MFA) is enabled.', example='false'),
      name?: string(name='Name', description='The name of the workspace. The name is unique in the same region.', example='test'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Indicates whether two-factor verification for logons is enabled. This parameter is returned only for workspaces of the convenience account type.\\
If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to an Alibaba Cloud Workspace client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.', example='false'),
      needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='Indicates whether trusted device verification is enabled.', example='true'),
      networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-amtp8e8q1o9e4****'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.', example='AD_CONNECTOR'),
      ouName?: string(name='OuName', description='The name of the organizational unit (OU) that is connected to the AD domain.', example='example.com/Domain Controllers'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether single sign-on (SSO) is enabled.', example='false'),
      ssoType?: string(name='SsoType', description='The type of SSO.', example='To be hidden.'),
      status?: string(name='Status', description='The state of the workspace.', example='REGISTERED'),
      subDnsAddress?: [ string ](name='SubDnsAddress', description='The DNS addresses of the AD subdomains.'),
      subDomainName?: string(name='SubDomainName', description='The username of a Domain Name System (DNS) account in the AD subdomain.', example='testSubDnsUserName'),
      trustPassword?: string(name='TrustPassword', description='> This parameter is unavailable.', example='To be hidden.'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='The IDs of the vSwitches.'),
      vpcId?: string(name='VpcId', description='The ID of the secure office network of the workspace. The ID is also the ID of the virtual private cloud (VPC) used by the workspace.', example='vpc-uf6tz5k67puge5jn8****'),
      vpcType?: string(name='VpcType', description='The VPC type.', example='Basic'),
    }
  ](name='OfficeSites', description='Details of the workspaces.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfficeSitesResponseBody(name='body'),
}

async function describeOfficeSitesWithOptions(request: DescribeOfficeSitesRequest, runtime: Util.RuntimeOptions): DescribeOfficeSitesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteType)) {
    query['OfficeSiteType'] = request.officeSiteType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOfficeSites',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfficeSitesWithOptions(request, runtime);
}

model DescribePolicyGroupsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribePolicyGroups operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  policyGroupId?: [ string ](name='PolicyGroupId', description='The IDs of the policies. You can specify one or more policy IDs.', example='system-all-enabled-policy'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  scope?: string(name='Scope'),
}

model DescribePolicyGroupsResponseBody = {
  describePolicyGroups?: [ 
    {
      appContentProtection?: string(name='AppContentProtection', description='Indicates whether the anti-screenshot feature is enabled. Valid values:

on off Default value: off.', example='off'),
      authorizeAccessPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block that can be accessed from the client.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The description of the IPv4 CIDR block.', example='test'),
        }
      ](name='AuthorizeAccessPolicyRules', description='The client CIDR blocks in the whitelist.'),
      authorizeSecurityPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The description of the security group rule.', example='test'),
          ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.', example='tcp'),
          policy?: string(name='Policy', description='The authorization policy of the security group rule.', example='accept'),
          portRange?: string(name='PortRange', description='The port range of the security group rule.', example='22/22'),
          priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority.', example='1'),
          type?: string(name='Type', description='The direction of the security group rule.', example='inflow'),
        }
      ](name='AuthorizeSecurityPolicyRules', description='The security group rules.'),
      cameraRedirect?: string(name='CameraRedirect', description='Indicates whether the webcam redirection feature is enabled.', example='on'),
      clientTypes?: [ 
        {
          clientType?: string(name='ClientType', description='The type of the client.', example='windows'),
          status?: string(name='Status', description='Indicates whether a specific client type is allowed to connect to the cloud desktop.', example='ON'),
        }
      ](name='ClientTypes', description='The logon methods.'),
      clipboard?: string(name='Clipboard', description='The permissions on the clipboard.', example='readwrite'),
      domainList?: string(name='DomainList', description='The blacklist or whitelist of domain names. Domain names support the asterisk (\\*) wildcard. Multiple domain names are separated by commas (,). Valid values:

*   \\[black:],example.com,example.org: the domain name blacklist. The cloud desktop cannot access the domain names specified in the blacklist.
*   \\[white:],example.com,example.org: the domain name whitelist. The cloud desktop can access only the domain names specified in the whitelist.', example='[black:],example.com'),
      domainResolveRule?: [ 
        {
          description?: string(name='Description'),
          domain?: string(name='Domain'),
          policy?: string(name='Policy'),
        }
      ](name='DomainResolveRule'),
      domainResolveRuleType?: string(name='DomainResolveRuleType'),
      edsCount?: int32(name='EdsCount', description='The number of cloud desktops that are associated with the policy.\\
This parameter is returned only for custom policies.', example='1'),
      endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate'),
      endUserGroupCoordinate?: string(name='EndUserGroupCoordinate'),
      gpuAcceleration?: string(name='GpuAcceleration', description='Indicates whether the image quality policy is enabled for Graphics cloud desktops. If your business requires high desktop performance and optimal user experience, we recommend that you enable this policy. For example, you can enable this policy in professional design scenarios.', example='off'),
      html5Access?: string(name='Html5Access', description='The access policy on the HTML5 client.', example='off'),
      html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer policy for the HTML5 client.', example='off'),
      internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol that is used for network communication. Valid values: TCP: Only TCP is allowed. BOTH: Automatic switch between TCP and UDP is allowed. Default value: TCP.', example='BOTH'),
      localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.', example='readwrite'),
      name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName'),
      netRedirect?: string(name='NetRedirect', description='Indicates whether the network redirection feature is enabled. Valid values: on off Default value: off.', example='off'),
      netRedirectRule?: [ 
        {
          domain?: string(name='Domain'),
          ruleType?: string(name='RuleType'),
        }
      ](name='NetRedirectRule'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-gx2x1dhsmthe9****'),
      policyGroupType?: string(name='PolicyGroupType', description='The type of the policy.', example='SYSTEM'),
      policyStatus?: string(name='PolicyStatus', description='The state of the policy.', example='AVAILABLE'),
      preemptLogin?: string(name='PreemptLogin', description='Indicates whether user preemption is allowed. User preemption is not allowed. The value of this parameter is `off`.', example='off'),
      preemptLoginUsers?: [ string ](name='PreemptLoginUsers', description='The names of the users that are allowed to connect to the cloud desktop at the same time.'),
      printerRedirection?: string(name='PrinterRedirection', description='The policy for printer redirection.', example='on'),
      recordContent?: string(name='RecordContent', description='Indicates whether the custom screen recording feature is enabled. Valid values:

on off Default value: off.', example='off'),
      recordContentExpires?: long(name='RecordContentExpires', description='The period in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30'),
      recording?: string(name='Recording', description='Indicates whether screen recording is enabled.', example='OFF'),
      recordingAudio?: string(name='RecordingAudio', description='Indicates whether the sound that is generated on the cloud desktop is recorded during screen recording. Valid values: on off', example='on'),
      recordingDuration?: int32(name='RecordingDuration', description='This parameter is used together with Recording. After the recording reaches the end of the validity period, a screen recording file is generated.', example='10'),
      recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording ended. The value is in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.', example='08:59:00'),
      recordingExpires?: long(name='RecordingExpires', description='The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: days.', example='15'),
      recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Valid values:

*   2
*   5
*   10
*   15', example='5'),
      recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording was started. The value is in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.', example='08:00:00'),
      remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. fullControl: The keyboard and mouse can be fully controlled. optionalControl: By default, the keyboard and mouse are disabled during remote assistance. You can apply for permissions on the keyboard and mouse. disableControl: The keyboard and mouse cannot be controlled.', example='fullControl'),
      scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: takes effect globally.
*   IP: takes effect based on the IP address.', example='GLOBAL'),
      scopeValue?: [ string ](name='ScopeValue', description='This parameter is specified when the Scope parameter is set to IP.'),
      usbRedirect?: string(name='UsbRedirect', description='Indicates whether USB redirection is enabled.', example='on'),
      usbSupplyRedirectRule?: [ 
        {
          description?: string(name='Description', description='The description of the rule.', example='Test rule'),
          deviceClass?: string(name='DeviceClass', description='The class of the device. This parameter is required when you set the `usbRuleType` parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
          deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. This parameter is required when you set the `usbRuleType` parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
          productId?: string(name='ProductId', description='The ID of the service.', example='08**'),
          usbRedirectType?: long(name='UsbRedirectType', description='The type of USB redirection.', example='1'),
          usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.', example='1'),
          vendorId?: string(name='VendorId', description='The ID of the vendor. For more information, visit [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf\\_1.pdf).', example='04**'),
        }
      ](name='UsbSupplyRedirectRule', description='The USB redirection rules.'),
      videoRedirect?: string(name='VideoRedirect'),
      visualQuality?: string(name='VisualQuality', description='The policy of image display quality.', example='medium'),
      watermark?: string(name='Watermark', description='Indicates whether watermarking is enabled.', example='on'),
      watermarkColor?: int32(name='WatermarkColor'),
      watermarkCustomText?: string(name='WatermarkCustomText', description='This parameter is unavailable.', example='test'),
      watermarkDegree?: double(name='WatermarkDegree'),
      watermarkFontSize?: int32(name='WatermarkFontSize'),
      watermarkFontStyle?: string(name='WatermarkFontStyle'),
      watermarkRowAmount?: int32(name='WatermarkRowAmount'),
      watermarkTransparency?: string(name='WatermarkTransparency', description='The transparency of the watermark.', example='LIGHT'),
      watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue'),
      watermarkType?: string(name='WatermarkType', description='The type of the watermark.', example='EndUserId'),
    }
  ](name='DescribePolicyGroups', description='Details of the policies.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyGroupsResponseBody(name='body'),
}

async function describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: Util.RuntimeOptions): DescribePolicyGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyGroupsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.

> If the AcceptLanguage parameter is set to zh-CN, the Chinese name of the region is returned. If the AcceptLanguage parameter is set to zh-US or left empty, the English name of the region is returned.', example='华东1（杭州）'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='ecd.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  taskId?: long(name='TaskId', description='The ID of the virus scan task. If this parameter is not specified, the status of the latest scan task is queried by default.

You can call the [StartVirusScanTask](~~217908~~) operation to query the ID of a virus scan task.', example='123456'),
}

model DescribeScanTaskProgressResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the task was created.', example='2021-05-18T02:40:24Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStatus?: string(name='TaskStatus', description='The status of the task. Valid values:

*   init: The task is being initialized.
*   Processing: The task is in progress.
*   Success: The task is completed.
*   Failed: The task failed.', example='Success'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskProgress',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  securityEventId?: [ string ](name='SecurityEventId'),
  taskId?: long(name='TaskId', description='The ID of the task to handle the alerts.', example='1234'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  securityEventOperationStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The code that indicates the processing result of the alert.', example='ignore.Success'),
      securityEventId?: long(name='SecurityEventId', description='The ID of the alert.', example='12321'),
      status?: string(name='Status', description='The processing status of the alert. Valid values:

*   Processing: The alert is being processed.
*   Success: The alert is processed.
*   Failed: The alert failed to be processed.', example='Success'),
    }
  ](name='SecurityEventOperationStatuses', description='Details about the processing status of alerts.'),
  taskStatus?: string(name='TaskStatus', description='The status of the task that handles the alerts. Valid values:

*   Processing: The task is being executed.
*   Success: The task is executed.
*   Failure: The task failed.
*   Pending: The task is waiting to be executed.', example='Success'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperationStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  securityEventId?: long(name='SecurityEventId', description='The ID of the alert.', example='12345'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  securityEventOperations?: [ 
    {
      operationCode?: string(name='OperationCode', description='The code of the operation performed on the alert. Valid values:

*   mark_mis_info: adds the alert to the whitelist without configuring rules. This operation is triggered by adding multiple alerts to the whitelist at a time.
*   advance_mark_mis_inf: adds the alert to the whitelist by configuring advanced rules.
*   defense_mark_mis_info: adds the alert to the whitelist by configuring precise defense rules.
*   rm_mark_mis_info: removes the alert from the whitelist.
*   rm_defense_mark_mis_info: removes the alert from the whitelist configured with precise defense rules.
*   manual_handled: manually handles the alert.
*   ignore: ignores the alert.
*   quara: quarantines the source file of the malicious process.
*   block_ip: blocks access from the source IP address.
*   kill_and_quara: terminates the malicious process and quarantines the source file.', example='ignore'),
      operationParams?: string(name='OperationParams', description='The parameters of the operation.', example='qqqqq'),
      userCanOperate?: boolean(name='UserCanOperate', description='Indicates whether the alert can be handled. Valid values:

*   true: The alert can be handled.
*   false: The alert cannot be handled.', example='true'),
    }
  ](name='SecurityEventOperations', description='The operations performed on the alert.'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperations',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  creator?: string(name='Creator', example='Administrator'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
  endTime?: string(name='EndTime', description='The time when you want to stop creating the snapshot. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.', example='2020-11-31T06:32:31Z'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the value of NextToken that is returned from the last call.', example='8051af8d01b5479bec9f5ddf02e4a8fbd0ab6e7e43f8****'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2ze81owrnv9pity4****'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.

It cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.', example='test data disk'),
  snapshotType?: string(name='SnapshotType', description='The type of the snapshot. Default value: all.

Valid values:

*   auto: auto snapshot
*   user: manual snapshot
*   all: all types of snapshots', example='user'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk for which you want to create the snapshot. Valid values:

*   System: system disk
*   Data: data disk

> The value of this parameter is not case-sensitive.', example='system'),
  startTime?: string(name='StartTime', description='The time when you want to create the snapshot. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.', example='2020-11-30T06:32:31Z'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      creator?: string(name='Creator', description='The user that creates the snapshot.', example='Administrator'),
      deletionTime?: string(name='DeletionTime', description='The time when the snapshot was deleted. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      description?: string(name='Description', description='The description of the snapshot.', example='testDescription'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop to which the snapshot belongs.', example='ecd-g03l3tlm8djoj****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='test'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop. Valid values:

*   Pending: The cloud desktop is pending.
*   Starting: The cloud desktop is being started.
*   Running: The cloud desktop is running.
*   Stopping: The cloud desktop is being stopped.
*   Rebuilding: The cloud desktop is being recreated.
*   Stopped: The cloud desktop is stopped.
*   Expired: The cloud desktop expired.
*   Deleted: The cloud desktop is deleted.', example='Running'),
      progress?: string(name='Progress', description='The progress of the snapshot creation. Unit: percentage (%).', example='100%'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
      remainTime?: int32(name='RemainTime', description='The remaining time required to create the snapshot. Unit: seconds.

> If the value of the `Status` parameter is `PROGRESSING` and the value of the `RemainTime` parameter is `-1`, the system is calculating the remaining time required to create the snapshot.', example='30'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2zeipxmnhej803x7****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', description='The type of snapshot. Valid values:

*   AUTO: auto snapshot
*   USER: manual snapshot', example='USER'),
      sourceDiskSize?: string(name='SourceDiskSize', description='The size of the source disk. Unit: GiB.', example='150'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   SYSTEM: system disk
*   DATA: data disk', example='SYSTEM'),
      status?: string(name='Status', description='The state of the snapshot. Valid values:

*   PROGRESSING: The snapshot is being created.
*   FAILED: The snapshot failed to be created.
*   ACCOMPLISHED: The snapshot is created.', example='ACCOMPLISHED'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Snapshots', description='Details of the snapshots.'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.snapshotType)) {
    query['SnapshotType'] = request.snapshotType;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSuspEventOverviewRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeSuspEventOverviewResponseBody = {
  remindCount?: int32(name='RemindCount', description='The total number of alerts at the remind level.', example='3'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  seriousCount?: int32(name='SeriousCount', description='The total number of alerts at the serious level.', example='0'),
  suspiciousCount?: int32(name='SuspiciousCount', description='The total number of alerts at the suspicious level.', example='3'),
}

model DescribeSuspEventOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventOverviewResponseBody(name='body'),
}

async function describeSuspEventOverviewWithOptions(request: DescribeSuspEventOverviewRequest, runtime: Util.RuntimeOptions): DescribeSuspEventOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventOverview(request: DescribeSuspEventOverviewRequest): DescribeSuspEventOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventOverviewWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries to return on each page.

Default value: 20.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the quarantined file. Valid values:

*   quaraFailed: The file failed to be quarantined.
*   quaraDone: The file is quarantined.
*   quaraing: The file is being quarantined.
*   rollbackFailed: Quarantine for the file failed to be canceled.
*   rollbackDone: Quarantine for the file is canceled.
*   rollbacking: Quarantine for the file is being canceled.', example='quaraDone'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The maximum number of entries returned per page.', example='20'),
  quaraFiles?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='test'),
      eventName?: string(name='EventName', description='The name of the alert.', example='WEBSHELL'),
      eventType?: string(name='EventType', description='The type of the alert.', example='WebshellQuaraEventTyp'),
      id?: int32(name='Id', description='The ID of the quarantined file.', example='3920516'),
      md5?: string(name='Md5', description='The message-digest algorithm 5 (MD5) value of the quarantined file.', example='5ddebe926acc7ed39a664409bfd0****'),
      modifyTime?: string(name='ModifyTime', description='The time when the quarantined file was updated.', example='2021-05-18 20:37:08'),
      path?: string(name='Path', description='The path where the quarantined file is stored on the cloud desktop.', example='/var/www/html/webshell-sample-master/others/def.jpg'),
      status?: string(name='Status', description='The status of the quarantined file. Valid values:

*   quaraFailed: The file failed to be quarantined.
*   quaraDone: The file is quarantined.
*   quaraing: The file is being quarantined.
*   rollbackFailed: Quarantine for the file failed to be canceled.
*   rollbackDone: Quarantine for the file is canceled.
*   rollbacking: Quarantine for the file is being canceled.', example='rollbackDone'),
      tag?: string(name='Tag', description='The tag of the alert.', example='228f890e56eae9eec6a42c7ea801b538'),
    }
  ](name='QuaraFiles', description='The quarantined files.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of quarantined files.', example='1'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

/**
  * ## Description
  * When alerts are handled, the system quarantines the files that contain detected threats to the quarantine panel. You can call this operation to view the quarantined files.
  *
  * @param request DescribeSuspEventQuaraFilesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSuspEventQuaraFilesResponse
 */
async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventQuaraFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When alerts are handled, the system quarantines the files that contain detected threats to the quarantine panel. You can call this operation to view the quarantined files.
  *
  * @param request DescribeSuspEventQuaraFilesRequest
  * @return DescribeSuspEventQuaraFilesResponse
 */
async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event to which the exception belongs.', example='8ff29a086e0ccf4507c55e4ec3af****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  dealed?: string(name='Dealed', description='The processing status of the exception. Valid values:

*   N: not processed
*   Y: processed', example='N'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the exception. Valid values:

*   serious: The exception is urgent.
*   suspicious: The exception is a warning
*   remind: The exception is a suggestion.', example='serious'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  parentEventType?: string(name='ParentEventType', description='The type of the alert event to which the exception belongs.', example='Webshell'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeSuspEventsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName', description='The name of the alert event to which the exception belongs.', example='Suspicious modification to auto-startup items'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay', description='The description of the alert event with which the exception is associated.', example='Suspicious modification to auto-startup items'),
      alarmEventType?: string(name='AlarmEventType', description='The type of the alert event to which the exception belongs.', example='Suspicious process'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay', description='The description of the alert event to which the exception belongs.', example='Suspicious process'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event to which the exception belongs.', example='8ff29a086e0ccf4507c55e4ec3af****'),
      canBeDealOnLine?: string(name='CanBeDealOnLine', description='Indicates whether the exception can be processed online. Valid values:

*   true: The exception can be processed online.
*   false: The exception cannot be processed online.', example='false'),
      canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether the exception can be ignored. Valid values:

*   true: The exception can be ignored.
*   false: The exception cannot be ignored.', example='false'),
      dataSource?: string(name='DataSource', description='The source of data. This parameter can be ignored.', example='aegis_suspicious_event'),
      desc?: string(name='Desc', description='The impact of the exception.', example='The threat detection model detected that a process was attempting to modify an auto-startup item on your server. The modification may be performed by attackers or trojans to obtain system permissions.'),
      desktopId?: string(name='DesktopId', description='The ID of the affected cloud desktop.', example='ecd-blbmpzpqjdrdy****'),
      desktopName?: string(name='DesktopName', description='The name of the affected cloud desktop.', example='test'),
      details?: [ 
        {
          name?: string(name='Name', description='The original property name.', example='${suspicious.property.process_path}'),
          nameDisplay?: string(name='NameDisplay', description='The property name that is displayed after the Name parameter was translated.', example='Process path'),
          type?: string(name='Type', description='The format in which the property value is displayed. The property value can be a string or displayed in the HTML or Markdown format.', example='text'),
          value?: string(name='Value', description='The property value.', example='N/A'),
          valueDisplay?: string(name='ValueDisplay', description='The property value that is displayed after the Value parameter was translated.', example='N/A'),
        }
      ](name='Details', description='Details of the exceptions.'),
      eventStatus?: int32(name='EventStatus', description='The state of the exception. Valid values:

*   1: PENDING
*   2: IGNORE
*   4: HANDLED
*   8: FAULT
*   16: DEALING
*   32: DONE
*   64: EXPIRE', example='1'),
      eventSubType?: string(name='EventSubType', description='The name of the exception.', example='Suspicious modification to auto-startup items'),
      id?: long(name='Id', description='The ID of the exception.', example='19271054'),
      lastTime?: string(name='LastTime', description='The time when the last exception occurred.', example='2021-05-14 14:27:51'),
      level?: string(name='Level', description='The severity of the exception. Valid values:

*   serious: The exception is urgent.
*   suspicious: The exception is a warning
*   remind: The exception is a suggestion.', example='suspicious'),
      name?: string(name='Name', description='The full name of the exception.', example='Suspicious processes - suspicious modification to auto-startup items'),
      occurrenceTime?: string(name='OccurrenceTime', description='The time when the exception first occurred.', example='2021-05-13 22:54:17'),
      operateErrorCode?: string(name='OperateErrorCode', description='The handling result code of the exception.', example='1'),
      operateMsg?: string(name='OperateMsg', description='The handling remarks on the exception.', example='success'),
      uniqueInfo?: string(name='UniqueInfo', description='The ID of the exception.', example='ea154b41f2c4b4005cb130af0586****'),
    }
  ](name='SuspEvents', description='Details of the exceptions.'),
  totalCount?: int32(name='TotalCount', description='The total number of exceptions returned.', example='1'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

/**
  * An alert event consists of alerts and exceptions. Each alert event corresponds to multiple exceptions.
  *
  * @param request DescribeSuspEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSuspEventsResponse
 */
async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventType)) {
    query['ParentEventType'] = request.parentEventType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * An alert event consists of alerts and exceptions. Each alert event corresponds to multiple exceptions.
  *
  * @param request DescribeSuspEventsRequest
  * @return DescribeSuspEventsResponse
 */
async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeUserConnectionRecordsRequest {
  connectDurationFrom?: long(name='ConnectDurationFrom', description='The duration when the cloud desktop is connected, which is the minimum value for condition filtering.', example='100'),
  connectDurationTo?: long(name='ConnectDurationTo', description='The duration when the cloud desktop is connected, which is the maximum value for condition filtering.', example='100'),
  connectEndTimeFrom?: long(name='ConnectEndTimeFrom', description='The time when the cloud desktop stops to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631266200000'),
  connectEndTimeTo?: long(name='ConnectEndTimeTo', description='The time when the cloud desktop stops to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631268000000'),
  connectStartTimeFrom?: long(name='ConnectStartTimeFrom', description='The time when the cloud desktop starts to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631239200000'),
  connectStartTimeTo?: long(name='ConnectStartTimeTo', description='The time when the cloud desktop starts to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631241000000'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
  endUserId?: string(name='EndUserId', description='The user that you want to authorize to use the desktop group.', example='alice'),
  endUserType?: string(name='EndUserType', description='The account type of the user. Valid values:

*   SIMPLE: the convenience account type
*   AD_CONNECTOR: the enterprise Active Directory (AD) account type', example='SIMPLE'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeUserConnectionRecordsResponseBody = {
  connectionRecords?: [ 
    {
      connectDuration?: string(name='ConnectDuration', description='The duration of the desktop connection. Unit: seconds.', example='3405035000'),
      connectEndTime?: string(name='ConnectEndTime', description='The time when the cloud desktop was disconnected.', example='2022-02-27T20:03:13Z'),
      connectStartTime?: string(name='ConnectStartTime', description='The time when the cloud desktop was connected.', example='2022-01-19T10:12:38Z'),
      connectionRecordId?: string(name='ConnectionRecordId', description='The ID of the connection record.', example='528'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop that is connected.', example='ud-2hawufy3uedi1****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop that is connected.', example='testName'),
    }
  ](name='ConnectionRecords', description='Details about connection records.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A8E03'),
}

model DescribeUserConnectionRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserConnectionRecordsResponseBody(name='body'),
}

async function describeUserConnectionRecordsWithOptions(request: DescribeUserConnectionRecordsRequest, runtime: Util.RuntimeOptions): DescribeUserConnectionRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectDurationFrom)) {
    query['ConnectDurationFrom'] = request.connectDurationFrom;
  }
  if (!Util.isUnset(request.connectDurationTo)) {
    query['ConnectDurationTo'] = request.connectDurationTo;
  }
  if (!Util.isUnset(request.connectEndTimeFrom)) {
    query['ConnectEndTimeFrom'] = request.connectEndTimeFrom;
  }
  if (!Util.isUnset(request.connectEndTimeTo)) {
    query['ConnectEndTimeTo'] = request.connectEndTimeTo;
  }
  if (!Util.isUnset(request.connectStartTimeFrom)) {
    query['ConnectStartTimeFrom'] = request.connectStartTimeFrom;
  }
  if (!Util.isUnset(request.connectStartTimeTo)) {
    query['ConnectStartTimeTo'] = request.connectStartTimeTo;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.endUserType)) {
    query['EndUserType'] = request.endUserType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserConnectionRecords',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserConnectionRecords(request: DescribeUserConnectionRecordsRequest): DescribeUserConnectionRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConnectionRecordsWithOptions(request, runtime);
}

model DescribeUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  ruleType?: string(name='RuleType', example='DesktopGroup'),
}

model DescribeUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
  userProfilePathRule?: {
    desktopGroupId?: string(name='DesktopGroupId', example='dg-4i8fvpv6tfs03****'),
    rules?: [ 
      {
        blackPath?: {
          path?: string(name='Path', example='AppLocal/Data'),
          type?: string(name='Type', example='file'),
        }(name='BlackPath'),
        whitePaths?: [ 
          {
            path?: string(name='Path', example='games'),
            type?: string(name='Type', example='folder'),
          }
        ](name='WhitePaths'),
      }
    ](name='Rules'),
    userProfileRuleType?: string(name='UserProfileRuleType', example='Default'),
  }(name='UserProfilePathRule'),
}

model DescribeUserProfilePathRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserProfilePathRulesResponseBody(name='body'),
}

async function describeUserProfilePathRulesWithOptions(request: DescribeUserProfilePathRulesRequest, runtime: Util.RuntimeOptions): DescribeUserProfilePathRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserProfilePathRules',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserProfilePathRules(request: DescribeUserProfilePathRulesRequest): DescribeUserProfilePathRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserProfilePathRulesWithOptions(request, runtime);
}

model DescribeUsersInGroupRequest {
  connectState?: int32(name='ConnectState', description='The status of the desktop connection for the end user.', example='1'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-8ttn55ujj8nj8****'),
  endUserId?: string(name='EndUserId', description='The ID of the authorized user.', example='alice'),
  endUserIds?: [ string ](name='EndUserIds', description='The IDs of the end users.'),
  filter?: string(name='Filter', description='The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.', example='alice'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  orgId?: string(name='OrgId', description='The ID of the organization to which the end user belongs.', example='org-d0fua2oyukw8j****'),
  queryUserDetail?: boolean(name='QueryUserDetail', description='Specifies whether to query the details about the end user.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeUsersInGroupResponseBody = {
  endUsers?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The status of the desktop connection for the end user.', example='1'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
      displayName?: string(name='DisplayName', description='The display name of the enterprise AD account.', example='alice'),
      endUserEmail?: string(name='EndUserEmail', description='The email address of the end user.', example='alice@example.com'),
      endUserId?: string(name='EndUserId', description='The name of the end user.', example='alice'),
      endUserName?: string(name='EndUserName', description='The name of the end user.', example='alice'),
      endUserPhone?: string(name='EndUserPhone', description='The mobile number of the end user.', example='1381111****'),
      endUserRemark?: string(name='EndUserRemark', description='The remarks of the end user.', example='Note'),
      endUserType?: string(name='EndUserType', description='The account type of the end user.', example='SIMPLE'),
      externalInfo?: {
        externalName?: string(name='ExternalName', description='The external name.', example='nameDemo'),
        jobNumber?: string(name='JobNumber', description='The employee ID.', example='123'),
      }(name='ExternalInfo', description='The appended information.'),
      userDesktopId?: string(name='UserDesktopId', description='The ID of the desktop of the end user.', example='ud-i896ze8hazpvl****'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', description='The ID of the property.', example='123'),
          propertyKey?: string(name='PropertyKey', description='The name of the property.', example='key'),
          propertyType?: int32(name='PropertyType', description='The type of the property.', example='1'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', description='The property value.', example='value'),
              propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='123'),
            }
          ](name='PropertyValues', description='Details about property values.'),
          userId?: long(name='UserId', description='The ID of the end user.', example='123'),
          userName?: string(name='UserName', description='The name of the end user.', example='nameDemo'),
        }
      ](name='UserSetPropertiesModels', description='Details about the seats of end users.'),
    }
  ](name='EndUsers', description='Details about the end users.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlineUsersCount?: int32(name='OnlineUsersCount', description='The number of authorized users that are connecting to cloud desktops.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  usersCount?: int32(name='UsersCount', description='The total number of authorized users of the desktop group.', example='1'),
}

model DescribeUsersInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersInGroupResponseBody(name='body'),
}

async function describeUsersInGroupWithOptions(request: DescribeUsersInGroupRequest, runtime: Util.RuntimeOptions): DescribeUsersInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectState)) {
    query['ConnectState'] = request.connectState;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orgId)) {
    query['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.queryUserDetail)) {
    query['QueryUserDetail'] = request.queryUserDetail;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsersInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsersInGroup(request: DescribeUsersInGroupRequest): DescribeUsersInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersInGroupWithOptions(request, runtime);
}

model DescribeUsersPasswordRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gq8u6whi9f6k8****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeUsersPasswordResponseBody = {
  desktopUsers?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the user.', example='alice_1365*****'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='alice'),
      password?: string(name='Password', description='The password of the user.', example='tes123'),
    }
  ](name='DesktopUsers', description='The users that are associated with cloud desktop.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7B4B17B-5C8A-514C-AA4D-F8090E3A63E9'),
}

model DescribeUsersPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersPasswordResponseBody(name='body'),
}

async function describeUsersPasswordWithOptions(request: DescribeUsersPasswordRequest, runtime: Util.RuntimeOptions): DescribeUsersPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsersPassword',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsersPassword(request: DescribeUsersPasswordRequest): DescribeUsersPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersPasswordWithOptions(request, runtime);
}

model DescribeVirtualMFADevicesRequest {
  endUserId?: [ string ](name='EndUserId', description='The list of the AD users.', example='testuser'),
  maxResults?: int32(name='MaxResults', description='The maximum number of results to return. Valid values: 1 to 500. Default value: 100.', example='100'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the NextToken value returned in the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-269345****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeVirtualMFADevicesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. This parameter is empty if no additional results exist.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL23as'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
  virtualMFADevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The number of consecutive failures to bind the virtual MFA device, or the number of MFA failures based on the virtual MFA device.', example='1'),
      directoryId?: string(name='DirectoryId', description='>  This parameter is in invitational preview and unavailable for public use.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      endUserId?: string(name='EndUserId', description='The name of the AD user who uses the virtual MFA device.', example='usertest'),
      gmtEnabled?: string(name='GmtEnabled', description='The time when the virtual MFA device is enabled. The time follows the [ISO 8601 standard](~~25696~~) in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The time when the virtual MFA device is automatically unlocked after being locked. The time follows the [ISO 8601 standard](~~25696~~) in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-12-21T15:21:28Z'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-269345****'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
      status?: string(name='status', description='The status of the virtual MFA device. The valid values include:

*   UNBOUND: The virtual MFA device is not bound.
*   NORMAL: The virtual MFA device is normal.
*   LOCKED: The virtual MFA device is locked.', example='NORMAL'),
    }
  ](name='VirtualMFADevices', description='Details of the virtual MFA devices.'),
}

model DescribeVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualMFADevicesResponseBody(name='body'),
}

async function describeVirtualMFADevicesWithOptions(request: DescribeVirtualMFADevicesRequest, runtime: Util.RuntimeOptions): DescribeVirtualMFADevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualMFADevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): DescribeVirtualMFADevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualMFADevicesWithOptions(request, runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  name?: string(name='Name', description='The name of the Redhat Package Manager (RPM) package.

You can call the [DescribeVulList](~~223907~~) operation to obtain the names of RPM packages.', example='5003243'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='sys'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      cveId?: string(name='CveId', description='The ID of the vulnerability.', example='CVE-2017-6***'),
      cvssScore?: string(name='CvssScore', description='The Common Vulnerability Scoring System (CVSS) score of the vulnerability, which indicates the severity of the vulnerability. A larger value indicates a higher severity. Valid values: 0 to 10.', example='9.1'),
      summary?: string(name='Summary', description='The description of the vulnerability.'),
      title?: string(name='Title', description='The name of the vulnerability.'),
    }
  ](name='Cves', description='Details about the vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulDetails',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.

*   Pages start from page 1.
*   Default value: 1.', example='1'),
  dealed?: string(name='Dealed', description='The processing status of the vulnerability.', example='n'),
  lang?: string(name='Lang', description='The language of the content within the request and response.', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='5016623'),
  necessity?: string(name='Necessity', description='The priority to fix the detected vulnerability or the risk level of the vulnerability.', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.\\
Default value: 20.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the detected vulnerability.', example='cve'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AC407AC-A010-45B4-ADD8-CDC679D3DF26'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='2021-05 servicing stack update for Windows Server 2019 for x64-based systems (KB5003243)'),
      desktopId?: string(name='DesktopId', description='The ID of the affected cloud desktop.', example='ecd-9qocyzzbmi4pl****'),
      desktopName?: string(name='DesktopName', description='The name of the affected cloud desktop.', example='test'),
      extendContentJson?: {
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', description='The complete version number.', example='3.10.0-693.2.2.el7'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            name?: string(name='Name', description='The name of the RPM package.', example='python-perf'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/python2.7/site-packages'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='*** update python-perf'),
          }
        ](name='RpmEntityList', description='The RPM Package Manager (RPM) packages.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The UNIX timestamp when the vulnerability was first detected. Unit: milliseconds.', example='1620875711000'),
      lastTs?: long(name='LastTs', description='The UNIX timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1621292382000'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the vulnerability status was changed. Unit: milliseconds.', example='1621292382000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='5003243'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability or the risk level of the vulnerability.', example='asap'),
      online?: boolean(name='Online', description='Indicates whether the Security Center agent on the cloud desktop is online.', example='true'),
      osVersion?: string(name='OsVersion', description='The version of the OS of the cloud desktop.', example='win'),
      related?: string(name='Related', description='The IDs of the common vulnerabilities and exposures (CVEs) that are related to the vulnerability.', example='ACSV-SYS-5003243'),
      repairTs?: long(name='RepairTs', description='The UNIX timestamp when the vulnerability was fixed. Unit: milliseconds.', example='1621315382000'),
      resultCode?: string(name='ResultCode', description='The code returned after the vulnerability is fixed.', example='0'),
      resultMessage?: string(name='ResultMessage', description='The message returned after the vulnerability is fixed.', example='timeout'),
      status?: int32(name='Status', description='The status of the vulnerability.', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='system'),
      type?: string(name='Type', description='The type of the vulnerability.', example='sys'),
    }
  ](name='VulRecords', description='The vulnerabilities.'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulList',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulOverviewRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeVulOverviewResponseBody = {
  asapCount?: int32(name='AsapCount', description='The number of high-risk vulnerabilities.', example='1'),
  laterCount?: int32(name='LaterCount', description='The number of medium-risk vulnerabilities.', example='1'),
  nntfCount?: int32(name='NntfCount', description='The number of low-risk vulnerabilities.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeVulOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulOverviewResponseBody(name='body'),
}

async function describeVulOverviewWithOptions(request: DescribeVulOverviewRequest, runtime: Util.RuntimeOptions): DescribeVulOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulOverview(request: DescribeVulOverviewRequest): DescribeVulOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulOverviewWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  zoneType?: string(name='ZoneType', description='The type of the zone. Default value: **AvailabilityZone**. This value indicates Alibaba Cloud zones.', example='AvailabilityZone'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  zones?: [ 
    {
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-h'),
    }
  ](name='Zones', description='Details about zones.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.zoneType)) {
    query['ZoneType'] = request.zoneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachCenRequest {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DetachCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachCenResponseBody(name='body'),
}

async function detachCenWithOptions(request: DetachCenRequest, runtime: Util.RuntimeOptions): DetachCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachCen(request: DetachCenRequest): DetachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCenWithOptions(request, runtime);
}

model DetachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: string(name='ClientType', description='The type of the Alibaba Cloud Workspace client. 1: the hardware client 2: the software client', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='F9E52EDCCB2B****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the user that is bound to the client.', example='moli'),
  region?: string(name='Region', description='The ID of the region.', example='cn-shanghai'),
}

model DetachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachEndUserResponseBody(name='body'),
}

async function detachEndUserWithOptions(request: DetachEndUserRequest, runtime: Util.RuntimeOptions): DetachEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachEndUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachEndUser(request: DetachEndUserRequest): DetachEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEndUserWithOptions(request, runtime);
}

model DisableDesktopsInGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopIds?: [ string ](name='DesktopIds', description='The IDs of the cloud desktops.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DisableDesktopsInGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='34FB4D97-C0D9-5534-ABC6-90C7EBD5****'),
}

model DisableDesktopsInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDesktopsInGroupResponseBody(name='body'),
}

async function disableDesktopsInGroupWithOptions(request: DisableDesktopsInGroupRequest, runtime: Util.RuntimeOptions): DisableDesktopsInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopIds)) {
    query['DesktopIds'] = request.desktopIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDesktopsInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDesktopsInGroup(request: DisableDesktopsInGroupRequest): DisableDesktopsInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDesktopsInGroupWithOptions(request, runtime);
}

model DissociateNetworkPackageRequest {
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package. You can call the [DescribeNetworkPackages](~~216079~~) operation to query the ID of the Internet access package.', example='np-*********'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DissociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DissociateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateNetworkPackageResponseBody(name='body'),
}

async function dissociateNetworkPackageWithOptions(request: DissociateNetworkPackageRequest, runtime: Util.RuntimeOptions): DissociateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateNetworkPackage(request: DissociateNetworkPackageRequest): DissociateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateNetworkPackageWithOptions(request, runtime);
}

model ExportClientEventsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
If you leave this parameter empty, the current time is used.', example='2022-03-23T07:11:01Z'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='user01'),
  eventType?: string(name='EventType', description='The type of the event that you want to query. If you specify a value for the EventTypes parameter, the combination of event types that you want to query is considered the filter condition for the query. If you do not specify a value for the EventTypes parameter and the EventType parameter is left empty, all events are queried.', example='CLIENT_LOGIN'),
  eventTypes?: [ string ](name='EventTypes', description='The combination of event types that you want to query. You can combine multiple event types. The query result contains all the combined events.'),
  langType?: string(name='LangType', example='zh-CN'),
  maxResults?: int32(name='MaxResults', description='The number of records that you want to export. Maximum Value: 5000 Default value: 5000', example='50'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
If you leave this parameter empty, all events that occurred before the point in time that you specify for `EndTime` are queried.', example='2022-03-23T04:10:21Z'),
}

model ExportClientEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', description='The URL from which you export events.', example='https://cn-shanghai-servicemanager.oss-cn-shanghai.aliyuncs.com/A0_CLIENT_EVENT/EDS_Events%20List_20220519234611_w5HuD83KGs.csv?Expires=1652975773&OSSAccessKeyId=LTYL****8tso&Signature=4erMG*********k%3D'),
}

model ExportClientEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportClientEventsResponseBody(name='body'),
}

async function exportClientEventsWithOptions(request: ExportClientEventsRequest, runtime: Util.RuntimeOptions): ExportClientEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.eventTypes)) {
    query['EventTypes'] = request.eventTypes;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportClientEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportClientEvents(request: ExportClientEventsRequest): ExportClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportClientEventsWithOptions(request, runtime);
}

model ExportDesktopGroupInfoRequest {
  chargeType?: string(name='ChargeType', description='The billing method of cloud desktops in a desktop group.', example='PrePaid'),
  desktopGroupId?: [ string ](name='DesktopGroupId', description='The IDs of the desktop groups. You can specify 1 to 100 desktop groups.'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='test'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users authorized to use the desktop group. You can specify 1 to 100 users.'),
  expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-12-31T15:59Z'),
  langType?: string(name='LangType', description='The language that you want to use.', example='zh-CN'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the desktop group belongs.', example='cn-hangzhou+dir-467671****'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of policy with which the desktop group is associated.', example='pg-53iyi2aar0nd6****'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ExportDesktopGroupInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='24E05D3E-08F4-551E-B1F0-F6D84EE0BCCC'),
  url?: string(name='Url', description='The download address from which you can export desktop groups.', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktopGroups_202203********_xBjqdCT***.xlsx?*********'),
}

model ExportDesktopGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDesktopGroupInfoResponseBody(name='body'),
}

/**
  * You can call the operation to export desktop groups and then save the desktop groups in the .xlsx file. The information about exported desktop groups includes: the desktop group ID and name, the workspace ID and name, the desktop template, the security policy name, the number of authorized users, the billing method, and the creation time.
  *
  * @param request ExportDesktopGroupInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportDesktopGroupInfoResponse
 */
async function exportDesktopGroupInfoWithOptions(request: ExportDesktopGroupInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopGroupInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDesktopGroupInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to export desktop groups and then save the desktop groups in the .xlsx file. The information about exported desktop groups includes: the desktop group ID and name, the workspace ID and name, the desktop template, the security policy name, the number of authorized users, the billing method, and the creation time.
  *
  * @param request ExportDesktopGroupInfoRequest
  * @return ExportDesktopGroupInfoResponse
 */
async function exportDesktopGroupInfo(request: ExportDesktopGroupInfoRequest): ExportDesktopGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopGroupInfoWithOptions(request, runtime);
}

model ExportDesktopListInfoRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription

Default value: PostPaid.', example='PostPaid'),
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop N. Valid values of N: 1 to 100.'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName'),
  desktopStatus?: string(name='DesktopStatus', description='The status of the cloud desktop. Valid values:

*   Pending: The cloud desktop is pending.
*   Starting: The cloud desktop is being started.
*   Running: The cloud desktop is running.
*   Stopping: The cloud desktop is being stopped.
*   Rebuilding: The cloud desktop is being rebuilt.
*   Stopped: The cloud desktop is stopped.
*   Expired: The cloud desktop expired.
*   Deleted: The cloud desktop is deleted.', example='Running'),
  endUserId?: [ string ](name='EndUserId', description='The ID of end user N that is assigned the cloud desktop. Valid values of N: 1 to 100.

> Only one end user can use the cloud desktop at a time.'),
  expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-12-31T15:59Z'),
  groupId?: string(name='GroupId', description='The ID of the desktop group.', example='dg-boyczi8enfyc5***'),
  langType?: string(name='LangType', description='The language in which the cloud desktop is displayed in the console UI. You can export the list of cloud desktops in the specified language. Valid values:

*   `zh-CN`: Simplified Chinese
*   `en-GB`: English (United Kingdom)

Default value: `zh-CN`.', example='`zh-CN`'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that is associated with the cloud desktop.', example='system-all-enabled-policy'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud desktops by group for easy searching and batch operations. For more information, see [Use tags to manage cloud desktops](~~203781~~).'),
  userName?: string(name='UserName', description='The username of the end user that is using the cloud desktop.', example='alice'),
}

model ExportDesktopListInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', description='The URL from which you can download the file that contains information about exported cloud desktops.', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktops%20List_2022**********_w3fq******.csv?**********'),
}

model ExportDesktopListInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDesktopListInfoResponseBody(name='body'),
}

/**
  * The list of cloud desktops that are exported by calling the ExportDesktopListInfo operation is saved in a CSV file. The CSV file contains the information about each cloud desktop, including the IDs and names of cloud desktops, IDs and names of workspaces, IDs and names of desktop groups, vCPUs, memory, protocols, system disk capacity, data disk capacity, OSs, running status, current user, tags, IP addresses, billing methods, and creation time.
  *
  * @param request ExportDesktopListInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportDesktopListInfoResponse
 */
async function exportDesktopListInfoWithOptions(request: ExportDesktopListInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopListInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopStatus)) {
    query['DesktopStatus'] = request.desktopStatus;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDesktopListInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The list of cloud desktops that are exported by calling the ExportDesktopListInfo operation is saved in a CSV file. The CSV file contains the information about each cloud desktop, including the IDs and names of cloud desktops, IDs and names of workspaces, IDs and names of desktop groups, vCPUs, memory, protocols, system disk capacity, data disk capacity, OSs, running status, current user, tags, IP addresses, billing methods, and creation time.
  *
  * @param request ExportDesktopListInfoRequest
  * @return ExportDesktopListInfoResponse
 */
async function exportDesktopListInfo(request: ExportDesktopListInfoRequest): ExportDesktopListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopListInfoWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  commandContent?: string(name='CommandContent', description='The command that you want to run to configure a custom application in user mode. After you obtain the credential, the application is automatically started.

*   appPath: the path of the application startup file. Example: C:\\\\\\Program Files (x86)\\\\\\000\\\\\\000.exe. Use double slashes as the delimiter.
*   appParameter: the startup parameters of the application. The value must be of the String type. Separate multiple parameters with spaces. Example: meetingid 000 meetingname aaa.', example='{
      "startApplication": {
            "startApplicationList": [
                  {
                        "sessionName": "",
                        "appList": [
                              {
                                    "appPath": "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe",
                                    "appParameter": "www.example.com www.example1.com"
                              }
                        ]
                  }
            ]
      }
}'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='Alice'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password.', example='Ab123456'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId', description='The ID of the desktop connection task.', example='2afbad19-778a-4fc5-9674-1f19c63862da'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='28c80e90-f71e-4c23-93d6-1225329cf949'),
}

model GetConnectionTicketResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', description='The ID of the desktop connection task.', example='2afbad19-778a-4fc5-9674-1f19c638****'),
  taskStatus?: string(name='TaskStatus', description='The state of the task. Valid values: running, finished, and failed.', example='FINISHED'),
  ticket?: string(name='Ticket', description='The credential that is used to connect to the cloud desktop of the end user. Before you use the credential, decode the credential in Base64. Then, save the credential as a xxx.ica file and open the file. Sample Python code:

    import base64
    response = {
        "Ticket": "XXXX",
        "RequestId": "XXX-XXX",
    }
    f = open (\\"xxx.ica\\", \\"w\\")
    out = base64.b64decode(response[\\"Ticket\\"])
    f.write(out)
    f.close()', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConnectionTicket',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model GetDesktopGroupDetailRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The region ID of the desktop group.', example='cn-hangzhou'),
}

model GetDesktopGroupDetailResponseBody = {
  desktops?: {
    allowAutoSetup?: int32(name='AllowAutoSetup', description='Indicates whether the desktop group enables auto scale-out.', example='1'),
    allowBufferCount?: int32(name='AllowBufferCount', description='The number of reserved cloud desktops in the desktop group.', example='1'),
    bindAmount?: int32(name='BindAmount', description='The number of sessions allowed for each cloud desktop in the multi-session desktop group.', example='1'),
    buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of purchased cloud desktops. Valid values: 0 to 200.', example='5'),
    comments?: string(name='Comments', description='The remarks on the desktop group.', example='for students'),
    connectDuration?: long(name='ConnectDuration', description='The maximum duration of the session. Unit: milliseconds.', example='60000'),
    cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
    creationTime?: string(name='CreationTime', description='The time when the desktop group was created.', example='2020-11-06T08:28Z'),
    creator?: string(name='Creator', description='The user who creates the desktop group.', example='155177335370****'),
    dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk.', example='cloud_essd'),
    dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk.', example='80'),
    desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-3uiojcc0j4kh7****'),
    desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='DesktopGroupDemo'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory, which is the same as the ID of the workspace.', example='cn-hangzhou+dir-363353****'),
    directoryType?: string(name='DirectoryType', description='The type of the directory.', example='SIMPLE'),
    expiredTime?: string(name='ExpiredTime', description='The time when the desktop group expires.', example='2021-12-31T15:59Z'),
    gpuCount?: float(name='GpuCount', description='The number of vGPUs.', example='4'),
    gpuSpec?: string(name='GpuSpec', description='The GPU specifications.', example='NVIDIA T4'),
    idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum duration of the idle session. Unit: milliseconds.', example='900000'),
    imageId?: string(name='ImageId', description='The IDs of the images.', example='m-4zfb6zj728hhr****'),
    keepDuration?: long(name='KeepDuration', description='The retention period of a cloud desktop in the desktop group after the cloud desktop is disconnected. Unit: milliseconds.', example='180000'),
    loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
    maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain.', example='10'),
    memory?: long(name='Memory', description='The memory size.', example='4096'),
    minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of desktops that the desktop group must retain.', example='1'),
    nasFileSystemID?: string(name='NasFileSystemID', description='The ID of the Apsara File Storage NAS (NAS) file system.', example='0783b4****'),
    nasFileSystemName?: string(name='NasFileSystemName', description='The name of the NAS file system.', example='abcd'),
    officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-990541****'),
    officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
    officeSiteType?: string(name='OfficeSiteType', description='The type of the workspace.', example='SIMPLE'),
    ownBundleId?: string(name='OwnBundleId', description='The ID of the desktop template.', example='b-1se9fb37r5tfq****'),
    ownBundleName?: string(name='OwnBundleName', description='The name of the desktop template.', example='BundleDemo'),
    ownType?: int32(name='OwnType', description='The type of the desktop group.', example='0'),
    payType?: string(name='PayType', description='The billing method of the desktop group.', example='PrePaid'),
    policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy group.', example='pg-9cktlowtxfl6****'),
    policyGroupIds?: [ string ](name='PolicyGroupIds', description='The ID of the policy with which the desktop group is associated.'),
    policyGroupName?: string(name='PolicyGroupName', description='The name of the security policy group.', example='test'),
    policyGroupNames?: [ string ](name='PolicyGroupNames', description='The name of the policy.'),
    profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Indicates whether data roaming is enabled.', example='true'),
    ratioThreshold?: float(name='RatioThreshold', description='The session usage threshold for the multi-session desktop group that has an auto scaling policy in effect.', example='0.6'),
    resType?: int32(name='ResType', description='The type of the resource. Currently, only Elastic Compute Service (ECS) instances are supported.', example='0'),
    resetType?: int32(name='ResetType', description='Indicates which type of the disk used by cloud desktops in the desktop group is reset.', example='0'),
    scaleTimerInfos?: [ 
      {
        buyResAmount?: int32(name='BuyResAmount', description='The number of purchased cloud desktops during the scaling event. Valid values: 0 to 200.', example='5'),
        cron?: string(name='Cron', description='The type of the CRON expression that is specified for the scheduled task.', example='0 0 0 * * ?'),
        keepDuration?: long(name='KeepDuration', description='The retention period of a cloud desktop in the desktop group after the cloud desktop is disconnected. Unit: milliseconds.', example='600000'),
        loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy for the multi-session desktop group.', example='1'),
        maxResAmount?: int32(name='MaxResAmount', description='The maximum number of cloud desktops that the system can scale. Valid values: 0 to 200.', example='100'),
        minResAmount?: int32(name='MinResAmount', description='The minimum number of cloud desktops. Valid values: 0 to 200.', example='1'),
        ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops x Maximum number of sessions allowed for each cloud desktop) x 100%`. When the specified threshold is reached, new cloud desktops are automatically created. If the specified threshold is not reached, idle cloud desktops are released.', example='0.5'),
        type?: string(name='Type', description='The type of the scheduled task. Valid values:', example='rise'),
      }
    ](name='ScaleTimerInfos', description='The details of the scheduled task.'),
    status?: int32(name='Status', description='The status of the desktop group.', example='1'),
    stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud desktop enters the Stopped state. When the specified period of time is reached, the idle cloud desktop automatically enters the Stopped state. If an end user connects to a cloud desktop that is in the Stopped state, the cloud desktop automatically restarts. Unit: milliseconds.', example='180000'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.', example='cloud_essd'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk.', example='80'),
    timerInfos?: [ 
      {
        cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 58 11 ? * 2'),
        forced?: boolean(name='Forced', description='Indicates whether the scheduled task is forcibly executed.', example='false'),
        status?: int32(name='Status', description='The status of the scheduled task.', example='1'),
        timerType?: int32(name='TimerType', description='The type of the scheduled task.', example='1'),
      }
    ](name='TimerInfos', description='The list of scheduled time for desktop group tasks.'),
    timingStrategyInfo?: string(name='TimingStrategyInfo', description='The information about the scheduled application.', example='abcd'),
    version?: long(name='Version', description='The version number of the desktop group.', example='1'),
  }(name='Desktops', description='The information about the desktop group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B5268CE-5EB3-545F-9F38-A8BCF710****'),
}

model GetDesktopGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDesktopGroupDetailResponseBody(name='body'),
}

async function getDesktopGroupDetailWithOptions(request: GetDesktopGroupDetailRequest, runtime: Util.RuntimeOptions): GetDesktopGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDesktopGroupDetail',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDesktopGroupDetail(request: GetDesktopGroupDetailRequest): GetDesktopGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDesktopGroupDetailWithOptions(request, runtime);
}

model GetOfficeSiteSsoStatusRequest {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model GetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  ssoStatus?: boolean(name='SsoStatus', description='Indicates whether SSO is enabled.', example='false'),
}

model GetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function getOfficeSiteSsoStatusWithOptions(request: GetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): GetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOfficeSiteSsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOfficeSiteSsoStatus(request: GetOfficeSiteSsoStatusRequest): GetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOfficeSiteSsoStatusWithOptions(request, runtime);
}

model GetSpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the workspace. The parameter is the same as the `OfficeSiteId` parameter. We recommend that you use `OfficeSiteId` instead of `DirectoryId`. You can specify a value for either the `DirectoryId` parameter or the `OfficeSiteId` parameter, but not both.', example='cn-hangzhou+dir-400695****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-400695****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model GetSpMetadataResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  spMetadata?: string(name='SpMetadata', description='The metadata of the SP.', example='<?xml version=************/md:EntityDescriptor>'),
}

model GetSpMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpMetadataResponseBody(name='body'),
}

/**
  * ## Description
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types. You cannot call this operation for RAM directories.
  *
  * @param request GetSpMetadataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSpMetadataResponse
 */
async function getSpMetadataWithOptions(request: GetSpMetadataRequest, runtime: Util.RuntimeOptions): GetSpMetadataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSpMetadata',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types. You cannot call this operation for RAM directories.
  *
  * @param request GetSpMetadataRequest
  * @return GetSpMetadataResponse
 */
async function getSpMetadata(request: GetSpMetadataRequest): GetSpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpMetadataWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  operationCode?: string(name='OperationCode', description='The operation to handle multiple alerts of the same type at a time.', example='deal'),
  operationParams?: string(name='OperationParams', description='The return value from the operation to handle multiple alerts of the same type at a time.\\
This parameter is required only if you set the OperationCode parameter to `kill_and_quara` or `block_ip`. This parameter is not required if you set the OperationCode parameter to other values.', example='{"expireTime":1578475919533}'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  securityEvent?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-blbmpzpqjdrdy****'),
      securityEventId?: string(name='SecurityEventId', description='The ID of the alert.', example='123456'),
    }
  ](name='SecurityEvent', description='The alerts.'),
}

model HandleSecurityEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
  taskId?: long(name='TaskId', description='The ID of the task to handle alerts.', example='1234'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEvent)) {
    query['SecurityEvent'] = request.securityEvent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSecurityEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model ListCdsFilesRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-320357****'),
  endUserId?: string(name='EndUserId', example='testUser'),
  fileIds?: [ string ](name='FileIds'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****'),
  orderType?: string(name='OrderType', example='CreateTimeDesc'),
  parentFileId?: string(name='ParentFileId', example='63636837e47e5a24a8a940218bef395c210e****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: string(name='Status', example='available'),
}

model ListCdsFilesShrinkRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-320357****'),
  endUserId?: string(name='EndUserId', example='testUser'),
  fileIdsShrink?: string(name='FileIds'),
  maxResults?: int32(name='MaxResults', example='100'),
  nextToken?: string(name='NextToken', example='WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****'),
  orderType?: string(name='OrderType', example='CreateTimeDesc'),
  parentFileId?: string(name='ParentFileId', example='63636837e47e5a24a8a940218bef395c210e****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: string(name='Status', example='available'),
}

model ListCdsFilesResponseBody = {
  code?: string(name='Code', example='success'),
  count?: string(name='Count', example='0'),
  fileModels?: [ 
    {
      category?: string(name='Category', example='image'),
      contentType?: string(name='ContentType', example='application/json'),
      createTime?: string(name='CreateTime', example='2022-09-06T07:27:08Z'),
      creator?: string(name='Creator', example='user01'),
      description?: string(name='Description', example='test1'),
      downloadUrl?: string(name='DownloadUrl', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
      fileExtension?: string(name='FileExtension', example='pdf'),
      fileId?: string(name='FileId', example='637725ff2f63db8470984e6c92c692b87d52****'),
      filePath?: string(name='FilePath', example='isv/1019236948660053/temp/'),
      fileType?: string(name='FileType', example='file'),
      md5?: string(name='Md5', example='63c83ececb4e6926c51448fc5ecb****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-09-06T07:27:08Z'),
      modifier?: string(name='Modifier', example='user02'),
      name?: string(name='Name', example='fvt-appcenterp4qwa'),
      openTime?: string(name='OpenTime', example='2022-09-06T07:27:08Z'),
      openTimeStamp?: long(name='OpenTimeStamp', example='168951245231'),
      parentId?: string(name='ParentId', example='3343213ff2f63db8470984e6c92c3213dfdw****'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      sha1?: string(name='Sha1', example='EA4942AA8761213890A5C386F88E6464D2C3****'),
      size?: long(name='Size', example='102400'),
      thumbnail?: string(name='Thumbnail', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    }
  ](name='FileModels'),
  message?: string(name='Message', example='success'),
  nextToken?: string(name='NextToken', example='WyI2MzhmMjA2ZTFmZGZlZGVjZDk3OTRlNzVhZmIwMDFiZmM5NWQ3YTgwIiwibiIsIm4iLDEsLTEsMTY3MDMyNDMzNTAzMSwiNjM4ZjIwNmZjNDFkMzIwOTZmZWU0NGYxODkwY2I5ZjI0Mjg0NzM2****'),
  requestId?: string(name='RequestId', example='40D86754-20FD-53DC-A9B8-25F7FECC****'),
  success?: boolean(name='Success', example='true'),
}

model ListCdsFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdsFilesResponseBody(name='body'),
}

async function listCdsFilesWithOptions(tmpReq: ListCdsFilesRequest, runtime: Util.RuntimeOptions): ListCdsFilesResponse {
  Util.validateModel(tmpReq);
  var request = new ListCdsFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fileIds)) {
    request.fileIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileIds, 'FileIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileIdsShrink)) {
    query['FileIds'] = request.fileIdsShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.parentFileId)) {
    query['ParentFileId'] = request.parentFileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCdsFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCdsFiles(request: ListCdsFilesRequest): ListCdsFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCdsFilesWithOptions(request, runtime);
}

model ListDirectoryUsersRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the AD directory.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  filter?: string(name='Filter', description='The query string for fuzzy query. If you specify this parameter, the system returns all results that contain the string.', example='alice'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  OUPath?: string(name='OUPath', description='The organizational unit (OU) of the AD domain to which users belong. You can call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the OU.', example='example.com/Domain Controllers'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ListDirectoryUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
      endUser?: string(name='EndUser', description='The name of the user.', example='Alice'),
    }
  ](name='Users', description='The names of users corresponding to the AD directory. If the AD directory corresponds only to Administrator and Guest users, the returned value of the Users parameter is empty.'),
}

model ListDirectoryUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDirectoryUsersResponseBody(name='body'),
}

/**
  * If you use an AD directory to connect to an AD system of an enterprise, you can call this operation to obtain the information about users in the AD system.
  *
  * @param request ListDirectoryUsersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDirectoryUsersResponse
 */
async function listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: Util.RuntimeOptions): ListDirectoryUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.OUPath)) {
    query['OUPath'] = request.OUPath;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDirectoryUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you use an AD directory to connect to an AD system of an enterprise, you can call this operation to obtain the information about users in the AD system.
  *
  * @param request ListDirectoryUsersRequest
  * @return ListDirectoryUsersResponse
 */
async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoryUsersWithOptions(request, runtime);
}

model ListFilePermissionRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-346063****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListFilePermissionResponseBody = {
  filePermissions?: [
    FilePermissionMember
  ](name='FilePermissions'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilePermissionResponseBody(name='body'),
}

async function listFilePermissionWithOptions(request: ListFilePermissionRequest, runtime: Util.RuntimeOptions): ListFilePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFilePermission(request: ListFilePermissionRequest): ListFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilePermissionWithOptions(request, runtime);
}

model ListOfficeSiteOverviewRequest {
  forceRefresh?: boolean(name='ForceRefresh', description='Specifies whether to refresh the cache.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this is your first query or no next query is to be sent, skip this parameter. If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='Details about the IDs of the workspaces. You can specify 1 to 100 workspace IDs.', example='cn-hangzhou+dir-363353****'),
  queryRange?: int32(name='QueryRange', description='The beginning of the time range that you want to query.', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListOfficeSiteOverviewResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteOverviewResults?: [ 
    {
      hasExpiredEdsCount?: int32(name='HasExpiredEdsCount', description='The number of expired cloud desktops in the workspace.', example='0'),
      hasExpiredEdsCountForGroup?: int32(name='HasExpiredEdsCountForGroup', description='The number of expired cloud desktops in the desktop group.', example='0'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteStatus?: string(name='OfficeSiteStatus', description='The status of the workspace.', example='REGISTERED'),
      regionId?: string(name='RegionId', description='The region ID of the workspace.', example='cn-hangzhou'),
      runningEdsCount?: int32(name='RunningEdsCount', description='The number of running cloud desktops in the workspace.', example='1'),
      runningEdsCountForGroup?: int32(name='RunningEdsCountForGroup', description='The number of running cloud desktops in the desktop group.', example='1'),
      totalEdsCount?: int32(name='TotalEdsCount', description='The total number of cloud desktops in the workspace.', example='1'),
      totalEdsCountForGroup?: int32(name='TotalEdsCountForGroup', description='The total number of cloud desktops in the desktop group.', example='1'),
      vpcType?: string(name='VpcType', description='The virtual private cloud (VPC) type of the workspace.', example='standard'),
      willExpiredEdsCount?: int32(name='WillExpiredEdsCount', description='The number of cloud desktops that are about to expire in the workspace.', example='0'),
      willExpiredEdsCountForGroup?: int32(name='WillExpiredEdsCountForGroup', description='The number of cloud desktops that are about to expire in the desktop group.', example='0'),
    }
  ](name='OfficeSiteOverviewResults', description='Details of the workspaces.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListOfficeSiteOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOfficeSiteOverviewResponseBody(name='body'),
}

async function listOfficeSiteOverviewWithOptions(request: ListOfficeSiteOverviewRequest, runtime: Util.RuntimeOptions): ListOfficeSiteOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceRefresh)) {
    query['ForceRefresh'] = request.forceRefresh;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.queryRange)) {
    query['QueryRange'] = request.queryRange;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOfficeSiteOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOfficeSiteOverview(request: ListOfficeSiteOverviewRequest): ListOfficeSiteOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteOverviewWithOptions(request, runtime);
}

model ListOfficeSiteUsersRequest {
  filter?: string(name='Filter', description='The character string for fuzzy search.', example='*jin*'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100

Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that specifies the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  OUPath?: string(name='OUPath', description='The organizational unit (OU) in the specified AD domain.', example='example.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace. Only workspaces of the enterprise AD account type are supported.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ListOfficeSiteUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The ID of the request.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The usernames of AD users.

This parameter is empty if the AD users include only Administrator and Guest.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
  users?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the AD user.', example='Alice'),
      endUser?: string(name='EndUser', description='The username of the AD user.', example='Alice'),
    }
  ](name='Users', description='The usernames of AD users.'),
}

model ListOfficeSiteUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOfficeSiteUsersResponseBody(name='body'),
}

async function listOfficeSiteUsersWithOptions(request: ListOfficeSiteUsersRequest, runtime: Util.RuntimeOptions): ListOfficeSiteUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.OUPath)) {
    query['OUPath'] = request.OUPath;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOfficeSiteUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOfficeSiteUsers(request: ListOfficeSiteUsersRequest): ListOfficeSiteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteUsersWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource, which is the ID of the cloud desktop. Valid values of N: 1 to 50.', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to ALIYUN::GWS::INSTANCE.', example='ALIYUN::GWS::INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The list of the resource.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource, which is the ID of the cloud desktop.', example='ecd-ia2zw38bi6cm7****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid value: ALIYUN::GWS::INSTANCE.', example='ALIYUN::GWS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The tag key of the resource.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value of the resource.', example='TestValue'),
    }
  ](name='TagResources', description='The resources and their tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * ## Description
  * You must specify at least one of the ResourceId.N, Tag.N.Key, and Tag.N.Value parameters in the request to specify the query objects.
  *
  * @param request ListTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You must specify at least one of the ResourceId.N, Tag.N.Key, and Tag.N.Value parameters in the request to specify the query objects.
  *
  * @param request ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserAdOrganizationUnitsRequest {
  filter?: string(name='Filter', description='The string that you enter for fuzzy search.', example='develop'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500. Default value: 500.', example='100'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the NextToken value that is returned from the last call.', example='CAAAAA=='),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-485361****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ListUserAdOrganizationUnitsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='CAAAAA=='),
  OUNames?: [ 
    {
      displayOUName?: string(name='DisplayOUName', description='The display name of the OU.', example='wuying_computers'),
      OUName?: string(name='OUName', description='The name of the OU of the AD domain controller.', example='example.com/wuying_computers'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-485361****'),
    }
  ](name='OUNames', description='The names of the OUs in the AD domain.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListUserAdOrganizationUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserAdOrganizationUnitsResponseBody(name='body'),
}

async function listUserAdOrganizationUnitsWithOptions(request: ListUserAdOrganizationUnitsRequest, runtime: Util.RuntimeOptions): ListUserAdOrganizationUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserAdOrganizationUnits',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserAdOrganizationUnits(request: ListUserAdOrganizationUnitsRequest): ListUserAdOrganizationUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserAdOrganizationUnitsWithOptions(request, runtime);
}

model LockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound by AD users.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model LockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockVirtualMFADeviceResponseBody(name='body'),
}

/**
  * ## Description
  * After a virtual MFA device is locked, its status changes to LOCKED. The AD user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](~~206212~~) operation to unlock the device.
  *
  * @param request LockVirtualMFADeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return LockVirtualMFADeviceResponse
 */
async function lockVirtualMFADeviceWithOptions(request: LockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): LockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * After a virtual MFA device is locked, its status changes to LOCKED. The AD user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](~~206212~~) operation to unlock the device.
  *
  * @param request LockVirtualMFADeviceRequest
  * @return LockVirtualMFADeviceResponse
 */
async function lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): LockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockVirtualMFADeviceWithOptions(request, runtime);
}

model ModifyADConnectorDirectoryRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.', example='cnshsv21hmcdc01'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  directoryName?: string(name='DirectoryName', description='The name of the AD directory.', example='testDirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress', description='Details of the DNS addresses that correspond to the enterprise AD system. You can specify only one IP address. Make sure that the specified IP address can be accessed over the network that the selected vSwitch uses.', example='127.0.**.**'),
  domainName?: string(name='DomainName', description='The domain name. The domain name must be 2 to 255 characters in length and consist of two parts. Example: example.com. You can register each domain name only once.', example='example.com'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The username can be up to 64 characters in length.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.', example='sAMAccountName'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA). Default value: false.\\
If you enable MFA, all AD users in the AD directory must enter the password and the dynamic verification code generated by the MFA device when they connect to a cloud desktop.

> The first time you log on to the Alibaba Cloud Workspace client as an end user, you must bind an MFA device.', example='false'),
  OUName?: string(name='OUName', description='The name of the organizational unit (OU) in the AD domain. You can call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the name of the OU.', example='example.com/Domain Controllers'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS addresses of the enterprise AD subdomain. If you specify SubDomainName but not this parameter, the DNS address of the subdomain is considered to be the same as that of the parent domain.', example='127.0.**.**'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the enterprise AD subdomain.', example='childexample.com'),
}

model ModifyADConnectorDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyADConnectorDirectoryResponseBody(name='body'),
}

/**
  * This operation modifies only the domain name and Domain Name System (DNS) parameters of AD directories in the ERROR or REGISTERING state. DNS parameters include DomainName, SubDomainName, DnsAddress.N, and SubDomainDnsAddress.
  *
  * @param request ModifyADConnectorDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyADConnectorDirectoryResponse
 */
async function modifyADConnectorDirectoryWithOptions(request: ModifyADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): ModifyADConnectorDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyADConnectorDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation modifies only the domain name and Domain Name System (DNS) parameters of AD directories in the ERROR or REGISTERING state. DNS parameters include DomainName, SubDomainName, DnsAddress.N, and SubDomainDnsAddress.
  *
  * @param request ModifyADConnectorDirectoryRequest
  * @return ModifyADConnectorDirectoryResponse
 */
async function modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): ModifyADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorDirectoryWithOptions(request, runtime);
}

model ModifyADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.', example='beijing-ad01'),
  dnsAddress?: [ string ](name='DnsAddress', description='Details of the IP addresses of the Domain Name System (DNS) servers that correspond to the enterprise AD system. You can specify only one IP address.', example='127.0.*.*'),
  domainName?: string(name='DomainName', description='The domain name of the enterprise AD system. You can register each domain name only once.', example='example.com'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The username can be up to 64 characters in length.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

> Specify the value of the sAMAccountName parameter instead of the value of the userPrincipalName parameter as the username.', example='Administrator'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA).\\
Default value: false.', example='false'),
  OUName?: string(name='OUName', description='The name of the organizational unit (OU) in the AD domain. You can call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the name of the OU.', example='oldad.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace. The name must be 2 to 255 characters in length. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the enterprise AD subdomain. You can specify only one IP address. If you specify a value for the `SubDomainName` parameter but you do not specify a value for this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='127.0.*.*'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the enterprise AD subdomain.', example='childexample.com'),
}

model ModifyADConnectorOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyADConnectorOfficeSiteResponseBody(name='body'),
}

/**
  * This operation modifies the domain name and DNS parameters of workspaces that are of enterprise AD account type and in the Error or Registering state. DNS parameters include DomainName, SubDomainName, DnsAddress.N, and SubDomainDnsAddress.N.
  *
  * @param request ModifyADConnectorOfficeSiteRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyADConnectorOfficeSiteResponse
 */
async function modifyADConnectorOfficeSiteWithOptions(request: ModifyADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): ModifyADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyADConnectorOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation modifies the domain name and DNS parameters of workspaces that are of enterprise AD account type and in the Error or Registering state. DNS parameters include DomainName, SubDomainName, DnsAddress.N, and SubDomainDnsAddress.N.
  *
  * @param request ModifyADConnectorOfficeSiteRequest
  * @return ModifyADConnectorOfficeSiteResponse
 */
async function modifyADConnectorOfficeSite(request: ModifyADConnectorOfficeSiteRequest): ModifyADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorOfficeSiteWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 20 16 ? * 1,2,3,4,5,6,7'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-itcmrhqt01tdo****'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter but cannot start with [http:// or https://. Default value: null.](http://https://。、（:）、（\\_）（-）。：。)', example='Automatic system snapshot'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created.', example='cn-hangzhou'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of automatic snapshots. Unit: days. Default value: 1. Valid values:

*   1: The automatic snapshots are permanently retained.
*   1 to 65536: The automatic snapshots are retained for the specified number of days.', example='5'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyBundleRequest {
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-2g65ljy4291vl****'),
  bundleName?: string(name='BundleName', description='The name of the new desktop template.', example='newName'),
  description?: string(name='Description', description='The description of the new desktop template.', example='newDescription'),
  imageId?: string(name='ImageId', description='The ID of the new image. The new image must meet the following requirements:

*   The new image must be in the Available state.
*   The operating system of the new image must be the same as that of the original image.
*   The required disk size for the new image cannot be greater than that for the original image.
*   The GPU type of the new image must be the same as that of the original image.', example='m-aea3oaww001np****'),
  language?: string(name='Language', description='The language of the operating system. This parameter is available only for system images. Valid values:

*   zh-CN: Simplified Chinese
*   zh-HK: Traditional Chinese (Hong Kong)
*   en-US: English', example='zh-CN'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyBundleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyBundleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBundleResponseBody(name='body'),
}

/**
  * ## Description
  * Only custom desktop templates can be modified.
  *
  * @param request ModifyBundleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyBundleResponse
 */
async function modifyBundleWithOptions(request: ModifyBundleRequest, runtime: Util.RuntimeOptions): ModifyBundleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleName)) {
    query['BundleName'] = request.bundleName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBundle',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * Only custom desktop templates can be modified.
  *
  * @param request ModifyBundleRequest
  * @return ModifyBundleResponse
 */
async function modifyBundle(request: ModifyBundleRequest): ModifyBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBundleWithOptions(request, runtime);
}

model ModifyCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-64326*****'),
  conflictPolicy?: string(name='ConflictPolicy', example='ignore'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  fileName?: string(name='FileName', example='test.txt'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyCdsFileResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdsFileResponseBody(name='body'),
}

async function modifyCdsFileWithOptions(request: ModifyCdsFileRequest, runtime: Util.RuntimeOptions): ModifyCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCdsFile(request: ModifyCdsFileRequest): ModifyCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdsFileWithOptions(request, runtime);
}

model ModifyCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', example='cn-shanghai+cds-135515****'),
  description?: string(name='Description', example='testDescription'),
  disableDownload?: boolean(name='DisableDownload', example='false'),
  disablePreview?: boolean(name='DisablePreview', example='false'),
  disableSave?: boolean(name='DisableSave', example='false'),
  downloadCount?: long(name='DownloadCount', example='0'),
  downloadLimit?: long(name='DownloadLimit', example='0'),
  expiration?: string(name='Expiration', example='2022-07-20T06:30:22.365Z'),
  previewCount?: long(name='PreviewCount', example='0'),
  previewLimit?: long(name='PreviewLimit', example='100'),
  reportCount?: long(name='ReportCount', example='0'),
  saveCount?: long(name='SaveCount', example='0'),
  saveLimit?: long(name='SaveLimit', example='100'),
  shareId?: string(name='ShareId', example='7JQX1Fs****'),
  shareName?: string(name='ShareName'),
  sharePwd?: string(name='SharePwd', example='12345678'),
  status?: string(name='Status', example='enabled'),
  videoPreviewCount?: long(name='VideoPreviewCount', example='0'),
}

model ModifyCdsFileShareLinkResponseBody = {
  code?: string(name='Code', example='success'),
  data?: CdsFileShareLinkModel(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdsFileShareLinkResponseBody(name='body'),
}

async function modifyCdsFileShareLinkWithOptions(request: ModifyCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): ModifyCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    query['DisableDownload'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    query['DisablePreview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    query['DisableSave'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadCount)) {
    query['DownloadCount'] = request.downloadCount;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    query['DownloadLimit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.previewCount)) {
    query['PreviewCount'] = request.previewCount;
  }
  if (!Util.isUnset(request.previewLimit)) {
    query['PreviewLimit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.reportCount)) {
    query['ReportCount'] = request.reportCount;
  }
  if (!Util.isUnset(request.saveCount)) {
    query['SaveCount'] = request.saveCount;
  }
  if (!Util.isUnset(request.saveLimit)) {
    query['SaveLimit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    query['SharePwd'] = request.sharePwd;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.videoPreviewCount)) {
    query['VideoPreviewCount'] = request.videoPreviewCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCdsFileShareLink(request: ModifyCdsFileShareLinkRequest): ModifyCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdsFileShareLinkWithOptions(request, runtime);
}

model ModifyCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-shanghai+cds-135515****'),
  groupId?: [ string ](name='GroupId', description='The ID of the team.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the team space. Default value: enabled. Valid values:

*   enabled
*   disabled', example='disabled'),
  totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='32212254720'),
}

model ModifyCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The message that is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. true: The call was successful. false: The call failed.', example='true'),
}

model ModifyCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudDriveGroupsResponseBody(name='body'),
}

async function modifyCloudDriveGroupsWithOptions(request: ModifyCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): ModifyCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.totalSize)) {
    query['TotalSize'] = request.totalSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudDriveGroups(request: ModifyCloudDriveGroupsRequest): ModifyCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDriveGroupsWithOptions(request, runtime);
}

model ModifyCloudDrivePermissionRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-60911*****'),
  downloadEndUserIds?: [ string ](name='DownloadEndUserIds'),
  downloadUploadEndUserIds?: [ string ](name='DownloadUploadEndUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyCloudDrivePermissionResponseBody = {
  requestId?: string(name='RequestId', example='9197824D-AD4B-571F-94BB-C2E6D5855AB6'),
}

model ModifyCloudDrivePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudDrivePermissionResponseBody(name='body'),
}

async function modifyCloudDrivePermissionWithOptions(request: ModifyCloudDrivePermissionRequest, runtime: Util.RuntimeOptions): ModifyCloudDrivePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.downloadEndUserIds)) {
    query['DownloadEndUserIds'] = request.downloadEndUserIds;
  }
  if (!Util.isUnset(request.downloadUploadEndUserIds)) {
    query['DownloadUploadEndUserIds'] = request.downloadUploadEndUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudDrivePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudDrivePermission(request: ModifyCloudDrivePermissionRequest): ModifyCloudDrivePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDrivePermissionWithOptions(request, runtime);
}

model ModifyCustomizedListHeadersRequest {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', description='The display type of the header.', example='display'),
      headerKey?: string(name='HeaderKey', description='The key of the header.', example='pay_type'),
    }
  ](name='Headers', description='The list of headers.'),
  listType?: string(name='ListType', description='The type of the list.', example='desktop'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyCustomizedListHeadersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyCustomizedListHeadersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomizedListHeadersResponseBody(name='body'),
}

async function modifyCustomizedListHeadersWithOptions(request: ModifyCustomizedListHeadersRequest, runtime: Util.RuntimeOptions): ModifyCustomizedListHeadersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.headers)) {
    query['Headers'] = request.headers;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomizedListHeaders',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomizedListHeaders(request: ModifyCustomizedListHeadersRequest): ModifyCustomizedListHeadersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomizedListHeadersWithOptions(request, runtime);
}

model ModifyDesktopChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment if you specify subscription as the new billing method for the cloud desktop.', example='false'),
  chargeType?: string(name='ChargeType', description='The new billing method that you want to use for the desktop group.', example='PrePaid'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 20 IDs.', example='ecd-gx2x1dhsmucyy****'),
  period?: int32(name='Period', description='The subscription duration if you specify subscription as the new billing method for the cloud desktop. The unit of the value is specified by the `PeriodUnit` parameter. This parameter takes effect only when the `ChargeType` parameter is set to `PrePaid`.

*   If the `PeriodUnit` parameter is set to `Week`, the valid value of the Period parameter is 1.
*   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
*   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration if you specify subscription as the new billing method for the cloud desktop.', example='Month'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='500038360030606'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ModifyDesktopChargeTypeResponseBody = {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the desktop groups. If multiple cloud desktops are created at a time, multiple cloud desktop IDs are returned.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopChargeTypeResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing methods of cloud desktops in Elastic Desktop Service (EDS). For more information, see [Billing overview](~~188395~~).
  * *   Before you call this operation, make sure that the cloud desktop that you want to manage is in the Running or Stopped state and no overdue payments of the cloud desktop are generated.
  * *   After the order payment is completed, the system starts to change the billing method of the cloud desktop. During the change, you cannot perform operations, such as starting or stopping the cloud desktop, and changing configurations of the cloud desktop.<props="china"> 
  * After you change the billing method of the cloud desktop from subscription to pay-as-you-go, you may get a refund. For more information, see [Change a subscription cloud desktop to a pay-as-you-go one](https://help.aliyun.com/document_detail/439964.html).
  * </props>
  *
  * @param request ModifyDesktopChargeTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopChargeTypeResponse
 */
async function modifyDesktopChargeTypeWithOptions(request: ModifyDesktopChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDesktopChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopChargeType',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing methods of cloud desktops in Elastic Desktop Service (EDS). For more information, see [Billing overview](~~188395~~).
  * *   Before you call this operation, make sure that the cloud desktop that you want to manage is in the Running or Stopped state and no overdue payments of the cloud desktop are generated.
  * *   After the order payment is completed, the system starts to change the billing method of the cloud desktop. During the change, you cannot perform operations, such as starting or stopping the cloud desktop, and changing configurations of the cloud desktop.<props="china"> 
  * After you change the billing method of the cloud desktop from subscription to pay-as-you-go, you may get a refund. For more information, see [Change a subscription cloud desktop to a pay-as-you-go one](https://help.aliyun.com/document_detail/439964.html).
  * </props>
  *
  * @param request ModifyDesktopChargeTypeRequest
  * @return ModifyDesktopChargeTypeResponse
 */
async function modifyDesktopChargeType(request: ModifyDesktopChargeTypeRequest): ModifyDesktopChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopChargeTypeWithOptions(request, runtime);
}

model ModifyDesktopGroupRequest {
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values:

*   0: does not create cloud desktops in the desktop group.
*   1: creates cloud desktops in the desktop group.', example='1'),
  allowBufferCount?: int32(name='AllowBufferCount', description='Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not reserve cloud desktops. N: reserves N cloud desktops. Valid values of N: 1 to the value of the MaxDesktopsCount parameter.', example='1'),
  bindAmount?: long(name='BindAmount', description='The maximum number of sessions per cloud desktop in the multi-session desktop group.', example='1'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of cloud desktops to purchase. Valid values: 0 to 200.', example='5'),
  classify?: string(name='Classify', description='The classification of the cloud desktop pool.', example='teacher'),
  comments?: string(name='Comments', description='The remarks on the desktop group.', example='test'),
  connectDuration?: long(name='ConnectDuration', description='The maximum duration of the session. Unit: milliseconds.', example='600000'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='desktopGroupName1'),
  disableSessionConfig?: boolean(name='DisableSessionConfig', description='Specifies whether to disable session management.', example='true'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the Apsara File Storage NAS (NAS) file system.', example='04f314****'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum duration of the idle session. Unit: milliseconds.', example='120000'),
  imageId?: string(name='ImageId', description='The IDs of the images.', example='desktopimage-windows-server-2016-64-ch'),
  keepDuration?: long(name='KeepDuration', description='The retention period of cloud desktops in the desktop group after end users disconnect from the desktops. Unit: ms.', example='1000'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.', example='10'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.', example='1'),
  ownBundleId?: string(name='OwnBundleId', description='The ID of the cloud desktop template.', example='b-7t275tpgjueeu****'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy.', example='pg-53iyi2aar0nd6****'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of policy groups.'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable data roaming.', example='false'),
  ratioThreshold?: float(name='RatioThreshold', description='The session usage threshold for the multi-session desktop group that has an auto scaling policy in effect.', example='0.5'),
  regionId?: string(name='RegionId', description='The region ID of the desktop group.', example='cn-hangzhou'),
  resetType?: long(name='ResetType', description='Specifies which type of disk to reset for cloud desktops in the desktop group.', example='0'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy group.

>  This parameter is unavailable.', example='s-kakowkdl****'),
  stopDuration?: long(name='StopDuration', description='The duration before an idle cloud desktop is stopped. Unit: milliseconds.', example='180000'),
}

model ModifyDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopGroupResponseBody(name='body'),
}

/**
  * After you create a desktop group, the system creates a specific number of cloud desktops based on the scaling policy that you configure for the desktop group and the number of end users who request to connect to the cloud desktops. Cloud desktops in a desktop group are created by using the same desktop template and security policy. You can modify the configurations of the desktop group in different scenarios to manage cloud desktops in a centralized manner.
  * *   By default, a desktop group has the same name as all cloud desktops in the group. You can modify the desktop group name, which is specified by the DesktopGroupName parameter, to distinguish the desktop group from the cloud desktops.
  * *   If the number of vCPUs and memory size of the cloud desktop cannot meet your business requirements in high performance scenarios, you can change the desktop template that is used to create the cloud desktop to a desktop template (OwnBundleId) that has higher specifications.
  * *   If a security policy that is associated with the desktop group cannot meet your requirements on security, you can change the policy to another policy (PolicyGroupId) that provides higher security.
  * *   If the number of cloud desktops in the desktop group is insufficient to meet the business requirements of end users, you can modify the parameter settings in the scaling policy. The parameters include MinDesktopsCount, MaxDesktopsCount, and AllowBufferCount.
  *
  * @param request ModifyDesktopGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopGroupResponse
 */
async function modifyDesktopGroupWithOptions(request: ModifyDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowAutoSetup)) {
    query['AllowAutoSetup'] = request.allowAutoSetup;
  }
  if (!Util.isUnset(request.allowBufferCount)) {
    query['AllowBufferCount'] = request.allowBufferCount;
  }
  if (!Util.isUnset(request.bindAmount)) {
    query['BindAmount'] = request.bindAmount;
  }
  if (!Util.isUnset(request.buyDesktopsCount)) {
    query['BuyDesktopsCount'] = request.buyDesktopsCount;
  }
  if (!Util.isUnset(request.classify)) {
    query['Classify'] = request.classify;
  }
  if (!Util.isUnset(request.comments)) {
    query['Comments'] = request.comments;
  }
  if (!Util.isUnset(request.connectDuration)) {
    query['ConnectDuration'] = request.connectDuration;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.disableSessionConfig)) {
    query['DisableSessionConfig'] = request.disableSessionConfig;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.idleDisconnectDuration)) {
    query['IdleDisconnectDuration'] = request.idleDisconnectDuration;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.keepDuration)) {
    query['KeepDuration'] = request.keepDuration;
  }
  if (!Util.isUnset(request.loadPolicy)) {
    query['LoadPolicy'] = request.loadPolicy;
  }
  if (!Util.isUnset(request.maxDesktopsCount)) {
    query['MaxDesktopsCount'] = request.maxDesktopsCount;
  }
  if (!Util.isUnset(request.minDesktopsCount)) {
    query['MinDesktopsCount'] = request.minDesktopsCount;
  }
  if (!Util.isUnset(request.ownBundleId)) {
    query['OwnBundleId'] = request.ownBundleId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.policyGroupIds)) {
    query['PolicyGroupIds'] = request.policyGroupIds;
  }
  if (!Util.isUnset(request.profileFollowSwitch)) {
    query['ProfileFollowSwitch'] = request.profileFollowSwitch;
  }
  if (!Util.isUnset(request.ratioThreshold)) {
    query['RatioThreshold'] = request.ratioThreshold;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.scaleStrategyId)) {
    query['ScaleStrategyId'] = request.scaleStrategyId;
  }
  if (!Util.isUnset(request.stopDuration)) {
    query['StopDuration'] = request.stopDuration;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you create a desktop group, the system creates a specific number of cloud desktops based on the scaling policy that you configure for the desktop group and the number of end users who request to connect to the cloud desktops. Cloud desktops in a desktop group are created by using the same desktop template and security policy. You can modify the configurations of the desktop group in different scenarios to manage cloud desktops in a centralized manner.
  * *   By default, a desktop group has the same name as all cloud desktops in the group. You can modify the desktop group name, which is specified by the DesktopGroupName parameter, to distinguish the desktop group from the cloud desktops.
  * *   If the number of vCPUs and memory size of the cloud desktop cannot meet your business requirements in high performance scenarios, you can change the desktop template that is used to create the cloud desktop to a desktop template (OwnBundleId) that has higher specifications.
  * *   If a security policy that is associated with the desktop group cannot meet your requirements on security, you can change the policy to another policy (PolicyGroupId) that provides higher security.
  * *   If the number of cloud desktops in the desktop group is insufficient to meet the business requirements of end users, you can modify the parameter settings in the scaling policy. The parameters include MinDesktopsCount, MaxDesktopsCount, and AllowBufferCount.
  *
  * @param request ModifyDesktopGroupRequest
  * @return ModifyDesktopGroupResponse
 */
async function modifyDesktopGroup(request: ModifyDesktopGroupRequest): ModifyDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopGroupWithOptions(request, runtime);
}

model ModifyDesktopHostNameRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  newHostName?: string(name='NewHostName', description='The new hostname of the cloud desktop. The hostname must meet the following requirements:

*   Must be 2 to 15 characters in length.
*   Contain letters, digits, and hyphens (-). It cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.', example='NewName'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyDesktopHostNameResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopHostNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopHostNameResponseBody(name='body'),
}

/**
  * ## Description
  * You can only change the hostname of a Windows cloud desktop in the workspace of the enterprise Active Directory (AD) account type. After the hostname is changed, the cloud desktop is recreated.
  *
  * @param request ModifyDesktopHostNameRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopHostNameResponse
 */
async function modifyDesktopHostNameWithOptions(request: ModifyDesktopHostNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopHostNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.newHostName)) {
    query['NewHostName'] = request.newHostName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopHostName',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can only change the hostname of a Windows cloud desktop in the workspace of the enterprise Active Directory (AD) account type. After the hostname is changed, the cloud desktop is recreated.
  *
  * @param request ModifyDesktopHostNameRequest
  * @return ModifyDesktopHostNameResponse
 */
async function modifyDesktopHostName(request: ModifyDesktopHostNameRequest): ModifyDesktopHostNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopHostNameWithOptions(request, runtime);
}

model ModifyDesktopNameRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  newDesktopName?: string(name='NewDesktopName', description='The new name of the cloud desktop. The name of the cloud desktop must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name must start with a letter and cannot start with `http://` or `https://`.
*   The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyDesktopNameResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopNameResponseBody(name='body'),
}

async function modifyDesktopNameWithOptions(request: ModifyDesktopNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.newDesktopName)) {
    query['NewDesktopName'] = request.newDesktopName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopName',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDesktopName(request: ModifyDesktopNameRequest): ModifyDesktopNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopNameWithOptions(request, runtime);
}

model ModifyDesktopSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: does not automatically complete the payment. In this case, an order is generated, but no payment is made. You can log on to the EDS console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='false'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-4543qyik164a4****'),
  desktopType?: string(name='DesktopType', description='The new cloud desktop type. You can call the [DescribeDesktopTypes](~~188882~~) operation to query the IDs of supported cloud desktop types.', example='eds.general.2c8g'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='500033080110596'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The size of the new system disk. Unit: GiB. Valid values: 80 to 500 GiB. The value must be a multiple of 10.', example='80'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The performance level (PL) of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

Default value: PL0.', example='PL0'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The size of the new data disk. Unit: GiB.

*   The data disk size of a non-Graphics cloud desktop can be within the range of 20 to 1,020 GiB. The value must be a multiple of 10.
*   The data disk size of the Graphics cloud desktop can be within the range of 40 to 1,020 GiB. The value must be a multiple of 10.', example='100'),
}

model ModifyDesktopSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopSpecResponseBody(name='body'),
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, take note of the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides. For more information, see [Cloud desktop types](~~188609~~).
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. You must take note of the following items:
  *     *   Each desktop type contains different desktop specifications, such as vCPUs, memory, and GPUs. When you change the desktop configurations, you can only change the desktop type from one to another. However, you cannot change only one of the specifications, such as vCPUs, memory, and GPUs.
  *     *   You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  *     *   You can only increase the sizes of system and data disks.
  *     *   If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or pay for the price difference.
  *     *   If you want to change the configurations of your cloud desktop for multiple times, we recommend that you wait at least 5 minutes the next time you change the configurations of the same cloud desktop.
  *     *   The cloud desktop for which you want to change configurations must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDesktopSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopSpecResponse
 */
async function modifyDesktopSpecWithOptions(request: ModifyDesktopSpecRequest, runtime: Util.RuntimeOptions): ModifyDesktopSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskSizeGib)) {
    query['RootDiskSizeGib'] = request.rootDiskSizeGib;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskSizeGib)) {
    query['UserDiskSizeGib'] = request.userDiskSizeGib;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopSpec',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, take note of the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides. For more information, see [Cloud desktop types](~~188609~~).
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. You must take note of the following items:
  *     *   Each desktop type contains different desktop specifications, such as vCPUs, memory, and GPUs. When you change the desktop configurations, you can only change the desktop type from one to another. However, you cannot change only one of the specifications, such as vCPUs, memory, and GPUs.
  *     *   You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  *     *   You can only increase the sizes of system and data disks.
  *     *   If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or pay for the price difference.
  *     *   If you want to change the configurations of your cloud desktop for multiple times, we recommend that you wait at least 5 minutes the next time you change the configurations of the same cloud desktop.
  *     *   The cloud desktop for which you want to change configurations must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDesktopSpecRequest
  * @return ModifyDesktopSpecResponse
 */
async function modifyDesktopSpec(request: ModifyDesktopSpecRequest): ModifyDesktopSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopSpecWithOptions(request, runtime);
}

model ModifyDesktopsPolicyGroupRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify one or more cloud desktops. The value is a JSON array.', example='ecd-ia2zw38bi6cm7****'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-gx2x1dhsmthe9****'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of the policies.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyDesktopsPolicyGroupResponseBody = {
  modifyResults?: [ 
    {
      code?: string(name='Code', description='The result of the modification. A value of success indicates that the policy is modified. If the policy failed to be modified, an error message is returned.', example='success'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
      message?: string(name='Message', description='The error message. This parameter is not returned if the value of Code is `success`.', example='The specified param DesktopId ecd-ia2zw38bi6cm7**** is not found.'),
    }
  ](name='ModifyResults', description='The modification results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopsPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopsPolicyGroupResponseBody(name='body'),
}

/**
  * The cloud desktops whose policy you want to modify must be in the Running state.
  *
  * @param request ModifyDesktopsPolicyGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopsPolicyGroupResponse
 */
async function modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopsPolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.policyGroupIds)) {
    query['PolicyGroupIds'] = request.policyGroupIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopsPolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktops whose policy you want to modify must be in the Running state.
  *
  * @param request ModifyDesktopsPolicyGroupRequest
  * @return ModifyDesktopsPolicyGroupResponse
 */
async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopsPolicyGroupWithOptions(request, runtime);
}

model ModifyDiskSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: does not complete the payment. In this case, an order is generated, but no payment is made. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='false'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-2yjhqxo1monxxxxxx'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion activity. You can call the DescribePrice operation to obtain the IDs of matching sales promotion activities.', example='youhuiquan_promotion_option_id_for_blank'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL1'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL1'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.', example='219861020660568'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F89BBB13-8B3B-5C8A-A700-EEFDC17B8227'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
  * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
  * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
  * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
  * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
  * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDiskSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskPerformanceLevel)) {
    query['RootDiskPerformanceLevel'] = request.rootDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskSpec',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
  * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
  * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
  * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
  * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
  * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDiskSpecRequest
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyEntitlementRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
  endUserId?: [ string ](name='EndUserId', description='The usernames of users. You can specify up to 100 usernames.', example='alice'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyEntitlementResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyEntitlementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEntitlementResponseBody(name='body'),
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request ModifyEntitlementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyEntitlementResponse
 */
async function modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: Util.RuntimeOptions): ModifyEntitlementResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEntitlement',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request ModifyEntitlementRequest
  * @return ModifyEntitlementResponse
 */
async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEntitlementWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  description?: string(name='Description', description='The description of the image.', example='testDescription'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-2g65ljy3ynrdq****'),
  name?: string(name='Name', description='The name of the image.', example='testName'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

/**
  * ## Description
  * You can call this operation to modify the properties of only custom images in the Available (Available) state.
  *
  * @param request ModifyImageAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImageAttributeResponse
 */
async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageAttribute',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can call this operation to modify the properties of only custom images in the Available (Available) state.
  *
  * @param request ModifyImageAttributeRequest
  * @return ModifyImageAttributeResponse
 */
async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImagePermissionRequest {
  addAccount?: [ long ](name='AddAccount', description='The IDs of the recipient Alibaba Cloud accounts. You can share an image with up to 50 Alibaba Cloud accounts.'),
  imageId?: string(name='ImageId', description='The ID of the image that you want to share.', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  removeAccount?: [ long ](name='RemoveAccount', description='The IDs of the recipient Alibaba Cloud accounts from which you want to unshare the image. You can unshare an image from up to 50 Alibaba Cloud accounts.'),
}

model ModifyImagePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImagePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImagePermissionResponseBody(name='body'),
}

/**
  * ### Security of shared images
  * Elastic Desktop Service (EDS) does not ensure the integrity and security of shared images on cloud desktops. Before you use shared images, make sure that the images come from trusted accounts. You must assume all risks.
  * ### Quotas and billing
  * *   Shared images do not count against the image quotas of the recipient Alibaba Cloud accounts.
  * *   Alibaba Cloud accounts that share images are not charged if the recipient accounts use the shared images to create cloud desktops.
  * *   There are no additional charges for sharing an image.
  * ### Supported sharing behavior
  * *   You can share custom images with other Alibaba Cloud accounts.
  * *   You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
  * ### Unsupported sharing behavior
  * *   You cannot share images that are shared by other Alibaba Cloud accounts.
  * *   You cannot share encrypted images.
  * *   You cannot share images across regions. If you want to share images across regions, you can call the CopyImage operation to copy the images from the source region to the destination region.
  *
  * @param request ModifyImagePermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImagePermissionResponse
 */
async function modifyImagePermissionWithOptions(request: ModifyImagePermissionRequest, runtime: Util.RuntimeOptions): ModifyImagePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addAccount)) {
    query['AddAccount'] = request.addAccount;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeAccount)) {
    query['RemoveAccount'] = request.removeAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImagePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Security of shared images
  * Elastic Desktop Service (EDS) does not ensure the integrity and security of shared images on cloud desktops. Before you use shared images, make sure that the images come from trusted accounts. You must assume all risks.
  * ### Quotas and billing
  * *   Shared images do not count against the image quotas of the recipient Alibaba Cloud accounts.
  * *   Alibaba Cloud accounts that share images are not charged if the recipient accounts use the shared images to create cloud desktops.
  * *   There are no additional charges for sharing an image.
  * ### Supported sharing behavior
  * *   You can share custom images with other Alibaba Cloud accounts.
  * *   You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
  * ### Unsupported sharing behavior
  * *   You cannot share images that are shared by other Alibaba Cloud accounts.
  * *   You cannot share encrypted images.
  * *   You cannot share images across regions. If you want to share images across regions, you can call the CopyImage operation to copy the images from the source region to the destination region.
  *
  * @param request ModifyImagePermissionRequest
  * @return ModifyImagePermissionResponse
 */
async function modifyImagePermission(request: ModifyImagePermissionRequest): ModifyImagePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImagePermissionWithOptions(request, runtime);
}

model ModifyNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='04f314****'),
  mountTargetDomain?: string(name='MountTargetDomain', description='The domain name of the mount target.', example='0bf744****-xo***.cn-hangzhou.nas.aliyuncs.com'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * ## Description
  * When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is accidentally deleted, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](~~62621~~) operation to create a mount target.
  *
  * @param request ModifyNASDefaultMountTargetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyNASDefaultMountTargetResponse
 */
async function modifyNASDefaultMountTargetWithOptions(request: ModifyNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ModifyNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNASDefaultMountTarget',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is accidentally deleted, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](~~62621~~) operation to create a mount target.
  *
  * @param request ModifyNASDefaultMountTargetRequest
  * @return ModifyNASDefaultMountTargetResponse
 */
async function modifyNASDefaultMountTarget(request: ModifyNASDefaultMountTargetRequest): ModifyNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNASDefaultMountTargetWithOptions(request, runtime);
}

model ModifyNetworkPackageBandwidthRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   `true`: enables automatic payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: disables automatic payment. In this case, an order is generated, but no payment is complete. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='true'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Internet access package. Unit: Mbit/s. Valid values: 10 to 1000.', example='10'),
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-cxj99qb8d34vo****'),
  promotionId?: string(name='PromotionId', description='The ID of the promotion. You can call the `GetResourcePrice` operation to obtain the ID of the promotion.', example='500033080110596'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ModifyNetworkPackageBandwidthResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='214552063030752'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkPackageBandwidthResponseBody(name='body'),
}

async function modifyNetworkPackageBandwidthWithOptions(request: ModifyNetworkPackageBandwidthRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkPackageBandwidth',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNetworkPackageBandwidth(request: ModifyNetworkPackageBandwidthRequest): ModifyNetworkPackageBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageBandwidthWithOptions(request, runtime);
}

model ModifyNetworkPackageEnabledRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to restore or disable Internet access for the cloud desktop.

*   true: restores Internet access.
*   false: disables Internet access.', example='true'),
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-cfedn7r2pe48g****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyNetworkPackageEnabledResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkPackageEnabledResponseBody(name='body'),
}

/**
  * ## Description
  * If you want to temporarily disable Internet access for a cloud desktop, you can disable the Internet access package. You can restore the package based on your requirements.
  *
  * @param request ModifyNetworkPackageEnabledRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyNetworkPackageEnabledResponse
 */
async function modifyNetworkPackageEnabledWithOptions(request: ModifyNetworkPackageEnabledRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkPackageEnabled',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * If you want to temporarily disable Internet access for a cloud desktop, you can disable the Internet access package. You can restore the package based on your requirements.
  *
  * @param request ModifyNetworkPackageEnabledRequest
  * @return ModifyNetworkPackageEnabledResponse
 */
async function modifyNetworkPackageEnabled(request: ModifyNetworkPackageEnabledRequest): ModifyNetworkPackageEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageEnabledWithOptions(request, runtime);
}

model ModifyOfficeSiteAttributeRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method that you want to use to connect the Alibaba Cloud Workspace client to cloud desktops. Valid values:

*   INTERNET: connects the client to cloud desktops only over the Internet.
*   VPC: connects the client to cloud desktops only over a VPC.
*   Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method based on your business requirements when you connect to a cloud desktop from the client.

Default value: INTERNET.

> VPC connections are established by using Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='INTERNET'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='This parameter is only applicable to a workspace of the convenience account type, which indicates whether to require two-factor verification when you log on to the client. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the verification code is correctly entered.', example='false'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='This parameter is only applicable to a workspace of the convenience account type, which indicates whether to require device verification when you log on to the client. For a workspace of the enterprise Active Directory (AD) account type, the value of this parameter is empty.', example='false'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-882398****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace. We recommend that you specify a name that is easy to identify. The name must be 2 to 255 characters in length. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter but cannot start with http:// or https://.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyOfficeSiteAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteAttributeResponseBody(name='body'),
}

async function modifyOfficeSiteAttributeWithOptions(request: ModifyOfficeSiteAttributeRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.needVerifyLoginRisk)) {
    query['NeedVerifyLoginRisk'] = request.needVerifyLoginRisk;
  }
  if (!Util.isUnset(request.needVerifyZeroDevice)) {
    query['NeedVerifyZeroDevice'] = request.needVerifyZeroDevice;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteAttribute',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteAttribute(request: ModifyOfficeSiteAttributeRequest): ModifyOfficeSiteAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteAttributeWithOptions(request, runtime);
}

model ModifyOfficeSiteCrossDesktopAccessRequest {
  enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Specifies whether to enable cross-desktop access for a workspace.

*   true: enables cross-desktop access.
*   false: disables cross-desktop access.', example='false'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-068266****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyOfficeSiteCrossDesktopAccessResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteCrossDesktopAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteCrossDesktopAccessResponseBody(name='body'),
}

async function modifyOfficeSiteCrossDesktopAccessWithOptions(request: ModifyOfficeSiteCrossDesktopAccessRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteCrossDesktopAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableCrossDesktopAccess)) {
    query['EnableCrossDesktopAccess'] = request.enableCrossDesktopAccess;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteCrossDesktopAccess',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteCrossDesktopAccess(request: ModifyOfficeSiteCrossDesktopAccessRequest): ModifyOfficeSiteCrossDesktopAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteCrossDesktopAccessWithOptions(request, runtime);
}

model ModifyOfficeSiteMfaEnabledRequest {
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable MFA. Valid values:

*   true: enables MFA
*   false: disables MFA', example='true'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyOfficeSiteMfaEnabledResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteMfaEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteMfaEnabledResponseBody(name='body'),
}

async function modifyOfficeSiteMfaEnabledWithOptions(request: ModifyOfficeSiteMfaEnabledRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteMfaEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteMfaEnabled',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteMfaEnabled(request: ModifyOfficeSiteMfaEnabledRequest): ModifyOfficeSiteMfaEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteMfaEnabledWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  operateType?: string(name='OperateType', description='The action that you want to perform on the vulnerability. Valid values:

*   vul_fix: fixes the vulnerability. The system fixes the vulnerability.
*   vul_verify: verifies whether the vulnerability is fixed. You must perform this action after the vulnerability is fixed, and the cloud desktop is restarted.
*   vul_ignore: ignores the vulnerability. After the vulnerability is ignored, the system provides no more prompts about the vulnerability.
*   vul_undo_ignore: cancels the ignore action on the vulnerability. After you cancel the ignore action on the vulnerability, the system provides prompts about the vulnerability again.', example='vul_fix'),
  reason?: string(name='Reason', description='The reason why the vulnerability is ignored.\\
This parameter is required only when `OperateType` is set to `vul_ignore`.', example='Postpone the fix'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   cve: the Linux software vulnerability
*   sys: the Windows system vulnerability', example='cve'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of cloud desktop in which the vulnerability is detected.', example='ecd-138dsptkrt00u****'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20171100'),
      tag?: string(name='Tag', description='The tag that you want to add to the vulnerability.', example='oval'),
    }
  ](name='VulInfo', description='Details of the vulnerabilities.'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulInfo)) {
    query['VulInfo'] = request.vulInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOperateVul',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPolicyGroupRequest {
  appContentProtection?: string(name='AppContentProtection', description='Specifies whether to enable the anti-screenshot feature. Valid values:

*   on
*   off

Default value: off.', example='on'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block that can be accessed from the client.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client CIDR block in the whitelist.', example='test'),
    }
  ](name='AuthorizeAccessPolicyRule', description='The client CIDR blocks in the whitelist.'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='10.0.XX.XX/8'),
      description?: string(name='Description', description='The description of the security group rule.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule. Valid values:

*   TCP
*   UDP
*   ICMP: ICMP (IPv4)
*   GRE
*   ALL', example='tcp'),
      policy?: string(name='Policy', description='The authorization policy of the security group rule. Valid values:

*   accept: allows all access requests.
*   drop: disallows all access requests. If no denied messages are returned, the requests timed out or failed.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule. The value of the port range is determined by the protocol type specified by the IpProtocol parameter.

*   If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to ICMP, the port range is -1/-1.
*   If the IpProtocol parameter is set to GRE, the port range is -1/-1.
*   If the IpProtocol parameter is set to ALL, the port range is -1/-1.

For information about the common ports of typical applications, see [Common ports](~~40724~~).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority.\\
Valid values: 1 to 60.\\
Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule. Valid values:

*   inflow: inbound
*   outflow: outbound', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', description='The security group rules.'),
  cameraRedirect?: string(name='CameraRedirect', description='Specifies whether to enable the webcam redirection feature. Valid values:

*   on
*   off

Default value: on.', example='on'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', description='The type of client that you want to use to connect to the cloud desktop. Valid values:

*   windows: the Windows client
*   linux: C-Key Series Cloud Computer TC and A Series Cloud Computer TC
*   macos: the macOS client
*   ios: the iOS client
*   android: the Android client
*   html5: the web client

> By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to connect to the cloud desktop.', example='windows'),
      status?: string(name='Status', description='The logon method. This parameter specifies whether a specific type of the client is allowed to connect to the cloud desktop. Valid values:

*   on: allowed.
*   off: disallowed.

> By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to log on to cloud desktops.', example='ON'),
    }
  ](name='ClientType', description='The logon methods.'),
  clipboard?: string(name='Clipboard', description='The permissions on the clipboard. Valid values:

*   read: read-only. You can copy data from your local computer to the cloud desktop, but cannot copy data from the cloud desktop to your local computer.
*   readwrite: read and write. You can copy data between your local computer and the cloud desktop.
*   off: disabled. You cannot copy data between your local computer and the cloud desktop.

Default value: off.', example='off'),
  domainList?: string(name='DomainList', description='The blacklist or whitelist of domain names. Domain names support the asterisk (\\*) wildcard. Multiple domain names are separated by commas (,). Valid values:

*   \\[black:],example1.com,example2.com: the domain name blacklist.
*   \\[white:],example1.com,example2.com: the domain name whitelist.', example='[black:],example.com'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate'),
  gpuAcceleration?: string(name='GpuAcceleration', description='Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If your business requires high desktop performance and optimal user experience, we recommend that you enable this feature. For example, you can enable this policy in professional design scenarios. Valid values:

*   on
*   off', example='off'),
  html5Access?: string(name='Html5Access', description='The access policy on the HTML5 client. Valid values:

*   on: allows access from the HTML5 client.
*   off: denies access from the HTML5 client.

Default value: off.

> We recommend that you use the ClientType-related parameters to specify the types of clients that are used for logon and desktop connection.', example='off'),
  html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer feature for the HTML5 client. Valid values:

*   off: disabled.
*   upload: Files on your local computer can be uploaded to the HTML5 client.
*   download: Files on the HTML5 client can be downloaded to your local computer.
*   all: Files can be uploaded from your local computer to the HTML5 client and downloaded from the HTML5 client to your local computer.

Default value: off.', example='off'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol that you want to use for network communication. Valid values:

*   TCP: Only the TCP protocol is used.
*   BOTH: allows automatic switchover between the TCP protocol and the UDP protocol.

Default value: TCP.', example='BOTH'),
  localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping. Valid values:

*   read: read-only. The disks on your local computer are mapped to the cloud desktop. You can only read (copy) files on the local computer.
*   readwrite: read and write. The disks on your local computer are mapped to the cloud desktop. You can read (copy) and modify files on your local computer.
*   off: disabled. The disks on your local computer are not mapped to the cloud desktop.', example='off'),
  name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName'),
  netRedirect?: string(name='NetRedirect', description='The network redirection feature. Valid values:

*   on
*   off

Default value: off.', example='on'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-gx2x1dhsmthe9****'),
  preemptLogin?: string(name='PreemptLogin', description='The user preemption feature. Default value: off. The value cannot be modified.', example='off'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser', description='The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.

> To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time.'),
  printerRedirection?: string(name='PrinterRedirection', description='The printer redirection feature. Valid values:

*   off
*   on', example='off'),
  recordContent?: string(name='RecordContent', description='Specifies whether to enable the custom screen recording feature. Valid values:

*   on
*   off

Default value: off.', example='OFF'),
  recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30'),
  recording?: string(name='Recording', description='Specifies whether to enable screen recording. Valid values:

*   OFF: disabled.
*   ALLTIME: All operations that are performed by an end user on the cloud desktop are recorded. The recording immediately starts when the end user connects to the cloud desktop and ends after the end user disconnects from the cloud desktop.
*   PERIOD: The operations that are performed by an end user on the cloud desktop during a specific period of time are recorded. You must specify the start time and the end time of the recording.', example='OFF'),
  recordingAudio?: string(name='RecordingAudio', description='Specifies whether to record the sound that is generated on the cloud desktop during screen recording. Valid values:

*   on
*   off', example='on'),
  recordingDuration?: int32(name='RecordingDuration', description='This parameter takes effect based on the Recording-related parameters. You can specify a time range for screen recording, and recording files are generated after the specified end time is reached.', example='15'),
  recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording ends. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.', example='08:59:00'),
  recordingExpires?: long(name='RecordingExpires', description='The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: days.', example='30'),
  recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Unit: fps. Valid values:

*   2
*   5
*   10
*   15', example='5'),
  recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording starts. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.', example='08:00:00'),
  regionId?: string(name='RegionId', description='The ID of the region where the cloud desktop resides.', example='cn-hangzhou'),
  remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:

*   fullControl: The keyboard and mouse can be fully controlled.
*   optionalControl: By default, this feature is disabled. You can apply for permissions to enable the feature.
*   disableControl: The keyboard and mouse cannot be controlled.', example='fullControl'),
  revokeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The client IPv4 CIDR block that you want to delete.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client CIDR block that you want to delete from the whitelist.', example='test'),
    }
  ](name='RevokeAccessPolicyRule', description='The client CIDR blocks that you want to delete from the whitelist.'),
  revokeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the security group rule that you want to delete.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule that you want to delete. Valid values:

*   TCP
*   UDP
*   ICMP: ICMP (IPv4)
*   GRE
*   ALL', example='tcp'),
      policy?: string(name='Policy', description='The authorization policy of the security group rule that you want to delete. Valid values:

*   accept: allows all access requests.
*   drop: disallows all access requests. If no denied messages are returned, the requests timed out or failed.

Default value: accept.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule that you want to delete. The value of the port range is determined by the protocol type specified by the IpProtocol parameter.

*   If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to ICMP, the port range is -1/-1.
*   If the IpProtocol parameter is set to GRE, the port range is -1/-1.
*   If the IpProtocol parameter is set to ALL, the port range is -1/-1.

For more information about the common ports of typical applications, see [Common ports](~~40724~~).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule that you want to delete. A smaller value indicates a higher priority.\\
Valid values: 1 to 60.\\
Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule that you want to delete. Valid values:

*   inflow: inbound
*   outflow: outbound', example='outflow'),
    }
  ](name='RevokeSecurityPolicyRule', description='The security group rules that you want to delete.'),
  scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: takes effect globally.
*   IP: takes effect based on the IP address.', example='GLOBAL'),
  scopeValue?: [ string ](name='ScopeValue', description='This parameter is required when the Scope parameter is set to IP.'),
  usbRedirect?: string(name='UsbRedirect', description='The USB redirection feature. Valid values:

*   on
*   off', example='off'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description', description='The description of the rule.', example='Test rule'),
      deviceClass?: string(name='DeviceClass', description='The class of the device. This parameter is required when you set the `usbRuleType` parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. This parameter is required when you set the `usbRuleType` parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
      productId?: string(name='ProductId', description='The ID of the service.', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', description='Specifies whether to allow USB redirection. Valid values:

*   1: allowed.
*   2: disallowed.', example='1'),
      usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule. Valid values:

*   1: device class.
*   2: device vendor.', example='1'),
      vendorId?: string(name='VendorId', description='The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf\\_1.pdf).', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', description='The USB redirection rules.'),
  videoRedirect?: string(name='VideoRedirect', description='The multimedia redirection feature.', example='on'),
  visualQuality?: string(name='VisualQuality', description='The image display quality feature. Valid values:

*   low: smooth
*   medium: adaptive
*   high: high definition (HD)
*   lossless: no data loss during encoding or decoding.

Default value: medium.', example='low'),
  watermark?: string(name='Watermark', description='The watermarking feature. Valid values:

*   on
*   off', example='off'),
  watermarkColor?: int32(name='WatermarkColor', description='The font color of the watermark. Valid values: 0 to 16777215.', example='0'),
  watermarkDegree?: double(name='WatermarkDegree', description='The inclination angle of the watermark. Value values: -10 to -30.', example='-10'),
  watermarkFontSize?: int32(name='WatermarkFontSize', description='The font size of the watermark. Valid values: 10 to 50', example='10'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', description='The font style of the watermark. Valid values:

*   plain
*   bold', example='plain'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows. This parameter is not in use.', example='3'),
  watermarkTransparency?: string(name='WatermarkTransparency', description='The transparency of the watermark. Valid values:

*   LIGHT
*   MIDDLE
*   DARK', example='LIGHT'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The transparency of the watermark. A larger value indicates a less transparent watermark. Valid values: 10 to 100.', example='10'),
  watermarkType?: string(name='WatermarkType', description='The type of the watermark. You can specify multiple watermark types at a time. Multiple types of watermarks are separated by commas (,). Valid values:

*   EndUserId: The username is displayed.
*   HostName: The last 15 characters of the cloud desktop ID are displayed.', example='EndUserId'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyGroupResponseBody(name='body'),
}

async function modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appContentProtection)) {
    query['AppContentProtection'] = request.appContentProtection;
  }
  if (!Util.isUnset(request.authorizeAccessPolicyRule)) {
    query['AuthorizeAccessPolicyRule'] = request.authorizeAccessPolicyRule;
  }
  if (!Util.isUnset(request.authorizeSecurityPolicyRule)) {
    query['AuthorizeSecurityPolicyRule'] = request.authorizeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.cameraRedirect)) {
    query['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.clipboard)) {
    query['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.endUserApplyAdminCoordinate)) {
    query['EndUserApplyAdminCoordinate'] = request.endUserApplyAdminCoordinate;
  }
  if (!Util.isUnset(request.endUserGroupCoordinate)) {
    query['EndUserGroupCoordinate'] = request.endUserGroupCoordinate;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.html5Access)) {
    query['Html5Access'] = request.html5Access;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    query['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.internetCommunicationProtocol)) {
    query['InternetCommunicationProtocol'] = request.internetCommunicationProtocol;
  }
  if (!Util.isUnset(request.localDrive)) {
    query['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netRedirect)) {
    query['NetRedirect'] = request.netRedirect;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.preemptLogin)) {
    query['PreemptLogin'] = request.preemptLogin;
  }
  if (!Util.isUnset(request.preemptLoginUser)) {
    query['PreemptLoginUser'] = request.preemptLoginUser;
  }
  if (!Util.isUnset(request.printerRedirection)) {
    query['PrinterRedirection'] = request.printerRedirection;
  }
  if (!Util.isUnset(request.recordContent)) {
    query['RecordContent'] = request.recordContent;
  }
  if (!Util.isUnset(request.recordContentExpires)) {
    query['RecordContentExpires'] = request.recordContentExpires;
  }
  if (!Util.isUnset(request.recording)) {
    query['Recording'] = request.recording;
  }
  if (!Util.isUnset(request.recordingAudio)) {
    query['RecordingAudio'] = request.recordingAudio;
  }
  if (!Util.isUnset(request.recordingDuration)) {
    query['RecordingDuration'] = request.recordingDuration;
  }
  if (!Util.isUnset(request.recordingEndTime)) {
    query['RecordingEndTime'] = request.recordingEndTime;
  }
  if (!Util.isUnset(request.recordingExpires)) {
    query['RecordingExpires'] = request.recordingExpires;
  }
  if (!Util.isUnset(request.recordingFps)) {
    query['RecordingFps'] = request.recordingFps;
  }
  if (!Util.isUnset(request.recordingStartTime)) {
    query['RecordingStartTime'] = request.recordingStartTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCoordinate)) {
    query['RemoteCoordinate'] = request.remoteCoordinate;
  }
  if (!Util.isUnset(request.revokeAccessPolicyRule)) {
    query['RevokeAccessPolicyRule'] = request.revokeAccessPolicyRule;
  }
  if (!Util.isUnset(request.revokeSecurityPolicyRule)) {
    query['RevokeSecurityPolicyRule'] = request.revokeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeValue)) {
    query['ScopeValue'] = request.scopeValue;
  }
  if (!Util.isUnset(request.usbRedirect)) {
    query['UsbRedirect'] = request.usbRedirect;
  }
  if (!Util.isUnset(request.usbSupplyRedirectRule)) {
    query['UsbSupplyRedirectRule'] = request.usbSupplyRedirectRule;
  }
  if (!Util.isUnset(request.videoRedirect)) {
    query['VideoRedirect'] = request.videoRedirect;
  }
  if (!Util.isUnset(request.visualQuality)) {
    query['VisualQuality'] = request.visualQuality;
  }
  if (!Util.isUnset(request.watermark)) {
    query['Watermark'] = request.watermark;
  }
  if (!Util.isUnset(request.watermarkColor)) {
    query['WatermarkColor'] = request.watermarkColor;
  }
  if (!Util.isUnset(request.watermarkDegree)) {
    query['WatermarkDegree'] = request.watermarkDegree;
  }
  if (!Util.isUnset(request.watermarkFontSize)) {
    query['WatermarkFontSize'] = request.watermarkFontSize;
  }
  if (!Util.isUnset(request.watermarkFontStyle)) {
    query['WatermarkFontStyle'] = request.watermarkFontStyle;
  }
  if (!Util.isUnset(request.watermarkRowAmount)) {
    query['WatermarkRowAmount'] = request.watermarkRowAmount;
  }
  if (!Util.isUnset(request.watermarkTransparency)) {
    query['WatermarkTransparency'] = request.watermarkTransparency;
  }
  if (!Util.isUnset(request.watermarkTransparencyValue)) {
    query['WatermarkTransparencyValue'] = request.watermarkTransparencyValue;
  }
  if (!Util.isUnset(request.watermarkType)) {
    query['WatermarkType'] = request.watermarkType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model ModifyUserEntitlementRequest {
  authorizeDesktopId?: [ string ](name='AuthorizeDesktopId', description='The IDs of cloud desktops which you want to grant permissions to regular users.'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of regular users.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  revokeDesktopId?: [ string ](name='RevokeDesktopId', description='The IDs of cloud desktops which you want to revoke permissions from regular users.'),
}

model ModifyUserEntitlementResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserEntitlementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserEntitlementResponseBody(name='body'),
}

/**
  * You can modify permissions for regular users on cloud desktops that are only in the Running state.
  *
  * @param request ModifyUserEntitlementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyUserEntitlementResponse
 */
async function modifyUserEntitlementWithOptions(request: ModifyUserEntitlementRequest, runtime: Util.RuntimeOptions): ModifyUserEntitlementResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizeDesktopId)) {
    query['AuthorizeDesktopId'] = request.authorizeDesktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.revokeDesktopId)) {
    query['RevokeDesktopId'] = request.revokeDesktopId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserEntitlement',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can modify permissions for regular users on cloud desktops that are only in the Running state.
  *
  * @param request ModifyUserEntitlementRequest
  * @return ModifyUserEntitlementResponse
 */
async function modifyUserEntitlement(request: ModifyUserEntitlementRequest): ModifyUserEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserEntitlementWithOptions(request, runtime);
}

model ModifyUserToDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group that you want to assign to users.', example='dg-2i8qxpv6t1a03****'),
  newEndUserIds?: [ string ](name='NewEndUserIds', description='The IDs of the regular users to whom you want to grant the permissions on the cloud desktop.'),
  oldEndUserIds?: [ string ](name='OldEndUserIds', description='The IDs of the original regular users who have the permissions on the cloud desktop.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserToDesktopGroupResponseBody(name='body'),
}

async function modifyUserToDesktopGroupWithOptions(request: ModifyUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyUserToDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.newEndUserIds)) {
    query['NewEndUserIds'] = request.newEndUserIds;
  }
  if (!Util.isUnset(request.oldEndUserIds)) {
    query['OldEndUserIds'] = request.oldEndUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserToDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUserToDesktopGroup(request: ModifyUserToDesktopGroupRequest): ModifyUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserToDesktopGroupWithOptions(request, runtime);
}

model MoveCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-346063****'),
  conflictPolicy?: string(name='ConflictPolicy', example='ignore'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='63f3257b68b018170b194d87b875512d108f****'),
  parentFolderId?: string(name='ParentFolderId', example='6409848a6da91d6240604e7ba7337d85ba8a1****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model MoveCdsFileResponseBody = {
  code?: string(name='Code', example='success'),
  message?: string(name='Message', example='success'),
  moveCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', example='fe307518-825a-4c8b-a69c-958f0e8a****'),
    exist?: boolean(name='Exist', example='false'),
    fileId?: string(name='FileId', example='63636837e47e5a24a8a940218bef395c210e****'),
  }(name='MoveCdsFileModel'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='true'),
}

model MoveCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveCdsFileResponseBody(name='body'),
}

async function moveCdsFileWithOptions(request: MoveCdsFileRequest, runtime: Util.RuntimeOptions): MoveCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveCdsFile(request: MoveCdsFileRequest): MoveCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveCdsFileWithOptions(request, runtime);
}

model OperateVulsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops.'),
  operateType?: string(name='OperateType', description='The action that you want to perform on the vulnerability. Valid values:

*   vul_fix: fixes the vulnerability.
*   vul_verify: verifies whether the vulnerability is fixed. You must perform this action after the vulnerability is fixed and the cloud desktop is restarted.
*   vul_ignore: ignores the vulnerability. After the vulnerability is ignored, the system provides no more prompts about the vulnerability.
*   vul_undo_ignore: cancels the ignore action on the vulnerability. After you cancel the ignore action on the vulnerability, the system provides prompts about the vulnerability again.', example='vul_fix'),
  precondition?: int32(name='Precondition', description='Specifies whether to record the previous state of the vulnerability. Valid values:

*   0: records the previous state of the vulnerability.
*   1: does not record the previous state of the vulnerability.', example='1'),
  reason?: string(name='Reason', description='The reason why the vulnerability is ignored.\\
This parameter is required only when `OperateType` is set to `vul_ignore`.', example='Fix the vulnerability later.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the detected vulnerability. Valid values:

*   cve: the Linux software vulnerability
*   sys: the Windows system vulnerability', example='sys'),
  vulName?: [ string ](name='VulName', description='The names of the vulnerabilities.'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.precondition)) {
    query['Precondition'] = request.precondition;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVuls',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model RebootDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 100 cloud desktop IDs.', example='ecd-gx2x1dhsmucyy****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebootDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootDesktopsResponseBody(name='body'),
}

/**
  * The cloud desktops that you want to restart by calling this operation must be in the Running state.
  *
  * @param request RebootDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebootDesktopsResponse
 */
async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktops that you want to restart by calling this operation must be in the Running state.
  *
  * @param request RebootDesktopsRequest
  * @return RebootDesktopsResponse
 */
async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model RebuildDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.', example='ecd-gx2x1dhsmucyy****'),
  imageId?: string(name='ImageId', description='The ID of the new image.', example='m-84mztzatmlnys****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model RebuildDesktopsResponseBody = {
  rebuildResults?: [ 
    {
      code?: string(name='Code', description='The recreation result of the cloud desktop by changing the image. A value of success indicates that the image of the cloud desktop is changed. If the image of the cloud desktop failed to be changed, an error message is returned.', example='IncorrectDesktopStatus'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
      message?: string(name='Message', description='The error message. This parameter is not returned if the value of Code is success.', example='The current status of the desktop does not support this operation.'),
    }
  ](name='RebuildResults', description='The recreation results of cloud desktops by changing images.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebuildDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebuildDesktopsResponseBody(name='body'),
}

/**
  * Before you change the image of a cloud desktop, take note of the following limits:
  * - You can select the OS of an image during image change. However, this operation is unavailable in the following regions: China (Hong Kong), Australia (Sydney), Singapore (Singapore), and Japan (Tokyo).
  * - Image change between GPU and non-GPU images is not supported. If a cloud desktop is of the Graphics type, you can use only a GPU image. If the cloud desktop is of a non-Graphics type, you can use only a non-GPU image.
  * After you change the image of the cloud desktop, the system uses the new image to initialize the system disk of the cloud desktop. Take note of the following impacts:
  * - The system deletes data from the original system disk. The snapshots that are created from the original system disk of the cloud desktop become unavailable and are automatically deleted.
  * - If you change the OS of the image, the system deletes data from the original data disk of the cloud desktop. The system also deletes snapshots that are created from the original data disk of the cloud desktop because original snapshots become unavailable. If you do not change the OS of the image, data on the original data disk is retained, and snapshots that are created from the data disk are still available.
  *
  * @param request RebuildDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebuildDesktopsResponse
 */
async function rebuildDesktopsWithOptions(request: RebuildDesktopsRequest, runtime: Util.RuntimeOptions): RebuildDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebuildDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you change the image of a cloud desktop, take note of the following limits:
  * - You can select the OS of an image during image change. However, this operation is unavailable in the following regions: China (Hong Kong), Australia (Sydney), Singapore (Singapore), and Japan (Tokyo).
  * - Image change between GPU and non-GPU images is not supported. If a cloud desktop is of the Graphics type, you can use only a GPU image. If the cloud desktop is of a non-Graphics type, you can use only a non-GPU image.
  * After you change the image of the cloud desktop, the system uses the new image to initialize the system disk of the cloud desktop. Take note of the following impacts:
  * - The system deletes data from the original system disk. The snapshots that are created from the original system disk of the cloud desktop become unavailable and are automatically deleted.
  * - If you change the OS of the image, the system deletes data from the original data disk of the cloud desktop. The system also deletes snapshots that are created from the original data disk of the cloud desktop because original snapshots become unavailable. If you do not change the OS of the image, data on the original data disk is retained, and snapshots that are created from the data disk are still available.
  *
  * @param request RebuildDesktopsRequest
  * @return RebuildDesktopsResponse
 */
async function rebuildDesktops(request: RebuildDesktopsRequest): RebuildDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildDesktopsWithOptions(request, runtime);
}

model RemoveFilePermissionRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberList?: [ 
    {
      cdsIdentity?: {
        id?: string(name='Id', example='249dsfseee643h33g3dv****'),
        type?: string(name='Type', example='IT_User'),
      }(name='CdsIdentity'),
      roleId?: string(name='RoleId', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RemoveFilePermissionShrinkRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', example='user01'),
  fileId?: string(name='FileId', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberListShrink?: string(name='MemberList'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RemoveFilePermissionResponseBody = {
  requestId?: string(name='RequestId', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model RemoveFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveFilePermissionResponseBody(name='body'),
}

async function removeFilePermissionWithOptions(tmpReq: RemoveFilePermissionRequest, runtime: Util.RuntimeOptions): RemoveFilePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveFilePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.memberList)) {
    request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, 'MemberList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.memberListShrink)) {
    query['MemberList'] = request.memberListShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeFilePermission(request: RemoveFilePermissionRequest): RemoveFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeFilePermissionWithOptions(request, runtime);
}

model RemoveUserFromDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group on which the permissions you want to revoke from the authorized user.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='Details about the IDs of the desktop groups.'),
  endUserIds?: [ string ](name='EndUserIds', description='Details about the authorized users from which you want to revoke permissions on the desktop group.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model RemoveUserFromDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUserFromDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserFromDesktopGroupResponseBody(name='body'),
}

async function removeUserFromDesktopGroupWithOptions(request: RemoveUserFromDesktopGroupRequest, runtime: Util.RuntimeOptions): RemoveUserFromDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupIds)) {
    query['DesktopGroupIds'] = request.desktopGroupIds;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserFromDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUserFromDesktopGroup(request: RemoveUserFromDesktopGroupRequest): RemoveUserFromDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromDesktopGroupWithOptions(request, runtime);
}

model RenewDesktopsRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   true: enables automatic payment. Make sure that you have sufficient balance in your account. Otherwise, abnormal orders are generated.
*   false: generates the order with no payment made. You can log on to the EDS console and complete the payment based on the order number.

Default value: true.', example='true'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of cloud desktops.

Only subscription cloud desktops can be renewed by calling this operation.', example='ecd-ia2zw38bi6cm7****'),
  period?: int32(name='Period', description='The renewal duration. The valid values of this parameter are determined by the PeriodUnit value.

*   If PeriodUnit is set to Month, the valid values of the Period parameter are 1, 2, 3, and 6.
*   If PeriodUnit is set to Year, the valid values of the Period parameter are 1, 2, 3, 4, and 5.

Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by the Period parameter. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='500030980150146'),
  regionId?: string(name='RegionId', description='The region ID of the cloud desktop.', example='cn-hangzhou'),
}

model RenewDesktopsResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='20844399755****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewDesktopsResponseBody(name='body'),
}

async function renewDesktopsWithOptions(request: RenewDesktopsRequest, runtime: Util.RuntimeOptions): RenewDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewDesktops(request: RenewDesktopsRequest): RenewDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDesktopsWithOptions(request, runtime);
}

model RenewNetworkPackagesRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: does not complete the payment. In this case, an order is generated, but no payment is made. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='true'),
  networkPackageId?: [ string ](name='NetworkPackageId', description='The ID of the Internet access package. You can specify 1 to 100 IDs of Internet access packages.'),
  period?: int32(name='Period', description='The renewal period. Valid values of this parameter are determined by the value of the `PeriodUnit` parameter.

*   Valid value when the `PeriodUnit` parameter is set to `Week`: 1
*   Valid values when the `PeriodUnit` parameter is set to `Month`: 1, 2, 3, and 6
*   Valid values when the `PeriodUnit` parameter is set to `Year`: 1, 2, and 3

Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Default value: Month.', example='Month'),
  promotionId?: string(name='PromotionId', description='The ID of the promotion. You can call the `GetResourcePrice` operation to query the promotion ID.', example='500038360030606'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model RenewNetworkPackagesResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='214726268900640'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewNetworkPackagesResponseBody(name='body'),
}

async function renewNetworkPackagesWithOptions(request: RenewNetworkPackagesRequest, runtime: Util.RuntimeOptions): RenewNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewNetworkPackages(request: RenewNetworkPackagesRequest): RenewNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewNetworkPackagesWithOptions(request, runtime);
}

model ResetDesktopsRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.``', example='dg-07if7qsxoxkb6****'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 100 cloud desktop IDs.'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
  payType?: string(name='PayType', description='The billing method.

> This parameter is available only when you reset desktop groups. If you leave this parameter empty, all cloud desktops in the specified desktop group are reset, regardless of how the cloud desktops are billed.', example='PrePaid'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~436773~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resetType?: string(name='ResetType', description='The type of the disk that you want to reset.', example='1'),
}

model ResetDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDesktopsResponseBody(name='body'),
}

async function resetDesktopsWithOptions(request: ResetDesktopsRequest, runtime: Util.RuntimeOptions): ResetDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetDesktops(request: ResetDesktopsRequest): ResetDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDesktopsWithOptions(request, runtime);
}

model ResetNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='3a6ef4****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ResetNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * ## Description
  * When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
  *
  * @param request ResetNASDefaultMountTargetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetNASDefaultMountTargetResponse
 */
async function resetNASDefaultMountTargetWithOptions(request: ResetNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ResetNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetNASDefaultMountTarget',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
  *
  * @param request ResetNASDefaultMountTargetRequest
  * @return ResetNASDefaultMountTargetResponse
 */
async function resetNASDefaultMountTarget(request: ResetNASDefaultMountTargetRequest): ResetNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetNASDefaultMountTargetWithOptions(request, runtime);
}

model ResetSnapshotRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hzngahou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2zeipxmnhej803x7****'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSnapshotResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following operations are performed:
  * *   The data that you want to retain in the disk is backed up.
  *     **
  *     **Note**The disk restoration operation is irreversible. After you restore data on a disk, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore a disk from a snapshot, make sure that you back up important data.
  * *   The cloud desktop whose disk you want to restore is stopped.
  *
  * @param request ResetSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetSnapshotResponse
 */
async function resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: Util.RuntimeOptions): ResetSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that the following operations are performed:
  * *   The data that you want to retain in the disk is backed up.
  *     **
  *     **Note**The disk restoration operation is irreversible. After you restore data on a disk, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore a disk from a snapshot, make sure that you back up important data.
  * *   The cloud desktop whose disk you want to restore is stopped.
  *
  * @param request ResetSnapshotRequest
  * @return ResetSnapshotResponse
 */
async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSnapshotWithOptions(request, runtime);
}

model RevokeCoordinatePrivilegeRequest {
  coId?: string(name='CoId', description='The ID of the stream coordination task.', example='co-fqsm6e8ee75w61fp9'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='zhangsan'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The type of user who requires the coordinate permissions.

Set the value to TENANT_ADMIN. Only tenant administrators can be granted with the coordinate permissions.', example='TENANT_ADMIN'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='C78CA9E99315687575DD2844C1F3****'),
}

model RevokeCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RevokeCoordinatePrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeCoordinatePrivilegeResponseBody(name='body'),
}

async function revokeCoordinatePrivilegeWithOptions(request: RevokeCoordinatePrivilegeRequest, runtime: Util.RuntimeOptions): RevokeCoordinatePrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coId)) {
    query['CoId'] = request.coId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeCoordinatePrivilege',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeCoordinatePrivilege(request: RevokeCoordinatePrivilegeRequest): RevokeCoordinatePrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeCoordinatePrivilegeWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-138dsptkrt00u****'),
  quaraFieldId?: int32(name='QuaraFieldId', description='The ID of the quarantined file.

You can call the [DescribeSuspEventQuaraFiles](~~217947~~) operation to obtain the ID of the quarantined file.', example='3921797'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

/**
  * ## Description
  * When alerts are handled, the system quarantines the files that contain detected threats to the quarantine panel. You can call this operation to remove quarantined files from the quarantine panel.
  *
  * @param request RollbackSuspEventQuaraFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RollbackSuspEventQuaraFileResponse
 */
async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.quaraFieldId)) {
    query['QuaraFieldId'] = request.quaraFieldId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackSuspEventQuaraFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When alerts are handled, the system quarantines the files that contain detected threats to the quarantine panel. You can call this operation to remove quarantined files from the quarantine panel.
  *
  * @param request RollbackSuspEventQuaraFileRequest
  * @return RollbackSuspEventQuaraFileResponse
 */
async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', description='The content of the command. The command content can be plaintext or Base64-encoded.\\
The Base64-encoded command content cannot exceed 16 KB in size.

> If the command content is Base64-encoded, you must set the ContentEncoding parameter to Base64.', example='ipconfig'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content. Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is Base64-encoded.

Default value: PlainText. If the specified value of this parameter is invalid, PlainText is used by default.', example='Base64'),
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop N. Valid values of N: 1 to 50.\\
If multiple cloud desktops are specified and the command execution succeeds on at least one of the cloud desktops, the operation is considered successful. If multiple cloud desktops are specified and the command execution fails on all the cloud desktops, verify the value of the parameter and try again.'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='User1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  timeout?: long(name='Timeout', description='The timeout period for the command to run. Unit: seconds. Default value: 60.\\
A timeout error occurs if the command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When a timeout error occurs, the command process is forcibly terminated.', example='3600'),
  type?: string(name='Type', description='The language of the O\\&M command. Valid values:

*   RunBatScript
*   RunPowerShellScript', example='RunPowerShellScript'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The ID of the command execution.', example='t-hz01qgsqj2n****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model SendVerifyCodeRequest {
  extraInfo?: string(name='ExtraInfo', description='The information in JSON format that is required for sending the verification code. To verify the security of CEN, you must provide the ID of the CEN instance and the ID of the Alibaba Cloud account to which the instance belongs.

*   CenId: the ID of the CEN instance
*   CenOwnerId: the ID of the Alibaba Cloud account to which the CEN instance belongs.

Note: If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to the Alibaba Cloud account, skip this parameter. If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the exact Alibaba Cloud account. Example: {"cenOwnerId": 1234567890\\*\\*\\*\\*\\*\\*,"cenId": "cen-3weq30r6t0s7t4\\*\\*\\*\\*"}.', example='{"cenOwnerId": 1234567890******,"cenId": "cen-3weq30r6t0s7t4****"}'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  verifyCodeAction?: string(name='VerifyCodeAction', description='The action that indicates what the verification code is used for. The parameter is only used to verify the security of CEN. Valid value: eds_cenID_securityverification.', example='eds_cenID_securityverification'),
}

model SendVerifyCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SendVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerifyCodeResponseBody(name='body'),
}

/**
  * ## Description
  * When you attach your workspace network to a Cloud Enterprise Network (CEN) instance in another Alibaba Cloud account, you need to call this operation to obtain a verification code. After the call is successful, the system sends a verification code to the email address associated with the Alibaba Cloud account.
  *
  * @param request SendVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendVerifyCodeResponse
 */
async function sendVerifyCodeWithOptions(request: SendVerifyCodeRequest, runtime: Util.RuntimeOptions): SendVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCodeAction)) {
    query['VerifyCodeAction'] = request.verifyCodeAction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerifyCode',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you attach your workspace network to a Cloud Enterprise Network (CEN) instance in another Alibaba Cloud account, you need to call this operation to obtain a verification code. After the call is successful, the system sends a verification code to the email address associated with the Alibaba Cloud account.
  *
  * @param request SendVerifyCodeRequest
  * @return SendVerifyCodeResponse
 */
async function sendVerifyCode(request: SendVerifyCodeRequest): SendVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerifyCodeWithOptions(request, runtime);
}

model SetDesktopGroupScaleTimerRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  scaleTimerInfos?: [ 
    {
      buyResAmount?: int32(name='BuyResAmount', description='The number of cloud desktops that you want to create in the desktop group. Valid values: 0 to 200. You must configure this parameter for the scaling policy.', example='5'),
      cron?: string(name='Cron', description='The CRON expression that is used when an auto scaling task is triggered.', example='0 0 12 ? * 1'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration after the cloud desktop is disconnected. Unit: milliseconds.', example='1000'),
      loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
      maxResAmount?: int32(name='MaxResAmount', description='The maximum number of cloud desktops in the workspace after scaling. Valid values: 0 to 200. You must configure this parameter for the scaling policy.', example='100'),
      minResAmount?: int32(name='MinResAmount', description='The minimum number of cloud desktops that can be connected. Valid values: 0 to 200.', example='5'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions supported by each cloud desktop) × 100%`. When the ratio of connected sessions is greater than the specified threshold, desktop scale-out is automatically triggered. When the ratio of connected sessions is smaller than the specified threshold, desktop scale-in is automatically triggered under a specific condition.', example='0.9'),
      type?: string(name='Type', description='The type of the policy.', example='rise'),
    }
  ](name='ScaleTimerInfos', description='The information about the scheduled auto scaling tasks.'),
}

model SetDesktopGroupScaleTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDesktopGroupScaleTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupScaleTimerResponseBody(name='body'),
}

async function setDesktopGroupScaleTimerWithOptions(request: SetDesktopGroupScaleTimerRequest, runtime: Util.RuntimeOptions): SetDesktopGroupScaleTimerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scaleTimerInfos)) {
    query['ScaleTimerInfos'] = request.scaleTimerInfos;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupScaleTimer',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupScaleTimer(request: SetDesktopGroupScaleTimerRequest): SetDesktopGroupScaleTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupScaleTimerWithOptions(request, runtime);
}

model SetDesktopGroupTimerRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression for the scheduled task.', example='0 0 2 ? * 1-7'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-dbdkfmh883****'),
  force?: boolean(name='Force', description='Specifies whether to forcefully execute the scheduled task.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resetType?: int32(name='ResetType', description='The type of the disk that you want to reset.', example='1'),
  timerType?: int32(name='TimerType', description='The type of the scheduled task. Valid values:', example='1'),
}

model SetDesktopGroupTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='388CF76E-FFB3-5174-9F91-CDD****'),
}

model SetDesktopGroupTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupTimerResponseBody(name='body'),
}

async function setDesktopGroupTimerWithOptions(request: SetDesktopGroupTimerRequest, runtime: Util.RuntimeOptions): SetDesktopGroupTimerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.timerType)) {
    query['TimerType'] = request.timerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupTimer',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupTimer(request: SetDesktopGroupTimerRequest): SetDesktopGroupTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupTimerWithOptions(request, runtime);
}

model SetDesktopGroupTimerStatusRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-fgxsniu6at****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: int32(name='Status', description='The status of the scheduled task.', example='1'),
  timerType?: int32(name='TimerType', description='The type of the scheduled task.', example='1'),
}

model SetDesktopGroupTimerStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC7912E7-8BDF-547F-BCAC****'),
}

model SetDesktopGroupTimerStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupTimerStatusResponseBody(name='body'),
}

async function setDesktopGroupTimerStatusWithOptions(request: SetDesktopGroupTimerStatusRequest, runtime: Util.RuntimeOptions): SetDesktopGroupTimerStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.timerType)) {
    query['TimerType'] = request.timerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupTimerStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupTimerStatus(request: SetDesktopGroupTimerStatusRequest): SetDesktopGroupTimerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupTimerStatusWithOptions(request, runtime);
}

model SetDirectorySsoStatusRequest {
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-h95efs1mbukd9****'),
  enableSso?: boolean(name='EnableSso', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model SetDirectorySsoStatusResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDirectorySsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDirectorySsoStatusResponseBody(name='body'),
}

async function setDirectorySsoStatusWithOptions(request: SetDirectorySsoStatusRequest, runtime: Util.RuntimeOptions): SetDirectorySsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.enableSso)) {
    query['EnableSso'] = request.enableSso;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDirectorySsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDirectorySsoStatus(request: SetDirectorySsoStatusRequest): SetDirectorySsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirectorySsoStatusWithOptions(request, runtime);
}

model SetIdpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='cn-hangzhou+dir-400695****'),
  idpMetadata?: string(name='IdpMetadata', description='The metadata of the IdP.', example='&lt;EntityDescriptor ID********Descriptor&gt;'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-400695****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model SetIdpMetadataResponseBody = {
  idpEntityId?: string(name='IdpEntityId', description='The entityID value obtained after the IdP metadata file is parsed.', example='http://test****.cn/adfs/services/trust'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetIdpMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetIdpMetadataResponseBody(name='body'),
}

/**
  * ## Description
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types. You cannot call this operation for RAM directories.
  *
  * @param request SetIdpMetadataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetIdpMetadataResponse
 */
async function setIdpMetadataWithOptions(request: SetIdpMetadataRequest, runtime: Util.RuntimeOptions): SetIdpMetadataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.idpMetadata)) {
    query['IdpMetadata'] = request.idpMetadata;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetIdpMetadata',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types. You cannot call this operation for RAM directories.
  *
  * @param request SetIdpMetadataRequest
  * @return SetIdpMetadataResponse
 */
async function setIdpMetadata(request: SetIdpMetadataRequest): SetIdpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIdpMetadataWithOptions(request, runtime);
}

model SetOfficeSiteSsoStatusRequest {
  enableSso?: boolean(name='EnableSso', description='Specifies whether to enable SSO. Valid values:

*   true: enables SSO
*   false: disables SSO', example='true'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model SetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function setOfficeSiteSsoStatusWithOptions(request: SetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): SetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableSso)) {
    query['EnableSso'] = request.enableSso;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetOfficeSiteSsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setOfficeSiteSsoStatus(request: SetOfficeSiteSsoStatusRequest): SetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOfficeSiteSsoStatusWithOptions(request, runtime);
}

model SetUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  userProfilePathRule?: [ 
    {
      blackPath?: {
        path?: string(name='Path', example='AppLocal/Data'),
        type?: string(name='Type', example='folder'),
      }(name='BlackPath'),
      whitePaths?: [ 
        {
          path?: string(name='Path', example='whitePath'),
          type?: string(name='Type', example='file'),
        }
      ](name='WhitePaths'),
    }
  ](name='UserProfilePathRule'),
  userProfileRuleType?: string(name='UserProfileRuleType', example='DesktopGroup'),
}

model SetUserProfilePathRulesShrinkRequest {
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  userProfilePathRuleShrink?: string(name='UserProfilePathRule'),
  userProfileRuleType?: string(name='UserProfileRuleType', example='DesktopGroup'),
}

model SetUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserProfilePathRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserProfilePathRulesResponseBody(name='body'),
}

async function setUserProfilePathRulesWithOptions(tmpReq: SetUserProfilePathRulesRequest, runtime: Util.RuntimeOptions): SetUserProfilePathRulesResponse {
  Util.validateModel(tmpReq);
  var request = new SetUserProfilePathRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userProfilePathRule)) {
    request.userProfilePathRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userProfilePathRule, 'UserProfilePathRule', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userProfilePathRuleShrink)) {
    query['UserProfilePathRule'] = request.userProfilePathRuleShrink;
  }
  if (!Util.isUnset(request.userProfileRuleType)) {
    query['UserProfileRuleType'] = request.userProfileRuleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetUserProfilePathRules',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setUserProfilePathRules(request: SetUserProfilePathRulesRequest): SetUserProfilePathRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserProfilePathRulesWithOptions(request, runtime);
}

model StartDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify up to 100 IDs.', example='ecd-7w78ozhjcwa3u****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDesktopsResponseBody(name='body'),
}

/**
  * The cloud desktop to be started must be in the Stopped (Stopped) state.
  *
  * @param request StartDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartDesktopsResponse
 */
async function startDesktopsWithOptions(request: StartDesktopsRequest, runtime: Util.RuntimeOptions): StartDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop to be started must be in the Stopped (Stopped) state.
  *
  * @param request StartDesktopsRequest
  * @return StartDesktopsResponse
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDesktopsWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops.', example='ecd-138dsptkrt00u****'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='The IDs of the workspaces.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C638DCB-E5A8-423E-9C3B-06BCBB564B11'),
  scanTaskId?: long(name='ScanTaskId', description='The ID of the virus scan task.', example='123456'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

/**
  * When you call this operation, you must specify a workspace or a cloud desktop by specifying the OfficeSiteId or DesktopId parameter.
  * > When you specify a workspace, all cloud desktops within the workspace are scanned.
  *
  * @param request StartVirusScanTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartVirusScanTaskResponse
 */
async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartVirusScanTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, you must specify a workspace or a cloud desktop by specifying the OfficeSiteId or DesktopId parameter.
  * > When you specify a workspace, all cloud desktops within the workspace are scanned.
  *
  * @param request StartVirusScanTaskRequest
  * @return StartVirusScanTaskResponse
 */
async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model StopDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of cloud desktops. You can specify up to 20 cloud desktop IDs.', example='ecd-7w78ozhjcwa3u****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  stoppedMode?: string(name='StoppedMode', description='The billing mode after you stop the cloud desktop.

*   StopCharging: Computing resources are not billed after you stop the cloud desktop. After the cloud desktop is stopped, the system automatically reclaims computing resources. From this point on, you are no longer charged for computing resources. However, you are still charged for storage resources.
*   KeepCharging: The billing continues after you stop the cloud desktop. After the cloud desktop is stopped, the system does not reclaim resources to avoid startup failures due to insufficient resources. You are still charged for the resources.

Default value: StopCharging', example='StopCharging'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDesktopsResponseBody(name='body'),
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request StopDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopDesktopsResponse
 */
async function stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: Util.RuntimeOptions): StopDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.stoppedMode)) {
    query['StoppedMode'] = request.stoppedMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request StopDesktopsRequest
  * @return StopDesktopsResponse
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDesktopsWithOptions(request, runtime);
}

model StopInvocationRequest {
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop. Valid values of N: 1 to 50.', example='ecd-7w78ozhjcwa3u****'),
  invokeId?: string(name='InvokeId', description='The ID of the execution.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInvocationResponseBody(name='body'),
}

/**
  * When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
  *
  * @param request StopInvocationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInvocationResponse
 */
async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInvocation',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
  *
  * @param request StopInvocationRequest
  * @return StopInvocationResponse
 */
async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource, which is the ID of the cloud desktop. Valid values of N: 1 to 50.', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to ALIYUN::GWS::INSTANCE.', example='ALIYUN::GWS::INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag.
Valid values of N: 1 to 20.
The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag.
Valid values of N: 1 to 20.
The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of the resource.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * If TagKey is specified, the new TagValue value overrides the original TagValue value.
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If TagKey is specified, the new TagValue value overrides the original TagValue value.
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnlockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound to AD users.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model UnlockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnlockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockVirtualMFADeviceResponseBody(name='body'),
}

async function unlockVirtualMFADeviceWithOptions(request: UnlockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): UnlockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): UnlockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockVirtualMFADeviceWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from the resource. This parameter takes effect only when the TagKey.N parameter is not specified. Default value: false.', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource, which is the ID of the cloud desktop. Valid values of N: 1 to 50.', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to ALIYUN::GWS::INSTANCE.', example='ALIYUN::GWS::INSTANCE'),
  tagKey?: [ string ](name='TagKey', description='The key of tag N. Valid values of N: 1 to 20.', example='TestKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateFotaTaskRequest {
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  taskUid?: string(name='TaskUid', description='The ID of the image update task. You can call the DescribeFotaTasks operation to obtain the value of this parameter.', example='aot-c4khwrp9ocml4****'),
  userStatus?: string(name='UserStatus', description='Specifies whether to automatically push the image update task.', example='Pending'),
}

model UpdateFotaTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateFotaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFotaTaskResponseBody(name='body'),
}

async function updateFotaTaskWithOptions(request: UpdateFotaTaskRequest, runtime: Util.RuntimeOptions): UpdateFotaTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskUid)) {
    query['TaskUid'] = request.taskUid;
  }
  if (!Util.isUnset(request.userStatus)) {
    query['UserStatus'] = request.userStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFotaTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFotaTask(request: UpdateFotaTaskRequest): UpdateFotaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFotaTaskWithOptions(request, runtime);
}

model UploadImageRequest {
  dataDiskSize?: int32(name='DataDiskSize', example='80'),
  description?: string(name='Description', example='test description'),
  enableSecurityCheck?: boolean(name='EnableSecurityCheck', example='true'),
  gpuCategory?: boolean(name='GpuCategory', example='true'),
  gpuDriverType?: string(name='GpuDriverType', example='gpu_grid9'),
  imageName?: string(name='ImageName', example='Win10_Test'),
  licenseType?: string(name='LicenseType', example='Auto'),
  osType?: string(name='OsType', example='Windows'),
  ossObjectPath?: string(name='OssObjectPath', example='https://ossbucket:endpoint/object'),
  protocolType?: string(name='ProtocolType', example='HDX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UploadImageResponseBody = {
  imageId?: string(name='ImageId', example='m-d4dwr5tgrgvd****'),
  requestId?: string(name='RequestId', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A****'),
}

model UploadImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadImageResponseBody(name='body'),
}

async function uploadImageWithOptions(request: UploadImageRequest, runtime: Util.RuntimeOptions): UploadImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDiskSize)) {
    query['DataDiskSize'] = request.dataDiskSize;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableSecurityCheck)) {
    query['EnableSecurityCheck'] = request.enableSecurityCheck;
  }
  if (!Util.isUnset(request.gpuCategory)) {
    query['GpuCategory'] = request.gpuCategory;
  }
  if (!Util.isUnset(request.gpuDriverType)) {
    query['GpuDriverType'] = request.gpuDriverType;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.licenseType)) {
    query['LicenseType'] = request.licenseType;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ossObjectPath)) {
    query['OssObjectPath'] = request.ossObjectPath;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadImageWithOptions(request, runtime);
}

model VerifyCenRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.

*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the exact Alibaba Cloud account.', example='102681951715****'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the workspace.', example='47.100.XX.XX'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the SendVerifyCode operation to obtain the verification code.', example='12****'),
}

model VerifyCenResponseBody = {
  cidrBlocks?: [ string ](name='CidrBlocks', description='The three random IPv4 CIDR blocks that are recommended. If the returned value of the Status parameter is Conflict, this parameter is returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AF9D857-AE96-53D6-B317-5DD665EC4EC0'),
  routeEntries?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The CIDR block of the route.', example='172.16.111.3****'),
      nextHopInstanceId?: string(name='NextHopInstanceId', description='The ID of the network instance that is attached to the route.', example='vpc-uf62bu0xs5j8md54p****'),
      regionId?: string(name='RegionId', description='The ID of the region where the route resides.', example='cn-hangzhou'),
      status?: string(name='Status', description='The verification result for a route. Valid values:

*   Access: The route verification succeeds.
*   Conflict: A CIDR block conflict exists.', example='Access'),
    }
  ](name='RouteEntries', description='The information about the routes of the CEN instance.'),
  status?: string(name='Status', description='The verification result. Valid values:

*   Access: The route verification succeeds. If the verification result for all routes succeeds, Access is returned for this parameter.
*   Conflict: A CIDR block conflict exists. If the verification result of at least one route is Conflict, Conflict is returned for this parameter.
*   InvalidCen.ParameterCenInstanceId: The ID of the CEN instance and the ID of the Alibaba Cloud account are invalid. The CEN instance does not belong to the Alibaba Cloud account.
*   InvalidCen.CenUidInvalid: The ID of the Alibaba Cloud account is invalid or the Alibaba Cloud account is not granted the required permissions to access Elastic Desktop Service (EDS).
*   VerifyCode.InvalidTokenCode: The verification code is invalid.
*   VerifyCode.ReachTokenRetryTime: The retries of entering the verification code reaches the upper limit.', example='Access'),
}

model VerifyCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCenResponseBody(name='body'),
}

async function verifyCenWithOptions(request: VerifyCenRequest, runtime: Util.RuntimeOptions): VerifyCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCen(request: VerifyCenRequest): VerifyCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCenWithOptions(request, runtime);
}

