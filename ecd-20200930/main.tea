/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CdsFileShareLinkModel {
  accessCount?: long(name='AccessCount'),
  createTime?: string(name='CreateTime'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  disableDownload?: boolean(name='DisableDownload'),
  disablePreview?: boolean(name='DisablePreview'),
  disableSave?: boolean(name='DisableSave'),
  downloadCount?: long(name='DownloadCount'),
  downloadLimit?: long(name='DownloadLimit'),
  driveId?: string(name='DriveId'),
  expiration?: string(name='Expiration'),
  expired?: boolean(name='Expired'),
  fileIds?: string(name='FileIds'),
  modifiyTime?: string(name='ModifiyTime'),
  previewCount?: long(name='PreviewCount'),
  previewLimit?: long(name='PreviewLimit'),
  reportCount?: long(name='ReportCount'),
  saveCount?: long(name='SaveCount'),
  saveLimit?: long(name='SaveLimit'),
  shareId?: string(name='ShareId'),
  shareLink?: string(name='ShareLink'),
  shareName?: string(name='ShareName'),
  sharePwd?: string(name='SharePwd'),
  status?: string(name='Status'),
  videoPreviewCount?: long(name='VideoPreviewCount'),
}

model FilePermissionMember {
  cdsIdentity?: {
    id?: string(name='Id'),
    type?: string(name='Type'),
  }(name='CdsIdentity'),
  disinheritSubGroup?: boolean(name='DisinheritSubGroup'),
  expireTime?: long(name='ExpireTime'),
  roleId?: string(name='RoleId'),
}

model ActivateOfficeSiteRequest {
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-803704****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ActivateOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model ActivateOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateOfficeSiteResponseBody(name='body'),
}

async function activateOfficeSiteWithOptions(request: ActivateOfficeSiteRequest, runtime: Util.RuntimeOptions): ActivateOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateOfficeSite(request: ActivateOfficeSiteRequest): ActivateOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateOfficeSiteWithOptions(request, runtime);
}

model AddDevicesRequest {
  clientType?: int32(name='ClientType', description='The type of the Alibaba Cloud Workspace client that runs on the device.

*   1: the hardware client
*   2: the software client', example='2'),
  deviceIds?: [ string ](name='DeviceIds', description='The list of devices.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model AddDevicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
}

model AddDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDevicesResponseBody(name='body'),
}

/**
  * You can add only one device to a tenant.
  *
  * @param request AddDevicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddDevicesResponse
 */
async function addDevicesWithOptions(request: AddDevicesRequest, runtime: Util.RuntimeOptions): AddDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can add only one device to a tenant.
  *
  * @param request AddDevicesRequest
  * @return AddDevicesResponse
 */
async function addDevices(request: AddDevicesRequest): AddDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDevicesWithOptions(request, runtime);
}

model AddFilePermissionRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk whose folder you want to share.', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk of the folder.', example='user01'),
  fileId?: string(name='FileId', description='The ID of the file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberList?: [ 
    {
      cdsIdentity?: {
        id?: string(name='Id', description='The ID of the user.', example='user01'),
        type?: string(name='Type', description='The type of the user.

Valid values:

*   <!-- -->

    IT_Group

    <!-- -->

    <!-- -->

*   <!-- -->

    IT_User

    <!-- -->

    <!-- -->', example='IT_User'),
      }(name='CdsIdentity', description='The user of the cloud disk.'),
      disinheritSubGroup?: boolean(name='DisinheritSubGroup', description='Specifies whether the users of the child group can inherit the folder permissions.', example='false'),
      expireTime?: long(name='ExpireTime', description='The time when the authorization expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The value never expires. You can specify a value that is predefined by the system for this parameter. Example: 4775500800000.', example='4775500800000'),
      roleId?: string(name='RoleId', description='The ID of the role to which you want to attach the folder permissions. To configure the folder permissions: you can specify a role or create custom operation permissions. You can use RoleId to specify a role. RoleId is mutually exclusive with ActionList. If you specify both of them, the value of RoleId takes precedence.

Valid values:

*   <!-- -->

    SystemFileEditorWithoutShareLink

    <!-- -->

    :

    <!-- -->

*   <!-- -->

    SystemFileUploaderAndDownloaderWithShareLink

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileDownloader

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileEditorWithoutDelete

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileOwner

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileDownloaderWithShareLink

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileUploaderAndViewer

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileViewer

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileEditor

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileUploaderWithShareLink

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileUploader

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileUploaderAndDownloader

    <!-- -->

    <!-- -->

*   <!-- -->

    SystemFileMetaViewer

    <!-- -->

    <!-- -->', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList', description='The members who are granted the folder permissions.'),
  regionId?: string(name='RegionId', description='The region ID of the folder. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model AddFilePermissionShrinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk whose folder you want to share.', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk of the folder.', example='user01'),
  fileId?: string(name='FileId', description='The ID of the file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberListShrink?: string(name='MemberList', description='The members who are granted the folder permissions.'),
  regionId?: string(name='RegionId', description='The region ID of the folder. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model AddFilePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddFilePermissionResponseBody(name='body'),
}

/**
  * You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
  *
  * @param tmpReq AddFilePermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddFilePermissionResponse
 */
async function addFilePermissionWithOptions(tmpReq: AddFilePermissionRequest, runtime: Util.RuntimeOptions): AddFilePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new AddFilePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.memberList)) {
    request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, 'MemberList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.memberListShrink)) {
    query['MemberList'] = request.memberListShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
  *
  * @param request AddFilePermissionRequest
  * @return AddFilePermissionResponse
 */
async function addFilePermission(request: AddFilePermissionRequest): AddFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addFilePermissionWithOptions(request, runtime);
}

model AddUserToDesktopGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds'),
  endUserIds?: [ string ](name='EndUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserToDesktopGroupResponseBody(name='body'),
}

async function addUserToDesktopGroupWithOptions(request: AddUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): AddUserToDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupIds)) {
    query['DesktopGroupIds'] = request.desktopGroupIds;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserToDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserToDesktopGroup(request: AddUserToDesktopGroupRequest): AddUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToDesktopGroupWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of cloud desktops. You can specify 1 to 20 cloud desktops.'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-ejtum8j5tfcw7****'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='63740E03-1B4B-5A18-AC27-2745A4F2****'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
  * After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
  * After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ApplyCoordinatePrivilegeRequest {
  coId?: string(name='CoId', example='co-fqsm6e8ee75w61fp9'),
  endUserId?: string(name='EndUserId', example='zhangsan'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  userType?: string(name='UserType', example='TENANT_ADMIN'),
  uuid?: string(name='Uuid', example='8b241d415da244a6936d6d6fa4f20f4d'),
}

model ApplyCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', example='C43EEAC3-84F8-5C1E-A067-4751C3D1422E'),
}

model ApplyCoordinatePrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCoordinatePrivilegeResponseBody(name='body'),
}

async function applyCoordinatePrivilegeWithOptions(request: ApplyCoordinatePrivilegeRequest, runtime: Util.RuntimeOptions): ApplyCoordinatePrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coId)) {
    query['CoId'] = request.coId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCoordinatePrivilege',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCoordinatePrivilege(request: ApplyCoordinatePrivilegeRequest): ApplyCoordinatePrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCoordinatePrivilegeWithOptions(request, runtime);
}

model ApplyCoordinationForMonitoringRequest {
  coordinatePolicyType?: string(name='CoordinatePolicyType', example='FULL_CONTROL'),
  endUserId?: string(name='EndUserId', example='alice'),
  initiatorType?: string(name='InitiatorType', example='ADMIN_INITIATE'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceCandidates?: [ 
    {
      ownerAliUid?: long(name='OwnerAliUid', example='130247021517****'),
      ownerEndUserId?: string(name='OwnerEndUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ecd-08zhejm3h7ilr****'),
      resourceName?: string(name='ResourceName', example='TestDesktop'),
      resourceProperties?: string(name='ResourceProperties', example='TestProperty'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='CLOUD_DESKTOP'),
    }
  ](name='ResourceCandidates'),
  uuid?: string(name='Uuid', example='62f2f1f252f04e0e9d8bc****'),
}

model ApplyCoordinationForMonitoringResponseBody = {
  coordinateFlowModels?: [ 
    {
      coId?: string(name='CoId', example='co-0sot77uale3****'),
      coordinateStatus?: string(name='CoordinateStatus', example='PENDING'),
      coordinateTicket?: string(name='CoordinateTicket', example='1VDQ0VTUw0KW0Rlc2t0b3BdDQpHV1Rva2VuPTAwTzgwL3liS25zUEVGdkF6eU1Pc1ExeHZWdmk4VEE3NFJvU1V1d0dPYm1BNkNJWklDMHVNQklWcjU2NS80S0ZQekQ4aGFTR0ZHelZqMTFGbkRpWWgvUFF1Zm1xSXNGdFRFNFRWMExJNit3TkU0L2RMb04wNXBBSE5Tc3M4dWFXY3lwWE****'),
      initiatorType?: string(name='InitiatorType', example='COORDINATOR_INITIATE_FORCE'),
      ownerUserId?: string(name='OwnerUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ecd-96vi03f9emqnl****'),
      resourceName?: string(name='ResourceName', example='TestDesktop'),
    }
  ](name='CoordinateFlowModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApplyCoordinationForMonitoringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCoordinationForMonitoringResponseBody(name='body'),
}

async function applyCoordinationForMonitoringWithOptions(request: ApplyCoordinationForMonitoringRequest, runtime: Util.RuntimeOptions): ApplyCoordinationForMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coordinatePolicyType)) {
    query['CoordinatePolicyType'] = request.coordinatePolicyType;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.initiatorType)) {
    query['InitiatorType'] = request.initiatorType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceCandidates)) {
    query['ResourceCandidates'] = request.resourceCandidates;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyCoordinationForMonitoring',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyCoordinationForMonitoring(request: ApplyCoordinationForMonitoringRequest): ApplyCoordinationForMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyCoordinationForMonitoringWithOptions(request, runtime);
}

model ApproveFotaUpdateRequest {
  appVersion?: string(name='AppVersion', example='0.0.1-D-20220513.143129'),
  desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ApproveFotaUpdateResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveFotaUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveFotaUpdateResponseBody(name='body'),
}

async function approveFotaUpdateWithOptions(request: ApproveFotaUpdateRequest, runtime: Util.RuntimeOptions): ApproveFotaUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appVersion)) {
    query['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApproveFotaUpdate',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveFotaUpdate(request: ApproveFotaUpdateRequest): ApproveFotaUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveFotaUpdateWithOptions(request, runtime);
}

model AssociateNetworkPackageRequest {
  networkPackageId?: string(name='NetworkPackageId', example='np-e0iodl3yzb62q****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AssociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AssociateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateNetworkPackageResponseBody(name='body'),
}

async function associateNetworkPackageWithOptions(request: AssociateNetworkPackageRequest, runtime: Util.RuntimeOptions): AssociateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateNetworkPackage(request: AssociateNetworkPackageRequest): AssociateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateNetworkPackageWithOptions(request, runtime);
}

model AttachCenRequest {
  cenId?: string(name='CenId', description='The ID of the request.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The operation that you want to perform. Set the value to **AttachCen**.', example='102681951715****'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the SendVerifyCode operation to obtain the verification code.', example='cn-hangzhou'),
  verifyCode?: string(name='VerifyCode', description='The ID of the workspace.', example='12****'),
}

model AttachCenResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachCenResponseBody(name='body'),
}

/**
  * The ID of the CEN instance.
  *
  * @param request AttachCenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachCenResponse
 */
async function attachCenWithOptions(request: AttachCenRequest, runtime: Util.RuntimeOptions): AttachCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the CEN instance.
  *
  * @param request AttachCenRequest
  * @return AttachCenResponse
 */
async function attachCen(request: AttachCenRequest): AttachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCenWithOptions(request, runtime);
}

model AttachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: int32(name='ClientType', description='The type of the Alibaba Cloud Workspace client that runs on the device.

*   1: the hardware client
*   2: the software client', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='111810122200F0C24CF7F1BF-*05AY****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the user.', example='moli'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The account type of the user.

*   SIMPLE: the convenience user
*   AD: the AD user', example='SIMPLE'),
}

model AttachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachEndUserResponseBody(name='body'),
}

async function attachEndUserWithOptions(request: AttachEndUserRequest, runtime: Util.RuntimeOptions): AttachEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEndUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachEndUser(request: AttachEndUserRequest): AttachEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEndUserWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. Valid values of N: 1 to 50. You cannot leave this parameter empty. The value can be up to 64 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://.](http://https://。)'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-78lhzpe7kjfnd****'),
  regionId?: string(name='RegionId', description='The region ID of the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-352282****'),
  shareId?: string(name='ShareId', description='The ID of the file sharing task.', example='7JQX1Fsw****'),
}

model CancelCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='200'),
  data?: boolean(name='Data', description='The data information.', example='true'),
  message?: string(name='Message', description='The error message that is returned if the request failed. This parameter is not returned if the value of Code is `success`.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request failed.', example='true'),
}

model CancelCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCdsFileShareLinkResponseBody(name='body'),
}

async function cancelCdsFileShareLinkWithOptions(request: CancelCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): CancelCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCdsFileShareLink(request: CancelCdsFileShareLinkRequest): CancelCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCdsFileShareLinkWithOptions(request, runtime);
}

model CancelCoordinationForMonitoringRequest {
  coIds?: [ string ](name='CoIds'),
  endUserId?: string(name='EndUserId', example='alice'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  userType?: string(name='UserType', example='TENANT_ADMIN'),
}

model CancelCoordinationForMonitoringResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelCoordinationForMonitoringResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCoordinationForMonitoringResponseBody(name='body'),
}

async function cancelCoordinationForMonitoringWithOptions(request: CancelCoordinationForMonitoringRequest, runtime: Util.RuntimeOptions): CancelCoordinationForMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coIds)) {
    query['CoIds'] = request.coIds;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCoordinationForMonitoring',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCoordinationForMonitoring(request: CancelCoordinationForMonitoringRequest): CancelCoordinationForMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCoordinationForMonitoringWithOptions(request, runtime);
}

model CancelCopyImageRequest {
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCopyImageResponseBody(name='body'),
}

async function cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: Util.RuntimeOptions): CancelCopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCopyImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCopyImageWithOptions(request, runtime);
}

model ClonePolicyGroupRequest {
  name?: string(name='Name', example='testPolicyGroupName'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ClonePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', example='pg-7jcaznnx6go6n****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ClonePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClonePolicyGroupResponseBody(name='body'),
}

async function clonePolicyGroupWithOptions(request: ClonePolicyGroupRequest, runtime: Util.RuntimeOptions): ClonePolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClonePolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clonePolicyGroup(request: ClonePolicyGroupRequest): ClonePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return clonePolicyGroupWithOptions(request, runtime);
}

model CompleteCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-shanghai+cds-465878****'),
  endUserId?: string(name='EndUserId', description='The name of the end user.', example='test0'),
  fileId?: string(name='FileId', description='The file ID. An ID is the unique identifier of a file.', example='635a316c94f40f35f5354da29b2aee88c9d1****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the DescribeRegions operation to query the most recent region list.', example='cn-hangzhou'),
  uploadId?: string(name='UploadId', description='The ID of the file uploading task.', example='6C48B55A1FAC4E1A9E0579059514****'),
}

model CompleteCdsFileResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05C2791F-41A7-5E7C-B5E4-1401FD0E****'),
}

model CompleteCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CompleteCdsFileResponseBody(name='body'),
}

async function completeCdsFileWithOptions(request: CompleteCdsFileRequest, runtime: Util.RuntimeOptions): CompleteCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.uploadId)) {
    query['UploadId'] = request.uploadId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompleteCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function completeCdsFile(request: CompleteCdsFileRequest): CompleteCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeCdsFileWithOptions(request, runtime);
}

model ConfigADConnectorTrustRequest {
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-778418****'),
  rdsLicenseDomain?: boolean(name='RdsLicenseDomain'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  trustKey?: string(name='TrustKey', example='password123***'),
}

model ConfigADConnectorTrustResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorTrustResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigADConnectorTrustResponseBody(name='body'),
}

async function configADConnectorTrustWithOptions(request: ConfigADConnectorTrustRequest, runtime: Util.RuntimeOptions): ConfigADConnectorTrustResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.rdsLicenseDomain)) {
    query['RdsLicenseDomain'] = request.rdsLicenseDomain;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.trustKey)) {
    query['TrustKey'] = request.trustKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigADConnectorTrust',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configADConnectorTrust(request: ConfigADConnectorTrustRequest): ConfigADConnectorTrustResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorTrustWithOptions(request, runtime);
}

model ConfigADConnectorUserRequest {
  domainPassword?: string(name='DomainPassword', description='The password of the AD user that has the permissions to join computers to domains.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the AD user that has the permissions to join computers to domains.

After the username is configured, the cloud desktops in the same AD workspace are joined to the specified OU.', example='Administrator'),
  OUName?: string(name='OUName', description='The name of the OU in the AD domain. You can call the [ListUserAdOrganizationUnits](~~311259~~) to obtain the OU name.', example='example.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-778418****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ConfigADConnectorUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigADConnectorUserResponseBody(name='body'),
}

async function configADConnectorUserWithOptions(request: ConfigADConnectorUserRequest, runtime: Util.RuntimeOptions): ConfigADConnectorUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigADConnectorUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configADConnectorUser(request: ConfigADConnectorUserRequest): ConfigADConnectorUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorUserWithOptions(request, runtime);
}

model CopyCdsFileRequest {
  autoRename?: boolean(name='AutoRename', description='Specifies whether to automatically rename the file if a file that has the same name exists in the folder to which you want to copy the file. Default value: false.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-352282****'),
  endUserId?: string(name='EndUserId', description='The user ID that you want to use to access the cloud disk.', example='user01'),
  fileId?: string(name='FileId', description='The file ID. You can call the CreateCdsFile operation to query the file ID.', example='640985a0ca2f71f489d2497682ca0bf468de****'),
  fileReceiverId?: string(name='FileReceiverId', description='目标复制文件所在的个人空间ID（即UserId，您可以在DescribeCloudDriveUsers接口返回的报文中获取。）或者目标复制文件所在的团队空间ID（即GroupId，您可以在DescribeCloudDriveGroups接口返回的报文中获取。）
> FileReceiverId和FileReceiverType都为空时，默认复制到文件所在的个人空间。
>', example='user02'),
  fileReceiverType?: string(name='FileReceiverType', description='文件所属的空间类型。', example='user'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder of the folder to which you want to copy the file. If you want to copy the file to the root directory, set this parameter to root.', example='root'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CopyCdsFileResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  copyCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', description='The ID of the asynchronous task. This parameter is not returned if you copy a file. This parameter is returned if you copy a folder in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.', example='4221bf6e6ab43a255edc4463bffa6f5f5d31****'),
    fileId?: string(name='FileId', description='The ID of the copied file or folder.', example='6400727cb878821bcb414615a609b4072463****'),
  }(name='CopyCdsFileModel', description='The details about the file copying.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='93AD30C1-16B8-5C54-AD23-A51FF53F****'),
  success?: string(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CopyCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyCdsFileResponseBody(name='body'),
}

async function copyCdsFileWithOptions(request: CopyCdsFileRequest, runtime: Util.RuntimeOptions): CopyCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRename)) {
    query['AutoRename'] = request.autoRename;
  }
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileReceiverId)) {
    query['FileReceiverId'] = request.fileReceiverId;
  }
  if (!Util.isUnset(request.fileReceiverType)) {
    query['FileReceiverType'] = request.fileReceiverType;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyCdsFile(request: CopyCdsFileRequest): CopyCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyCdsFileWithOptions(request, runtime);
}

model CopyImageRequest {
  destinationDescription?: string(name='DestinationDescription', example='This is a test.'),
  destinationImageName?: string(name='DestinationImageName', example='Office_Shanghai'),
  destinationRegionId?: string(name='DestinationRegionId', example='cn-shenzhen'),
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId', example='m-2g65ljy3ynrdq****'),
  requestId?: string(name='RequestId', example='28A40F12-F340-442B-A35F-46EF6A03****'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyImageResponseBody(name='body'),
}

async function copyImageWithOptions(request: CopyImageRequest, runtime: Util.RuntimeOptions): CopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationDescription)) {
    query['DestinationDescription'] = request.destinationDescription;
  }
  if (!Util.isUnset(request.destinationImageName)) {
    query['DestinationImageName'] = request.destinationImageName;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CreateADConnectorDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The AD trust password.', example='Internet'),
  directoryName?: string(name='DirectoryName', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='testDirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress', description='The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.', example='127.0.**.**'),
  domainName?: string(name='DomainName', description='The IP address of the DNS server of the enterprise AD system.', example='corp.example.com'),
  domainPassword?: string(name='DomainPassword', description='Specifies whether to grant the permissions of the local administrator to the regular user of the cloud desktop.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The name of the AD directory. The name must be 2 to 255 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='sAMAccountName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='The DNS address of the enterprise AD subdomain.\\
If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='true'),
  mfaEnabled?: boolean(name='MfaEnabled', description='The information that is returned.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the AD directory.', example='cn-hangzhou'),
  specification?: long(name='Specification', description='The password of the domain administrator. The password can be up to 64 characters in length.', example='1'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='Details of the vSwitch IDs. You can specify only one vSwitch ID.', example='127.0.**.**'),
  subDomainName?: string(name='SubDomainName', description='The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.', example='child.example.com'),
  vSwitchId?: [ string ](name='VSwitchId', description='The username of the domain administrator. The username can be up to 64 characters in length.', example='vsw-bp19ocz3erfx15uon****'),
}

model CreateADConnectorDirectoryResponseBody = {
  adConnectors?: [ 
    {
      address?: string(name='Address', example='127.0.**.**'),
    }
  ](name='AdConnectors'),
  directoryId?: string(name='DirectoryId', description='CreateADConnectorDirectory', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  requestId?: string(name='RequestId', description='Creates an Active Directory (AD) directory.', example='3FE99D5E-93A1-493F-B1CB-0ABD4D05BEFF'),
  trustPassword?: string(name='TrustPassword', description='The DNS address of the enterprise AD subdomain.', example='82Tg****'),
}

model CreateADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateADConnectorDirectoryResponseBody(name='body'),
}

/**
  * The ID of the vSwitch.
  *
  * @param request CreateADConnectorDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateADConnectorDirectoryResponse
 */
async function createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): CreateADConnectorDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateADConnectorDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the vSwitch.
  *
  * @param request CreateADConnectorDirectoryRequest
  * @return CreateADConnectorDirectoryResponse
 */
async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorDirectoryWithOptions(request, runtime);
}

model CreateADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for Windows hosts.', example='beijing-ad01'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the Internet access package. Valid values: 0 to 200.\\
If you do not specify this parameter or you set this parameter to 0, Internet access is disabled.', example='1'),
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.

*   If you do not specify CenId or the CEN instance that is specified by CenId belongs to the current Alibaba Cloud account, leave this parameter empty.
*   If you specify CenId and the CEN instance that is specified by CenId belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.', example='102681951715****'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block in the secure office network of the workspace. The IPv4 CIDR block that the system uses to create a virtual private cloud (VPC) for the workspace. We recommend that you set the IPv4 CIDR block to 10.0.0.0/12, 172.16.0.0/12, 192.168.0.0/16, or a subnet of these CIDR blocks. If you set the IPv4 CIDR block to 10.0.0.0/12 or 172.16.0.0/12, the mask is 1224 bits in length. If you set the IPv4 CIDR block to 192.168.0.0/16, the mask is 1624 bits in length.', example='47.100.XX.XX'),
  desktopAccessType?: string(name='DesktopAccessType', description='The connection method that is used to connect clients to cloud desktops. Valid values:

*   Internet: connects clients to cloud desktops only over the Internet.
*   VPC: connects clients to cloud desktops only over a VPC.
*   Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method based on your business requirements when you connect to your cloud desktop from a client.

Default value: Internet

> VPC connections are established by using Alibaba Cloud PrivateLink. You can use PrivateLink free of charge. If you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='Internet'),
  dnsAddress?: [ string ](name='DnsAddress', description='The IP address of the DNS server of the enterprise AD system. You can specify only one IP address.', example='192.168.XX.XX'),
  domainName?: string(name='DomainName', description='The domain name of the enterprise AD system. You can register each domain name only once.', example='example.com'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The password can be up to 64 characters in length.', example='testPassword'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

> Specify the username by using sAMAccountName instead of userPrincipalName.', example='Administrator'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the permissions of the local administrator to end users of the cloud desktops that belong to the workspace. Default value: `true`', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access.', example='true'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA).', example='false'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace. The name must be 2 to 255 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).\\
Default value: null', example='test'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol. Set the value to ASP.', example='ASP'),
  regionId?: string(name='RegionId', description='The region ID of the workspace.', example='cn-hangzhou'),
  specification?: long(name='Specification', description='The type of the AD connector.

*   1: General
*   2: Advanced', example='1'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the enterprise AD subdomain. If you specify `SubDomainName` but do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='192.168.XX.XX'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the enterprise AD subdomain.', example='child.example.com'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that is specified by CenId belongs to another Alibaba Cloud account, you must call the SendVerifyCode operation to obtain the verification code.', example='12****'),
}

model CreateADConnectorOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateADConnectorOfficeSiteResponseBody(name='body'),
}

/**
  * *   When you create a workspace of the enterprise AD account type, AD connectors are automatically created to allow you to connect to enterprise AD systems. You are charged for the AD connectors. For more information, see [Billing overview](~~188395~~).
  * *   After you call this operation to create a workspace of the enterprise AD account type, perform the following steps to configure the AD domain: 1. Configure the conditional forwarder in the Domain Name System (DNS) server. 2. Configure the trust relationship in the AD domain server, and call the [ConfigADConnectorTrust](~~311258~~) operation to configure the trust relationship for the workspace of the enterprise AD account type. 3. Call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the organizational unit (OU) details of the AD domain. Then, call the [ConfigADConnectorUser](~~311262~~) operation to specify an OU and an administrator for the workspace of the enterprise AD account type.
  *     **
  *     **Note**If you specify DomainUserName and DomainPassword when you create a workspace of the enterprise AD account type, you must configure only the conditional forwarder. If you do not specify DomainUserName or DomainPassword, you must configure the conditional forwarder, trust relationship, and OU.
  * For more information, see [Create a workspace of the enterprise AD account type](~~214469~~).
  *
  * @param request CreateADConnectorOfficeSiteRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateADConnectorOfficeSiteResponse
 */
async function createADConnectorOfficeSiteWithOptions(request: CreateADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateADConnectorOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   When you create a workspace of the enterprise AD account type, AD connectors are automatically created to allow you to connect to enterprise AD systems. You are charged for the AD connectors. For more information, see [Billing overview](~~188395~~).
  * *   After you call this operation to create a workspace of the enterprise AD account type, perform the following steps to configure the AD domain: 1. Configure the conditional forwarder in the Domain Name System (DNS) server. 2. Configure the trust relationship in the AD domain server, and call the [ConfigADConnectorTrust](~~311258~~) operation to configure the trust relationship for the workspace of the enterprise AD account type. 3. Call the [ListUserAdOrganizationUnits](~~311259~~) operation to obtain the organizational unit (OU) details of the AD domain. Then, call the [ConfigADConnectorUser](~~311262~~) operation to specify an OU and an administrator for the workspace of the enterprise AD account type.
  *     **
  *     **Note**If you specify DomainUserName and DomainPassword when you create a workspace of the enterprise AD account type, you must configure only the conditional forwarder. If you do not specify DomainUserName or DomainPassword, you must configure the conditional forwarder, trust relationship, and OU.
  * For more information, see [Create a workspace of the enterprise AD account type](~~214469~~).
  *
  * @param request CreateADConnectorOfficeSiteRequest
  * @return CreateADConnectorOfficeSiteResponse
 */
async function createADConnectorOfficeSite(request: CreateADConnectorOfficeSiteRequest): CreateADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorOfficeSiteWithOptions(request, runtime);
}

model CreateAndBindNasFileSystemRequest {
  description?: string(name='Description', example='newDescription'),
  desktopGroupId?: string(name='DesktopGroupId', example='dg-fh0vdzyh6rdc*****'),
  encryptType?: int32(name='EncryptType', example='0'),
  endUserIds?: [ string ](name='EndUserIds'),
  fileSystemName?: string(name='FileSystemName', example='szy-asp-upm-test'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-15657*****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  storageType?: string(name='StorageType', example='Capacity'),
}

model CreateAndBindNasFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
}

model CreateAndBindNasFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAndBindNasFileSystemResponseBody(name='body'),
}

async function createAndBindNasFileSystemWithOptions(request: CreateAndBindNasFileSystemRequest, runtime: Util.RuntimeOptions): CreateAndBindNasFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.fileSystemName)) {
    query['FileSystemName'] = request.fileSystemName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAndBindNasFileSystem',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAndBindNasFileSystem(request: CreateAndBindNasFileSystemRequest): CreateAndBindNasFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAndBindNasFileSystemWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression for periodic scheduling.', example='0 0 2 ? * 1-7'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='test_auto_policy'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of automatic snapshots. Unit: days. Valid values:

*   \\-1: Automatic snapshots are retained until they are deleted.
*   1 to 65536: Automatic snapshots are retained for the specified number of days.', example='30'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3hpa78d0qyt99****'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateBundleRequest {
  bundleName?: string(name='BundleName', description='The name of the desktop template.', example='testBundleName'),
  description?: string(name='Description', description='The description of the desktop template.', example='test'),
  desktopType?: string(name='DesktopType', description='The language of the OS. This parameter is available only for system images. Valid values:

*   zh-CN: Simplified Chinese
*   zh-HK: Traditional Chinese (Hong Kong)
*   en-US: English
*   ja-JP: Japanese', example='ecd.basic.large'),
  imageId?: string(name='ImageId', description='The type of the cloud desktop. You can call the DescribeBundles operation to query the cloud desktop templates and obtain the supported desktop type from the value of the DesktopType parameter.

>  You can select GPU-accelerated desktop types only when you use GPU-accelerated images.', example='m-4zfb6zj728hhr****'),
  language?: string(name='Language', description='The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

For more information about the differences between disks at different PLs, see [Enhanced SSDs](~~122389~~).', example='zh-CN'),
  regionId?: string(name='RegionId', description='The size of data disk N. You can configure only one data disk. Unit: GiB.

The value of this parameter must be consistent with the data disk size supported by the cloud desktop type. For more information, see [Cloud desktop types](~~188609~~).

>  The value of the UserDiskSizeGib parameter in the template must be greater than that of the DataDiskSize parameter in the image.', example='cn-hangzhou'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The size of the system disk. Unit: GiB.

The value of this parameter must be consistent with the system disk size supported by the cloud desktop type. For more information, see [Cloud desktop types](~~188609~~).', example='PL1'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The operation that you want to perform. Set the value to **CreateBundle**.', example='80'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The ID of the request.', example='PL1'),
  userDiskSizeGib?: [ int32 ](name='UserDiskSizeGib', example='70'),
}

model CreateBundleResponseBody = {
  bundleId?: string(name='BundleId', example='b-cezrnfgecbich****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateBundleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBundleResponseBody(name='body'),
}

/**
  * The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:
  * *   PL0
  * *   PL1
  * *   PL2
  * *   PL3
  * For more information about the differences between disks at different PLs, see [Enhanced SSDs](~~122389~~).
  *
  * @param request CreateBundleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateBundleResponse
 */
async function createBundleWithOptions(request: CreateBundleRequest, runtime: Util.RuntimeOptions): CreateBundleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleName)) {
    query['BundleName'] = request.bundleName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskPerformanceLevel)) {
    query['RootDiskPerformanceLevel'] = request.rootDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.rootDiskSizeGib)) {
    query['RootDiskSizeGib'] = request.rootDiskSizeGib;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskSizeGib)) {
    query['UserDiskSizeGib'] = request.userDiskSizeGib;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBundle',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:
  * *   PL0
  * *   PL1
  * *   PL2
  * *   PL3
  * For more information about the differences between disks at different PLs, see [Enhanced SSDs](~~122389~~).
  *
  * @param request CreateBundleRequest
  * @return CreateBundleResponse
 */
async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBundleWithOptions(request, runtime);
}

model CreateCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-82414*****'),
  conflictPolicy?: string(name='ConflictPolicy', description='The policy that is used when the file that you want to upload has the same name as an existing file in the cloud disk.

Valid values:

*   refuse

    <!-- -->

    :

    <!-- -->

    denies creating the file

    <!-- -->

    .

*   auto_rename

    <!-- -->

    :

    <!-- -->

    automatically renames the file

    <!-- -->

    .

*   ignore

    <!-- -->

    :

    <!-- -->

    allows the file to use the same name as the existing file in the cloud disk

    <!-- -->

    .

*   over_write

    <!-- -->

    :

    <!-- -->

    overwrites the existing file in the cloud disk

    <!-- -->

    .', example='ignore'),
  endUserId?: string(name='EndUserId', description='The user ID.', example='test1'),
  fileHash?: string(name='FileHash', description='The hash value of the SHA1 algorithm that is used by the file.', example='7C4A8D09CA3762AF61E59520943DC26494F8****'),
  fileLength?: long(name='FileLength', description='The file size. Unit: bytes.', example='2048'),
  fileName?: string(name='FileName', description='The file name.', example='testFile.txt'),
  fileType?: string(name='FileType', description='The file type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
  parentFileId?: string(name='ParentFileId', description='The ID of the parent folder.', example='637c9163b453b1a384874264ba79f3f9eab9****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model CreateCdsFileResponseBody = {
  fileModel?: {
    fileId?: string(name='FileId'),
    uploadId?: string(name='UploadId'),
    uploadUrl?: string(name='UploadUrl'),
  }(name='FileModel'),
  requestId?: string(name='RequestId', description='The request ID.', example='2BAFE05D-FFB9-5938-96D0-08017DB9****'),
}

model CreateCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdsFileResponseBody(name='body'),
}

/**
  * After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
  *
  * @param request CreateCdsFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCdsFileResponse
 */
async function createCdsFileWithOptions(request: CreateCdsFileRequest, runtime: Util.RuntimeOptions): CreateCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileHash)) {
    query['FileHash'] = request.fileHash;
  }
  if (!Util.isUnset(request.fileLength)) {
    query['FileLength'] = request.fileLength;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.parentFileId)) {
    query['ParentFileId'] = request.parentFileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
  *
  * @param request CreateCdsFileRequest
  * @return CreateCdsFileResponse
 */
async function createCdsFile(request: CreateCdsFileRequest): CreateCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdsFileWithOptions(request, runtime);
}

model CreateCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-shanghai+cds-135515****'),
  description?: string(name='Description', description='The description of the file sharing task. The description must be 0 to 1,024 characters in length.'),
  disableDownload?: boolean(name='DisableDownload', description='Specifies whether to prohibit the download of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file download

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file download

    <!-- -->

    .', example='false'),
  disablePreview?: boolean(name='DisablePreview', description='Specifies whether to prohibit the preview of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file preview

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file preview

    <!-- -->

    .', example='false'),
  disableSave?: boolean(name='DisableSave', description='Specifies whether to prohibit the dump of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file dump

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file dump

    <!-- -->

    .', example='false'),
  downloadLimit?: long(name='DownloadLimit', description='The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='100'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='user01'),
  expiration?: string(name='Expiration', description='The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.', example='2020-06-28T11:33:00.000+08:00'),
  fileIds?: [ string ](name='FileIds', description='The file IDs.'),
  previewLimit?: long(name='PreviewLimit', description='The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be previewed.', example='100'),
  saveLimit?: long(name='SaveLimit', description='The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be dumped.', example='100'),
  shareName?: string(name='ShareName', description='The name of the file sharing task. If you leave this parameter empty, the file name that corresponds to the first ID in the file ID list is used. The name must be 0 to 128 characters in length.', example='view.txt'),
  sharePwd?: string(name='SharePwd', description='The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.', example='12345678'),
}

model CreateCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: CdsFileShareLinkModel(name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CreateCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCdsFileShareLinkResponseBody(name='body'),
}

async function createCdsFileShareLinkWithOptions(request: CreateCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): CreateCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    query['DisableDownload'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    query['DisablePreview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    query['DisableSave'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    query['DownloadLimit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.fileIds)) {
    query['FileIds'] = request.fileIds;
  }
  if (!Util.isUnset(request.previewLimit)) {
    query['PreviewLimit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.saveLimit)) {
    query['SaveLimit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    query['SharePwd'] = request.sharePwd;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCdsFileShareLink(request: CreateCdsFileShareLinkRequest): CreateCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCdsFileShareLinkWithOptions(request, runtime);
}

model CreateCloudDriveUsersRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-352282****'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the end users.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  userMaxSize?: long(name='UserMaxSize', description='The maximum storage space of an end user. Unit: bytes.', example='1024'),
}

model CreateCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05F0A7AE-17F1-53DF-BD99-ABF936FA****'),
}

model CreateCloudDriveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCloudDriveUsersResponseBody(name='body'),
}

async function createCloudDriveUsersWithOptions(request: CreateCloudDriveUsersRequest, runtime: Util.RuntimeOptions): CreateCloudDriveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userMaxSize)) {
    query['UserMaxSize'] = request.userMaxSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCloudDriveUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCloudDriveUsers(request: CreateCloudDriveUsersRequest): CreateCloudDriveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudDriveUsersWithOptions(request, runtime);
}

model CreateDesktopGroupRequest {
  allClassifyUsers?: boolean(name='AllClassifyUsers', description='The end users whom you want to add to all types of desktop groups.', example='Alice'),
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required.', example='1'),
  allowBufferCount?: int32(name='AllowBufferCount', description='Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not allow the system to reserve cloud desktops. N: allows the system to reserve N cloud desktops. The variable N must be an integer that ranges from 1 to 100.', example='1'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='true'),
  autoRenew?: boolean(name='AutoRenew', description='是否自动续费。', example='false'),
  bindAmount?: long(name='BindAmount', description='The number of sessions that are allowed per cloud desktop in a multi-session desktop group.', example='1'),
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of cloud desktops that you want to purchase. Valid values: 0 to 200.', example='3'),
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktops in the desktop group.', example='PrePaid'),
  classify?: string(name='Classify', description='The type of the desktop group.', example='teacher'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  comments?: string(name='Comments', description='The remarks on the desktop group.', example='test'),
  connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.', example='300000'),
  defaultInitDesktopCount?: int32(name='DefaultInitDesktopCount', description='The default number of cloud desktops to create when you create the desktop group. Default value: 1.', example='1'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='desktopGroupName1'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='hide'),
  endUserIds?: [ string ](name='EndUserIds', description='The end users that can use the desktop group.'),
  fileSystemId?: string(name='FileSystemId', description='The Apsara File Storage NAS (NAS) file system that is used after data roaming is enabled.', example='04f314****'),
  groupVersion?: int32(name='GroupVersion', description='桌面组版本。', example='2'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum period of time for which a session remains idle. If an end user performs no operations on a cloud desktop by using keyboards or mouses during a session, the session becomes idle. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.', example='300000'),
  keepDuration?: long(name='KeepDuration', description='The retention period of the cloud desktop after the end user disconnects from the cloud desktop. Unit: milliseconds.', example='6000'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.', example='50'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.', example='1'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  ownType?: int32(name='OwnType', description='The type of the desktop group.', example='0'),
  period?: int32(name='Period', description='The subscription period of the cloud desktops in the desktop group. The unit is specified by the PeriodUnit parameter. The Period parameter takes effect only if you set the ChargeType parameter to PrePaid.

*   Valid values if you set the PeriodUnit parameter to Month:

    *   1
    *   2
    *   3
    *   6

*   Valid values if you set the PeriodUnit parameter to Year:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-9c2d6t2dwflqr****'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable data roaming.', example='false'),
  ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.', example='0.5'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resetType?: long(name='ResetType', description='Specifies which type of the disk to reset for cloud desktops in the desktop group.', example='0'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy.

> This parameter is unavailable.', example='hide'),
  stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud desktop is stopped. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a stopped cloud desktop, the cloud desktop automatically starts. Unit: milliseconds.', example='300000'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create the desktop group.', example='hide'),
}

model CreateDesktopGroupResponseBody = {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  orderIds?: [ string ](name='OrderIds', description='The IDs of the orders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
}

model CreateDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDesktopGroupResponseBody(name='body'),
}

/**
  * # Description
  * Before you call this operation to create a desktop group, make sure that the following operations are complete:
  * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](~~290959~~) of desktop groups.
  * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
  *
  * @param request CreateDesktopGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDesktopGroupResponse
 */
async function createDesktopGroupWithOptions(request: CreateDesktopGroupRequest, runtime: Util.RuntimeOptions): CreateDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allClassifyUsers)) {
    query['AllClassifyUsers'] = request.allClassifyUsers;
  }
  if (!Util.isUnset(request.allowAutoSetup)) {
    query['AllowAutoSetup'] = request.allowAutoSetup;
  }
  if (!Util.isUnset(request.allowBufferCount)) {
    query['AllowBufferCount'] = request.allowBufferCount;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bindAmount)) {
    query['BindAmount'] = request.bindAmount;
  }
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.buyDesktopsCount)) {
    query['BuyDesktopsCount'] = request.buyDesktopsCount;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.classify)) {
    query['Classify'] = request.classify;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.comments)) {
    query['Comments'] = request.comments;
  }
  if (!Util.isUnset(request.connectDuration)) {
    query['ConnectDuration'] = request.connectDuration;
  }
  if (!Util.isUnset(request.defaultInitDesktopCount)) {
    query['DefaultInitDesktopCount'] = request.defaultInitDesktopCount;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.groupVersion)) {
    query['GroupVersion'] = request.groupVersion;
  }
  if (!Util.isUnset(request.idleDisconnectDuration)) {
    query['IdleDisconnectDuration'] = request.idleDisconnectDuration;
  }
  if (!Util.isUnset(request.keepDuration)) {
    query['KeepDuration'] = request.keepDuration;
  }
  if (!Util.isUnset(request.loadPolicy)) {
    query['LoadPolicy'] = request.loadPolicy;
  }
  if (!Util.isUnset(request.maxDesktopsCount)) {
    query['MaxDesktopsCount'] = request.maxDesktopsCount;
  }
  if (!Util.isUnset(request.minDesktopsCount)) {
    query['MinDesktopsCount'] = request.minDesktopsCount;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.ownType)) {
    query['OwnType'] = request.ownType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.profileFollowSwitch)) {
    query['ProfileFollowSwitch'] = request.profileFollowSwitch;
  }
  if (!Util.isUnset(request.ratioThreshold)) {
    query['RatioThreshold'] = request.ratioThreshold;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.scaleStrategyId)) {
    query['ScaleStrategyId'] = request.scaleStrategyId;
  }
  if (!Util.isUnset(request.stopDuration)) {
    query['StopDuration'] = request.stopDuration;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  if (!Util.isUnset(request.volumeEncryptionKey)) {
    query['VolumeEncryptionKey'] = request.volumeEncryptionKey;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * # Description
  * Before you call this operation to create a desktop group, make sure that the following operations are complete:
  * *   You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](~~290959~~) of desktop groups.
  * *   Resources, such as workspaces, users, desktop templates, and policies, are created.
  *
  * @param request CreateDesktopGroupRequest
  * @return CreateDesktopGroupResponse
 */
async function createDesktopGroup(request: CreateDesktopGroupRequest): CreateDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopGroupWithOptions(request, runtime);
}

model CreateDesktopsRequest {
  amount?: int32(name='Amount', description='The number of cloud desktops that you want to create. Valid values: 1 to 300. Default value: 1.', example='1'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.````', example='false'),
  bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
  bundleModels?: [ 
    {
      amount?: int32(name='Amount', description='The number of cloud desktops that you want to create. Valid values: 1 to 300. Default value: 0.', example='1'),
      bundleId?: string(name='BundleId', description='The ID of the desktop template.', example='b-je9hani001wfn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
      endUserIds?: [ string ](name='EndUserIds', description='The users to whom you want to assign the cloud desktops.'),
      hostname?: string(name='Hostname', description='The hostname that you specify for the cloud desktop. You can only specify the hostname of a Windows cloud desktop in the workspace of the enterprise AD account type.

The hostname must meet the following requirements:

*   It must be 2 to 15 characters in length.
*   It can contain letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

If you create multiple cloud desktops, you can use the`  name_prefix[begin_number,bits]name_suffix ` format to determine the hostnames of the cloud desktops. For example, if you set Hostname to ecd-\\[1,4]-test, the hostname of the first cloud desktop is ecd-0001-test and the hostname of the second cloud desktop is ecd-0002-test. Other hostnames follow the same rule.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the ordered numbers in the hostname. begin_number: the start number. Valid values: 0 to 999999. Default value: 0. bits: the digit. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='BundleModels', description='The desktop templates that you want to use.'),
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PrePaid'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop. The name must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). It must start with a letter but cannot start with http:// or https://.', example='testDesktopName'),
  desktopNameSuffix?: boolean(name='DesktopNameSuffix', description='Specifies whether to automatically add a suffix to the cloud desktop name when you create multiple cloud desktops at a time.', example='false'),
  desktopTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting'),
      cronExpression?: string(name='CronExpression'),
      enforce?: boolean(name='Enforce'),
      interval?: int32(name='Interval'),
      operationType?: string(name='OperationType'),
      resetType?: string(name='ResetType'),
      timerType?: string(name='TimerType'),
    }
  ](name='DesktopTimers'),
  directoryId?: string(name='DirectoryId', description='This parameter is not available.', example='To be hidden.'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users that you want to authorize to use the cloud desktop. The cloud desktop is assigned to the users. You can specify IDs of 1 to 100 users.

*   Only one user can use the cloud desktop at a time.
*   If you do not specify the `EndUserId` parameter, the cloud desktop that you create is not assigned to users.', example='123456789'),
  groupId?: string(name='GroupId', description='The ID of the desktop group.', example='dg-boyczi8enfyc5****'),
  hostname?: string(name='Hostname', description='The hostname that you specify for the cloud desktop. You can specify only the hostname of a Windows cloud desktop in the workspace of the enterprise AD account type.

The hostname must meet the following requirements:

*   It must be 2 to 15 characters in length.
*   It can contain letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

If you create multiple cloud desktops, you can use the`  name_prefix[begin_number,bits]name_suffix ` format to determine the hostnames of the cloud desktops. For example, if you set Hostname to ecd-\\[1,4]-test, the hostname of the first cloud desktop is ecd-0001-test and the hostname of the second cloud desktop is ecd-0002-test. Other hostnames follow the same rule.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the ordered numbers in the hostname. begin_number: the start number. Valid values: 0 to 999999. Default value: 0. bits: the digit. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  period?: int32(name='Period', description='The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.

*   Valid values if the `PeriodUnit` parameter is set to `Month`:

    *   1
    *   2
    *   3
    *   6

*   Valid values if the `PeriodUnit` parameter is set to `Year`:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify 1 to 20 keys for a tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. You can specify 1 to 20 values for a tag.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the cloud desktop.'),
  userAssignMode?: string(name='UserAssignMode', description='The assignment mode of the cloud desktop.

> If you do not specify the `EndUserId` parameter, the cloud desktop that you create is not assigned to users.', example='ALL'),
  userCommands?: [ 
    {
      content?: string(name='Content', description='The content of the command.', example='bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****'),
      contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content (CommandContent).', example='Base64'),
      contentType?: string(name='ContentType', description='The language type of the command.', example='RunPowerShellScript'),
    }
  ](name='UserCommands', description='The custom command scripts of the user.'),
  userName?: string(name='UserName', description='This parameter is not available.', example='To be hidden.'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
  vpcId?: string(name='VpcId', description='This parameter is not available.', example='To be hidden.'),
}

model CreateDesktopsResponseBody = {
  desktopId?: [ string ](name='DesktopId', description='If multiple cloud desktops are created in a call, the IDs of the cloud desktops are returned.'),
  orderId?: string(name='OrderId', description='The ID of the order.

> This parameter is returned only when you set the ChargeType parameter to PrePaid.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDesktopsResponseBody(name='body'),
}

/**
  * 1\\. Before you create a cloud desktop in Elastic Desktop Service (EDS), make sure that the following operations are complete:
  * *   A workspace and a user are created. For more information, see the following topics:
  *     *   Create a workspace of the convenience account type and a convenience user: [CreateSimpleOfficeSite](~~215416~~) and [Create a convenience user](~~214472~~)
  *     *   Create a workspace of the enterprise Active Directory (AD) account type and an enterprise AD user: [CreateADConnectorOfficeSite](~~215417~~) and [Create an enterprise AD user](~~188619~~)
  * *   A cloud desktop template is created by calling the [CreateBundle](~~188883~~) operation, or an existing cloud desktop template is used.
  * *   A policy is created by calling the [CreatePolicyGroup](~~188889~~) operation, or an existing policy is used.
  * 2\\. A custom command script that can be automatically executed after you create the cloud desktop is prepared. You can customize a command script by using the UserCommands parameter.
  *
  * @param request CreateDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDesktopsResponse
 */
async function createDesktopsWithOptions(request: CreateDesktopsRequest, runtime: Util.RuntimeOptions): CreateDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleModels)) {
    query['BundleModels'] = request.bundleModels;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopNameSuffix)) {
    query['DesktopNameSuffix'] = request.desktopNameSuffix;
  }
  if (!Util.isUnset(request.desktopTimers)) {
    query['DesktopTimers'] = request.desktopTimers;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userAssignMode)) {
    query['UserAssignMode'] = request.userAssignMode;
  }
  if (!Util.isUnset(request.userCommands)) {
    query['UserCommands'] = request.userCommands;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  if (!Util.isUnset(request.volumeEncryptionKey)) {
    query['VolumeEncryptionKey'] = request.volumeEncryptionKey;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. Before you create a cloud desktop in Elastic Desktop Service (EDS), make sure that the following operations are complete:
  * *   A workspace and a user are created. For more information, see the following topics:
  *     *   Create a workspace of the convenience account type and a convenience user: [CreateSimpleOfficeSite](~~215416~~) and [Create a convenience user](~~214472~~)
  *     *   Create a workspace of the enterprise Active Directory (AD) account type and an enterprise AD user: [CreateADConnectorOfficeSite](~~215417~~) and [Create an enterprise AD user](~~188619~~)
  * *   A cloud desktop template is created by calling the [CreateBundle](~~188883~~) operation, or an existing cloud desktop template is used.
  * *   A policy is created by calling the [CreatePolicyGroup](~~188889~~) operation, or an existing policy is used.
  * 2\\. A custom command script that can be automatically executed after you create the cloud desktop is prepared. You can customize a command script by using the UserCommands parameter.
  *
  * @param request CreateDesktopsRequest
  * @return CreateDesktopsResponse
 */
async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsWithOptions(request, runtime);
}

model CreateDiskEncryptionServiceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateDiskEncryptionServiceResponseBody = {
  orderId?: string(name='OrderId', example='214552063030752'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', example='true'),
}

model CreateDiskEncryptionServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskEncryptionServiceResponseBody(name='body'),
}

async function createDiskEncryptionServiceWithOptions(request: CreateDiskEncryptionServiceRequest, runtime: Util.RuntimeOptions): CreateDiskEncryptionServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiskEncryptionService',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiskEncryptionService(request: CreateDiskEncryptionServiceRequest): CreateDiskEncryptionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskEncryptionServiceWithOptions(request, runtime);
}

model CreateImageRequest {
  autoCleanUserdata?: boolean(name='AutoCleanUserdata', example='false'),
  description?: string(name='Description', example='This is description.'),
  desktopId?: string(name='DesktopId', example='ecd-7w78ozhjcwa3u****'),
  diskType?: string(name='DiskType', example='ALL'),
  imageName?: string(name='ImageName', example='testImageName'),
  imageResourceType?: string(name='ImageResourceType', example='To be hidden.'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', example='s-2zefuwk8l6ytcgd3bf4o'),
  snapshotIds?: [ string ](name='SnapshotIds'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoCleanUserdata)) {
    query['AutoCleanUserdata'] = request.autoCleanUserdata;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageResourceType)) {
    query['ImageResourceType'] = request.imageResourceType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateNASFileSystemRequest {
  description?: string(name='Description', example='testDescription'),
  encryptType?: string(name='EncryptType', example='0'),
  name?: string(name='Name', example='testNAS'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  storageType?: string(name='StorageType', example='Capacity'),
}

model CreateNASFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId', example='04f314****'),
  fileSystemName?: string(name='FileSystemName', example='testNAS'),
  mountTargetDomain?: string(name='MountTargetDomain', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNASFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNASFileSystemResponseBody(name='body'),
}

async function createNASFileSystemWithOptions(request: CreateNASFileSystemRequest, runtime: Util.RuntimeOptions): CreateNASFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.encryptType)) {
    query['EncryptType'] = request.encryptType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNASFileSystem',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNASFileSystem(request: CreateNASFileSystemRequest): CreateNASFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNASFileSystemWithOptions(request, runtime);
}

model CreateNetworkPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal.', example='false'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Unit: Mbit/s.\\
Valid values for the pay-by-data-transfer type (PayByTraffic): 10 to 200. Valid values for the pay-by-bandwith type (PayByBandwidth): 10 to 1000.', example='10'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the pay-as-you-go Internet access package. Valid values: PayByTraffic: pay-by-data-transfer. PayByBandwidth: pay-by-bandwidth. Default value: PayByTraffic.', example='PayByTraffic'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  payType?: string(name='PayType', description='The billing method of the Internet access package.', example='PrePaid'),
  period?: int32(name='Period', description='The duration of the Internet access package.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of duration that you want to use for the Internet access package.', example='Month'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model CreateNetworkPackageResponseBody = {
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-amtp8e8q1o9e4****'),
  orderId?: string(name='OrderId', description='The ID of the bill.', example='234526262716724'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkPackageResponseBody(name='body'),
}

async function createNetworkPackageWithOptions(request: CreateNetworkPackageRequest, runtime: Util.RuntimeOptions): CreateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkPackage(request: CreateNetworkPackageRequest): CreateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkPackageWithOptions(request, runtime);
}

model CreatePolicyGroupRequest {
  appContentProtection?: string(name='AppContentProtection', description='Specifies whether to enable the anti-screenshot feature.

Valid values:

*   off: Anti-screenshot is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Anti-screenshot is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block that you want to access from the client. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client IP address whitelist.', example='North China Branch'),
    }
  ](name='AuthorizeAccessPolicyRule', description='The client IP address whitelists. Only the client IP addresses in whitelists can access the cloud desktop.'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the security group rule.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.

Valid values:

*   TCP

    <!-- -->

    <!-- -->

    <!-- -->

*   UDP

    <!-- -->

    <!-- -->

    <!-- -->

*   ALL: all protocols

    <!-- -->

    <!-- -->

    <!-- -->

*   GRE

    <!-- -->

    <!-- -->

    <!-- -->

*   ICMP: ICMP (IPv4)

    <!-- -->

    <!-- -->

    <!-- -->', example='tcp'),
      policy?: string(name='Policy', description='The authorization policy of the security group rule.

Valid values:

*   drop: denies all access requests

    <!-- -->

    <!-- -->

    If no denied messages are returned, the requests timed out or failed.

    <!-- -->

*   accept: accepts all access requests

    <!-- -->

    <!-- -->

    This value is the default value.

    <!-- -->', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.

*   If you set the IpProtocol parameter to TCP or UDP, the value range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set the IpProtocol parameter to ICMP, the start port number and the end port number are -1/-1.
*   If you set the IpProtocol parameter to GRE, the start port number and the end port number are -1/-1.
*   If you set the IpProtocol parameter to ALL, the start port number and the end port number are -1/-1.

For more information about the common ports of applications, see [Common ports](~~40724~~).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value specifies a higher priority.\\
Valid values: 1 to 60.\\
Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule.

Valid values:

*   outflow: outbound

    <!-- -->

    <!-- -->

    <!-- -->

*   inflow: inbound

    <!-- -->

    <!-- -->

    <!-- -->', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', description='The security group rules.'),
  cameraRedirect?: string(name='CameraRedirect', description='Specifies whether to enable the webcam redirection feature.

Valid values:

*   off: Webcam redirection is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Webcam redirection is enabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', description='The type of the client.

> By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.

Valid values:

*   html5: web clients

    <!-- -->

    <!-- -->

    <!-- -->

*   android: Android clients

    <!-- -->

    <!-- -->

    <!-- -->

*   linux: Alibaba Cloud Workspace clients

    <!-- -->

    <!-- -->

    <!-- -->

*   ios: iOS clients

    <!-- -->

    <!-- -->

    <!-- -->

*   windows: Windows clients

    <!-- -->

    <!-- -->

    <!-- -->

*   macos: macOS clients

    <!-- -->

    <!-- -->

    <!-- -->', example='windows'),
      status?: string(name='Status', description='Specifies whether a specific client type can be used to connect to the cloud desktop.

> By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.

Valid values:

*   OFF: Clients of the specified type cannot be used to connect to cloud desktops.

    <!-- -->

    <!-- -->

    <!-- -->

*   ON: Clients of the specified type can be used to connect to cloud desktops.

    <!-- -->

    <!-- -->

    <!-- -->', example='ON'),
    }
  ](name='ClientType', description='The logon methods. You can use this parameter to determine which clients can be used to connect to the cloud desktop.'),
  clipboard?: string(name='Clipboard', description='The permissions on the clipboard.

Valid values:

*   read: specifies one-way transfer

    <!-- -->

    <!-- -->

    You can copy data from your local computer to the cloud desktop, but cannot copy data from the cloud desktop to your local computer.

    <!-- -->

*   readwrite: specifies two-way transfer

    <!-- -->

    <!-- -->

    You can copy data between your local computer and the cloud desktop.

    <!-- -->

*   off: disables both one-way and two-way transfer

    <!-- -->

    <!-- -->

    You cannot copy data between your local computer and the cloud desktop. This value is the default value.

    <!-- -->', example='off'),
  domainList?: string(name='DomainList', description='Access control for domain names. The wildcard character (\\*) is supported for domain names. Separate multiple domain names with commas (,). Valid values:

*   off
*   on', example='off'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', description='Specifies whether to allow end users to seek assistance from the administrator. Valid values: ON OFF', example='ON'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', description='The switch for collaboration between end users. Valid values: ON OFF', example='ON'),
  gpuAcceleration?: string(name='GpuAcceleration', description='Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional design scenarios.

Valid values:

*   off

    <!-- -->

    <!-- -->

    <!-- -->

*   on

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  html5Access?: string(name='Html5Access', description='The policy for HTML5 client access.

> We recommend that you use the ClientType parameter to manage the type of Alibaba Cloud Workspace clients for desktop connection.

Valid values:

*   off: HTML5 client access is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: HTML5 client access is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer policy for HTML5 clients.

Valid values:

*   all: Files can be uploaded and downloaded between your computer and HTML5 clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   download: Files on HTML5 clients can be downloaded to your computer.

    <!-- -->

    <!-- -->

    <!-- -->

*   upload: Files on your computer can be uploaded to HTML5 clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   off: File transfer between HTML5 clients and your computer is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol that you want to use for network communication. Valid values: -TCP: Only TCP is allowed. -BOTH: Automatic switch between TCP and UDP is allowed. Default value: TCP.', example='both'),
  localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.

Valid values:

*   read: read-only

    <!-- -->

    <!-- -->

    The disks on your local computer are mapped to the cloud desktop. You can only read (copy) files on the local computer.

    <!-- -->

*   readwrite: read and write

    <!-- -->

    <!-- -->

    The disks on your local computer are mapped to the cloud desktop. You can read (copy) and modify files on your local computer.

    <!-- -->

*   off:

    <!-- -->

    <!-- -->

    The disks on your local computer are not mapped to the cloud desktop. This value is the default value.

    <!-- -->', example='off'),
  name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName'),
  netRedirect?: string(name='NetRedirect', description='Specifies whether to enable the network redirection feature.

Valid values:

*   off: Network redirection is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Network redirection is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  preemptLogin?: string(name='PreemptLogin', description='Specifies whether to allow user preemption.

> To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time. The default value of this parameter is `off`, and the value cannot be changed.', example='off'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser', description='The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.

> To improve user experience and ensure data security, we recommend that you disable the user preemption feature.', example='Alice'),
  printerRedirection?: string(name='PrinterRedirection', description='The policy for printer redirection.

Valid values:

*   off: Printer redirection is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Printer redirection is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
  recordContent?: string(name='RecordContent', description='Specifies whether to enable the custom screen recording feature.

Valid values:

*   off: Custom screen recording is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Custom screen recording is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='OFF'),
  recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30'),
  recording?: string(name='Recording', description='Specifies whether to enable screen recording.

Valid values:

*   ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends when the end users disconnect from the cloud desktops.

    <!-- -->

    <!-- -->

    <!-- -->

*   PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must set the start time and end time for the recording period.

    <!-- -->

    <!-- -->

    <!-- -->

*   OFF: Screen recording is disabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='OFF'),
  recordingAudio?: string(name='RecordingAudio', description='Specifies whether to record audio data during the screen recording. Valid values:

*   on: records audio and video data
*   off: records only video data', example='on'),
  recordingDuration?: int32(name='RecordingDuration', description='The duration from the time when the screen recording starts to the time when the screen recording stops. If you specify the Recording parameter, you must also specify the RecordingDuration parameter. When the specified duration ends, a recording file is generated.', example='15'),
  recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording stops. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.', example='08:59:00'),
  recordingExpires?: long(name='RecordingExpires', description='The duration in which the screen recording is valid. Unit: days.', example='15'),
  recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording.

Valid values:

*   2

*   5

*  10

*   15', example='2'),
  recordingStartTime?: string(name='RecordingStartTime', description='The time when screen recording starts. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.', example='08:00:00'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  remoteCoordinate?: string(name='RemoteCoordinate', description='The permission to control the keyboard and the mouse during remote assistance.

Valid values:

*   \\-

    <!-- -->

    optionalControl

    <!-- -->

    : By default, this feature is disabled. You can enable it by applying permissions.

    <!-- -->

*   fullControl: The permission is granted.

    <!-- -->

    <!-- -->

    <!-- -->

*   disableControl: The permission is revoked.

    <!-- -->

    <!-- -->

    <!-- -->', example='fullControl'),
  scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: The policy takes effect globally.
*   IP: The policy takes effect for specified IP addresses.', example='GLOBAL'),
  scopeValue?: [ string ](name='ScopeValue', description='The effective CIDR block ranges. If you set the Scope parameter to IP, you must specify this parameter.'),
  usbRedirect?: string(name='UsbRedirect', description='Specifies whether to enable USB redirection.

Valid values:

*   off: USB redirection is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: USB redirection is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description', description='The description of the rule.', example='Test rule'),
      deviceClass?: string(name='DeviceClass', description='The class of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
      productId?: string(name='ProductId', description='The ID of the service.', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', description='The type of USB redirection.

Valid values:

*   1: allows USB redirection

    <!-- -->

    <!-- -->

    <!-- -->

*   2: forbids USB redirection

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
      usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.

Valid values:

*   1: by device class

    <!-- -->

    <!-- -->

    <!-- -->

*   2: by device vendor

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
      vendorId?: string(name='VendorId', description='The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf\\_1.pdf).', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', description='The USB redirection rules.'),
  videoRedirect?: string(name='VideoRedirect', description='Specifies whether to enable the multimedia redirection feature. Valid values:

*   on: Multimedia redirection is enabled.
*   off: Multimedia redirection is disabled.', example='on'),
  visualQuality?: string(name='VisualQuality', description='The policy for image display quality.

Valid values:

*   high

    <!-- -->

    <!-- -->

    <!-- -->

*   low

    <!-- -->

    <!-- -->

    <!-- -->

*   lossless

    <!-- -->

    <!-- -->

    <!-- -->

*   medium: adaptive. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->', example='medium'),
  watermark?: string(name='Watermark', description='Specifies whether to enable watermarking.

Valid values:

*   off: Watermarking is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Watermarking is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
  watermarkColor?: int32(name='WatermarkColor', description='The font color of the watermark. Valid values: 0 to 16777215.', example='0'),
  watermarkDegree?: double(name='WatermarkDegree', description='The inclination angle of the watermark. Valid values: -10 to -30.', example='-10'),
  watermarkFontSize?: int32(name='WatermarkFontSize', description='The font size of the watermark. Valid values: 10 to 20.', example='10'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', description='The font style of the watermark. Valid values:

*   plain
*   bold', example='plain'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows. This parameter is now invalid.', example='5'),
  watermarkTransparency?: string(name='WatermarkTransparency', description='The transparency of the watermark.

Valid values:

*   LIGHT

    <!-- -->

    <!-- -->

    <!-- -->

*   DARK

    <!-- -->

    <!-- -->

    <!-- -->

*   MIDDLE

    <!-- -->

    <!-- -->

    <!-- -->', example='LIGHT'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The transparency of the watermark. A larger value specifies that the watermark is less transparent. Valid values: 10 to 100.', example='10'),
  watermarkType?: string(name='WatermarkType', description='The type of the watermark. You can specify multiple types of watermarks at the same time. Separate multiple watermark types with commas (,).

Valid values:

*   EndUserId: The ID of the end user is displayed.

    <!-- -->

    <!-- -->

    <!-- -->

*   HostName: The rightmost 15 characters of the cloud desktop ID are displayed.

    <!-- -->

    <!-- -->

    <!-- -->', example='EndUserId'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='pg-gx2x1dhsmthe9****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePolicyGroupResponseBody(name='body'),
}

/**
  * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](~~189345~~).
  *
  * @param request CreatePolicyGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appContentProtection)) {
    query['AppContentProtection'] = request.appContentProtection;
  }
  if (!Util.isUnset(request.authorizeAccessPolicyRule)) {
    query['AuthorizeAccessPolicyRule'] = request.authorizeAccessPolicyRule;
  }
  if (!Util.isUnset(request.authorizeSecurityPolicyRule)) {
    query['AuthorizeSecurityPolicyRule'] = request.authorizeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.cameraRedirect)) {
    query['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.clipboard)) {
    query['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.endUserApplyAdminCoordinate)) {
    query['EndUserApplyAdminCoordinate'] = request.endUserApplyAdminCoordinate;
  }
  if (!Util.isUnset(request.endUserGroupCoordinate)) {
    query['EndUserGroupCoordinate'] = request.endUserGroupCoordinate;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.html5Access)) {
    query['Html5Access'] = request.html5Access;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    query['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.internetCommunicationProtocol)) {
    query['InternetCommunicationProtocol'] = request.internetCommunicationProtocol;
  }
  if (!Util.isUnset(request.localDrive)) {
    query['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netRedirect)) {
    query['NetRedirect'] = request.netRedirect;
  }
  if (!Util.isUnset(request.preemptLogin)) {
    query['PreemptLogin'] = request.preemptLogin;
  }
  if (!Util.isUnset(request.preemptLoginUser)) {
    query['PreemptLoginUser'] = request.preemptLoginUser;
  }
  if (!Util.isUnset(request.printerRedirection)) {
    query['PrinterRedirection'] = request.printerRedirection;
  }
  if (!Util.isUnset(request.recordContent)) {
    query['RecordContent'] = request.recordContent;
  }
  if (!Util.isUnset(request.recordContentExpires)) {
    query['RecordContentExpires'] = request.recordContentExpires;
  }
  if (!Util.isUnset(request.recording)) {
    query['Recording'] = request.recording;
  }
  if (!Util.isUnset(request.recordingAudio)) {
    query['RecordingAudio'] = request.recordingAudio;
  }
  if (!Util.isUnset(request.recordingDuration)) {
    query['RecordingDuration'] = request.recordingDuration;
  }
  if (!Util.isUnset(request.recordingEndTime)) {
    query['RecordingEndTime'] = request.recordingEndTime;
  }
  if (!Util.isUnset(request.recordingExpires)) {
    query['RecordingExpires'] = request.recordingExpires;
  }
  if (!Util.isUnset(request.recordingFps)) {
    query['RecordingFps'] = request.recordingFps;
  }
  if (!Util.isUnset(request.recordingStartTime)) {
    query['RecordingStartTime'] = request.recordingStartTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCoordinate)) {
    query['RemoteCoordinate'] = request.remoteCoordinate;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeValue)) {
    query['ScopeValue'] = request.scopeValue;
  }
  if (!Util.isUnset(request.usbRedirect)) {
    query['UsbRedirect'] = request.usbRedirect;
  }
  if (!Util.isUnset(request.usbSupplyRedirectRule)) {
    query['UsbSupplyRedirectRule'] = request.usbSupplyRedirectRule;
  }
  if (!Util.isUnset(request.videoRedirect)) {
    query['VideoRedirect'] = request.videoRedirect;
  }
  if (!Util.isUnset(request.visualQuality)) {
    query['VisualQuality'] = request.visualQuality;
  }
  if (!Util.isUnset(request.watermark)) {
    query['Watermark'] = request.watermark;
  }
  if (!Util.isUnset(request.watermarkColor)) {
    query['WatermarkColor'] = request.watermarkColor;
  }
  if (!Util.isUnset(request.watermarkDegree)) {
    query['WatermarkDegree'] = request.watermarkDegree;
  }
  if (!Util.isUnset(request.watermarkFontSize)) {
    query['WatermarkFontSize'] = request.watermarkFontSize;
  }
  if (!Util.isUnset(request.watermarkFontStyle)) {
    query['WatermarkFontStyle'] = request.watermarkFontStyle;
  }
  if (!Util.isUnset(request.watermarkRowAmount)) {
    query['WatermarkRowAmount'] = request.watermarkRowAmount;
  }
  if (!Util.isUnset(request.watermarkTransparency)) {
    query['WatermarkTransparency'] = request.watermarkTransparency;
  }
  if (!Util.isUnset(request.watermarkTransparencyValue)) {
    query['WatermarkTransparencyValue'] = request.watermarkTransparencyValue;
  }
  if (!Util.isUnset(request.watermarkType)) {
    query['WatermarkType'] = request.watermarkType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](~~189345~~).
  *
  * @param request CreatePolicyGroupRequest
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model CreateRAMDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method that you use to connect clients to cloud desktops. Valid values:

*   Internet: connects clients to cloud desktops only over the Internet.
*   VPC: connects clients to cloud desktops only over a VPC.
*   Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method when you connect clients to cloud desktops.

Default value: Internet.


> The VPC connection method is provided by Alibaba Cloud PrivateLink. You are not charged for PrivateLink. If you set this parameter to VPC or Any, PrivateLink is automatically activated.', example='Internet'),
  directoryName?: string(name='DirectoryName', description='Specifies whether to grant the permissions of the local administrator to the desktop users. Default value: true.', example='testDirectoryName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='The operation that you want to perform. Set the value to CreateRAMDirectory.', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='The ID of the request.', example='false'),
  regionId?: string(name='RegionId', description='Specifies whether to enable the Internet access feature.', example='cn-hangzhou'),
  vSwitchId?: [ string ](name='VSwitchId', description='CreateRAMDirectory'),
}

model CreateRAMDirectoryResponseBody = {
  directoryId?: string(name='DirectoryId', example='dri-uf62w3qzt4aigvlcb****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateRAMDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRAMDirectoryResponseBody(name='body'),
}

/**
  * The name of the directory. The name must be 2 to 255 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
  * This parameter is empty by default.
  *
  * @param request CreateRAMDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRAMDirectoryResponse
 */
async function createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: Util.RuntimeOptions): CreateRAMDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRAMDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the directory. The name must be 2 to 255 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
  * This parameter is empty by default.
  *
  * @param request CreateRAMDirectoryRequest
  * @return CreateRAMDirectoryResponse
 */
async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRAMDirectoryWithOptions(request, runtime);
}

model CreateSimpleOfficeSiteRequest {
  bandwidth?: int32(name='Bandwidth', description='Specifies whether to enable trusted device verification.', example='10'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.

> If you want to connect to your cloud desktops over a VPC, you can attach the network of the workspace to the CEN instance. The CEN instance is connected to the on-premises network over VPN Gateway or Express Connect.', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', description='The name of the workspace. The name must be 2 to 255 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='118272523431****'),
  cidrBlock?: string(name='CidrBlock', description='Specifies whether the workspace is a CloudBox-based workspace.', example='172.16.0.0/12'),
  cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', description='Creates a workspace of the convenience account type.', example='false'),
  desktopAccessType?: string(name='DesktopAccessType', description='The ID of the workspace.', example='Internet'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='true'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to grant the permissions of the local administrator to the regular user of the cloud desktop.', example='false'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.

*   If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.', example='true'),
  officeSiteName?: string(name='OfficeSiteName', description='The maximum public bandwidth. Value range: 10 to 200. Unit: Mbit/s. This parameter is available if you set `EnableInternetAccess` to `true`.', example='TestOfficeSite_Simple'),
  regionId?: string(name='RegionId', description='The IPv4 CIDR block in the secure office network of the workspace. The IPv4 CIDR block that the system uses to create a virtual private cloud (VPC) for the workspace. We recommend that you set the IPv4 CIDR block to 10.0.0.0/12, 172.16.0.0/12, 192.168.0.0/16, or a subnet of these CIDR blocks. If you set the IPv4 CIDR block to 10.0.0.0/12 or 172.16.0.0/12, the mask is 1224 bits in length. If you set the IPv4 CIDR block to 192.168.0.0/16, the mask is 1624 bits in length.', example='cn-hangzhou'),
  vSwitchId?: [ string ](name='VSwitchId', description='The ID of the request.'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](~~335132~~) operation to obtain the verification code.', example='123456'),
}

model CreateSimpleOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateSimpleOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimpleOfficeSiteResponseBody(name='body'),
}

async function createSimpleOfficeSiteWithOptions(request: CreateSimpleOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateSimpleOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.cloudBoxOfficeSite)) {
    query['CloudBoxOfficeSite'] = request.cloudBoxOfficeSite;
  }
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.enableInternetAccess)) {
    query['EnableInternetAccess'] = request.enableInternetAccess;
  }
  if (!Util.isUnset(request.needVerifyZeroDevice)) {
    query['NeedVerifyZeroDevice'] = request.needVerifyZeroDevice;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimpleOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSimpleOfficeSite(request: CreateSimpleOfficeSiteRequest): CreateSimpleOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimpleOfficeSiteWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  description?: string(name='Description', description='The description of the snapshot. The description can be up to 128 characters in length.', example='testDescription'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****"'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length.\\
The name cannot start with auto because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the disk for which to create a snapshot. Valid values:

*   system: system disk
*   data: data disk', example='system'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the region.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2ze81owrnv9pity4****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * The cloud desktop for which you want to create a snapshot must be in the **Running** state or **Stopped** state.
  *
  * @param request CreateSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSnapshotResponse
 */
async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop for which you want to create a snapshot must be in the **Running** state or **Stopped** state.
  *
  * @param request CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  policyId?: [ string ](name='PolicyId', description='The ID of the policy template that you want to manage.

> You can call the [ListDefensePolicies](~~195814~~) operation to query the IDs of all policy templates.'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created.', example='cn-hangzhou'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteBundlesRequest {
  bundleId?: [ string ](name='BundleId', example='b-cezrnfgecbich****'),
  regionId?: string(name='RegionId', description='DeleteBundles', example='cn-hangzhou'),
}

model DeleteBundlesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteBundlesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBundlesResponseBody(name='body'),
}

async function deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: Util.RuntimeOptions): DeleteBundlesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBundles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBundlesWithOptions(request, runtime);
}

model DeleteCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01'),
  fileId?: string(name='FileId', description='The ID of the file. The ID is a unique identifier for the file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteCdsFileResponseBody = {
  code?: string(name='Code', description='The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='Indicates whether the data is returned.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='5CC5E450-FC43-4F5B-B540-9964BD31****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model DeleteCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCdsFileResponseBody(name='body'),
}

async function deleteCdsFileWithOptions(request: DeleteCdsFileRequest, runtime: Util.RuntimeOptions): DeleteCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCdsFile(request: DeleteCdsFileRequest): DeleteCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCdsFileWithOptions(request, runtime);
}

model DeleteCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-hangzhou+cds-532033****'),
  groupId?: [ string ](name='GroupId', description='The IDs of the teams that you want to delete. You can delete multiple teams at a time.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The error message returned. This parameter is not returned if the value of Code is `success`.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true: The request is successful. false: The request fails.', example='true'),
}

model DeleteCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudDriveGroupsResponseBody(name='body'),
}

async function deleteCloudDriveGroupsWithOptions(request: DeleteCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): DeleteCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudDriveGroups(request: DeleteCloudDriveGroupsRequest): DeleteCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudDriveGroupsWithOptions(request, runtime);
}

model DeleteCloudDriveUsersRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-64326*****'),
  endUserId?: [ string ](name='EndUserId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCloudDriveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCloudDriveUsersResponseBody(name='body'),
}

async function deleteCloudDriveUsersWithOptions(request: DeleteCloudDriveUsersRequest, runtime: Util.RuntimeOptions): DeleteCloudDriveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCloudDriveUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCloudDriveUsers(request: DeleteCloudDriveUsersRequest): DeleteCloudDriveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudDriveUsersWithOptions(request, runtime);
}

model DeleteDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDesktopGroupResponseBody(name='body'),
}

async function deleteDesktopGroupWithOptions(request: DeleteDesktopGroupRequest, runtime: Util.RuntimeOptions): DeleteDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDesktopGroup(request: DeleteDesktopGroupRequest): DeleteDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopGroupWithOptions(request, runtime);
}

model DeleteDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId', description='DeleteDesktops', example='cn-hangzhou'),
}

model DeleteDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDesktopsResponseBody(name='body'),
}

async function deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: Util.RuntimeOptions): DeleteDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopsWithOptions(request, runtime);
}

model DeleteDevicesRequest {
  clientType?: int32(name='ClientType', description='The type of the device.

*   1: the hardware client device
*   2: the software client device', example='2'),
  deviceIds?: [ string ](name='DeviceIds', description='The list of universally unique identifiers (UUIDs) of devices.'),
  force?: int32(name='Force', description='Specifies whether to forcefully delete the device.

*   1: forcefully deletes the device.
*   0: does not forcefully delete the device. (You cannot delete a device to which a user is bound.)', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteDevicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2AF861B4-0ECC-130C-B100-21A01E02****'),
}

model DeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicesResponseBody(name='body'),
}

/**
  * You can call the operation to manage client devices.
  *
  * @param request DeleteDevicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDevicesResponse
 */
async function deleteDevicesWithOptions(request: DeleteDevicesRequest, runtime: Util.RuntimeOptions): DeleteDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceIds)) {
    query['DeviceIds'] = request.deviceIds;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to manage client devices.
  *
  * @param request DeleteDevicesRequest
  * @return DeleteDevicesResponse
 */
async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicesWithOptions(request, runtime);
}

model DeleteDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to DeleteDirectories.', example='cn-hangzhou'),
}

model DeleteDirectoriesResponseBody = {
  requestId?: string(name='RequestId', example='5CC5E450-FC43-4F5B-B540-9964BD313427'),
}

model DeleteDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDirectoriesResponseBody(name='body'),
}

/**
  * The ID of directory N. You can specify one or more directory IDs.
  *
  * @param request DeleteDirectoriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDirectoriesResponse
 */
async function deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: Util.RuntimeOptions): DeleteDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDirectories',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of directory N. You can specify one or more directory IDs.
  *
  * @param request DeleteDirectoriesRequest
  * @return DeleteDirectoriesResponse
 */
async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoriesWithOptions(request, runtime);
}

model DeleteEduRoomRequest {
  eduRoomId?: string(name='EduRoomId'),
  regionId?: string(name='RegionId'),
}

model DeleteEduRoomResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEduRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEduRoomResponseBody(name='body'),
}

async function deleteEduRoomWithOptions(request: DeleteEduRoomRequest, runtime: Util.RuntimeOptions): DeleteEduRoomResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eduRoomId)) {
    query['EduRoomId'] = request.eduRoomId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEduRoom',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEduRoom(request: DeleteEduRoomRequest): DeleteEduRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEduRoomWithOptions(request, runtime);
}

model DeleteImagesRequest {
  deleteCascadedBundle?: boolean(name='DeleteCascadedBundle'),
  imageId?: [ string ](name='ImageId'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to DeleteImages.', example='cn-hangzhou'),
}

model DeleteImagesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImagesResponseBody(name='body'),
}

/**
  * The IDs of the images that you want to delete. You can configure one or more image IDs. Valid values of N: 1 to 100.
  *
  * @param request DeleteImagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteImagesResponse
 */
async function deleteImagesWithOptions(request: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteCascadedBundle)) {
    query['DeleteCascadedBundle'] = request.deleteCascadedBundle;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The IDs of the images that you want to delete. You can configure one or more image IDs. Valid values of N: 1 to 100.
  *
  * @param request DeleteImagesRequest
  * @return DeleteImagesResponse
 */
async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DeleteNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId', description='The IDs of the NAS file systems that you want to delete.', example='04f314****'),
  regionId?: string(name='RegionId', description='The region ID of the NAS file system that you want to delete.', example='cn-hangzhou'),
}

model DeleteNASFileSystemsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNASFileSystemsResponseBody(name='body'),
}

/**
  * Before you delete an Apsara File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
  * **
  * **Warning** If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
  *
  * @param request DeleteNASFileSystemsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNASFileSystemsResponse
 */
async function deleteNASFileSystemsWithOptions(request: DeleteNASFileSystemsRequest, runtime: Util.RuntimeOptions): DeleteNASFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNASFileSystems',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you delete an Apsara File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
  * **
  * **Warning** If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
  *
  * @param request DeleteNASFileSystemsRequest
  * @return DeleteNASFileSystemsResponse
 */
async function deleteNASFileSystems(request: DeleteNASFileSystemsRequest): DeleteNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNASFileSystemsWithOptions(request, runtime);
}

model DeleteNetworkPackagesRequest {
  networkPackageId?: [ string ](name='NetworkPackageId'),
  regionId?: string(name='RegionId', description='DeleteNetworkPackages', example='cn-hangzhou'),
}

model DeleteNetworkPackagesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkPackagesResponseBody(name='body'),
}

async function deleteNetworkPackagesWithOptions(request: DeleteNetworkPackagesRequest, runtime: Util.RuntimeOptions): DeleteNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkPackages(request: DeleteNetworkPackagesRequest): DeleteNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkPackagesWithOptions(request, runtime);
}

model DeleteOfficeSitesRequest {
  officeSiteId?: [ string ](name='OfficeSiteId', description='The ID of the workspace that you want to delete. You can specify 1 to 100 IDs of workspaces.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The region ID of the workspace that you want to delete. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteOfficeSitesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOfficeSitesResponseBody(name='body'),
}

/**
  * Before you delete a workspace, make sure that the following requirements are met:
  * *   All cloud desktops in the workspace are released.
  * *   The data that you want to retain is backed up.
  * **
  * **Warning** After you delete a workspace, the resources and data of the workspace cannot be recovered. Exercise with caution.
  *
  * @param request DeleteOfficeSitesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteOfficeSitesResponse
 */
async function deleteOfficeSitesWithOptions(request: DeleteOfficeSitesRequest, runtime: Util.RuntimeOptions): DeleteOfficeSitesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOfficeSites',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you delete a workspace, make sure that the following requirements are met:
  * *   All cloud desktops in the workspace are released.
  * *   The data that you want to retain is backed up.
  * **
  * **Warning** After you delete a workspace, the resources and data of the workspace cannot be recovered. Exercise with caution.
  *
  * @param request DeleteOfficeSitesRequest
  * @return DeleteOfficeSitesResponse
 */
async function deleteOfficeSites(request: DeleteOfficeSitesRequest): DeleteOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOfficeSitesWithOptions(request, runtime);
}

model DeletePolicyGroupsRequest {
  policyGroupId?: [ string ](name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeletePolicyGroupsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeletePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyGroupsResponseBody(name='body'),
}

async function deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupsWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  snapshotId?: [ string ](name='SnapshotId', description='The IDs of the snapshots. You can specify 1 to 100 IDs of snapshots.', example='s-2ze81owrnv9pity4****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * If the IDs of the snapshots that you specify do not exist, requests are ignored.
  *
  * @param request DeleteSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the IDs of the snapshots that you specify do not exist, requests are ignored.
  *
  * @param request DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound to AD users.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteVirtualMFADeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADeviceWithOptions(request: DeleteVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): DeleteVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteVirtualMFADeviceRequest
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualMFADeviceWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  desktopId?: string(name='DesktopId', description='The ID of the request.', example='ecd-138dsptkrt00u****'),
  eventName?: string(name='EventName', description='The operation that you want to perform. Set the value to DescribeAlarmEventStackInfo.'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  regionId?: string(name='RegionId', description='The ID of the alert event.', example='cn-hangzhou'),
  uniqueInfo?: string(name='UniqueInfo', description='The stack information of the alert details.', example='8604b4db8dc6d02ab13b4ae06293****'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  stackInfo?: string(name='StackInfo', example='3011 ruby -rosocket -e exit xxxx'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventStackInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeAutoSnapshotPolicyRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6mqIGdPhID94rjhZFGsvpJo'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-c5tv9d64ebjnj****'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='Test 1201'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DescribeAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicies?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the automatic snapshot policy was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time is displayed in UTC.', example='2023-01-11T09:14:00Z'),
      cronExpression?: string(name='CronExpression', description='The CRON expression that is used to create the snapshot.', example='0 0 5,7 ? * 2/2'),
      desktopNum?: int32(name='DesktopNum', description='The number of cloud desktops that are associated with the automatic snapshot policy.', example='5'),
      policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3e3bmfcdkjfl1****'),
      policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='snapshot01'),
      regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy resides.', example='cn-hangzhou'),
      retentionDays?: string(name='RetentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65536: The automatic snapshot is retained for the specified number of days.', example='3'),
      status?: string(name='Status', description='The state of the automatic snapshot policy. Valid values:

*   Normal: The automatic snapshot policy is normal.
*   Expire: The automatic snapshot policy cannot be used because your account has an overdue payment.', example='Normal'),
      timePoints?: string(name='TimePoints', description='The points in time at which automatic snapshots are created.

The time is displayed in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Multiple points in time can be specified.

The parameter value is a JSON array that contains up to 24 points in time separated by commas (,). Example: `["0", "1", ... "23"]`.', example='["17","18"]'),
    }
  ](name='AutoSnapshotPolicies', description='Details of the automatic snapshot policies.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results haven been returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7F6612E-59CC-59F9-9DD1-91867FCC****'),
}

model DescribeAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
  *
  * @param request DescribeAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAutoSnapshotPolicyResponse
 */
async function describeAutoSnapshotPolicyWithOptions(request: DescribeAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
  *
  * @param request DescribeAutoSnapshotPolicyRequest
  * @return DescribeAutoSnapshotPolicyResponse
 */
async function describeAutoSnapshotPolicy(request: DescribeAutoSnapshotPolicyRequest): DescribeAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPolicyWithOptions(request, runtime);
}

model DescribeBundlesRequest {
  bundleId?: [ string ](name='BundleId', example='bundle_ecd_graphics.2xlarge_s15d15_win2019'),
  bundleType?: string(name='BundleType', example='SYSTEM'),
  checkStock?: boolean(name='CheckStock', example='true'),
  cpuCount?: int32(name='CpuCount', example='2'),
  desktopTypeFamily?: string(name='DesktopTypeFamily', example='eds.general'),
  fotaChannel?: string(name='FotaChannel'),
  fromDesktopGroup?: boolean(name='FromDesktopGroup', example='false'),
  gpuCount?: float(name='GpuCount', example='1'),
  imageId?: [ string ](name='ImageId'),
  maxResults?: int32(name='MaxResults', example='10'),
  memorySize?: int32(name='MemorySize', example='4'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  osType?: string(name='OsType'),
  protocolType?: string(name='ProtocolType', example='ASP'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  scope?: string(name='Scope'),
  selectedBundle?: boolean(name='SelectedBundle', example='true'),
  sessionType?: string(name='SessionType', example='SingleSession'),
  supportMultiSession?: boolean(name='SupportMultiSession', example='false'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', example='false'),
}

model DescribeBundlesResponseBody = {
  bundles?: [ 
    {
      bundleId?: string(name='BundleId', example='bundle_ecd_graphics.2xlarge_s15d15_win2019'),
      bundleName?: string(name='BundleName', example='Advanced graphics with Windows 2019'),
      bundleType?: string(name='BundleType', example='SYSTEM'),
      creationTime?: string(name='CreationTime', example='2021-09-30T06:09Z'),
      description?: string(name='Description', example='test'),
      desktopType?: string(name='DesktopType', example='ecd.graphics.2xlarge'),
      desktopTypeAttribute?: {
        cpuCount?: int32(name='CpuCount', example='10'),
        gpuCount?: float(name='GpuCount', example='0.5'),
        gpuSpec?: string(name='GpuSpec', example='NVIDIA T4'),
        memorySize?: int32(name='MemorySize', example='47104'),
      }(name='DesktopTypeAttribute'),
      desktopTypeFamily?: string(name='DesktopTypeFamily', example='eds.general'),
      disks?: [ 
        {
          diskPerformanceLevel?: string(name='DiskPerformanceLevel', example='PL0'),
          diskSize?: int32(name='DiskSize', example='150'),
          diskType?: string(name='DiskType', example='SYSTEM'),
        }
      ](name='Disks'),
      imageId?: string(name='ImageId', example='desktopimage-windows-server-2019-64-ch-vgpu'),
      imageName?: string(name='ImageName', example='Windows server 2019 Chinese'),
      imageStatus?: string(name='ImageStatus'),
      language?: string(name='Language', example='en-US'),
      osType?: string(name='OsType', example='Windows'),
      platform?: string(name='Platform', example='Windows Server 2019'),
      protocolType?: string(name='ProtocolType', example='ASP'),
      sessionType?: string(name='SessionType', example='0'),
      stockState?: string(name='StockState', example='Sufficient'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Bundles'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6lu3PTF6h3zE8egwlYuv8M8'),
  requestId?: string(name='RequestId', example='BCC854D8-5D1E-46D3-96EF-797A5DD36789'),
}

model DescribeBundlesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBundlesResponseBody(name='body'),
}

async function describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: Util.RuntimeOptions): DescribeBundlesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleType)) {
    query['BundleType'] = request.bundleType;
  }
  if (!Util.isUnset(request.checkStock)) {
    query['CheckStock'] = request.checkStock;
  }
  if (!Util.isUnset(request.cpuCount)) {
    query['CpuCount'] = request.cpuCount;
  }
  if (!Util.isUnset(request.desktopTypeFamily)) {
    query['DesktopTypeFamily'] = request.desktopTypeFamily;
  }
  if (!Util.isUnset(request.fotaChannel)) {
    query['FotaChannel'] = request.fotaChannel;
  }
  if (!Util.isUnset(request.fromDesktopGroup)) {
    query['FromDesktopGroup'] = request.fromDesktopGroup;
  }
  if (!Util.isUnset(request.gpuCount)) {
    query['GpuCount'] = request.gpuCount;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.memorySize)) {
    query['MemorySize'] = request.memorySize;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.selectedBundle)) {
    query['SelectedBundle'] = request.selectedBundle;
  }
  if (!Util.isUnset(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  if (!Util.isUnset(request.supportMultiSession)) {
    query['SupportMultiSession'] = request.supportMultiSession;
  }
  if (!Util.isUnset(request.volumeEncryptionEnabled)) {
    query['VolumeEncryptionEnabled'] = request.volumeEncryptionEnabled;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBundles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBundlesWithOptions(request, runtime);
}

model DescribeCdsFileShareLinksRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-532033****'),
  creators?: [ string ](name='Creators', description='The users that create the file sharing links.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of resources to return. Valid values: 1 to 100. Default value: 100. The number of returned resources must be less than or equal to the specified number.', example='100'),
  nextToken?: string(name='NextToken', description='Specifies the marker after which the returned list begins. If this parameter is not specified, all results are returned. Default value: null.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  shareId?: string(name='ShareId', description='The ID of the file sharing link.', example='7JQX1Fs****'),
  shareName?: string(name='ShareName', description='The sharing name for fuzzy search.', example='user'),
  status?: string(name='Status', description='The file sharing status. Valid values: ● disabled: canceled ● enabled: valid', example='disabled'),
}

model DescribeCdsFileShareLinksResponseBody = {
  code?: string(name='Code', description='The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: [
    CdsFileShareLinkModel
  ](name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is `success`.', example='success'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6mnFXZiT7NdvGNgkInJ****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeCdsFileShareLinksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCdsFileShareLinksResponseBody(name='body'),
}

async function describeCdsFileShareLinksWithOptions(request: DescribeCdsFileShareLinksRequest, runtime: Util.RuntimeOptions): DescribeCdsFileShareLinksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.creators)) {
    query['Creators'] = request.creators;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCdsFileShareLinks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCdsFileShareLinks(request: DescribeCdsFileShareLinksRequest): DescribeCdsFileShareLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCdsFileShareLinksWithOptions(request, runtime);
}

model DescribeCensRequest {
  pageNumber?: int32(name='PageNumber', description='Details about CEN instances.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.

Default value: 1.', example='50'),
  regionId?: string(name='RegionId', description='The ID of the bandwidth plan that is associated with the CEN instance.', example='cn-hangzhou'),
}

model DescribeCensResponseBody = {
  cens?: [ 
    {
      cenId?: string(name='CenId', description='The number of entries returned per page.', example='cen-3gwy16dojz1m65****'),
      creationTime?: string(name='CreationTime', description='The tag value of the CEN instance.', example='2021-06-16T08:46Z'),
      description?: string(name='Description', description='The tag key of the CEN instance.', example='test'),
      ipv6Level?: string(name='Ipv6Level', description='Indicates whether IPv6 is supported. Valid value: DISABLED. This value indicates that IPv6 is not supported.

>  IPv6 is not supported.', example='DISABLED'),
      name?: string(name='Name', description='The ID of the request.', example='testCen'),
      packageIds?: [ 
        {
          packageId?: string(name='PackageId', example='cenbwp-4c2zaavbvh5f42****'),
        }
      ](name='PackageIds'),
      protectionLevel?: string(name='ProtectionLevel', description='The name of the CEN instance.', example='REDUCED'),
      status?: string(name='Status', description='The ID of the region.', example='Active'),
      tags?: [ 
        {
          key?: string(name='Key', description='DescribeCens', example='testKey'),
          value?: string(name='Value', example='testValue'),
        }
      ](name='Tags', description='The ID of the CEN instance.'),
    }
  ](name='Cens', description='The level of CIDR block overlapping. Valid value: REDUCED. This value indicates that the CIDR blocks can overlap with each other but must not be the same.'),
  pageNumber?: int32(name='PageNumber', description='The status of the CEN instance. Valid values:

*   Creating: The CEN instance is being created.
*   Active: The CEN instance is running.
*   Deleting: The CEN instance is being deleted.', example='1'),
  pageSize?: int32(name='PageSize', description='The description of the CEN instance.', example='50'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to DescribeCens.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The IDs of the bandwidth plans that are associated with the CEN instance.', example='1'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCensWithOptions(request: DescribeCensRequest, runtime: Util.RuntimeOptions): DescribeCensResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCens',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCensWithOptions(request, runtime);
}

model DescribeClientEventsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the Alibaba Cloud account with which the event is associated.', example='ecd-8fupvkhg0aayu****'),
  desktopIp?: string(name='DesktopIp', description='The account type of the workspace. Valid values:

*   SIMPLE: convenience account
*   AD_CONNECTOR: enterprise AD account', example='10.10.*.*'),
  desktopName?: string(name='DesktopName', description='The types of event.', example='test'),
  directoryId?: string(name='DirectoryId', description='The ID of the desktop group.', example='The operation that you want to perform. Set the value to **DescribeClientEvents**.'),
  endTime?: string(name='EndTime', description='The ID of the region where the cloud desktop resides.', example='2020-11-31T06:32:31Z'),
  endUserId?: string(name='EndUserId', description='The ID of the directory to which the cloud desktop belongs.', example='28961708130834****'),
  eventType?: string(name='EventType', description='The ID of the workspace to which the cloud desktop belongs. If you do not specify a value for this parameter, events of all workspaces in the specified region are queried.', example='DESKTOP_DISCONNECT'),
  eventTypes?: [ string ](name='EventTypes', description='Details about the events.'),
  maxResults?: int32(name='MaxResults', description='The status of the event. This parameter is returned if you set the EventType parameter to DESKTOP_DISCONNECT or GET_CONNECTION_TICKET. Valid values:

*   200\\. The value indicates that the request is successful.
*   An error message. The value indicates that the request failed. Example: FailedToGetConnectionTicket.', example='10'),
  nextToken?: string(name='NextToken', description='The IP address of the client.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
  officeSiteName?: string(name='OfficeSiteName', description='The OS that the client runs.', example='test'),
  regionId?: string(name='RegionId', description='The number of bytes that are received.', example='cn-hangzhou'),
  startTime?: string(name='StartTime', description='The IP address of the cloud desktop.', example='2020-11-30T06:32:31Z'),
}

model DescribeClientEventsResponseBody = {
  events?: [ 
    {
      aliUid?: string(name='AliUid', description='The name of the cloud desktop.', example='112259558861****'),
      bytesReceived?: string(name='BytesReceived', description='The name of the cloud desktop.', example='8665'),
      bytesSend?: string(name='BytesSend', description='The information about the regular user that connects to the cloud desktop from the EDS client. The information can be the RAM user ID or Active Directory (AD) username. If you do not specify a value for this parameter, events of all regular users in the specified region are queried.', example='2345'),
      clientIp?: string(name='ClientIp', description='The IP address of the cloud desktop. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.', example='100.68.*.*'),
      clientOS?: string(name='ClientOS', description='The ID of the cloud desktop.', example='Darwin 17.7.0 x64'),
      clientVersion?: string(name='ClientVersion', description='DescribeClientEvents', example='1.0.4 202012021700'),
      desktopGroupId?: string(name='DesktopGroupId', example='dg-kadkdfaf****'),
      desktopGroupName?: string(name='DesktopGroupName', example='testName'),
      desktopId?: string(name='DesktopId', description='The name of the desktop group.', example='ecd-8fupvkhg0aayu****'),
      desktopIp?: string(name='DesktopIp', description='The name of the workspace.', example='10.10.*.*'),
      desktopName?: string(name='DesktopName', example='test'),
      directoryId?: string(name='DirectoryId', description='The type of the event.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      directoryType?: string(name='DirectoryType', description='The type of event.', example='RAM'),
      endUserId?: string(name='EndUserId', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, the current time is used.', example='28961708130834****'),
      eventId?: string(name='EventId', description='The type of event that you want to query. Valid values:

*   DESKTOP_CONNECT: The desktop session is established.
*   DESKTOP_DISCONNECT: The desktop session is disconnected.
*   DESKTOP_REBOOT: The cloud desktop is restarted.
*   CLIENT_AD_LOGIN: The AD user logs on to the client.
*   GET_CONNECTION_TICKET: The request to connect to the cloud desktop is sent.
*   DESKTOP_START: The cloud desktop is started.
*   DESKTOP_STOP: The cloud desktop is stopped.

If you do not specify a value for this parameter, events of all types are queried.', example='5651188b-3070-d1cc-5311-75753d59****'),
      eventTime?: string(name='EventTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.', example='2020-11-30T06:32:31Z'),
      eventType?: string(name='EventType', description='The query token. Set the value to the NextToken value that is returned from the last call to the DescribeClientEvents operation.', example='DESKTOP_DISCONNECT'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the event.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      officeSiteName?: string(name='OfficeSiteName', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The ID of the request.', example='SIMPLE'),
      regionId?: string(name='RegionId', description='The ID of the cloud desktop. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.', example='cn-hangzhou'),
      status?: string(name='Status', description='The number of bytes that are sent.', example='200'),
    }
  ](name='Events', description='The information about the regular user that connects to the cloud desktop from the EDS client. The information can be the RAM user ID or AD username.'),
  nextToken?: string(name='NextToken', description='The ID of the region.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The type of the directory.', example='28A40F12-F340-442B-A35F-46EF6A03227B'),
}

model DescribeClientEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientEventsResponseBody(name='body'),
}

/**
  * The version of the client.
  *
  * @param request DescribeClientEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClientEventsResponse
 */
async function describeClientEventsWithOptions(request: DescribeClientEventsRequest, runtime: Util.RuntimeOptions): DescribeClientEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopIp)) {
    query['DesktopIp'] = request.desktopIp;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.eventTypes)) {
    query['EventTypes'] = request.eventTypes;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The version of the client.
  *
  * @param request DescribeClientEventsRequest
  * @return DescribeClientEventsResponse
 */
async function describeClientEvents(request: DescribeClientEventsRequest): DescribeClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientEventsWithOptions(request, runtime);
}

model DescribeCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-shanghai+cds-135515****'),
  directoryId?: string(name='DirectoryId', description='The workspace ID.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  directoryName?: string(name='DirectoryName', description='The workspace name.', example='testDirectoryName'),
  driveStatus?: string(name='DriveStatus', description='The team space status. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='enabled'),
  driveType?: string(name='DriveType', description='Specifies whether the space is increased.

*   binding: increased
*   unbound: not increased

Default value: null. The default value indicates that all spaces are queried.', example='binding'),
  groupId?: [ string ](name='GroupId', description='The team ID.'),
  groupName?: string(name='GroupName', description='The team name for fuzzy search.', example='Test Team 1'),
  groupType?: string(name='GroupType', description='The team type.

*   org: organizational structure
*   directory: workspace

Default value: null. The default value indicates that all types of teams are queried.', example='org'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 20', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6lY3I2VNHLwy+nIoSXh****'),
  parentGroupId?: string(name='ParentGroupId', description='The ID of the parent node. If a parent node ID is specified, the subnodes are queried. If you set the value of this parameter to root, the root node is queried.

Default value: null. The default value indicates that all nodes are queried.', example='cg-e70ga4ixp30ur****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeCloudDriveGroupsResponseBody = {
  cloudDriveGroups?: [ 
    {
      adminUserIds?: string(name='AdminUserIds'),
      createTime?: string(name='CreateTime', description='The time when the team space was created.', example='2022-04-11T07:44:21Z'),
      directoryId?: string(name='DirectoryId', description='The workspace ID.', example='cn-hangzhou+dir-959593****'),
      driveId?: string(name='DriveId', description='The team space ID.', example='sh1234'),
      groupId?: string(name='GroupId', description='The team ID.', example='cg-e70ga4ixp30ur****'),
      groupName?: string(name='GroupName', description='The name of the team space.', example='Test Team 1'),
      orgId?: string(name='OrgId'),
      status?: string(name='Status', description='The team space status. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='enabled'),
      totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='5368709120'),
      usedSize?: string(name='UsedSize', description='The capacity of the used space. Unit: bytes.', example='1024000000'),
    }
  ](name='CloudDriveGroups', description='The list of team spaces.'),
  count?: long(name='Count', description='The total number of entries returned.', example='0'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='EF015AE5-B30A-5189-B519-735CEE40****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudDriveGroupsResponseBody(name='body'),
}

async function describeCloudDriveGroupsWithOptions(request: DescribeCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): DescribeCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.driveStatus)) {
    query['DriveStatus'] = request.driveStatus;
  }
  if (!Util.isUnset(request.driveType)) {
    query['DriveType'] = request.driveType;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    query['ParentGroupId'] = request.parentGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudDriveGroups(request: DescribeCloudDriveGroupsRequest): DescribeCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDriveGroupsWithOptions(request, runtime);
}

model DescribeCloudDrivePermissionsRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-82414*****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudDrivePermissionsResponseBody = {
  cloudDrivePermissionModels?: [ 
    {
      endUsers?: [ string ](name='EndUsers'),
      permission?: string(name='Permission', example='CDS_DOWNLOAD'),
    }
  ](name='CloudDrivePermissionModels'),
  requestId?: string(name='RequestId', example='A87DBB05-653A-5E4B-B72B-5F4A1E07E5B3'),
}

model DescribeCloudDrivePermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudDrivePermissionsResponseBody(name='body'),
}

async function describeCloudDrivePermissionsWithOptions(request: DescribeCloudDrivePermissionsRequest, runtime: Util.RuntimeOptions): DescribeCloudDrivePermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDrivePermissions',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudDrivePermissions(request: DescribeCloudDrivePermissionsRequest): DescribeCloudDrivePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDrivePermissionsWithOptions(request, runtime);
}

model DescribeCloudDriveUsersRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', example='abc'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCloudDriveUsersResponseBody = {
  cloudDriveUsers?: [ 
    {
      driveId?: string(name='DriveId', example='8'),
      status?: string(name='Status', example='enabled'),
      totalSize?: long(name='TotalSize', example='10240000'),
      usedSize?: long(name='UsedSize', example='20490'),
      userId?: string(name='UserId', example='abc'),
      userName?: string(name='UserName', example='abc'),
    }
  ](name='CloudDriveUsers'),
  nextToken?: string(name='NextToken', example='aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****'),
  requestId?: string(name='RequestId', example='F083AAE5-7AA9-53BB-9060-AFFB2C18****'),
}

model DescribeCloudDriveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudDriveUsersResponseBody(name='body'),
}

async function describeCloudDriveUsersWithOptions(request: DescribeCloudDriveUsersRequest, runtime: Util.RuntimeOptions): DescribeCloudDriveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDriveUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudDriveUsers(request: DescribeCloudDriveUsersRequest): DescribeCloudDriveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDriveUsersWithOptions(request, runtime);
}

model DescribeCustomizedListHeadersRequest {
  langType?: string(name='LangType', example='zh-CN'),
  listType?: string(name='ListType', example='desktop'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeCustomizedListHeadersResponseBody = {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', example='display'),
      headerKey?: string(name='HeaderKey', example='pay_type'),
      headerName?: string(name='HeaderName'),
    }
  ](name='Headers'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeCustomizedListHeadersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomizedListHeadersResponseBody(name='body'),
}

async function describeCustomizedListHeadersWithOptions(request: DescribeCustomizedListHeadersRequest, runtime: Util.RuntimeOptions): DescribeCustomizedListHeadersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomizedListHeaders',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomizedListHeaders(request: DescribeCustomizedListHeadersRequest): DescribeCustomizedListHeadersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomizedListHeadersWithOptions(request, runtime);
}

model DescribeDesktopGroupsRequest {
  bundleId?: [ string ](name='BundleId'),
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group that you want to query. Fuzzy search is supported.', example='testName'),
  endUserIds?: [ string ](name='EndUserIds', description='The authorized users.'),
  excludedEndUserIds?: [ string ](name='ExcludedEndUserIds', description='The authorized users that you want to exclude.'),
  imageId?: [ string ](name='ImageId'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID of the desktop group that you want to query.', example='cn-hangzhou+dir-467671****'),
  ownType?: long(name='OwnType', description='The desktop group type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    personal desktop group

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    shared desktop group (multi-session)

    <!-- -->', example='0'),
  period?: int32(name='Period', description='The validity period of the desktop group. The unit is specified by the PeriodUnit parameter.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the duration.

Valid values:

*   Month

    <!-- -->

    <!-- -->

    <!-- -->

*   Year

    <!-- -->

    <!-- -->

    <!-- -->

*   Day

    <!-- -->

    <!-- -->

    <!-- -->', example='Month'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy with which the desktop group is associated.', example='pg-53iyi2aar0nd6****'),
  protocolType?: string(name='ProtocolType', description='The protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  status?: int32(name='Status', description='The payment status of the desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    unpaid

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    paid

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    overdue or expired

    <!-- -->', example='1'),
}

model DescribeDesktopGroupsResponseBody = {
  desktopGroups?: [ 
    {
      bindAmount?: long(name='BindAmount', description='The number of sessions that are allowed for each cloud desktop in the multi-session desktop group.', example='1'),
      buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of purchased cloud desktops. Valid values: 0 to 200.', example='5'),
      comments?: string(name='Comments', description='The remarks.', example='test'),
      connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds. This parameter is required only for cloud desktops of the same desktop group.', example='90000'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
      createTime?: string(name='CreateTime', description='The time when the desktop group was created.', example='2022-02-17T14:51:07Z'),
      creator?: string(name='Creator', description='The ID of the Alibaba Cloud account that is used to create the desktop group.', example='1007214305******'),
      dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk.

Valid values:

*   cloud_efficiency

    <!-- -->

    :

    <!-- -->

    ultra disk

    <!-- -->

*   cloud_ssd

    <!-- -->

    :

    <!-- -->

    standard SSD

    <!-- -->

*   cloud_essd

    <!-- -->

    :

    <!-- -->

    ehhanced SSD (ESSD)

    <!-- -->', example='cloud_ssd'),
      dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='50'),
      desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The desktop group name.', example='test1'),
      endUserCount?: int32(name='EndUserCount', description='The number of users that are authorized to use the desktop group.', example='1'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-03-17T16:00:00Z'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuSpec?: string(name='GpuSpec', description='The GPU memory.', example='16 GiB'),
      idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum period of time during which the session is idle. When a session is idle, no inputs of keyboards or mouses are detected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds. This parameter is required only for cloud desktops of the same desktop group.', example='90000'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-gq15cq5ydlvwn****'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration of the cloud desktop after the end user disconnects from the cloud desktop. Unit: milliseconds.', example='1000'),
      loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    depth first

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    breadth first

    <!-- -->', example='1'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain.', example='10'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='16384'),
      minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that the desktop group must contain.', example='1'),
      officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-467671****'),
      officeSiteName?: string(name='OfficeSiteName', description='The workspace name.', example='testName'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.

Valid values:

*   PERSONAL

    <!-- -->

    :

    <!-- -->

    personal account type

    <!-- -->

    .

*   SIMPLE

    <!-- -->

    :

    <!-- -->

    convenience account type

    <!-- -->

    .

*   AD_CONNECTOR:

    <!-- -->

    <!-- -->

    workspace of the enterprise AD account type

    <!-- -->

*   RAM

    <!-- -->

    :

    <!-- -->

    Resource Access Management (RAM) account type

    <!-- -->

    .', example='SIMPLE'),
      osType?: string(name='OsType', description='The OS. Valid values:

*   Windows
*   Linux', example='Windows'),
      ownBundleId?: string(name='OwnBundleId', description='The desktop template ID.', example='bundle_eds_general_4c8g_s8d5_win2019'),
      ownBundleName?: string(name='OwnBundleName', description='The desktop template name.', example='test'),
      ownType?: long(name='OwnType', description='The desktop group type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    personal desktop group

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    shared desktop group (multi-session)

    <!-- -->', example='0'),
      payType?: string(name='PayType', description='The billing method of the desktop group.

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->', example='PrePaid'),
      policyGroupId?: string(name='PolicyGroupId', description='The policy ID.', example='pg-53iyi2aar0nd6c8qj'),
      policyGroupName?: string(name='PolicyGroupName', description='The policy name.', example='test-policy'),
      protocolType?: string(name='ProtocolType', description='The protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.', example='0.85'),
      resetType?: long(name='ResetType', description='Indicates which type of disk that is used by cloud desktops in the desktop group is reset.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    No disks are reset.

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    Only the system disk is reset.

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    Only the data disk is reset.

    <!-- -->

*   3

    <!-- -->

    :

    <!-- -->

    Both the system disk and data disk are reset.

    <!-- -->', example='0'),
      status?: int32(name='Status', description='The payment status of the desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    unpaid

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    paid

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    overdue or expired

    <!-- -->', example='1'),
      stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud desktop enters the Stopped state. When the specified period of time is reached, the idle cloud desktop automatically enters the Stopped state. If an end user connects to a cloud desktop that is in the Stopped state, the cloud desktop automatically starts. Unit: milliseconds.', example='900000'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.

Valid values:

*   cloud_efficiency

    <!-- -->

    :

    <!-- -->

    ultra disk

    <!-- -->

*   cloud_ssd

    <!-- -->

    :

    <!-- -->

    standard SSD

    <!-- -->

*   cloud_essd

    <!-- -->

    :

    <!-- -->

    ESSD

    <!-- -->', example='cloud_ssd'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='80'),
      version?: int32(name='Version', description='The version number of the desktop group.', example='2'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key for disk encryption.', example='e5409ada-xxxx-xxxx-xxxx-89e31e23e993'),
    }
  ](name='DesktopGroups', description='Details about desktop groups.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopGroupsResponseBody(name='body'),
}

async function describeDesktopGroupsWithOptions(request: DescribeDesktopGroupsRequest, runtime: Util.RuntimeOptions): DescribeDesktopGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.excludedEndUserIds)) {
    query['ExcludedEndUserIds'] = request.excludedEndUserIds;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.ownType)) {
    query['OwnType'] = request.ownType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopGroups(request: DescribeDesktopGroupsRequest): DescribeDesktopGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopGroupsWithOptions(request, runtime);
}

model DescribeDesktopIdsByVulNamesRequest {
  necessity?: string(name='Necessity', description='The ID of the request.', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', description='The name of vulnerability N.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the workspace.', example='cn-hangzhou'),
  type?: string(name='Type', description='The priority to fix the vulnerability or the risk level of the vulnerability. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='cve'),
  vulName?: [ string ](name='VulName'),
}

model DescribeDesktopIdsByVulNamesResponseBody = {
  desktopItems?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
      desktopName?: string(name='DesktopName'),
    }
  ](name='DesktopItems', description='The ID of the cloud desktop.'),
  requestId?: string(name='RequestId', description='Details about cloud desktops.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopIdsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopIdsByVulNamesResponseBody(name='body'),
}

async function describeDesktopIdsByVulNamesWithOptions(request: DescribeDesktopIdsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeDesktopIdsByVulNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopIdsByVulNames',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopIdsByVulNames(request: DescribeDesktopIdsByVulNamesRequest): DescribeDesktopIdsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopIdsByVulNamesWithOptions(request, runtime);
}

model DescribeDesktopTypesRequest {
  appliedScope?: string(name='AppliedScope', example='Public'),
  cpuCount?: int32(name='CpuCount', example='2'),
  desktopIdForModify?: string(name='DesktopIdForModify', example='ecd-gx2x1dhsmucyy****'),
  desktopTypeId?: string(name='DesktopTypeId', example='ecd.graphics.xlarge'),
  gpuCount?: float(name='GpuCount', example='1'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', example='ecd.graphics'),
  memorySize?: int32(name='MemorySize', example='4'),
  orderType?: string(name='OrderType', example='DOWNGRADE'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDesktopTypesResponseBody = {
  desktopTypes?: [ 
    {
      cpuCount?: string(name='CpuCount', example='2'),
      dataDiskSize?: string(name='DataDiskSize', example='150'),
      desktopTypeId?: string(name='DesktopTypeId', example='ecd.graphics.xlarge'),
      desktopTypeStatus?: string(name='DesktopTypeStatus', example='SUFFICIENT'),
      gpuCount?: float(name='GpuCount', example='1'),
      gpuSpec?: string(name='GpuSpec', example='16 GiB'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', example='ecd.graphics'),
      memorySize?: string(name='MemorySize', example='23552'),
      systemDiskSize?: string(name='SystemDiskSize', example='150'),
    }
  ](name='DesktopTypes'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopTypesResponseBody(name='body'),
}

async function describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: Util.RuntimeOptions): DescribeDesktopTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appliedScope)) {
    query['AppliedScope'] = request.appliedScope;
  }
  if (!Util.isUnset(request.cpuCount)) {
    query['CpuCount'] = request.cpuCount;
  }
  if (!Util.isUnset(request.desktopIdForModify)) {
    query['DesktopIdForModify'] = request.desktopIdForModify;
  }
  if (!Util.isUnset(request.desktopTypeId)) {
    query['DesktopTypeId'] = request.desktopTypeId;
  }
  if (!Util.isUnset(request.gpuCount)) {
    query['GpuCount'] = request.gpuCount;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.memorySize)) {
    query['MemorySize'] = request.memorySize;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopTypes',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopTypesWithOptions(request, runtime);
}

model DescribeDesktopsRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PostPaid'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.``', example='dg-2i8qxpv6t1a03****'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 100 IDs of cloud desktops.', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
  desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
  desktopStatusList?: [ string ](name='DesktopStatusList'),
  desktopType?: string(name='DesktopType', description='The new desktop type. You can call the [DescribeDesktopTypes](~~188882~~) operation to query the IDs of supported desktop types.', example='eds.general.2c8g'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory. The ID is the same as the workspace ID.', example='cn-hangzhou+dir-363353****'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users that are assigned the cloud desktop. You can specify IDs of 1 to 100 users.

> Only one user can use the cloud desktop at a time.', example='alice'),
  excludedEndUserId?: [ string ](name='ExcludedEndUserId', description='The IDs of the users that are excluded from the users that are assigned the cloud desktop. You can specify IDs of 1 to 100 users.', example='andy'),
  expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2022-12-31T15:59:59Z'),
  filterDesktopGroup?: boolean(name='FilterDesktopGroup', description='Specifies whether to filter cloud desktops in the desktop group.', example='false'),
  groupId?: string(name='GroupId', description='The ID of the desktop group.', example='dg-boyczi8enfyc5****'),
  imageId?: [ string ](name='ImageId', description='镜像ID列表。'),
  managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='testName'),
  onlyDesktopGroup?: boolean(name='OnlyDesktopGroup', description='Specifies whether to query cloud desktops in the desktop group.', example='true'),
  osTypes?: [ string ](name='OsTypes', description='The types of the OSs.'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
  queryFotaUpdate?: boolean(name='QueryFotaUpdate', description='Specifies whether to query the information about image version of the cloud desktop.', example='false'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-hb12mclyne09xw***'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud desktops by group for easy searching and batch operations. For more information, see [Use tags to manage cloud desktops](~~203781~~).'),
  userName?: string(name='UserName', description='The name of the user.', example='Alice'),
}

model DescribeDesktopsResponseBody = {
  desktops?: [ 
    {
      bindAmount?: int32(name='BindAmount', description='The number of sessions allowed for each cloud desktop in the multi-session desktop group.', example='10'),
      bundleId?: string(name='BundleId', description='The ID of the desktop template that is used to create the cloud desktop.', example='b-2g65ljy4291vl****'),
      bundleName?: string(name='BundleName', description='The name of the desktop template that is used to create the cloud desktop.', example='Name'),
      chargeType?: string(name='ChargeType', description='The billing method of the cloud desktop.', example='PostPaid'),
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the user.', example='Disconnected'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the cloud desktop was created.', example='2020-11-06T08:28Z'),
      dataDiskCategory?: string(name='DataDiskCategory', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      dataDiskSize?: string(name='DataDiskSize', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the group to which the cloud desktop belongs. Default value: null.', example='null'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testDesktopName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
      desktopType?: string(name='DesktopType', description='The desktop type.', example='ecd.basic.large'),
      directoryId?: string(name='DirectoryId', description='The ID is the same as the workspace ID that is indicated by the value of the OfficeSiteId parameter.', example='cn-hangzhou+dir-363353****'),
      directoryType?: string(name='DirectoryType', description='This parameter is in invitational preview and unavailable for general users.', example='SIMPLE'),
      disks?: [ 
        {
          diskId?: string(name='DiskId', description='The ID of the disk.', example='d-jedbpr4sl9l37****'),
          diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GiB.', example='80'),
          diskType?: string(name='DiskType', description='The type of the disk.', example='SYSTEM'),
          performanceLevel?: string(name='PerformanceLevel', description='The performance level (PL) of the disk that is an enhanced SSD (ESSD). Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

For more information about the differences between disks of different PLs, see [Enhanced SSDs](~~122389~~).', example='PL0'),
        }
      ](name='Disks', description='Details of the disks.'),
      downgradeQuota?: long(name='DowngradeQuota', description='The number of times for which the cloud desktop can be downgraded.', example='3'),
      downgradedTimes?: long(name='DowngradedTimes', description='The number of times for which the cloud desktop is downgraded.', example='0'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of the users that have the permissions to connect to the cloud desktops.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud desktop expires.', example='2021-12-31T15:59Z'),
      fotaUpdate?: {
        currentAppVersion?: string(name='CurrentAppVersion', description='The current version of the cloud desktop.', example='0.0.0-D-20220102.000000'),
        newAppVersion?: string(name='NewAppVersion', description='The version to which the cloud desktop can be updated.', example='0.0.0-R-20220307.190736'),
        releaseNote?: string(name='ReleaseNote', description='The description of the version to which the cloud desktop can be updated.', example='Upgrade package for testing 03-07'),
        size?: long(name='Size', description='The size of the installation package for the version to which the cloud desktop can be updated. Unit: KB.', example='108815097'),
      }(name='FotaUpdate', description='The information about the image version that the cloud desktop uses.'),
      gpuCategory?: long(name='GpuCategory', description='Indicates whether the cloud desktop is of the GPU-accelerated type.', example='0'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver with which the cloud desktop is equipped.', example='null'),
      gpuSpec?: string(name='GpuSpec', description='The GPU model.', example='NVIDIA T4'),
      hibernationBeta?: boolean(name='HibernationBeta'),
      hibernationOptionsConfigured?: boolean(name='HibernationOptionsConfigured', description='> This parameter is in invitational preview and is unavailable to the public.', example='true'),
      hostName?: string(name='HostName', description='The hostname of the cloud desktop.', example='testName'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='4096'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the secondary network interface controller (NIC) created by the RAM user or Active Directory (AD) user in EDS. You do not have the permissions to modify this ID.', example='123456'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', description='The IP address of the secondary NIC that is created by the RAM user or AD user in EDS.', example='192.168.74.165'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.', example='SIMPLE'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The virtual private cloud (VPC) type of the workspace.', example='basic'),
      osType?: string(name='OsType', description='The type of the OS.', example='Windows'),
      platform?: string(name='Platform', description='The information about the OS platform. Valid values:

*   CentOS
*   Ubuntu
*   Windows Server 2016
*   Windows Server 2019
*   UOS', example='Ubuntu'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy.', example='system-all-enabled-policy'),
      policyGroupIdList?: [ string ](name='PolicyGroupIdList', description='The IDs of the policies.'),
      policyGroupName?: string(name='PolicyGroupName', description='The name of the policy.', example='test'),
      policyGroupNameList?: [ string ](name='PolicyGroupNameList', description='The names of the policies.'),
      progress?: string(name='Progress', description='The progress when the cloud desktop was created.', example='100%'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      sessionType?: string(name='SessionType', description='The type of the session.', example='SINGLE_SESSION'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', description='The ID of the user that logged on to the cloud desktop.', example='29615820929547****'),
          establishmentTime?: string(name='EstablishmentTime', description='The time when the desktop session was established.', example='2021-03-07T08:23Z'),
          externalUserName?: string(name='ExternalUserName', description='The name of the external user.', example='Testname'),
        }
      ](name='Sessions', description='Details of the desktop sessions that users hold.'),
      snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the snapshot policy.', example='sp-gi007jgyc3kcey2bb'),
      snapshotPolicyName?: string(name='SnapshotPolicyName', description='The name of the snapshot policy.', example='testSnapshotName'),
      startTime?: string(name='StartTime', description='The first time when the cloud desktop was started.', example='2020-11-06T08:31Z'),
      supportHibernation?: boolean(name='SupportHibernation', description='Indicates whether hibernation is supported for the cloud desktop.', example='true'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      systemDiskSize?: int32(name='SystemDiskSize', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='TestKey'),
          value?: string(name='Value', description='The value of the tag.', example='TestValue'),
        }
      ](name='Tags', description='Details of the tags.'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
      zoneType?: string(name='ZoneType', description='The type of the zone. Default value: **AvailabilityZone**. This value indicates Alibaba Cloud zones.', example='AvailabilityZone'),
    }
  ](name='Desktops', description='Details of the cloud desktops.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  totalCount?: int32(name='TotalCount', description='The total number of cloud desktops.', example='1'),
}

model DescribeDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopsResponseBody(name='body'),
}

async function describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: Util.RuntimeOptions): DescribeDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopStatus)) {
    query['DesktopStatus'] = request.desktopStatus;
  }
  if (!Util.isUnset(request.desktopStatusList)) {
    query['DesktopStatusList'] = request.desktopStatusList;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.excludedEndUserId)) {
    query['ExcludedEndUserId'] = request.excludedEndUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.filterDesktopGroup)) {
    query['FilterDesktopGroup'] = request.filterDesktopGroup;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.managementFlag)) {
    query['ManagementFlag'] = request.managementFlag;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.onlyDesktopGroup)) {
    query['OnlyDesktopGroup'] = request.onlyDesktopGroup;
  }
  if (!Util.isUnset(request.osTypes)) {
    query['OsTypes'] = request.osTypes;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.queryFotaUpdate)) {
    query['QueryFotaUpdate'] = request.queryFotaUpdate;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotPolicyId)) {
    query['SnapshotPolicyId'] = request.snapshotPolicyId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsWithOptions(request, runtime);
}

model DescribeDesktopsInGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****'),
  ignoreDeleted?: boolean(name='IgnoreDeleted', description='Specifies whether to ignore the deleted cloud desktops.', example='true'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  payType?: string(name='PayType', description='The billing method of the desktop group.', example='PrePaid'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeDesktopsInGroupResponseBody = {
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlinePrePaidDesktopsCount?: int32(name='OnlinePrePaidDesktopsCount', description='The number of subscription cloud desktops that are connected.', example='100'),
  paidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud desktop.', example='Connected'),
      desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ud-7ftf5b6yu77b0****'),
      desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Running'),
      diskType?: string(name='DiskType', description='The disk type.', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of users that are connected to cloud desktops. If no users are connected, null is returned.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='The usernames of users that are connected to cloud desktops. If no users are connected, null is returned.'),
      fotaVersion?: string(name='FotaVersion', description='The image version.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The GPU driver version.', example='1.0'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The image name.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used for management.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member Elastic Network Interface (ENI).', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS type.', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary ENI.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
      resetTime?: string(name='ResetTime', description='The point in time when the cloud desktop was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size. Unit: GiB.', example='80'),
    }
  ](name='PaidDesktops', description='The subscription cloud desktops.'),
  paidDesktopsCount?: int32(name='PaidDesktopsCount', description='The total number of subscription cloud desktops.', example='10'),
  postPaidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud desktop.', example='Connected'),
      createDuration?: string(name='CreateDuration', description='The retention period.', example='4153958447'),
      createTime?: string(name='CreateTime', description='The time when the cloud desktop was created.', example='2022-01-21T06:34:57Z'),
      desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ud-2i8qxpv6t1a07****'),
      desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The state of the cloud desktop.', example='Stopped'),
      diskType?: string(name='DiskType', description='The disk type.', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of users that are connected to cloud desktops. If no users are connected, null is returned.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='The usernames of users that are connected to cloud desktops. If no users are connected, null is returned.'),
      fotaVersion?: string(name='FotaVersion', description='The image version.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The GPU driver version.', example='1.0'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The image name.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used for management.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used for management.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member Elastic Network Interface (ENI).', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS type.', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary ENI.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The protocol. Valid values:

*   ASP
*   HDX', example='HDX'),
      releaseTime?: string(name='ReleaseTime', description='The time when the cloud desktop was released.', example='2022-01-21T16:34:57Z'),
      resetTime?: string(name='ResetTime', description='The point in time when the cloud desktop was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size. Unit: GiB.', example='80'),
    }
  ](name='PostPaidDesktops', description='The pay-as-you-go cloud desktops.'),
  postPaidDesktopsCount?: int32(name='PostPaidDesktopsCount', description='The total number of pay-as-you-go cloud desktops.', example='10'),
  postPaidDesktopsTotalAmount?: int32(name='PostPaidDesktopsTotalAmount', description='The total bill amount for the pay-as-you-go cloud desktops.', example='10000'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  runningPrePaidDesktopsCount?: int32(name='RunningPrePaidDesktopsCount', description='The number of subscription cloud desktops that are running.', example='100'),
  stopedPrePaidDesktopsCount?: int32(name='StopedPrePaidDesktopsCount', description='The number of subscription cloud desktops that are stopped.', example='100'),
  stoppedPrePaidDesktopsCount?: int32(name='StoppedPrePaidDesktopsCount'),
}

model DescribeDesktopsInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDesktopsInGroupResponseBody(name='body'),
}

async function describeDesktopsInGroupWithOptions(request: DescribeDesktopsInGroupRequest, runtime: Util.RuntimeOptions): DescribeDesktopsInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.ignoreDeleted)) {
    query['IgnoreDeleted'] = request.ignoreDeleted;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDesktopsInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDesktopsInGroup(request: DescribeDesktopsInGroupRequest): DescribeDesktopsInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsInGroupWithOptions(request, runtime);
}

model DescribeDevicesRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: string(name='ClientType', description='The type of the Alibaba Cloud Workspace client.

*   1: hardware client.
*   2: software client.', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='5F52817BE267A43C608D245070D2****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the convenience user to whom you want to bind the device.', example='moli'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='1'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The type of the user account.

*   SIMPLE: convenience account.
*   AD: AD account.', example='SIMPLE'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the device.', example='5F52817BE267A43C608D245070D2****'),
      endUserList?: [ 
        {
          adDomain?: string(name='AdDomain', description='The address of the AD workspace.', example='xn--0zw****'),
          directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
          endUserId?: string(name='EndUserId', description='The ID of the user.', example='moli'),
          userType?: string(name='UserType', description='The type of the account.', example='SIMPLE'),
        }
      ](name='EndUserList', description='The users who are bound to the device.'),
    }
  ](name='Devices', description='Details of the devices that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: Util.RuntimeOptions): DescribeDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDevicesWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', description='Details of directory IDs. You can specify one or more directory IDs.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  directoryStatus?: string(name='DirectoryStatus', description='The status of the directory. The value of this parameter is the same as the value of the `Status` parameter.', example='REGISTERED'),
  directoryType?: string(name='DirectoryType', description='The type of the directory.', example='RAM'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the workspace.', example='REGISTERED'),
}

model DescribeDirectoriesResponseBody = {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows.', example='cnshsv21hmc****'),
  directories?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', description='The address of the AD connector.', example='172.17.**.**'),
          connectorStatus?: string(name='ConnectorStatus', description='The status of the AD connector.', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the network interface controller (NIC) with which the AD connector is associated.', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', description='The type of the AD connector.', example='1'),
          trustKey?: string(name='TrustKey', description='The trust password of the AD domain controller.', example='yfpoAD****'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the AD connector is associated.', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors', description='Details of the AD connectors.'),
      creationTime?: string(name='CreationTime', description='The time when the directory was created.', example='2020-11-02T01:44Z'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', description='The ID of the security group.', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', description='The method that is used to connect the client to cloud desktops.', example='Internet'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', description='The endpoint that is used to connect to cloud desktops over a VPC.', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      directoryType?: string(name='DirectoryType', description='The type of the directory.', example='RAM'),
      dnsAddress?: [ string ](name='DnsAddress', description='Details of the DNS addresses of the directory.'),
      dnsUserName?: string(name='DnsUserName', description='The username of the Domain Name System (DNS) user.', example='testDnsUserName'),
      domainName?: string(name='DomainName', description='The name of the domain.', example='example.com'),
      domainPassword?: string(name='DomainPassword', description='The password of the domain administrator.', example='testPassword'),
      domainUserName?: string(name='DomainUserName', description='The username of the domain administrator.', example='sAMAccountName'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the permissions of the local administrator are granted to the regular user of the cloud desktop.', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Indicates whether the desktop communication feature is enabled for cloud desktops in the same workspace.

If the feature is enabled, the cloud desktops in the same workspace can access each other.', example='true'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', description='Indicates whether access over the Internet is allowed.

>  This parameter is unavailable.', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds', description='Details of the IDs of the Apsara File Storage NAS (NAS) file systems.'),
      logs?: [ 
        {
          level?: string(name='Level', description='The level of the log entry.', example='INFO'),
          message?: string(name='Message', description='Details of the log entry.', example='code:success | message:Create Connector complete.'),
          step?: string(name='Step', description='The step that corresponds to the log entry.', example='DescribeDirectories'),
          timeStamp?: string(name='TimeStamp', description='The time when the log entry was printed.', example='2021-01-22T06:45Z'),
        }
      ](name='Logs', description='Details of the registration logs.'),
      mfaEnabled?: boolean(name='MfaEnabled', description='Indicates whether multi-factor authentication (MFA) is enabled.', example='false'),
      name?: string(name='Name', description='The name of the directory.', example='testDirectoryName'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Indicates whether two-factor verification for logons is enabled. This parameter is returned only for workspaces of the convenience account type.\\
If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the Elastic Desktop Service (EDS) client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.', example='false'),
      ouName?: string(name='OuName', description='The name of the organizational unit (OU) that you specified when you add cloud desktops to domains.', example='example.com/Domain Controllers'),
      ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether single sign-on (SSO) is enabled.', example='false'),
      status?: string(name='Status', description='The status of the AD directory. Valid values:

*   REGISTERING
*   REGISTERED', example='REGISTERING'),
      subDnsAddress?: [ string ](name='SubDnsAddress', description='Details of the DNS addresses of the AD subdomain.'),
      subDomainName?: string(name='SubDomainName', description='The fully qualified domain name (FQDN) of the enterprise AD subdomain. The value must contain the hostname and the subdomain name. Example: child.example.com.', example='child.example.com'),
      trustPassword?: string(name='TrustPassword', description='The AD trust password.', example='82Tg****'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='Details of vSwitch IDs that are specified when the directory is being created.'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the vSwitch belongs.', example='vpc-uf6tz5k67puge5jn8****'),
    }
  ](name='Directories', description='Details of the directories.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F369A091-002F-49C8-AD55-02A776297C7B'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryStatus)) {
    query['DirectoryStatus'] = request.directoryStatus;
  }
  if (!Util.isUnset(request.directoryType)) {
    query['DirectoryType'] = request.directoryType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDirectories',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeFlowMetricRequest {
  endTime?: string(name='EndTime', example='1664714703743'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType', example='desktop'),
  metricType?: string(name='MetricType', example='intranetOutRate'),
  period?: int32(name='Period', example='60'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='1651817220643'),
}

model DescribeFlowMetricResponseBody = {
  data?: string(name='Data', example='{\\"instanceId\\": \\"np-4wrye3ishxi47****\\", \\"requestId\\": \\"4F0CD5B6-70D6-5115-A2F7-7EAC3981****\\", \\"dataPoints\\": [{\\"timeStamp\\": 1636510320000, \\"Average\\": 293752.0}]}'),
  requestId?: string(name='RequestId', example='6857EDCB-631F-5405-BE95-45CBB4C3****'),
}

model DescribeFlowMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowMetricResponseBody(name='body'),
}

async function describeFlowMetricWithOptions(request: DescribeFlowMetricRequest, runtime: Util.RuntimeOptions): DescribeFlowMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowMetric',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowMetric(request: DescribeFlowMetricRequest): DescribeFlowMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowMetricWithOptions(request, runtime);
}

model DescribeFlowStatisticRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.\\
Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  period?: int32(name='Period', description='The interval to query the traffic data. Unit: seconds. Valid values:

*   3600
*   10800
*   86400', example='3600'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeFlowStatisticResponseBody = {
  desktopCount?: int32(name='DesktopCount', description='The number of available cloud desktops in the workspace.', example='10'),
  desktopFlowStatistic?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-8bslxqq0csytn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='desktop-1'),
      flowIn?: string(name='FlowIn', description='The amount of the traffic. Unit: KB.', example='1000'),
      flowRank?: int32(name='FlowRank', description='The traffic ranking.', example='1'),
    }
  ](name='DesktopFlowStatistic', description='Details of the traffic that is consumed by cloud desktops.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC2****'),
}

model DescribeFlowStatisticResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFlowStatisticResponseBody(name='body'),
}

/**
  * > You can query only the traffic data in the last 90 days.
  *
  * @param request DescribeFlowStatisticRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeFlowStatisticResponse
 */
async function describeFlowStatisticWithOptions(request: DescribeFlowStatisticRequest, runtime: Util.RuntimeOptions): DescribeFlowStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowStatistic',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can query only the traffic data in the last 90 days.
  *
  * @param request DescribeFlowStatisticRequest
  * @return DescribeFlowStatisticResponse
 */
async function describeFlowStatistic(request: DescribeFlowStatisticRequest): DescribeFlowStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowStatisticWithOptions(request, runtime);
}

model DescribeFotaPendingDesktopsRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskUid?: string(name='TaskUid', example='aot-c4khwrp9ocml4****'),
}

model DescribeFotaPendingDesktopsResponseBody = {
  fotaPendingDesktops?: [ 
    {
      currentAppVersion?: string(name='CurrentAppVersion', example='0.0.1-D-20220513.143129'),
      desktopId?: string(name='DesktopId', example='ecd-bvdtu3jn97o1r****'),
      desktopName?: string(name='DesktopName', example='TestDesktop'),
      fotaProject?: string(name='FotaProject', example='To be hidden.'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-815419****'),
    }
  ](name='FotaPendingDesktops'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaPendingDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFotaPendingDesktopsResponseBody(name='body'),
}

async function describeFotaPendingDesktopsWithOptions(request: DescribeFotaPendingDesktopsRequest, runtime: Util.RuntimeOptions): DescribeFotaPendingDesktopsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFotaPendingDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFotaPendingDesktops(request: DescribeFotaPendingDesktopsRequest): DescribeFotaPendingDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFotaPendingDesktopsWithOptions(request, runtime);
}

model DescribeFotaTasksRequest {
  fotaStatus?: string(name='FotaStatus', description='This parameter is not available.', example='To be hidden.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100
*   Default value: 20', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  taskUid?: [ string ](name='TaskUid', description='The IDs of the image update tasks. You can call the DescribeFotaTasks operation to obtain the value of this parameter.'),
  userStatus?: string(name='UserStatus', description='Specifies whether to automatically push the image update task.

Valid values:

*   Running

    <!-- -->

    :

    <!-- -->

    automatically pushes the image update task.

    <!-- -->

*   Pending

    <!-- -->

    :

    <!-- -->

    does not automatically push the image update task.

    <!-- -->', example='Pending'),
}

model DescribeFotaTasksResponseBody = {
  fotaTasks?: [ 
    {
      appVersion?: string(name='AppVersion', description='The image version. You can call the [DescribeImages](~~188895~~) operation to obtain the value of this parameter.', example='0.0.1-D-20220513.143129'),
      fotaProject?: string(name='FotaProject', description='This parameter is not available.', example='To be hidden.'),
      pendingCustomImageCount?: int32(name='PendingCustomImageCount', description='The number of custom images that can be updated to this version.', example='1'),
      pendingDesktopCount?: int32(name='PendingDesktopCount', description='The number of cloud desktops for which the images can be updated to this version.', example='1'),
      publishTime?: string(name='PublishTime', description='The time when the image version available for update was published.', example='2022-05-31T04:28:48Z'),
      releaseNote?: string(name='ReleaseNote', description='The description of the image version available for update.', example='test'),
      size?: int32(name='Size', description='The size of the image update package. Unit: KB.', example='568533470'),
      status?: string(name='Status', description='Indicates whether an end user can update the image of the cloud desktop.

Valid values:

*   valid

    <!-- -->

    :

    <!-- -->

    The end user can update the image of the cloud desktop.

    <!-- -->

*   invalid

    <!-- -->

    :

    <!-- -->

    The end user cannot update the image of the cloud desktop.

    <!-- -->', example='valid'),
      taskUid?: string(name='TaskUid', description='The ID of the image update task.', example='aot-c4khwrp9ocml4****'),
    }
  ](name='FotaTasks', description='Details about the image update task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFotaTasksResponseBody(name='body'),
}

async function describeFotaTasksWithOptions(request: DescribeFotaTasksRequest, runtime: Util.RuntimeOptions): DescribeFotaTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fotaStatus)) {
    query['FotaStatus'] = request.fotaStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskUid)) {
    query['TaskUid'] = request.taskUid;
  }
  if (!Util.isUnset(request.userStatus)) {
    query['UserStatus'] = request.userStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFotaTasks',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFotaTasks(request: DescribeFotaTasksRequest): DescribeFotaTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFotaTasksWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  operateType?: string(name='OperateType', example='vul_fix'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='sys'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-bvolet79zmpkq****'),
      name?: string(name='Name', example='5000803'),
      tag?: string(name='Tag', example='system'),
    }
  ](name='VulInfo'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-bvolet79zmpkq****'),
      patchList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name', example='5001078'),
        }
      ](name='PatchList'),
    }
  ](name='FrontPatchList'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulInfo)) {
    query['VulInfo'] = request.vulInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFrontVulPatchList',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  currentPage?: int32(name='CurrentPage', description='The name of the vulnerability.', example='1'),
  dealed?: string(name='Dealed', description='The number of low-risk vulnerabilities.', example='y'),
  lang?: string(name='Lang', description='The time when the vulnerability was last detected. The timestamp follows the UNIX time format. It is the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970.', example='zh'),
  necessity?: string(name='Necessity', description='The natural language of the request and response. Valid values:

*   zh: Chinese
*   en: English', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', description='The tags of the vulnerability.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='20'),
  regionId?: string(name='RegionId', description='The total number of entries returned.', example='cn-hangzhou'),
  type?: string(name='Type', description='The maximum number of entries to return on each page.

Default value: 20.', example='cve'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='20'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The ID of the request.', example='RHSA-2019:0230-Important: polkit security update'),
      asapCount?: int32(name='AsapCount', example='1'),
      gmtLast?: string(name='GmtLast', description='The ID of the workspace.', example='1554185744000'),
      handledCount?: int32(name='HandledCount', description='The maximum number of entries returned per page.', example='0'),
      laterCount?: int32(name='LaterCount', description='The page number of the returned page.', example='1'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount', description='The type of the vulnerability. Valid values:

*   cve: Linux software vulnerability
*   sys: Windows system vulnerability', example='0'),
      tags?: string(name='Tags', description='Details about vulnerabilities.'),
      type?: string(name='Type', description='The alias of the vulnerability.', example='cve'),
    }
  ](name='GroupedVulItems', description='The ID of the region.'),
  pageSize?: int32(name='PageSize', description='The priority to fix the vulnerability or the risk level of the vulnerability. Valid values:

*   asap: high
*   later: medium
*   nntf: low', example='1'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to DescribeGroupedVul.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The processing status of the vulnerability. Valid values:

*   y: handled
*   n: unhandled', example='2'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

/**
  * The number of vulnerabilities processed.
  *
  * @param request DescribeGroupedVulRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeGroupedVulResponse
 */
async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedVul',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of vulnerabilities processed.
  *
  * @param request DescribeGroupedVulRequest
  * @return DescribeGroupedVulResponse
 */
async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeImageModifiedRecordsRequest {
  desktopId?: string(name='DesktopId', example='ecd-bd53sfmysz8ir****'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l3d+SWeOobbIlDLjwhjkTk'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeImageModifiedRecordsResponseBody = {
  imageModifiedRecords?: [ 
    {
      imageId?: string(name='ImageId', example='m-8rnz2imrpcfuh****'),
      imageName?: string(name='ImageName', example='win10-0307'),
      newImageId?: string(name='NewImageId', example='xxxNewImageID'),
      newImageName?: string(name='NewImageName', example='xxxxImageID'),
      status?: int32(name='Status', example='1'),
      updateTime?: string(name='UpdateTime', example='2022-03-03T02:43:44.851Z'),
    }
  ](name='ImageModifiedRecords'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6koN7RqHg3d2z8LKmSoe821'),
  requestId?: string(name='RequestId', example='DC40EE61-7E83-59ED-AEA6-7EE9C437F352'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeImageModifiedRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageModifiedRecordsResponseBody(name='body'),
}

async function describeImageModifiedRecordsWithOptions(request: DescribeImageModifiedRecordsRequest, runtime: Util.RuntimeOptions): DescribeImageModifiedRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageModifiedRecords',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageModifiedRecords(request: DescribeImageModifiedRecordsRequest): DescribeImageModifiedRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageModifiedRecordsWithOptions(request, runtime);
}

model DescribeImagePermissionRequest {
  imageId?: string(name='ImageId', example='m-4zfb6zj728hhr****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeImagePermissionResponseBody = {
  aliUids?: [ string ](name='AliUids'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribeImagePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagePermissionResponseBody(name='body'),
}

async function describeImagePermissionWithOptions(request: DescribeImagePermissionRequest, runtime: Util.RuntimeOptions): DescribeImagePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImagePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImagePermission(request: DescribeImagePermissionRequest): DescribeImagePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePermissionWithOptions(request, runtime);
}

model DescribeImagesRequest {
  desktopInstanceType?: string(name='DesktopInstanceType', description='The cloud desktop type. You can call the [DescribeBundles](~~188884~~) operation to query the available cloud desktop types.', example='ecd.graphics.xlarge'),
  fotaVersion?: string(name='FotaVersion'),
  gpuCategory?: boolean(name='GpuCategory', description='Specifies whether the image is a GPU-accelerated image.', example='false'),
  gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='417.22'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images. You can specify one or more image IDs.', example='m-gx2x1dhsmusr2****'),
  imageName?: string(name='ImageName'),
  imageStatus?: string(name='ImageStatus', description='The state of the image.', example='Available'),
  imageType?: string(name='ImageType', description='The type of the image.', example='SYSTEM'),
  languageType?: string(name='LanguageType', description='The language of the OS.', example='en-US'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If you do not specify this parameter, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  osType?: string(name='OsType', description='The type of the OS. Default value: `null`.', example='Windows'),
  protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  sessionType?: string(name='SessionType', description='The session type.', example='SINGLE_SESSION'),
}

model DescribeImagesResponseBody = {
  images?: [ 
    {
      appVersion?: string(name='AppVersion', description='The version of the image.', example='1.0.0'),
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2018-01-10T01:01:10Z'),
      dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='150'),
      description?: string(name='Description', description='The description of the image.', example='This is description.'),
      gpuCategory?: boolean(name='GpuCategory', description='Indicates whether the image is a GPU-accelerated image.', example='false'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='417.22'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****'),
      imageType?: string(name='ImageType', description='The type of the image.', example='SYSTEM'),
      name?: string(name='Name', description='The name of the image.', example='testImageName'),
      osType?: string(name='OsType', description='The OS type of the image.', example='WINDOWS'),
      platform?: string(name='Platform', description='The OS type of the image.', example='Windows Server 2019'),
      progress?: string(name='Progress', description='The progress of image creation. Unit: percentage (%).', example='100%'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      sessionType?: string(name='SessionType', description='The session type of the image. Valid values:

*   SINGLE_SESSION: single-session images
*   MULTIPLE_SESSION: multi-session images', example='MULTIPLE_SESSION'),
      sharedCount?: int32(name='SharedCount', description='The number of shared images.', example='1'),
      size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='40'),
      status?: string(name='Status', description='The state of the image.', example='Available'),
      supportedLanguages?: [ string ](name='SupportedLanguages', description='The languages of the OS.'),
      updateTime?: string(name='UpdateTime', description='The time when the image was last modified.', example='2021-12-22T02:48:43Z'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain the list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Images', description='The details of the images.'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopInstanceType)) {
    query['DesktopInstanceType'] = request.desktopInstanceType;
  }
  if (!Util.isUnset(request.fotaVersion)) {
    query['FotaVersion'] = request.fotaVersion;
  }
  if (!Util.isUnset(request.gpuCategory)) {
    query['GpuCategory'] = request.gpuCategory;
  }
  if (!Util.isUnset(request.gpuDriverVersion)) {
    query['GpuDriverVersion'] = request.gpuDriverVersion;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageStatus)) {
    query['ImageStatus'] = request.imageStatus;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.languageType)) {
    query['LanguageType'] = request.languageType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  commandType?: string(name='CommandType', example='RunPowerShellScript'),
  contentEncoding?: string(name='ContentEncoding', example='PlainText'),
  desktopId?: string(name='DesktopId', example='ecd-7w78ozhjcwa3u****'),
  desktopIds?: [ string ](name='DesktopIds'),
  endUserId?: string(name='EndUserId', example='test1'),
  includeOutput?: boolean(name='IncludeOutput', example='false'),
  invokeId?: string(name='InvokeId', example='t-hz0jdfwd9f****'),
  invokeStatus?: string(name='InvokeStatus', example='Finished'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
      commandType?: string(name='CommandType', example='RunPowerShellScript'),
      creationTime?: string(name='CreationTime', example='2020-12-19T09:15:46Z'),
      endUserId?: string(name='EndUserId', example='User1'),
      invocationStatus?: string(name='InvocationStatus', example='Pending'),
      invokeDesktops?: [ 
        {
          creationTime?: string(name='CreationTime', example='2020-12-20T06:15:54Z'),
          desktopId?: string(name='DesktopId', example='ecd-7w78ozhjcwa3u****'),
          desktopName?: string(name='DesktopName'),
          dropped?: int32(name='Dropped', example='0'),
          errorCode?: string(name='ErrorCode', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', example='The specified instance does not exist.'),
          exitCode?: long(name='ExitCode', example='0'),
          finishTime?: string(name='FinishTime', example='2020-12-20T06:15:56Z'),
          invocationStatus?: string(name='InvocationStatus', example='Success'),
          output?: string(name='Output', example='OutPutTestmsg'),
          repeats?: int32(name='Repeats', example='0'),
          startTime?: string(name='StartTime', example='2020-12-20T06:15:55Z'),
          stopTime?: string(name='StopTime', example='2020-12-25T09:15:47Z'),
          updateTime?: string(name='UpdateTime', example='2020-12-25T06:15:56Z'),
        }
      ](name='InvokeDesktops'),
      invokeId?: string(name='InvokeId', example='t-hz0jdfwd9f****'),
    }
  ](name='Invocations'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * The error message that is returned if the command failed to be sent or run.
  * *   If null is returned, the command is run normally.
  * *   If "the specified instance does not exist" is returned, the specified cloud desktop does not exist or is released.
  * *   If "the instance has released when create task" is returned, the specified cloud desktop is released during the command execution.
  * *   If "the instance is not running when create task" is returned, the specified cloud desktop is not in the Running state when the execution is created.
  * *   If "the command is not applicable" is returned, the command cannot be run on the specified cloud desktop.
  * *   If "the aliyun service is not running on the instance" is returned, Cloud Assistant is not running.
  * *   If "the aliyun service in the instance does not response" is returned, Cloud Assistant does not respond to your request.
  * *   If "the aliyun service in the instance is upgrading now" is returned, Cloud Assistant is being upgraded.
  * *   If "the aliyun service in the instance need upgrade" is returned, you must upgrade Cloud Assistant.
  * *   If "the command delivery has been timeout" is returned, the operation to send the command times out.
  * *   If "the command execution has been timeout" is returned, the command execution times out.
  * *   If "the command execution got an exception" is returned, an exception occurs during the command execution.
  * *   If "the command execution has been interrupted" is returned, the command execution is interrupted.
  * *   If "the command execution exit code is not zero" is returned, the command execution is complete, but the exit code is not 0.
  *
  * @param request DescribeInvocationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationsResponse
 */
async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandType)) {
    query['CommandType'] = request.commandType;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopIds)) {
    query['DesktopIds'] = request.desktopIds;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.includeOutput)) {
    query['IncludeOutput'] = request.includeOutput;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.invokeStatus)) {
    query['InvokeStatus'] = request.invokeStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The error message that is returned if the command failed to be sent or run.
  * *   If null is returned, the command is run normally.
  * *   If "the specified instance does not exist" is returned, the specified cloud desktop does not exist or is released.
  * *   If "the instance has released when create task" is returned, the specified cloud desktop is released during the command execution.
  * *   If "the instance is not running when create task" is returned, the specified cloud desktop is not in the Running state when the execution is created.
  * *   If "the command is not applicable" is returned, the command cannot be run on the specified cloud desktop.
  * *   If "the aliyun service is not running on the instance" is returned, Cloud Assistant is not running.
  * *   If "the aliyun service in the instance does not response" is returned, Cloud Assistant does not respond to your request.
  * *   If "the aliyun service in the instance is upgrading now" is returned, Cloud Assistant is being upgraded.
  * *   If "the aliyun service in the instance need upgrade" is returned, you must upgrade Cloud Assistant.
  * *   If "the command delivery has been timeout" is returned, the operation to send the command times out.
  * *   If "the command execution has been timeout" is returned, the command execution times out.
  * *   If "the command execution got an exception" is returned, an exception occurs during the command execution.
  * *   If "the command execution has been interrupted" is returned, the command execution is interrupted.
  * *   If "the command execution exit code is not zero" is returned, the command execution is complete, but the exit code is not 0.
  *
  * @param request DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeKmsKeysRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeKmsKeysResponseBody = {
  authorizeStatus?: string(name='AuthorizeStatus', example='authorized'),
  keys?: [ 
    {
      alias?: string(name='Alias', example='TestAlias'),
      arn?: string(name='Arn', example='acs:kms:cn-hangzhou:154035569884****:key/05754286-3ba2-4fa6-8d41-4323aca6****'),
      keyId?: string(name='KeyId', example='05754286-3ba2-4fa6-8d41-4323aca6****'),
      type?: string(name='Type', example='ServiceKey'),
    }
  ](name='Keys'),
  kmsServiceStatus?: string(name='KmsServiceStatus', example='enabled'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeKmsKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKmsKeysResponseBody(name='body'),
}

async function describeKmsKeysWithOptions(request: DescribeKmsKeysRequest, runtime: Util.RuntimeOptions): DescribeKmsKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKmsKeys',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKmsKeys(request: DescribeKmsKeysRequest): DescribeKmsKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKmsKeysWithOptions(request, runtime);
}

model DescribeNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId', example='04f314****'),
  matchCompatibleProfile?: boolean(name='MatchCompatibleProfile', example='false'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeNASFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      capacity?: long(name='Capacity', example='10485760'),
      createTime?: string(name='CreateTime', example='2021-05-10T11:39Z'),
      description?: string(name='Description', example='testDescription'),
      desktopGroups?: [ 
        {
          desktopGroupId?: string(name='DesktopGroupId', example='dg-9eeyf15b25nyl****'),
          desktopGroupName?: string(name='DesktopGroupName', example='test_dg'),
        }
      ](name='DesktopGroups'),
      encryptionEnabled?: boolean(name='EncryptionEnabled', example='false'),
      fileSystemId?: string(name='FileSystemId', example='04f314****'),
      fileSystemName?: string(name='FileSystemName', example='testNAS'),
      fileSystemStatus?: string(name='FileSystemStatus', example='Running'),
      fileSystemType?: string(name='FileSystemType', example='standard'),
      meteredSize?: long(name='MeteredSize', example='0'),
      mountTargetDomain?: string(name='MountTargetDomain', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
      mountTargetStatus?: string(name='MountTargetStatus', example='Active'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', example='test'),
      profileCompatible?: boolean(name='ProfileCompatible', example='false'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      storageType?: string(name='StorageType', example='Capacity'),
      supportAcl?: boolean(name='SupportAcl', example='false'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-f'),
    }
  ](name='FileSystems'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model DescribeNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNASFileSystemsResponseBody(name='body'),
}

async function describeNASFileSystemsWithOptions(request: DescribeNASFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeNASFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.matchCompatibleProfile)) {
    query['MatchCompatibleProfile'] = request.matchCompatibleProfile;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNASFileSystems',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNASFileSystems(request: DescribeNASFileSystemsRequest): DescribeNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNASFileSystemsWithOptions(request, runtime);
}

model DescribeNetworkPackagesRequest {
  internetChargeType?: string(name='InternetChargeType', description='The billing method of the Internet access package. Valid values:

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByBandwidth'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10'),
  networkPackageId?: [ string ](name='NetworkPackageId', description='The IDs of the Internet access packages. You can specify 1 to 100 IDs of Internet access packages.', example='np-amtp8e8q1o9e4****'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeNetworkPackagesResponseBody = {
  networkPackages?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the Internet access package. Unit: Mbit/s.', example='10'),
      createTime?: string(name='CreateTime', description='The time when the Internet access package was created.', example='2021-05-10T02:35:26Z'),
      eipAddresses?: [ string ](name='EipAddresses', description='The elastic IP addresses (EIPs) of the Internet access package for outbound traffic.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the Internet access package expires.

*   If the Internet access package is metered on a pay-by-bandwidth basis, the actual expiration time is returned.
*   If the Internet access package is metered on a pay-by-data-transfer basis, 2099-12-31T15:59:59Z is returned.', example='2099-12-31T15:59:59Z'),
      internetChargeType?: string(name='InternetChargeType', description='The billing method of the network bandwidth.

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByTraffic'),
      networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-amtp8e8q1o9e4****'),
      networkPackageStatus?: string(name='NetworkPackageStatus', description='The state of the Internet access package. Valid values:

*   Creating
*   InUse
*   Releasing
*   Released', example='InUse'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The type of the workspace. Valid values:

*   basic
*   standard
*   customized', example='basic'),
      payType?: string(name='PayType', description='The billing method for the network.

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the reserved network bandwidth takes effect.', example='2021-07-10T00:00:00Z'),
      reservationBandwidth?: int32(name='ReservationBandwidth', description='The peak bandwidth of the reserved network bandwidth. Unit: Mbit/s.', example='20'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The billing method of the reserved network bandwidth.

*   PayByTraffic: pay-by-data-transfer
*   PayByBandwidth: pay-by-bandwidth', example='PayByBandwidth'),
    }
  ](name='NetworkPackages', description='Details of the Internet access packages.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkPackagesResponseBody(name='body'),
}

async function describeNetworkPackagesWithOptions(request: DescribeNetworkPackagesRequest, runtime: Util.RuntimeOptions): DescribeNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkPackages(request: DescribeNetworkPackagesRequest): DescribeNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkPackagesWithOptions(request, runtime);
}

model DescribeOfficeSitesRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: [ string ](name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  officeSiteType?: string(name='OfficeSiteType', example='SIMPLE'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: string(name='Status', example='REGISTERED'),
}

model DescribeOfficeSitesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSites?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', example='172.24.*.*'),
          connectorStatus?: string(name='ConnectorStatus', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', example='1'),
          trustKey?: string(name='TrustKey', example='password123***'),
          vSwitchId?: string(name='VSwitchId', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors'),
      adHostname?: string(name='AdHostname', example='beijing-ad01'),
      bandwidth?: int32(name='Bandwidth', example='10'),
      cenId?: string(name='CenId', example='cen-3gwy16dojz1m65****'),
      cidrBlock?: string(name='CidrBlock', example='172.16.0.0/16'),
      cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', example='true'),
      creationTime?: string(name='CreationTime', example='2021-05-06T05:58Z'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', example='INTERNET'),
      desktopCount?: long(name='DesktopCount', example='1'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      dnsAddress?: [ string ](name='DnsAddress'),
      dnsUserName?: string(name='DnsUserName', example='testDnsUserName'),
      domainName?: string(name='DomainName', example='example.com'),
      domainPassword?: string(name='DomainPassword', example='testPassword'),
      domainUserName?: string(name='DomainUserName', example='Administrator'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', example='false'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds'),
      logs?: [ 
        {
          level?: string(name='Level', example='INFO'),
          message?: string(name='Message', example='code:success | message:Create Connector complete'),
          step?: string(name='Step', example='CREATE_CONNECTOR'),
          timeStamp?: string(name='TimeStamp', example='2021-05-12T09:42Z'),
        }
      ](name='Logs'),
      mfaEnabled?: boolean(name='MfaEnabled', example='false'),
      name?: string(name='Name', example='test'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', example='false'),
      needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', example='true'),
      networkPackageId?: string(name='NetworkPackageId', example='np-amtp8e8q1o9e4****'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
      officeSiteType?: string(name='OfficeSiteType', example='AD_CONNECTOR'),
      ouName?: string(name='OuName', example='example.com/Domain Controllers'),
      protocolType?: string(name='ProtocolType', example='ASP'),
      rdsLicenseAddress?: string(name='RdsLicenseAddress'),
      rdsLicenseDomainName?: string(name='RdsLicenseDomainName'),
      rdsLicenseStatus?: string(name='RdsLicenseStatus'),
      ssoEnabled?: boolean(name='SsoEnabled', example='false'),
      ssoType?: string(name='SsoType', example='To be hidden.'),
      status?: string(name='Status', example='REGISTERED'),
      subDnsAddress?: [ string ](name='SubDnsAddress'),
      subDomainName?: string(name='SubDomainName', example='testSubDnsUserName'),
      totalEdsCount?: long(name='TotalEdsCount'),
      totalEdsCountForGroup?: long(name='TotalEdsCountForGroup'),
      trustPassword?: string(name='TrustPassword', example='To be hidden.'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-uf6tz5k67puge5jn8****'),
      vpcType?: string(name='VpcType', example='Basic'),
    }
  ](name='OfficeSites'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfficeSitesResponseBody(name='body'),
}

async function describeOfficeSitesWithOptions(request: DescribeOfficeSitesRequest, runtime: Util.RuntimeOptions): DescribeOfficeSitesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteType)) {
    query['OfficeSiteType'] = request.officeSiteType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOfficeSites',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfficeSitesWithOptions(request, runtime);
}

model DescribePolicyGroupsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  policyGroupId?: [ string ](name='PolicyGroupId', description='The policy IDs. You can specify one or more policy IDs.', example='system-all-enabled-policy'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: The policy takes effect globally.
*   IP: The policy takes effect based on the IP address.
*   ALL: The policy takes effect without limits.

Default value: GLOBAL.', example='ALL'),
}

model DescribePolicyGroupsResponseBody = {
  describePolicyGroups?: [ 
    {
      appContentProtection?: string(name='AppContentProtection', description='Indicates whether the anti-screenshot feature is enabled. Valid values:

*   on: This feature is enabled.
*   off: This feature is disabled.

Default value: off.', example='off'),
      authorizeAccessPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The CIDR block that you access from the client. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The description of the IPv4 CIDR block.', example='test'),
        }
      ](name='AuthorizeAccessPolicyRules', description='The client CIDR blocks in the whitelist.'),
      authorizeSecurityPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The IPv4 CIDR block of the security group rule.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The description of the security group rule.', example='test'),
          ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.

Valid values:

*   tcp: Transmission Control Protocol (TCP)

    <!-- -->

    <!-- -->

    <!-- -->

*   udp: User Datagram Protocol (UDP)

    <!-- -->

    <!-- -->

    <!-- -->

*   all: all protocols

    <!-- -->

    <!-- -->

    <!-- -->

*   gre: Generic Routing Encapsulation (GRE)

    <!-- -->

    <!-- -->

    <!-- -->

*   icmp: ICMP (IPv4)

    <!-- -->

    <!-- -->

    <!-- -->', example='tcp'),
          policy?: string(name='Policy', description='The authorization policy of the security group rule.

Valid values:

*   drop: denies all access requests.

    <!-- -->

    <!-- -->

    <!-- -->

*   accept: accepts all access requests.

    <!-- -->

    <!-- -->

    <!-- -->', example='accept'),
          portRange?: string(name='PortRange', description='The port range of the security group rule.', example='22/22'),
          priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority.', example='1'),
          type?: string(name='Type', description='The direction of the security group rule.

Valid values:

*   outflow: outbound

    <!-- -->

    <!-- -->

    <!-- -->

*   inflow: inbound

    <!-- -->

    <!-- -->

    <!-- -->', example='inflow'),
        }
      ](name='AuthorizeSecurityPolicyRules', description='The security group rules.'),
      cameraRedirect?: string(name='CameraRedirect', description='Indicates whether the webcam redirection feature is enabled.

Valid values:

*   off: The feature is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on (default): The feature is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
      clientTypes?: [ 
        {
          clientType?: string(name='ClientType', description='The client type.

Valid values:

*   html5: web client

    <!-- -->

    <!-- -->

    <!-- -->

*   linux

    <!-- -->

    :

    <!-- -->

    WUYING hardware client

    <!-- -->

*   android

    <!-- -->

    :

    <!-- -->

    Android client

    <!-- -->

*   windows

    <!-- -->

    :

    <!-- -->

    Windows client

    <!-- -->

*   ios

    <!-- -->

    :

    <!-- -->

    iOS client

    <!-- -->

*   macos

    <!-- -->

    :

    <!-- -->

    macOS client

    <!-- -->', example='windows'),
          status?: string(name='Status', description='Indicates whether a specific type of client is allowed to connect to the cloud desktop.

Valid values:

*   OFF

    <!-- -->

    :

    <!-- -->

    not allowed

    <!-- -->

*   ON

    <!-- -->

    :

    <!-- -->

    allowed

    <!-- -->', example='ON'),
        }
      ](name='ClientTypes', description='The logon methods.'),
      clipboard?: string(name='Clipboard', description='The permissions on the clipboard.

Valid values:

*   read: One-way transfer is allowed.

    <!-- -->

    <!-- -->

    <!-- -->

*   readwrite: Two-way transfer is allowed.

    <!-- -->

    <!-- -->

    <!-- -->

*   off: Two-way transfer is not allowed.

    <!-- -->

    <!-- -->

    <!-- -->', example='readwrite'),
      cpuDownGradeDuration?: int32(name='CpuDownGradeDuration'),
      cpuProcessors?: [ string ](name='CpuProcessors'),
      cpuProtectedMode?: string(name='CpuProtectedMode'),
      cpuRateLimit?: int32(name='CpuRateLimit'),
      cpuSampleDuration?: int32(name='CpuSampleDuration'),
      cpuSingleRateLimit?: int32(name='CpuSingleRateLimit'),
      domainList?: string(name='DomainList', description='The access control for domain names. The domain names can contain the wildcard character (\\*). Multiple domain names are separated by commas (,). Valid values:

*   off: This feature is disabled.
*   on: This feature is enabled.', example='off'),
      domainResolveRule?: [ 
        {
          description?: string(name='Description', description='The policy description.', example='Test'),
          domain?: string(name='Domain', description='The domain name.', example='*.com'),
          policy?: string(name='Policy', description='Indicates whether the resolution feature is allowed.

*   allow: The feature is allowed.
*   block: The feature is not allowed.', example='allow'),
        }
      ](name='DomainResolveRule', description='The resolution of domain names.'),
      domainResolveRuleType?: string(name='DomainResolveRuleType', description='Indicates whether the switch for domain name resolution is turned on.

Valid values:

*   off

    <!-- -->

    <!-- -->

    <!-- -->

*   on

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
      edsCount?: int32(name='EdsCount', description='The number of cloud desktops that are associated with the policy.\\
This parameter is returned only if PolicyGroupType is set to CUSTOM.', example='1'),
      endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', description='Indicates whether the switch for end users to ask for assistance from the administrator is turned on. Valid values: on off', example='on'),
      endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', description='The switch for stream collaboration between end users. Valid values: on off', example='on'),
      gpuAcceleration?: string(name='GpuAcceleration', description='Indicates whether the image quality policy is enabled for Graphics cloud desktops. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional design scenarios.

Valid values:

*   off: The feature is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: This feature is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
      html5Access?: string(name='Html5Access', description='The HTML5 client access feature.

Valid values:

*   off (default)

    <!-- -->

    :

    <!-- -->

    disabled

    <!-- -->

*   on

    <!-- -->

    :

    <!-- -->

    enabled

    <!-- -->', example='off'),
      html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer feature for the HTML5 client.

Valid values:

*   all: Files can be uploaded and downloaded between your computer and HTML5 clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   download: Files on HTML5 clients can be downloaded to your computer.

    <!-- -->

    <!-- -->

    <!-- -->

*   upload: Files on your computer can be uploaded to HTML5 clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   off (default): File transfer between HTML5 clients and your computer is disabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off'),
      internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol that is used for network communication. Valid values:

*   TCP: Only the TCP protocol is used.
*   BOTH: The automatic switchover between the TCP protocol and the UDP protocol is supported.

Default value: TCP.', example='BOTH'),
      localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.

Valid values:

*   read: read-only

    <!-- -->

    <!-- -->

    <!-- -->

*   readwrite: read and write

    <!-- -->

    <!-- -->

    <!-- -->

*   off: no permissions

    <!-- -->

    <!-- -->

    <!-- -->', example='readwrite'),
      memoryDownGradeDuration?: int32(name='MemoryDownGradeDuration'),
      memoryProcessors?: [ string ](name='MemoryProcessors'),
      memoryProtectedMode?: string(name='MemoryProtectedMode'),
      memoryRateLimit?: int32(name='MemoryRateLimit'),
      memorySampleDuration?: int32(name='MemorySampleDuration'),
      memorySingleRateLimit?: int32(name='MemorySingleRateLimit'),
      name?: string(name='Name', description='The policy name.', example='testPolicyGroupName'),
      netRedirect?: string(name='NetRedirect', description='Indicates whether the network redirection feature is enabled. Valid values:

*   on: This feature is enabled.
*   off: The feature is disabled.

Default value: off.', example='off'),
      netRedirectRule?: [ 
        {
          domain?: string(name='Domain', description='The content of the rule.', example='*.com'),
          policy?: string(name='Policy'),
          ruleType?: string(name='RuleType', description='The rule type.

Valid values:

*   prc

    <!-- -->

    :

    <!-- -->

    process

    <!-- -->

*   domain

    <!-- -->

    :

    <!-- -->

    domain name

    <!-- -->', example='domain'),
        }
      ](name='NetRedirectRule', description='The network redirection rules.'),
      policyGroupId?: string(name='PolicyGroupId', description='The policy ID.', example='pg-gx2x1dhsmthe9****'),
      policyGroupType?: string(name='PolicyGroupType', description='The rule type.

Valid values:

*   SYSTEM

    <!-- -->

    <!-- -->

    <!-- -->

*   CUSTOM

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      policyStatus?: string(name='PolicyStatus', description='The state of the policy.

Valid values:

*   AVAILABLE

    <!-- -->

    <!-- -->

    <!-- -->

*   CREATING

    <!-- -->

    <!-- -->

    <!-- -->', example='AVAILABLE'),
      preemptLogin?: string(name='PreemptLogin', description='Indicates whether user preemption is allowed. The value is fixed to `off`, which indicates that user preemption is not allowed.', example='off'),
      preemptLoginUsers?: [ string ](name='PreemptLoginUsers', description='The names of the users that are allowed to connect to the cloud desktop to which another user is logged on.'),
      printerRedirection?: string(name='PrinterRedirection', description='The printer redirection feature.

Valid values:

*   off

    <!-- -->

    :

    <!-- -->

    The feature is disabled

    <!-- -->

    .

*   on

    <!-- -->

    :

    <!-- -->

    The feature is enabled

    <!-- -->

    .', example='on'),
      recordContent?: string(name='RecordContent', description='Indicates whether the custom screen recording feature is enabled. Valid values:

*   on: This feature is enabled.
*   off: This feature is disabled.

Default value: off.', example='off'),
      recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30'),
      recording?: string(name='Recording', description='Indicates whether screen recording is enabled.

Valid values:

*   ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends after the end users disconnect from the cloud desktops.

    <!-- -->

    <!-- -->

    <!-- -->

*   PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must specify the start time and the end time of the recording.

    <!-- -->

    <!-- -->

    <!-- -->

*   OFF: Screen recording is disabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='OFF'),
      recordingAudio?: string(name='RecordingAudio', description='Indicates whether the sound that is generated on the cloud desktop is recorded during screen recording. Valid values:

*   on: records audio and video data.
*   off: records only video data.', example='on'),
      recordingDuration?: int32(name='RecordingDuration', description='This parameter is used together with Recording. After the specified period of the recording reaches, a screen recording file is generated.', example='10'),
      recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording ended. The value is in the HH:MM:SS format. The value of this parameter is valid only if Recording is set to PERIOD.', example='08:59:00'),
      recordingExpires?: long(name='RecordingExpires', description='The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: days.', example='15'),
      recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Unit: fps. Valid values:

*   2
*   5
*   10
*   15', example='5'),
      recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording was started. The value is in the HH:MM:SS format. The value of this parameter is valid only if Recording is set to PERIOD.', example='08:00:00'),
      remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:

*   fullControl: The keyboard and mouse are fully controlled.
*   optionalControl: By default, you do not have the permissions on the keyboard or mouse to control the cloud desktop during remote assistance. You can apply for the permissions.
*   disableControl: The keyboard and mouse are not controlled.', example='fullControl'),
      scope?: string(name='Scope', description='The effective scope of the policy. Valid values:

*   GLOBAL: The policy takes effect globally.
*   IP: The policy takes effect based on the IP address.', example='GLOBAL'),
      scopeValue?: [ string ](name='ScopeValue', description='This parameter is specified if Scope is set to IP.'),
      usbRedirect?: string(name='UsbRedirect', description='Indicates whether the USB redirection feature is enabled.

Valid values:

*   off: The feature is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: This feature is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
      usbSupplyRedirectRule?: [ 
        {
          description?: string(name='Description', description='The rule description.', example='Test'),
          deviceClass?: string(name='DeviceClass', description='The device class. If you set `UsbRuleType` to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
          deviceSubclass?: string(name='DeviceSubclass', description='The device subclass. This parameter is required if `UsbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
          productId?: string(name='ProductId', description='The product ID.', example='08**'),
          usbRedirectType?: long(name='UsbRedirectType', description='The USB redirection type.

Valid values:

*   1: allows USB redirection.

    <!-- -->

    <!-- -->

    <!-- -->

*   2: forbids USB redirection.

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
          usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.

Valid values:

*   1: by device class

    <!-- -->

    <!-- -->

    <!-- -->

*   2: by device vendor

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
          vendorId?: string(name='VendorId', description='The vendor ID. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf\\_1.pdf).', example='04**'),
        }
      ](name='UsbSupplyRedirectRule', description='The USB redirection rules.'),
      videoRedirect?: string(name='VideoRedirect', description='Indicates whether the multimedia redirection feature is enabled. Valid values: on: The feature is enabled. off: The feature is disabled.', example='off'),
      visualQuality?: string(name='VisualQuality', description='The image display quality feature.

Valid values:

*   high

    <!-- -->

    :

    <!-- -->

    high-definition (HD)

    <!-- -->

*   low

    <!-- -->

    :

    <!-- -->

    fluent

    <!-- -->

*   medium (default)

    <!-- -->

    :

    <!-- -->

    adaptive

    <!-- -->

*   lossless

    <!-- -->

    :

    <!-- -->

    no quality loss

    <!-- -->', example='medium'),
      watermark?: string(name='Watermark', description='Indicates whether the watermark feature is enabled.

Valid values:

*   off: The feature is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: This feature is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='on'),
      watermarkColor?: int32(name='WatermarkColor', description='The font color of the watermark. Valid values: 0 to 16777215.', example='0'),
      watermarkCustomText?: string(name='WatermarkCustomText', description='This parameter is unavailable for public use.', example='test'),
      watermarkDegree?: double(name='WatermarkDegree', description='The inclination angle of the watermark. Valid values: -10 to -30.', example='-10'),
      watermarkFontSize?: int32(name='WatermarkFontSize', description='The font size of the watermark. Valid values: 10 to 20.', example='10'),
      watermarkFontStyle?: string(name='WatermarkFontStyle', description='The font style of the watermark. Valid values:

*   plain
*   bold', example='plain'),
      watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows. This parameter is now invalid.', example='5'),
      watermarkTransparency?: string(name='WatermarkTransparency', description='The watermark transparency.

Valid values:

*   LIGHT

    <!-- -->

    <!-- -->

    <!-- -->

*   DARK

    <!-- -->

    <!-- -->

    <!-- -->

*   MIDDLE

    <!-- -->

    <!-- -->

    <!-- -->', example='LIGHT'),
      watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The watermark transparency. A larger value indicates that the watermark is less transparent. Valid values: 10 to 100.', example='10'),
      watermarkType?: string(name='WatermarkType', description='The watermark type.

Valid values:

*   HostName,EndUserId: The watermark is displayed in the following format: Rightmost 15 characters of the cloud desktop ID,Username.

    <!-- -->

    <!-- -->

    <!-- -->

*   EndUserId: The username is displayed.

    <!-- -->

    <!-- -->

    <!-- -->

*   EndUserId,HostName: The watermark is displayed in the following format: Username,Rightmost 15 characters of the cloud desktop ID.

    <!-- -->

    <!-- -->

    <!-- -->

*   HostName: The rightmost 15 characters of the cloud desktop ID are displayed.

    <!-- -->

    <!-- -->

    <!-- -->', example='EndUserId'),
    }
  ](name='DescribePolicyGroups', description='Details of the policies.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyGroupsResponseBody(name='body'),
}

async function describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: Util.RuntimeOptions): DescribePolicyGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyGroupsWithOptions(request, runtime);
}

model DescribePriceRequest {
  amount?: int32(name='Amount', description='The number of the resources. Default value: 1.', example='1'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Unit: Mbit/s.

*   Valid values if the PayByTraffic parameter is set to PayByBandwidth: 10 to 1000
*   Valid values if the PayByTraffic parameter is set to PayByTraffic: 10 to 200', example='10'),
  bundleModels?: [ 
    {
      amount?: int32(name='Amount'),
      bundleId?: string(name='BundleId'),
    }
  ](name='BundleModels'),
  eduCommittedTime?: int32(name='EduCommittedTime'),
  eduStudentBundleId?: string(name='EduStudentBundleId'),
  eduStudentNum?: int32(name='EduStudentNum'),
  eduTeacherBundleId?: string(name='EduTeacherBundleId'),
  eduTeacherNum?: int32(name='EduTeacherNum'),
  groupDesktopCount?: int32(name='GroupDesktopCount'),
  hardwareVersion?: string(name='HardwareVersion', description='The model of the WUYING hardware client.', example='hide'),
  instanceType?: string(name='InstanceType', description='The resource specifications.

*   If you set ResourceType to Desktop, set this parameter to one of the following values:

    *   ecd.basic.small
    *   ecd.basic.large
    *   ecd.advanced.large
    *   ecd.advanced.xlarge
    *   ecd.performance.2xlarge
    *   ecd.graphics.xlarge
    *   ecd.graphics.2xlarge
    *   ecd.advanced.xlarge_s8d2
    *   ecd.advanced.xlarge_s8d7
    *   ecd.graphics.1g72c
    *   eds.general.2c2g
    *   eds.general.2c4g
    *   eds.general.2c8g
    *   eds.general.4c8g
    *   eds.general.4c16g
    *   eds.general.8c16g
    *   eds.general.8c32g
    *   eds.general.16c32g

*   If you set ResourceType to OfficeSite, set this parameter to large.

*   If you set ResourceType to Bandwidth, leave this parameter empty.', example='eds.general.2c2g'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the Internet access package. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-data-transfer', example='PayByTraffic'),
  osType?: string(name='OsType', description='The OS. Valid values:

*   Windows
*   Linux

Default value: Windows.', example='Windows'),
  packageSize?: int32(name='PackageSize'),
  period?: int32(name='Period', description='The subscription duration. Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the billing cycle. Valid values:

*   Hour
*   Month
*   Year

Default value: Hour.', example='Hour'),
  promotionId?: string(name='PromotionId', description='The promotion ID.', example='123456'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   Desktop: cloud desktop
*   OfficeSite: workspace
*   Bandwidth: network bandwidth

Default value: Desktop.', example='Desktop'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The performance level (PL) of the system disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL0'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The system disk size. Unit: GiB.', example='80'),
  spPeriodInfo?: string(name='SpPeriodInfo'),
  spPrice?: boolean(name='SpPrice'),
  spType?: string(name='SpType'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL0'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The data disk size. Unit: GiB.', example='100'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    freeCdsQuota?: boolean(name='FreeCdsQuota'),
    freeCdsSize?: long(name='FreeCdsSize'),
    price?: {
      currency?: string(name='Currency', description='The unit of the currency.', example='CNY'),
      discountPrice?: float(name='DiscountPrice', description='The discounted price.', example='0'),
      orderLines?: map[string]string(name='OrderLines'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='2.796'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The description of the promotion rule.', example='test'),
          promotionDesc?: string(name='PromotionDesc', description='The description of the promotion.', example='Get started with new services with a discount.'),
          promotionId?: string(name='PromotionId', description='The promotion ID.', example='123456'),
          promotionName?: string(name='PromotionName', description='The promotion name.', example='Special Offer'),
          selected?: boolean(name='Selected', description='Indicates whether an item is selected.', example='false'),
        }
      ](name='Promotions', description='The details of the promotion.'),
      spPrice?: long(name='SpPrice'),
      tradePrice?: float(name='TradePrice', description='The actual price that is paid. The original price minus the discounted part equals the actual price.', example='2.796'),
    }(name='Price', description='The information about the price.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the rule.', example='Receive a 15% discount on a one-year subscription.'),
        ruleId?: long(name='RuleId', description='The rule ID.', example='587'),
      }
    ](name='Rules', description='The details of the promotion rules.'),
  }(name='PriceInfo', description='The price details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B1175630-3C44-4389-A3C1-15639FFC8EBC'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePriceResponseBody(name='body'),
}

/**
  * ## Usage notes
  * The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
  * *   If you set ResourceType to OfficeSite, you must specify InstanceType.
  * *   If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
  * *   If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
  * > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](~~188609~~).
  *
  * @param request DescribePriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribePriceResponse
 */
async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.bundleModels)) {
    query['BundleModels'] = request.bundleModels;
  }
  if (!Util.isUnset(request.eduCommittedTime)) {
    query['EduCommittedTime'] = request.eduCommittedTime;
  }
  if (!Util.isUnset(request.eduStudentBundleId)) {
    query['EduStudentBundleId'] = request.eduStudentBundleId;
  }
  if (!Util.isUnset(request.eduStudentNum)) {
    query['EduStudentNum'] = request.eduStudentNum;
  }
  if (!Util.isUnset(request.eduTeacherBundleId)) {
    query['EduTeacherBundleId'] = request.eduTeacherBundleId;
  }
  if (!Util.isUnset(request.eduTeacherNum)) {
    query['EduTeacherNum'] = request.eduTeacherNum;
  }
  if (!Util.isUnset(request.groupDesktopCount)) {
    query['GroupDesktopCount'] = request.groupDesktopCount;
  }
  if (!Util.isUnset(request.hardwareVersion)) {
    query['HardwareVersion'] = request.hardwareVersion;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.packageSize)) {
    query['PackageSize'] = request.packageSize;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.rootDiskPerformanceLevel)) {
    query['RootDiskPerformanceLevel'] = request.rootDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.rootDiskSizeGib)) {
    query['RootDiskSizeGib'] = request.rootDiskSizeGib;
  }
  if (!Util.isUnset(request.spPeriodInfo)) {
    query['SpPeriodInfo'] = request.spPeriodInfo;
  }
  if (!Util.isUnset(request.spPrice)) {
    query['SpPrice'] = request.spPrice;
  }
  if (!Util.isUnset(request.spType)) {
    query['SpType'] = request.spType;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskSizeGib)) {
    query['UserDiskSizeGib'] = request.userDiskSizeGib;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
  * *   If you set ResourceType to OfficeSite, you must specify InstanceType.
  * *   If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
  * *   If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
  * > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](~~188609~~).
  *
  * @param request DescribePriceRequest
  * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the region.', example='zh'),
  regionId?: string(name='RegionId', description='The list of regions.', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', example='华东1（杭州）'),
      regionEndpoint?: string(name='RegionEndpoint', example='ecd.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions', description='DescribeRegions'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to DescribeRegions.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  regionId?: string(name='RegionId', description='The ID of the virus scan task. If this parameter is not specified, the status of the latest scan task is queried by default.

You can call the [StartVirusScanTask](~~217908~~) operation to query the ID of a virus scan task.', example='cn-hangzhou'),
  taskId?: long(name='TaskId', description='The ID of the request.', example='123456'),
}

model DescribeScanTaskProgressResponseBody = {
  createTime?: string(name='CreateTime', example='2021-05-18T02:40:24Z'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to DescribeScanTaskProgress.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStatus?: string(name='TaskStatus', example='Success'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskProgress',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  regionId?: string(name='RegionId', description='The ID of the task to handle the alerts.', example='cn-hangzhou'),
  securityEventId?: [ string ](name='SecurityEventId'),
  taskId?: long(name='TaskId', description='The ID of the alert.', example='1234'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The processing status of the alert. Valid values:

*   Processing: The alert is being processed.
*   Success: The alert is processed.
*   Failed: The alert failed to be processed.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  securityEventOperationStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode', example='ignore.Success'),
      securityEventId?: long(name='SecurityEventId', example='12321'),
      status?: string(name='Status', description='The operation that you want to perform. Set the value to DescribeSecurityEventOperationStatus.', example='Success'),
    }
  ](name='SecurityEventOperationStatuses', description='The ID of the request.'),
  taskStatus?: string(name='TaskStatus', description='The code that indicates the processing result of the alert.', example='Success'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperationStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  securityEventId?: long(name='SecurityEventId', description='The code of the operation performed on the alert. Valid values:

*   mark_mis_info: adds the alert to the whitelist without configuring rules. This operation is triggered by adding multiple alerts to the whitelist at a time.
*   advance_mark_mis_inf: adds the alert to the whitelist by configuring advanced rules.
*   defense_mark_mis_info: adds the alert to the whitelist by configuring precise defense rules.
*   rm_mark_mis_info: removes the alert from the whitelist.
*   rm_defense_mark_mis_info: removes the alert from the whitelist configured with precise defense rules.
*   manual_handled: manually handles the alert.
*   ignore: ignores the alert.
*   quara: quarantines the source file of the malicious process.
*   block_ip: blocks access from the source IP address.
*   kill_and_quara: terminates the malicious process and quarantines the source file.', example='12345'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the alert.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  securityEventOperations?: [ 
    {
      operationCode?: string(name='OperationCode', example='ignore'),
      operationParams?: string(name='OperationParams', description='The operation that you want to perform. Set the value to DescribeSecurityEventOperations.', example='qqqqq'),
      userCanOperate?: boolean(name='UserCanOperate', example='true'),
    }
  ](name='SecurityEventOperations', description='The ID of the request.'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperations',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  creator?: string(name='Creator', example='Administrator'),
  desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='testName'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The query is performed based on the time when the system stopped creating a snapshot. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.', example='2020-11-31T06:32:31Z'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='8051af8d01b5479bec9f5ddf02e4a8fbd0ab6e7e43f8****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-2ze81owrnv9pity4****'),
  snapshotName?: string(name='SnapshotName', description='The snapshot name. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.

The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.', example='test_data_disk'),
  snapshotType?: string(name='SnapshotType', description='The snapshot type.

Valid values:

*   auto: automatic snapshot
*   user: manual snapshot
*   all (default): all types of snapshots', example='user'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk of which you want to query snapshots. Valid values:

*   System: system disk
*   Data: data disk

> The value of this parameter is not case-sensitive.', example='system'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The query is performed based on the time when the system created a snapshot. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.', example='2020-11-30T06:32:31Z'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', description='If the NextToken parameter is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      creator?: string(name='Creator', description='The user that creates the cloud desktop.', example='Administrator'),
      deletionTime?: string(name='DeletionTime', description='The time when the snapshot was deleted. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-mm-ddthh:mm:ssz format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      description?: string(name='Description', description='The snapshot description.', example='testDescription'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud desktop to which the snapshot belongs.', example='ecd-g03l3tlm8djoj****'),
      desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='test'),
      desktopStatus?: string(name='DesktopStatus', description='The cloud desktop state. Valid values:

*   Pending: The cloud desktop is pending.
*   Starting: The cloud desktop is being started.
*   Running: The cloud desktop is running.
*   Stopping: The cloud desktop is being stopped.
*   Rebuilding: The cloud desktop is being recreated.
*   Stopped: The cloud desktop is stopped.
*   Expired: The cloud desktop expired.
*   Deleted: The cloud desktop is deleted.', example='Running'),
      progress?: string(name='Progress', description='The progress of creating the snapshot. Unit: percentage (%).', example='100%'),
      protocolType?: string(name='ProtocolType', description='The protocol. Valid values:

*   ASP
*   HDX', example='ASP'),
      remainTime?: int32(name='RemainTime', description='The remaining time required to create the snapshot. Unit: seconds.

> If the value of the `Status` parameter is `PROGRESSING` and the value of the `RemainTime` parameter is `-1`, the system is calculating the remaining time required to create the snapshot.', example='30'),
      snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-2zeipxmnhej803x7****'),
      snapshotName?: string(name='SnapshotName', description='The snapshot name.', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', description='The snapshot type. Valid values:

*   AUTO: automatic snapshot
*   USER: manual snapshot', example='USER'),
      sourceDiskSize?: string(name='SourceDiskSize', description='The size of the source disk. Unit: GiB.', example='150'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   SYSTEM: system disk
*   DATA: data disk', example='SYSTEM'),
      status?: string(name='Status', description='The state of the snapshot. Valid values:

*   PROGRESSING: The snapshot is being created.
*   FAILED: The snapshot failed to be created.
*   ACCOMPLISHED: The snapshot is created.', example='ACCOMPLISHED'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](~~28951~~) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Snapshots', description='The queried snapshots.'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.snapshotType)) {
    query['SnapshotType'] = request.snapshotType;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSuspEventOverviewRequest {
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
}

model DescribeSuspEventOverviewResponseBody = {
  remindCount?: int32(name='RemindCount', example='3'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  seriousCount?: int32(name='SeriousCount', example='0'),
  suspiciousCount?: int32(name='SuspiciousCount', description='DescribeSuspEventOverview', example='3'),
}

model DescribeSuspEventOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventOverviewResponseBody(name='body'),
}

async function describeSuspEventOverviewWithOptions(request: DescribeSuspEventOverviewRequest, runtime: Util.RuntimeOptions): DescribeSuspEventOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventOverview(request: DescribeSuspEventOverviewRequest): DescribeSuspEventOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventOverviewWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: int32(name='CurrentPage', description='The operation that you want to perform. Set the value to DescribeSuspEventQuaraFiles.', example='1'),
  officeSiteId?: string(name='OfficeSiteId', description='The type of the alert.', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', description='The name of the cloud desktop.', example='20'),
  regionId?: string(name='RegionId', description='The ID of the workspace.', example='cn-hangzhou'),
  status?: string(name='Status', description='The time when the quarantined file was updated.', example='quaraDone'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The ID of the cloud desktop.', example='1'),
  pageSize?: int32(name='PageSize', description='The name of the alert.', example='20'),
  quaraFiles?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
      desktopName?: string(name='DesktopName', description='The ID of the request.', example='test'),
      eventName?: string(name='EventName', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='WEBSHELL'),
      eventType?: string(name='EventType', description='The maximum number of entries returned per page.', example='WebshellQuaraEventTyp'),
      id?: int32(name='Id', example='3920516'),
      md5?: string(name='Md5', description='DescribeSuspEventQuaraFiles', example='5ddebe926acc7ed39a664409bfd0****'),
      modifyTime?: string(name='ModifyTime', example='2021-05-18 20:37:08'),
      path?: string(name='Path', description='The tag of the alert.', example='/var/www/html/webshell-sample-master/others/def.jpg'),
      status?: string(name='Status', description='The ID of the quarantined file.', example='rollbackDone'),
      tag?: string(name='Tag', example='228f890e56eae9eec6a42c7ea801b538'),
    }
  ](name='QuaraFiles', description='The ID of the region.'),
  requestId?: string(name='RequestId', description='The quarantined files.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The status of the quarantined file. Valid values:

*   quaraFailed: The file failed to be quarantined.
*   quaraDone: The file is quarantined.
*   quaraing: The file is being quarantined.
*   rollbackFailed: Quarantine for the file failed to be canceled.
*   rollbackDone: Quarantine for the file is canceled.
*   rollbacking: Quarantine for the file is being canceled.', example='1'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

/**
  * The path where the quarantined file is stored on the cloud desktop.
  *
  * @param request DescribeSuspEventQuaraFilesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSuspEventQuaraFilesResponse
 */
async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventQuaraFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The path where the quarantined file is stored on the cloud desktop.
  *
  * @param request DescribeSuspEventQuaraFilesRequest
  * @return DescribeSuspEventQuaraFilesResponse
 */
async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', example='8ff29a086e0ccf4507c55e4ec3af****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  dealed?: string(name='Dealed', example='N'),
  lang?: string(name='Lang', example='zh'),
  levels?: string(name='Levels', example='serious'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', example='20'),
  parentEventType?: string(name='ParentEventType'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeSuspEventsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: string(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', example='8ff29a086e0ccf4507c55e4ec3af****'),
      canBeDealOnLine?: string(name='CanBeDealOnLine', example='false'),
      canCancelFault?: boolean(name='CanCancelFault', example='false'),
      dataSource?: string(name='DataSource', example='aegis_suspicious_event'),
      desc?: string(name='Desc'),
      desktopId?: string(name='DesktopId', example='ecd-blbmpzpqjdrdy****'),
      desktopName?: string(name='DesktopName', example='test'),
      details?: [ 
        {
          name?: string(name='Name', example='${suspicious.property.process_path}'),
          nameDisplay?: string(name='NameDisplay'),
          type?: string(name='Type', example='text'),
          value?: string(name='Value', example='N/A'),
          valueDisplay?: string(name='ValueDisplay', example='N/A'),
        }
      ](name='Details'),
      eventStatus?: int32(name='EventStatus', example='1'),
      eventSubType?: string(name='EventSubType'),
      id?: long(name='Id', example='19271054'),
      lastTime?: string(name='LastTime', example='2021-05-14 14:27:51'),
      level?: string(name='Level', example='suspicious'),
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime', example='2021-05-13 22:54:17'),
      operateErrorCode?: string(name='OperateErrorCode', example='1'),
      operateMsg?: string(name='OperateMsg', example='success'),
      uniqueInfo?: string(name='UniqueInfo', example='ea154b41f2c4b4005cb130af0586****'),
    }
  ](name='SuspEvents'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventType)) {
    query['ParentEventType'] = request.parentEventType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeUserConnectionRecordsRequest {
  connectDurationFrom?: long(name='ConnectDurationFrom', example='100'),
  connectDurationTo?: long(name='ConnectDurationTo', example='100'),
  connectEndTimeFrom?: long(name='ConnectEndTimeFrom', example='1631266200000'),
  connectEndTimeTo?: long(name='ConnectEndTimeTo', example='1631268000000'),
  connectStartTimeFrom?: long(name='ConnectStartTimeFrom', example='1631239200000'),
  connectStartTimeTo?: long(name='ConnectStartTimeTo', example='1631241000000'),
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
  endUserId?: string(name='EndUserId', example='alice'),
  endUserType?: string(name='EndUserType', example='SIMPLE'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeUserConnectionRecordsResponseBody = {
  connectionRecords?: [ 
    {
      connectDuration?: string(name='ConnectDuration', example='3405035000'),
      connectEndTime?: string(name='ConnectEndTime', example='2022-02-27T20:03:13Z'),
      connectStartTime?: string(name='ConnectStartTime', example='2022-01-19T10:12:38Z'),
      connectionRecordId?: string(name='ConnectionRecordId', example='528'),
      desktopId?: string(name='DesktopId', example='ud-2hawufy3uedi1****'),
      desktopName?: string(name='DesktopName', example='testName'),
    }
  ](name='ConnectionRecords'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A8E03'),
}

model DescribeUserConnectionRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserConnectionRecordsResponseBody(name='body'),
}

async function describeUserConnectionRecordsWithOptions(request: DescribeUserConnectionRecordsRequest, runtime: Util.RuntimeOptions): DescribeUserConnectionRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectDurationFrom)) {
    query['ConnectDurationFrom'] = request.connectDurationFrom;
  }
  if (!Util.isUnset(request.connectDurationTo)) {
    query['ConnectDurationTo'] = request.connectDurationTo;
  }
  if (!Util.isUnset(request.connectEndTimeFrom)) {
    query['ConnectEndTimeFrom'] = request.connectEndTimeFrom;
  }
  if (!Util.isUnset(request.connectEndTimeTo)) {
    query['ConnectEndTimeTo'] = request.connectEndTimeTo;
  }
  if (!Util.isUnset(request.connectStartTimeFrom)) {
    query['ConnectStartTimeFrom'] = request.connectStartTimeFrom;
  }
  if (!Util.isUnset(request.connectStartTimeTo)) {
    query['ConnectStartTimeTo'] = request.connectStartTimeTo;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.endUserType)) {
    query['EndUserType'] = request.endUserType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserConnectionRecords',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserConnectionRecords(request: DescribeUserConnectionRecordsRequest): DescribeUserConnectionRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConnectionRecordsWithOptions(request, runtime);
}

model DescribeUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID. This parameter is required when you set RuleType parameter to DesktopGroup.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  ruleType?: string(name='RuleType', description='The rule type that you want to configure for the directory.

Valid values:

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='DesktopGroup'),
}

model DescribeUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
  userProfilePathRule?: {
    desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-4i8fvpv6tfs03****'),
    rules?: [ 
      {
        blackPath?: {
          path?: string(name='Path', description='The path.', example='AppLocal/Data'),
          type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
        }(name='BlackPath', description='The blacklist that is configured.'),
        whitePaths?: [ 
          {
            path?: string(name='Path', description='The path.', example='games'),
            type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='folder'),
          }
        ](name='WhitePaths', description='The directories in the whitelist.'),
      }
    ](name='Rules', description='The directory rules.'),
    userProfileRuleType?: string(name='UserProfileRuleType', description='The directory type that is configured for the directory.

Valid values:

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='Default'),
  }(name='UserProfilePathRule', description='The directory blacklist and whitelist.'),
}

model DescribeUserProfilePathRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserProfilePathRulesResponseBody(name='body'),
}

async function describeUserProfilePathRulesWithOptions(request: DescribeUserProfilePathRulesRequest, runtime: Util.RuntimeOptions): DescribeUserProfilePathRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserProfilePathRules',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserProfilePathRules(request: DescribeUserProfilePathRulesRequest): DescribeUserProfilePathRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserProfilePathRulesWithOptions(request, runtime);
}

model DescribeUsersInGroupRequest {
  connectState?: int32(name='ConnectState', example='1'),
  desktopGroupId?: string(name='DesktopGroupId', example='dg-8ttn55ujj8nj8****'),
  endUserId?: string(name='EndUserId', example='alice'),
  endUserIds?: [ string ](name='EndUserIds'),
  filter?: string(name='Filter', example='alice'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  orgId?: string(name='OrgId', example='org-d0fua2oyukw8j****'),
  queryUserDetail?: boolean(name='QueryUserDetail', example='false'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeUsersInGroupResponseBody = {
  endUsers?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', example='1'),
      desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', example='testName'),
      displayName?: string(name='DisplayName', example='alice'),
      endUserEmail?: string(name='EndUserEmail', example='alice@example.com'),
      endUserId?: string(name='EndUserId', example='alice'),
      endUserName?: string(name='EndUserName', example='alice'),
      endUserPhone?: string(name='EndUserPhone', example='1381111****'),
      endUserRemark?: string(name='EndUserRemark', example='Note'),
      endUserType?: string(name='EndUserType', example='SIMPLE'),
      externalInfo?: {
        externalName?: string(name='ExternalName', example='nameDemo'),
        jobNumber?: string(name='JobNumber', example='123'),
      }(name='ExternalInfo'),
      userDesktopId?: string(name='UserDesktopId', example='ud-i896ze8hazpvl****'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', example='123'),
          propertyKey?: string(name='PropertyKey', example='key'),
          propertyType?: int32(name='PropertyType', example='1'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', example='value'),
              propertyValueId?: long(name='PropertyValueId', example='123'),
            }
          ](name='PropertyValues'),
          userId?: long(name='UserId', example='123'),
          userName?: string(name='UserName', example='nameDemo'),
        }
      ](name='UserSetPropertiesModels'),
    }
  ](name='EndUsers'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlineUsersCount?: int32(name='OnlineUsersCount', example='0'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  usersCount?: int32(name='UsersCount', example='1'),
}

model DescribeUsersInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersInGroupResponseBody(name='body'),
}

async function describeUsersInGroupWithOptions(request: DescribeUsersInGroupRequest, runtime: Util.RuntimeOptions): DescribeUsersInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectState)) {
    query['ConnectState'] = request.connectState;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orgId)) {
    query['OrgId'] = request.orgId;
  }
  if (!Util.isUnset(request.queryUserDetail)) {
    query['QueryUserDetail'] = request.queryUserDetail;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsersInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsersInGroup(request: DescribeUsersInGroupRequest): DescribeUsersInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersInGroupWithOptions(request, runtime);
}

model DescribeUsersPasswordRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gq8u6whi9f6k8****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeUsersPasswordResponseBody = {
  desktopUsers?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the user.', example='alice_1365*****'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='alice'),
      password?: string(name='Password', description='The password of the user.', example='tes123'),
    }
  ](name='DesktopUsers', description='The users that are associated with cloud desktop.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7B4B17B-5C8A-514C-AA4D-F8090E3A63E9'),
}

model DescribeUsersPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUsersPasswordResponseBody(name='body'),
}

async function describeUsersPasswordWithOptions(request: DescribeUsersPasswordRequest, runtime: Util.RuntimeOptions): DescribeUsersPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUsersPassword',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUsersPassword(request: DescribeUsersPasswordRequest): DescribeUsersPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersPasswordWithOptions(request, runtime);
}

model DescribeVirtualMFADevicesRequest {
  endUserId?: [ string ](name='EndUserId', description='>  This parameter is in invitational preview and unavailable for public use.', example='testuser'),
  maxResults?: int32(name='MaxResults', description='The number of consecutive failures to bind the virtual MFA device, or the number of MFA failures based on the virtual MFA device.', example='100'),
  nextToken?: string(name='NextToken', description='The name of the AD user.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', description='The operation that you want to perform. Set the value to DescribeVirtualMFADevices.', example='cn-hangzhou+dir-269345****'),
  regionId?: string(name='RegionId', description='The token that determines the start point of the query. Set the value to the NextToken value returned in the last call.', example='cn-hangzhou'),
}

model DescribeVirtualMFADevicesResponseBody = {
  nextToken?: string(name='NextToken', description='The name of the AD user who uses the virtual MFA device.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL23as'),
  requestId?: string(name='RequestId', description='The ID of the workspace.', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
  virtualMFADevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The time when the virtual MFA device is automatically unlocked after being locked. The time follows the [ISO 8601 standard](~~25696~~) in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='1'),
      directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      endUserId?: string(name='EndUserId', description='The status of the virtual MFA device. The valid values include:

*   UNBOUND: The virtual MFA device is not bound.
*   NORMAL: The virtual MFA device is normal.
*   LOCKED: The virtual MFA device is locked.', example='usertest'),
      gmtEnabled?: string(name='GmtEnabled', example='2020-12-20T14:52:28Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The ID of the workspace.', example='2020-12-21T15:21:28Z'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the request.', example='cn-hangzhou+dir-269345****'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
      status?: string(name='status', description='DescribeVirtualMFADevices', example='NORMAL'),
    }
  ](name='VirtualMFADevices', description='The ID of the region.'),
}

model DescribeVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualMFADevicesResponseBody(name='body'),
}

async function describeVirtualMFADevicesWithOptions(request: DescribeVirtualMFADevicesRequest, runtime: Util.RuntimeOptions): DescribeVirtualMFADevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualMFADevices',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): DescribeVirtualMFADevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualMFADevicesWithOptions(request, runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', description='Details about the vulnerability.'),
  lang?: string(name='Lang', description='The Common Vulnerability Scoring System (CVSS) score of the vulnerability, which indicates the severity of the vulnerability. A larger value indicates a higher severity. Valid values: 0 to 10.', example='zh'),
  name?: string(name='Name', description='The alias of the vulnerability.', example='5003243'),
  regionId?: string(name='RegionId', description='The ID of the vulnerability.', example='cn-hangzhou'),
  type?: string(name='Type', description='The operation that you want to perform. Set the value to DescribeVulDetails.', example='sys'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      cveId?: string(name='CveId', description='The name of the Redhat Package Manager (RPM) package.

You can call the [DescribeVulList](~~223907~~) operation to obtain the names of RPM packages.', example='CVE-2017-6***'),
      cvssScore?: string(name='CvssScore', example='9.1'),
      summary?: string(name='Summary', description='The ID of the request.'),
      title?: string(name='Title'),
    }
  ](name='Cves', description='The name of the vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the region.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulDetails',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', example='RHSA-2019:0230-Important: polkit security update'),
  currentPage?: int32(name='CurrentPage', example='1'),
  dealed?: string(name='Dealed', example='n'),
  lang?: string(name='Lang', example='zh'),
  name?: string(name='Name', example='5016623'),
  necessity?: string(name='Necessity', example='asap'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='cve'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='0AC407AC-A010-45B4-ADD8-CDC679D3DF26'),
  totalCount?: int32(name='TotalCount', example='1'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      desktopId?: string(name='DesktopId', example='ecd-9qocyzzbmi4pl****'),
      desktopName?: string(name='DesktopName', example='test'),
      extendContentJson?: {
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', example='3.10.0-693.2.2.el7'),
            matchDetail?: string(name='MatchDetail', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            name?: string(name='Name', example='python-perf'),
            path?: string(name='Path', example='/usr/lib64/python2.7/site-packages'),
            updateCmd?: string(name='UpdateCmd', example='*** update python-perf'),
          }
        ](name='RpmEntityList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs', example='1620875711000'),
      lastTs?: long(name='LastTs', example='1621292382000'),
      modifyTs?: long(name='ModifyTs', example='1621292382000'),
      name?: string(name='Name', example='5003243'),
      necessity?: string(name='Necessity', example='asap'),
      online?: boolean(name='Online', example='true'),
      osVersion?: string(name='OsVersion', example='win'),
      related?: string(name='Related', example='ACSV-SYS-5003243'),
      repairTs?: long(name='RepairTs', example='1621315382000'),
      resultCode?: string(name='ResultCode', example='0'),
      resultMessage?: string(name='ResultMessage', example='timeout'),
      status?: int32(name='Status', example='1'),
      tag?: string(name='Tag', example='system'),
      type?: string(name='Type', example='sys'),
    }
  ](name='VulRecords'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulList',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulOverviewRequest {
  regionId?: string(name='RegionId', description='The number of medium-risk vulnerabilities.', example='cn-hangzhou'),
}

model DescribeVulOverviewResponseBody = {
  asapCount?: int32(name='AsapCount', example='1'),
  laterCount?: int32(name='LaterCount', description='The operation that you want to perform. Set the value to DescribeVulOverview.', example='1'),
  nntfCount?: int32(name='NntfCount', description='The ID of the request.', example='1'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeVulOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulOverviewResponseBody(name='body'),
}

async function describeVulOverviewWithOptions(request: DescribeVulOverviewRequest, runtime: Util.RuntimeOptions): DescribeVulOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulOverview(request: DescribeVulOverviewRequest): DescribeVulOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulOverviewWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
  zoneType?: string(name='ZoneType', description='The operation that you want to perform. Set the value to **DescribeZones**.', example='AvailabilityZone'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='DescribeZones', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  zones?: [ 
    {
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.zoneType)) {
    query['ZoneType'] = request.zoneType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachCenRequest {
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the workspace.', example='cn-hangzhou'),
}

model DetachCenResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachCenResponseBody(name='body'),
}

async function detachCenWithOptions(request: DetachCenRequest, runtime: Util.RuntimeOptions): DetachCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachCen(request: DetachCenRequest): DetachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCenWithOptions(request, runtime);
}

model DetachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) workspace.', example='xn--0zw****'),
  clientType?: string(name='ClientType', description='The type of the Alibaba Cloud Workspace client. 1: the hardware client 2: the software client', example='2'),
  deviceId?: string(name='DeviceId', description='The ID of the device.', example='F9E52EDCCB2B****'),
  directoryId?: string(name='DirectoryId', description='The ID of the workspace.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  endUserId?: string(name='EndUserId', description='The ID of the user that is bound to the client.', example='moli'),
  region?: string(name='Region', description='The ID of the region.', example='cn-shanghai'),
}

model DetachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachEndUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachEndUserResponseBody(name='body'),
}

async function detachEndUserWithOptions(request: DetachEndUserRequest, runtime: Util.RuntimeOptions): DetachEndUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adDomain)) {
    query['AdDomain'] = request.adDomain;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachEndUser',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachEndUser(request: DetachEndUserRequest): DetachEndUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachEndUserWithOptions(request, runtime);
}

model DisableDesktopsInGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopIds?: [ string ](name='DesktopIds', description='DisableDesktopsInGroup'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
}

model DisableDesktopsInGroupResponseBody = {
  requestId?: string(name='RequestId', example='34FB4D97-C0D9-5534-ABC6-90C7EBD5****'),
}

model DisableDesktopsInGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDesktopsInGroupResponseBody(name='body'),
}

async function disableDesktopsInGroupWithOptions(request: DisableDesktopsInGroupRequest, runtime: Util.RuntimeOptions): DisableDesktopsInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopIds)) {
    query['DesktopIds'] = request.desktopIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDesktopsInGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDesktopsInGroup(request: DisableDesktopsInGroupRequest): DisableDesktopsInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDesktopsInGroupWithOptions(request, runtime);
}

model DissociateNetworkPackageRequest {
  networkPackageId?: string(name='NetworkPackageId', example='np-*********'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DissociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DissociateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DissociateNetworkPackageResponseBody(name='body'),
}

async function dissociateNetworkPackageWithOptions(request: DissociateNetworkPackageRequest, runtime: Util.RuntimeOptions): DissociateNetworkPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateNetworkPackage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateNetworkPackage(request: DissociateNetworkPackageRequest): DissociateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateNetworkPackageWithOptions(request, runtime);
}

model ExportClientEventsRequest {
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
  desktopName?: string(name='DesktopName', example='testName'),
  endTime?: string(name='EndTime', example='2022-03-23T07:11:01Z'),
  endUserId?: string(name='EndUserId', example='user01'),
  eventType?: string(name='EventType', example='CLIENT_LOGIN'),
  eventTypes?: [ string ](name='EventTypes'),
  langType?: string(name='LangType', example='zh-CN'),
  maxResults?: int32(name='MaxResults', example='50'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2022-03-23T04:10:21Z'),
}

model ExportClientEventsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', example='https://cn-shanghai-servicemanager.oss-cn-shanghai.aliyuncs.com/A0_CLIENT_EVENT/EDS_Events%20List_20220519234611_w5HuD83KGs.csv?Expires=1652975773&OSSAccessKeyId=LTYL****8tso&Signature=4erMG*********k%3D'),
}

model ExportClientEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportClientEventsResponseBody(name='body'),
}

async function exportClientEventsWithOptions(request: ExportClientEventsRequest, runtime: Util.RuntimeOptions): ExportClientEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.eventTypes)) {
    query['EventTypes'] = request.eventTypes;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportClientEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportClientEvents(request: ExportClientEventsRequest): ExportClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportClientEventsWithOptions(request, runtime);
}

model ExportDesktopGroupInfoRequest {
  chargeType?: string(name='ChargeType', example='PrePaid'),
  desktopGroupId?: [ string ](name='DesktopGroupId'),
  desktopGroupName?: string(name='DesktopGroupName', example='test'),
  endUserId?: [ string ](name='EndUserId'),
  expiredTime?: string(name='ExpiredTime', example='2022-12-31T15:59Z'),
  langType?: string(name='LangType', example='zh-CN'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-467671****'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-53iyi2aar0nd6****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ExportDesktopGroupInfoResponseBody = {
  requestId?: string(name='RequestId', example='24E05D3E-08F4-551E-B1F0-F6D84EE0BCCC'),
  url?: string(name='Url', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktopGroups_202203********_xBjqdCT***.xlsx?*********'),
}

model ExportDesktopGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDesktopGroupInfoResponseBody(name='body'),
}

async function exportDesktopGroupInfoWithOptions(request: ExportDesktopGroupInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopGroupInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDesktopGroupInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDesktopGroupInfo(request: ExportDesktopGroupInfoRequest): ExportDesktopGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopGroupInfoWithOptions(request, runtime);
}

model ExportDesktopListInfoRequest {
  chargeType?: string(name='ChargeType', example='PostPaid'),
  desktopId?: [ string ](name='DesktopId'),
  desktopName?: string(name='DesktopName', example='testName'),
  desktopStatus?: string(name='DesktopStatus', example='Running'),
  endUserId?: [ string ](name='EndUserId'),
  expiredTime?: string(name='ExpiredTime', example='2022-12-31T15:59Z'),
  groupId?: string(name='GroupId', example='dg-boyczi8enfyc5***'),
  langType?: string(name='LangType', example='`zh-CN`'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  policyGroupId?: string(name='PolicyGroupId', example='system-all-enabled-policy'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag'),
  userName?: string(name='UserName', example='alice'),
}

model ExportDesktopListInfoResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktops%20List_2022**********_w3fq******.csv?**********'),
}

model ExportDesktopListInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportDesktopListInfoResponseBody(name='body'),
}

async function exportDesktopListInfoWithOptions(request: ExportDesktopListInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopListInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopName)) {
    query['DesktopName'] = request.desktopName;
  }
  if (!Util.isUnset(request.desktopStatus)) {
    query['DesktopStatus'] = request.desktopStatus;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.expiredTime)) {
    query['ExpiredTime'] = request.expiredTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.langType)) {
    query['LangType'] = request.langType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDesktopListInfo',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDesktopListInfo(request: ExportDesktopListInfoRequest): ExportDesktopListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopListInfoWithOptions(request, runtime);
}

model GetAsyncTaskRequest {
  asyncTaskId?: string(name='AsyncTaskId', example='81a8a07a-aec4-4dd5-80da-ae69e482****'),
  cdsId?: string(name='CdsId', example='cn-shanghai+cds-135515****'),
}

model GetAsyncTaskResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    asyncTaskId?: string(name='AsyncTaskId', example='000e89fb-cf8f-11e9-8ab4-b6e98080****'),
    consumedProcess?: string(name='ConsumedProcess', example='100'),
    errCode?: long(name='ErrCode', example='InternalError'),
    message?: string(name='Message', example='The request has been failed due to some unknown error. Please try again later.'),
    status?: string(name='Status', example='Failed'),
    totalProcess?: long(name='TotalProcess', example='1000'),
    url?: string(name='Url', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model GetAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncTaskResponseBody(name='body'),
}

async function getAsyncTaskWithOptions(request: GetAsyncTaskRequest, runtime: Util.RuntimeOptions): GetAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asyncTaskId)) {
    query['AsyncTaskId'] = request.asyncTaskId;
  }
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncTask(request: GetAsyncTaskRequest): GetAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncTaskWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  commandContent?: string(name='CommandContent', description='The command that you want to run to configure a custom application in user mode. After you obtain the credentials, the application automatically starts.

*   appPath: the path of the application startup file. Example: C:\\\\\\Program Files (x86)\\\\\\000\\\\\\000.exe. Use double slashes as delimiters.
*   appParameter: the startup parameters of the application. The value must be of the String type. Separate multiple parameters with spaces. Example: meetingid 000 meetingname aaa.', example='{
      "startApplication": {
            "startApplicationList": [
                  {
                        "sessionName": "",
                        "appList": [
                              {
                                    "appPath": "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe",
                                    "appParameter": "www.example.com www.example1.com"
                              }
                        ]
                  }
            ]
      }
}'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='Alice'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password for the username.', example='Ab123456'),
  regionId?: string(name='RegionId', description='The region ID of the cloud desktop.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId', description='The ID of the desktop connection task.', example='2afbad19-778a-4fc5-9674-1f19c63862da'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='28c80e90-f71e-4c23-93d6-1225329cf949'),
}

model GetConnectionTicketResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', description='The ID of the desktop connection task.', example='2afbad19-778a-4fc5-9674-1f19c638****'),
  taskStatus?: string(name='TaskStatus', description='The status of the task.

Valid values:

*   FAILED

    <!-- -->

    :

    <!-- -->

    Failed to obtain the token

    <!-- -->

    .

*   RUNNING

    <!-- -->

    :

    <!-- -->

    The token is being obtained

    <!-- -->

    .

*   FINISHED

    <!-- -->

    :

    <!-- -->

    The token-based logon is successful

    <!-- -->

    .', example='FINISHED'),
  ticket?: string(name='Ticket', description='The credentials that are used to connect to the cloud desktop. To use the credentials, you must decode the credentials in Base64, save the credentials as a xxx.ica file, and then open the file. Sample Python code:

    import base64
    response = {
        "Ticket": "XXXX",
        "RequestId": "XXX-XXX",
    }
    f = open (\\"xxx.ica\\", \\"w\\")
    out = base64.b64decode(response[\\"Ticket\\"])
    f.write(out)
    f.close()', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConnectionTicket',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model GetDesktopGroupDetailRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The region ID of the desktop group.', example='cn-hangzhou'),
}

model GetDesktopGroupDetailResponseBody = {
  desktops?: {
    allowAutoSetup?: int32(name='AllowAutoSetup', description='Indicates whether the auto scale-out feature is enabled for the desktop group.', example='1'),
    allowBufferCount?: int32(name='AllowBufferCount', description='The number of reserved cloud desktops in the desktop group.', example='1'),
    bindAmount?: int32(name='BindAmount', description='The number of sessions that are allowed for each cloud desktop in the multi-session desktop group.', example='1'),
    buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of purchased cloud desktops. Valid values: 0 to 200.', example='5'),
    comments?: string(name='Comments', description='The remarks on the desktop group.', example='for students'),
    connectDuration?: long(name='ConnectDuration', description='The maximum period of time for which a session is effective. Unit: milliseconds.', example='60000'),
    cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
    creationTime?: string(name='CreationTime', description='The time when the desktop group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2020-11-06T08:28Z'),
    creator?: string(name='Creator', description='The user who creates the desktop group.', example='155177335370****'),
    dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk.', example='cloud_essd'),
    dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk.', example='80'),
    desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-3uiojcc0j4kh7****'),
    desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='DesktopGroupDemo'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory, which is the same as the ID of the workspace.', example='cn-hangzhou+dir-363353****'),
    directoryType?: string(name='DirectoryType', description='The type of the directory.', example='SIMPLE'),
    expiredTime?: string(name='ExpiredTime', description='The time when the desktop group expires.', example='2021-12-31T15:59Z'),
    gpuCount?: float(name='GpuCount', description='The number of vGPUs.', example='4'),
    gpuSpec?: string(name='GpuSpec', description='The GPU specifications.', example='NVIDIA T4'),
    idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum period of time for which a session remains idle. Unit: milliseconds.', example='900000'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
    keepDuration?: long(name='KeepDuration', description='The retention period of a cloud desktop in the desktop group after the cloud desktop is disconnected. Unit: milliseconds.', example='180000'),
    loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy for the multi-session desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    depth first

    <!-- -->

    .

*   1

    <!-- -->

    :

    <!-- -->

    breadth first

    <!-- -->

    .', example='0'),
    maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain.', example='10'),
    memory?: long(name='Memory', description='The memory size.', example='4096'),
    minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that the desktop group must retain.', example='1'),
    nasFileSystemID?: string(name='NasFileSystemID', description='The ID of the Apsara File Storage NAS (NAS) file system.', example='0783b4****'),
    nasFileSystemName?: string(name='NasFileSystemName', description='The name of the NAS file system.', example='abcd'),
    officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-990541****'),
    officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
    officeSiteType?: string(name='OfficeSiteType', description='The type of the workspace.', example='SIMPLE'),
    ownBundleId?: string(name='OwnBundleId', description='The ID of the desktop template.', example='b-1se9fb37r5tfq****'),
    ownBundleName?: string(name='OwnBundleName', description='The name of the desktop template.', example='BundleDemo'),
    ownType?: int32(name='OwnType', description='The type of the desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    personal desktop group

    <!-- -->

    .

*   1

    <!-- -->

    :

    <!-- -->

    shared desktop group (multi-session)

    <!-- -->

    .', example='0'),
    payType?: string(name='PayType', description='The billing method.

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
    policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy group.', example='pg-9cktlowtxfl6****'),
    policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of the policies with which the desktop group is associated.'),
    policyGroupName?: string(name='PolicyGroupName', description='The name of the security policy group.', example='test'),
    policyGroupNames?: [ string ](name='PolicyGroupNames', description='The names of the policies.'),
    profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Indicates whether data roaming is enabled.', example='true'),
    ratioThreshold?: float(name='RatioThreshold', description='The session usage threshold for the multi-session desktop group that has an auto scaling policy in effect.', example='0.6'),
    resType?: int32(name='ResType', description='The type of the resource. Only Elastic Compute Service (ECS) instances are supported.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    ECS

    <!-- -->

    .', example='0'),
    resetType?: int32(name='ResetType', description='Indicates which type of disk is reset for cloud desktops in the desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    No disks are reset

    <!-- -->

    .

*   1

    <!-- -->

    :

    <!-- -->

    Only the system disk is reset

    <!-- -->

    .

*   2

    <!-- -->

    :

    <!-- -->

    Only the data disk is reset

    <!-- -->

    .

*   3

    <!-- -->

    :

    <!-- -->

    Both the system disk and data disk are reset

    <!-- -->

    .', example='0'),
    scaleTimerInfos?: [ 
      {
        buyResAmount?: int32(name='BuyResAmount', description='The number of purchased cloud desktops during the scaling event. Valid values: 0 to 200.', example='5'),
        cron?: string(name='Cron', description='The type of the CRON expression that is specified for the scheduled task.', example='0 0 0 * * ?'),
        keepDuration?: long(name='KeepDuration', description='The retention period of a cloud desktop in the desktop group after the cloud desktop is disconnected. Unit: milliseconds.', example='600000'),
        loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy for the multi-session desktop group.', example='1'),
        maxResAmount?: int32(name='MaxResAmount', description='The maximum number of cloud desktops that the system can scale. Valid values: 0 to 200.', example='100'),
        minResAmount?: int32(name='MinResAmount', description='The minimum number of cloud desktops that the system must scale. Valid values: 0 to 200.', example='1'),
        ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. If the specified threshold is reached, new cloud desktops are automatically created. If the specified threshold is not reached, idle cloud desktops are released.', example='0.5'),
        type?: string(name='Type', description='The type of the scheduled task.

Valid values:

*   drop

    <!-- -->

    :

    <!-- -->

    decline policy

    <!-- -->

    .

*   normal

    <!-- -->

    :

    <!-- -->

    normal policy

    <!-- -->

    .

*   peak

    <!-- -->

    :

    <!-- -->

    peak hour policy

    <!-- -->

    .

*   rise

    <!-- -->

    :

    <!-- -->

    rise policy

    <!-- -->

    .', example='rise'),
      }
    ](name='ScaleTimerInfos', description='Details of the scheduled tasks.'),
    status?: int32(name='Status', description='The status of the desktop group.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    The desktop group is unpaid

    <!-- -->

    .

*   1

    <!-- -->

    :

    <!-- -->

    The desktop group is paid

    <!-- -->

    .

*   2

    <!-- -->

    :

    <!-- -->

    The desktop group has an overdue payment or expired

    <!-- -->

    .', example='1'),
    stopDuration?: long(name='StopDuration', description='The period of time before an idle cloud desktop enters the Stopped state. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a stopped cloud desktop, the cloud desktop automatically starts. Unit: milliseconds.', example='180000'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.', example='cloud_essd'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk.', example='80'),
    timerInfos?: [ 
      {
        cronExpression?: string(name='CronExpression', description='The CRON expression of the scheduled task.', example='0 58 11 ? * 2'),
        forced?: boolean(name='Forced', description='Indicates whether the scheduled task is forcibly executed.', example='false'),
        status?: int32(name='Status', description='The status of the scheduled task.

Valid values:

*   1

    <!-- -->

    :

    <!-- -->

    The scheduled task is enabled

    <!-- -->

    .

*   2

    <!-- -->

    :

    <!-- -->

    The scheduled task is disabled

    <!-- -->

    .

*   3

    <!-- -->

    :

    <!-- -->

    The scheduled task is deleted

    <!-- -->

    .', example='1'),
        timerType?: int32(name='TimerType', description='The type of the scheduled task.

Valid values:

*   1

    <!-- -->

    :

    <!-- -->

    scheduled reset

    <!-- -->

    .

*   2

    <!-- -->

    :

    <!-- -->

    scheduled startup

    <!-- -->

    .

*   3

    <!-- -->

    :

    <!-- -->

    scheduled stop

    <!-- -->

    .

*   4

    <!-- -->

    :

    <!-- -->

    scheduled restart

    <!-- -->

    .', example='1'),
      }
    ](name='TimerInfos', description='The list of scheduled points in time for desktop group tasks.'),
    timingStrategyInfo?: string(name='TimingStrategyInfo', description='The information about the scheduling policy.', example='abcd'),
    version?: long(name='Version', description='The version number of the desktop group.', example='1'),
  }(name='Desktops', description='Details of the desktop group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B5268CE-5EB3-545F-9F38-A8BCF710****'),
}

model GetDesktopGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDesktopGroupDetailResponseBody(name='body'),
}

async function getDesktopGroupDetailWithOptions(request: GetDesktopGroupDetailRequest, runtime: Util.RuntimeOptions): GetDesktopGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDesktopGroupDetail',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDesktopGroupDetail(request: GetDesktopGroupDetailRequest): GetDesktopGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDesktopGroupDetailWithOptions(request, runtime);
}

model GetOfficeSiteSsoStatusRequest {
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  ssoStatus?: boolean(name='SsoStatus', description='Indicates whether SSO is enabled.', example='false'),
}

model GetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function getOfficeSiteSsoStatusWithOptions(request: GetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): GetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOfficeSiteSsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOfficeSiteSsoStatus(request: GetOfficeSiteSsoStatusRequest): GetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOfficeSiteSsoStatusWithOptions(request, runtime);
}

model GetSpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.', example='cn-hangzhou+dir-400695****'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-400695****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetSpMetadataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  spMetadata?: string(name='SpMetadata', description='The metadata of the SP.', example='<?xml version=************/md:EntityDescriptor>'),
}

model GetSpMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpMetadataResponseBody(name='body'),
}

/**
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  *
  * @param request GetSpMetadataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSpMetadataResponse
 */
async function getSpMetadataWithOptions(request: GetSpMetadataRequest, runtime: Util.RuntimeOptions): GetSpMetadataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSpMetadata',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  *
  * @param request GetSpMetadataRequest
  * @return GetSpMetadataResponse
 */
async function getSpMetadata(request: GetSpMetadataRequest): GetSpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpMetadataWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  operationCode?: string(name='OperationCode', example='deal'),
  operationParams?: string(name='OperationParams', example='{"expireTime":1578475919533}'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  securityEvent?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-blbmpzpqjdrdy****'),
      securityEventId?: string(name='SecurityEventId', example='123456'),
    }
  ](name='SecurityEvent'),
}

model HandleSecurityEventsResponseBody = {
  requestId?: string(name='RequestId', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
  taskId?: long(name='TaskId', example='1234'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityEvent)) {
    query['SecurityEvent'] = request.securityEvent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSecurityEvents',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model HibernateDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model HibernateDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='101AE027-8299-5E6E-A782-6C91C962****'),
}

model HibernateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HibernateDesktopsResponseBody(name='body'),
}

async function hibernateDesktopsWithOptions(request: HibernateDesktopsRequest, runtime: Util.RuntimeOptions): HibernateDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HibernateDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hibernateDesktops(request: HibernateDesktopsRequest): HibernateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return hibernateDesktopsWithOptions(request, runtime);
}

model ListCdsFilesRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-320357****'),
  endUserId?: string(name='EndUserId', description='The ID of the user to whom the cloud disk is allocated.', example='testUser'),
  fileIds?: [ string ](name='FileIds', description='The IDs of the files to be queried.'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: 100.', example='100'),
  nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all results are returned.', example='WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****'),
  orderType?: string(name='OrderType', description='The sorting method of the files.

Valid values:

*   CreateTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are created.

    <!-- -->

*   ModifiedTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are modified.

    <!-- -->

*   NameDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their names.

    <!-- -->

*   SizeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their sizes.

    <!-- -->

*   ModifiedTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are modified.

    <!-- -->

*   CreateTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are created.

    <!-- -->

*   SizeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their sizes.

    <!-- -->

*   NameAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their names.

    <!-- -->', example='CreateTimeDesc'),
  parentFileId?: string(name='ParentFileId', description='The ID of the parent file.', example='63636837e47e5a24a8a940218bef395c210e****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  status?: string(name='Status', description='The file status.

Valid values:

*   available

    <!-- -->

    :

    <!-- -->

    returns only normal files.

    <!-- -->

*   uploading

    <!-- -->

    :

    <!-- -->

    returns only the files that are being uploaded.

    <!-- -->', example='available'),
}

model ListCdsFilesShrinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-320357****'),
  endUserId?: string(name='EndUserId', description='The ID of the user to whom the cloud disk is allocated.', example='testUser'),
  fileIdsShrink?: string(name='FileIds', description='The IDs of the files to be queried.'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: 100.', example='100'),
  nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all results are returned.', example='WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****'),
  orderType?: string(name='OrderType', description='The sorting method of the files.

Valid values:

*   CreateTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are created.

    <!-- -->

*   ModifiedTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are modified.

    <!-- -->

*   NameDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their names.

    <!-- -->

*   SizeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their sizes.

    <!-- -->

*   ModifiedTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are modified.

    <!-- -->

*   CreateTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are created.

    <!-- -->

*   SizeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their sizes.

    <!-- -->

*   NameAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their names.

    <!-- -->', example='CreateTimeDesc'),
  parentFileId?: string(name='ParentFileId', description='The ID of the parent file.', example='63636837e47e5a24a8a940218bef395c210e****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  status?: string(name='Status', description='The file status.

Valid values:

*   available

    <!-- -->

    :

    <!-- -->

    returns only normal files.

    <!-- -->

*   uploading

    <!-- -->

    :

    <!-- -->

    returns only the files that are being uploaded.

    <!-- -->', example='available'),
}

model ListCdsFilesResponseBody = {
  code?: string(name='Code', description='The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  count?: string(name='Count', description='The total number of entries.', example='0'),
  fileModels?: [ 
    {
      category?: string(name='Category', description='The file category. PDS categorizes files based on their suffixes and MIME types. The following major categories are included: doc, image, audio, and video.', example='image'),
      contentType?: string(name='ContentType', description='The content type of the file.', example='application/json'),
      createTime?: string(name='CreateTime', description='The time when the file was created.', example='2022-09-06T07:27:08Z'),
      creator?: string(name='Creator', description='The file creator.', example='user01'),
      description?: string(name='Description', description='The file description.', example='test1'),
      downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the file. The download URL is valid for only 15 minutes. If the URL is expired, you can call the GetFile operation to obtain the file.', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
      fileExtension?: string(name='FileExtension', description='The filename extension.', example='pdf'),
      fileId?: string(name='FileId', description='The file ID.', example='637725ff2f63db8470984e6c92c692b87d52****'),
      filePath?: string(name='FilePath', description='The file path.', example='isv/1019236948660053/temp/'),
      fileType?: string(name='FileType', description='The file type.', example='file'),
      md5?: string(name='Md5', description='The MD5 value of the file.', example='63c83ececb4e6926c51448fc5ecb****'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2022-09-06T07:27:08Z'),
      modifier?: string(name='Modifier', description='The user who modified the file.', example='user02'),
      name?: string(name='Name', description='The file name.', example='fvt-appcenterp4qwa'),
      openTime?: string(name='OpenTime', description='The time when the file was last opened.', example='2022-09-06T07:27:08Z'),
      openTimeStamp?: long(name='OpenTimeStamp', description='The timestamp that indicates the time when the file was last opened.', example='168951245231'),
      parentId?: string(name='ParentId', description='The ID of the parent folder.', example='3343213ff2f63db8470984e6c92c3213dfdw****'),
      regionId?: string(name='RegionId', description='The region ID You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-beijing'),
      sha1?: string(name='Sha1', description='The SHA 1 file.', example='EA4942AA8761213890A5C386F88E6464D2C3****'),
      size?: long(name='Size', description='The file size. Unit: bits.', example='102400'),
      thumbnail?: string(name='Thumbnail', description='The URL of the thumbnail.', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    }
  ](name='FileModels', description='The files.'),
  message?: string(name='Message', description='The error message returned if the request failed. This parameter is empty if the value of Code is success.', example='success'),
  nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all results have been returned.', example='WyI2MzhmMjA2ZTFmZGZlZGVjZDk3OTRlNzVhZmIwMDFiZmM5NWQ3YTgwIiwibiIsIm4iLDEsLTEsMTY3MDMyNDMzNTAzMSwiNjM4ZjIwNmZjNDFkMzIwOTZmZWU0NGYxODkwY2I5ZjI0Mjg0NzM2****'),
  requestId?: string(name='RequestId', description='The request ID. An ID is the unique identifier of the request.', example='40D86754-20FD-53DC-A9B8-25F7FECC****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true'),
}

model ListCdsFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdsFilesResponseBody(name='body'),
}

async function listCdsFilesWithOptions(tmpReq: ListCdsFilesRequest, runtime: Util.RuntimeOptions): ListCdsFilesResponse {
  Util.validateModel(tmpReq);
  var request = new ListCdsFilesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fileIds)) {
    request.fileIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileIds, 'FileIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileIdsShrink)) {
    query['FileIds'] = request.fileIdsShrink;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.parentFileId)) {
    query['ParentFileId'] = request.parentFileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCdsFiles',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCdsFiles(request: ListCdsFilesRequest): ListCdsFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCdsFilesWithOptions(request, runtime);
}

model ListDirectoryUsersRequest {
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
  filter?: string(name='Filter', example='alice'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  OUPath?: string(name='OUPath', example='example.com/Domain Controllers'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDirectoryUsersResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      displayName?: string(name='DisplayName', example='Alice'),
      endUser?: string(name='EndUser', example='Alice'),
    }
  ](name='Users'),
}

model ListDirectoryUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDirectoryUsersResponseBody(name='body'),
}

async function listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: Util.RuntimeOptions): ListDirectoryUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.OUPath)) {
    query['OUPath'] = request.OUPath;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDirectoryUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoryUsersWithOptions(request, runtime);
}

model ListFilePermissionRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-346063****'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01'),
  fileId?: string(name='FileId', description='The ID of the shared file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  regionId?: string(name='RegionId', description='The region ID of the cloud disk. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListFilePermissionResponseBody = {
  filePermissions?: [
    FilePermissionMember
  ](name='FilePermissions', description='The permissions on the shared file.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFilePermissionResponseBody(name='body'),
}

async function listFilePermissionWithOptions(request: ListFilePermissionRequest, runtime: Util.RuntimeOptions): ListFilePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFilePermission(request: ListFilePermissionRequest): ListFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFilePermissionWithOptions(request, runtime);
}

model ListOfficeSiteOverviewRequest {
  forceRefresh?: boolean(name='ForceRefresh', description='Specifies whether to refresh the cache.', example='false'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 10', example='10'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this is your first query or no next query is to be sent, skip this parameter. If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='Details about the IDs of the workspaces. You can specify 1 to 100 workspace IDs.', example='cn-hangzhou+dir-363353****'),
  queryRange?: int32(name='QueryRange', description='The query scope. Default value: 1.', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ListOfficeSiteOverviewResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteOverviewResults?: [ 
    {
      hasExpiredEdsCount?: int32(name='HasExpiredEdsCount', description='The number of expired cloud desktops in the workspace.', example='0'),
      hasExpiredEdsCountForGroup?: int32(name='HasExpiredEdsCountForGroup', description='The number of expired cloud desktops in the desktop group.', example='0'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSiteStatus?: string(name='OfficeSiteStatus', description='The status of the workspace.', example='REGISTERED'),
      regionId?: string(name='RegionId', description='The region ID of the workspace.', example='cn-hangzhou'),
      runningEdsCount?: int32(name='RunningEdsCount', description='The number of running cloud desktops in the workspace.', example='1'),
      runningEdsCountForGroup?: int32(name='RunningEdsCountForGroup', description='The number of running cloud desktops in the desktop group.', example='1'),
      totalEdsCount?: int32(name='TotalEdsCount', description='The total number of cloud desktops in the workspace.', example='1'),
      totalEdsCountForGroup?: int32(name='TotalEdsCountForGroup', description='The total number of cloud desktops in the desktop group.', example='1'),
      vpcType?: string(name='VpcType', description='The virtual private cloud (VPC) type of the workspace.', example='standard'),
      willExpiredEdsCount?: int32(name='WillExpiredEdsCount', description='The number of cloud desktops that are about to expire in the workspace.', example='0'),
      willExpiredEdsCountForGroup?: int32(name='WillExpiredEdsCountForGroup', description='The number of cloud desktops that are about to expire in the desktop group.', example='0'),
    }
  ](name='OfficeSiteOverviewResults', description='Details of the workspaces.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListOfficeSiteOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOfficeSiteOverviewResponseBody(name='body'),
}

async function listOfficeSiteOverviewWithOptions(request: ListOfficeSiteOverviewRequest, runtime: Util.RuntimeOptions): ListOfficeSiteOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceRefresh)) {
    query['ForceRefresh'] = request.forceRefresh;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.queryRange)) {
    query['QueryRange'] = request.queryRange;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOfficeSiteOverview',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOfficeSiteOverview(request: ListOfficeSiteOverviewRequest): ListOfficeSiteOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteOverviewWithOptions(request, runtime);
}

model ListOfficeSiteUsersRequest {
  filter?: string(name='Filter', description='The ID of the workspace. Only workspaces of the enterprise AD account type are supported.', example='*jin*'),
  maxResults?: int32(name='MaxResults', description='The organizational unit (OU) in the specified AD domain.', example='10'),
  nextToken?: string(name='NextToken', description='The number of entries to return on each page.

Maximum value: 100

Default value: 10', example='caeba0bbb2be03f84eb48b699f0a4883'),
  OUPath?: string(name='OUPath', description='The ID of the region.', example='example.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', description='The operation that you want to perform. Set the value to ListOfficeSiteUsers.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The character string for fuzzy search.', example='cn-hangzhou'),
}

model ListOfficeSiteUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The token that specifies the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The usernames of AD users.

This parameter is empty if the AD users include only Administrator and Guest.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
  users?: [ 
    {
      displayName?: string(name='DisplayName', example='Alice'),
      endUser?: string(name='EndUser', example='Alice'),
    }
  ](name='Users', description='Queries the details about Active Directory (AD) users in an AD workspace after the workspace is connected to an AD domain.'),
}

model ListOfficeSiteUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOfficeSiteUsersResponseBody(name='body'),
}

async function listOfficeSiteUsersWithOptions(request: ListOfficeSiteUsersRequest, runtime: Util.RuntimeOptions): ListOfficeSiteUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.OUPath)) {
    query['OUPath'] = request.OUPath;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOfficeSiteUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOfficeSiteUsers(request: ListOfficeSiteUsersRequest): ListOfficeSiteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteUsersWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The ID of the resource, which is the ID of the cloud desktop. Valid values of N: 1 to 50.', example='10'),
  nextToken?: string(name='NextToken', description='The ID of the resource, which is the ID of the cloud desktop.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The type of the resource. Set the value to ALIYUN::GWS::INSTANCE.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The operation that you want to perform. Set the value to ListTagResources.', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The number of entries to return on each page.', example='ALIYUN::GWS::INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', description='The token used to start the next query.', example='TestKey'),
      value?: string(name='Value', description='The key of tag N. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The region ID of the resource.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The ID of the request.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The type of the resource. Valid value: ALIYUN::GWS::INSTANCE.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='ecd-ia2zw38bi6cm7****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::GWS::INSTANCE'),
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValue?: string(name='TagValue', example='TestValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * The tag key of the resource.
  *
  * @param request ListTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The tag key of the resource.
  *
  * @param request ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserAdOrganizationUnitsRequest {
  filter?: string(name='Filter', description='The string that you enter for fuzzy search.', example='develop'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500. Default value: 500.', example='100'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Set the value to the NextToken value that is returned from the last call.', example='CAAAAA=='),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-485361****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ListUserAdOrganizationUnitsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='CAAAAA=='),
  OUNames?: [ 
    {
      displayOUName?: string(name='DisplayOUName', description='The display name of the OU.', example='wuying_computers'),
      OUName?: string(name='OUName', description='The name of the OU of the AD domain controller.', example='example.com/wuying_computers'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the AD workspace.', example='cn-hangzhou+dir-485361****'),
    }
  ](name='OUNames', description='The names of the OUs in the AD domain.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListUserAdOrganizationUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserAdOrganizationUnitsResponseBody(name='body'),
}

async function listUserAdOrganizationUnitsWithOptions(request: ListUserAdOrganizationUnitsRequest, runtime: Util.RuntimeOptions): ListUserAdOrganizationUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserAdOrganizationUnits',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserAdOrganizationUnits(request: ListUserAdOrganizationUnitsRequest): ListUserAdOrganizationUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserAdOrganizationUnitsWithOptions(request, runtime);
}

model LockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound by AD users.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model LockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockVirtualMFADeviceResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request LockVirtualMFADeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return LockVirtualMFADeviceResponse
 */
async function lockVirtualMFADeviceWithOptions(request: LockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): LockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LockVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request LockVirtualMFADeviceRequest
  * @return LockVirtualMFADeviceResponse
 */
async function lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): LockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockVirtualMFADeviceWithOptions(request, runtime);
}

model MigrateDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  targetOfficeSiteId?: string(name='TargetOfficeSiteId', example='cn-shenzhen+dir-388505****'),
}

model MigrateDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='E46DECEC-AC72-570E-958B-B52A4B****'),
}

model MigrateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MigrateDesktopsResponseBody(name='body'),
}

async function migrateDesktopsWithOptions(request: MigrateDesktopsRequest, runtime: Util.RuntimeOptions): MigrateDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.targetOfficeSiteId)) {
    query['TargetOfficeSiteId'] = request.targetOfficeSiteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MigrateDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function migrateDesktops(request: MigrateDesktopsRequest): MigrateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateDesktopsWithOptions(request, runtime);
}

model ModifyADConnectorDirectoryRequest {
  adHostname?: string(name='AdHostname', example='cnshsv21hmcdc01'),
  directoryId?: string(name='DirectoryId', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  directoryName?: string(name='DirectoryName', example='testDirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress', example='127.0.**.**'),
  domainName?: string(name='DomainName', example='example.com'),
  domainPassword?: string(name='DomainPassword', example='testPassword'),
  domainUserName?: string(name='DomainUserName', example='sAMAccountName'),
  mfaEnabled?: boolean(name='MfaEnabled', example='false'),
  OUName?: string(name='OUName', example='example.com/Domain Controllers'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', example='127.0.**.**'),
  subDomainName?: string(name='SubDomainName', example='childexample.com'),
}

model ModifyADConnectorDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyADConnectorDirectoryResponseBody(name='body'),
}

async function modifyADConnectorDirectoryWithOptions(request: ModifyADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): ModifyADConnectorDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.directoryName)) {
    query['DirectoryName'] = request.directoryName;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyADConnectorDirectory',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): ModifyADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorDirectoryWithOptions(request, runtime);
}

model ModifyADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', example='beijing-ad01'),
  dnsAddress?: [ string ](name='DnsAddress', example='127.0.*.*'),
  domainName?: string(name='DomainName', example='example.com'),
  domainPassword?: string(name='DomainPassword', example='testPassword'),
  domainUserName?: string(name='DomainUserName', example='Administrator'),
  mfaEnabled?: boolean(name='MfaEnabled', example='false'),
  OUName?: string(name='OUName', example='oldad.com/Domain Controllers'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  officeSiteName?: string(name='OfficeSiteName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', example='127.0.*.*'),
  subDomainName?: string(name='SubDomainName', example='childexample.com'),
}

model ModifyADConnectorOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyADConnectorOfficeSiteResponseBody(name='body'),
}

async function modifyADConnectorOfficeSiteWithOptions(request: ModifyADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): ModifyADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adHostname)) {
    query['AdHostname'] = request.adHostname;
  }
  if (!Util.isUnset(request.dnsAddress)) {
    query['DnsAddress'] = request.dnsAddress;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainPassword)) {
    query['DomainPassword'] = request.domainPassword;
  }
  if (!Util.isUnset(request.domainUserName)) {
    query['DomainUserName'] = request.domainUserName;
  }
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.OUName)) {
    query['OUName'] = request.OUName;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.subDomainDnsAddress)) {
    query['SubDomainDnsAddress'] = request.subDomainDnsAddress;
  }
  if (!Util.isUnset(request.subDomainName)) {
    query['SubDomainName'] = request.subDomainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyADConnectorOfficeSite',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyADConnectorOfficeSite(request: ModifyADConnectorOfficeSiteRequest): ModifyADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorOfficeSiteWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 20 16 ? * 1,2,3,4,5,6,7'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-itcmrhqt01tdo****'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter but cannot start with [http:// or https://. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). Default value: null.](http://https://。、（:）、（\\_）（-）。：。)', example='Automatic system snapshot'),
  regionId?: string(name='RegionId', description='The ID of the region where the automatic snapshot policy is created.', example='cn-hangzhou'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of automatic snapshots. Unit: days. Valid values:

*   1 (default): The automatic snapshots are permanently retained.
*   1 to 65536: The automatic snapshots are retained for the specified number of days.', example='5'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoSnapshotPolicy',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyBundleRequest {
  bundleId?: string(name='BundleId', description='The ID of the request.', example='b-2g65ljy4291vl****'),
  bundleName?: string(name='BundleName', description='The description of the new desktop template.', example='newName'),
  description?: string(name='Description', description='ModifyBundle', example='newDescription'),
  imageId?: string(name='ImageId', description='The operation that you want to perform. Set the value to ModifyBundle.', example='m-aea3oaww001np****'),
  language?: string(name='Language', example='zh-CN'),
  regionId?: string(name='RegionId', description='The name of the new desktop template.', example='cn-hangzhou'),
}

model ModifyBundleResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyBundleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBundleResponseBody(name='body'),
}

/**
  * The ID of the desktop template.
  *
  * @param request ModifyBundleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyBundleResponse
 */
async function modifyBundleWithOptions(request: ModifyBundleRequest, runtime: Util.RuntimeOptions): ModifyBundleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bundleId)) {
    query['BundleId'] = request.bundleId;
  }
  if (!Util.isUnset(request.bundleName)) {
    query['BundleName'] = request.bundleName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBundle',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the desktop template.
  *
  * @param request ModifyBundleRequest
  * @return ModifyBundleResponse
 */
async function modifyBundle(request: ModifyBundleRequest): ModifyBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBundleWithOptions(request, runtime);
}

model ModifyCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-64326*****'),
  conflictPolicy?: string(name='ConflictPolicy', description='The processing method that is used if the file that you want to create has the same name as an existing file in the cloud. Valid values: ignore: allows you to create the file by using the same name as an existing file in the cloud. auto_rename: automatically renames the file that you want to create if a file that has the same name exists in the cloud. By default, the current point in time is added to the end of the file name. Example: xxx\\_20060102\\_150405. refuse: denies creating the file if a file that has the same name exists in the cloud. Default value: refuse.', example='ignore'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01'),
  fileId?: string(name='FileId', description='The file ID.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  fileName?: string(name='FileName', description='The file name.', example='test.txt'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ModifyCdsFileResponseBody = {
  code?: string(name='Code', description='The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The value true returned if the request is successful.', example='true'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true: The request is successful. false: The request failed.', example='true'),
}

model ModifyCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdsFileResponseBody(name='body'),
}

async function modifyCdsFileWithOptions(request: ModifyCdsFileRequest, runtime: Util.RuntimeOptions): ModifyCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCdsFile(request: ModifyCdsFileRequest): ModifyCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdsFileWithOptions(request, runtime);
}

model ModifyCdsFileShareLinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-shanghai+cds-135515****'),
  description?: string(name='Description', description='The description of the file sharing task. The description must be 0 to 1,024 characters in length.', example='testDescription'),
  disableDownload?: boolean(name='DisableDownload', description='Specifies whether to prohibit the download of the files that are being shared.', example='false'),
  disablePreview?: boolean(name='DisablePreview', description='Specifies whether to prohibit the preview of the files that are being shared.', example='false'),
  disableSave?: boolean(name='DisableSave', description='Specifies whether to prohibit the dump of the files that are being shared.', example='false'),
  downloadCount?: long(name='DownloadCount', description='The number of times that the shared files are downloaded. The value of this parameter must be equal to or greater than 0.', example='0'),
  downloadLimit?: long(name='DownloadLimit', description='The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='0'),
  expiration?: string(name='Expiration', description='The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.', example='2022-07-20T06:30:22.365Z'),
  previewCount?: long(name='PreviewCount', description='The number of times that the shared files are previewed. The value of this parameter must be equal to or greater than 0.', example='0'),
  previewLimit?: long(name='PreviewLimit', description='The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be previewed.', example='100'),
  reportCount?: long(name='ReportCount', description='The number of times that the shared files are reported. The value of this parameter must be equal to or greater than 0.', example='0'),
  saveCount?: long(name='SaveCount', description='The number of times that the shared files are dumped. The value of this parameter must be equal to or greater than 0.', example='0'),
  saveLimit?: long(name='SaveLimit', description='The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be dumped.', example='100'),
  shareId?: string(name='ShareId', description='The ID of the file sharing task.', example='7JQX1Fs****'),
  shareName?: string(name='ShareName', description='The name of the file sharing task. If you leave this parameter empty, the file name that corresponds to the first ID in the file ID list is used. The name must be 0 to 128 characters in length.'),
  sharePwd?: string(name='SharePwd', description='The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.', example='12345678'),
  status?: string(name='Status', description='The status of the file sharing link. Valid values: ● disabled: The file sharing link is canceled. ● enabled: The file sharing link is available.', example='enabled'),
  videoPreviewCount?: long(name='VideoPreviewCount', description='The number of times that the videos are previewed in the shared files. The value of this parameter must be equal to or greater than 0.', example='0'),
}

model ModifyCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: CdsFileShareLinkModel(name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true
*   false', example='true'),
}

model ModifyCdsFileShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCdsFileShareLinkResponseBody(name='body'),
}

async function modifyCdsFileShareLinkWithOptions(request: ModifyCdsFileShareLinkRequest, runtime: Util.RuntimeOptions): ModifyCdsFileShareLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    query['DisableDownload'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    query['DisablePreview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    query['DisableSave'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadCount)) {
    query['DownloadCount'] = request.downloadCount;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    query['DownloadLimit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.expiration)) {
    query['Expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.previewCount)) {
    query['PreviewCount'] = request.previewCount;
  }
  if (!Util.isUnset(request.previewLimit)) {
    query['PreviewLimit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.reportCount)) {
    query['ReportCount'] = request.reportCount;
  }
  if (!Util.isUnset(request.saveCount)) {
    query['SaveCount'] = request.saveCount;
  }
  if (!Util.isUnset(request.saveLimit)) {
    query['SaveLimit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareId)) {
    query['ShareId'] = request.shareId;
  }
  if (!Util.isUnset(request.shareName)) {
    query['ShareName'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    query['SharePwd'] = request.sharePwd;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.videoPreviewCount)) {
    query['VideoPreviewCount'] = request.videoPreviewCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCdsFileShareLink',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCdsFileShareLink(request: ModifyCdsFileShareLinkRequest): ModifyCdsFileShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCdsFileShareLinkWithOptions(request, runtime);
}

model ModifyCloudDriveGroupsRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-shanghai+cds-135515****'),
  groupId?: [ string ](name='GroupId', description='The IDs of the teams.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the team space. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='disabled'),
  totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='32212254720'),
}

model ModifyCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The returned results. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ModifyCloudDriveGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudDriveGroupsResponseBody(name='body'),
}

async function modifyCloudDriveGroupsWithOptions(request: ModifyCloudDriveGroupsRequest, runtime: Util.RuntimeOptions): ModifyCloudDriveGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.totalSize)) {
    query['TotalSize'] = request.totalSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudDriveGroups',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudDriveGroups(request: ModifyCloudDriveGroupsRequest): ModifyCloudDriveGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDriveGroupsWithOptions(request, runtime);
}

model ModifyCloudDrivePermissionRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-60911*****'),
  downloadEndUserIds?: [ string ](name='DownloadEndUserIds'),
  downloadUploadEndUserIds?: [ string ](name='DownloadUploadEndUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyCloudDrivePermissionResponseBody = {
  requestId?: string(name='RequestId', example='9197824D-AD4B-571F-94BB-C2E6D5855AB6'),
}

model ModifyCloudDrivePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudDrivePermissionResponseBody(name='body'),
}

async function modifyCloudDrivePermissionWithOptions(request: ModifyCloudDrivePermissionRequest, runtime: Util.RuntimeOptions): ModifyCloudDrivePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.downloadEndUserIds)) {
    query['DownloadEndUserIds'] = request.downloadEndUserIds;
  }
  if (!Util.isUnset(request.downloadUploadEndUserIds)) {
    query['DownloadUploadEndUserIds'] = request.downloadUploadEndUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudDrivePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudDrivePermission(request: ModifyCloudDrivePermissionRequest): ModifyCloudDrivePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDrivePermissionWithOptions(request, runtime);
}

model ModifyCloudDriveUsersRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-596198****'),
  endUserId?: [ string ](name='EndUserId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: string(name='Status', example='enabled'),
  userMaxSize?: long(name='UserMaxSize', example='1024'),
}

model ModifyCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId', example='D2E005C4-8CA3-5F1D-9917-E75BE3BF****'),
}

model ModifyCloudDriveUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCloudDriveUsersResponseBody(name='body'),
}

async function modifyCloudDriveUsersWithOptions(request: ModifyCloudDriveUsersRequest, runtime: Util.RuntimeOptions): ModifyCloudDriveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userMaxSize)) {
    query['UserMaxSize'] = request.userMaxSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCloudDriveUsers',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCloudDriveUsers(request: ModifyCloudDriveUsersRequest): ModifyCloudDriveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDriveUsersWithOptions(request, runtime);
}

model ModifyCustomizedListHeadersRequest {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', example='display'),
      headerKey?: string(name='HeaderKey', example='pay_type'),
    }
  ](name='Headers'),
  listType?: string(name='ListType', example='desktop'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyCustomizedListHeadersResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyCustomizedListHeadersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomizedListHeadersResponseBody(name='body'),
}

async function modifyCustomizedListHeadersWithOptions(request: ModifyCustomizedListHeadersRequest, runtime: Util.RuntimeOptions): ModifyCustomizedListHeadersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.headers)) {
    query['Headers'] = request.headers;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomizedListHeaders',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomizedListHeaders(request: ModifyCustomizedListHeadersRequest): ModifyCustomizedListHeadersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomizedListHeadersWithOptions(request, runtime);
}

model ModifyDesktopChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='The IDs of the cloud desktops. You can specify 1 to 20 IDs.', example='false'),
  chargeType?: string(name='ChargeType', description='The ID of the sales promotion.', example='PrePaid'),
  desktopId?: [ string ](name='DesktopId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='ecd-gx2x1dhsmucyy****'),
  period?: int32(name='Period', description='Specifies whether to enable automatic payment if you specify subscription as the new billing method for the cloud desktop.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The IDs of the desktop groups. If multiple cloud desktops are created at a time, multiple cloud desktop IDs are returned.', example='Month'),
  promotionId?: string(name='PromotionId', description='The unit of the subscription duration if you specify subscription as the new billing method for the cloud desktop.', example='500038360030606'),
  regionId?: string(name='RegionId', description='The subscription duration if you specify subscription as the new billing method for the cloud desktop. The unit of the value is specified by the `PeriodUnit` parameter. This parameter takes effect only when the `ChargeType` parameter is set to `PrePaid`.

*   If the `PeriodUnit` parameter is set to `Week`, the valid value of the Period parameter is 1.
*   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
*   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.', example='cn-hangzhou'),
}

model ModifyDesktopChargeTypeResponseBody = {
  desktopId?: [ string ](name='DesktopId'),
  orderId?: string(name='OrderId', description='The ID of the cloud desktop.', example='123456789'),
  requestId?: string(name='RequestId', description='Change the billing method of a cloud desktop', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopChargeTypeResponseBody(name='body'),
}

/**
  * The new billing method that you want to use for the desktop group.
  *
  * @param request ModifyDesktopChargeTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopChargeTypeResponse
 */
async function modifyDesktopChargeTypeWithOptions(request: ModifyDesktopChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDesktopChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopChargeType',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The new billing method that you want to use for the desktop group.
  *
  * @param request ModifyDesktopChargeTypeRequest
  * @return ModifyDesktopChargeTypeResponse
 */
async function modifyDesktopChargeType(request: ModifyDesktopChargeTypeRequest): ModifyDesktopChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopChargeTypeWithOptions(request, runtime);
}

model ModifyDesktopGroupRequest {
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values:

*   0: does not create cloud desktops in the desktop group.
*   1: creates cloud desktops in the desktop group.', example='1'),
  allowBufferCount?: int32(name='AllowBufferCount', description='Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not reserve cloud desktops. N: reserves N cloud desktops. Valid values of N: 1 to the value of the MaxDesktopsCount parameter.', example='1'),
  bindAmount?: long(name='BindAmount', description='The maximum number of sessions per cloud desktop in the multi-session desktop group.', example='1'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='The number of cloud desktops to purchase. Valid values: 0 to 200.', example='5'),
  classify?: string(name='Classify', description='The classification of the cloud desktop pool.', example='teacher'),
  comments?: string(name='Comments', description='The remarks on the desktop group.', example='test'),
  connectDuration?: long(name='ConnectDuration', description='The maximum duration of the session. Unit: milliseconds.', example='600000'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='desktopGroupName1'),
  disableSessionConfig?: boolean(name='DisableSessionConfig', description='Specifies whether to disable session management.', example='true'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the Apsara File Storage NAS (NAS) file system.', example='04f314****'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The maximum duration of the idle session. Unit: milliseconds.', example='120000'),
  imageId?: string(name='ImageId', description='The IDs of the images.', example='desktopimage-windows-server-2016-64-ch'),
  keepDuration?: long(name='KeepDuration', description='The retention period of cloud desktops in the desktop group after end users disconnect from the desktops. Unit: ms.', example='1000'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.', example='10'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.', example='1'),
  ownBundleId?: string(name='OwnBundleId', description='The ID of the cloud desktop template.', example='b-7t275tpgjueeu****'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy.', example='pg-53iyi2aar0nd6****'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of policy groups.'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable data roaming.', example='false'),
  ratioThreshold?: float(name='RatioThreshold', description='The session usage threshold for the multi-session desktop group that has an auto scaling policy in effect.', example='0.5'),
  regionId?: string(name='RegionId', description='The region ID of the desktop group.', example='cn-hangzhou'),
  resetType?: long(name='ResetType', description='Specifies which type of disk to reset for cloud desktops in the desktop group.', example='0'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy group.

>  This parameter is unavailable.', example='s-kakowkdl****'),
  stopDuration?: long(name='StopDuration', description='The duration before an idle cloud desktop is stopped. Unit: milliseconds.', example='180000'),
}

model ModifyDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopGroupResponseBody(name='body'),
}

/**
  * After you create a desktop group, the system creates a specific number of cloud desktops based on the scaling policy that you configure for the desktop group and the number of end users who request to connect to the cloud desktops. Cloud desktops in a desktop group are created by using the same desktop template and security policy. You can modify the configurations of the desktop group in different scenarios to manage cloud desktops in a centralized manner.
  * *   By default, a desktop group has the same name as all cloud desktops in the group. You can modify the desktop group name, which is specified by the DesktopGroupName parameter, to distinguish the desktop group from the cloud desktops.
  * *   If the number of vCPUs and memory size of the cloud desktop cannot meet your business requirements in high performance scenarios, you can change the desktop template that is used to create the cloud desktop to a desktop template (OwnBundleId) that has higher specifications.
  * *   If a security policy that is associated with the desktop group cannot meet your requirements on security, you can change the policy to another policy (PolicyGroupId) that provides higher security.
  * *   If the number of cloud desktops in the desktop group is insufficient to meet the business requirements of end users, you can modify the parameter settings in the scaling policy. The parameters include MinDesktopsCount, MaxDesktopsCount, and AllowBufferCount.
  *
  * @param request ModifyDesktopGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopGroupResponse
 */
async function modifyDesktopGroupWithOptions(request: ModifyDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowAutoSetup)) {
    query['AllowAutoSetup'] = request.allowAutoSetup;
  }
  if (!Util.isUnset(request.allowBufferCount)) {
    query['AllowBufferCount'] = request.allowBufferCount;
  }
  if (!Util.isUnset(request.bindAmount)) {
    query['BindAmount'] = request.bindAmount;
  }
  if (!Util.isUnset(request.buyDesktopsCount)) {
    query['BuyDesktopsCount'] = request.buyDesktopsCount;
  }
  if (!Util.isUnset(request.classify)) {
    query['Classify'] = request.classify;
  }
  if (!Util.isUnset(request.comments)) {
    query['Comments'] = request.comments;
  }
  if (!Util.isUnset(request.connectDuration)) {
    query['ConnectDuration'] = request.connectDuration;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupName)) {
    query['DesktopGroupName'] = request.desktopGroupName;
  }
  if (!Util.isUnset(request.disableSessionConfig)) {
    query['DisableSessionConfig'] = request.disableSessionConfig;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.idleDisconnectDuration)) {
    query['IdleDisconnectDuration'] = request.idleDisconnectDuration;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.keepDuration)) {
    query['KeepDuration'] = request.keepDuration;
  }
  if (!Util.isUnset(request.loadPolicy)) {
    query['LoadPolicy'] = request.loadPolicy;
  }
  if (!Util.isUnset(request.maxDesktopsCount)) {
    query['MaxDesktopsCount'] = request.maxDesktopsCount;
  }
  if (!Util.isUnset(request.minDesktopsCount)) {
    query['MinDesktopsCount'] = request.minDesktopsCount;
  }
  if (!Util.isUnset(request.ownBundleId)) {
    query['OwnBundleId'] = request.ownBundleId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.policyGroupIds)) {
    query['PolicyGroupIds'] = request.policyGroupIds;
  }
  if (!Util.isUnset(request.profileFollowSwitch)) {
    query['ProfileFollowSwitch'] = request.profileFollowSwitch;
  }
  if (!Util.isUnset(request.ratioThreshold)) {
    query['RatioThreshold'] = request.ratioThreshold;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.scaleStrategyId)) {
    query['ScaleStrategyId'] = request.scaleStrategyId;
  }
  if (!Util.isUnset(request.stopDuration)) {
    query['StopDuration'] = request.stopDuration;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you create a desktop group, the system creates a specific number of cloud desktops based on the scaling policy that you configure for the desktop group and the number of end users who request to connect to the cloud desktops. Cloud desktops in a desktop group are created by using the same desktop template and security policy. You can modify the configurations of the desktop group in different scenarios to manage cloud desktops in a centralized manner.
  * *   By default, a desktop group has the same name as all cloud desktops in the group. You can modify the desktop group name, which is specified by the DesktopGroupName parameter, to distinguish the desktop group from the cloud desktops.
  * *   If the number of vCPUs and memory size of the cloud desktop cannot meet your business requirements in high performance scenarios, you can change the desktop template that is used to create the cloud desktop to a desktop template (OwnBundleId) that has higher specifications.
  * *   If a security policy that is associated with the desktop group cannot meet your requirements on security, you can change the policy to another policy (PolicyGroupId) that provides higher security.
  * *   If the number of cloud desktops in the desktop group is insufficient to meet the business requirements of end users, you can modify the parameter settings in the scaling policy. The parameters include MinDesktopsCount, MaxDesktopsCount, and AllowBufferCount.
  *
  * @param request ModifyDesktopGroupRequest
  * @return ModifyDesktopGroupResponse
 */
async function modifyDesktopGroup(request: ModifyDesktopGroupRequest): ModifyDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopGroupWithOptions(request, runtime);
}

model ModifyDesktopHostNameRequest {
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
  newHostName?: string(name='NewHostName', description='The new hostname of the cloud desktop. The hostname must meet the following requirements:

*   Must be 2 to 15 characters in length.
*   Contain letters, digits, and hyphens (-). It cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.', example='NewName'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to ModifyDesktopHostName.', example='cn-hangzhou'),
}

model ModifyDesktopHostNameResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopHostNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopHostNameResponseBody(name='body'),
}

/**
  * The ID of the region.
  *
  * @param request ModifyDesktopHostNameRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopHostNameResponse
 */
async function modifyDesktopHostNameWithOptions(request: ModifyDesktopHostNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopHostNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.newHostName)) {
    query['NewHostName'] = request.newHostName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopHostName',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the region.
  *
  * @param request ModifyDesktopHostNameRequest
  * @return ModifyDesktopHostNameResponse
 */
async function modifyDesktopHostName(request: ModifyDesktopHostNameRequest): ModifyDesktopHostNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopHostNameWithOptions(request, runtime);
}

model ModifyDesktopNameRequest {
  desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
  newDesktopName?: string(name='NewDesktopName', description='The new name of the cloud desktop. The name of the cloud desktop must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name must start with a letter and cannot start with `http://` or `https://`.
*   The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='test'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to **ModifyDesktopName**.', example='cn-hangzhou'),
}

model ModifyDesktopNameResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopNameResponseBody(name='body'),
}

async function modifyDesktopNameWithOptions(request: ModifyDesktopNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.newDesktopName)) {
    query['NewDesktopName'] = request.newDesktopName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopName',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDesktopName(request: ModifyDesktopNameRequest): ModifyDesktopNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopNameWithOptions(request, runtime);
}

model ModifyDesktopSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: does not automatically complete the payment. In this case, an order is generated, but no payment is made. You can log on to the EDS console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='false'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-4543qyik164a4****'),
  desktopType?: string(name='DesktopType', description='The new cloud desktop type. You can call the [DescribeDesktopTypes](~~188882~~) operation to query the IDs of supported cloud desktop types.', example='eds.general.2c8g'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='500033080110596'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The size of the new system disk. Unit: GiB. Valid values: 80 to 500 GiB. The value must be a multiple of 10.', example='80'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The performance level (PL) of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

Default value: PL0.', example='PL0'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The size of the new data disk. Unit: GiB.

*   The data disk size of a non-Graphics cloud desktop can be within the range of 20 to 1,020 GiB. The value must be a multiple of 10.
*   The data disk size of the Graphics cloud desktop can be within the range of 40 to 1,020 GiB. The value must be a multiple of 10.', example='100'),
}

model ModifyDesktopSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopSpecResponseBody(name='body'),
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, take note of the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides. For more information, see [Cloud desktop types](~~188609~~).
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. You must take note of the following items:
  *     *   Each desktop type contains different desktop specifications, such as vCPUs, memory, and GPUs. When you change the desktop configurations, you can only change the desktop type from one to another. However, you cannot change only one of the specifications, such as vCPUs, memory, and GPUs.
  *     *   You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  *     *   You can only increase the sizes of system and data disks.
  *     *   If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or pay for the price difference.
  *     *   If you want to change the configurations of your cloud desktop for multiple times, we recommend that you wait at least 5 minutes the next time you change the configurations of the same cloud desktop.
  *     *   The cloud desktop for which you want to change configurations must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDesktopSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDesktopSpecResponse
 */
async function modifyDesktopSpecWithOptions(request: ModifyDesktopSpecRequest, runtime: Util.RuntimeOptions): ModifyDesktopSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopType)) {
    query['DesktopType'] = request.desktopType;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskSizeGib)) {
    query['RootDiskSizeGib'] = request.rootDiskSizeGib;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskSizeGib)) {
    query['UserDiskSizeGib'] = request.userDiskSizeGib;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopSpec',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, take note of the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides. For more information, see [Cloud desktop types](~~188609~~).
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. You must take note of the following items:
  *     *   Each desktop type contains different desktop specifications, such as vCPUs, memory, and GPUs. When you change the desktop configurations, you can only change the desktop type from one to another. However, you cannot change only one of the specifications, such as vCPUs, memory, and GPUs.
  *     *   You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  *     *   You can only increase the sizes of system and data disks.
  *     *   If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or pay for the price difference.
  *     *   If you want to change the configurations of your cloud desktop for multiple times, we recommend that you wait at least 5 minutes the next time you change the configurations of the same cloud desktop.
  *     *   The cloud desktop for which you want to change configurations must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDesktopSpecRequest
  * @return ModifyDesktopSpecResponse
 */
async function modifyDesktopSpec(request: ModifyDesktopSpecRequest): ModifyDesktopSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopSpecWithOptions(request, runtime);
}

model ModifyDesktopTimerRequest {
  desktopId?: [ string ](name='DesktopId'),
  desktopTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting', example='true'),
      cronExpression?: string(name='CronExpression', example='0 0 16 ? * 1,2,3,4,5,6,7'),
      enforce?: boolean(name='Enforce', example='true'),
      interval?: int32(name='Interval', example='10'),
      operationType?: string(name='OperationType'),
      resetType?: string(name='ResetType'),
      timerType?: string(name='TimerType'),
    }
  ](name='DesktopTimers'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  useDesktopTimers?: boolean(name='UseDesktopTimers', example='true'),
}

model ModifyDesktopTimerResponseBody = {
  desktopIds?: [ string ](name='DesktopIds'),
  requestId?: string(name='RequestId', example='4638719F-3CAB-5704-BD54-55617BFF****'),
}

model ModifyDesktopTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopTimerResponseBody(name='body'),
}

async function modifyDesktopTimerWithOptions(request: ModifyDesktopTimerRequest, runtime: Util.RuntimeOptions): ModifyDesktopTimerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.desktopTimers)) {
    query['DesktopTimers'] = request.desktopTimers;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.useDesktopTimers)) {
    query['UseDesktopTimers'] = request.useDesktopTimers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopTimer',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDesktopTimer(request: ModifyDesktopTimerRequest): ModifyDesktopTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopTimerWithOptions(request, runtime);
}

model ModifyDesktopsPolicyGroupRequest {
  desktopId?: [ string ](name='DesktopId', example='ecd-ia2zw38bi6cm7****'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  policyGroupIds?: [ string ](name='PolicyGroupIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDesktopsPolicyGroupResponseBody = {
  modifyResults?: [ 
    {
      code?: string(name='Code', example='success'),
      desktopId?: string(name='DesktopId', example='ecd-7w78ozhjcwa3u****'),
      message?: string(name='Message', example='The specified param DesktopId ecd-ia2zw38bi6cm7**** is not found.'),
    }
  ](name='ModifyResults'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopsPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDesktopsPolicyGroupResponseBody(name='body'),
}

async function modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopsPolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.policyGroupIds)) {
    query['PolicyGroupIds'] = request.policyGroupIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDesktopsPolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopsPolicyGroupWithOptions(request, runtime);
}

model ModifyDiskSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
*   `false`: does not complete the payment. In this case, an order is generated, but no payment is made. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders** page.

Default value: `true`.', example='false'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-2yjhqxo1monxxxxxx'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion activity. You can call the DescribePrice operation to obtain the IDs of matching sales promotion activities.', example='youhuiquan_promotion_option_id_for_blank'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL1'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL1'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.', example='219861020660568'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F89BBB13-8B3B-5C8A-A700-EEFDC17B8227'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
  * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
  * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
  * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
  * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
  * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDiskSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rootDiskPerformanceLevel)) {
    query['RootDiskPerformanceLevel'] = request.rootDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.userDiskPerformanceLevel)) {
    query['UserDiskPerformanceLevel'] = request.userDiskPerformanceLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskSpec',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
  * *   Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
  * *   When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
  * 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
  * 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
  * 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
  * 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
  * 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
  * 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
  * *   The changes do not affect your personal data on the cloud desktop.
  *
  * @param request ModifyDiskSpecRequest
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyEntitlementRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
  endUserId?: [ string ](name='EndUserId', description='The usernames of users. You can specify up to 100 usernames.', example='alice'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyEntitlementResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyEntitlementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEntitlementResponseBody(name='body'),
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request ModifyEntitlementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyEntitlementResponse
 */
async function modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: Util.RuntimeOptions): ModifyEntitlementResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEntitlement',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The cloud desktop must be in the Running state.
  *
  * @param request ModifyEntitlementRequest
  * @return ModifyEntitlementResponse
 */
async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEntitlementWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  description?: string(name='Description', example='testDescription'),
  imageId?: string(name='ImageId', description='The ID of the request.', example='m-2g65ljy3ynrdq****'),
  name?: string(name='Name', description='The operation that you want to perform. Set the value to ModifyImageAttribute.', example='testName'),
  regionId?: string(name='RegionId', description='The description of the image.', example='cn-hangzhou'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

/**
  * The ID of the image.
  *
  * @param request ModifyImageAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImageAttributeResponse
 */
async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageAttribute',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the image.
  *
  * @param request ModifyImageAttributeRequest
  * @return ModifyImageAttributeResponse
 */
async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImagePermissionRequest {
  addAccount?: [ long ](name='AddAccount'),
  imageId?: string(name='ImageId', example='m-gx2x1dhsmusr2****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  removeAccount?: [ long ](name='RemoveAccount'),
}

model ModifyImagePermissionResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImagePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImagePermissionResponseBody(name='body'),
}

async function modifyImagePermissionWithOptions(request: ModifyImagePermissionRequest, runtime: Util.RuntimeOptions): ModifyImagePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addAccount)) {
    query['AddAccount'] = request.addAccount;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeAccount)) {
    query['RemoveAccount'] = request.removeAccount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImagePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyImagePermission(request: ModifyImagePermissionRequest): ModifyImagePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImagePermissionWithOptions(request, runtime);
}

model ModifyNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='04f314****'),
  mountTargetDomain?: string(name='MountTargetDomain', example='0bf744****-xo***.cn-hangzhou.nas.aliyuncs.com'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to ModifyNASDefaultMountTarget.', example='cn-hangzhou'),
}

model ModifyNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * The ID of the region.
  *
  * @param request ModifyNASDefaultMountTargetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyNASDefaultMountTargetResponse
 */
async function modifyNASDefaultMountTargetWithOptions(request: ModifyNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ModifyNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetDomain)) {
    query['MountTargetDomain'] = request.mountTargetDomain;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNASDefaultMountTarget',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the region.
  *
  * @param request ModifyNASDefaultMountTargetRequest
  * @return ModifyNASDefaultMountTargetResponse
 */
async function modifyNASDefaultMountTarget(request: ModifyNASDefaultMountTargetRequest): ModifyNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNASDefaultMountTargetWithOptions(request, runtime);
}

model ModifyNetworkPackageBandwidthRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  bandwidth?: int32(name='Bandwidth', example='10'),
  networkPackageId?: string(name='NetworkPackageId', example='np-cxj99qb8d34vo****'),
  promotionId?: string(name='PromotionId', example='500033080110596'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyNetworkPackageBandwidthResponseBody = {
  orderId?: string(name='OrderId', example='214552063030752'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageBandwidthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkPackageBandwidthResponseBody(name='body'),
}

async function modifyNetworkPackageBandwidthWithOptions(request: ModifyNetworkPackageBandwidthRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkPackageBandwidth',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNetworkPackageBandwidth(request: ModifyNetworkPackageBandwidthRequest): ModifyNetworkPackageBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageBandwidthWithOptions(request, runtime);
}

model ModifyNetworkPackageEnabledRequest {
  enabled?: boolean(name='Enabled', example='true'),
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the Internet access package.', example='np-cfedn7r2pe48g****'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to ModifyNetworkPackageEnabled.', example='cn-hangzhou'),
}

model ModifyNetworkPackageEnabledResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkPackageEnabledResponseBody(name='body'),
}

/**
  * The ID of the region.
  *
  * @param request ModifyNetworkPackageEnabledRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyNetworkPackageEnabledResponse
 */
async function modifyNetworkPackageEnabledWithOptions(request: ModifyNetworkPackageEnabledRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkPackageEnabled',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the region.
  *
  * @param request ModifyNetworkPackageEnabledRequest
  * @return ModifyNetworkPackageEnabledResponse
 */
async function modifyNetworkPackageEnabled(request: ModifyNetworkPackageEnabledRequest): ModifyNetworkPackageEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageEnabledWithOptions(request, runtime);
}

model ModifyOfficeSiteAttributeRequest {
  desktopAccessType?: string(name='DesktopAccessType', example='INTERNET'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='是否为使用云桌面的用户赋予本地管理员权限。', example='false'),
  needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', example='false'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', example='false'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-882398****'),
  officeSiteName?: string(name='OfficeSiteName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyOfficeSiteAttributeResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteAttributeResponseBody(name='body'),
}

async function modifyOfficeSiteAttributeWithOptions(request: ModifyOfficeSiteAttributeRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopAccessType)) {
    query['DesktopAccessType'] = request.desktopAccessType;
  }
  if (!Util.isUnset(request.enableAdminAccess)) {
    query['EnableAdminAccess'] = request.enableAdminAccess;
  }
  if (!Util.isUnset(request.needVerifyLoginRisk)) {
    query['NeedVerifyLoginRisk'] = request.needVerifyLoginRisk;
  }
  if (!Util.isUnset(request.needVerifyZeroDevice)) {
    query['NeedVerifyZeroDevice'] = request.needVerifyZeroDevice;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.officeSiteName)) {
    query['OfficeSiteName'] = request.officeSiteName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteAttribute',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteAttribute(request: ModifyOfficeSiteAttributeRequest): ModifyOfficeSiteAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteAttributeWithOptions(request, runtime);
}

model ModifyOfficeSiteCrossDesktopAccessRequest {
  enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Specifies whether to enable cross-desktop access for a workspace.

*   true: enables cross-desktop access.
*   false: disables cross-desktop access.', example='false'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-068266****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyOfficeSiteCrossDesktopAccessResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteCrossDesktopAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteCrossDesktopAccessResponseBody(name='body'),
}

async function modifyOfficeSiteCrossDesktopAccessWithOptions(request: ModifyOfficeSiteCrossDesktopAccessRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteCrossDesktopAccessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableCrossDesktopAccess)) {
    query['EnableCrossDesktopAccess'] = request.enableCrossDesktopAccess;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteCrossDesktopAccess',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteCrossDesktopAccess(request: ModifyOfficeSiteCrossDesktopAccessRequest): ModifyOfficeSiteCrossDesktopAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteCrossDesktopAccessWithOptions(request, runtime);
}

model ModifyOfficeSiteMfaEnabledRequest {
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable MFA. Valid values:

*   true: enables MFA
*   false: disables MFA', example='true'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyOfficeSiteMfaEnabledResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteMfaEnabledResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOfficeSiteMfaEnabledResponseBody(name='body'),
}

async function modifyOfficeSiteMfaEnabledWithOptions(request: ModifyOfficeSiteMfaEnabledRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteMfaEnabledResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mfaEnabled)) {
    query['MfaEnabled'] = request.mfaEnabled;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOfficeSiteMfaEnabled',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOfficeSiteMfaEnabled(request: ModifyOfficeSiteMfaEnabledRequest): ModifyOfficeSiteMfaEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteMfaEnabledWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  operateType?: string(name='OperateType', example='vul_fix'),
  reason?: string(name='Reason'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='cve'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
      name?: string(name='Name', example='oval:com.redhat.rhsa:def:20171100'),
      tag?: string(name='Tag', example='oval'),
    }
  ](name='VulInfo'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulInfo)) {
    query['VulInfo'] = request.vulInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOperateVul',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPolicyGroupRequest {
  appContentProtection?: string(name='AppContentProtection', example='on'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
    }
  ](name='AuthorizeAccessPolicyRule'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='10.0.XX.XX/8'),
      description?: string(name='Description', example='test'),
      ipProtocol?: string(name='IpProtocol', example='tcp'),
      policy?: string(name='Policy', example='accept'),
      portRange?: string(name='PortRange', example='22/22'),
      priority?: string(name='Priority', example='1'),
      type?: string(name='Type', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule'),
  cameraRedirect?: string(name='CameraRedirect', example='on'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', example='windows'),
      status?: string(name='Status', example='ON'),
    }
  ](name='ClientType'),
  clipboard?: string(name='Clipboard', example='off'),
  domainList?: string(name='DomainList', example='on'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', example='on'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', example='on'),
  gpuAcceleration?: string(name='GpuAcceleration', example='off'),
  html5Access?: string(name='Html5Access', example='off'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', example='BOTH'),
  localDrive?: string(name='LocalDrive', example='off'),
  name?: string(name='Name', example='testPolicyGroupName'),
  netRedirect?: string(name='NetRedirect', example='on'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  preemptLogin?: string(name='PreemptLogin', example='off'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser'),
  printerRedirection?: string(name='PrinterRedirection', example='off'),
  recordContent?: string(name='RecordContent', example='OFF'),
  recordContentExpires?: long(name='RecordContentExpires', example='30'),
  recording?: string(name='Recording', example='OFF'),
  recordingAudio?: string(name='RecordingAudio', example='on'),
  recordingDuration?: int32(name='RecordingDuration', example='15'),
  recordingEndTime?: string(name='RecordingEndTime', example='08:59:00'),
  recordingExpires?: long(name='RecordingExpires', example='30'),
  recordingFps?: long(name='RecordingFps', example='5'),
  recordingStartTime?: string(name='RecordingStartTime', example='08:00:00'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  remoteCoordinate?: string(name='RemoteCoordinate', example='fullControl'),
  revokeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
    }
  ](name='RevokeAccessPolicyRule'),
  revokeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
      ipProtocol?: string(name='IpProtocol', example='tcp'),
      policy?: string(name='Policy', example='accept'),
      portRange?: string(name='PortRange', example='22/22'),
      priority?: string(name='Priority', example='1'),
      type?: string(name='Type', example='outflow'),
    }
  ](name='RevokeSecurityPolicyRule'),
  scope?: string(name='Scope', example='GLOBAL'),
  scopeValue?: [ string ](name='ScopeValue'),
  usbRedirect?: string(name='UsbRedirect', example='off'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description'),
      deviceClass?: string(name='DeviceClass', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', example='xxh'),
      productId?: string(name='ProductId', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', example='1'),
      usbRuleType?: long(name='UsbRuleType', example='1'),
      vendorId?: string(name='VendorId', example='04**'),
    }
  ](name='UsbSupplyRedirectRule'),
  videoRedirect?: string(name='VideoRedirect', example='on'),
  visualQuality?: string(name='VisualQuality', example='low'),
  watermark?: string(name='Watermark', example='off'),
  watermarkColor?: int32(name='WatermarkColor', example='0'),
  watermarkDegree?: double(name='WatermarkDegree', example='-10'),
  watermarkFontSize?: int32(name='WatermarkFontSize', example='10'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', example='plain'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', example='3'),
  watermarkTransparency?: string(name='WatermarkTransparency', example='LIGHT'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', example='10'),
  watermarkType?: string(name='WatermarkType', example='EndUserId'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyGroupResponseBody(name='body'),
}

async function modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appContentProtection)) {
    query['AppContentProtection'] = request.appContentProtection;
  }
  if (!Util.isUnset(request.authorizeAccessPolicyRule)) {
    query['AuthorizeAccessPolicyRule'] = request.authorizeAccessPolicyRule;
  }
  if (!Util.isUnset(request.authorizeSecurityPolicyRule)) {
    query['AuthorizeSecurityPolicyRule'] = request.authorizeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.cameraRedirect)) {
    query['CameraRedirect'] = request.cameraRedirect;
  }
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.clipboard)) {
    query['Clipboard'] = request.clipboard;
  }
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.endUserApplyAdminCoordinate)) {
    query['EndUserApplyAdminCoordinate'] = request.endUserApplyAdminCoordinate;
  }
  if (!Util.isUnset(request.endUserGroupCoordinate)) {
    query['EndUserGroupCoordinate'] = request.endUserGroupCoordinate;
  }
  if (!Util.isUnset(request.gpuAcceleration)) {
    query['GpuAcceleration'] = request.gpuAcceleration;
  }
  if (!Util.isUnset(request.html5Access)) {
    query['Html5Access'] = request.html5Access;
  }
  if (!Util.isUnset(request.html5FileTransfer)) {
    query['Html5FileTransfer'] = request.html5FileTransfer;
  }
  if (!Util.isUnset(request.internetCommunicationProtocol)) {
    query['InternetCommunicationProtocol'] = request.internetCommunicationProtocol;
  }
  if (!Util.isUnset(request.localDrive)) {
    query['LocalDrive'] = request.localDrive;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.netRedirect)) {
    query['NetRedirect'] = request.netRedirect;
  }
  if (!Util.isUnset(request.policyGroupId)) {
    query['PolicyGroupId'] = request.policyGroupId;
  }
  if (!Util.isUnset(request.preemptLogin)) {
    query['PreemptLogin'] = request.preemptLogin;
  }
  if (!Util.isUnset(request.preemptLoginUser)) {
    query['PreemptLoginUser'] = request.preemptLoginUser;
  }
  if (!Util.isUnset(request.printerRedirection)) {
    query['PrinterRedirection'] = request.printerRedirection;
  }
  if (!Util.isUnset(request.recordContent)) {
    query['RecordContent'] = request.recordContent;
  }
  if (!Util.isUnset(request.recordContentExpires)) {
    query['RecordContentExpires'] = request.recordContentExpires;
  }
  if (!Util.isUnset(request.recording)) {
    query['Recording'] = request.recording;
  }
  if (!Util.isUnset(request.recordingAudio)) {
    query['RecordingAudio'] = request.recordingAudio;
  }
  if (!Util.isUnset(request.recordingDuration)) {
    query['RecordingDuration'] = request.recordingDuration;
  }
  if (!Util.isUnset(request.recordingEndTime)) {
    query['RecordingEndTime'] = request.recordingEndTime;
  }
  if (!Util.isUnset(request.recordingExpires)) {
    query['RecordingExpires'] = request.recordingExpires;
  }
  if (!Util.isUnset(request.recordingFps)) {
    query['RecordingFps'] = request.recordingFps;
  }
  if (!Util.isUnset(request.recordingStartTime)) {
    query['RecordingStartTime'] = request.recordingStartTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteCoordinate)) {
    query['RemoteCoordinate'] = request.remoteCoordinate;
  }
  if (!Util.isUnset(request.revokeAccessPolicyRule)) {
    query['RevokeAccessPolicyRule'] = request.revokeAccessPolicyRule;
  }
  if (!Util.isUnset(request.revokeSecurityPolicyRule)) {
    query['RevokeSecurityPolicyRule'] = request.revokeSecurityPolicyRule;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.scopeValue)) {
    query['ScopeValue'] = request.scopeValue;
  }
  if (!Util.isUnset(request.usbRedirect)) {
    query['UsbRedirect'] = request.usbRedirect;
  }
  if (!Util.isUnset(request.usbSupplyRedirectRule)) {
    query['UsbSupplyRedirectRule'] = request.usbSupplyRedirectRule;
  }
  if (!Util.isUnset(request.videoRedirect)) {
    query['VideoRedirect'] = request.videoRedirect;
  }
  if (!Util.isUnset(request.visualQuality)) {
    query['VisualQuality'] = request.visualQuality;
  }
  if (!Util.isUnset(request.watermark)) {
    query['Watermark'] = request.watermark;
  }
  if (!Util.isUnset(request.watermarkColor)) {
    query['WatermarkColor'] = request.watermarkColor;
  }
  if (!Util.isUnset(request.watermarkDegree)) {
    query['WatermarkDegree'] = request.watermarkDegree;
  }
  if (!Util.isUnset(request.watermarkFontSize)) {
    query['WatermarkFontSize'] = request.watermarkFontSize;
  }
  if (!Util.isUnset(request.watermarkFontStyle)) {
    query['WatermarkFontStyle'] = request.watermarkFontStyle;
  }
  if (!Util.isUnset(request.watermarkRowAmount)) {
    query['WatermarkRowAmount'] = request.watermarkRowAmount;
  }
  if (!Util.isUnset(request.watermarkTransparency)) {
    query['WatermarkTransparency'] = request.watermarkTransparency;
  }
  if (!Util.isUnset(request.watermarkTransparencyValue)) {
    query['WatermarkTransparencyValue'] = request.watermarkTransparencyValue;
  }
  if (!Util.isUnset(request.watermarkType)) {
    query['WatermarkType'] = request.watermarkType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model ModifyUserEntitlementRequest {
  authorizeDesktopId?: [ string ](name='AuthorizeDesktopId', description='The ID of the request.'),
  endUserId?: [ string ](name='EndUserId', description='The ID of cloud desktop.'),
  regionId?: string(name='RegionId', description='The IDs of cloud desktops which you want to revoke permissions from regular users.', example='cn-hangzhou'),
  revokeDesktopId?: [ string ](name='RevokeDesktopId', description='ModifyUserEntitlement'),
}

model ModifyUserEntitlementResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserEntitlementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserEntitlementResponseBody(name='body'),
}

/**
  * The IDs of regular users.
  *
  * @param request ModifyUserEntitlementRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyUserEntitlementResponse
 */
async function modifyUserEntitlementWithOptions(request: ModifyUserEntitlementRequest, runtime: Util.RuntimeOptions): ModifyUserEntitlementResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authorizeDesktopId)) {
    query['AuthorizeDesktopId'] = request.authorizeDesktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.revokeDesktopId)) {
    query['RevokeDesktopId'] = request.revokeDesktopId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserEntitlement',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The IDs of regular users.
  *
  * @param request ModifyUserEntitlementRequest
  * @return ModifyUserEntitlementResponse
 */
async function modifyUserEntitlement(request: ModifyUserEntitlementRequest): ModifyUserEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserEntitlementWithOptions(request, runtime);
}

model ModifyUserToDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group that you want to assign to users.', example='dg-2i8qxpv6t1a03****'),
  newEndUserIds?: [ string ](name='NewEndUserIds', description='The IDs of the regular users to whom you want to grant the permissions on the cloud desktop.'),
  oldEndUserIds?: [ string ](name='OldEndUserIds', description='The IDs of the original regular users who have the permissions on the cloud desktop.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ModifyUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserToDesktopGroupResponseBody(name='body'),
}

async function modifyUserToDesktopGroupWithOptions(request: ModifyUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyUserToDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.newEndUserIds)) {
    query['NewEndUserIds'] = request.newEndUserIds;
  }
  if (!Util.isUnset(request.oldEndUserIds)) {
    query['OldEndUserIds'] = request.oldEndUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserToDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUserToDesktopGroup(request: ModifyUserToDesktopGroupRequest): ModifyUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserToDesktopGroupWithOptions(request, runtime);
}

model MoveCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-346063****'),
  conflictPolicy?: string(name='ConflictPolicy', description='The processing mode of files that have the same name.

Valid values:

*   <!-- -->

    refuse

    <!-- -->

    : If you want to create a file that uses the same name as an existing file in the cloud, the system denies your request and returns the details of the existing file.

    <!-- -->

*   <!-- -->

    auto_rename

    <!-- -->

    : If you want to create a file that uses the same name as an existing file in the cloud, the system renames the file that you want to create by appending the current time point.

    <!-- -->

*   <!-- -->

    ignore

    <!-- -->

    : The system allows you to create a file that uses the same name as an existing file in the cloud.

    <!-- -->

*   <!-- -->

    over_write

    <!-- -->

    : After you create a file that uses the same name as an existing file in the cloud, the new file overwrites the existing file.

    <!-- -->', example='ignore'),
  endUserId?: string(name='EndUserId', description='The user ID that you want to use to access the cloud disk.', example='user01'),
  fileId?: string(name='FileId', description='The ID of the file.', example='63f3257b68b018170b194d87b875512d108f****'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder that you want to move. If you want to remove the root folder, set the value to root.', example='6409848a6da91d6240604e7ba7337d85ba8a1****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model MoveCdsFileResponseBody = {
  code?: string(name='Code', description='The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  moveCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', description='The ID of the asynchronous task. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.', example='fe307518-825a-4c8b-a69c-958f0e8a****'),
    exist?: boolean(name='Exist', description='Indicates whether the file exists.

Valid values:

*   <!-- -->

    true

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='false'),
    fileId?: string(name='FileId', description='The ID of the file.', example='63636837e47e5a24a8a940218bef395c210e****'),
  }(name='MoveCdsFileModel', description='The response object when you move a file.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   <!-- -->

    true

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true'),
}

model MoveCdsFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveCdsFileResponseBody(name='body'),
}

async function moveCdsFileWithOptions(request: MoveCdsFileRequest, runtime: Util.RuntimeOptions): MoveCdsFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.conflictPolicy)) {
    query['ConflictPolicy'] = request.conflictPolicy;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveCdsFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveCdsFile(request: MoveCdsFileRequest): MoveCdsFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveCdsFileWithOptions(request, runtime);
}

model OperateVulsRequest {
  desktopId?: [ string ](name='DesktopId'),
  operateType?: string(name='OperateType', example='vul_fix'),
  precondition?: int32(name='Precondition', example='1'),
  reason?: string(name='Reason'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='sys'),
  vulName?: [ string ](name='VulName'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.precondition)) {
    query['Precondition'] = request.precondition;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVuls',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model RebootDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
  regionId?: string(name='RegionId', description='RebootDesktops', example='cn-hangzhou'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebootDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootDesktopsResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request RebootDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebootDesktopsResponse
 */
async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request RebootDesktopsRequest
  * @return RebootDesktopsResponse
 */
async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model RebuildDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop N. You can specify one or more cloud desktop IDs. Valid values of N: 1 to 20.', example='ecd-gx2x1dhsmucyy****'),
  imageId?: string(name='ImageId', description='The operation that you want to perform. Set the value to **RebuildDesktops**.', example='m-84mztzatmlnys****'),
  operateType?: string(name='OperateType', example='replace'),
  regionId?: string(name='RegionId', description='The ID of the new image.', example='cn-hangzhou'),
}

model RebuildDesktopsResponseBody = {
  rebuildResults?: [ 
    {
      code?: string(name='Code', example='IncorrectDesktopStatus'),
      desktopId?: string(name='DesktopId', example='ecd-gx2x1dhsmucyy****'),
      message?: string(name='Message', example='The current status of the desktop does not support this operation.'),
    }
  ](name='RebuildResults'),
  requestId?: string(name='RequestId', description='RebuildDesktops', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebuildDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebuildDesktopsResponseBody(name='body'),
}

/**
  * The error message. This parameter is not returned if the value of Code is success.
  *
  * @param request RebuildDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebuildDesktopsResponse
 */
async function rebuildDesktopsWithOptions(request: RebuildDesktopsRequest, runtime: Util.RuntimeOptions): RebuildDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebuildDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The error message. This parameter is not returned if the value of Code is success.
  *
  * @param request RebuildDesktopsRequest
  * @return RebuildDesktopsResponse
 */
async function rebuildDesktops(request: RebuildDesktopsRequest): RebuildDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildDesktopsWithOptions(request, runtime);
}

model RemoveFilePermissionRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', description='The user ID.', example='user01'),
  fileId?: string(name='FileId', description='The file ID. The ID is a unique identifier for the file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberList?: [ 
    {
      cdsIdentity?: {
        id?: string(name='Id', description='The user ID or group ID.', example='249dsfseee643h33g3dv****'),
        type?: string(name='Type', description='The object type.

Valid values:

*   IT_Group

    <!-- -->

    :

    <!-- -->

    group

    <!-- -->

*   IT_User

    <!-- -->

    :

    <!-- -->

    user

    <!-- -->', example='IT_User'),
      }(name='CdsIdentity', description='The permission information.'),
      roleId?: string(name='RoleId', description='The role ID. You can configure permissions on roles or actions. This parameter is used to specify the permissions on roles, which conflicts with the ActionList parameter. When you configure both the parameters, this parameter shall prevail.

Valid values:

*   SystemFileEditorWithoutShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files but cannot share files

    <!-- -->

*   SystemFileUploaderAndDownloaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload, download, and share files

    <!-- -->

*   SystemFileDownloader

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to download files

    <!-- -->

*   SystemFileEditorWithoutDelete

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files but cannot delete files

    <!-- -->

*   SystemFileOwner

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to collaborate with others

    <!-- -->

*   SystemFileDownloaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to download and share files

    <!-- -->

*   SystemFileUploaderAndViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to preview or upload files

    <!-- -->

*   SystemFileViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to preview files

    <!-- -->

*   SystemFileEditor

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files

    <!-- -->

*   SystemFileUploaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload or share files

    <!-- -->

*   SystemFileUploader

    <!-- -->

    :

    <!-- -->

    the role that has the permission to upload files

    <!-- -->

*   SystemFileUploaderAndDownloader

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload or download files

    <!-- -->

*   SystemFileMetaViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to view files

    <!-- -->', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList', description='The users that you want to authorize.'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model RemoveFilePermissionShrinkRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.', example='cn-hangzhou+cds-066224****'),
  endUserId?: string(name='EndUserId', description='The user ID.', example='user01'),
  fileId?: string(name='FileId', description='The file ID. The ID is a unique identifier for the file.', example='6333e553a133ce21e6f747cf948bb9ef95d7****'),
  memberListShrink?: string(name='MemberList', description='The users that you want to authorize.'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model RemoveFilePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model RemoveFilePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveFilePermissionResponseBody(name='body'),
}

async function removeFilePermissionWithOptions(tmpReq: RemoveFilePermissionRequest, runtime: Util.RuntimeOptions): RemoveFilePermissionResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveFilePermissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.memberList)) {
    request.memberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.memberList, 'MemberList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.cdsId)) {
    query['CdsId'] = request.cdsId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.memberListShrink)) {
    query['MemberList'] = request.memberListShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveFilePermission',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeFilePermission(request: RemoveFilePermissionRequest): RemoveFilePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeFilePermissionWithOptions(request, runtime);
}

model RemoveUserFromDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', example='dg-2i8qxpv6t1a03****'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds'),
  endUserIds?: [ string ](name='EndUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RemoveUserFromDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUserFromDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserFromDesktopGroupResponseBody(name='body'),
}

async function removeUserFromDesktopGroupWithOptions(request: RemoveUserFromDesktopGroupRequest, runtime: Util.RuntimeOptions): RemoveUserFromDesktopGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopGroupIds)) {
    query['DesktopGroupIds'] = request.desktopGroupIds;
  }
  if (!Util.isUnset(request.endUserIds)) {
    query['EndUserIds'] = request.endUserIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUserFromDesktopGroup',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUserFromDesktopGroup(request: RemoveUserFromDesktopGroupRequest): RemoveUserFromDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromDesktopGroupWithOptions(request, runtime);
}

model RenewDesktopsRequest {
  autoPay?: boolean(name='AutoPay', description='The ID of the request.', example='true'),
  desktopId?: [ string ](name='DesktopId', description='The operation that you want to perform. Set the value to RenewDesktops.', example='ecd-ia2zw38bi6cm7****'),
  period?: int32(name='Period', description='Specifies whether to enable automatic payment. Valid values:

*   true: enables automatic payment. Make sure that you have sufficient balance in your account. Otherwise, abnormal orders are generated.
*   false: generates the order with no payment made. You can log on to the EDS console and complete the payment based on the order number.

Default value: true.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The ID of cloud desktop N.

Only subscription cloud desktops can be renewed by calling this operation.', example='Month'),
  promotionId?: string(name='PromotionId', example='500030980150146'),
  regionId?: string(name='RegionId', description='The unit of the renewal duration specified by the Period parameter. Valid values:

*   Month
*   Year

Default value: Month.', example='cn-hangzhou'),
}

model RenewDesktopsResponseBody = {
  orderId?: string(name='OrderId', example='20844399755****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewDesktopsResponseBody(name='body'),
}

async function renewDesktopsWithOptions(request: RenewDesktopsRequest, runtime: Util.RuntimeOptions): RenewDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewDesktops(request: RenewDesktopsRequest): RenewDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDesktopsWithOptions(request, runtime);
}

model RenewNetworkPackagesRequest {
  autoPay?: boolean(name='AutoPay', example='true'),
  networkPackageId?: [ string ](name='NetworkPackageId'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  promotionId?: string(name='PromotionId', example='500038360030606'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RenewNetworkPackagesResponseBody = {
  orderId?: string(name='OrderId', example='214726268900640'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewNetworkPackagesResponseBody(name='body'),
}

async function renewNetworkPackagesWithOptions(request: RenewNetworkPackagesRequest, runtime: Util.RuntimeOptions): RenewNetworkPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.networkPackageId)) {
    query['NetworkPackageId'] = request.networkPackageId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewNetworkPackages',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewNetworkPackages(request: RenewNetworkPackagesRequest): RenewNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewNetworkPackagesWithOptions(request, runtime);
}

model ResetDesktopsRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.``', example='dg-07if7qsxoxkb6****'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 100 cloud desktop IDs.'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
  payType?: string(name='PayType', description='The billing method.

> This parameter is available only when you reset desktop groups. If you leave this parameter empty, all cloud desktops in the specified desktop group are reset, regardless of how the cloud desktops are billed.', example='PrePaid'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~436773~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resetType?: string(name='ResetType', description='The type of the disk that you want to reset.', example='1'),
}

model ResetDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDesktopsResponseBody(name='body'),
}

/**
  * > You can call this operation to reset only cloud desktops that are managed by a cloud desktop group. You cannot reset an independent cloud desktop.
  *
  * @param request ResetDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetDesktopsResponse
 */
async function resetDesktopsWithOptions(request: ResetDesktopsRequest, runtime: Util.RuntimeOptions): ResetDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call this operation to reset only cloud desktops that are managed by a cloud desktop group. You cannot reset an independent cloud desktop.
  *
  * @param request ResetDesktopsRequest
  * @return ResetDesktopsResponse
 */
async function resetDesktops(request: ResetDesktopsRequest): ResetDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDesktopsWithOptions(request, runtime);
}

model ResetNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId', example='3a6ef4****'),
  regionId?: string(name='RegionId', description='The ID of the NAS file system.', example='cn-hangzhou'),
}

model ResetNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request ResetNASDefaultMountTargetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetNASDefaultMountTargetResponse
 */
async function resetNASDefaultMountTargetWithOptions(request: ResetNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ResetNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetNASDefaultMountTarget',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request ResetNASDefaultMountTargetRequest
  * @return ResetNASDefaultMountTargetResponse
 */
async function resetNASDefaultMountTarget(request: ResetNASDefaultMountTargetRequest): ResetNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetNASDefaultMountTargetWithOptions(request, runtime);
}

model ResetSnapshotRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hzngahou'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2zeipxmnhej803x7****'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetSnapshotResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the following operations are performed:
  * *   The data that you want to retain in the disk is backed up.
  *     **
  *     **Note**The disk restoration operation is irreversible. After you restore data on a disk, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore a disk from a snapshot, make sure that you back up important data.
  * *   The cloud desktop whose disk you want to restore is stopped.
  *
  * @param request ResetSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetSnapshotResponse
 */
async function resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: Util.RuntimeOptions): ResetSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSnapshot',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that the following operations are performed:
  * *   The data that you want to retain in the disk is backed up.
  *     **
  *     **Note**The disk restoration operation is irreversible. After you restore data on a disk, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore a disk from a snapshot, make sure that you back up important data.
  * *   The cloud desktop whose disk you want to restore is stopped.
  *
  * @param request ResetSnapshotRequest
  * @return ResetSnapshotResponse
 */
async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSnapshotWithOptions(request, runtime);
}

model RevokeCoordinatePrivilegeRequest {
  coId?: string(name='CoId', description='The ID of the stream coordination task.', example='co-fqsm6e8ee75w61fp9'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='zhangsan'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
  userType?: string(name='UserType', description='The type of user who requires the coordinate permissions.

Set the value to TENANT_ADMIN. Only tenant administrators can be granted with the coordinate permissions.', example='TENANT_ADMIN'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='C78CA9E99315687575DD2844C1F3****'),
}

model RevokeCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RevokeCoordinatePrivilegeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeCoordinatePrivilegeResponseBody(name='body'),
}

async function revokeCoordinatePrivilegeWithOptions(request: RevokeCoordinatePrivilegeRequest, runtime: Util.RuntimeOptions): RevokeCoordinatePrivilegeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coId)) {
    query['CoId'] = request.coId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeCoordinatePrivilege',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeCoordinatePrivilege(request: RevokeCoordinatePrivilegeRequest): RevokeCoordinatePrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeCoordinatePrivilegeWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  desktopId?: string(name='DesktopId', example='ecd-138dsptkrt00u****'),
  quaraFieldId?: int32(name='QuaraFieldId', description='The ID of the quarantined file.

You can call the [DescribeSuspEventQuaraFiles](~~217947~~) operation to obtain the ID of the quarantined file.', example='3921797'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to RollbackSuspEventQuaraFile.', example='cn-hangzhou'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

/**
  * The ID of the region.
  *
  * @param request RollbackSuspEventQuaraFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RollbackSuspEventQuaraFileResponse
 */
async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.quaraFieldId)) {
    query['QuaraFieldId'] = request.quaraFieldId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackSuspEventQuaraFile',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the region.
  *
  * @param request RollbackSuspEventQuaraFileRequest
  * @return RollbackSuspEventQuaraFileResponse
 */
async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent', description='The content of the command. The command content can be plaintext or Base64-encoded.\\
The Base64-encoded command content cannot exceed 16 KB in size.

> If the command content is Base64-encoded, you must set the ContentEncoding parameter to Base64.', example='ipconfig'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content. Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is Base64-encoded.

Default value: PlainText. If the specified value of this parameter is invalid, PlainText is used by default.', example='Base64'),
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop N. Valid values of N: 1 to 50.\\
If multiple cloud desktops are specified and the command execution succeeds on at least one of the cloud desktops, the operation is considered successful. If multiple cloud desktops are specified and the command execution fails on all the cloud desktops, verify the value of the parameter and try again.'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='User1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  timeout?: long(name='Timeout', description='The timeout period for the command to run. Unit: seconds. Default value: 60.\\
A timeout error occurs if the command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When a timeout error occurs, the command process is forcibly terminated.', example='3600'),
  type?: string(name='Type', description='The language of the O\\&M command. Valid values:

*   RunBatScript
*   RunPowerShellScript', example='RunPowerShellScript'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The ID of the command execution.', example='t-hz01qgsqj2n****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.endUserId)) {
    query['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model SendVerifyCodeRequest {
  extraInfo?: string(name='ExtraInfo', description='The information in JSON format that is required for sending the verification code. To verify the security of CEN, you must provide the ID of the CEN instance and the ID of the Alibaba Cloud account to which the instance belongs.

*   CenId: the ID of the CEN instance
*   CenOwnerId: the ID of the Alibaba Cloud account to which the CEN instance belongs.

Note: If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to the Alibaba Cloud account, skip this parameter. If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the exact Alibaba Cloud account. Example: {"cenOwnerId": 1234567890\\*\\*\\*\\*\\*\\*,"cenId": "cen-3weq30r6t0s7t4\\*\\*\\*\\*"}.', example='{"cenOwnerId": 1234567890******,"cenId": "cen-3weq30r6t0s7t4****"}'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  verifyCodeAction?: string(name='VerifyCodeAction', description='The action that indicates what the verification code is used for. The parameter is only used to verify the security of CEN. Valid value: eds_cenID_securityverification.', example='eds_cenID_securityverification'),
}

model SendVerifyCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SendVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerifyCodeResponseBody(name='body'),
}

/**
  * ## Description
  * When you attach your workspace network to a Cloud Enterprise Network (CEN) instance in another Alibaba Cloud account, you need to call this operation to obtain a verification code. After the call is successful, the system sends a verification code to the email address associated with the Alibaba Cloud account.
  *
  * @param request SendVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendVerifyCodeResponse
 */
async function sendVerifyCodeWithOptions(request: SendVerifyCodeRequest, runtime: Util.RuntimeOptions): SendVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCodeAction)) {
    query['VerifyCodeAction'] = request.verifyCodeAction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerifyCode',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you attach your workspace network to a Cloud Enterprise Network (CEN) instance in another Alibaba Cloud account, you need to call this operation to obtain a verification code. After the call is successful, the system sends a verification code to the email address associated with the Alibaba Cloud account.
  *
  * @param request SendVerifyCodeRequest
  * @return SendVerifyCodeResponse
 */
async function sendVerifyCode(request: SendVerifyCodeRequest): SendVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerifyCodeWithOptions(request, runtime);
}

model SetDesktopGroupScaleTimerRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  scaleTimerInfos?: [ 
    {
      buyResAmount?: int32(name='BuyResAmount', description='The number of cloud desktops that you want to create in the desktop group. Valid values: 0 to 200. You must configure this parameter for the scaling policy.', example='5'),
      cron?: string(name='Cron', description='The CRON expression that is used when an auto scaling task is triggered.', example='0 0 12 ? * 1'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration after the cloud desktop is disconnected. Unit: milliseconds.', example='1000'),
      loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy of the multi-session desktop group.', example='0'),
      maxResAmount?: int32(name='MaxResAmount', description='The maximum number of cloud desktops in the workspace after scaling. Valid values: 0 to 200. You must configure this parameter for the scaling policy.', example='100'),
      minResAmount?: int32(name='MinResAmount', description='The minimum number of cloud desktops that can be connected. Valid values: 0 to 200.', example='5'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions supported by each cloud desktop) × 100%`. When the ratio of connected sessions is greater than the specified threshold, desktop scale-out is automatically triggered. When the ratio of connected sessions is smaller than the specified threshold, desktop scale-in is automatically triggered under a specific condition.', example='0.9'),
      type?: string(name='Type', description='The type of the policy.', example='rise'),
    }
  ](name='ScaleTimerInfos', description='The information about the scheduled auto scaling tasks.'),
}

model SetDesktopGroupScaleTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDesktopGroupScaleTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupScaleTimerResponseBody(name='body'),
}

async function setDesktopGroupScaleTimerWithOptions(request: SetDesktopGroupScaleTimerRequest, runtime: Util.RuntimeOptions): SetDesktopGroupScaleTimerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scaleTimerInfos)) {
    query['ScaleTimerInfos'] = request.scaleTimerInfos;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupScaleTimer',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupScaleTimer(request: SetDesktopGroupScaleTimerRequest): SetDesktopGroupScaleTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupScaleTimerWithOptions(request, runtime);
}

model SetDesktopGroupTimerRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression for the scheduled task.', example='0 0 2 ? * 1-7'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-dbdkfmh883****'),
  force?: boolean(name='Force', description='Specifies whether to forcefully execute the scheduled task.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resetType?: int32(name='ResetType', description='The type of the disk that you want to reset.', example='1'),
  timerType?: int32(name='TimerType', description='The type of the scheduled task. Valid values:', example='1'),
}

model SetDesktopGroupTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='388CF76E-FFB3-5174-9F91-CDD****'),
}

model SetDesktopGroupTimerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupTimerResponseBody(name='body'),
}

async function setDesktopGroupTimerWithOptions(request: SetDesktopGroupTimerRequest, runtime: Util.RuntimeOptions): SetDesktopGroupTimerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cronExpression)) {
    query['CronExpression'] = request.cronExpression;
  }
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resetType)) {
    query['ResetType'] = request.resetType;
  }
  if (!Util.isUnset(request.timerType)) {
    query['TimerType'] = request.timerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupTimer',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupTimer(request: SetDesktopGroupTimerRequest): SetDesktopGroupTimerResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupTimerWithOptions(request, runtime);
}

model SetDesktopGroupTimerStatusRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-fgxsniu6at****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  status?: int32(name='Status', description='The status of the scheduled task.', example='1'),
  timerType?: int32(name='TimerType', description='The type of the scheduled task.', example='1'),
}

model SetDesktopGroupTimerStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC7912E7-8BDF-547F-BCAC****'),
}

model SetDesktopGroupTimerStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDesktopGroupTimerStatusResponseBody(name='body'),
}

async function setDesktopGroupTimerStatusWithOptions(request: SetDesktopGroupTimerStatusRequest, runtime: Util.RuntimeOptions): SetDesktopGroupTimerStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.timerType)) {
    query['TimerType'] = request.timerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDesktopGroupTimerStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDesktopGroupTimerStatus(request: SetDesktopGroupTimerStatusRequest): SetDesktopGroupTimerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDesktopGroupTimerStatusWithOptions(request, runtime);
}

model SetDirectorySsoStatusRequest {
  directoryId?: string(name='DirectoryId', description='The AD directory ID.', example='cn-hangzhou+dir-h95efs1mbukd9****'),
  enableSso?: boolean(name='EnableSso', description='Specifies whether to enable SSO. Valid values:

*   true: enables SSO.
*   false: disables SSO.', example='true'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model SetDirectorySsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDirectorySsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDirectorySsoStatusResponseBody(name='body'),
}

/**
  * This operation is supported only for AD directories, not for RAM directories.
  *
  * @param request SetDirectorySsoStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDirectorySsoStatusResponse
 */
async function setDirectorySsoStatusWithOptions(request: SetDirectorySsoStatusRequest, runtime: Util.RuntimeOptions): SetDirectorySsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.enableSso)) {
    query['EnableSso'] = request.enableSso;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDirectorySsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is supported only for AD directories, not for RAM directories.
  *
  * @param request SetDirectorySsoStatusRequest
  * @return SetDirectorySsoStatusResponse
 */
async function setDirectorySsoStatus(request: SetDirectorySsoStatusRequest): SetDirectorySsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirectorySsoStatusWithOptions(request, runtime);
}

model SetIdpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.', example='cn-hangzhou+dir-400695****'),
  idpMetadata?: string(name='IdpMetadata', description='The metadata of the IdP.', example='&lt;EntityDescriptor ID********Descriptor&gt;'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-400695****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model SetIdpMetadataResponseBody = {
  idpEntityId?: string(name='IdpEntityId', description='The entity ID obtained after the IdP metadata file is parsed.', example='http://test****.cn/adfs/services/trust'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetIdpMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetIdpMetadataResponseBody(name='body'),
}

/**
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  *
  * @param request SetIdpMetadataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetIdpMetadataResponse
 */
async function setIdpMetadataWithOptions(request: SetIdpMetadataRequest, runtime: Util.RuntimeOptions): SetIdpMetadataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directoryId)) {
    query['DirectoryId'] = request.directoryId;
  }
  if (!Util.isUnset(request.idpMetadata)) {
    query['IdpMetadata'] = request.idpMetadata;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetIdpMetadata',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  *
  * @param request SetIdpMetadataRequest
  * @return SetIdpMetadataResponse
 */
async function setIdpMetadata(request: SetIdpMetadataRequest): SetIdpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIdpMetadataWithOptions(request, runtime);
}

model SetOfficeSiteSsoStatusRequest {
  enableSso?: boolean(name='EnableSso', description='Specifies whether to enable SSO.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~196646~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model SetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function setOfficeSiteSsoStatusWithOptions(request: SetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): SetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableSso)) {
    query['EnableSso'] = request.enableSso;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetOfficeSiteSsoStatus',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setOfficeSiteSsoStatus(request: SetOfficeSiteSsoStatusRequest): SetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOfficeSiteSsoStatusWithOptions(request, runtime);
}

model SetUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  userProfilePathRule?: [ 
    {
      blackPath?: {
        path?: string(name='Path', description='The blacklist path.', example='AppLocal/Data'),
        type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='folder'),
      }(name='BlackPath', description='The directory in the blacklist.'),
      whitePaths?: [ 
        {
          path?: string(name='Path', description='The whitelist path.', example='whitePath'),
          type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
        }
      ](name='WhitePaths', description='The directories that you want to configure in the whitelist.'),
    }
  ](name='UserProfilePathRule', description='The directories that you want to configure in the blacklist and whitelist.'),
  userProfileRuleType?: string(name='UserProfileRuleType', description='The directory type that you want to configure.

Valid values:

*   Both_Default_DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='DesktopGroup'),
}

model SetUserProfilePathRulesShrinkRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  userProfilePathRuleShrink?: string(name='UserProfilePathRule', description='The directories that you want to configure in the blacklist and whitelist.'),
  userProfileRuleType?: string(name='UserProfileRuleType', description='The directory type that you want to configure.

Valid values:

*   Both_Default_DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='DesktopGroup'),
}

model SetUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserProfilePathRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserProfilePathRulesResponseBody(name='body'),
}

async function setUserProfilePathRulesWithOptions(tmpReq: SetUserProfilePathRulesRequest, runtime: Util.RuntimeOptions): SetUserProfilePathRulesResponse {
  Util.validateModel(tmpReq);
  var request = new SetUserProfilePathRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userProfilePathRule)) {
    request.userProfilePathRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userProfilePathRule, 'UserProfilePathRule', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.desktopGroupId)) {
    query['DesktopGroupId'] = request.desktopGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.userProfilePathRuleShrink)) {
    query['UserProfilePathRule'] = request.userProfilePathRuleShrink;
  }
  if (!Util.isUnset(request.userProfileRuleType)) {
    query['UserProfileRuleType'] = request.userProfileRuleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetUserProfilePathRules',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setUserProfilePathRules(request: SetUserProfilePathRulesRequest): SetUserProfilePathRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUserProfilePathRulesWithOptions(request, runtime);
}

model StartDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', description='StartDesktops', example='ecd-7w78ozhjcwa3u****'),
  regionId?: string(name='RegionId', description='The IDs of the cloud desktops. You can specify up to 100 IDs.', example='cn-hangzhou'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDesktopsResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request StartDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartDesktopsResponse
 */
async function startDesktopsWithOptions(request: StartDesktopsRequest, runtime: Util.RuntimeOptions): StartDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request StartDesktopsRequest
  * @return StartDesktopsResponse
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDesktopsWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  desktopId?: [ string ](name='DesktopId', example='ecd-138dsptkrt00u****'),
  officeSiteId?: [ string ](name='OfficeSiteId', example='cn-hangzhou+dir-363353****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='9C638DCB-E5A8-423E-9C3B-06BCBB564B11'),
  scanTaskId?: long(name='ScanTaskId', example='123456'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartVirusScanTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model StopDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', example='ecd-7w78ozhjcwa3u****'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to StopDesktops.', example='cn-hangzhou'),
  stoppedMode?: string(name='StoppedMode', description='StopDesktops', example='StopCharging'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopDesktopsResponseBody(name='body'),
}

/**
  * The billing mode after you stop the cloud desktop.
  * *   StopCharging: Computing resources are not billed after you stop the cloud desktop. After the cloud desktop is stopped, the system automatically reclaims computing resources. From this point on, you are no longer charged for computing resources. However, you are still charged for storage resources.
  * *   KeepCharging: The billing continues after you stop the cloud desktop. After the cloud desktop is stopped, the system does not reclaim resources to avoid startup failures due to insufficient resources. You are still charged for the resources.
  * Default value: StopCharging
  *
  * @param request StopDesktopsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopDesktopsResponse
 */
async function stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: Util.RuntimeOptions): StopDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.stoppedMode)) {
    query['StoppedMode'] = request.stoppedMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The billing mode after you stop the cloud desktop.
  * *   StopCharging: Computing resources are not billed after you stop the cloud desktop. After the cloud desktop is stopped, the system automatically reclaims computing resources. From this point on, you are no longer charged for computing resources. However, you are still charged for storage resources.
  * *   KeepCharging: The billing continues after you stop the cloud desktop. After the cloud desktop is stopped, the system does not reclaim resources to avoid startup failures due to insufficient resources. You are still charged for the resources.
  * Default value: StopCharging
  *
  * @param request StopDesktopsRequest
  * @return StopDesktopsResponse
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDesktopsWithOptions(request, runtime);
}

model StopInvocationRequest {
  desktopId?: [ string ](name='DesktopId', description='StopInvocation', example='ecd-7w78ozhjcwa3u****'),
  invokeId?: string(name='InvokeId', description='The operation that you want to perform. Set the value to StopInvocation.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInvocationResponseBody(name='body'),
}

/**
  * The ID of the execution.
  *
  * @param request StopInvocationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInvocationResponse
 */
async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInvocation',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the execution.
  *
  * @param request StopInvocationRequest
  * @return StopInvocationResponse
 */
async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', description='The IDs of the resources. You can specify 1 to 50 resource IDs.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the request.', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The tags. You can specify 1 to 20 tags.', example='ALIYUN::GWS::INSTANCE'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', description='The key of tag.

The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * The ID of the resource, which is the ID of the cloud desktop.
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the resource, which is the ID of the cloud desktop.
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnlockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](~~206210~~) operation to query the serial number of the virtual MFA device bound to AD users.', example='cn-hangzhou'),
  serialNumber?: string(name='SerialNumber', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
}

model UnlockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnlockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockVirtualMFADeviceResponseBody(name='body'),
}

async function unlockVirtualMFADeviceWithOptions(request: UnlockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): UnlockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serialNumber)) {
    query['SerialNumber'] = request.serialNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnlockVirtualMFADevice',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): UnlockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockVirtualMFADeviceWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='The operation that you want to perform. Set the value to UntagResources.', example='false'),
  regionId?: string(name='RegionId', description='The key of tag N. Valid values of N: 1 to 20.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='UntagResources', example='ecd-ia2zw38bi6cm7****'),
  resourceType?: string(name='ResourceType', description='The ID of the request.', example='ALIYUN::GWS::INSTANCE'),
  tagKey?: [ string ](name='TagKey', example='TestKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateFotaTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskUid?: string(name='TaskUid', example='aot-c4khwrp9ocml4****'),
  userStatus?: string(name='UserStatus', example='Pending'),
}

model UpdateFotaTaskResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateFotaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFotaTaskResponseBody(name='body'),
}

async function updateFotaTaskWithOptions(request: UpdateFotaTaskRequest, runtime: Util.RuntimeOptions): UpdateFotaTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskUid)) {
    query['TaskUid'] = request.taskUid;
  }
  if (!Util.isUnset(request.userStatus)) {
    query['UserStatus'] = request.userStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFotaTask',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFotaTask(request: UpdateFotaTaskRequest): UpdateFotaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFotaTaskWithOptions(request, runtime);
}

model UploadImageRequest {
  dataDiskSize?: int32(name='DataDiskSize', example='80'),
  description?: string(name='Description', example='test description'),
  enableSecurityCheck?: boolean(name='EnableSecurityCheck', example='true'),
  gpuCategory?: boolean(name='GpuCategory', example='true'),
  gpuDriverType?: string(name='GpuDriverType', example='gpu_grid9'),
  imageName?: string(name='ImageName', example='Win10_Test'),
  licenseType?: string(name='LicenseType', example='Auto'),
  osType?: string(name='OsType', example='Windows'),
  ossObjectPath?: string(name='OssObjectPath', example='https://ossbucket:endpoint/object'),
  protocolType?: string(name='ProtocolType', example='HDX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UploadImageResponseBody = {
  imageId?: string(name='ImageId', example='m-d4dwr5tgrgvd****'),
  requestId?: string(name='RequestId', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A****'),
}

model UploadImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadImageResponseBody(name='body'),
}

async function uploadImageWithOptions(request: UploadImageRequest, runtime: Util.RuntimeOptions): UploadImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDiskSize)) {
    query['DataDiskSize'] = request.dataDiskSize;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableSecurityCheck)) {
    query['EnableSecurityCheck'] = request.enableSecurityCheck;
  }
  if (!Util.isUnset(request.gpuCategory)) {
    query['GpuCategory'] = request.gpuCategory;
  }
  if (!Util.isUnset(request.gpuDriverType)) {
    query['GpuDriverType'] = request.gpuDriverType;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.licenseType)) {
    query['LicenseType'] = request.licenseType;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ossObjectPath)) {
    query['OssObjectPath'] = request.ossObjectPath;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadImage',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadImageWithOptions(request, runtime);
}

model VerifyCenRequest {
  cenId?: string(name='CenId', example='cen-3gwy16dojz1m65****'),
  cenOwnerId?: long(name='CenOwnerId', example='102681951715****'),
  cidrBlock?: string(name='CidrBlock', example='47.100.XX.XX'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  verifyCode?: string(name='VerifyCode', example='12****'),
}

model VerifyCenResponseBody = {
  cidrBlocks?: [ string ](name='CidrBlocks'),
  requestId?: string(name='RequestId', example='0AF9D857-AE96-53D6-B317-5DD665EC4EC0'),
  routeEntries?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='172.16.111.3****'),
      nextHopInstanceId?: string(name='NextHopInstanceId', example='vpc-uf62bu0xs5j8md54p****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Access'),
    }
  ](name='RouteEntries'),
  status?: string(name='Status', example='Access'),
}

model VerifyCenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCenResponseBody(name='body'),
}

async function verifyCenWithOptions(request: VerifyCenRequest, runtime: Util.RuntimeOptions): VerifyCenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.cenOwnerId)) {
    query['CenOwnerId'] = request.cenOwnerId;
  }
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCen',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCen(request: VerifyCenRequest): VerifyCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCenWithOptions(request, runtime);
}

model WakeupDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model WakeupDesktopsResponseBody = {
  requestId?: string(name='RequestId', example='6557DBA9-CF3E-5C1B-B1F1-68FDA599****'),
}

model WakeupDesktopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WakeupDesktopsResponseBody(name='body'),
}

async function wakeupDesktopsWithOptions(request: WakeupDesktopsRequest, runtime: Util.RuntimeOptions): WakeupDesktopsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desktopId)) {
    query['DesktopId'] = request.desktopId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WakeupDesktops',
    version = '2020-09-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function wakeupDesktops(request: WakeupDesktopsRequest): WakeupDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return wakeupDesktopsWithOptions(request, runtime);
}

