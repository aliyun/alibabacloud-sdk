/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActivateOfficeSiteRequest {
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ActivateOfficeSiteResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivateOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateOfficeSiteResponseBody(name='body'),
}

async function activateOfficeSiteWithOptions(request: ActivateOfficeSiteRequest, runtime: Util.RuntimeOptions): ActivateOfficeSiteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActivateOfficeSite', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function activateOfficeSite(request: ActivateOfficeSiteRequest): ActivateOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateOfficeSiteWithOptions(request, runtime);
}

model AddUserToDesktopGroupRequest {
  clientToken?: string(name='ClientToken'),
  desktopGroupId?: string(name='DesktopGroupId'),
  endUserIds?: [ string ](name='EndUserIds'),
  regionId?: string(name='RegionId'),
}

model AddUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToDesktopGroupResponseBody(name='body'),
}

async function addUserToDesktopGroupWithOptions(request: AddUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): AddUserToDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddUserToDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addUserToDesktopGroup(request: AddUserToDesktopGroupRequest): AddUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToDesktopGroupWithOptions(request, runtime);
}

model AddUserToSecurityCenterWhiteListRequest {
  regionId?: string(name='RegionId'),
}

model AddUserToSecurityCenterWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToSecurityCenterWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: AddUserToSecurityCenterWhiteListResponseBody(name='body'),
}

async function addUserToSecurityCenterWhiteListWithOptions(request: AddUserToSecurityCenterWhiteListRequest, runtime: Util.RuntimeOptions): AddUserToSecurityCenterWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddUserToSecurityCenterWhiteList', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addUserToSecurityCenterWhiteList(request: AddUserToSecurityCenterWhiteListRequest): AddUserToSecurityCenterWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserToSecurityCenterWhiteListWithOptions(request, runtime);
}

model AttachCenRequest {
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
  verifyCode?: string(name='VerifyCode'),
}

model AttachCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachCenResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCenResponseBody(name='body'),
}

async function attachCenWithOptions(request: AttachCenRequest, runtime: Util.RuntimeOptions): AttachCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachCen', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachCen(request: AttachCenRequest): AttachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCenWithOptions(request, runtime);
}

model CheckUserInSecurityCenterWhiteListRequest {
  regionId?: string(name='RegionId'),
}

model CheckUserInSecurityCenterWhiteListResponseBody = {
  inWhiteList?: boolean(name='InWhiteList'),
  requestId?: string(name='RequestId'),
}

model CheckUserInSecurityCenterWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUserInSecurityCenterWhiteListResponseBody(name='body'),
}

async function checkUserInSecurityCenterWhiteListWithOptions(request: CheckUserInSecurityCenterWhiteListRequest, runtime: Util.RuntimeOptions): CheckUserInSecurityCenterWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckUserInSecurityCenterWhiteList', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkUserInSecurityCenterWhiteList(request: CheckUserInSecurityCenterWhiteListRequest): CheckUserInSecurityCenterWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserInSecurityCenterWhiteListWithOptions(request, runtime);
}

model CheckUserTagsRequest {
  regionId?: string(name='RegionId'),
  tags?: [ string ](name='Tags'),
}

model CheckUserTagsResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUserTagsResponseBody(name='body'),
}

async function checkUserTagsWithOptions(request: CheckUserTagsRequest, runtime: Util.RuntimeOptions): CheckUserTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckUserTags', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkUserTags(request: CheckUserTagsRequest): CheckUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserTagsWithOptions(request, runtime);
}

model ClonePolicyGroupRequest {
  name?: string(name='Name'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
}

model ClonePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId'),
  requestId?: string(name='RequestId'),
}

model ClonePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ClonePolicyGroupResponseBody(name='body'),
}

async function clonePolicyGroupWithOptions(request: ClonePolicyGroupRequest, runtime: Util.RuntimeOptions): ClonePolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClonePolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clonePolicyGroup(request: ClonePolicyGroupRequest): ClonePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return clonePolicyGroupWithOptions(request, runtime);
}

model ConfigADConnectorTrustRequest {
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
  trustKey?: string(name='TrustKey'),
}

model ConfigADConnectorTrustResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigADConnectorTrustResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigADConnectorTrustResponseBody(name='body'),
}

async function configADConnectorTrustWithOptions(request: ConfigADConnectorTrustRequest, runtime: Util.RuntimeOptions): ConfigADConnectorTrustResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigADConnectorTrust', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configADConnectorTrust(request: ConfigADConnectorTrustRequest): ConfigADConnectorTrustResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorTrustWithOptions(request, runtime);
}

model ConfigADConnectorUserRequest {
  domainPassword?: string(name='DomainPassword'),
  domainUserName?: string(name='DomainUserName'),
  OUName?: string(name='OUName'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ConfigADConnectorUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigADConnectorUserResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigADConnectorUserResponseBody(name='body'),
}

async function configADConnectorUserWithOptions(request: ConfigADConnectorUserRequest, runtime: Util.RuntimeOptions): ConfigADConnectorUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigADConnectorUser', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configADConnectorUser(request: ConfigADConnectorUserRequest): ConfigADConnectorUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return configADConnectorUserWithOptions(request, runtime);
}

model CreateADConnectorDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType'),
  directoryName?: string(name='DirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress'),
  domainName?: string(name='DomainName'),
  domainPassword?: string(name='DomainPassword'),
  domainUserName?: string(name='DomainUserName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  mfaEnabled?: boolean(name='MfaEnabled'),
  regionId?: string(name='RegionId'),
  specification?: long(name='Specification'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
  subDomainName?: string(name='SubDomainName'),
  vSwitchId?: [ string ](name='VSwitchId'),
}

model CreateADConnectorDirectoryResponseBody = {
  adConnectors?: [ 
    {
      address?: string(name='Address'),
    }
  ](name='AdConnectors'),
  directoryId?: string(name='DirectoryId'),
  requestId?: string(name='RequestId'),
  trustPassword?: string(name='TrustPassword'),
}

model CreateADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateADConnectorDirectoryResponseBody(name='body'),
}

async function createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): CreateADConnectorDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateADConnectorDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorDirectoryWithOptions(request, runtime);
}

model CreateADConnectorOfficeSiteRequest {
  bandwidth?: int32(name='Bandwidth'),
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  cidrBlock?: string(name='CidrBlock'),
  desktopAccessType?: string(name='DesktopAccessType'),
  dnsAddress?: [ string ](name='DnsAddress'),
  domainName?: string(name='DomainName'),
  domainPassword?: string(name='DomainPassword'),
  domainUserName?: string(name='DomainUserName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  mfaEnabled?: boolean(name='MfaEnabled'),
  officeSiteName?: string(name='OfficeSiteName'),
  regionId?: string(name='RegionId'),
  specification?: long(name='Specification'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
  subDomainName?: string(name='SubDomainName'),
  type?: string(name='Type'),
  verifyCode?: string(name='VerifyCode'),
}

model CreateADConnectorOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId'),
  requestId?: string(name='RequestId'),
}

model CreateADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateADConnectorOfficeSiteResponseBody(name='body'),
}

async function createADConnectorOfficeSiteWithOptions(request: CreateADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateADConnectorOfficeSite', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createADConnectorOfficeSite(request: CreateADConnectorOfficeSiteRequest): CreateADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorOfficeSiteWithOptions(request, runtime);
}

model CreateBandwidthResourcePackagesRequest {
  amount?: int32(name='Amount'),
  autoPay?: boolean(name='AutoPay'),
  packageSize?: int32(name='PackageSize'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model CreateBandwidthResourcePackagesResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateBandwidthResourcePackagesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBandwidthResourcePackagesResponseBody(name='body'),
}

async function createBandwidthResourcePackagesWithOptions(request: CreateBandwidthResourcePackagesRequest, runtime: Util.RuntimeOptions): CreateBandwidthResourcePackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBandwidthResourcePackages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBandwidthResourcePackages(request: CreateBandwidthResourcePackagesRequest): CreateBandwidthResourcePackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBandwidthResourcePackagesWithOptions(request, runtime);
}

model CreateBundleRequest {
  bundleName?: string(name='BundleName'),
  description?: string(name='Description'),
  desktopType?: string(name='DesktopType'),
  imageId?: string(name='ImageId'),
  language?: string(name='Language'),
  regionId?: string(name='RegionId'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel'),
  userDiskSizeGib?: [ int32 ](name='UserDiskSizeGib'),
}

model CreateBundleResponseBody = {
  bundleId?: string(name='BundleId'),
  requestId?: string(name='RequestId'),
}

model CreateBundleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBundleResponseBody(name='body'),
}

async function createBundleWithOptions(request: CreateBundleRequest, runtime: Util.RuntimeOptions): CreateBundleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBundle', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBundleWithOptions(request, runtime);
}

model CreateCloudDriveServiceRequest {
  maxSize?: long(name='MaxSize'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
}

model CreateCloudDriveServiceResponseBody = {
  cdsId?: string(name='CdsId'),
  cdsName?: string(name='CdsName'),
  maxSize?: string(name='MaxSize'),
  requestId?: string(name='RequestId'),
}

model CreateCloudDriveServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudDriveServiceResponseBody(name='body'),
}

async function createCloudDriveServiceWithOptions(request: CreateCloudDriveServiceRequest, runtime: Util.RuntimeOptions): CreateCloudDriveServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCloudDriveService', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCloudDriveService(request: CreateCloudDriveServiceRequest): CreateCloudDriveServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudDriveServiceWithOptions(request, runtime);
}

model CreateDesktopGroupRequest {
  allowAutoSetup?: int32(name='AllowAutoSetup'),
  allowBufferCount?: int32(name='AllowBufferCount'),
  autoPay?: boolean(name='AutoPay'),
  bundleId?: string(name='BundleId'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  comments?: string(name='Comments'),
  defaultInitDesktopCount?: int32(name='DefaultInitDesktopCount'),
  desktopGroupName?: string(name='DesktopGroupName'),
  directoryId?: string(name='DirectoryId'),
  endUserIds?: [ string ](name='EndUserIds'),
  keepDuration?: long(name='KeepDuration'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount'),
  minDesktopsCount?: int32(name='MinDesktopsCount'),
  officeSiteId?: string(name='OfficeSiteId'),
  ownType?: int32(name='OwnType'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
  resetType?: long(name='ResetType'),
  scaleStrategyId?: string(name='ScaleStrategyId'),
  vpcId?: string(name='VpcId'),
}

model CreateDesktopGroupResponseBody = {
  desktopGroupId?: string(name='DesktopGroupId'),
  orderIds?: [ string ](name='OrderIds'),
  requestId?: string(name='RequestId'),
}

model CreateDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDesktopGroupResponseBody(name='body'),
}

async function createDesktopGroupWithOptions(request: CreateDesktopGroupRequest, runtime: Util.RuntimeOptions): CreateDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDesktopGroup(request: CreateDesktopGroupRequest): CreateDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopGroupWithOptions(request, runtime);
}

model CreateDesktopsRequest {
  amount?: int32(name='Amount'),
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  bundleId?: string(name='BundleId'),
  chargeType?: string(name='ChargeType'),
  desktopName?: string(name='DesktopName'),
  desktopNameSuffix?: boolean(name='DesktopNameSuffix'),
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
  groupId?: string(name='GroupId'),
  hostname?: string(name='Hostname'),
  officeSiteId?: string(name='OfficeSiteId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  policyGroupId?: string(name='PolicyGroupId'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  userAssignMode?: string(name='UserAssignMode'),
  userName?: string(name='UserName'),
  vpcId?: string(name='VpcId'),
}

model CreateDesktopsResponseBody = {
  desktopId?: [ string ](name='DesktopId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDesktopsResponseBody(name='body'),
}

async function createDesktopsWithOptions(request: CreateDesktopsRequest, runtime: Util.RuntimeOptions): CreateDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsWithOptions(request, runtime);
}

model CreateDesktopsLiteRequest {
  amount?: int32(name='Amount'),
  bandwidth?: int32(name='Bandwidth'),
  bundleId?: string(name='BundleId'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  endUserId?: [ string ](name='EndUserId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
  userAssignMode?: string(name='UserAssignMode'),
}

model CreateDesktopsLiteResponseBody = {
  desktopId?: [ string ](name='DesktopId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDesktopsLiteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDesktopsLiteResponseBody(name='body'),
}

async function createDesktopsLiteWithOptions(request: CreateDesktopsLiteRequest, runtime: Util.RuntimeOptions): CreateDesktopsLiteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDesktopsLite', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDesktopsLite(request: CreateDesktopsLiteRequest): CreateDesktopsLiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsLiteWithOptions(request, runtime);
}

model CreateImageRequest {
  description?: string(name='Description'),
  desktopId?: string(name='DesktopId'),
  imageName?: string(name='ImageName'),
  imageResourceType?: string(name='ImageResourceType'),
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
  snapshotIds?: [ string ](name='SnapshotIds'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImage', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateNASFileSystemRequest {
  description?: string(name='Description'),
  name?: string(name='Name'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
  storageType?: string(name='StorageType'),
}

model CreateNASFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId'),
  fileSystemName?: string(name='FileSystemName'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  officeSiteId?: string(name='OfficeSiteId'),
  requestId?: string(name='RequestId'),
}

model CreateNASFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNASFileSystemResponseBody(name='body'),
}

async function createNASFileSystemWithOptions(request: CreateNASFileSystemRequest, runtime: Util.RuntimeOptions): CreateNASFileSystemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNASFileSystem', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNASFileSystem(request: CreateNASFileSystemRequest): CreateNASFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNASFileSystemWithOptions(request, runtime);
}

model CreateNetworkPackageRequest {
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  bandwidth?: int32(name='Bandwidth'),
  internetChargeType?: string(name='InternetChargeType'),
  officeSiteId?: string(name='OfficeSiteId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model CreateNetworkPackageResponseBody = {
  networkPackageId?: string(name='NetworkPackageId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkPackageResponseBody(name='body'),
}

async function createNetworkPackageWithOptions(request: CreateNetworkPackageRequest, runtime: Util.RuntimeOptions): CreateNetworkPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNetworkPackage', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNetworkPackage(request: CreateNetworkPackageRequest): CreateNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkPackageWithOptions(request, runtime);
}

model CreateOrderForHardwareRequest {
  amount?: int32(name='Amount'),
  autoPay?: boolean(name='AutoPay'),
  cityCode?: string(name='CityCode'),
  cityName?: string(name='CityName'),
  contactName?: string(name='ContactName'),
  countryCode?: string(name='CountryCode'),
  countryName?: string(name='CountryName'),
  detailAddress?: string(name='DetailAddress'),
  districtCode?: string(name='DistrictCode'),
  districtName?: string(name='DistrictName'),
  email?: string(name='Email'),
  hardwareType?: string(name='HardwareType'),
  hardwareVersion?: string(name='HardwareVersion'),
  mobilePhone?: string(name='MobilePhone'),
  phone?: string(name='Phone'),
  promotionId?: string(name='PromotionId'),
  provCode?: string(name='ProvCode'),
  provName?: string(name='ProvName'),
  regionId?: string(name='RegionId'),
  streetCode?: string(name='StreetCode'),
  streetName?: string(name='StreetName'),
  zipCode?: string(name='ZipCode'),
}

model CreateOrderForHardwareResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateOrderForHardwareResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderForHardwareResponseBody(name='body'),
}

async function createOrderForHardwareWithOptions(request: CreateOrderForHardwareRequest, runtime: Util.RuntimeOptions): CreateOrderForHardwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrderForHardware', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrderForHardware(request: CreateOrderForHardwareRequest): CreateOrderForHardwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrderForHardwareWithOptions(request, runtime);
}

model CreatePolicyGroupRequest {
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
    }
  ](name='AuthorizeAccessPolicyRule'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
      ipProtocol?: string(name='IpProtocol'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      type?: string(name='Type'),
    }
  ](name='AuthorizeSecurityPolicyRule'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType'),
      status?: string(name='Status'),
    }
  ](name='ClientType'),
  clipboard?: string(name='Clipboard'),
  domainList?: string(name='DomainList'),
  gpuAcceleration?: string(name='GpuAcceleration'),
  html5Access?: string(name='Html5Access'),
  html5FileTransfer?: string(name='Html5FileTransfer'),
  localDrive?: string(name='LocalDrive'),
  name?: string(name='Name'),
  preemptLogin?: string(name='PreemptLogin'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser'),
  printerRedirection?: string(name='PrinterRedirection'),
  regionId?: string(name='RegionId'),
  usbRedirect?: string(name='UsbRedirect'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description'),
      deviceClass?: string(name='DeviceClass'),
      deviceSubclass?: string(name='DeviceSubclass'),
      productId?: string(name='ProductId'),
      usbRedirectType?: long(name='UsbRedirectType'),
      usbRuleType?: long(name='UsbRuleType'),
      vendorId?: string(name='VendorId'),
    }
  ](name='UsbSupplyRedirectRule'),
  visualQuality?: string(name='VisualQuality'),
  watermark?: string(name='Watermark'),
  watermarkCustomText?: string(name='WatermarkCustomText'),
  watermarkTransparency?: string(name='WatermarkTransparency'),
  watermarkType?: string(name='WatermarkType'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyGroupResponseBody(name='body'),
}

async function createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model CreateRAMDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType'),
  directoryName?: string(name='DirectoryName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  regionId?: string(name='RegionId'),
  vSwitchId?: [ string ](name='VSwitchId'),
}

model CreateRAMDirectoryResponseBody = {
  directoryId?: string(name='DirectoryId'),
  requestId?: string(name='RequestId'),
}

model CreateRAMDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRAMDirectoryResponseBody(name='body'),
}

async function createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: Util.RuntimeOptions): CreateRAMDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRAMDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRAMDirectoryWithOptions(request, runtime);
}

model CreateScaleStrategyRequest {
  clientToken?: string(name='ClientToken'),
  maxAvailableDesktopsCount?: int32(name='MaxAvailableDesktopsCount'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount'),
  minAvailableDesktopsCount?: int32(name='MinAvailableDesktopsCount'),
  minDesktopsCount?: int32(name='MinDesktopsCount'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  scaleStep?: int32(name='ScaleStep'),
  scaleStrategyName?: string(name='ScaleStrategyName'),
  scaleStrategyType?: string(name='ScaleStrategyType'),
}

model CreateScaleStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  scaleStrategyId?: string(name='ScaleStrategyId'),
}

model CreateScaleStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScaleStrategyResponseBody(name='body'),
}

async function createScaleStrategyWithOptions(request: CreateScaleStrategyRequest, runtime: Util.RuntimeOptions): CreateScaleStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateScaleStrategy', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createScaleStrategy(request: CreateScaleStrategyRequest): CreateScaleStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createScaleStrategyWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  regionId?: string(name='RegionId'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceLinkedRole', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CreateSimpleOfficeSiteRequest {
  bandwidth?: int32(name='Bandwidth'),
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  cidrBlock?: string(name='CidrBlock'),
  desktopAccessType?: string(name='DesktopAccessType'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  officeSiteName?: string(name='OfficeSiteName'),
  regionId?: string(name='RegionId'),
  vSwitchId?: [ string ](name='VSwitchId'),
  verifyCode?: string(name='VerifyCode'),
}

model CreateSimpleOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId'),
  requestId?: string(name='RequestId'),
}

model CreateSimpleOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimpleOfficeSiteResponseBody(name='body'),
}

async function createSimpleOfficeSiteWithOptions(request: CreateSimpleOfficeSiteRequest, runtime: Util.RuntimeOptions): CreateSimpleOfficeSiteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSimpleOfficeSite', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSimpleOfficeSite(request: CreateSimpleOfficeSiteRequest): CreateSimpleOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimpleOfficeSiteWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  description?: string(name='Description'),
  desktopId?: string(name='DesktopId'),
  regionId?: string(name='RegionId'),
  snapshotName?: string(name='SnapshotName'),
  sourceDiskType?: string(name='SourceDiskType'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteBundlesRequest {
  bundleId?: [ string ](name='BundleId'),
  regionId?: string(name='RegionId'),
}

model DeleteBundlesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBundlesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBundlesResponseBody(name='body'),
}

async function deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: Util.RuntimeOptions): DeleteBundlesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBundles', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBundlesWithOptions(request, runtime);
}

model DeleteCloudDriveServicesRequest {
  cdsId?: [ string ](name='CdsId'),
  regionId?: string(name='RegionId'),
}

model DeleteCloudDriveServicesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCloudDriveServicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCloudDriveServicesResponseBody(name='body'),
}

async function deleteCloudDriveServicesWithOptions(request: DeleteCloudDriveServicesRequest, runtime: Util.RuntimeOptions): DeleteCloudDriveServicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCloudDriveServices', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCloudDriveServices(request: DeleteCloudDriveServicesRequest): DeleteCloudDriveServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCloudDriveServicesWithOptions(request, runtime);
}

model DeleteDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDesktopGroupResponseBody(name='body'),
}

async function deleteDesktopGroupWithOptions(request: DeleteDesktopGroupRequest, runtime: Util.RuntimeOptions): DeleteDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDesktopGroup(request: DeleteDesktopGroupRequest): DeleteDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopGroupWithOptions(request, runtime);
}

model DeleteDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId'),
}

model DeleteDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDesktopsResponseBody(name='body'),
}

async function deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: Util.RuntimeOptions): DeleteDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopsWithOptions(request, runtime);
}

model DeleteDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId'),
  regionId?: string(name='RegionId'),
}

model DeleteDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectoriesResponseBody(name='body'),
}

async function deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: Util.RuntimeOptions): DeleteDirectoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDirectories', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoriesWithOptions(request, runtime);
}

model DeleteImagesRequest {
  imageId?: [ string ](name='ImageId'),
  regionId?: string(name='RegionId'),
}

model DeleteImagesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImagesResponseBody(name='body'),
}

async function deleteImagesWithOptions(request: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DeleteNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId'),
  regionId?: string(name='RegionId'),
}

model DeleteNASFileSystemsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNASFileSystemsResponseBody(name='body'),
}

async function deleteNASFileSystemsWithOptions(request: DeleteNASFileSystemsRequest, runtime: Util.RuntimeOptions): DeleteNASFileSystemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNASFileSystems', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNASFileSystems(request: DeleteNASFileSystemsRequest): DeleteNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNASFileSystemsWithOptions(request, runtime);
}

model DeleteNetworkPackagesRequest {
  networkPackageId?: [ string ](name='NetworkPackageId'),
  regionId?: string(name='RegionId'),
}

model DeleteNetworkPackagesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkPackagesResponseBody(name='body'),
}

async function deleteNetworkPackagesWithOptions(request: DeleteNetworkPackagesRequest, runtime: Util.RuntimeOptions): DeleteNetworkPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNetworkPackages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNetworkPackages(request: DeleteNetworkPackagesRequest): DeleteNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkPackagesWithOptions(request, runtime);
}

model DeleteOfficeSitesRequest {
  officeSiteId?: [ string ](name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model DeleteOfficeSitesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOfficeSitesResponseBody(name='body'),
}

async function deleteOfficeSitesWithOptions(request: DeleteOfficeSitesRequest, runtime: Util.RuntimeOptions): DeleteOfficeSitesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteOfficeSites', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteOfficeSites(request: DeleteOfficeSitesRequest): DeleteOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOfficeSitesWithOptions(request, runtime);
}

model DeletePolicyGroupsRequest {
  policyGroupId?: [ string ](name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
}

model DeletePolicyGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyGroupsResponseBody(name='body'),
}

async function deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePolicyGroups', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupsWithOptions(request, runtime);
}

model DeleteScaleStrategyRequest {
  regionId?: string(name='RegionId'),
  scaleStrategyId?: string(name='ScaleStrategyId'),
}

model DeleteScaleStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteScaleStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScaleStrategyResponseBody(name='body'),
}

async function deleteScaleStrategyWithOptions(request: DeleteScaleStrategyRequest, runtime: Util.RuntimeOptions): DeleteScaleStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteScaleStrategy', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteScaleStrategy(request: DeleteScaleStrategyRequest): DeleteScaleStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScaleStrategyWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  regionId?: string(name='RegionId'),
  snapshotId?: [ string ](name='SnapshotId'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

async function deleteVirtualMFADeviceWithOptions(request: DeleteVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): DeleteVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualMFADeviceWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  desktopId?: string(name='DesktopId'),
  eventName?: string(name='EventName'),
  lang?: string(name='Lang'),
  regionId?: string(name='RegionId'),
  uniqueInfo?: string(name='UniqueInfo'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId'),
  stackInfo?: string(name='StackInfo'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAlarmEventStackInfo', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeBundlesRequest {
  bundleId?: [ string ](name='BundleId'),
  bundleType?: string(name='BundleType'),
  checkStock?: boolean(name='CheckStock'),
  cpuCount?: int32(name='CpuCount'),
  desktopTypeFamily?: string(name='DesktopTypeFamily'),
  fromDesktopGroup?: boolean(name='FromDesktopGroup'),
  gpuCount?: float(name='GpuCount'),
  maxResults?: int32(name='MaxResults'),
  memorySize?: int32(name='MemorySize'),
  nextToken?: string(name='NextToken'),
  protocolType?: string(name='ProtocolType'),
  regionId?: string(name='RegionId'),
}

model DescribeBundlesResponseBody = {
  bundles?: [ 
    {
      bundleId?: string(name='BundleId'),
      bundleName?: string(name='BundleName'),
      bundleType?: string(name='BundleType'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      desktopType?: string(name='DesktopType'),
      desktopTypeAttribute?: {
        cpuCount?: int32(name='CpuCount'),
        gpuCount?: float(name='GpuCount'),
        gpuSpec?: string(name='GpuSpec'),
        memorySize?: int32(name='MemorySize'),
      }(name='DesktopTypeAttribute'),
      desktopTypeFamily?: string(name='DesktopTypeFamily'),
      disks?: [ 
        {
          diskPerformanceLevel?: string(name='DiskPerformanceLevel'),
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      imageId?: string(name='ImageId'),
      language?: string(name='Language'),
      osType?: string(name='OsType'),
      protocolType?: string(name='ProtocolType'),
      stockState?: string(name='StockState'),
    }
  ](name='Bundles'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeBundlesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBundlesResponseBody(name='body'),
}

async function describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: Util.RuntimeOptions): DescribeBundlesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBundles', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBundlesWithOptions(request, runtime);
}

model DescribeCensRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
}

model DescribeCensResponseBody = {
  cens?: [ 
    {
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      ipv6Level?: string(name='Ipv6Level'),
      name?: string(name='Name'),
      packageIds?: [ 
        {
          packageId?: string(name='PackageId'),
        }
      ](name='PackageIds'),
      protectionLevel?: string(name='ProtectionLevel'),
      status?: string(name='Status'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Cens'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCensWithOptions(request: DescribeCensRequest, runtime: Util.RuntimeOptions): DescribeCensResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCens', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCensWithOptions(request, runtime);
}

model DescribeClientEventsRequest {
  desktopId?: string(name='DesktopId'),
  desktopIp?: string(name='DesktopIp'),
  desktopName?: string(name='DesktopName'),
  directoryId?: string(name='DirectoryId'),
  endTime?: string(name='EndTime'),
  endUserId?: string(name='EndUserId'),
  eventType?: string(name='EventType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  officeSiteName?: string(name='OfficeSiteName'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeClientEventsResponseBody = {
  events?: [ 
    {
      aliUid?: string(name='AliUid'),
      bytesReceived?: string(name='BytesReceived'),
      bytesSend?: string(name='BytesSend'),
      clientIp?: string(name='ClientIp'),
      clientOS?: string(name='ClientOS'),
      clientVersion?: string(name='ClientVersion'),
      desktopId?: string(name='DesktopId'),
      desktopIp?: string(name='DesktopIp'),
      desktopName?: string(name='DesktopName'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      endUserId?: string(name='EndUserId'),
      eventId?: string(name='EventId'),
      eventTime?: string(name='EventTime'),
      eventType?: string(name='EventType'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      officeSiteType?: string(name='OfficeSiteType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='Events'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeClientEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientEventsResponseBody(name='body'),
}

async function describeClientEventsWithOptions(request: DescribeClientEventsRequest, runtime: Util.RuntimeOptions): DescribeClientEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClientEvents', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClientEvents(request: DescribeClientEventsRequest): DescribeClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientEventsWithOptions(request, runtime);
}

model DescribeCloudDriveServiceRequest {
  cdsIds?: [ string ](name='CdsIds'),
  isTokenNeeded?: boolean(name='IsTokenNeeded'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeCloudDriveServiceResponseBody = {
  cloudDriveServices?: [ 
    {
      aliUid?: long(name='AliUid'),
      cdsChargeStatus?: string(name='CdsChargeStatus'),
      cdsChargeType?: string(name='CdsChargeType'),
      cdsId?: string(name='CdsId'),
      cdsName?: string(name='CdsName'),
      cdsReleaseDeadline?: string(name='CdsReleaseDeadline'),
      cdsStatus?: string(name='CdsStatus'),
      createTime?: string(name='CreateTime'),
      maxSize?: long(name='MaxSize'),
      meteredSize?: long(name='MeteredSize'),
      pdsAdministrator?: string(name='PdsAdministrator'),
      pdsDomainId?: string(name='PdsDomainId'),
      pdsEndpoint?: string(name='PdsEndpoint'),
      pdsInitToken?: string(name='PdsInitToken'),
      pdsProductName?: string(name='PdsProductName'),
      pdsSubdomainId?: string(name='PdsSubdomainId'),
      pdsUrl?: string(name='PdsUrl'),
      regionId?: string(name='RegionId'),
    }
  ](name='CloudDriveServices'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeCloudDriveServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudDriveServiceResponseBody(name='body'),
}

async function describeCloudDriveServiceWithOptions(request: DescribeCloudDriveServiceRequest, runtime: Util.RuntimeOptions): DescribeCloudDriveServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCloudDriveService', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCloudDriveService(request: DescribeCloudDriveServiceRequest): DescribeCloudDriveServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDriveServiceWithOptions(request, runtime);
}

model DescribeDesktopGroupsRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  desktopGroupName?: string(name='DesktopGroupName'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
  status?: int32(name='Status'),
}

model DescribeDesktopGroupsResponseBody = {
  desktopGroups?: [ 
    {
      comments?: string(name='Comments'),
      cpu?: int32(name='Cpu'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      dataDiskCategory?: string(name='DataDiskCategory'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopGroupId?: string(name='DesktopGroupId'),
      desktopGroupName?: string(name='DesktopGroupName'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      endUserCount?: int32(name='EndUserCount'),
      expiredTime?: string(name='ExpiredTime'),
      gpuCount?: float(name='GpuCount'),
      gpuSpec?: string(name='GpuSpec'),
      keepDuration?: long(name='KeepDuration'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount'),
      memory?: long(name='Memory'),
      minDesktopsCount?: int32(name='MinDesktopsCount'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      officeSiteType?: string(name='OfficeSiteType'),
      ownBundleId?: string(name='OwnBundleId'),
      ownBundleName?: string(name='OwnBundleName'),
      payType?: string(name='PayType'),
      policyGroupId?: string(name='PolicyGroupId'),
      policyGroupName?: string(name='PolicyGroupName'),
      resetType?: long(name='ResetType'),
      status?: int32(name='Status'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='DesktopGroups'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopGroupsResponseBody(name='body'),
}

async function describeDesktopGroupsWithOptions(request: DescribeDesktopGroupsRequest, runtime: Util.RuntimeOptions): DescribeDesktopGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopGroups', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopGroups(request: DescribeDesktopGroupsRequest): DescribeDesktopGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopGroupsWithOptions(request, runtime);
}

model DescribeDesktopIdsByVulNamesRequest {
  necessity?: string(name='Necessity'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  vulName?: [ string ](name='VulName'),
}

model DescribeDesktopIdsByVulNamesResponseBody = {
  desktopItems?: [ 
    {
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
    }
  ](name='DesktopItems'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopIdsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopIdsByVulNamesResponseBody(name='body'),
}

async function describeDesktopIdsByVulNamesWithOptions(request: DescribeDesktopIdsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeDesktopIdsByVulNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopIdsByVulNames', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopIdsByVulNames(request: DescribeDesktopIdsByVulNamesRequest): DescribeDesktopIdsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopIdsByVulNamesWithOptions(request, runtime);
}

model DescribeDesktopTypesRequest {
  cpuCount?: int32(name='CpuCount'),
  desktopIdForModify?: string(name='DesktopIdForModify'),
  desktopTypeId?: string(name='DesktopTypeId'),
  gpuCount?: float(name='GpuCount'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  memorySize?: int32(name='MemorySize'),
  orderType?: string(name='OrderType'),
  regionId?: string(name='RegionId'),
}

model DescribeDesktopTypesResponseBody = {
  desktopTypes?: [ 
    {
      allowDiskSize?: [ 
        {
          dataDiskSize?: int32(name='DataDiskSize'),
          defaultDataDiskSize?: int32(name='DefaultDataDiskSize'),
          systemDiskSize?: int32(name='SystemDiskSize'),
        }
      ](name='AllowDiskSize'),
      cpuCount?: string(name='CpuCount'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopTypeId?: string(name='DesktopTypeId'),
      desktopTypeStatus?: string(name='DesktopTypeStatus'),
      gpuCount?: float(name='GpuCount'),
      gpuSpec?: string(name='GpuSpec'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      memorySize?: string(name='MemorySize'),
      systemDiskSize?: string(name='SystemDiskSize'),
    }
  ](name='DesktopTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopTypesResponseBody(name='body'),
}

async function describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: Util.RuntimeOptions): DescribeDesktopTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopTypes', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopTypesWithOptions(request, runtime);
}

model DescribeDesktopsRequest {
  chargeType?: string(name='ChargeType'),
  desktopId?: [ string ](name='DesktopId'),
  desktopName?: string(name='DesktopName'),
  desktopStatus?: string(name='DesktopStatus'),
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
  excludedEndUserId?: [ string ](name='ExcludedEndUserId'),
  expiredTime?: string(name='ExpiredTime'),
  filterDesktopGroup?: boolean(name='FilterDesktopGroup'),
  groupId?: string(name='GroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  policyGroupId?: string(name='PolicyGroupId'),
  protocolType?: string(name='ProtocolType'),
  regionId?: string(name='RegionId'),
  userName?: string(name='UserName'),
}

model DescribeDesktopsResponseBody = {
  desktops?: [ 
    {
      bundleId?: string(name='BundleId'),
      chargeType?: string(name='ChargeType'),
      connectionStatus?: string(name='ConnectionStatus'),
      cpu?: int32(name='Cpu'),
      creationTime?: string(name='CreationTime'),
      dataDiskCategory?: string(name='DataDiskCategory'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopGroupId?: string(name='DesktopGroupId'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      desktopStatus?: string(name='DesktopStatus'),
      desktopType?: string(name='DesktopType'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      disks?: [ 
        {
          diskId?: string(name='DiskId'),
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      downgradeQuota?: long(name='DowngradeQuota'),
      downgradedTimes?: long(name='DowngradedTimes'),
      endUserIds?: [ string ](name='EndUserIds'),
      expiredTime?: string(name='ExpiredTime'),
      gpuCategory?: long(name='GpuCategory'),
      gpuCount?: float(name='GpuCount'),
      gpuDriverVersion?: string(name='GpuDriverVersion'),
      gpuSpec?: string(name='GpuSpec'),
      hostName?: string(name='HostName'),
      imageId?: string(name='ImageId'),
      managementFlag?: string(name='ManagementFlag'),
      memory?: long(name='Memory'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      officeSiteType?: string(name='OfficeSiteType'),
      osType?: string(name='OsType'),
      policyGroupId?: string(name='PolicyGroupId'),
      policyGroupName?: string(name='PolicyGroupName'),
      protocolType?: string(name='ProtocolType'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId'),
          establishmentTime?: string(name='EstablishmentTime'),
        }
      ](name='Sessions'),
      startTime?: string(name='StartTime'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Desktops'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopsResponseBody(name='body'),
}

async function describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: Util.RuntimeOptions): DescribeDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsWithOptions(request, runtime);
}

model DescribeDesktopsInGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
}

model DescribeDesktopsInGroupResponseBody = {
  nextToken?: string(name='NextToken'),
  paidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      desktopStatus?: string(name='DesktopStatus'),
      endUserId?: string(name='EndUserId'),
      endUserName?: string(name='EndUserName'),
      managementFlag?: string(name='ManagementFlag'),
    }
  ](name='PaidDesktops'),
  paidDesktopsCount?: int32(name='PaidDesktopsCount'),
  postPaidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus'),
      createDuration?: string(name='CreateDuration'),
      createTime?: string(name='CreateTime'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      desktopStatus?: string(name='DesktopStatus'),
      endUserId?: string(name='EndUserId'),
      endUserName?: string(name='EndUserName'),
      managementFlag?: string(name='ManagementFlag'),
      releaseTime?: string(name='ReleaseTime'),
    }
  ](name='PostPaidDesktops'),
  postPaidDesktopsCount?: int32(name='PostPaidDesktopsCount'),
  postPaidDesktopsTotalAmount?: int32(name='PostPaidDesktopsTotalAmount'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopsInGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopsInGroupResponseBody(name='body'),
}

async function describeDesktopsInGroupWithOptions(request: DescribeDesktopsInGroupRequest, runtime: Util.RuntimeOptions): DescribeDesktopsInGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopsInGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopsInGroup(request: DescribeDesktopsInGroupRequest): DescribeDesktopsInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsInGroupWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId'),
  directoryStatus?: string(name='DirectoryStatus'),
  directoryType?: string(name='DirectoryType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress'),
          connectorStatus?: string(name='ConnectorStatus'),
          networkInterfaceId?: string(name='NetworkInterfaceId'),
          trustKey?: string(name='TrustKey'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='ADConnectors'),
      creationTime?: string(name='CreationTime'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId'),
      desktopAccessType?: string(name='DesktopAccessType'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      dnsAddress?: [ string ](name='DnsAddress'),
      dnsUserName?: string(name='DnsUserName'),
      domainName?: string(name='DomainName'),
      domainPassword?: string(name='DomainPassword'),
      domainUserName?: string(name='DomainUserName'),
      enableAdminAccess?: boolean(name='EnableAdminAccess'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess'),
      enableInternetAccess?: boolean(name='EnableInternetAccess'),
      fileSystemIds?: [ string ](name='FileSystemIds'),
      logs?: [ 
        {
          level?: string(name='Level'),
          message?: string(name='Message'),
          step?: string(name='Step'),
          timeStamp?: string(name='TimeStamp'),
        }
      ](name='Logs'),
      mfaEnabled?: boolean(name='MfaEnabled'),
      name?: string(name='Name'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk'),
      ouName?: string(name='OuName'),
      ssoEnabled?: boolean(name='SsoEnabled'),
      status?: string(name='Status'),
      subDnsAddress?: [ string ](name='SubDnsAddress'),
      subDomainName?: string(name='SubDomainName'),
      trustPassword?: string(name='TrustPassword'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Directories'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDirectories', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeFlowMetricRequest {
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  metricType?: string(name='MetricType'),
  period?: int32(name='Period'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
}

model DescribeFlowMetricResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeFlowMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowMetricResponseBody(name='body'),
}

async function describeFlowMetricWithOptions(request: DescribeFlowMetricRequest, runtime: Util.RuntimeOptions): DescribeFlowMetricResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFlowMetric', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFlowMetric(request: DescribeFlowMetricRequest): DescribeFlowMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowMetricWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  operateType?: string(name='OperateType'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId'),
      name?: string(name='Name'),
      tag?: string(name='Tag'),
    }
  ](name='VulInfo'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      desktopId?: string(name='DesktopId'),
      patchList?: [ 
        {
          aliasName?: string(name='AliasName'),
          name?: string(name='Name'),
        }
      ](name='PatchList'),
    }
  ](name='FrontPatchList'),
  requestId?: string(name='RequestId'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFrontVulPatchList', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  lang?: string(name='Lang'),
  necessity?: string(name='Necessity'),
  officeSiteId?: string(name='OfficeSiteId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName'),
      asapCount?: int32(name='AsapCount'),
      gmtLast?: string(name='GmtLast'),
      handledCount?: int32(name='HandledCount'),
      laterCount?: int32(name='LaterCount'),
      name?: string(name='Name'),
      nntfCount?: int32(name='NntfCount'),
      tags?: string(name='Tags'),
      type?: string(name='Type'),
    }
  ](name='GroupedVulItems'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGroupedVul', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeHardwareTerminalsRequest {
  hardwareType?: string(name='HardwareType'),
  hardwareVersion?: string(name='HardwareVersion'),
  regionId?: string(name='RegionId'),
}

model DescribeHardwareTerminalsResponseBody = {
  hardwareTerminals?: [ 
    {
      hardwareType?: string(name='HardwareType'),
      hardwareTypeDetails?: [ 
        {
          description?: string(name='Description'),
          hardwareVersion?: int32(name='HardwareVersion'),
          stockState?: string(name='StockState'),
        }
      ](name='HardwareTypeDetails'),
    }
  ](name='HardwareTerminals'),
  requestId?: string(name='RequestId'),
}

model DescribeHardwareTerminalsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHardwareTerminalsResponseBody(name='body'),
}

async function describeHardwareTerminalsWithOptions(request: DescribeHardwareTerminalsRequest, runtime: Util.RuntimeOptions): DescribeHardwareTerminalsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHardwareTerminals', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHardwareTerminals(request: DescribeHardwareTerminalsRequest): DescribeHardwareTerminalsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHardwareTerminalsWithOptions(request, runtime);
}

model DescribeImagesRequest {
  desktopInstanceType?: string(name='DesktopInstanceType'),
  gpuCategory?: boolean(name='GpuCategory'),
  gpuDriverVersion?: string(name='GpuDriverVersion'),
  imageId?: [ string ](name='ImageId'),
  imageStatus?: string(name='ImageStatus'),
  imageType?: string(name='ImageType'),
  languageType?: string(name='LanguageType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  osType?: string(name='OsType'),
  protocolType?: string(name='ProtocolType'),
  regionId?: string(name='RegionId'),
}

model DescribeImagesResponseBody = {
  images?: [ 
    {
      creationTime?: string(name='CreationTime'),
      dataDiskSize?: int32(name='DataDiskSize'),
      description?: string(name='Description'),
      gpuCategory?: boolean(name='GpuCategory'),
      gpuDriverVersion?: string(name='GpuDriverVersion'),
      imageId?: string(name='ImageId'),
      imageType?: string(name='ImageType'),
      name?: string(name='Name'),
      osType?: string(name='OsType'),
      progress?: string(name='Progress'),
      protocolType?: string(name='ProtocolType'),
      size?: int32(name='Size'),
      status?: string(name='Status'),
      supportedLanguages?: [ string ](name='SupportedLanguages'),
    }
  ](name='Images'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  commandType?: string(name='CommandType'),
  contentEncoding?: string(name='ContentEncoding'),
  desktopId?: string(name='DesktopId'),
  includeOutput?: boolean(name='IncludeOutput'),
  invokeId?: string(name='InvokeId'),
  invokeStatus?: string(name='InvokeStatus'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent'),
      commandType?: string(name='CommandType'),
      creationTime?: string(name='CreationTime'),
      invocationStatus?: string(name='InvocationStatus'),
      invokeDesktops?: [ 
        {
          creationTime?: string(name='CreationTime'),
          desktopId?: string(name='DesktopId'),
          dropped?: int32(name='Dropped'),
          errorCode?: string(name='ErrorCode'),
          errorInfo?: string(name='ErrorInfo'),
          exitCode?: long(name='ExitCode'),
          finishTime?: string(name='FinishTime'),
          invocationStatus?: string(name='InvocationStatus'),
          output?: string(name='Output'),
          repeats?: int32(name='Repeats'),
          startTime?: string(name='StartTime'),
          stopTime?: string(name='StopTime'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='InvokeDesktops'),
      invokeId?: string(name='InvokeId'),
    }
  ](name='Invocations'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInvocations', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeModificationPriceRequest {
  bandwidth?: int32(name='Bandwidth'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib'),
}

model DescribeModificationPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeModificationPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModificationPriceResponseBody(name='body'),
}

async function describeModificationPriceWithOptions(request: DescribeModificationPriceRequest, runtime: Util.RuntimeOptions): DescribeModificationPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeModificationPrice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeModificationPrice(request: DescribeModificationPriceRequest): DescribeModificationPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModificationPriceWithOptions(request, runtime);
}

model DescribeNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model DescribeNASFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      capacity?: long(name='Capacity'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemName?: string(name='FileSystemName'),
      fileSystemStatus?: string(name='FileSystemStatus'),
      fileSystemType?: string(name='FileSystemType'),
      meteredSize?: long(name='MeteredSize'),
      mountTargetDomain?: string(name='MountTargetDomain'),
      mountTargetStatus?: string(name='MountTargetStatus'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      regionId?: string(name='RegionId'),
      storageType?: string(name='StorageType'),
      supportAcl?: boolean(name='SupportAcl'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='FileSystems'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeNASFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNASFileSystemsResponseBody(name='body'),
}

async function describeNASFileSystemsWithOptions(request: DescribeNASFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeNASFileSystemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNASFileSystems', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNASFileSystems(request: DescribeNASFileSystemsRequest): DescribeNASFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNASFileSystemsWithOptions(request, runtime);
}

model DescribeNetworkPackagesRequest {
  internetChargeType?: string(name='InternetChargeType'),
  maxResults?: int32(name='MaxResults'),
  networkPackageId?: [ string ](name='NetworkPackageId'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeNetworkPackagesResponseBody = {
  networkPackages?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      createTime?: string(name='CreateTime'),
      eipAddresses?: [ string ](name='EipAddresses'),
      expiredTime?: string(name='ExpiredTime'),
      internetChargeType?: string(name='InternetChargeType'),
      networkPackageId?: string(name='NetworkPackageId'),
      networkPackageStatus?: string(name='NetworkPackageStatus'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
    }
  ](name='NetworkPackages'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkPackagesResponseBody(name='body'),
}

async function describeNetworkPackagesWithOptions(request: DescribeNetworkPackagesRequest, runtime: Util.RuntimeOptions): DescribeNetworkPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNetworkPackages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNetworkPackages(request: DescribeNetworkPackagesRequest): DescribeNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkPackagesWithOptions(request, runtime);
}

model DescribeOfficeSitesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: [ string ](name='OfficeSiteId'),
  officeSiteType?: string(name='OfficeSiteType'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
}

model DescribeOfficeSitesResponseBody = {
  nextToken?: string(name='NextToken'),
  officeSites?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress'),
          connectorStatus?: string(name='ConnectorStatus'),
          networkInterfaceId?: string(name='NetworkInterfaceId'),
          trustKey?: string(name='TrustKey'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='ADConnectors'),
      bandwidth?: int32(name='Bandwidth'),
      cenId?: string(name='CenId'),
      cidrBlock?: string(name='CidrBlock'),
      creationTime?: string(name='CreationTime'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId'),
      desktopAccessType?: string(name='DesktopAccessType'),
      desktopCount?: long(name='DesktopCount'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint'),
      dnsAddress?: [ string ](name='DnsAddress'),
      dnsUserName?: string(name='DnsUserName'),
      domainName?: string(name='DomainName'),
      domainPassword?: string(name='DomainPassword'),
      domainUserName?: string(name='DomainUserName'),
      enableAdminAccess?: boolean(name='EnableAdminAccess'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess'),
      enableInternetAccess?: boolean(name='EnableInternetAccess'),
      fileSystemIds?: [ string ](name='FileSystemIds'),
      logs?: [ 
        {
          level?: string(name='Level'),
          message?: string(name='Message'),
          step?: string(name='Step'),
          timeStamp?: string(name='TimeStamp'),
        }
      ](name='Logs'),
      mfaEnabled?: boolean(name='MfaEnabled'),
      name?: string(name='Name'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk'),
      networkPackageId?: string(name='NetworkPackageId'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteType?: string(name='OfficeSiteType'),
      ouName?: string(name='OuName'),
      ssoEnabled?: boolean(name='SsoEnabled'),
      status?: string(name='Status'),
      subDnsAddress?: [ string ](name='SubDnsAddress'),
      subDomainName?: string(name='SubDomainName'),
      trustPassword?: string(name='TrustPassword'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
    }
  ](name='OfficeSites'),
  requestId?: string(name='RequestId'),
}

model DescribeOfficeSitesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOfficeSitesResponseBody(name='body'),
}

async function describeOfficeSitesWithOptions(request: DescribeOfficeSitesRequest, runtime: Util.RuntimeOptions): DescribeOfficeSitesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOfficeSites', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfficeSitesWithOptions(request, runtime);
}

model DescribePolicyGroupsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policyGroupId?: [ string ](name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribePolicyGroupsResponseBody = {
  describePolicyGroups?: [ 
    {
      authorizeAccessPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp'),
          description?: string(name='Description'),
        }
      ](name='AuthorizeAccessPolicyRules'),
      authorizeSecurityPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp'),
          description?: string(name='Description'),
          ipProtocol?: string(name='IpProtocol'),
          policy?: string(name='Policy'),
          portRange?: string(name='PortRange'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
        }
      ](name='AuthorizeSecurityPolicyRules'),
      clientTypes?: [ 
        {
          clientType?: string(name='ClientType'),
          status?: string(name='Status'),
        }
      ](name='ClientTypes'),
      clipboard?: string(name='Clipboard'),
      domainList?: string(name='DomainList'),
      edsCount?: int32(name='EdsCount'),
      gpuAcceleration?: string(name='GpuAcceleration'),
      html5Access?: string(name='Html5Access'),
      html5FileTransfer?: string(name='Html5FileTransfer'),
      localDrive?: string(name='LocalDrive'),
      name?: string(name='Name'),
      policyGroupId?: string(name='PolicyGroupId'),
      policyGroupType?: string(name='PolicyGroupType'),
      policyStatus?: string(name='PolicyStatus'),
      preemptLogin?: string(name='PreemptLogin'),
      preemptLoginUsers?: [ string ](name='PreemptLoginUsers'),
      printerRedirection?: string(name='PrinterRedirection'),
      usbRedirect?: string(name='UsbRedirect'),
      usbSupplyRedirectRule?: [ 
        {
          description?: string(name='Description'),
          deviceClass?: string(name='DeviceClass'),
          deviceSubclass?: string(name='DeviceSubclass'),
          productId?: string(name='ProductId'),
          usbRedirectType?: long(name='UsbRedirectType'),
          usbRuleType?: long(name='UsbRuleType'),
          vendorId?: string(name='VendorId'),
        }
      ](name='UsbSupplyRedirectRule'),
      visualQuality?: string(name='VisualQuality'),
      watermark?: string(name='Watermark'),
      watermarkCustomText?: string(name='WatermarkCustomText'),
      watermarkTransparency?: string(name='WatermarkTransparency'),
      watermarkType?: string(name='WatermarkType'),
    }
  ](name='DescribePolicyGroups'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyGroupsResponseBody(name='body'),
}

async function describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: Util.RuntimeOptions): DescribePolicyGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyGroups', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyGroupsWithOptions(request, runtime);
}

model DescribePostPaidDesktopBillsRequest {
  billEndTime?: string(name='BillEndTime'),
  billStartTime?: string(name='BillStartTime'),
  desktopGroupId?: string(name='DesktopGroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribePostPaidDesktopBillsResponseBody = {
  bills?: [ 
    {
      billEndTime?: string(name='BillEndTime'),
      billId?: string(name='BillId'),
      billStartTime?: string(name='BillStartTime'),
      billType?: string(name='BillType'),
      cashPayment?: string(name='CashPayment'),
      chargeItem?: string(name='ChargeItem'),
      consumeTime?: string(name='ConsumeTime'),
      consumeType?: string(name='ConsumeType'),
      discountPrice?: string(name='DiscountPrice'),
      goldNote?: string(name='GoldNote'),
      instanceId?: string(name='InstanceId'),
      originalPrice?: string(name='OriginalPrice'),
      payment?: string(name='Payment'),
      price?: string(name='Price'),
      priceUnit?: string(name='PriceUnit'),
      product?: string(name='Product'),
      productDetail?: string(name='ProductDetail'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceGroupName?: string(name='ResourceGroupName'),
      usage?: string(name='Usage'),
      usageUnit?: string(name='UsageUnit'),
    }
  ](name='Bills'),
  nextToken?: string(name='NextToken'),
  postPaidDesktopsBillsUrl?: string(name='PostPaidDesktopsBillsUrl'),
  postPaidDesktopsCount?: int32(name='PostPaidDesktopsCount'),
  postPaidDesktopsTotalAmount?: float(name='PostPaidDesktopsTotalAmount'),
  requestId?: string(name='RequestId'),
}

model DescribePostPaidDesktopBillsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePostPaidDesktopBillsResponseBody(name='body'),
}

async function describePostPaidDesktopBillsWithOptions(request: DescribePostPaidDesktopBillsRequest, runtime: Util.RuntimeOptions): DescribePostPaidDesktopBillsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePostPaidDesktopBills', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePostPaidDesktopBills(request: DescribePostPaidDesktopBillsRequest): DescribePostPaidDesktopBillsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostPaidDesktopBillsWithOptions(request, runtime);
}

model DescribePriceRequest {
  amount?: int32(name='Amount'),
  bandwidth?: int32(name='Bandwidth'),
  hardwareVersion?: string(name='HardwareVersion'),
  instanceType?: string(name='InstanceType'),
  internetChargeType?: string(name='InternetChargeType'),
  osType?: string(name='OsType'),
  packageSize?: int32(name='PackageSize'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    freeCdsQuota?: boolean(name='FreeCdsQuota'),
    freeCdsSize?: long(name='FreeCdsSize'),
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest {
  instanceId?: string(name='InstanceId'),
  instanceIds?: [ string ](name='InstanceIds'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeRenewalPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRenewalPrice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribeResourcePackageQuotaRequest {
  regionId?: string(name='RegionId'),
}

model DescribeResourcePackageQuotaResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  usedCount?: int32(name='UsedCount'),
}

model DescribeResourcePackageQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackageQuotaResponseBody(name='body'),
}

async function describeResourcePackageQuotaWithOptions(request: DescribeResourcePackageQuotaRequest, runtime: Util.RuntimeOptions): DescribeResourcePackageQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcePackageQuota', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcePackageQuota(request: DescribeResourcePackageQuotaRequest): DescribeResourcePackageQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackageQuotaWithOptions(request, runtime);
}

model DescribeScaleStrategysRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  scaleStrategyName?: string(name='ScaleStrategyName'),
}

model DescribeScaleStrategysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  scaleStrategys?: [ 
    {
      maxAvailableDesktopsCount?: int32(name='MaxAvailableDesktopsCount'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount'),
      minAvailableDesktopsCount?: int32(name='MinAvailableDesktopsCount'),
      minDesktopsCount?: int32(name='MinDesktopsCount'),
      scaleStep?: int32(name='ScaleStep'),
      scaleStrategyId?: string(name='ScaleStrategyId'),
      scaleStrategyName?: string(name='ScaleStrategyName'),
      scaleStrategyType?: string(name='ScaleStrategyType'),
    }
  ](name='ScaleStrategys'),
}

model DescribeScaleStrategysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScaleStrategysResponseBody(name='body'),
}

async function describeScaleStrategysWithOptions(request: DescribeScaleStrategysRequest, runtime: Util.RuntimeOptions): DescribeScaleStrategysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScaleStrategys', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScaleStrategys(request: DescribeScaleStrategysRequest): DescribeScaleStrategysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScaleStrategysWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  regionId?: string(name='RegionId'),
  taskId?: long(name='TaskId'),
}

model DescribeScanTaskProgressResponseBody = {
  createTime?: string(name='CreateTime'),
  requestId?: string(name='RequestId'),
  taskStatus?: string(name='TaskStatus'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScanTaskProgress', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  regionId?: string(name='RegionId'),
  securityEventId?: [ string ](name='SecurityEventId'),
  taskId?: long(name='TaskId'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperationStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      securityEventId?: long(name='SecurityEventId'),
      status?: string(name='Status'),
    }
  ](name='SecurityEventOperationStatuses'),
  taskStatus?: string(name='TaskStatus'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityEventOperationStatus', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  regionId?: string(name='RegionId'),
  securityEventId?: long(name='SecurityEventId'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId'),
  securityEventOperations?: [ 
    {
      operationCode?: string(name='OperationCode'),
      operationParams?: string(name='OperationParams'),
      userCanOperate?: boolean(name='UserCanOperate'),
    }
  ](name='SecurityEventOperations'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityEventOperations', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  desktopId?: string(name='DesktopId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      desktopId?: string(name='DesktopId'),
      progress?: string(name='Progress'),
      remainTime?: int32(name='RemainTime'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      snapshotType?: string(name='SnapshotType'),
      sourceDiskSize?: string(name='SourceDiskSize'),
      sourceDiskType?: string(name='SourceDiskType'),
      status?: string(name='Status'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshots', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSuspEventOverviewRequest {
  regionId?: string(name='RegionId'),
}

model DescribeSuspEventOverviewResponseBody = {
  remindCount?: int32(name='RemindCount'),
  requestId?: string(name='RequestId'),
  seriousCount?: int32(name='SeriousCount'),
  suspiciousCount?: int32(name='SuspiciousCount'),
}

model DescribeSuspEventOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventOverviewResponseBody(name='body'),
}

async function describeSuspEventOverviewWithOptions(request: DescribeSuspEventOverviewRequest, runtime: Util.RuntimeOptions): DescribeSuspEventOverviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEventOverview', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEventOverview(request: DescribeSuspEventOverviewRequest): DescribeSuspEventOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventOverviewWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: int32(name='CurrentPage'),
  officeSiteId?: string(name='OfficeSiteId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  quaraFiles?: [ 
    {
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      eventName?: string(name='EventName'),
      eventType?: string(name='EventType'),
      id?: int32(name='Id'),
      md5?: string(name='Md5'),
      modifyTime?: string(name='ModifyTime'),
      path?: string(name='Path'),
      status?: string(name='Status'),
      tag?: string(name='Tag'),
    }
  ](name='QuaraFiles'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEventQuaraFiles', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  lang?: string(name='Lang'),
  levels?: string(name='Levels'),
  officeSiteId?: string(name='OfficeSiteId'),
  pageSize?: int32(name='PageSize'),
  parentEventType?: string(name='ParentEventType'),
  regionId?: string(name='RegionId'),
}

model DescribeSuspEventsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      canBeDealOnLine?: string(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      dataSource?: string(name='DataSource'),
      desc?: string(name='Desc'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      details?: [ 
        {
          name?: string(name='Name'),
          nameDisplay?: string(name='NameDisplay'),
          type?: string(name='Type'),
          value?: string(name='Value'),
          valueDisplay?: string(name='ValueDisplay'),
        }
      ](name='Details'),
      eventStatus?: int32(name='EventStatus'),
      eventSubType?: string(name='EventSubType'),
      id?: long(name='Id'),
      lastTime?: string(name='LastTime'),
      level?: string(name='Level'),
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateMsg?: string(name='OperateMsg'),
      uniqueInfo?: string(name='UniqueInfo'),
    }
  ](name='SuspEvents'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSuspEvents', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeUserConnectionRecordsRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  endUserId?: string(name='EndUserId'),
  endUserType?: string(name='EndUserType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeUserConnectionRecordsResponseBody = {
  connectionRecords?: [ 
    {
      connectDuration?: string(name='ConnectDuration'),
      connectEndTime?: string(name='ConnectEndTime'),
      connectStartTime?: string(name='ConnectStartTime'),
      connectionRecordId?: string(name='ConnectionRecordId'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
    }
  ](name='ConnectionRecords'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeUserConnectionRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserConnectionRecordsResponseBody(name='body'),
}

async function describeUserConnectionRecordsWithOptions(request: DescribeUserConnectionRecordsRequest, runtime: Util.RuntimeOptions): DescribeUserConnectionRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserConnectionRecords', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserConnectionRecords(request: DescribeUserConnectionRecordsRequest): DescribeUserConnectionRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserConnectionRecordsWithOptions(request, runtime);
}

model DescribeUsersInGroupRequest {
  connectState?: int32(name='ConnectState'),
  desktopGroupId?: string(name='DesktopGroupId'),
  endUserId?: string(name='EndUserId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
}

model DescribeUsersInGroupResponseBody = {
  endUsers?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      endUserEmail?: string(name='EndUserEmail'),
      endUserId?: string(name='EndUserId'),
      endUserName?: string(name='EndUserName'),
      endUserPhone?: string(name='EndUserPhone'),
      endUserType?: string(name='EndUserType'),
    }
  ](name='EndUsers'),
  nextToken?: string(name='NextToken'),
  onlineUsersCount?: int32(name='OnlineUsersCount'),
  requestId?: string(name='RequestId'),
  usersCount?: int32(name='UsersCount'),
}

model DescribeUsersInGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUsersInGroupResponseBody(name='body'),
}

async function describeUsersInGroupWithOptions(request: DescribeUsersInGroupRequest, runtime: Util.RuntimeOptions): DescribeUsersInGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUsersInGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUsersInGroup(request: DescribeUsersInGroupRequest): DescribeUsersInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUsersInGroupWithOptions(request, runtime);
}

model DescribeVirtualMFADevicesRequest {
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model DescribeVirtualMFADevicesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  virtualMFADevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails'),
      directoryId?: string(name='DirectoryId'),
      endUserId?: string(name='EndUserId'),
      gmtEnabled?: string(name='GmtEnabled'),
      gmtUnlock?: string(name='GmtUnlock'),
      officeSiteId?: string(name='OfficeSiteId'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='status'),
    }
  ](name='VirtualMFADevices'),
}

model DescribeVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualMFADevicesResponseBody(name='body'),
}

async function describeVirtualMFADevicesWithOptions(request: DescribeVirtualMFADevicesRequest, runtime: Util.RuntimeOptions): DescribeVirtualMFADevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVirtualMFADevices', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): DescribeVirtualMFADevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualMFADevicesWithOptions(request, runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName'),
  lang?: string(name='Lang'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      cveId?: string(name='CveId'),
      cvssScore?: string(name='CvssScore'),
      summary?: string(name='Summary'),
      title?: string(name='Title'),
    }
  ](name='Cves'),
  requestId?: string(name='RequestId'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulDetails', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName'),
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  lang?: string(name='Lang'),
  necessity?: string(name='Necessity'),
  officeSiteId?: string(name='OfficeSiteId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      extendContentJson?: {
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion'),
            matchDetail?: string(name='MatchDetail'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            updateCmd?: string(name='UpdateCmd'),
          }
        ](name='RpmEntityList'),
      }(name='ExtendContentJson'),
      firstTs?: long(name='FirstTs'),
      lastTs?: long(name='LastTs'),
      modifyTs?: long(name='ModifyTs'),
      name?: string(name='Name'),
      necessity?: string(name='Necessity'),
      online?: boolean(name='Online'),
      osVersion?: string(name='OsVersion'),
      related?: string(name='Related'),
      repairTs?: long(name='RepairTs'),
      resultCode?: string(name='ResultCode'),
      resultMessage?: string(name='ResultMessage'),
      status?: int32(name='Status'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
    }
  ](name='VulRecords'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulList', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulOverviewRequest {
  regionId?: string(name='RegionId'),
}

model DescribeVulOverviewResponseBody = {
  asapCount?: int32(name='AsapCount'),
  laterCount?: int32(name='LaterCount'),
  nntfCount?: int32(name='NntfCount'),
  requestId?: string(name='RequestId'),
}

model DescribeVulOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVulOverviewResponseBody(name='body'),
}

async function describeVulOverviewWithOptions(request: DescribeVulOverviewRequest, runtime: Util.RuntimeOptions): DescribeVulOverviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVulOverview', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVulOverview(request: DescribeVulOverviewRequest): DescribeVulOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulOverviewWithOptions(request, runtime);
}

model DescribeZonesRequest {
  cloudType?: string(name='CloudType'),
  regionId?: string(name='RegionId'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: [ 
    {
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachCenRequest {
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model DetachCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachCenResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCenResponseBody(name='body'),
}

async function detachCenWithOptions(request: DetachCenRequest, runtime: Util.RuntimeOptions): DetachCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachCen', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachCen(request: DetachCenRequest): DetachCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCenWithOptions(request, runtime);
}

model ExportDesktopGroupInfoRequest {
  chargeType?: string(name='ChargeType'),
  desktopGroupId?: [ string ](name='DesktopGroupId'),
  desktopGroupName?: string(name='DesktopGroupName'),
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
  expiredTime?: string(name='ExpiredTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
}

model ExportDesktopGroupInfoResponseBody = {
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model ExportDesktopGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ExportDesktopGroupInfoResponseBody(name='body'),
}

async function exportDesktopGroupInfoWithOptions(request: ExportDesktopGroupInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopGroupInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportDesktopGroupInfo', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportDesktopGroupInfo(request: ExportDesktopGroupInfoRequest): ExportDesktopGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopGroupInfoWithOptions(request, runtime);
}

model ExportDesktopListInfoRequest {
  chargeType?: string(name='ChargeType'),
  desktopId?: [ string ](name='DesktopId'),
  desktopName?: string(name='DesktopName'),
  desktopStatus?: string(name='DesktopStatus'),
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
  expiredTime?: string(name='ExpiredTime'),
  groupId?: string(name='GroupId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: string(name='OfficeSiteId'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
  userName?: string(name='UserName'),
}

model ExportDesktopListInfoResponseBody = {
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model ExportDesktopListInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ExportDesktopListInfoResponseBody(name='body'),
}

async function exportDesktopListInfoWithOptions(request: ExportDesktopListInfoRequest, runtime: Util.RuntimeOptions): ExportDesktopListInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportDesktopListInfo', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportDesktopListInfo(request: ExportDesktopListInfoRequest): ExportDesktopListInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDesktopListInfoWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  desktopId?: string(name='DesktopId'),
  endUserId?: string(name='EndUserId'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId'),
}

model GetConnectionTicketResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskStatus?: string(name='TaskStatus'),
  ticket?: string(name='Ticket'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConnectionTicket', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model GetDesktopGroupDetailRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  regionId?: string(name='RegionId'),
}

model GetDesktopGroupDetailResponseBody = {
  desktops?: [ 
    {
      allowAutoSetup?: int32(name='AllowAutoSetup'),
      allowBufferCount?: int32(name='AllowBufferCount'),
      comments?: string(name='Comments'),
      cpu?: int32(name='Cpu'),
      creationTime?: string(name='CreationTime'),
      creator?: string(name='Creator'),
      dataDiskCategory?: string(name='DataDiskCategory'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopGroupId?: string(name='DesktopGroupId'),
      desktopGroupName?: string(name='DesktopGroupName'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      expiredTime?: string(name='ExpiredTime'),
      gpuCount?: float(name='GpuCount'),
      gpuSpec?: string(name='GpuSpec'),
      keepDuration?: long(name='KeepDuration'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount'),
      memory?: long(name='Memory'),
      minDesktopsCount?: int32(name='MinDesktopsCount'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      officeSiteType?: string(name='OfficeSiteType'),
      ownBundleId?: string(name='OwnBundleId'),
      ownBundleName?: string(name='OwnBundleName'),
      payType?: string(name='PayType'),
      policyGroupId?: string(name='PolicyGroupId'),
      policyGroupName?: string(name='PolicyGroupName'),
      resType?: int32(name='ResType'),
      resetType?: long(name='ResetType'),
      status?: int32(name='Status'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='Desktops'),
  requestId?: string(name='RequestId'),
}

model GetDesktopGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDesktopGroupDetailResponseBody(name='body'),
}

async function getDesktopGroupDetailWithOptions(request: GetDesktopGroupDetailRequest, runtime: Util.RuntimeOptions): GetDesktopGroupDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDesktopGroupDetail', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDesktopGroupDetail(request: GetDesktopGroupDetailRequest): GetDesktopGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDesktopGroupDetailWithOptions(request, runtime);
}

model GetDirectorySsoStatusRequest {
  directoryId?: string(name='DirectoryId'),
  regionId?: string(name='RegionId'),
}

model GetDirectorySsoStatusResponseBody = {
  requestId?: string(name='RequestId'),
  ssoStatus?: boolean(name='SsoStatus'),
}

model GetDirectorySsoStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDirectorySsoStatusResponseBody(name='body'),
}

async function getDirectorySsoStatusWithOptions(request: GetDirectorySsoStatusRequest, runtime: Util.RuntimeOptions): GetDirectorySsoStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDirectorySsoStatus', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDirectorySsoStatus(request: GetDirectorySsoStatusRequest): GetDirectorySsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDirectorySsoStatusWithOptions(request, runtime);
}

model GetOfficeSiteSsoStatusRequest {
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model GetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId'),
  ssoStatus?: boolean(name='SsoStatus'),
}

model GetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function getOfficeSiteSsoStatusWithOptions(request: GetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): GetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOfficeSiteSsoStatus', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOfficeSiteSsoStatus(request: GetOfficeSiteSsoStatusRequest): GetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOfficeSiteSsoStatusWithOptions(request, runtime);
}

model GetSpMetadataRequest {
  directoryId?: string(name='DirectoryId'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model GetSpMetadataResponseBody = {
  requestId?: string(name='RequestId'),
  spMetadata?: string(name='SpMetadata'),
}

model GetSpMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpMetadataResponseBody(name='body'),
}

async function getSpMetadataWithOptions(request: GetSpMetadataRequest, runtime: Util.RuntimeOptions): GetSpMetadataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSpMetadata', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSpMetadata(request: GetSpMetadataRequest): GetSpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpMetadataWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  operationCode?: string(name='OperationCode'),
  operationParams?: string(name='OperationParams'),
  regionId?: string(name='RegionId'),
  securityEvent?: [ 
    {
      desktopId?: string(name='DesktopId'),
      securityEventId?: string(name='SecurityEventId'),
    }
  ](name='SecurityEvent'),
}

model HandleSecurityEventsResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: long(name='TaskId'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HandleSecurityEvents', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model ListDirectoryUsersRequest {
  directoryId?: string(name='DirectoryId'),
  filter?: string(name='Filter'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  OUPath?: string(name='OUPath'),
  regionId?: string(name='RegionId'),
}

model ListDirectoryUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      endUser?: string(name='EndUser'),
    }
  ](name='Users'),
}

model ListDirectoryUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectoryUsersResponseBody(name='body'),
}

async function listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: Util.RuntimeOptions): ListDirectoryUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDirectoryUsers', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoryUsersWithOptions(request, runtime);
}

model ListOfficeSiteOverviewRequest {
  forceRefresh?: boolean(name='ForceRefresh'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  officeSiteId?: [ string ](name='OfficeSiteId'),
  queryRange?: int32(name='QueryRange'),
  regionId?: string(name='RegionId'),
}

model ListOfficeSiteOverviewResponseBody = {
  nextToken?: string(name='NextToken'),
  officeSiteOverviewResults?: [ 
    {
      hasExpiredEdsCount?: int32(name='HasExpiredEdsCount'),
      hasExpiredEdsCountForGroup?: int32(name='HasExpiredEdsCountForGroup'),
      officeSiteId?: string(name='OfficeSiteId'),
      officeSiteName?: string(name='OfficeSiteName'),
      officeSiteStatus?: string(name='OfficeSiteStatus'),
      regionId?: string(name='RegionId'),
      runningEdsCount?: int32(name='RunningEdsCount'),
      runningEdsCountForGroup?: int32(name='RunningEdsCountForGroup'),
      totalEdsCount?: int32(name='TotalEdsCount'),
      totalEdsCountForGroup?: int32(name='TotalEdsCountForGroup'),
      willExpiredEdsCount?: int32(name='WillExpiredEdsCount'),
      willExpiredEdsCountForGroup?: int32(name='WillExpiredEdsCountForGroup'),
    }
  ](name='OfficeSiteOverviewResults'),
  requestId?: string(name='RequestId'),
}

model ListOfficeSiteOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: ListOfficeSiteOverviewResponseBody(name='body'),
}

async function listOfficeSiteOverviewWithOptions(request: ListOfficeSiteOverviewRequest, runtime: Util.RuntimeOptions): ListOfficeSiteOverviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOfficeSiteOverview', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOfficeSiteOverview(request: ListOfficeSiteOverviewRequest): ListOfficeSiteOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteOverviewWithOptions(request, runtime);
}

model ListOfficeSiteUsersRequest {
  filter?: string(name='Filter'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  OUPath?: string(name='OUPath'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ListOfficeSiteUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      endUser?: string(name='EndUser'),
    }
  ](name='Users'),
}

model ListOfficeSiteUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListOfficeSiteUsersResponseBody(name='body'),
}

async function listOfficeSiteUsersWithOptions(request: ListOfficeSiteUsersRequest, runtime: Util.RuntimeOptions): ListOfficeSiteUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOfficeSiteUsers', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOfficeSiteUsers(request: ListOfficeSiteUsersRequest): ListOfficeSiteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOfficeSiteUsersWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserAdOrganizationUnitsRequest {
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ListUserAdOrganizationUnitsResponseBody = {
  OUNames?: [ 
    {
      OUName?: string(name='OUName'),
      officeSiteId?: string(name='OfficeSiteId'),
    }
  ](name='OUNames'),
  requestId?: string(name='RequestId'),
}

model ListUserAdOrganizationUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserAdOrganizationUnitsResponseBody(name='body'),
}

async function listUserAdOrganizationUnitsWithOptions(request: ListUserAdOrganizationUnitsRequest, runtime: Util.RuntimeOptions): ListUserAdOrganizationUnitsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserAdOrganizationUnits', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserAdOrganizationUnits(request: ListUserAdOrganizationUnitsRequest): ListUserAdOrganizationUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserAdOrganizationUnitsWithOptions(request, runtime);
}

model LockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model LockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model LockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LockVirtualMFADeviceResponseBody(name='body'),
}

async function lockVirtualMFADeviceWithOptions(request: LockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): LockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): LockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockVirtualMFADeviceWithOptions(request, runtime);
}

model MigrateDesktopRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId'),
  targetDirectoryId?: string(name='TargetDirectoryId'),
}

model MigrateDesktopResponseBody = {
  requestId?: string(name='RequestId'),
}

model MigrateDesktopResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateDesktopResponseBody(name='body'),
}

async function migrateDesktopWithOptions(request: MigrateDesktopRequest, runtime: Util.RuntimeOptions): MigrateDesktopResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MigrateDesktop', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function migrateDesktop(request: MigrateDesktopRequest): MigrateDesktopResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateDesktopWithOptions(request, runtime);
}

model ModifyADConnectorDirectoryRequest {
  directoryId?: string(name='DirectoryId'),
  directoryName?: string(name='DirectoryName'),
  dnsAddress?: [ string ](name='DnsAddress'),
  domainName?: string(name='DomainName'),
  domainPassword?: string(name='DomainPassword'),
  domainUserName?: string(name='DomainUserName'),
  mfaEnabled?: boolean(name='MfaEnabled'),
  regionId?: string(name='RegionId'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
  subDomainName?: string(name='SubDomainName'),
}

model ModifyADConnectorDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyADConnectorDirectoryResponseBody(name='body'),
}

async function modifyADConnectorDirectoryWithOptions(request: ModifyADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): ModifyADConnectorDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyADConnectorDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): ModifyADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorDirectoryWithOptions(request, runtime);
}

model ModifyADConnectorOfficeSiteRequest {
  dnsAddress?: [ string ](name='DnsAddress'),
  domainName?: string(name='DomainName'),
  domainPassword?: string(name='DomainPassword'),
  domainUserName?: string(name='DomainUserName'),
  mfaEnabled?: boolean(name='MfaEnabled'),
  officeSiteId?: string(name='OfficeSiteId'),
  officeSiteName?: string(name='OfficeSiteName'),
  regionId?: string(name='RegionId'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
  subDomainName?: string(name='SubDomainName'),
}

model ModifyADConnectorOfficeSiteResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyADConnectorOfficeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyADConnectorOfficeSiteResponseBody(name='body'),
}

async function modifyADConnectorOfficeSiteWithOptions(request: ModifyADConnectorOfficeSiteRequest, runtime: Util.RuntimeOptions): ModifyADConnectorOfficeSiteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyADConnectorOfficeSite', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyADConnectorOfficeSite(request: ModifyADConnectorOfficeSiteRequest): ModifyADConnectorOfficeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorOfficeSiteWithOptions(request, runtime);
}

model ModifyBundleRequest {
  bundleId?: string(name='BundleId'),
  bundleName?: string(name='BundleName'),
  description?: string(name='Description'),
  imageId?: string(name='ImageId'),
  language?: string(name='Language'),
  regionId?: string(name='RegionId'),
}

model ModifyBundleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBundleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBundleResponseBody(name='body'),
}

async function modifyBundleWithOptions(request: ModifyBundleRequest, runtime: Util.RuntimeOptions): ModifyBundleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBundle', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBundle(request: ModifyBundleRequest): ModifyBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBundleWithOptions(request, runtime);
}

model ModifyCloudDriveServiceRequest {
  cdsId?: string(name='CdsId'),
  cdsName?: string(name='CdsName'),
  maxSize?: long(name='MaxSize'),
  regionId?: string(name='RegionId'),
}

model ModifyCloudDriveServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCloudDriveServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCloudDriveServiceResponseBody(name='body'),
}

async function modifyCloudDriveServiceWithOptions(request: ModifyCloudDriveServiceRequest, runtime: Util.RuntimeOptions): ModifyCloudDriveServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCloudDriveService', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCloudDriveService(request: ModifyCloudDriveServiceRequest): ModifyCloudDriveServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCloudDriveServiceWithOptions(request, runtime);
}

model ModifyDesktopChargeTypeRequest {
  autoPay?: boolean(name='AutoPay'),
  chargeType?: string(name='ChargeType'),
  desktopId?: [ string ](name='DesktopId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model ModifyDesktopChargeTypeResponseBody = {
  desktopId?: [ string ](name='DesktopId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopChargeTypeResponseBody(name='body'),
}

async function modifyDesktopChargeTypeWithOptions(request: ModifyDesktopChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDesktopChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopChargeType', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopChargeType(request: ModifyDesktopChargeTypeRequest): ModifyDesktopChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopChargeTypeWithOptions(request, runtime);
}

model ModifyDesktopGroupRequest {
  allowAutoSetup?: int32(name='AllowAutoSetup'),
  allowBufferCount?: int32(name='AllowBufferCount'),
  comments?: string(name='Comments'),
  desktopGroupId?: string(name='DesktopGroupId'),
  desktopGroupName?: string(name='DesktopGroupName'),
  keepDuration?: long(name='KeepDuration'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount'),
  minDesktopsCount?: int32(name='MinDesktopsCount'),
  ownBundleId?: string(name='OwnBundleId'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
  resetType?: long(name='ResetType'),
  scaleStrategyId?: string(name='ScaleStrategyId'),
}

model ModifyDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopGroupResponseBody(name='body'),
}

async function modifyDesktopGroupWithOptions(request: ModifyDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopGroup(request: ModifyDesktopGroupRequest): ModifyDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopGroupWithOptions(request, runtime);
}

model ModifyDesktopHostNameRequest {
  desktopId?: string(name='DesktopId'),
  newHostName?: string(name='NewHostName'),
  regionId?: string(name='RegionId'),
}

model ModifyDesktopHostNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDesktopHostNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopHostNameResponseBody(name='body'),
}

async function modifyDesktopHostNameWithOptions(request: ModifyDesktopHostNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopHostNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopHostName', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopHostName(request: ModifyDesktopHostNameRequest): ModifyDesktopHostNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopHostNameWithOptions(request, runtime);
}

model ModifyDesktopNameRequest {
  desktopId?: string(name='DesktopId'),
  newDesktopName?: string(name='NewDesktopName'),
  regionId?: string(name='RegionId'),
}

model ModifyDesktopNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDesktopNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopNameResponseBody(name='body'),
}

async function modifyDesktopNameWithOptions(request: ModifyDesktopNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopName', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopName(request: ModifyDesktopNameRequest): ModifyDesktopNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopNameWithOptions(request, runtime);
}

model ModifyDesktopSpecRequest {
  autoPay?: boolean(name='AutoPay'),
  desktopId?: string(name='DesktopId'),
  desktopType?: string(name='DesktopType'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib'),
}

model ModifyDesktopSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopSpecResponseBody(name='body'),
}

async function modifyDesktopSpecWithOptions(request: ModifyDesktopSpecRequest, runtime: Util.RuntimeOptions): ModifyDesktopSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopSpec', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopSpec(request: ModifyDesktopSpecRequest): ModifyDesktopSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopSpecWithOptions(request, runtime);
}

model ModifyDesktopsPolicyGroupRequest {
  desktopId?: [ string ](name='DesktopId'),
  policyGroupId?: string(name='PolicyGroupId'),
  regionId?: string(name='RegionId'),
}

model ModifyDesktopsPolicyGroupResponseBody = {
  modifyResults?: [ 
    {
      code?: string(name='Code'),
      desktopId?: string(name='DesktopId'),
      message?: string(name='Message'),
    }
  ](name='ModifyResults'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopsPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopsPolicyGroupResponseBody(name='body'),
}

async function modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopsPolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopsPolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopsPolicyGroupWithOptions(request, runtime);
}

model ModifyEntitlementRequest {
  desktopId?: string(name='DesktopId'),
  endUserId?: [ string ](name='EndUserId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model ModifyEntitlementResponseBody = {
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model ModifyEntitlementResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEntitlementResponseBody(name='body'),
}

async function modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: Util.RuntimeOptions): ModifyEntitlementResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEntitlement', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEntitlementWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  description?: string(name='Description'),
  imageId?: string(name='ImageId'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageAttribute', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  mountTargetDomain?: string(name='MountTargetDomain'),
  regionId?: string(name='RegionId'),
}

model ModifyNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNASDefaultMountTargetResponseBody(name='body'),
}

async function modifyNASDefaultMountTargetWithOptions(request: ModifyNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ModifyNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNASDefaultMountTarget', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNASDefaultMountTarget(request: ModifyNASDefaultMountTargetRequest): ModifyNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNASDefaultMountTargetWithOptions(request, runtime);
}

model ModifyNetworkPackageRequest {
  bandwidth?: int32(name='Bandwidth'),
  networkPackageId?: string(name='NetworkPackageId'),
  regionId?: string(name='RegionId'),
}

model ModifyNetworkPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNetworkPackageResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkPackageResponseBody(name='body'),
}

async function modifyNetworkPackageWithOptions(request: ModifyNetworkPackageRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNetworkPackage', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNetworkPackage(request: ModifyNetworkPackageRequest): ModifyNetworkPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageWithOptions(request, runtime);
}

model ModifyNetworkPackageBandwidthRequest {
  autoPay?: boolean(name='AutoPay'),
  bandwidth?: int32(name='Bandwidth'),
  networkPackageId?: string(name='NetworkPackageId'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model ModifyNetworkPackageBandwidthResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyNetworkPackageBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkPackageBandwidthResponseBody(name='body'),
}

async function modifyNetworkPackageBandwidthWithOptions(request: ModifyNetworkPackageBandwidthRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageBandwidthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNetworkPackageBandwidth', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNetworkPackageBandwidth(request: ModifyNetworkPackageBandwidthRequest): ModifyNetworkPackageBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageBandwidthWithOptions(request, runtime);
}

model ModifyNetworkPackageEnabledRequest {
  enabled?: boolean(name='Enabled'),
  networkPackageId?: string(name='NetworkPackageId'),
  regionId?: string(name='RegionId'),
}

model ModifyNetworkPackageEnabledResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNetworkPackageEnabledResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkPackageEnabledResponseBody(name='body'),
}

async function modifyNetworkPackageEnabledWithOptions(request: ModifyNetworkPackageEnabledRequest, runtime: Util.RuntimeOptions): ModifyNetworkPackageEnabledResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNetworkPackageEnabled', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNetworkPackageEnabled(request: ModifyNetworkPackageEnabledRequest): ModifyNetworkPackageEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkPackageEnabledWithOptions(request, runtime);
}

model ModifyOfficeSiteAttributeRequest {
  desktopAccessType?: string(name='DesktopAccessType'),
  needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk'),
  officeSiteId?: string(name='OfficeSiteId'),
  officeSiteName?: string(name='OfficeSiteName'),
  regionId?: string(name='RegionId'),
}

model ModifyOfficeSiteAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOfficeSiteAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOfficeSiteAttributeResponseBody(name='body'),
}

async function modifyOfficeSiteAttributeWithOptions(request: ModifyOfficeSiteAttributeRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOfficeSiteAttribute', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOfficeSiteAttribute(request: ModifyOfficeSiteAttributeRequest): ModifyOfficeSiteAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteAttributeWithOptions(request, runtime);
}

model ModifyOfficeSiteCrossDesktopAccessRequest {
  enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ModifyOfficeSiteCrossDesktopAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOfficeSiteCrossDesktopAccessResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOfficeSiteCrossDesktopAccessResponseBody(name='body'),
}

async function modifyOfficeSiteCrossDesktopAccessWithOptions(request: ModifyOfficeSiteCrossDesktopAccessRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteCrossDesktopAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOfficeSiteCrossDesktopAccess', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOfficeSiteCrossDesktopAccess(request: ModifyOfficeSiteCrossDesktopAccessRequest): ModifyOfficeSiteCrossDesktopAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteCrossDesktopAccessWithOptions(request, runtime);
}

model ModifyOfficeSiteMfaEnabledRequest {
  mfaEnabled?: boolean(name='MfaEnabled'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model ModifyOfficeSiteMfaEnabledResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOfficeSiteMfaEnabledResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOfficeSiteMfaEnabledResponseBody(name='body'),
}

async function modifyOfficeSiteMfaEnabledWithOptions(request: ModifyOfficeSiteMfaEnabledRequest, runtime: Util.RuntimeOptions): ModifyOfficeSiteMfaEnabledResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOfficeSiteMfaEnabled', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOfficeSiteMfaEnabled(request: ModifyOfficeSiteMfaEnabledRequest): ModifyOfficeSiteMfaEnabledResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOfficeSiteMfaEnabledWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  operateType?: string(name='OperateType'),
  reason?: string(name='Reason'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  vulInfo?: [ 
    {
      desktopId?: string(name='DesktopId'),
      name?: string(name='Name'),
      tag?: string(name='Tag'),
    }
  ](name='VulInfo'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyOperateVul', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPolicyGroupRequest {
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
    }
  ](name='AuthorizeAccessPolicyRule'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
      ipProtocol?: string(name='IpProtocol'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      type?: string(name='Type'),
    }
  ](name='AuthorizeSecurityPolicyRule'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType'),
      status?: string(name='Status'),
    }
  ](name='ClientType'),
  clipboard?: string(name='Clipboard'),
  domainList?: string(name='DomainList'),
  gpuAcceleration?: string(name='GpuAcceleration'),
  html5Access?: string(name='Html5Access'),
  html5FileTransfer?: string(name='Html5FileTransfer'),
  localDrive?: string(name='LocalDrive'),
  name?: string(name='Name'),
  policyGroupId?: string(name='PolicyGroupId'),
  preemptLogin?: string(name='PreemptLogin'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser'),
  printerRedirection?: string(name='PrinterRedirection'),
  regionId?: string(name='RegionId'),
  revokeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
    }
  ](name='RevokeAccessPolicyRule'),
  revokeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp'),
      description?: string(name='Description'),
      ipProtocol?: string(name='IpProtocol'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      type?: string(name='Type'),
    }
  ](name='RevokeSecurityPolicyRule'),
  usbRedirect?: string(name='UsbRedirect'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description'),
      deviceClass?: string(name='DeviceClass'),
      deviceSubclass?: string(name='DeviceSubclass'),
      productId?: string(name='ProductId'),
      usbRedirectType?: long(name='UsbRedirectType'),
      usbRuleType?: long(name='UsbRuleType'),
      vendorId?: string(name='VendorId'),
    }
  ](name='UsbSupplyRedirectRule'),
  visualQuality?: string(name='VisualQuality'),
  watermark?: string(name='Watermark'),
  watermarkCustomText?: string(name='WatermarkCustomText'),
  watermarkTransparency?: string(name='WatermarkTransparency'),
  watermarkType?: string(name='WatermarkType'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyGroupResponseBody(name='body'),
}

async function modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model ModifyScaleStrategyRequest {
  maxAvailableDesktopsCount?: int32(name='MaxAvailableDesktopsCount'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount'),
  minAvailableDesktopsCount?: int32(name='MinAvailableDesktopsCount'),
  minDesktopsCount?: int32(name='MinDesktopsCount'),
  regionId?: string(name='RegionId'),
  scaleStep?: int32(name='ScaleStep'),
  scaleStrategyId?: string(name='ScaleStrategyId'),
  scaleStrategyName?: string(name='ScaleStrategyName'),
  scaleStrategyType?: string(name='ScaleStrategyType'),
}

model ModifyScaleStrategyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScaleStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScaleStrategyResponseBody(name='body'),
}

async function modifyScaleStrategyWithOptions(request: ModifyScaleStrategyRequest, runtime: Util.RuntimeOptions): ModifyScaleStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScaleStrategy', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScaleStrategy(request: ModifyScaleStrategyRequest): ModifyScaleStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScaleStrategyWithOptions(request, runtime);
}

model ModifyUserEntitlementRequest {
  authorizeDesktopId?: [ string ](name='AuthorizeDesktopId'),
  endUserId?: [ string ](name='EndUserId'),
  regionId?: string(name='RegionId'),
  revokeDesktopId?: [ string ](name='RevokeDesktopId'),
}

model ModifyUserEntitlementResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserEntitlementResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserEntitlementResponseBody(name='body'),
}

async function modifyUserEntitlementWithOptions(request: ModifyUserEntitlementRequest, runtime: Util.RuntimeOptions): ModifyUserEntitlementResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserEntitlement', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserEntitlement(request: ModifyUserEntitlementRequest): ModifyUserEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserEntitlementWithOptions(request, runtime);
}

model ModifyUserToDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  newEndUserIds?: [ string ](name='NewEndUserIds'),
  oldEndUserIds?: [ string ](name='OldEndUserIds'),
  regionId?: string(name='RegionId'),
}

model ModifyUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserToDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserToDesktopGroupResponseBody(name='body'),
}

async function modifyUserToDesktopGroupWithOptions(request: ModifyUserToDesktopGroupRequest, runtime: Util.RuntimeOptions): ModifyUserToDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserToDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserToDesktopGroup(request: ModifyUserToDesktopGroupRequest): ModifyUserToDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserToDesktopGroupWithOptions(request, runtime);
}

model OperateVulsRequest {
  desktopId?: [ string ](name='DesktopId'),
  operateType?: string(name='OperateType'),
  precondition?: int32(name='Precondition'),
  reason?: string(name='Reason'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  vulName?: [ string ](name='VulName'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateVuls', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model RebootDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: RebootDesktopsResponseBody(name='body'),
}

async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model RebuildDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
}

model RebuildDesktopsResponseBody = {
  rebuildResults?: [ 
    {
      code?: string(name='Code'),
      desktopId?: string(name='DesktopId'),
      message?: string(name='Message'),
    }
  ](name='RebuildResults'),
  requestId?: string(name='RequestId'),
}

model RebuildDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: RebuildDesktopsResponseBody(name='body'),
}

async function rebuildDesktopsWithOptions(request: RebuildDesktopsRequest, runtime: Util.RuntimeOptions): RebuildDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebuildDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebuildDesktops(request: RebuildDesktopsRequest): RebuildDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildDesktopsWithOptions(request, runtime);
}

model RecreateDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  ownBundleId?: string(name='OwnBundleId'),
  regionId?: string(name='RegionId'),
}

model RecreateDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecreateDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RecreateDesktopGroupResponseBody(name='body'),
}

async function recreateDesktopGroupWithOptions(request: RecreateDesktopGroupRequest, runtime: Util.RuntimeOptions): RecreateDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecreateDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recreateDesktopGroup(request: RecreateDesktopGroupRequest): RecreateDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return recreateDesktopGroupWithOptions(request, runtime);
}

model RemoveUserFromDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId'),
  endUserIds?: [ string ](name='EndUserIds'),
  regionId?: string(name='RegionId'),
}

model RemoveUserFromDesktopGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveUserFromDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUserFromDesktopGroupResponseBody(name='body'),
}

async function removeUserFromDesktopGroupWithOptions(request: RemoveUserFromDesktopGroupRequest, runtime: Util.RuntimeOptions): RemoveUserFromDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUserFromDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUserFromDesktopGroup(request: RemoveUserFromDesktopGroupRequest): RemoveUserFromDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUserFromDesktopGroupWithOptions(request, runtime);
}

model RenewDesktopGroupRequest {
  autoPay?: boolean(name='AutoPay'),
  desktopGroupId?: string(name='DesktopGroupId'),
  keepSamePeriod?: int32(name='KeepSamePeriod'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  regionId?: string(name='RegionId'),
}

model RenewDesktopGroupResponseBody = {
  orderId?: [ string ](name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewDesktopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDesktopGroupResponseBody(name='body'),
}

async function renewDesktopGroupWithOptions(request: RenewDesktopGroupRequest, runtime: Util.RuntimeOptions): RenewDesktopGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewDesktopGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewDesktopGroup(request: RenewDesktopGroupRequest): RenewDesktopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDesktopGroupWithOptions(request, runtime);
}

model RenewDesktopsRequest {
  autoPay?: boolean(name='AutoPay'),
  desktopId?: [ string ](name='DesktopId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model RenewDesktopsResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDesktopsResponseBody(name='body'),
}

async function renewDesktopsWithOptions(request: RenewDesktopsRequest, runtime: Util.RuntimeOptions): RenewDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewDesktops(request: RenewDesktopsRequest): RenewDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDesktopsWithOptions(request, runtime);
}

model RenewNetworkPackagesRequest {
  autoPay?: boolean(name='AutoPay'),
  networkPackageId?: [ string ](name='NetworkPackageId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  promotionId?: string(name='PromotionId'),
  regionId?: string(name='RegionId'),
}

model RenewNetworkPackagesResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewNetworkPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: RenewNetworkPackagesResponseBody(name='body'),
}

async function renewNetworkPackagesWithOptions(request: RenewNetworkPackagesRequest, runtime: Util.RuntimeOptions): RenewNetworkPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewNetworkPackages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewNetworkPackages(request: RenewNetworkPackagesRequest): RenewNetworkPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewNetworkPackagesWithOptions(request, runtime);
}

model ResetNASDefaultMountTargetRequest {
  fileSystemId?: string(name='FileSystemId'),
  regionId?: string(name='RegionId'),
}

model ResetNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetNASDefaultMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ResetNASDefaultMountTargetResponseBody(name='body'),
}

async function resetNASDefaultMountTargetWithOptions(request: ResetNASDefaultMountTargetRequest, runtime: Util.RuntimeOptions): ResetNASDefaultMountTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetNASDefaultMountTarget', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetNASDefaultMountTarget(request: ResetNASDefaultMountTargetRequest): ResetNASDefaultMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetNASDefaultMountTargetWithOptions(request, runtime);
}

model ResetSnapshotRequest {
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSnapshotResponseBody(name='body'),
}

async function resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: Util.RuntimeOptions): ResetSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSnapshotWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  desktopId?: string(name='DesktopId'),
  quaraFieldId?: int32(name='QuaraFieldId'),
  regionId?: string(name='RegionId'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackSuspEventQuaraFile', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model RunCommandRequest {
  commandContent?: string(name='CommandContent'),
  contentEncoding?: string(name='ContentEncoding'),
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId'),
  timeout?: long(name='Timeout'),
  type?: string(name='Type'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId'),
  requestId?: string(name='RequestId'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunCommand', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model SendVerifyCodeRequest {
  extraInfo?: string(name='ExtraInfo'),
  regionId?: string(name='RegionId'),
  verifyCodeAction?: string(name='VerifyCodeAction'),
}

model SendVerifyCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerifyCodeResponseBody(name='body'),
}

async function sendVerifyCodeWithOptions(request: SendVerifyCodeRequest, runtime: Util.RuntimeOptions): SendVerifyCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendVerifyCode', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendVerifyCode(request: SendVerifyCodeRequest): SendVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerifyCodeWithOptions(request, runtime);
}

model SetDirectorySsoStatusRequest {
  directoryId?: string(name='DirectoryId'),
  enableSso?: boolean(name='EnableSso'),
  regionId?: string(name='RegionId'),
}

model SetDirectorySsoStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDirectorySsoStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetDirectorySsoStatusResponseBody(name='body'),
}

async function setDirectorySsoStatusWithOptions(request: SetDirectorySsoStatusRequest, runtime: Util.RuntimeOptions): SetDirectorySsoStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDirectorySsoStatus', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDirectorySsoStatus(request: SetDirectorySsoStatusRequest): SetDirectorySsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirectorySsoStatusWithOptions(request, runtime);
}

model SetIdpMetadataRequest {
  directoryId?: string(name='DirectoryId'),
  idpMetadata?: string(name='IdpMetadata'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model SetIdpMetadataResponseBody = {
  idpEntityId?: string(name='IdpEntityId'),
  requestId?: string(name='RequestId'),
}

model SetIdpMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: SetIdpMetadataResponseBody(name='body'),
}

async function setIdpMetadataWithOptions(request: SetIdpMetadataRequest, runtime: Util.RuntimeOptions): SetIdpMetadataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetIdpMetadata', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setIdpMetadata(request: SetIdpMetadataRequest): SetIdpMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIdpMetadataWithOptions(request, runtime);
}

model SetOfficeSiteSsoStatusRequest {
  enableSso?: boolean(name='EnableSso'),
  officeSiteId?: string(name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model SetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetOfficeSiteSsoStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetOfficeSiteSsoStatusResponseBody(name='body'),
}

async function setOfficeSiteSsoStatusWithOptions(request: SetOfficeSiteSsoStatusRequest, runtime: Util.RuntimeOptions): SetOfficeSiteSsoStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetOfficeSiteSsoStatus', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setOfficeSiteSsoStatus(request: SetOfficeSiteSsoStatusRequest): SetOfficeSiteSsoStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setOfficeSiteSsoStatusWithOptions(request, runtime);
}

model StartDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  regionId?: string(name='RegionId'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: StartDesktopsResponseBody(name='body'),
}

async function startDesktopsWithOptions(request: StartDesktopsRequest, runtime: Util.RuntimeOptions): StartDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDesktopsWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  desktopId?: [ string ](name='DesktopId'),
  officeSiteId?: [ string ](name='OfficeSiteId'),
  regionId?: string(name='RegionId'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskId?: long(name='ScanTaskId'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartVirusScanTask', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model StopDesktopsRequest {
  desktopId?: [ string ](name='DesktopId'),
  hibernate?: boolean(name='Hibernate'),
  regionId?: string(name='RegionId'),
  stoppedMode?: string(name='StoppedMode'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: StopDesktopsResponseBody(name='body'),
}

async function stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: Util.RuntimeOptions): StopDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDesktopsWithOptions(request, runtime);
}

model StopInvocationRequest {
  desktopId?: [ string ](name='DesktopId'),
  invokeId?: string(name='InvokeId'),
  regionId?: string(name='RegionId'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  body: StopInvocationResponseBody(name='body'),
}

async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInvocation', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnlockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model UnlockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockVirtualMFADeviceResponseBody(name='body'),
}

async function unlockVirtualMFADeviceWithOptions(request: UnlockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): UnlockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): UnlockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockVirtualMFADeviceWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model VerifyCenRequest {
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  cidrBlock?: string(name='CidrBlock'),
  regionId?: string(name='RegionId'),
  verifyCode?: string(name='VerifyCode'),
}

model VerifyCenResponseBody = {
  cidrBlocks?: [ string ](name='CidrBlocks'),
  requestId?: string(name='RequestId'),
  routeEntries?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='RouteEntries'),
  status?: string(name='Status'),
}

model VerifyCenResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyCenResponseBody(name='body'),
}

async function verifyCenWithOptions(request: VerifyCenRequest, runtime: Util.RuntimeOptions): VerifyCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyCen', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyCen(request: VerifyCenRequest): VerifyCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCenWithOptions(request, runtime);
}

