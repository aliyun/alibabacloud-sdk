/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ecd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateADConnectorDirectoryRequest {
  regionId?: string(name='RegionId'),
  domainName?: string(name='DomainName'),
  domainUserName?: string(name='DomainUserName'),
  domainPassword?: string(name='DomainPassword'),
  directoryName?: string(name='DirectoryName'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  desktopAccessType?: string(name='DesktopAccessType'),
  subDomainName?: string(name='SubDomainName'),
  dnsAddress?: [ string ](name='DnsAddress'),
  vSwitchId?: [ string ](name='VSwitchId'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
}

model CreateADConnectorDirectoryResponseBody = {
  trustPassword?: string(name='TrustPassword'),
  directoryId?: string(name='DirectoryId'),
  requestId?: string(name='RequestId'),
  adConnectors?: [ 
    {
      address?: string(name='Address'),
    }
  ](name='AdConnectors'),
}

model CreateADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateADConnectorDirectoryResponseBody(name='body'),
}

async function createADConnectorDirectoryWithOptions(request: CreateADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): CreateADConnectorDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateADConnectorDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createADConnectorDirectoryWithOptions(request, runtime);
}

model CreateBundleRequest {
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  desktopType?: string(name='DesktopType'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib'),
  bundleName?: string(name='BundleName'),
  description?: string(name='Description'),
  userDiskSizeGib?: [ integer ](name='UserDiskSizeGib'),
}

model CreateBundleResponseBody = {
  bundleId?: string(name='BundleId'),
  requestId?: string(name='RequestId'),
}

model CreateBundleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBundleResponseBody(name='body'),
}

async function createBundleWithOptions(request: CreateBundleRequest, runtime: Util.RuntimeOptions): CreateBundleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBundle', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBundleWithOptions(request, runtime);
}

model CreateDesktopsRequest {
  regionId?: string(name='RegionId'),
  groupId?: string(name='GroupId'),
  bundleId?: string(name='BundleId'),
  systemDiskSize?: int32(name='SystemDiskSize'),
  dataDiskSize?: int32(name='DataDiskSize'),
  desktopName?: string(name='DesktopName'),
  userName?: string(name='UserName'),
  vpcId?: string(name='VpcId'),
  amount?: int32(name='Amount'),
  directoryId?: string(name='DirectoryId'),
  policyGroupId?: string(name='PolicyGroupId'),
  chargeType?: string(name='ChargeType'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  autoPay?: boolean(name='AutoPay'),
  endUserId?: [ string ](name='EndUserId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
  desktopId?: [ string ](name='DesktopId'),
  orderId?: string(name='OrderId'),
}

model CreateDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDesktopsResponseBody(name='body'),
}

async function createDesktopsWithOptions(request: CreateDesktopsRequest, runtime: Util.RuntimeOptions): CreateDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDesktopsWithOptions(request, runtime);
}

model CreateImageRequest {
  regionId?: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  imageName?: string(name='ImageName'),
  description?: string(name='Description'),
}

model CreateImageResponseBody = {
  requestId?: string(name='RequestId'),
  imageId?: string(name='ImageId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImage', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreatePolicyGroupRequest {
  regionId?: string(name='RegionId'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
  name?: string(name='Name'),
  watermarkType?: string(name='WatermarkType'),
  watermarkCustomText?: string(name='WatermarkCustomText'),
  watermarkTransparency?: string(name='WatermarkTransparency'),
}

model CreatePolicyGroupResponseBody = {
  requestId?: string(name='RequestId'),
  policyGroupId?: string(name='PolicyGroupId'),
}

model CreatePolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyGroupResponseBody(name='body'),
}

async function createPolicyGroupWithOptions(request: CreatePolicyGroupRequest, runtime: Util.RuntimeOptions): CreatePolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyGroupWithOptions(request, runtime);
}

model CreateRAMDirectoryRequest {
  regionId?: string(name='RegionId'),
  directoryName?: string(name='DirectoryName'),
  enableInternetAccess?: boolean(name='EnableInternetAccess'),
  enableAdminAccess?: boolean(name='EnableAdminAccess'),
  desktopAccessType?: string(name='DesktopAccessType'),
  vSwitchId?: [ string ](name='VSwitchId'),
}

model CreateRAMDirectoryResponseBody = {
  directoryId?: string(name='DirectoryId'),
  requestId?: string(name='RequestId'),
}

model CreateRAMDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRAMDirectoryResponseBody(name='body'),
}

async function createRAMDirectoryWithOptions(request: CreateRAMDirectoryRequest, runtime: Util.RuntimeOptions): CreateRAMDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRAMDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRAMDirectoryWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  regionId?: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  snapshotName?: string(name='SnapshotName'),
  description?: string(name='Description'),
  sourceDiskType?: string(name='SourceDiskType'),
}

model CreateSnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  requestId?: string(name='RequestId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DeleteBundlesRequest {
  regionId?: string(name='RegionId'),
  bundleId?: [ string ](name='BundleId'),
}

model DeleteBundlesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBundlesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBundlesResponseBody(name='body'),
}

async function deleteBundlesWithOptions(request: DeleteBundlesRequest, runtime: Util.RuntimeOptions): DeleteBundlesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBundles', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBundlesWithOptions(request, runtime);
}

model DeleteDesktopsRequest {
  regionId?: string(name='RegionId'),
  desktopId?: [ string ](name='DesktopId'),
}

model DeleteDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDesktopsResponseBody(name='body'),
}

async function deleteDesktopsWithOptions(request: DeleteDesktopsRequest, runtime: Util.RuntimeOptions): DeleteDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDesktopsWithOptions(request, runtime);
}

model DeleteDirectoriesRequest {
  regionId?: string(name='RegionId'),
  directoryId?: [ string ](name='DirectoryId'),
}

model DeleteDirectoriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectoriesResponseBody(name='body'),
}

async function deleteDirectoriesWithOptions(request: DeleteDirectoriesRequest, runtime: Util.RuntimeOptions): DeleteDirectoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDirectories', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDirectoriesWithOptions(request, runtime);
}

model DeleteImagesRequest {
  regionId?: string(name='RegionId'),
  imageId?: [ string ](name='ImageId'),
}

model DeleteImagesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImagesResponseBody(name='body'),
}

async function deleteImagesWithOptions(request: DeleteImagesRequest, runtime: Util.RuntimeOptions): DeleteImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesWithOptions(request, runtime);
}

model DeletePolicyGroupsRequest {
  regionId?: string(name='RegionId'),
  policyGroupId?: [ string ](name='PolicyGroupId'),
}

model DeletePolicyGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyGroupsResponseBody(name='body'),
}

async function deletePolicyGroupsWithOptions(request: DeletePolicyGroupsRequest, runtime: Util.RuntimeOptions): DeletePolicyGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePolicyGroups', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyGroupsWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  regionId?: string(name='RegionId'),
  snapshotId?: [ string ](name='SnapshotId'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualMFADeviceResponseBody(name='body'),
}

async function deleteVirtualMFADeviceWithOptions(request: DeleteVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): DeleteVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualMFADeviceWithOptions(request, runtime);
}

model DescribeBundlesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  userName?: string(name='UserName'),
  category?: string(name='Category'),
  bundleType?: string(name='BundleType'),
  bundleId?: [ string ](name='BundleId'),
}

model DescribeBundlesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  bundles?: [ 
    {
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      bundleType?: string(name='BundleType'),
      description?: string(name='Description'),
      desktopType?: string(name='DesktopType'),
      desktopTypeAttribute?: {
        cpuCount?: int32(name='CpuCount'),
        gpuCount?: int32(name='GpuCount'),
        gpuSpec?: string(name='GpuSpec'),
        memorySize?: int32(name='MemorySize'),
      }(name='DesktopTypeAttribute'),
      bundleId?: string(name='BundleId'),
      imageId?: string(name='ImageId'),
      bundleName?: string(name='BundleName'),
    }
  ](name='Bundles'),
}

model DescribeBundlesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBundlesResponseBody(name='body'),
}

async function describeBundlesWithOptions(request: DescribeBundlesRequest, runtime: Util.RuntimeOptions): DescribeBundlesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBundles', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBundlesWithOptions(request, runtime);
}

model DescribeClientEventsRequest {
  regionId?: string(name='RegionId'),
  endUserId?: string(name='EndUserId'),
  desktopId?: string(name='DesktopId'),
  desktopIp?: string(name='DesktopIp'),
  directoryId?: string(name='DirectoryId'),
  eventType?: string(name='EventType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeClientEventsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  events?: [ 
    {
      status?: string(name='Status'),
      bytesReceived?: string(name='BytesReceived'),
      desktopIp?: string(name='DesktopIp'),
      eventTime?: string(name='EventTime'),
      bytesSend?: string(name='BytesSend'),
      aliUid?: string(name='AliUid'),
      desktopId?: string(name='DesktopId'),
      regionId?: string(name='RegionId'),
      eventId?: string(name='EventId'),
      directoryType?: string(name='DirectoryType'),
      eventType?: string(name='EventType'),
      endUserId?: string(name='EndUserId'),
      clientIp?: string(name='ClientIp'),
      clientOS?: string(name='ClientOS'),
      directoryId?: string(name='DirectoryId'),
      clientVersion?: string(name='ClientVersion'),
    }
  ](name='Events'),
}

model DescribeClientEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientEventsResponseBody(name='body'),
}

async function describeClientEventsWithOptions(request: DescribeClientEventsRequest, runtime: Util.RuntimeOptions): DescribeClientEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClientEvents', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClientEvents(request: DescribeClientEventsRequest): DescribeClientEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientEventsWithOptions(request, runtime);
}

model DescribeDesktopPolicysRequest {
  regionId?: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  desktopId?: [ string ](name='DesktopId'),
}

model DescribeDesktopPolicysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  describeDesktopPolicys?: [ 
    {
      usbRedirect?: string(name='UsbRedirect'),
      desktopId?: string(name='DesktopId'),
      watermark?: string(name='Watermark'),
      clipboard?: string(name='Clipboard'),
      localDrive?: string(name='LocalDrive'),
    }
  ](name='DescribeDesktopPolicys'),
}

model DescribeDesktopPolicysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopPolicysResponseBody(name='body'),
}

async function describeDesktopPolicysWithOptions(request: DescribeDesktopPolicysRequest, runtime: Util.RuntimeOptions): DescribeDesktopPolicysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopPolicys', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopPolicys(request: DescribeDesktopPolicysRequest): DescribeDesktopPolicysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopPolicysWithOptions(request, runtime);
}

model DescribeDesktopsRequest {
  regionId?: string(name='RegionId'),
  groupId?: string(name='GroupId'),
  desktopStatus?: string(name='DesktopStatus'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  userName?: string(name='UserName'),
  desktopName?: string(name='DesktopName'),
  directoryId?: string(name='DirectoryId'),
  policyGroupId?: string(name='PolicyGroupId'),
  desktopId?: [ string ](name='DesktopId'),
  endUserId?: [ string ](name='EndUserId'),
}

model DescribeDesktopsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  desktops?: [ 
    {
      creationTime?: string(name='CreationTime'),
      chargeType?: string(name='ChargeType'),
      desktopName?: string(name='DesktopName'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      disks?: [ 
        {
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
          diskId?: string(name='DiskId'),
        }
      ](name='Disks'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      policyGroupId?: string(name='PolicyGroupId'),
      desktopStatus?: string(name='DesktopStatus'),
      desktopType?: string(name='DesktopType'),
      gpuCount?: int32(name='GpuCount'),
      memory?: long(name='Memory'),
      gpuSpec?: string(name='GpuSpec'),
      imageId?: string(name='ImageId'),
      directoryId?: string(name='DirectoryId'),
      dataDiskCategory?: string(name='DataDiskCategory'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      networkInterfaceId?: long(name='NetworkInterfaceId'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopId?: string(name='DesktopId'),
      endUserIds?: [ string ](name='EndUserIds'),
      startTime?: string(name='StartTime'),
      cpu?: int32(name='Cpu'),
      expiredTime?: string(name='ExpiredTime'),
      connectionStatus?: string(name='ConnectionStatus'),
    }
  ](name='Desktops'),
}

model DescribeDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopsResponseBody(name='body'),
}

async function describeDesktopsWithOptions(request: DescribeDesktopsRequest, runtime: Util.RuntimeOptions): DescribeDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopsWithOptions(request, runtime);
}

model DescribeDesktopTypesRequest {
  regionId?: string(name='RegionId'),
  desktopTypeId?: string(name='DesktopTypeId'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
}

model DescribeDesktopTypesResponseBody = {
  requestId?: string(name='RequestId'),
  desktopTypes?: [ 
    {
      systemDiskSize?: string(name='SystemDiskSize'),
      desktopTypeId?: string(name='DesktopTypeId'),
      dataDiskSize?: string(name='DataDiskSize'),
      cpuCount?: string(name='CpuCount'),
      gpuCount?: int32(name='GpuCount'),
      gpuSpec?: string(name='GpuSpec'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      memorySize?: string(name='MemorySize'),
      allowDiskSize?: [ 
        {
          systemDiskSize?: int32(name='SystemDiskSize'),
          dataDiskSize?: int32(name='DataDiskSize'),
        }
      ](name='AllowDiskSize'),
    }
  ](name='DesktopTypes'),
}

model DescribeDesktopTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDesktopTypesResponseBody(name='body'),
}

async function describeDesktopTypesWithOptions(request: DescribeDesktopTypesRequest, runtime: Util.RuntimeOptions): DescribeDesktopTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDesktopTypes', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDesktopTypesWithOptions(request, runtime);
}

model DescribeDirectoriesRequest {
  regionId?: string(name='RegionId'),
  directoryType?: string(name='DirectoryType'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  directoryId?: [ string ](name='DirectoryId'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      enableInternetAccess?: boolean(name='EnableInternetAccess'),
      vpcId?: string(name='VpcId'),
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      domainPassword?: string(name='DomainPassword'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId'),
      domainUserName?: string(name='DomainUserName'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint'),
      desktopAccessType?: string(name='DesktopAccessType'),
      domainName?: string(name='DomainName'),
      directoryType?: string(name='DirectoryType'),
      dnsUserName?: string(name='DnsUserName'),
      logs?: [ 
        {
          step?: string(name='Step'),
          message?: string(name='Message'),
          timeStamp?: string(name='TimeStamp'),
          level?: string(name='Level'),
        }
      ](name='Logs'),
      trustPassword?: string(name='TrustPassword'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      name?: string(name='Name'),
      ADConnectors?: [ 
        {
          connectorStatus?: string(name='ConnectorStatus'),
          vSwitchId?: string(name='VSwitchId'),
          networkInterfaceId?: string(name='NetworkInterfaceId'),
          ADConnectorAddress?: string(name='ADConnectorAddress'),
        }
      ](name='ADConnectors'),
      dnsAddress?: [ string ](name='DnsAddress'),
      directoryId?: string(name='DirectoryId'),
    }
  ](name='Directories'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDirectoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDirectoriesResponseBody(name='body'),
}

async function describeDirectoriesWithOptions(request: DescribeDirectoriesRequest, runtime: Util.RuntimeOptions): DescribeDirectoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDirectories', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirectoriesWithOptions(request, runtime);
}

model DescribeImagesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  imageType?: string(name='ImageType'),
  imageStatus?: string(name='ImageStatus'),
  gpuCategory?: boolean(name='GpuCategory'),
  imageId?: [ string ](name='ImageId'),
}

model DescribeImagesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  images?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      imageType?: string(name='ImageType'),
      progress?: string(name='Progress'),
      description?: string(name='Description'),
      size?: int32(name='Size'),
      osType?: string(name='OsType'),
      dataDiskSize?: int32(name='DataDiskSize'),
      name?: string(name='Name'),
      gpuCategory?: boolean(name='GpuCategory'),
      imageId?: string(name='ImageId'),
    }
  ](name='Images'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImages', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  commandType?: string(name='CommandType'),
  invokeStatus?: string(name='InvokeStatus'),
  desktopId?: string(name='DesktopId'),
  includeOutput?: boolean(name='IncludeOutput'),
  contentEncoding?: string(name='ContentEncoding'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeInvocationsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  invocations?: [ 
    {
      creationTime?: string(name='CreationTime'),
      invocationStatus?: string(name='InvocationStatus'),
      invokeDesktops?: [ 
        {
          creationTime?: string(name='CreationTime'),
          updateTime?: string(name='UpdateTime'),
          finishTime?: string(name='FinishTime'),
          invocationStatus?: string(name='InvocationStatus'),
          repeats?: int32(name='Repeats'),
          output?: string(name='Output'),
          desktopId?: string(name='DesktopId'),
          dropped?: int32(name='Dropped'),
          stopTime?: string(name='StopTime'),
          exitCode?: long(name='ExitCode'),
          startTime?: string(name='StartTime'),
          errorInfo?: string(name='ErrorInfo'),
          errorCode?: string(name='ErrorCode'),
        }
      ](name='InvokeDesktops'),
      commandContent?: string(name='CommandContent'),
      invokeId?: string(name='InvokeId'),
      commandType?: string(name='CommandType'),
    }
  ](name='Invocations'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInvocations', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribePolicyGroupsRequest {
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  policyGroupId?: [ string ](name='PolicyGroupId'),
}

model DescribePolicyGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  describePolicyGroups?: [ 
    {
      policyStatus?: string(name='PolicyStatus'),
      watermarkType?: string(name='WatermarkType'),
      policyGroupId?: string(name='PolicyGroupId'),
      watermarkTransparency?: string(name='WatermarkTransparency'),
      usbRedirect?: string(name='UsbRedirect'),
      policyGroupType?: string(name='PolicyGroupType'),
      watermarkCustomText?: string(name='WatermarkCustomText'),
      watermark?: string(name='Watermark'),
      clipboard?: string(name='Clipboard'),
      name?: string(name='Name'),
      localDrive?: string(name='LocalDrive'),
    }
  ](name='DescribePolicyGroups'),
}

model DescribePolicyGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyGroupsResponseBody(name='body'),
}

async function describePolicyGroupsWithOptions(request: DescribePolicyGroupsRequest, runtime: Util.RuntimeOptions): DescribePolicyGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyGroups', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyGroupsWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  regionId?: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  snapshotId?: string(name='SnapshotId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      snapshotType?: string(name='SnapshotType'),
      snapshotName?: string(name='SnapshotName'),
      progress?: string(name='Progress'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      remainTime?: int32(name='RemainTime'),
      sourceDiskSize?: string(name='SourceDiskSize'),
      sourceDiskType?: string(name='SourceDiskType'),
      desktopId?: string(name='DesktopId'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshots', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeVirtualMFADevicesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  directoryId?: string(name='DirectoryId'),
  endUserId?: [ string ](name='EndUserId'),
}

model DescribeVirtualMFADevicesResponseBody = {
  virtualMFADevices?: [ 
    {
      gmtUnlock?: string(name='GmtUnlock'),
      serialNumber?: string(name='SerialNumber'),
      endUserId?: string(name='EndUserId'),
      consecutiveFails?: int32(name='ConsecutiveFails'),
      status?: string(name='status'),
      directoryId?: string(name='DirectoryId'),
      gmtEnabled?: string(name='GmtEnabled'),
    }
  ](name='VirtualMFADevices'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeVirtualMFADevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualMFADevicesResponseBody(name='body'),
}

async function describeVirtualMFADevicesWithOptions(request: DescribeVirtualMFADevicesRequest, runtime: Util.RuntimeOptions): DescribeVirtualMFADevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVirtualMFADevices', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): DescribeVirtualMFADevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualMFADevicesWithOptions(request, runtime);
}

model DescribeZonesRequest {
  regionId?: string(name='RegionId'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: [ 
    {
      zoneId?: string(name='ZoneId'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DoCheckResourceRequest {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId?: string(name='RegionId'),
}

model DoCheckResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  prompt?: string(name='Prompt'),
  level?: long(name='Level'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
}

model DoCheckResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DoCheckResourceResponseBody(name='body'),
}

async function doCheckResourceWithOptions(request: DoCheckResourceRequest, runtime: Util.RuntimeOptions): DoCheckResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DoCheckResource', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function doCheckResource(request: DoCheckResourceRequest): DoCheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doCheckResourceWithOptions(request, runtime);
}

model DoLogicalDeleteResourceRequest {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId?: string(name='RegionId'),
}

model DoLogicalDeleteResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  requestId?: string(name='RequestId'),
  invoker?: string(name='Invoker'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  success?: boolean(name='Success'),
  interrupt?: boolean(name='Interrupt'),
}

model DoLogicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DoLogicalDeleteResourceResponseBody(name='body'),
}

async function doLogicalDeleteResourceWithOptions(request: DoLogicalDeleteResourceRequest, runtime: Util.RuntimeOptions): DoLogicalDeleteResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DoLogicalDeleteResource', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function doLogicalDeleteResource(request: DoLogicalDeleteResourceRequest): DoLogicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doLogicalDeleteResourceWithOptions(request, runtime);
}

model DoPhysicalDeleteResourceRequest {
  invoker?: string(name='Invoker'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  hid?: long(name='Hid'),
  country?: string(name='Country'),
  taskIdentifier?: string(name='TaskIdentifier'),
  taskExtraData?: string(name='TaskExtraData'),
  gmtWakeup?: string(name='GmtWakeup'),
  regionId?: string(name='RegionId'),
}

model DoPhysicalDeleteResourceResponseBody = {
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  message?: string(name='Message'),
  taskIdentifier?: string(name='TaskIdentifier'),
  requestId?: string(name='RequestId'),
  invoker?: string(name='Invoker'),
  taskExtraData?: string(name='TaskExtraData'),
  country?: string(name='Country'),
  pk?: string(name='Pk'),
  bid?: string(name='Bid'),
  success?: boolean(name='Success'),
  interrupt?: boolean(name='Interrupt'),
}

model DoPhysicalDeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DoPhysicalDeleteResourceResponseBody(name='body'),
}

async function doPhysicalDeleteResourceWithOptions(request: DoPhysicalDeleteResourceRequest, runtime: Util.RuntimeOptions): DoPhysicalDeleteResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DoPhysicalDeleteResource', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function doPhysicalDeleteResource(request: DoPhysicalDeleteResourceRequest): DoPhysicalDeleteResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return doPhysicalDeleteResourceWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  taskId?: string(name='TaskId'),
  desktopId?: string(name='DesktopId'),
}

model GetConnectionTicketResponseBody = {
  ticket?: string(name='Ticket'),
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  taskStatus?: string(name='TaskStatus'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetConnectionTicket', '2020-09-30', 'HTTP', 'POST', 'AK', 'json', req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model ListDirectoryUsersRequest {
  regionId?: string(name='RegionId'),
  filter?: string(name='Filter'),
  directoryId?: string(name='DirectoryId'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model ListDirectoryUsersResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      endUser?: string(name='EndUser'),
    }
  ](name='Users'),
}

model ListDirectoryUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectoryUsersResponseBody(name='body'),
}

async function listDirectoryUsersWithOptions(request: ListDirectoryUsersRequest, runtime: Util.RuntimeOptions): ListDirectoryUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDirectoryUsers', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDirectoryUsersWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model LockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model LockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model LockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LockVirtualMFADeviceResponseBody(name='body'),
}

async function lockVirtualMFADeviceWithOptions(request: LockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): LockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): LockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockVirtualMFADeviceWithOptions(request, runtime);
}

model ModifyADConnectorDirectoryRequest {
  regionId?: string(name='RegionId'),
  directoryId?: string(name='DirectoryId'),
  domainName?: string(name='DomainName'),
  domainUserName?: string(name='DomainUserName'),
  domainPassword?: string(name='DomainPassword'),
  directoryName?: string(name='DirectoryName'),
  subDomainName?: string(name='SubDomainName'),
  mfaEnabled?: boolean(name='MfaEnabled'),
  dnsAddress?: [ string ](name='DnsAddress'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress'),
}

model ModifyADConnectorDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyADConnectorDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyADConnectorDirectoryResponseBody(name='body'),
}

async function modifyADConnectorDirectoryWithOptions(request: ModifyADConnectorDirectoryRequest, runtime: Util.RuntimeOptions): ModifyADConnectorDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyADConnectorDirectory', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): ModifyADConnectorDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyADConnectorDirectoryWithOptions(request, runtime);
}

model ModifyDesktopNameRequest {
  regionId?: string(name='RegionId'),
  newDesktopName?: string(name='NewDesktopName'),
  desktopId?: string(name='DesktopId'),
}

model ModifyDesktopNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDesktopNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopNameResponseBody(name='body'),
}

async function modifyDesktopNameWithOptions(request: ModifyDesktopNameRequest, runtime: Util.RuntimeOptions): ModifyDesktopNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopName', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopName(request: ModifyDesktopNameRequest): ModifyDesktopNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopNameWithOptions(request, runtime);
}

model ModifyDesktopPolicysRequest {
  regionId?: string(name='RegionId'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
  desktopId?: [ string ](name='DesktopId'),
}

model ModifyDesktopPolicysResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      success?: string(name='Success'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      desktopId?: string(name='DesktopId'),
    }
  ](name='Results'),
}

model ModifyDesktopPolicysResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopPolicysResponseBody(name='body'),
}

async function modifyDesktopPolicysWithOptions(request: ModifyDesktopPolicysRequest, runtime: Util.RuntimeOptions): ModifyDesktopPolicysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopPolicys', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopPolicys(request: ModifyDesktopPolicysRequest): ModifyDesktopPolicysResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopPolicysWithOptions(request, runtime);
}

model ModifyDesktopsPolicyGroupRequest {
  regionId?: string(name='RegionId'),
  policyGroupId?: string(name='PolicyGroupId'),
  desktopId?: [ string ](name='DesktopId'),
}

model ModifyDesktopsPolicyGroupResponseBody = {
  requestId?: string(name='RequestId'),
  modifyResults?: [ 
    {
      code?: string(name='Code'),
      message?: int32(name='Message'),
      desktopId?: string(name='DesktopId'),
    }
  ](name='ModifyResults'),
}

model ModifyDesktopsPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDesktopsPolicyGroupResponseBody(name='body'),
}

async function modifyDesktopsPolicyGroupWithOptions(request: ModifyDesktopsPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyDesktopsPolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDesktopsPolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDesktopsPolicyGroupWithOptions(request, runtime);
}

model ModifyEntitlementRequest {
  regionId?: string(name='RegionId'),
  desktopId?: string(name='DesktopId'),
  endUserId?: [ string ](name='EndUserId'),
}

model ModifyEntitlementResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEntitlementResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEntitlementResponseBody(name='body'),
}

async function modifyEntitlementWithOptions(request: ModifyEntitlementRequest, runtime: Util.RuntimeOptions): ModifyEntitlementResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEntitlement', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEntitlementWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageAttribute', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyPolicyGroupRequest {
  regionId?: string(name='RegionId'),
  policyGroupId?: string(name='PolicyGroupId'),
  name?: string(name='Name'),
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
  watermarkType?: string(name='WatermarkType'),
  watermarkCustomText?: string(name='WatermarkCustomText'),
  watermarkTransparency?: string(name='WatermarkTransparency'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPolicyGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyGroupResponseBody(name='body'),
}

async function modifyPolicyGroupWithOptions(request: ModifyPolicyGroupRequest, runtime: Util.RuntimeOptions): ModifyPolicyGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPolicyGroup', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyGroupWithOptions(request, runtime);
}

model PayOrderCallbackRequest {
  data?: string(name='data'),
}

model PayOrderCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model PayOrderCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: PayOrderCallbackResponseBody(name='body'),
}

async function payOrderCallbackWithOptions(request: PayOrderCallbackRequest, runtime: Util.RuntimeOptions): PayOrderCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PayOrderCallback', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function payOrderCallback(request: PayOrderCallbackRequest): PayOrderCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return payOrderCallbackWithOptions(request, runtime);
}

model RebootDesktopsRequest {
  regionId?: string(name='RegionId'),
  desktopId?: [ string ](name='DesktopId'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: RebootDesktopsResponseBody(name='body'),
}

async function rebootDesktopsWithOptions(request: RebootDesktopsRequest, runtime: Util.RuntimeOptions): RebootDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootDesktopsWithOptions(request, runtime);
}

model RenewDesktopsRequest {
  regionId?: string(name='RegionId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  autoPay?: boolean(name='AutoPay'),
  desktopId?: [ string ](name='DesktopId'),
}

model RenewDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RenewDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDesktopsResponseBody(name='body'),
}

async function renewDesktopsWithOptions(request: RenewDesktopsRequest, runtime: Util.RuntimeOptions): RenewDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewDesktops(request: RenewDesktopsRequest): RenewDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDesktopsWithOptions(request, runtime);
}

model ResetSnapshotRequest {
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ResetSnapshotResponseBody(name='body'),
}

async function resetSnapshotWithOptions(request: ResetSnapshotRequest, runtime: Util.RuntimeOptions): ResetSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetSnapshot', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSnapshotWithOptions(request, runtime);
}

model RunCommandRequest {
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  commandContent?: string(name='CommandContent'),
  timeout?: long(name='Timeout'),
  contentEncoding?: string(name='ContentEncoding'),
  desktopId?: [ string ](name='DesktopId'),
}

model RunCommandResponseBody = {
  requestId?: string(name='RequestId'),
  invokeId?: string(name='InvokeId'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunCommand', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model StartDesktopsRequest {
  regionId?: string(name='RegionId'),
  desktopId?: [ string ](name='DesktopId'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: StartDesktopsResponseBody(name='body'),
}

async function startDesktopsWithOptions(request: StartDesktopsRequest, runtime: Util.RuntimeOptions): StartDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDesktopsWithOptions(request, runtime);
}

model StopDesktopsRequest {
  regionId?: string(name='RegionId'),
  desktopId?: [ string ](name='DesktopId'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDesktopsResponse = {
  headers: map[string]string(name='headers'),
  body: StopDesktopsResponseBody(name='body'),
}

async function stopDesktopsWithOptions(request: StopDesktopsRequest, runtime: Util.RuntimeOptions): StopDesktopsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDesktops', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDesktopsWithOptions(request, runtime);
}

model StopInvocationRequest {
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  desktopId?: [ string ](name='DesktopId'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  body: StopInvocationResponseBody(name='body'),
}

async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInvocation', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnlockVirtualMFADeviceRequest {
  regionId?: string(name='RegionId'),
  serialNumber?: string(name='SerialNumber'),
}

model UnlockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnlockVirtualMFADeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockVirtualMFADeviceResponseBody(name='body'),
}

async function unlockVirtualMFADeviceWithOptions(request: UnlockVirtualMFADeviceRequest, runtime: Util.RuntimeOptions): UnlockVirtualMFADeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockVirtualMFADevice', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): UnlockVirtualMFADeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockVirtualMFADeviceWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2020-09-30', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

