/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ecd';
  @version = '2020-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CdsFileShareLinkModel {
  accessCount?: long(name='AccessCount'),
  createTime?: string(name='CreateTime'),
  creator?: string(name='Creator'),
  description?: string(name='Description'),
  disableDownload?: boolean(name='DisableDownload'),
  disablePreview?: boolean(name='DisablePreview'),
  disableSave?: boolean(name='DisableSave'),
  downloadCount?: long(name='DownloadCount'),
  downloadLimit?: long(name='DownloadLimit'),
  driveId?: string(name='DriveId'),
  expiration?: string(name='Expiration'),
  expired?: boolean(name='Expired'),
  fileIds?: string(name='FileIds'),
  modifiyTime?: string(name='ModifiyTime'),
  previewCount?: long(name='PreviewCount'),
  previewLimit?: long(name='PreviewLimit'),
  reportCount?: long(name='ReportCount'),
  saveCount?: long(name='SaveCount'),
  saveLimit?: long(name='SaveLimit'),
  shareId?: string(name='ShareId'),
  shareLink?: string(name='ShareLink'),
  shareName?: string(name='ShareName'),
  sharePwd?: string(name='SharePwd'),
  status?: string(name='Status'),
  videoPreviewCount?: long(name='VideoPreviewCount'),
}

model FilePermissionMember {
  cdsIdentity: {
    id: string(name='Id', description='This parameter is required.'),
    type: string(name='Type', description='This parameter is required.'),
  }(name='CdsIdentity', description='This parameter is required.'),
  disinheritSubGroup?: boolean(name='DisinheritSubGroup'),
  expireTime?: long(name='ExpireTime'),
  roleId: string(name='RoleId', description='This parameter is required.'),
}

model Permission {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  destCidrIp?: string(name='DestCidrIp'),
  ipProtocol?: string(name='IpProtocol'),
  nicType?: string(name='NicType'),
  policy?: string(name='Policy'),
  portRange?: string(name='PortRange'),
  priority?: string(name='Priority'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model ActivateOfficeSiteRequest {
  officeSiteId: string(name='OfficeSiteId', description='The ID of the convenience office network that is locked.

This parameter is required.', example='cn-hangzhou+dir-803704****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ActivateOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model ActivateOfficeSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateOfficeSiteResponseBody(name='body'),
}

/**
  * @description If you do not create any cloud computer in a convenience office network within 15 days, the office network is automatically locked and virtual private cloud (VPC) resources are released. If you want to resume the office network, you can call this operation to unlock the office network.
  * @param request  the request parameters of ActivateOfficeSite  ActivateOfficeSiteRequest
  * @return ActivateOfficeSiteResponse
 */
async function activateOfficeSite(request: ActivateOfficeSiteRequest): ActivateOfficeSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateOfficeSite', 'POST', '/', 'json', false, 'json', request);
}

model AddDesktopOversoldUserGroupRequest {
  imageId?: string(name='ImageId', position='Query'),
  name?: string(name='Name', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model AddDesktopOversoldUserGroupResponseBody = {
  data?: {
    userGroupId?: string(name='UserGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddDesktopOversoldUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDesktopOversoldUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDesktopOversoldUserGroup  AddDesktopOversoldUserGroupRequest
  * @return AddDesktopOversoldUserGroupResponse
 */
async function addDesktopOversoldUserGroup(request: AddDesktopOversoldUserGroupRequest): AddDesktopOversoldUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDesktopOversoldUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddDevicesRequest {
  clientType: int32(name='ClientType', description='The type of the client.

Valid values:

*   1: hardware client.
*   2: software client.

This parameter is required.', example='2', position='Query'),
  deviceIds: [ string ](name='DeviceIds', description='The IDs of the devices. You can specify up to 200 IDs.

This parameter is required.', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
}

model AddDevicesResponseBody = {
  code?: string(name='Code', description='The execution result. If the request was successful, `success` is returned. If the request failed, an error message is returned.', example='success'),
  message?: string(name='Message', description='The returned error message. This parameter is not returned if the value of Code is `success`.', example='The parameter is not specified.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
}

model AddDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDevicesResponseBody(name='body'),
}

/**
  * @description Each device can be registered in only one Alibaba Cloud account. If you register a device that has been registered in another Alibaba Cloud account, an error is reported.
  * @param request  the request parameters of AddDevices  AddDevicesRequest
  * @return AddDevicesResponse
 */
async function addDevices(request: AddDevicesRequest): AddDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDevices', 'POST', '/', 'json', false, 'json', request);
}

model AddFilePermissionRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk whose folder you want to share.

This parameter is required.', example='cn-hangzhou+cds-352282****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The ID of the file.

This parameter is required.', example='6333e553a133ce21e6f747cf948bb9ef95d7****', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the team that uses cloud disks in Cloud Drive Service.', example='cg-i1ruuudp92qpj****', position='Query'),
  memberList: [ 
    {
      cdsIdentity: {
        id: string(name='Id', description='The ID of the user.

This parameter is required.', example='user01'),
        type: string(name='Type', description='The type of the user.

Valid values:

*   <!-- -->

    IT_Group

    <!-- -->

    <!-- -->

*   <!-- -->

    IT_User

    <!-- -->

    <!-- -->

This parameter is required.', example='IT_User'),
      }(name='CdsIdentity', description='The user of the cloud disk.

This parameter is required.'),
      disinheritSubGroup?: boolean(name='DisinheritSubGroup', description='Specifies whether the users of the child group can inherit the folder permissions.', example='false'),
      expireTime?: long(name='ExpireTime', description='The time when the authorization expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The value never expires. You can specify a value that is predefined by the system for this parameter. Example: 4775500800000.', example='4775500800000'),
      roleId: string(name='RoleId', description='The ID of the role to which you want to attach the folder permissions. To configure the folder permissions: you can specify a role or create custom operation permissions. You can use RoleId to specify a role. RoleId is mutually exclusive with ActionList. If you specify both of them, the value of RoleId takes precedence.

Valid values:

* SystemFileEditorWithoutShareLink
* SystemFileUploaderAndDownloaderWithShareLink
* SystemFileDownloader
* SystemFileEditorWithoutDelete
* SystemFileOwner
* SystemFileDownloaderWithShareLink
* SystemFileUploaderAndViewer
* SystemFileViewer
* SystemFileEditor
* SystemFileUploaderWithShareLink
* SystemFileUploader
* SystemFileUploaderAndDownloader
* SystemFileMetaViewer

This parameter is required.', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList', description='The members who are granted the folder permissions.

This parameter is required.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the folder. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model AddFilePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddFilePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFilePermissionResponseBody(name='body'),
}

/**
  * @description You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
  * @param request  the request parameters of AddFilePermission  AddFilePermissionRequest
  * @return AddFilePermissionResponse
 */
async function addFilePermission(request: AddFilePermissionRequest): AddFilePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFilePermission', 'POST', '/', 'json', false, 'json', request);
}

model AddUserToDesktopGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](https://help.aliyun.com/document_detail/25693.html).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer share.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the cloud computer shares.', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The regular users to whom you want to assign the desktop group.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userOuPath?: string(name='UserOuPath', position='Query'),
}

model AddUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AddUserToDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserToDesktopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserToDesktopGroup  AddUserToDesktopGroupRequest
  * @return AddUserToDesktopGroupResponse
 */
async function addUserToDesktopGroup(request: AddUserToDesktopGroupRequest): AddUserToDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddUserToDesktopOversoldUserGroupRequest {
  addUserAmount?: int32(name='AddUserAmount', position='Query'),
  endUserId?: string(name='EndUserId', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  userGroupId?: string(name='UserGroupId', position='Query'),
}

model AddUserToDesktopOversoldUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUserToDesktopOversoldUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserToDesktopOversoldUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserToDesktopOversoldUserGroup  AddUserToDesktopOversoldUserGroupRequest
  * @return AddUserToDesktopOversoldUserGroupResponse
 */
async function addUserToDesktopOversoldUserGroup(request: AddUserToDesktopOversoldUserGroupRequest): AddUserToDesktopOversoldUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToDesktopOversoldUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ApplyAutoSnapshotPolicyRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 20 IDs.

This parameter is required.', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the automatic snapshot policy.

This parameter is required.', example='sp-ejtum8j5tfcw7****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='63740E03-1B4B-5A18-AC27-2745A4F2****'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @description You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
  * After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
  * @param request  the request parameters of ApplyAutoSnapshotPolicy  ApplyAutoSnapshotPolicyRequest
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ApplyCoordinatePrivilegeRequest {
  coId: string(name='CoId', description='The ID of the application for the coordinate permissions.

This parameter is required.', example='co-fqsm6e8ee75w61fp9', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='zhangsan', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userType: string(name='UserType', description='The type of user who requires the coordinate permissions.

Valid value: TENANT_ADMIN.

This parameter is required.', example='TENANT_ADMIN', position='Query'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='8b241d415da244a6936d6d6fa4f20f4d', position='Query'),
}

model ApplyCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C43EEAC3-84F8-5C1E-A067-4751C3D1422E'),
}

model ApplyCoordinatePrivilegeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCoordinatePrivilegeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyCoordinatePrivilege  ApplyCoordinatePrivilegeRequest
  * @return ApplyCoordinatePrivilegeResponse
 */
async function applyCoordinatePrivilege(request: ApplyCoordinatePrivilegeRequest): ApplyCoordinatePrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyCoordinatePrivilege', 'POST', '/', 'json', false, 'json', request);
}

model ApplyCoordinationForMonitoringRequest {
  coordinatePolicyType: string(name='CoordinatePolicyType', description='The coordination policy.

Set the value to FULL_CONTROL.

*   The value FULL_CONTROL specifies that the cloud desktop is shared and remote access to the cloud desktop is allowed.

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='FULL_CONTROL', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who initiates the stream collaboration. If the initiator is the administrator, do not specify this parameter.', example='alice', position='Query'),
  initiatorType?: string(name='InitiatorType', description='The type of the initiator.

Set the value to ADMIN_INITIATE.

*   The value ADMIN_INITIATE specifies that the administrator initiates the coordination request.

    <!-- -->

    <!-- -->

    <!-- -->', example='ADMIN_INITIATE', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://next.api.aliyun.com/document/ecd/2020-09-30/DescribeRegions) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceCandidates: [ 
    {
      ownerAliUid: long(name='OwnerAliUid', description='The ID of the Alibaba Cloud account to which the current cloud desktop belongs.

This parameter is required.', example='130247021517****'),
      ownerEndUserId?: string(name='OwnerEndUserId', description='The ID of the current end user.', example='alice'),
      resourceId: string(name='ResourceId', description='The ID of the cloud desktop.

This parameter is required.', example='ecd-08zhejm3h7ilr****'),
      resourceName: string(name='ResourceName', description='The name of the cloud desktop.

This parameter is required.', example='TestDesktop'),
      resourceProperties?: string(name='ResourceProperties', description='The properties of the cloud desktop.', example='TestProperty'),
      resourceRegionId: string(name='ResourceRegionId', description='The region where the resource resides.

This parameter is required.', example='cn-hangzhou'),
      resourceType: string(name='ResourceType', description='The resource type.

Set the value to CLOUD_DESKTOP.

*   The value CLOUD_DESKTOP specifies that the resource is a cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='CLOUD_DESKTOP'),
    }
  ](name='ResourceCandidates', description='The list of cloud desktops that run the collaboration task at the same time.

This parameter is required.', position='Query'),
  uuid: string(name='Uuid', description='The universally unique identifier (UUID) of the device.

This parameter is required.', example='62f2f1f252f04e0e9d8bc****', position='Query'),
}

model ApplyCoordinationForMonitoringResponseBody = {
  coordinateFlowModels?: [ 
    {
      coId?: string(name='CoId', description='The ID of the stream collaboration.', example='co-0sot77uale3****'),
      coordinateStatus?: string(name='CoordinateStatus', description='The current status of the collaboration task.

Valid values:

*   COORDINATING: The collaboration task is being executed.

*   TERMINATING: The collaboration task is being terminated.

*   TERMINATED: The collaboration task is terminated.

*   PENDING: The collaboration task is pending to be executed.', example='PENDING'),
      coordinateTicket?: string(name='CoordinateTicket', description='The ticket that is used to establish the Adaptive Streaming Protocol (ASP)-based connection.', example='1VDQ0VTUw0KW0Rlc2t0b3BdDQpHV1Rva2VuPTAwTzgwL3liS25zUEVGdkF6eU1Pc1ExeHZWdmk4VEE3NFJvU1V1d0dPYm1BNkNJWklDMHVNQklWcjU2NS80S0ZQekQ4aGFTR0ZHelZqMTFGbkRpWWgvUFF1Zm1xSXNGdFRFNFRWMExJNit3TkU0L2RMb04wNXBBSE5Tc3M4dWFXY3lwWE****'),
      initiatorType?: string(name='InitiatorType', description='The type of the initiator.

Valid values:

*   ADMIN_INITIATE_FORCE: The administrator forcibly initiates the collaboration request.

*   ADMIN_INITIATE: The administrator initiates the collaboration request.

*   COORDINATOR_INITIATE_FORCE: The coordinator forcibly initiates the collaboration request.', example='COORDINATOR_INITIATE_FORCE'),
      ownerUserId?: string(name='OwnerUserId', description='The ID of the Alibaba Cloud account of the end user.', example='alice'),
      resourceId?: string(name='ResourceId', description='The ID of the cloud desktop.', example='ecd-96vi03f9emqnl****'),
      resourceName?: string(name='ResourceName', description='The name of the cloud desktop.', example='TestDesktop'),
    }
  ](name='CoordinateFlowModels', description='The list of stream collaboration models.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApplyCoordinationForMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCoordinationForMonitoringResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyCoordinationForMonitoring  ApplyCoordinationForMonitoringRequest
  * @return ApplyCoordinationForMonitoringResponse
 */
async function applyCoordinationForMonitoring(request: ApplyCoordinationForMonitoringRequest): ApplyCoordinationForMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyCoordinationForMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model ApproveFotaUpdateRequest {
  appVersion: string(name='AppVersion', description='Mirror version.

This parameter is required.', example='0.0.1-D-20220513.143129', position='Query'),
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-138dsptkrt00u****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ApproveFotaUpdateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveFotaUpdateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveFotaUpdateResponseBody(name='body'),
}

/**
  * @description The cloud computers for which you want to allow image updates must be in the Running state.
  * @param request  the request parameters of ApproveFotaUpdate  ApproveFotaUpdateRequest
  * @return ApproveFotaUpdateResponse
 */
async function approveFotaUpdate(request: ApproveFotaUpdateRequest): ApproveFotaUpdateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveFotaUpdate', 'POST', '/', 'json', false, 'json', request);
}

model AssociateNetworkPackageRequest {
  networkPackageId: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan.

This parameter is required.', example='np-e0iodl3yzb62q****', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The ID of the office network. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) to obtain the ID of the office network to which a premium bandwidth plan is bound.

This parameter is required.', example='cn-hangzhou+dir-*********', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model AssociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AssociateNetworkPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateNetworkPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AssociateNetworkPackage  AssociateNetworkPackageRequest
  * @return AssociateNetworkPackageResponse
 */
async function associateNetworkPackage(request: AssociateNetworkPackageRequest): AssociateNetworkPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateNetworkPackage', 'POST', '/', 'json', false, 'json', request);
}

model AttachCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.

This parameter is required.', example='cen-3gwy16dojz1m65****', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', description='The Alibaba Cloud account to which the CEN instance belongs.

*   If you own the CEN instance, you can skip this parameter.
*   If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.', example='102681951715****', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.', example='12****', position='Query'),
}

model AttachCenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachCenResponseBody(name='body'),
}

/**
  * @description Prerequisites
  * *   A CEN instance is created.
  * *   The office network is an advanced office network, and the account system type is convenient account.
  * >  The office network is added to the CEN instance when you create the instance. An office network can be added to only one CEN instance.
  * @param request  the request parameters of AttachCen  AttachCenRequest
  * @return AttachCenResponse
 */
async function attachCen(request: AttachCenRequest): AttachCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachCen', 'POST', '/', 'json', false, 'json', request);
}

model AttachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) office network.', example='xn--0zw****', position='Query'),
  clientType: int32(name='ClientType', description='The type of the client.

Valid values:

*   1: hardware client.

This parameter is required.', example='2', position='Query'),
  deviceId: string(name='DeviceId', description='The serial number (SN) of the hardware client.

This parameter is required.', example='111810122200F0C24CF7F1BF-*05AY****', position='Query'),
  directoryId?: string(name='DirectoryId', description='The ID of the convenient office network.', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  endUserId: string(name='EndUserId', description='The ID of the user that you want to bind to the hardware client.

This parameter is required.', example='moli', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
  userType?: string(name='UserType', description='The account type of the user.

Valid values:

*   AD: enterprise AD account.
*   SIMPLE: convenience account', example='SIMPLE', position='Query'),
}

model AttachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AttachEndUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachEndUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachEndUser  AttachEndUserRequest
  * @return AttachEndUserResponse
 */
async function attachEndUser(request: AttachEndUserRequest): AttachEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEndUser', 'POST', '/', 'json', false, 'json', request);
}

model BindConfigGroupRequest {
  groupId: string(name='GroupId', description='The ID of the configuration group.

This parameter is required.', example='ccg-0chlk9b65lj8z****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
  resourceInfos: [ 
    {
      productType?: string(name='ProductType', description='The service type of the resource.

Valid value:

*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='ecd-1bo4xotjvwyon****'),
      resourceRegionId?: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

*   RESOURCE_GROUP: the resource group
*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
    }
  ](name='ResourceInfos', description='The resources to which you want to bind the configuration group.

This parameter is required.', position='Query'),
}

model BindConfigGroupResponseBody = {
  groupId?: string(name='GroupId', description='The ID of the configuration group.', example='ccg-0chlk9b65lj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E54EB497-D7B7-5F04-B744-D8DFA7B******'),
}

model BindConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindConfigGroup  BindConfigGroupRequest
  * @return BindConfigGroupResponse
 */
async function bindConfigGroup(request: BindConfigGroupRequest): BindConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model CancelAutoSnapshotPolicyRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 50 IDs. The IDs cannot be an empty string. The IDs can be up to 64 characters in length and cannot contain `http://` or `https://`. The IDs cannot start with `acs:` or `aliyun`.

This parameter is required.', position='Query'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-78lhzpe7kjfnd****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelAutoSnapshotPolicy  CancelAutoSnapshotPolicyRequest
  * @return CancelAutoSnapshotPolicyResponse
 */
async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CancelCdsFileShareLinkRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-352282****', position='Query'),
  shareId: string(name='ShareId', description='The ID of the file sharing task.

This parameter is required.', example='7JQX1Fsw****', position='Query'),
}

model CancelCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='200'),
  data?: boolean(name='Data', description='The data information.', example='true'),
  message?: string(name='Message', description='The error message that is returned if the request failed. This parameter is not returned if the value of Code is `success`.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CancelCdsFileShareLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCdsFileShareLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCdsFileShareLink  CancelCdsFileShareLinkRequest
  * @return CancelCdsFileShareLinkResponse
 */
async function cancelCdsFileShareLink(request: CancelCdsFileShareLinkRequest): CancelCdsFileShareLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCdsFileShareLink', 'POST', '/', 'json', false, 'json', request);
}

model CancelCoordinationForMonitoringRequest {
  coIds: [ string ](name='CoIds', description='The IDs of stream collaboration tasks.

This parameter is required.', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user that initiates stream collaboration. If the initiator is the administrator, skip this parameter.', example='alice', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userType?: string(name='UserType', description='The type of the user.

Valid value:

* TENANT_ADMIN: administrator.', example='TENANT_ADMIN', position='Query'),
}

model CancelCoordinationForMonitoringResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelCoordinationForMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCoordinationForMonitoringResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCoordinationForMonitoring  CancelCoordinationForMonitoringRequest
  * @return CancelCoordinationForMonitoringResponse
 */
async function cancelCoordinationForMonitoring(request: CancelCoordinationForMonitoringRequest): CancelCoordinationForMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCoordinationForMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model CancelCopyImageRequest {
  imageId: string(name='ImageId', description='The ID of the new image in the destination region.

This parameter is required.', example='m-gx2x1dhsmusr2****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the image is copied.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model CancelCopyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCopyImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCopyImage  CancelCopyImageRequest
  * @return CancelCopyImageResponse
 */
async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CloneCenterPolicyRequest {
  businessType: int32(name='BusinessType', description='This parameter is required.', example='1', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='testPolicyGroupName', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='This parameter is required.', example='pg-gx2x1dhsmthe9****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
}

model CloneCenterPolicyResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CloneCenterPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneCenterPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneCenterPolicy  CloneCenterPolicyRequest
  * @return CloneCenterPolicyResponse
 */
async function cloneCenterPolicy(request: CloneCenterPolicyRequest): CloneCenterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneCenterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ClonePolicyGroupRequest {
  name: string(name='Name', description='The name of the cloud computer policy that you want to create.

This parameter is required.', example='testPolicyGroupName', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='The ID of the destination cloud computer policy that you want to clone.

This parameter is required.', example='pg-gx2x1dhsmthe9****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ClonePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the new cloud computer policy.', example='pg-7jcaznnx6go6n****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ClonePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClonePolicyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ClonePolicyGroup  ClonePolicyGroupRequest
  * @return ClonePolicyGroupResponse
 */
async function clonePolicyGroup(request: ClonePolicyGroupRequest): ClonePolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClonePolicyGroup', 'POST', '/', 'json', false, 'json', request);
}

model CompleteCdsFileRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-shanghai+cds-465878****', position='Query'),
  endUserId?: string(name='EndUserId', description='The name of the end user.', example='test0', position='Query'),
  fileId: string(name='FileId', description='The file ID. An ID is the unique identifier of a file.

This parameter is required.', example='635a316c94f40f35f5354da29b2aee88c9d1****', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the DescribeRegions operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  uploadId: string(name='UploadId', description='The ID of the file uploading task.

This parameter is required.', example='6C48B55A1FAC4E1A9E0579059514****', position='Query'),
}

model CompleteCdsFileResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05C2791F-41A7-5E7C-B5E4-1401FD0E****'),
}

model CompleteCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompleteCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompleteCdsFile  CompleteCdsFileRequest
  * @return CompleteCdsFileResponse
 */
async function completeCdsFile(request: CompleteCdsFileRequest): CompleteCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompleteCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model ConfigADConnectorTrustRequest {
  officeSiteId: string(name='OfficeSiteId', description='The ID of the enterprise AD office network.

This parameter is required.', example='cn-hangzhou+dir-778418****', position='Query'),
  rdsLicenseDomain?: boolean(name='RdsLicenseDomain', description='Specifies whether to configure a trust password for the Remote Desktop Services (RDS) License Domain of the enterprise AD office network.

Valid values:

*   true: configures a trust password for the RDS License Domain of the AD office network.

*   false: configures a trust password for a regular enterprise AD office network.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  trustKey: string(name='TrustKey', description='The trust password. You can specify the password when you configure a trust relationship between the AD domain and the ecd.acs domain.

This parameter is required.', example='password123***', position='Query'),
}

model ConfigADConnectorTrustResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorTrustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigADConnectorTrustResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigADConnectorTrust  ConfigADConnectorTrustRequest
  * @return ConfigADConnectorTrustResponse
 */
async function configADConnectorTrust(request: ConfigADConnectorTrustRequest): ConfigADConnectorTrustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigADConnectorTrust', 'POST', '/', 'json', false, 'json', request);
}

model ConfigADConnectorUserRequest {
  domainPassword: string(name='DomainPassword', description='The password of the AD user that has the permissions to join computers to domains.

This parameter is required.', example='testPassword', position='Query'),
  domainUserName: string(name='DomainUserName', description='The username of the AD user that has the permissions to join computers to domains.

After the username is configured, the cloud desktops in the same AD workspace are joined to the specified OU.

This parameter is required.', example='Administrator', position='Query'),
  OUName?: string(name='OUName', description='The name of the OU in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) to obtain the OU name.', example='example.com/Domain Controllers', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The ID of the AD workspace.

This parameter is required.', example='cn-hangzhou+dir-778418****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ConfigADConnectorUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ConfigADConnectorUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigADConnectorUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigADConnectorUser  ConfigADConnectorUserRequest
  * @return ConfigADConnectorUserResponse
 */
async function configADConnectorUser(request: ConfigADConnectorUserRequest): ConfigADConnectorUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigADConnectorUser', 'POST', '/', 'json', false, 'json', request);
}

model CopyCdsFileRequest {
  autoRename?: boolean(name='AutoRename', description='Specifies whether to automatically rename the file if a file that has the same name exists in the folder to which you want to copy the file. Default value: false.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-352282****', position='Query'),
  endUserId?: string(name='EndUserId', description='The user ID that you want to use to access the cloud disk.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The file ID. You can call the CreateCdsFile operation to query the file ID.

This parameter is required.', example='640985a0ca2f71f489d2497682ca0bf468de****', position='Query'),
  fileReceiverId?: string(name='FileReceiverId', description='目标复制文件所在的个人空间ID（即UserId，您可以在DescribeCloudDriveUsers接口返回的报文中获取。）或者目标复制文件所在的团队空间ID（即GroupId，您可以在DescribeCloudDriveGroups接口返回的报文中获取。）
> FileReceiverId和FileReceiverType都为空时，默认复制到文件所在的个人空间。
>', example='user02', position='Query'),
  fileReceiverType?: string(name='FileReceiverType', description='文件所属的空间类型。', example='user', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  parentFolderId: string(name='ParentFolderId', description='The ID of the parent folder of the folder to which you want to copy the file. If you want to copy the file to the root directory, set this parameter to root.

This parameter is required.', example='root', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CopyCdsFileResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  copyCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', description='The ID of the asynchronous task. This parameter is not returned if you copy a file. This parameter is returned if you copy a folder in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.', example='4221bf6e6ab43a255edc4463bffa6f5f5d31****'),
    fileId?: string(name='FileId', description='The ID of the copied file or folder.', example='6400727cb878821bcb414615a609b4072463****'),
  }(name='CopyCdsFileModel', description='The details about the file copying.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='93AD30C1-16B8-5C54-AD23-A51FF53F****'),
  success?: string(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CopyCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CopyCdsFile  CopyCdsFileRequest
  * @return CopyCdsFileResponse
 */
async function copyCdsFile(request: CopyCdsFileRequest): CopyCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model CopyImageRequest {
  destinationDescription?: string(name='DestinationDescription', description='The description of the new image in the destination region. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a test.', position='Query'),
  destinationImageName: string(name='DestinationImageName', description='The name of the new image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

This parameter is required.', example='Office_Shanghai', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', description='The ID of the destination region. The ID must be different from the current region ID of the image. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-shenzhen', position='Query'),
  imageId: string(name='ImageId', description='The ID of the image that is copied to the destination region.

This parameter is required.', example='m-gx2x1dhsmusr2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image that is being copied.', example='m-2g65ljy3ynrdq****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28A40F12-F340-442B-A35F-46EF6A03****'),
}

model CopyImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CopyImage  CopyImageRequest
  * @return CopyImageResponse
 */
async function copyImage(request: CopyImageRequest): CopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateADConnectorDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method in which the cloud computer is connected.

Valid values:

*   VPC

    <!-- -->

    <!-- -->

    <!-- -->

*   Internet (default)

    <!-- -->

    <!-- -->

    <!-- -->

*   Any

    <!-- -->

    <!-- -->

    <!-- -->', example='Internet', position='Query'),
  directoryName: string(name='DirectoryName', description='The directory name. The name must be 2 to 255 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

This parameter is required.', example='testDirectoryName', position='Query'),
  dnsAddress: [ string ](name='DnsAddress', description='The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.

This parameter is required.', example='`127.0.**.**`', position='Query'),
  domainName: string(name='DomainName', description='The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.

This parameter is required.', example='corp.example.com', position='Query'),
  domainPassword: string(name='DomainPassword', description='The password of the domain administrator. The password can be up to 64 characters in length.

This parameter is required.', example='testPassword', position='Query'),
  domainUserName: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

This parameter is required.', example='sAMAccountName', position='Query'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.

Valid values:

*   <!-- -->

    true

    <!-- -->

    (default)

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true', position='Query'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.

>  When end users log on to a cloud computer for the first time, they must bind an MFA device.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   <!-- -->

    false (default)

    <!-- -->

    <!-- -->', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  specification?: long(name='Specification', description='The type of the AD connector.

Valid values:
- 1 (General)
- 2 (Advanced)', example='1', position='Query'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the existing AD subdomain.\\
If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='`127.0.**.**`', position='Query'),
  subDomainName?: string(name='SubDomainName', description='The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.', example='child.example.com', position='Query'),
  vSwitchId: [ string ](name='VSwitchId', description='Details of the vSwitch IDs. You can specify only one vSwitch ID.

This parameter is required.', example='vsw-bp19ocz3erfx15uon****', position='Query'),
}

model CreateADConnectorDirectoryResponseBody = {
  adConnectors?: [ 
    {
      address?: string(name='Address', description='The connection address.', example='`127.0.**.**`'),
    }
  ](name='AdConnectors', description='The details of AD connectors.'),
  directoryId?: string(name='DirectoryId', description='The ID of the AD directory.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FE99D5E-93A1-493F-B1CB-0ABD4D05BEFF'),
  trustPassword?: string(name='TrustPassword', description='The AD trust password.', example='82Tg****'),
}

model CreateADConnectorDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateADConnectorDirectoryResponseBody(name='body'),
}

/**
  * @description An AD directory is used to connect to an enterprise\\"s existing Active Directory and is suitable for large-scale cloud computer deployment. You are charged directory fees when you connect your AD to cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
  * @param request  the request parameters of CreateADConnectorDirectory  CreateADConnectorDirectoryRequest
  * @return CreateADConnectorDirectoryResponse
 */
async function createADConnectorDirectory(request: CreateADConnectorDirectoryRequest): CreateADConnectorDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateADConnectorDirectory', 'POST', '/', 'json', false, 'json', request);
}

model CreateADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for Windows hosts.', example='beijing-ad01', position='Query'),
  backupDCHostname?: string(name='BackupDCHostname', description='The hostname of the backup domain controller.', example='dc002', position='Query'),
  backupDns?: string(name='BackupDns', description='The DNS address of the backup domain controller.', example='192.168.2.100', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the Internet access package. Valid values: 0 to 200.\\
If you do not specify this parameter or you set this parameter to 0, Internet access is disabled.', example='1', position='Query'),
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', description='The Alibaba Cloud account that creates the Cloud Enterprise Network (CEN) instance.

*   If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
*   If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.', example='102681951715****', position='Query'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the virtual private cloud (VPC) that your office network uses. The system creates a VPC for your office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:

*   `10.0.0.0/12` (subnet mask range: 12 to 24 bits)
*   `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
*   `192.168.0.0/16` (subnet mask range: 16 to 24 bits)', example='47.100.XX.XX', position='Query'),
  desktopAccessType?: string(name='DesktopAccessType', description='The method to connect to cloud computers from Alibaba Cloud Workspace clients.

>  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.

Valid values:

- Internet: connects clients to cloud desktops only over the Internet. [Default]
- VPC: connects clients to cloud desktops only over a VPC.
- Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method based on your business requirements when you connect to your cloud desktop from a client.', example='Internet', position='Query'),
  dnsAddress: [ string ](name='DnsAddress', description='The IP address of the DNS server of the enterprise AD system. You can specify only one IP address.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  domainName: string(name='DomainName', description='The domain name of the enterprise AD system. You can register each domain name only once.

This parameter is required.', example='example.com', position='Query'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The password can be up to 64 characters in length.', example='testPassword', position='Query'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

> Specify the username by using sAMAccountName instead of userPrincipalName.', example='Administrator', position='Query'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.

Valid values:

*   <!-- -->

    true

    <!-- -->

    (default)

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true', position='Query'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access.', example='true', position='Query'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA).', example='false', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
This parameter is empty by default.', example='test', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol type.

Valid value:

*   Adaptive Streaming Protocol (ASP)

    <!-- -->

    <!-- -->

    <!-- -->', example='ASP', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  specification?: long(name='Specification', description='The AD connector type.

Valid values:

*   1: General

    <!-- -->

    <!-- -->

    <!-- -->

*   2: Advanced

    <!-- -->

    <!-- -->

    <!-- -->', example='1', position='Query'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the enterprise AD subdomain. If you specify `SubDomainName` but do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='192.168.XX.XX', position='Query'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the enterprise AD subdomain.', example='child.example.com', position='Query'),
  vSwitchId?: [ string ](name='VSwitchId', description='The array of the vSwitch IDs.', position='Query'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain the verification code.', example='12****', position='Query'),
}

model CreateADConnectorOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateADConnectorOfficeSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateADConnectorOfficeSiteResponseBody(name='body'),
}

/**
  * @description When you create an enterprise AD office network, the system automatically creates an AD connector to connect to an enterprise AD. You are charged for the AD connector. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
  * After you call this operation to create an AD office network, you must perform the following steps to complete AD domain setting:
  * 1.  Configure a conditional forwarder in a Domain Name System (DNS) server.
  * 2.  Configure a trust relationship in an AD domain controller and call the [ConfigADConnectorTrust](https://help.aliyun.com/document_detail/311258.html) operation to configure the trust relationship with the AD office network.
  * 3.  Call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to query a list of organizational units (OUs) of the AD domain, and call the [ConfigADConnectorUser](https://help.aliyun.com/document_detail/311262.html) operation to specify an OU and administrator for the AD office network.
  *     >  When you create the AD office network, take note of the DomainUserName and DomainPassword parameters. If you specify the parameters, you need to only configure a conditional forwarder. If you do not specify the parameters, you must configure a conditional forwarder, trust relationship, and OU as prompted.
  * For more information, see [Create and manage enterprise AD office networks](https://help.aliyun.com/document_detail/214469.html).
  * @param request  the request parameters of CreateADConnectorOfficeSite  CreateADConnectorOfficeSiteRequest
  * @return CreateADConnectorOfficeSiteResponse
 */
async function createADConnectorOfficeSite(request: CreateADConnectorOfficeSiteRequest): CreateADConnectorOfficeSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateADConnectorOfficeSite', 'POST', '/', 'json', false, 'json', request);
}

model CreateAndBindNasFileSystemRequest {
  description?: string(name='Description', description='The description of the NAS file system.', example='newDescription', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the desktop group.

This parameter is required.', example='dg-fh0vdzyh6rdc*****', position='Query'),
  encryptType?: int32(name='EncryptType', description='Specifies whether to encrypt data in the NAS file system. You can use keys that are hosted by Key Management Service (KMS) to encrypt data in a file system. When you read and write the encrypted data, the data is automatically decrypted. Valid values:

*   0: does not encrypt data in the NAS file system.
*   1: encrypts data in the NAS file system by using a NAS-managed key. ` If you set  `FileSystemType`  to  `standard`  or  `extreme`, you can use a NAS-managed key to encrypt data in a NAS file system.`
*   2: encrypts data in the NAS file system by using a KMS-managed key. `If` you set FileSystemType`  to  `extreme`, you can use a KMS-managed key to encrypt data in a NAS file system.`

Default value: 0.', example='0', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The list of users.', position='Query'),
  fileSystemName: string(name='FileSystemName', description='The name of the NAS file system.

This parameter is required.', example='szy-asp-upm-test', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The ID of the workspace.

This parameter is required.', example='cn-beijing+dir-15657*****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  storageType: string(name='StorageType', description='The storage type of the NAS file system. Valid values:

*   Capacity
*   Performance

Default value: Capacity.

This parameter is required.', example='Capacity', position='Query'),
}

model CreateAndBindNasFileSystemResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
}

model CreateAndBindNasFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAndBindNasFileSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAndBindNasFileSystem  CreateAndBindNasFileSystemRequest
  * @return CreateAndBindNasFileSystemResponse
 */
async function createAndBindNasFileSystem(request: CreateAndBindNasFileSystemRequest): CreateAndBindNasFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndBindNasFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoSnapshotPolicyRequest {
  cronExpression: string(name='CronExpression', description='The CRON expression for periodic scheduling.

This parameter is required.', example='0 0 2 ? * 1-7', position='Query'),
  policyName: string(name='PolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.

This parameter is required.', example='test_auto_policy', minLength=2, maxLength=64, position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  retentionDays: int32(name='RetentionDays', description='The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.

This parameter is required.', example='30', position='Query'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3hpa78d0qyt99****'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @description You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
  * @param request  the request parameters of CreateAutoSnapshotPolicy  CreateAutoSnapshotPolicyRequest
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateBandwidthResourcePackagesRequest {
  amount?: int32(name='Amount', description='The number of the data transfer plans that you want to create at the same time. Valid values: 1 to 20. Default value: 1.', example='1', minimum=1, maximum=20, position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the auto-payment feature.', example='true', position='Query'),
  packageSize: int32(name='PackageSize', description='The size of the data transfer plan. Valid values: 10 to 1000. Unit: GiB.

This parameter is required.', example='100', minimum=10, maximum=12000, position='Query'),
  period?: int32(name='Period', description='The subscription duration. The valid values of this parameter vary based on the value of `PeriodUnit`.

*   If `PeriodUnit` is set to `Month`, the valid values of Period are 1, 3, and 6.
*   If `PeriodUnit` is set to `Year`, the valid value of Period is 1.

Default value: 1.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.

Valid values:

*   Month (default)
*   Year', example='Month', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the promotional activity.', example='youhuiquan_promotion_option_id_for_blank', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the list of regions where Elastic Desktop Service (EDS) Enterprise is available.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateBandwidthResourcePackagesResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the order.', example='24251717783****'),
  requestId?: string(name='RequestId', description='The ID of a request.', example='AE7B699F-625C-587E-BC5F-1395CA969681'),
}

model CreateBandwidthResourcePackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBandwidthResourcePackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBandwidthResourcePackages  CreateBandwidthResourcePackagesRequest
  * @return CreateBandwidthResourcePackagesResponse
 */
async function createBandwidthResourcePackages(request: CreateBandwidthResourcePackagesRequest): CreateBandwidthResourcePackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBandwidthResourcePackages', 'POST', '/', 'json', false, 'json', request);
}

model CreateBundleRequest {
  bundleName?: string(name='BundleName', description='The name of the cloud computer template.', example='testBundleName', position='Query'),
  description?: string(name='Description', description='The description of the cloud computer template.', example='test', position='Query'),
  desktopType: string(name='DesktopType', description='The instance type of the cloud computers. You can call the [DescribeBundles](https://help.aliyun.com/document_detail/436974.html) operation to query cloud computer templates and obtain the instance types supported by the cloud computers from the `DesktopType` response parameter.

>  If you want the template to use a non-GPU-accelerated image, you can only select a non-GPU-accelerated instance type. If you want the template to use a GPU-accelerated image, you can only select a GPU-accelerated instance type.

This parameter is required.', example='ecd.basic.large', position='Query'),
  imageId: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='m-4zfb6zj728hhr****', position='Query'),
  language?: string(name='Language', description='The OS language. This parameter is available only for system images. Valid values:

*   zh-CN: Simplified Chinese
*   zh-HK: Traditional Chinese (Hong Kong)
*   en-US: American English
*   ja-JP: Japanese', example='zh-CN', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The performance level (PL) of the system disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).

Valid values:

*   PL1

    <!-- -->

    <!-- -->

    <!-- -->

*   PL0

    <!-- -->

    <!-- -->

    <!-- -->

*   PL3

    <!-- -->

    <!-- -->

    <!-- -->

*   PL2

    <!-- -->

    <!-- -->

    <!-- -->', example='PL1', position='Query'),
  rootDiskSizeGib: int32(name='RootDiskSizeGib', description='The size of the system disk. Unit: GiB. The value of this parameter must be consistent with the system disk size supported by the cloud computer instance type. For more information, see [Overview](https://help.aliyun.com/document_detail/188609.html).

This parameter is required.', example='80', position='Query'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).

Valid values:

*   PL1

    <!-- -->

    <!-- -->

    <!-- -->

*   PL0

    <!-- -->

    <!-- -->

    <!-- -->

*   PL3

    <!-- -->

    <!-- -->

    <!-- -->

*   PL2

    <!-- -->

    <!-- -->

    <!-- -->', example='PL1', position='Query'),
  userDiskSizeGib: [ int32 ](name='UserDiskSizeGib', description='The data disk sizes. You can configure only one data disk.

This parameter is required.', example='70', position='Query'),
}

model CreateBundleResponseBody = {
  bundleId?: string(name='BundleId', description='The ID of the cloud computer template.', example='b-cezrnfgecbich****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBundleResponseBody(name='body'),
}

/**
  * @description Cloud computer templates include system templates and custom templates. A system template is the default template provided by Alibaba Cloud. You can call this operation to create a custom template.
  * @param request  the request parameters of CreateBundle  CreateBundleRequest
  * @return CreateBundleResponse
 */
async function createBundle(request: CreateBundleRequest): CreateBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBundle', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdsFileRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-82414*****', position='Query'),
  conflictPolicy?: string(name='ConflictPolicy', description='The policy that is used when the file that you want to upload has the same name as an existing file in the cloud disk.

Valid values:

*   refuse

    <!-- -->

    :

    <!-- -->

    denies creating the file

    <!-- -->

    .

*   auto_rename

    <!-- -->

    :

    <!-- -->

    automatically renames the file

    <!-- -->

    .

*   ignore

    <!-- -->

    :

    <!-- -->

    allows the file to use the same name as the existing file in the cloud disk

    <!-- -->

    .

*   over_write

    <!-- -->

    :

    <!-- -->

    overwrites the existing file in the cloud disk

    <!-- -->

    .', example='ignore', position='Query'),
  endUserId?: string(name='EndUserId', description='The user ID.', example='test1', position='Query'),
  fileHash?: string(name='FileHash', description='The hash value of the SHA1 algorithm that is used by the file.', example='7C4A8D09CA3762AF61E59520943DC26494F8****', position='Query'),
  fileLength: long(name='FileLength', description='The file size. Unit: bytes.

This parameter is required.', example='2048', position='Query'),
  fileName: string(name='FileName', description='The file name.

This parameter is required.', example='testFile.txt', minLength=1, maxLength=256, position='Query'),
  fileType: string(name='FileType', description='The file type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='file', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  parentFileId: string(name='ParentFileId', description='The ID of the parent folder.

This parameter is required.', example='637c9163b453b1a384874264ba79f3f9eab9****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateCdsFileResponseBody = {
  fileModel?: {
    fileId?: string(name='FileId'),
    uploadId?: string(name='UploadId'),
    uploadUrl?: string(name='UploadUrl'),
  }(name='FileModel'),
  requestId?: string(name='RequestId', description='The request ID.', example='2BAFE05D-FFB9-5938-96D0-08017DB9****'),
}

model CreateCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCdsFileResponseBody(name='body'),
}

/**
  * @description After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
  * @param request  the request parameters of CreateCdsFile  CreateCdsFileRequest
  * @return CreateCdsFileResponse
 */
async function createCdsFile(request: CreateCdsFileRequest): CreateCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model CreateCdsFileShareLinkRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-shanghai+cds-135515****', position='Query'),
  description?: string(name='Description', description='The description of the file sharing task. The description must be 0 to 1,024 characters in length.', maxLength=1024, position='Query'),
  disableDownload?: boolean(name='DisableDownload', description='Specifies whether to prohibit the download of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file download

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file download

    <!-- -->

    .', example='false', position='Query'),
  disablePreview?: boolean(name='DisablePreview', description='Specifies whether to prohibit the preview of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file preview

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file preview

    <!-- -->

    .', example='false', position='Query'),
  disableSave?: boolean(name='DisableSave', description='Specifies whether to prohibit the dump of the files that are being shared.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    prohibits file dump

    <!-- -->

    .

*   false

    <!-- -->

    :

    <!-- -->

    allows file dump

    <!-- -->

    .', example='false', position='Query'),
  downloadLimit?: long(name='DownloadLimit', description='The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='100', minimum=0, maximum=99999, position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='user01', position='Query'),
  expiration?: string(name='Expiration', description='The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.', example='2020-06-28T11:33:00.000+08:00', position='Query'),
  fileIds?: [ string ](name='FileIds', description='The file IDs.', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  previewLimit?: long(name='PreviewLimit', description='The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be previewed.', example='100', minimum=0, maximum=99999, position='Query'),
  saveLimit?: long(name='SaveLimit', description='The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be dumped.', example='100', minimum=0, maximum=99999, position='Query'),
  shareName?: string(name='ShareName', description='The name of the file sharing task. If you leave this parameter empty, the file name that corresponds to the first ID in the file ID list is used. The name must be 0 to 128 characters in length.', example='view.txt', maxLength=128, position='Query'),
  sharePwd?: string(name='SharePwd', description='The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.', example='12345678', maxLength=8, position='Query'),
}

model CreateCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: CdsFileShareLinkModel(name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CreateCdsFileShareLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCdsFileShareLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCdsFileShareLink  CreateCdsFileShareLinkRequest
  * @return CreateCdsFileShareLinkResponse
 */
async function createCdsFileShareLink(request: CreateCdsFileShareLinkRequest): CreateCdsFileShareLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCdsFileShareLink', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenterPolicyRequest {
  adminAccess?: string(name='AdminAccess', example='deny', position='Query'),
  appContentProtection?: string(name='AppContentProtection', example='off', position='Query'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
    }
  ](name='AuthorizeAccessPolicyRule', position='Query'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='10.0.XX.XX/8'),
      description?: string(name='Description', example='test'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      policy?: string(name='Policy', example='accept'),
      portRange?: string(name='PortRange', example='22/22'),
      priority?: string(name='Priority', example='1'),
      type?: string(name='Type', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', position='Query'),
  businessType: int32(name='BusinessType', description='This parameter is required.', example='1', position='Query'),
  cameraRedirect?: string(name='CameraRedirect', example='off', position='Query'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', example='windows'),
      status?: string(name='Status', example='off'),
    }
  ](name='ClientType', position='Query'),
  clipboard?: string(name='Clipboard', example='off', position='Query'),
  colorEnhancement?: string(name='ColorEnhancement', example='off', position='Query'),
  cpuDownGradeDuration?: int32(name='CpuDownGradeDuration', example='30', position='Query'),
  cpuProcessors?: [ string ](name='CpuProcessors', position='Query'),
  cpuProtectedMode?: string(name='CpuProtectedMode', example='off', position='Query'),
  cpuRateLimit?: int32(name='CpuRateLimit', example='70', position='Query'),
  cpuSampleDuration?: int32(name='CpuSampleDuration', example='60', position='Query'),
  cpuSingleRateLimit?: int32(name='CpuSingleRateLimit', example='70', position='Query'),
  deviceConnectHint?: string(name='DeviceConnectHint', example='off', position='Query'),
  deviceRedirects?: [ 
    {
      deviceType?: string(name='DeviceType', example='camera'),
      redirectType?: string(name='RedirectType', example='usbRedirect'),
    }
  ](name='DeviceRedirects', position='Query'),
  deviceRules?: [ 
    {
      deviceName?: string(name='DeviceName', example='sandisk'),
      devicePid?: string(name='DevicePid', example='0x55b1'),
      deviceType?: string(name='DeviceType', example='storage'),
      deviceVid?: string(name='DeviceVid', example='0x0781'),
      optCommand?: string(name='OptCommand', example='2:0'),
      redirectType?: string(name='RedirectType', example='usbRedirect'),
    }
  ](name='DeviceRules', position='Query'),
  disconnectKeepSession?: string(name='DisconnectKeepSession', example='customTime', position='Query'),
  disconnectKeepSessionTime?: int32(name='DisconnectKeepSessionTime', example='30', position='Query'),
  displayMode?: string(name='DisplayMode', example='clientCustom', position='Query'),
  domainResolveRule?: [ 
    {
      description?: string(name='Description'),
      domain?: string(name='Domain', example='*.example.com'),
      policy?: string(name='Policy', example='allow'),
    }
  ](name='DomainResolveRule', position='Query'),
  domainResolveRuleType?: string(name='DomainResolveRuleType', example='off', position='Query'),
  enableSessionRateLimiting?: string(name='EnableSessionRateLimiting', example='off', position='Query'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', example='off', position='Query'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', example='off', position='Query'),
  fileMigrate?: string(name='FileMigrate', example='off', position='Query'),
  gpuAcceleration?: string(name='GpuAcceleration', example='off', position='Query'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off', position='Query'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', example='both', position='Query'),
  localDrive?: string(name='LocalDrive', example='off', position='Query'),
  maxReconnectTime?: int32(name='MaxReconnectTime', example='120', position='Query'),
  memoryDownGradeDuration?: int32(name='MemoryDownGradeDuration', example='40', position='Query'),
  memoryProcessors?: [ string ](name='MemoryProcessors', position='Query'),
  memoryProtectedMode?: string(name='MemoryProtectedMode', example='off', position='Query'),
  memoryRateLimit?: int32(name='MemoryRateLimit', example='70', position='Query'),
  memorySampleDuration?: int32(name='MemorySampleDuration', example='40', position='Query'),
  memorySingleRateLimit?: int32(name='MemorySingleRateLimit', example='40', position='Query'),
  mobileRestart?: string(name='MobileRestart', example='off', position='Query'),
  mobileShutdown?: string(name='MobileShutdown', example='off', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='testPolicyGroupName', position='Query'),
  netRedirect?: string(name='NetRedirect', example='off', position='Query'),
  netRedirectRule?: [ 
    {
      domain?: string(name='Domain', example='*.taobao.com'),
      policy?: string(name='Policy', example='allow'),
      ruleType?: string(name='RuleType', example='domain'),
    }
  ](name='NetRedirectRule', position='Query'),
  noOperationDisconnect?: string(name='NoOperationDisconnect', example='off', position='Query'),
  noOperationDisconnectTime?: int32(name='NoOperationDisconnectTime', example='120', position='Query'),
  printerRedirect?: string(name='PrinterRedirect', example='off', position='Query'),
  qualityEnhancement?: string(name='QualityEnhancement', example='off', position='Query'),
  recordEventDuration?: int32(name='RecordEventDuration', example='10', position='Query'),
  recordEventFilePaths?: [ string ](name='RecordEventFilePaths', position='Query'),
  recordEventRegisters?: [ string ](name='RecordEventRegisters', position='Query'),
  recordEvents?: [ string ](name='RecordEvents', position='Query'),
  recording?: string(name='Recording', example='off', position='Query'),
  recordingAudio?: string(name='RecordingAudio', example='on', position='Query'),
  recordingDuration?: int32(name='RecordingDuration', example='10', position='Query'),
  recordingEndTime?: string(name='RecordingEndTime', example='08:59:00', position='Query'),
  recordingExpires?: int32(name='RecordingExpires', example='15', position='Query'),
  recordingFps?: string(name='RecordingFps', example='2', position='Query'),
  recordingStartTime?: string(name='RecordingStartTime', example='08:00:00', position='Query'),
  recordingUserNotify?: string(name='RecordingUserNotify', example='off', position='Query'),
  recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  remoteCoordinate?: string(name='RemoteCoordinate', example='fullControl', position='Query'),
  resetDesktop?: string(name='ResetDesktop', example='off', position='Query'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280', position='Query'),
  resolutionModel?: string(name='ResolutionModel', example='adaptive', position='Query'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
  scope?: string(name='Scope', example='GLOBAL', position='Query'),
  scopeValue?: [ string ](name='ScopeValue', position='Query'),
  sessionMaxRateKbps?: int32(name='SessionMaxRateKbps', example='2000', position='Query'),
  smoothEnhancement?: string(name='SmoothEnhancement', example='off', position='Query'),
  statusMonitor?: string(name='StatusMonitor', example='off', position='Query'),
  streamingMode?: string(name='StreamingMode', example='smooth', position='Query'),
  targetFps?: int32(name='TargetFps', example='30', position='Query'),
  taskbar?: string(name='Taskbar', example='off', position='Query'),
  usbRedirect?: string(name='UsbRedirect', example='off', position='Query'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description'),
      productId?: string(name='ProductId', example='08**'),
      usbRedirectType?: string(name='UsbRedirectType', example='1'),
      usbRuleType?: string(name='UsbRuleType', example='2'),
      vendorId?: string(name='VendorId', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', position='Query'),
  videoEncAvgKbps?: int32(name='VideoEncAvgKbps', example='2000', position='Query'),
  videoEncMaxQP?: int32(name='VideoEncMaxQP', example='30', position='Query'),
  videoEncMinQP?: int32(name='VideoEncMinQP', example='30', position='Query'),
  videoEncPeakKbps?: int32(name='VideoEncPeakKbps', example='2000', position='Query'),
  videoEncPolicy?: string(name='VideoEncPolicy', example='qualityFirst', position='Query'),
  videoRedirect?: string(name='VideoRedirect', example='on', position='Query'),
  visualQuality?: string(name='VisualQuality', example='low', position='Query'),
  watermark?: string(name='Watermark', example='off', position='Query'),
  watermarkAntiCam?: string(name='WatermarkAntiCam', example='off', position='Query'),
  watermarkColor?: int32(name='WatermarkColor', example='0', position='Query'),
  watermarkColumnAmount?: int32(name='WatermarkColumnAmount', example='3', position='Query'),
  watermarkCustomText?: string(name='WatermarkCustomText', example='test', position='Query'),
  watermarkDegree?: double(name='WatermarkDegree', example='-10', position='Query'),
  watermarkFontSize?: int32(name='WatermarkFontSize', example='10', position='Query'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', example='plain', position='Query'),
  watermarkPower?: string(name='WatermarkPower', example='medium', position='Query'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', example='3', position='Query'),
  watermarkSecurity?: string(name='WatermarkSecurity', example='on', position='Query'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', example='10', position='Query'),
  watermarkType?: string(name='WatermarkType', example='EndUserId,HostName,ClientTime', position='Query'),
  wuyingKeeper?: string(name='WuyingKeeper', example='off', position='Query'),
  wyAssistant?: string(name='WyAssistant', example='on', position='Query'),
}

model CreateCenterPolicyResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateCenterPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCenterPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCenterPolicy  CreateCenterPolicyRequest
  * @return CreateCenterPolicyResponse
 */
async function createCenterPolicy(request: CreateCenterPolicyRequest): CreateCenterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudDriveServiceRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  bizType?: int32(name='BizType', description='The business type.', example='3', position='Query'),
  cdsChargeType?: string(name='CdsChargeType', position='Query'),
  cenId?: string(name='CenId', example='cen-g4ba1mkji8nj6****', position='Query'),
  domainName?: string(name='DomainName', example='test.local', position='Query'),
  endUserId?: [ string ](name='EndUserId', position='Query'),
  maxSize: long(name='MaxSize', description='This parameter is required.', example='536870912000', minimum=-1, maximum=9223372036854775807, position='Query'),
  name?: string(name='Name', description='The name of the cloud disk that you want to create in Cloud Drive Service.', example='wuying-pds', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-400695****', position='Query'),
  officeSiteType?: string(name='OfficeSiteType', example='SIMPLE', position='Query'),
  period?: long(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  solutionId?: string(name='SolutionId', description='The solution ID.', example='co-0esnf8kb8zpfbqmvt', position='Query'),
  userCount?: long(name='UserCount', position='Query'),
  userMaxSize?: long(name='UserMaxSize', example='1024000', position='Query'),
}

model CreateCloudDriveServiceResponseBody = {
  cdsId?: string(name='CdsId', description='The ID of the attached cloud disk.', example='cn-hangzhou+cds-7782057786'),
  cdsName?: string(name='CdsName', description='The name of the cloud disk that is created in Cloud Drive Service.', example='CDS_Windows_1126'),
  cenId?: string(name='CenId', example='cen-638u3wxds9snyc****'),
  conflictCdsAndOrder?: {
    conflictCds?: [ 
      {
        cdsId?: string(name='CdsId'),
        regionId?: string(name='RegionId'),
      }
    ](name='ConflictCds'),
    conflictOrder?: [ 
      {
        cdsId?: string(name='CdsId'),
        orderId?: string(name='OrderId'),
        regionId?: string(name='RegionId'),
      }
    ](name='ConflictOrder'),
  }(name='ConflictCdsAndOrder'),
  domainName?: string(name='DomainName', example='test1.local'),
  errorCode?: string(name='ErrorCode'),
  maxSize?: string(name='MaxSize', description='The maximum capacity of each instance in Cloud Drive Service. Unit: GiB', example='213674622976'),
  officeSiteType?: string(name='OfficeSiteType', example='AD_CONNECTOR'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='062B1439-709A-580E-85DF-CE97A1560565'),
}

model CreateCloudDriveServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudDriveServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCloudDriveService  CreateCloudDriveServiceRequest
  * @return CreateCloudDriveServiceResponse
 */
async function createCloudDriveService(request: CreateCloudDriveServiceRequest): CreateCloudDriveServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudDriveService', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudDriveUsersRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-352282****', position='Query'),
  endUserId: [ string ](name='EndUserId', description='The IDs of the end users.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userMaxSize: long(name='UserMaxSize', description='The maximum storage space of an end user. Unit: bytes.

This parameter is required.', example='1024', minimum=1, position='Query'),
}

model CreateCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05F0A7AE-17F1-53DF-BD99-ABF936FA****'),
}

model CreateCloudDriveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudDriveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCloudDriveUsers  CreateCloudDriveUsersRequest
  * @return CreateCloudDriveUsersResponse
 */
async function createCloudDriveUsers(request: CreateCloudDriveUsersRequest): CreateCloudDriveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudDriveUsers', 'POST', '/', 'json', false, 'json', request);
}

model CreateConfigGroupRequest {
  configTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting', description='Specifies whether to allow end users to configure scheduled tasks.', example='true'),
      cronExpression?: string(name='CronExpression', description='The CRON expression for the scheduled task.

>  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7', example='0 0 16 ? * 1,2,3,4,5,6,7'),
      enforce?: boolean(name='Enforce', description='Specifies whether to forcibly execute the scheduled task.', example='true'),
      interval?: int32(name='Interval', description='The interval at which the scheduled task is executed. Unit: minutes.', example='10'),
      operationType?: string(name='OperationType', description='The type of the scheduled operation. If you set TimerType to NoConnect, you can specify this parameter.

Valid values:

*   Hibernate: scheduled hibernation.
*   Shutdown: scheduled shutdown.', example='Shutdown'),
      processWhitelist?: [ string ](name='ProcessWhitelist', description='The process whitelist. If whitelisted processes are running, the scheduled task upon inactivity does not take effect.'),
      resetType?: string(name='ResetType', description='The reset operation for cloud computers.

Valid values:

*   RESET_TYPE_SYSTEM: resets only the system disks of cloud computers.
*   RESET_TYPE_USER_DISK: resets only the data disks of cloud computers.
*   RESET_TYPE_BOTH: resets the system disks and data disks of cloud computers.', example='RESET_TYPE_SYSTEM'),
      timerType: string(name='TimerType', description='The type of the scheduled task.

Valid values:

*   NoOperationDisconnect: scheduled disconnection upon inactivity.
*   NoConnect: scheduled disconnection upon specified operation (OperationType).
*   TimerBoot: scheduled start.
*   TimerReset: scheduled reset.
*   NoOperationShutdown: scheduled shutdown upon inactivity.
*   NoOperationHibernate: scheduled hibernation upon inactivity.
*   TimerShutdown: scheduled shutdown.
*   NoOperationReboot: scheduled restart upon inactivity.
*   TimerReboot: scheduled restart.

This parameter is required.', example='TIMER_BOOT'),
      triggerType?: string(name='TriggerType', description='The method to trigger the scheduled task upon inactivity.

Valid values:

*   Advanced: intelligent detection.
*   Standard: standard detection.', example='Standard'),
    }
  ](name='ConfigTimers', description='The list of configuration groups.', position='Query'),
  description?: string(name='Description', description='The description of the configuration group.', example='ScheduledTask', maxLength=500, position='Query'),
  name: string(name='Name', description='The name of the configuration group.

This parameter is required.', example='ScheduledTask', position='Query'),
  productType: string(name='ProductType', description='The service type of the configuration group.

Valid value:

*   CLOUD_DESKTOP: the cloud computer service.

This parameter is required.', example='CLOUD_DESKTOP', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the configuration group.

Valid value:

*   Timer: the scheduled task type.

This parameter is required.', example='Timer', position='Query'),
}

model CreateConfigGroupResponseBody = {
  groupId?: string(name='GroupId', description='The ID of the configuration group.', example='ccg-0ctwi5zbswtql****'),
  message?: string(name='Message', description='The creation result of the configuration group.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE9472BC-0B5D-5458-85CD-C52BDD******'),
}

model CreateConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateConfigGroup  CreateConfigGroupRequest
  * @return CreateConfigGroupResponse
 */
async function createConfigGroup(request: CreateConfigGroupRequest): CreateConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDesktopGroupRequest {
  allClassifyUsers?: boolean(name='AllClassifyUsers', description='The types of the users.

>  This parameter is not publicly available.', example='Alice', position='Query'),
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether to enable batch-based automatic creation of subscription cloud computers for the shared group. This parameter is required if you set `ChargeType` to `PrePaid`.

Valid values:

*   0: enables batch-based automatic creation of subscription cloud computers.
*   1: disables batch-based automatic creation of subscription cloud computers.', example='1', minimum=0, maximum=1, position='Query'),
  allowBufferCount?: int32(name='AllowBufferCount', description='The maximum number of pay-as-you-go cloud computers that can be reserved in the shared group. This parameter is required if you set `ChargeType` to `PostPaid`. Valid values:

*   0: does not reserve any cloud computers.
*   N: reserves N cloud computers (1≤ N ≤ 100).

>  Setting this parameter to 0 means no cloud computers will be reserved in the shared group. In this case, the system must create, start, and assign cloud computers to end users upon request, which can be time-consuming. To improve user experience, we recommend that you reserve a specific number of cloud computers.', example='1', minimum=0, maximum=1000, position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment for subscription orders.', example='true', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the shared subscription group.

Valid values:

*   true
*   false', example='false', position='Query'),
  bindAmount?: long(name='BindAmount', description='The number of concurrent sessions of the multi-session shared group.

>  This parameter is not publicly available.', example='1', position='Query'),
  bundleId?: string(name='BundleId', description='The ID of the cloud computer template.', example='b-je9hani001wfn****', position='Query'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='*   For shared subscription groups, this parameter defines the initial number of cloud computers to be created. Valid values: 0 to 200.
*   For shared pay-as-you-go groups, this parameter defines the minimum initial number of cloud computers to be created. Valid values: 0 to `MaxDesktopsCount`. Default value: 1.', example='3', position='Query'),
  chargeType: string(name='ChargeType', description='The billing method of the shared group.

Valid values:

*   PostPaid: pay-as-you-go.
*   PrePaid: subscription.

This parameter is required.', example='PrePaid', position='Query'),
  classify?: string(name='Classify', description='The type of the cloud computers in the shared group.

>  This parameter is not publicly available.

Valid values:

*   teacher: cloud computers designed for teachers.
*   student: cloud computers designed for students.', example='teacher', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  comments?: string(name='Comments', description='The remarks of the shared group.', example='test', position='Query'),
  connectDuration?: long(name='ConnectDuration', description='The maximum duration for which each session remains connected. The session is automatically disconnected once the specified maximum time limit is reached. Unit: milliseconds. Valid values: 900000 to 345600000. That is, the session can be connected for 15 to 5,760 minutes (4 days).', example='300000', position='Query'),
  dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk.

Valid values:

*   cloud_auto: the standard SSD.
*   cloud_essd: the ESSD.', example='cloud_auto', position='Query'),
  dataDiskPerLevel?: string(name='DataDiskPerLevel', description='The PL of the data disk of the ESSD category. Default value: PL0.

Valid values:

*   PL1
*   PL0', example='PL0', position='Query'),
  dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GB. Valid values: 0 to 16380. The value must be an integral multiple of 20.

*   A value of 0 means no data disk is attached.
*   If the selected plan includes a standard SSD, the data disk size must be at least 20 GB.

Default value: 0.', example='80', position='Query'),
  defaultInitDesktopCount?: int32(name='DefaultInitDesktopCount', description='The default number of cloud computers that you want to create at the same time in the shared group. Default value: 1.', example='1', minimum=0, maximum=1000, position='Query'),
  defaultLanguage?: string(name='DefaultLanguage', description='The language of the OS.

Valid values:

*   en-US: English.
*   zh-HK: Traditional Chinese.
*   zh-CN: Simplified Chinese
*   ja-JP: Japanese.', example='zh-CN', position='Query'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the shared group. The name can be up to 30 characters in length and can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`.', example='desktopGroupName1', position='Query'),
  desktopType?: string(name='DesktopType', description='The specifications of the cloud computer. You can call the [DescribeDesktopTypes](~~DescribeDesktopTypes~~) operation to query all the supported specifications.', example='eds.enterprise_office.16c64g', position='Query'),
  directoryId?: string(name='DirectoryId', description='The ID of the directory.

>  This parameter is not publicly available.', example='hide', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The IDs of the end users.', position='Query'),
  exclusiveType?: string(name='ExclusiveType', description='Specifies whether the shared group is exclusive. You must set this parameter to `Exclusive` when `SessionType` is set to `MultipleSession`.', example='Exclusive', position='Query'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the File Storage NAS (NAS) file system for the user data roaming feature.

>  This parameter is not publicly available.', example='04f314****', position='Query'),
  groupAmount?: int32(name='GroupAmount', description='The number of shared groups for the single-cloud computer type. You must specify this parameter if you set `MultiResource` to `false`. Valid values: 1 to 5. Default value: 1.', example='1', position='Query'),
  groupVersion?: int32(name='GroupVersion', description='The version of the shared group.', example='2', position='Query'),
  hostname?: string(name='Hostname', description='The hostname series of the cloud computer. This parameter is supported exclusively when the office network operates on Active Directory (AD) and the cloud computer runs on a Windows operating system.

Naming conventions:

*   A hostname must be 2 to 15 characters in length
*   and can contain only letters, digits, and hyphens (-). It cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

If you want to create multiple cloud computers, specify their hostnames in the `name_prefix[begin_number,bits]name_suffix` format. For example, if you set Hostname to ecd-[1,4]-test, the hostnames of the cloud computers will be assigned sequentially as ecd-0001-test, ecd-0002-test, and so on.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting number. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost', position='Query'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The duration after which a session is terminated if no keyboard or mouse activity is detected. When an end user connects to a cloud computer, a session is initiated. If no input from the keyboard or mouse is detected within this specified timeframe, the session is automatically closed. Unit: milliseconds. Valid values: 360000 to 3600000 (6 minutes to 60 minutes)

The system prompts end users to save their data 30 seconds before a session is disconnected. To avoid data loss, end users must save their session data upon receiving the prompt.

>  This parameter is suitable only for cloud computers whose image version is v1.0.2 or later.', example='300000', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****', position='Query'),
  keepDuration?: long(name='KeepDuration', description='The duration for which each session remains active after disconnection. Valid values: 180000 (3 minutes) to 345600000 (4 days). Unit: milliseconds. If you set this parameter to 0, the session is permanently retained after disconnection.

When a session is disconnected, take note of the following items: 1. If the end user does not resume the session within the specified duration, the session will close, and all unsaved data will be cleared. 2. If the end user resumes the session within the specified duration, the session data will remain accessible for continued use.', example='6000', position='Query'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session shared group.

>  This parameter is not publicly available.

Valid values:

*   0: depth-first
*   1: breadth first', example='0', position='Query'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of pay-as-you-go cloud computers that can be automatically provisioned at the same time in the shared group. Valid values: 0 to 500.', example='50', minimum=0, maximum=1000, position='Query'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The minimum number of subscription cloud computers that can be automatically provisioned at the same time in the shared group. This parameter is required if you set `ChargeType` to `PrePaid`. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.', example='1', minimum=0, maximum=500, position='Query'),
  multiResource?: boolean(name='MultiResource', description='Specifies whether the shared group is a multi-cloud computer type.

Valid values:

*   true: a multi-cloud computer type.
*   false: a single-cloud computer type.', example='false', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The ID of the office network.

This parameter is required.', example='cn-hangzhou+os-c5cy7q578s8jc****', position='Query'),
  ownType?: int32(name='OwnType', description='The session type of the shared group.

>  This parameter is not publicly available.

Valid values:

*   0: single-session.
*   1: multi-session.', example='0', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the shared group. This parameter is required if you set `ChargeType` to `PrePaid`. You must specify the subscription duration unit by using `PeriodUnit`.

*   If you set `PeriodUnit` to `Month`, valid values of this parameter:

    *   1
    *   2
    *   3
    *   6

*   If you set `PeriodUnit` to `Year`, valid values of this parameter:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='The ID of the policy.

This parameter is required.', example='pg-9c2d6t2dwflqr****', position='Query'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable user data roaming.

>  This parameter is not publicly available.', example='false', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the coupon.', example='youhuiquan_promotion_option_id_*****', position='Query'),
  ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter defines the condition that activates automatic scaling of cloud computers in a multi-session shared group. The ratio of connected sessions is calculated by using the following formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.

If the connected session ratio exceeds the specified threshold, new cloud computers are provisioned. If the ratio falls below the threshold, idle cloud computers are deleted.

>  This parameter is not publicly available.', example='0.5', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the list of regions where Elastic Desktop Service (EDS) Enterprise is available.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resetType?: long(name='ResetType', description='The reset option of the shared group.

Valid values:

*   0: Reset is not required.
*   1: Only the system disk is reset.
*   2: Only the data disk is reset.
*   3: Both the system disk and the data disk are reset.', example='0', position='Query'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy.

>  This parameter is not publicly available.', example='hide', position='Query'),
  sessionType?: string(name='SessionType', description='The type of the session.

Valid values:

*   SingleSession
*   MultipleSession', example='SingleSession', position='Query'),
  snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-28mp6my0l6zow****', position='Query'),
  stopDuration?: long(name='StopDuration', description='The maximum period of inactivity allowed before a cloud computer is automatically stopped. If the idle duration reaches the specified limit, the system stops the cloud computer. When an end user reconnects to the stopped cloud computer, it automatically restarts. Unit: milliseconds.', example='300000', position='Query'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.

Valid values:

*   cloud_auto: the standard SSD.
*   cloud_essd: the Enterprise SSD (ESSD).', example='cloud_auto', position='Query'),
  systemDiskPerLevel?: string(name='SystemDiskPerLevel', description='The performance level (PL) of the system disk of the ESSD category. Default value: PL0.

Valid values:

*   PL1
*   PL0', example='PL0', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.

>  The system disk must be at least as large as the image.', example='80', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', description='The tag key. You cannot specify an empty string as a tag key. A tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.

This parameter is required.', example='TestKey'),
      value: string(name='Value', description='The tag value. You can specify an empty string as a tag key. A tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.

This parameter is required.', example='TestValue'),
    }
  ](name='Tag', description='The tags. You can specify up to 20 tags.', position='Query'),
  timerGroupId?: string(name='TimerGroupId', description='The ID of the timer group.', example='ccg-0caoeogrk9m5****', position='Query'),
  userOuPath?: string(name='UserOuPath', position='Query'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false', position='Query'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).

>  This parameter is not publicly available.', example='hide', position='Query'),
}

model CreateDesktopGroupResponseBody = {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the shared group.', example='dg-2i8qxpv6t1a03****'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the shared groups.'),
  orderIds?: [ string ](name='OrderIds', description='The IDs of the orders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
}

model CreateDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDesktopGroupResponseBody(name='body'),
}

/**
  * @description *   To learn about the features, application scenarios, usage limits, scaling policies, and other details of shared groups, refer to [Overview](https://help.aliyun.com/document_detail/290959.html).
  * *   Before you call this operation, make sure that the required resources, such as the office network, cloud computer template, and policies, are created.
  * @param request  the request parameters of CreateDesktopGroup  CreateDesktopGroupRequest
  * @return CreateDesktopGroupResponse
 */
async function createDesktopGroup(request: CreateDesktopGroupRequest): CreateDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDesktopOversoldGroupRequest {
  concurrenceCount?: int32(name='ConcurrenceCount', position='Query'),
  dataDiskSize?: int32(name='DataDiskSize', position='Query'),
  description?: string(name='Description', position='Query'),
  desktopType?: string(name='DesktopType', position='Query'),
  directoryId?: string(name='DirectoryId', position='Query'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  keepDuration?: int32(name='KeepDuration', position='Query'),
  name?: string(name='Name', position='Query'),
  oversoldUserCount?: int32(name='OversoldUserCount', position='Query'),
  oversoldWarn?: int32(name='OversoldWarn', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', position='Query'),
  stopDuration?: int32(name='StopDuration', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', position='Query'),
}

model CreateDesktopOversoldGroupResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
    oversoldGroupId?: string(name='OversoldGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CreateDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDesktopOversoldGroup  CreateDesktopOversoldGroupRequest
  * @return CreateDesktopOversoldGroupResponse
 */
async function createDesktopOversoldGroup(request: CreateDesktopOversoldGroupRequest): CreateDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDesktopsRequest {
  amount?: int32(name='Amount', description='The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: 1.', example='1', minimum=0, maximum=500, position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.', example='false', position='Query'),
  bundleId?: string(name='BundleId', description='The ID of the cloud computer template.', example='b-je9hani001wfn****', position='Query'),
  bundleModels?: [ 
    {
      amount?: int32(name='Amount', description='The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: null.', example='1', maximum=300),
      bundleId?: string(name='BundleId', description='The ID of a cloud computer template.', example='b-je9hani001wfn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer. The name must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name must start with a letter but cannot start with `http://` or `https://`.
*   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).', example='testDesktopName'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of the end users to whom the cloud computer are assigned.'),
      hostname?: string(name='Hostname', description='The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.

The hostnames must meet the following requirements:

*   The hostnames must be 2 to 15 characters in length.
*   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='BundleModels', description='The cloud computer templates.', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method of the cloud computers.

Default value: PostPaid. Valid values:

*   Postpaid: pay-as-you-go

    <!-- -->

    <!-- -->

    <!-- -->

*   PrePaid: subscription

    <!-- -->

    <!-- -->

    <!-- -->', example='PrePaid', position='Query'),
  desktopAttachment?: {
    dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk. Valid values:

*   cloud_auto: SSD
*   cloud_essd: ESSD', example='cloud_auto'),
    dataDiskPerLevel?: string(name='DataDiskPerLevel', description='The performance level of the data disk. Valid values:

- PL0 (default)
- PL1', example='PL0'),
    dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='40'),
    defaultLanguage?: string(name='DefaultLanguage', description='The default display language:

- zh-CN: Simplified Chinese
- zh-HK: Traditional Chinese
- en-US: English
- ja-JP: Japanese', example='zh-CN'),
    desktopType?: string(name='DesktopType', description='The desktop type. You can call the [DescribeDesktopTypes](~~DescribeDesktopTypes~~) operation to query the IDs of supported desktop types.', example='eds.enterprise_office.8c16g'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='m-39ddhdb0ggzjx*****'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud_auto: SSD
*   cloud_essd: ESSD', example='cloud_auto'),
    systemDiskPerLevel?: string(name='SystemDiskPerLevel', description='The performance level of the system disk. Valid values:

- PL0 (default)
- PL1', example='PL0'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='40'),
  }(name='DesktopAttachment', description='The input parameters used when no templates are used.', shrink='json', position='Query'),
  desktopMemberIp?: string(name='DesktopMemberIp', description='The private IP address of the cloud computer.', example='10.0.0.1', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud computer. The name must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name must start with a letter but cannot start with `http://` or `https://`.
*   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).', example='testDesktopName', position='Query'),
  desktopNameSuffix?: boolean(name='DesktopNameSuffix', description='Specifies whether to automatically add suffixes to the names of cloud computers when you create multiple cloud computers at the same time.

Default value: true. Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   False

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  desktopTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting', description='Specifies whether to allow the end user to configure the scheduled task.', example='true'),
      cronExpression?: string(name='CronExpression', description='The cron expression for the scheduled task.

>  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7', example='0 40 7 ? * 1,2,3,4,5,6,7'),
      enforce?: boolean(name='Enforce', description='Specifies whether to forcibly execute the scheduled task.

Valid values:

*   true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   false: does not forcibly execute the scheduled task.

    <!-- -->

    <!-- -->

    <!-- -->', example='True'),
      interval?: int32(name='Interval', description='The interval at which cloud computers are created. Unit: minutes.', example='10'),
      operationType?: string(name='OperationType', description='The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.

Valid values:

*   Hibernate: hibernates the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   Shutdown: stops the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->', example='Shutdown'),
      resetType?: string(name='ResetType', description='The reset type of the cloud computers.

Valid values:

*   RESET_TYPE_SYSTEM: resets the system disks.

    <!-- -->

    <!-- -->

    <!-- -->

*   RESET_TYPE_BOTH: resets the system disks and data disks.

    <!-- -->

    <!-- -->

    <!-- -->', example='RESET_TYPE_SYSTEM'),
      timerType?: string(name='TimerType', description='The type of the scheduled task.', example='NoOperationReboot'),
    }
  ](name='DesktopTimers', description='The details of the scheduled task on cloud computers.', position='Query'),
  directoryId?: string(name='DirectoryId', description='>  This parameter is not publicly available.', example='To be hidden.', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the end users to which you want to assign the cloud computers. You can specify 1 to 100 IDs.', example='123456789', position='Query'),
  extendInfo?: string(name='ExtendInfo', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the cloud computer pool.', example='dg-boyczi8enfyc5****', position='Query'),
  hostname?: string(name='Hostname', description='The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.

The hostnames must meet the following requirements:

*   The hostnames must be 2 to 15 characters in length.
*   The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.

*   `name_prefix`: the prefix of the hostname.
*   `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
*   `name_suffix`: the suffix of the hostname.', example='testhost', position='Query'),
  monthDesktopSetting?: {
    buyerId?: long(name='BuyerId', description='> This parameter is not publicly available.', example='null'),
    desktopId?: string(name='DesktopId', description='> This parameter is not publicly available.', example='null'),
    useDuration?: int32(name='UseDuration', description='> This parameter is not publicly available.', example='null'),
  }(name='MonthDesktopSetting', description='> This parameter is not publicly available.', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+os-c5cy7q578s8jc****', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.

*   Valid values if the `PeriodUnit` parameter is set to `Month`:

    *   1
    *   2
    *   3
    *   6

*   Valid values if the `PeriodUnit` parameter is set to `Year`:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='The ID of the policy.

This parameter is required.', example='system-all-enabled-policy', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-3mtuc28rx95lx****', position='Query'),
  savingPlanId?: string(name='SavingPlanId', description='The ID of the saving plan.', example='spn-4b945dc4Wktd****', position='Query'),
  snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the auto-snapshot policy.', example='sp-28mp6my0l6zow****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify 1 to 20 keys for a tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. You can specify 1 to 20 values for a tag.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the cloud desktop.', position='Query'),
  timerGroupId?: string(name='TimerGroupId', description='The ID of the timer group.', example='ccg-0caoeogrk9m5****', position='Query'),
  userAssignMode?: string(name='UserAssignMode', description='How the cloud computers are assigned.

>  If you do not specify the `EndUserId` parameter, the cloud computers are not assigned to end users after the cloud computers are created.

Default value: ALL. Valid values:

*   ALL: If you specify the EndUserId parameter, the cloud computers are assigned to all specified end users after the cloud computers are created.

    <!-- -->

    <!-- -->

    <!-- -->

*   PER_USER: If you specify the EndUserId parameter, the cloud computers are evenly assigned to the specified end users after the cloud computers are created.

    <!-- -->

    <!-- -->

    In this case, you must make sure that the value of the Amount parameter can be divided by the N value of the EndUserId.N parameter that you specify.

    <!-- -->', example='ALL', position='Query'),
  userCommands?: [ 
    {
      content?: string(name='Content', description='The command content.', example='bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****', maxLength=15000),
      contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content.

Valid values:

*   Base64: encodes the command content in Base64.

    <!-- -->

    <!-- -->

    <!-- -->

*   PlainText: does not encode the command content.

    <!-- -->

    <!-- -->

    <!-- -->', example='Base64'),
      contentType?: string(name='ContentType', description='The language type of the command.

Valid values:

*   RunPowerShellScript: PowerShell commands (applicable to Windows cloud computers).

    <!-- -->

    <!-- -->

    <!-- -->

*   RunShellScript: shell commands (applicable to Linux cloud computers).

    <!-- -->

    <!-- -->

    <!-- -->

*   RunBatScript: batch commands (applicable to Windows cloud computers).

    <!-- -->

    <!-- -->

    <!-- -->', example='RunPowerShellScript'),
    }
  ](name='UserCommands', description='Details about the custom command scripts.', position='Query'),
  userName?: string(name='UserName', description='>  This parameter is not publicly available.', example='To be hidden.', position='Query'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false', position='Query'),
  volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****', position='Query'),
  vpcId?: string(name='VpcId', description='>  This parameter is not publicly available.', example='To be hidden.', position='Query'),
}

model CreateDesktopsResponseBody = {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers that are created. If multiple cloud computers are created, multiple IDs are returned.'),
  orderId?: string(name='OrderId', description='The ID of the order.

> This parameter is returned only when you set the ChargeType parameter to PrePaid.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDesktopsResponseBody(name='body'),
}

/**
  * @description Before you create cloud computers, complete the following preparations:
  * *   An office network (formerly called workspace) and users are created. For more information, see:
  *     *   Convenience office network: [CreateSimpleOfficeSite](https://help.aliyun.com/document_detail/215416.html) and [CreateUsers](https://help.aliyun.com/document_detail/437832.html).
  *     *   Active Directory (AD) office network: [CreateADConnectorOfficeSite](https://help.aliyun.com/document_detail/215417.html) and [Create an AD user](https://help.aliyun.com/document_detail/188619.html).
  * *   Make sure a cloud computer template exists. If no cloud computer template exists, call the [CreateBundle](https://help.aliyun.com/document_detail/188883.html) operation to create a template.
  * *   Make sure a policy exists. If no policy exists, call the [CreatePolicyGroup](https://help.aliyun.com/document_detail/188889.html) operation to create a policy.
  * If you want the cloud computers to automatically execute a custom command script, you can use the `UserCommands` field to configure a custom command.
  * @param request  the request parameters of CreateDesktops  CreateDesktopsRequest
  * @return CreateDesktopsResponse
 */
async function createDesktops(request: CreateDesktopsRequest): CreateDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDesktops', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskEncryptionServiceRequest {
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateDiskEncryptionServiceResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='214552063030752'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateDiskEncryptionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDiskEncryptionServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDiskEncryptionService  CreateDiskEncryptionServiceRequest
  * @return CreateDiskEncryptionServiceResponse
 */
async function createDiskEncryptionService(request: CreateDiskEncryptionServiceRequest): CreateDiskEncryptionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiskEncryptionService', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageRequest {
  autoCleanUserdata?: boolean(name='AutoCleanUserdata', description='Specifies whether to clear private data of users. If you set AutoCleanUserdata to `true`, the custom image clears the data directories, excluding the `Administrator` and `Public` directories, in the `C:\\Users` directory.', example='false', position='Query'),
  description?: string(name='Description', description='The description of the custom image. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  diskType?: string(name='DiskType', description='The disk data that is contained in the custom image.

Valid values:

- SYSTEM: only contain data from system disks.
- ALL: contain data from system disks and user disks. [default]', example='ALL', position='Query'),
  imageName?: string(name='ImageName', description='The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testImageName', position='Query'),
  imageResourceType?: string(name='ImageResourceType', description='This parameter is not publicly available.', example='To be hidden.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2zefuwk8l6ytcgd3bf4o', position='Query'),
  snapshotIds?: [ string ](name='SnapshotIds', description='The IDs of the snapshots.', position='Query'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateImage  CreateImageRequest
  * @return CreateImageResponse
 */
async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateNASFileSystemRequest {
  description?: string(name='Description', description='Description of the NAS file system.', example='testDescription', position='Query'),
  encryptType?: string(name='EncryptType', description='Whether the file system is encrypted. Uses KMS service-managed keys to encrypt the file system\\"s on-disk data. No decryption is required when reading and writing encrypted data. Possible values and their meanings:

- 0: Not encrypted.
- 1: Encrypted using NAS-managed keys.

Default value: 0', example='0', position='Query'),
  name?: string(name='Name', description='Name of the NAS file system.
The file name must follow these rules:
- Length: 2 to 128 English or Chinese characters.
- Must start with an uppercase or lowercase letter or a Chinese character, cannot start with http:// or https://.
- Can include numbers, underscores (_), or hyphens (-).', example='testNAS', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='Workspace ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='Region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  storageType?: string(name='StorageType', description='Storage specification type of the NAS file system. Allowed values:

- Capacity: Capacity type.
- Performance: Performance type.

Default value: Capacity', example='Capacity', position='Query'),
}

model CreateNASFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId', description='ID of the NAS file system.', example='04f314****'),
  fileSystemName?: string(name='FileSystemName', description='Name of the NAS file system.', example='testNAS'),
  mountTargetDomain?: string(name='MountTargetDomain', description='Mount point domain.', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
  officeSiteId?: string(name='OfficeSiteId', description='Workspace ID.', example='cn-hangzhou+dir-363353****'),
  requestId?: string(name='RequestId', description='Request ID.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNASFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNASFileSystemResponseBody(name='body'),
}

/**
  * @description <props="china">
  * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
  * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
  * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase resource packages to offset the storage usage.
  * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
  * <props="intl">
  * - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
  * - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
  * - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase storage packages to offset the storage usage.
  * For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
  * @param request  the request parameters of CreateNASFileSystem  CreateNASFileSystemRequest
  * @return CreateNASFileSystemResponse
 */
async function createNASFileSystem(request: CreateNASFileSystemRequest): CreateNASFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNASFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the automatic payment feature.

Valid values:

*   true (default): enables the auto-payment feature.

    <!-- -->

    <!-- -->

    Make sure that your account has sufficient balance. Otherwise, no order is generated.

    <!-- -->

*   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.

    <!-- -->

    <!-- -->

    To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.

    <!-- -->', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the premium bandwidth plan.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.

*   Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
*   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
*   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.

This parameter is required.', example='10', minimum=2, maximum=1000, position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The charge type of the premium bandwidth plan.

*   Valid value when the `PayType` parameter is set to `PrePaid`:

    *   PayByBandwidth: charges by fixed bandwidth.

*   Valid values when the `PayType` parameter is set to `PostPaid`:

    *   PayByTraffic: charges by data transfer.
    *   PayByBandwidth: charges by fixed bandwidth.', example='PayByTraffic', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  payType?: string(name='PayType', description='The billing method of the premium bandwidth plan.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PrePaid', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`. The valid values of this parameter vary based on the `PeriodUnit` value.

*   Valid value when the `PeriodUnit` parameter is set to `Week`: 1
*   Valid values when the `PeriodUnit` parameter is set to `Month`: 1, 2, 3, and 6
*   Valid values when the `PeriodUnit` parameter is set to `Year`: 1, 2, and 3

Default value: 1.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`.

Valid values:

*   Month

    <!-- -->

    <!-- -->

    <!-- -->

*   Year

    <!-- -->

    <!-- -->

    <!-- -->

*   Week

    <!-- -->

    <!-- -->

    <!-- -->', example='Month', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion.', example='23141', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateNetworkPackageResponseBody = {
  networkPackageId?: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan.', example='np-amtp8e8q1o9e4****'),
  orderId?: string(name='OrderId', description='The ID of the bill.', example='234526262716724'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model CreateNetworkPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNetworkPackage  CreateNetworkPackageRequest
  * @return CreateNetworkPackageResponse
 */
async function createNetworkPackage(request: CreateNetworkPackageRequest): CreateNetworkPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyGroupRequest {
  adminAccess?: string(name='AdminAccess', description='Specifies whether end users have the administrator permissions.

>  This parameter is in invitational preview for specific users and not available to the public.', example='deny', position='Query'),
  appContentProtection?: string(name='AppContentProtection', description='Specifies whether to enable the anti-screenshot feature.

Valid values:

*   off: Anti-screenshot is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Anti-screenshot is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off', position='Query'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The client CIDR block from which end users can connect to cloud computers. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client IP address whitelist.', example='North China Branch'),
    }
  ](name='AuthorizeAccessPolicyRule', description='The client IP address whitelist. After you configure the whitelist, end users can access cloud computers only from the IP addresses in the whitelist.', position='Query'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The object to which the security group rule applies. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the security group rule.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.

Valid values:

*   TCP: the Transmission Control Protocol (TCP) protocol.
*   UDP: the User Datagram Protocol (UDP) protocol.
*   ALL: all protocols.
*   GRE: the Generic Routing Encapsulation (GRE) protocol.
*   ICMP: the Internet Control Message Protocol (ICMP) for IPv4.', example='tcp'),
      policy?: string(name='Policy', description='The authorization of the security group rule.

Valid values:

*   drop: denies all access requests. If no messages of access denied are returned, the requests timed out or failed.
*   accept (default): accepts all requests.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.

*   If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to ICMP, set the value to -1/-1.
*   If the IpProtocol parameter is set to GRE, set the value to -1/-1.
*   If the IpProtocol parameter is set to ALL, set the value to -1/-1.

For more information about the common ports applied in EDS, see [Common ports](https://help.aliyun.com/document_detail/40724.html).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority.\\
Valid values: 1 to 60.\\
Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule.

Valid values:

*   outflow: outbound.
*   inflow: inbound.', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', description='The security group rules.', position='Query'),
  cameraRedirect?: string(name='CameraRedirect', description='Specifies whether to enable the webcam redirection feature.

Valid values:

*   off: Webcam redirection is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Webcam redirection is enabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->', example='on', position='Query'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', description='The type of the Alibaba Cloud Workspace client.

>  If you do not specify the `ClientType` parameter, all types of the client are allowed by default.

Valid values:

*   html5: web client
*   android: Android client
*   ios: iOS client
*   windows: Windows client
*   macos: macOS client', example='windows'),
      status?: string(name='Status', description='Specifies whether to allow end users to use a specific type of the client to connect to cloud computers.

>  If you do not specify the `ClientType` parameter, all types of the client are allowed by default.

Valid values:

*   OFF
*   ON', example='ON'),
    }
  ](name='ClientType', description='The logon method control rules to limit the type of the Alibaba Cloud Workspace client used by end users to connect to cloud computers.', position='Query'),
  clipboard?: string(name='Clipboard', description='The permissions on the clipboard.

Valid values:

*   read: specifies one-way transfer. You can copy files only from local devices to cloud computers.
*   readwrite: specifies two-way transfer. You can copy files between local devices and cloud computers.
*   write: specifies one-way transfer. You can only copy files from cloud computers to local devices.
*   off (default): disables both one-way and two-way transfer. Files cannot be copied between local devices and cloud computers.', example='off', position='Query'),
  deviceRedirects?: [ 
    {
      deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   printer
*   scanner
*   camera
*   adb: the Android Debug Bridge (ADB) device.', example='camera'),
      redirectType?: string(name='RedirectType', description='The redirection type.

Valid values:

*   deviceRedirect: device redirection
*   usbRedirect: USB redirection
*   off: redirection disabled', example='deviceRedirect'),
    }
  ](name='DeviceRedirects', description='The device redirection rules.', position='Query'),
  deviceRules?: [ 
    {
      deviceName?: string(name='DeviceName', description='The device name.', example='sandisk'),
      devicePid?: string(name='DevicePid', description='The product ID.', example='0x55b1'),
      deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   usbKey
*   other
*   graphicsTablet
*   printer
*   cardReader
*   scanner
*   storage
*   camera
*   adb
*   networkInterfaceCard: the NIC device.', example='storage'),
      deviceVid?: string(name='DeviceVid', description='The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='0x0781'),
      optCommand?: string(name='OptCommand', description='The link optimization command.', example='2:0'),
      redirectType?: string(name='RedirectType', description='The redirection type.

Valid values:

*   deviceRedirect: device redirection
*   usbRedirect: USB redirection
*   off: redirection disabled', example='usbRedirect'),
    }
  ](name='DeviceRules', description='The custom peripheral rules.', position='Query'),
  domainList?: string(name='DomainList', description='Specifies whether the access control for domain names is enabled. Domain names support wildcards (\\*). Separate multiple domain names with commas (,).

Valid values:

*   off
*   on', example='off', position='Query'),
  domainResolveRule?: [ 
    {
      description?: string(name='Description', description='The description of domain name resolution rule.', example='system policy'),
      domain?: string(name='Domain', description='The domain name.', example='*.baidu.com'),
      policy?: string(name='Policy', description='Specifies whether to allow the domain name resolution rule.

Valid values:

*   allow: allows the rule.
*   block: denies the rule.', example='allow'),
    }
  ](name='DomainResolveRule', description='The details of the domain name resolution rule.', position='Query'),
  domainResolveRuleType?: string(name='DomainResolveRuleType', description='The type of the domain name resolution policy.

Valid values:

*   OFF

    <!-- -->

    <!-- -->

    <!-- -->

*   ON

    <!-- -->

    <!-- -->

    <!-- -->', example='OFF', position='Query'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', description='Specifies whether to turn on the Contact Administrator for Help switch.

Valid values:

*   OFF
*   ON', example='ON', position='Query'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', description='Specifies whether to turn on the User Stream Collaboration switch.

Valid values:

*   OFF
*   ON', example='ON', position='Query'),
  gpuAcceleration?: string(name='GpuAcceleration', description='Specifies whether to enable the Image Quality Control feature. If you have high requirements on the performance and user experience in scenarios such as professional design, we recommend that you enable this feature.

Valid values:

*   off
*   on', example='off', position='Query'),
  html5Access?: string(name='Html5Access', description='Specifies whether to allow web client access.

>  We recommend that you use the ClientType-related parameters to control the Alibaba Cloud Workspace client type for cloud computer logon.``

Valid values:

*   off (default)
*   on', example='off', position='Query'),
  html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer feature on the web client.

Valid values:

*   all: Files can be uploaded and downloaded between local computers and the web client.
*   download: Files on the web client can be downloaded to local computers.
*   upload: Files on local computers can be uploaded to the web client.
*   off (default): Files cannot be transferred between the web client and local computers.', example='off', position='Query'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol for network communication.

Valid values:

*   TCP (default): TCP
*   BOTH: TCP and UDP', example='both', position='Query'),
  localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.

Valid values:

*   read: read-only. Local disk mapping is available on cloud computers. However, you can only read (copy) local files but cannot modify the files.
*   readwrite: read and write. Local disk mapping is available on cloud computers. You can read (copy) and write (modify) local files.
*   off (default): disabled. Local disk mapping is unavailable on cloud computers.', example='off', position='Query'),
  maxReconnectTime?: int32(name='MaxReconnectTime', description='The maximum retry period for reconnecting to cloud computers when the cloud computers are disconnected due to none-human reasons. Valid values: 30 to 7200. Unit: seconds.', example='120', position='Query'),
  name?: string(name='Name', description='The name of the policy.', example='testPolicyGroupName', position='Query'),
  netRedirect?: string(name='NetRedirect', description='Specifies whether to enable the network redirection feature.

> This feature is in invitational preview and is not available to the public.

Valid values:

*   off (default): The network redirection feature is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: The network redirection feature is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off', position='Query'),
  preemptLogin?: string(name='PreemptLogin', description='The cloud computer preemption feature.

>  To ensure user experience and data security, when a cloud computer is used by an end user, other end users cannot connect to the cloud computer. By default, this parameter is set to `off`, which cannot be modified.

Valid values:

*   off (default): Multiple end users cannot connect to the same cloud computer at the same time.', example='off', position='Query'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser', description='The usernames that are allowed to connect to the cloud computer in use. You can specify up to five usernames.

>  To ensure user experience and data security, other end users cannot connect to the cloud computer that is used by an end user.', example='Alice', position='Query'),
  printerRedirection?: string(name='PrinterRedirection', description='The policy for printer redirection.

Valid values:

*   off: Printer redirection is disabled.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Printer redirection is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='on', position='Query'),
  recordContent?: string(name='RecordContent', description='Specifies whether to enable the custom screen recording feature.

Valid values:

*   off: Custom screen recording is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: Custom screen recording is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='OFF', position='Query'),
  recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30', position='Query'),
  recording?: string(name='Recording', description='Specifies whether to enable the screen recording feature.

Valid values:

*   byaction_cmd_ft: enables the operation-triggered screen recording upon command execution and file transfer.
*   ALLTIME: enables the whole-process screen recording. That is, the recording starts when cloud computers are connected and ends when the cloud computers are disconnected.
*   session: enables the screen recording for session lifecycle listening.
*   PERIOD: enables the interval-based screen recording. You must specify an interval between the start time and end time of this type of recording.
*   byaction_commands: enables the operation-triggered screen recording upon command execution.
*   OFF: disables the screen recording feature.
*   byaction_file_transfer: enables the operation-triggered screen recording upon file transfer.', example='OFF', position='Query'),
  recordingAudio?: string(name='RecordingAudio', description='Specifies whether to record audio files generated from cloud computers.

Valid values:

*   off: records only video files.
*   on: records video and audio files.', example='on', position='Query'),
  recordingDuration?: int32(name='RecordingDuration', description='The file length of the screen recording. Unit: minutes. Screen recording files are split based on the specified file length and uploaded to Object Storage Service (OSS) buckets. When a screen recording file reaches 300 MB in size, the system preferentially performs rolling update for the file.

Valid values:

*   10
*   20
*   30
*   60', example='15', position='Query'),
  recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording ends. The value is in the HH:MM:SS format. The value is meaningful only when you set the `Recording` parameter to `PERIOD`.', example='08:59:00', position='Query'),
  recordingExpires?: long(name='RecordingExpires', description='The retention period of the screen recording file. Valid values: 1 to 180. Unit: days.', example='15', position='Query'),
  recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Unit: fps.

Valid values:

*   2
*   5
*   10
*   15', example='2', position='Query'),
  recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording starts. The value is in the HH:MM:SS format. The value is meaningful only when you set the `Recording` parameter to `PERIOD`.', example='08:00:00', position='Query'),
  recordingUserNotify?: string(name='RecordingUserNotify', description='Specifies whether to enable the screen recording notification feature after end users log on to the Alibaba Cloud Workspace client.

Valid values:

*   off
*   on', example='off', position='Query'),
  recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage', description='The notification content of screen recording. By default, this parameter is left empty.', example='Your desktop is being recorded.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  remoteCoordinate?: string(name='RemoteCoordinate', description='The permission to control the keyboard and the mouse during remote assistance.

Valid values:

*    optionalControl: By default, this feature is disabled. You can enable it by applying permissions.

*   fullControl: The permission is granted.

    <!-- -->

    <!-- -->

    <!-- -->

*   disableControl: The permission is revoked.

    <!-- -->

    <!-- -->

    <!-- -->', example='fullControl', position='Query'),
  scope?: string(name='Scope', description='The effective scope of the policy.

Valid values:

*   IP: The policy takes effect based on the IP address.
*   GLOBAL: The policy takes effect globally.', example='GLOBAL', position='Query'),
  scopeValue?: [ string ](name='ScopeValue', description='This parameter is required when the `Scope` parameter is set to `IP`.````', position='Query'),
  usbRedirect?: string(name='UsbRedirect', description='Specifies whether to enable USB redirection.

Valid values:

*   off: USB redirection is disabled. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->

*   on: USB redirection is enabled.

    <!-- -->

    <!-- -->

    <!-- -->', example='off', position='Query'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description', description='The description of the rule.', example='Test rule'),
      deviceClass?: string(name='DeviceClass', description='The class of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
      productId?: string(name='ProductId', description='The ID of the service.', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', description='The type of USB redirection.

Valid values:

*   1: allows USB redirection

    <!-- -->

    <!-- -->

    <!-- -->

*   2: forbids USB redirection

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
      usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.

Valid values:

*   1: by device class

    <!-- -->

    <!-- -->

    <!-- -->

*   2: by device vendor

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
      vendorId?: string(name='VendorId', description='The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', description='The USB redirection rules.', position='Query'),
  videoRedirect?: string(name='VideoRedirect', description='Specifies whether to enable the multimedia redirection switch.

Valid values:

*   off
*   on', example='on', position='Query'),
  visualQuality?: string(name='VisualQuality', description='The policy for image display quality.

Valid values:

*   high

    <!-- -->

    <!-- -->

    <!-- -->

*   low

    <!-- -->

    <!-- -->

    <!-- -->

*   lossless

    <!-- -->

    <!-- -->

    <!-- -->

*   medium: adaptive. This value is the default value.

    <!-- -->

    <!-- -->

    <!-- -->', example='medium', position='Query'),
  watermark?: string(name='Watermark', description='The watermarking feature.

Valid values:

*   blind: Invisible watermarks are applied.
*   off (default): The watermarking feature is disabled.
*   on: Visible watermarks are applied.', example='off', position='Query'),
  watermarkAntiCam?: string(name='WatermarkAntiCam', description='Specifies whether to enable the anti-screen photo feature for invisible watermarks.

Valid values:

*   off
*   on', example='off', position='Query'),
  watermarkColor?: int32(name='WatermarkColor', description='The font color in red, green, and blue (RGB) of the watermark. Valid values: 0 to 16777215.', example='0', position='Query'),
  watermarkDegree?: double(name='WatermarkDegree', description='The watermark rotation. Valid values: -10 to -30.', example='-10', position='Query'),
  watermarkFontSize?: int32(name='WatermarkFontSize', description='The watermark font size. Valid values: 10 to 20.', example='10', position='Query'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', description='The watermark font style.

Valid values:

*   plain
*   bold', example='plain', position='Query'),
  watermarkPower?: string(name='WatermarkPower', description='The watermark enhancement feature.

Valid values:

*   high
*   low
*   medium', example='medium', position='Query'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows.

>  This parameter is not available for public use.', example='5', position='Query'),
  watermarkSecurity?: string(name='WatermarkSecurity', description='Specifies whether to enable the security priority feature for invisible watermarks.

Valid values:

*   off
*   on', example='on', position='Query'),
  watermarkTransparency?: string(name='WatermarkTransparency', description='The transparency of the watermark.

Valid values:

*   LIGHT

    <!-- -->

    <!-- -->

    <!-- -->

*   DARK

    <!-- -->

    <!-- -->

    <!-- -->

*   MIDDLE

    <!-- -->

    <!-- -->

    <!-- -->', example='LIGHT', position='Query'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The watermark opacity. A larger value indicates more opaque watermarks. Valid values: 10 to 100.', example='10', position='Query'),
  watermarkType?: string(name='WatermarkType', description='The watermark content. You can select up to three items as the watermark content. Separate multiple items with commas (,).

>  If you set this parameter to `Custom`, specify `WatermarkCustomText`

Valid values:

*   EndUserId: the username.
*   Custom: the custom text.
*   DesktopIp: the IP address of the cloud computer.
*   ClientIp: the IP address of the Alibaba Cloud Workspace client.
*   HostName: the rightmost 15 digits of the cloud computer ID.
*   ClientTime: the current time displayed on the cloud computer.', example='EndUserId', position='Query'),
  wyAssistant?: string(name='WyAssistant', description='Specifies whether to provide the AI Assistant function in the DesktopAssistant when the cloud computer is accessed from the Alibaba Cloud Workspace desktop clients (including the Windows client and the macOS client).

> Desktop clients of V7.7 and higher versions required.

Valid values:

- off: the AI Aisstant function is not provided.
- on: the AI Aisstant function is provided.', example='on', position='Query'),
}

model CreatePolicyGroupResponseBody = {
  policyGroupId?: string(name='PolicyGroupId', description='The cloud computer policy ID.', example='pg-gx2x1dhsmthe9****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreatePolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyGroupResponseBody(name='body'),
}

/**
  * @description A cloud computer policy is a collection of rules to manage cloud computers in performance and security. For example, you can create a basic policy that involves the disk mapping, USB redirection, watermarking features and rules such as DNS rules. For more information, see [Policy overview](https://help.aliyun.com/document_detail/189345.html).
  * @param request  the request parameters of CreatePolicyGroup  CreatePolicyGroupRequest
  * @return CreatePolicyGroupResponse
 */
async function createPolicyGroup(request: CreatePolicyGroupRequest): CreatePolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateRAMDirectoryRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method in which the cloud computer is connected.

Valid values:

*   VPC

    <!-- -->

    <!-- -->

    <!-- -->

*   Internet (default)

    <!-- -->

    <!-- -->

    <!-- -->

*   Any

    <!-- -->

    <!-- -->

    <!-- -->', example='Internet', position='Query'),
  directoryName: string(name='DirectoryName', description='The directory name. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain digits, colons (:), underscores (_), and hyphens (-).

This parameter is required.', example='testDirectoryName', position='Query'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.

Valid values:

*   <!-- -->

    true

    <!-- -->

    (default)

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true', position='Query'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vSwitchId: [ string ](name='VSwitchId', description='The vSwitch IDs. You can configure only one vSwitch.

This parameter is required.', position='Query'),
}

model CreateRAMDirectoryResponseBody = {
  directoryId?: string(name='DirectoryId', description='The RAM directory ID.', example='dri-uf62w3qzt4aigvlcb****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateRAMDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRAMDirectoryResponseBody(name='body'),
}

/**
  * @description Before you create a RAM directory, complete the following preparations:
  * *   Call the `CreateVpc` operation to create a virtual private cloud (VPC) in a region supported by Elastic Desktop Service.
  * *   Call the `CreateVSwitch` operation to create a vSwitch in the VPC. The vSwitch is in a zone that is supported by Elastic Desktop Service. You can call the [DescribeZones](https://help.aliyun.com/document_detail/196648.html) operation to obtain the most recent zone list for a region supported by Elastic Desktop Service
  * @param request  the request parameters of CreateRAMDirectory  CreateRAMDirectoryRequest
  * @return CreateRAMDirectoryResponse
 */
async function createRAMDirectory(request: CreateRAMDirectoryRequest): CreateRAMDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRAMDirectory', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimpleOfficeSiteRequest {
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Value range: 10 to 200. Unit: Mbit/s. This parameter is available if you set `EnableInternetAccess` to `true`.', example='10', position='Query'),
  cenId?: string(name='CenId', description='The Cloud Enterprise Network (CEN) instance ID.

>  If you want end users to connect to cloud computers from Alibaba Cloud Workspace clients over VPCs, you can attach the office network to a CEN instance. The CEN instance is the one that connects to your on-premises network over VPN Gateway or Express Connect.', example='cen-3gwy16dojz1m65****', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.

- If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
- If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.', example='118272523431****', position='Query'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block that you want the office network to use in the virtual private cloud (VPC) of the office network. The system automatically creates a VPC for the office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:

*   `10.0.0.0/12` (subnet mask range: 12 to 14 bits)
*   `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
*   `192.168.0.0/16` (subnet mask range: 16 to 24 bits)', example='172.16.0.0/12', position='Query'),
  cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', description='Specifies whether to create a CloudBox-based office network.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  desktopAccessType?: string(name='DesktopAccessType', description='The method to connect to cloud computers from Alibaba Cloud Workspace clients.

>  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to VPC or Any, PrivateLink is automatically activated.````', example='Internet', position='Query'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.

Valid values:

* true (default)
* false', example='true', position='Query'),
  enableInternetAccess?: boolean(name='EnableInternetAccess', description='Specifies whether to enable Internet access.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false (default)

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='Specifies whether to enable trusted device verification.', example='true', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The office network name. The name must be 2 to 255 characters in length. It can contain digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.', example='TestOfficeSite_Simple', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vSwitchId?: [ string ](name='VSwitchId', description='The IDs of the vSwitches that you want to specify in VPCs. This parameter is required only when you create CloudBox-based office networks.', position='Query'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/335132.html) operation to obtain the verification code.', example='123456', position='Query'),
  vpcType?: string(name='VpcType', description='The network type of the office network.

Valid values:

*   standard: advanced
*   basic: basic', example='standard', position='Query'),
}

model CreateSimpleOfficeSiteResponseBody = {
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+os-c5cy7q578s8jc****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateSimpleOfficeSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSimpleOfficeSiteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSimpleOfficeSite  CreateSimpleOfficeSiteRequest
  * @return CreateSimpleOfficeSiteResponse
 */
async function createSimpleOfficeSite(request: CreateSimpleOfficeSiteRequest): CreateSimpleOfficeSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimpleOfficeSite', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  description?: string(name='Description', description='The description of the snapshot. The description can be up to 128 characters in length.', example='testDescription', maxLength=128, position='Query'),
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-gx2x1dhsmucyy****"', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  snapshotName: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.

This parameter is required.', example='testSnapshotName', minLength=2, maxLength=128, position='Query'),
  sourceDiskType: string(name='SourceDiskType', description='The type of the disk for which you want to create a snapshot.

Valid values:

*   system: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   data: data disk

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='system', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the region.', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-2ze81owrnv9pity4****'),
}

model CreateSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSnapshotResponseBody(name='body'),
}

/**
  * @description The cloud computer must be in the **Running** or **Stopped** state.
  * @param request  the request parameters of CreateSnapshot  CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoSnapshotPolicyRequest {
  policyId: [ string ](name='PolicyId', description='The IDs of the automatic snapshot policies that you want to delete.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAutoSnapshotPolicy  DeleteAutoSnapshotPolicyRequest
  * @return DeleteAutoSnapshotPolicyResponse
 */
async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBundlesRequest {
  bundleId: [ string ](name='BundleId', description='The IDs of the cloud computer templates. You can specify 1 to 100 IDs.

This parameter is required.', example='b-cezrnfgecbich****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteBundlesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteBundlesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBundlesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBundles  DeleteBundlesRequest
  * @return DeleteBundlesResponse
 */
async function deleteBundles(request: DeleteBundlesRequest): DeleteBundlesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBundles', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCdsFileRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-066224****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The ID of the file. The ID is a unique identifier for the file.

This parameter is required.', example='6333e553a133ce21e6f747cf948bb9ef95d7****', position='Query'),
  groupId?: string(name='GroupId', description='The group ID.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteCdsFileResponseBody = {
  code?: string(name='Code', description='The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='Indicates whether the data is returned.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='5CC5E450-FC43-4F5B-B540-9964BD31****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model DeleteCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCdsFile  DeleteCdsFileRequest
  * @return DeleteCdsFileResponse
 */
async function deleteCdsFile(request: DeleteCdsFileRequest): DeleteCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenterPolicyRequest {
  businessType: int32(name='BusinessType', description='This parameter is required.', example='1', position='Query'),
  policyGroupIds: [ string ](name='PolicyGroupIds', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
}

model DeleteCenterPolicyResponseBody = {
  requestId?: string(name='RequestId', example='72E47B1E-6B11-5A11-A27C-7A80F866****'),
}

model DeleteCenterPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCenterPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCenterPolicy  DeleteCenterPolicyRequest
  * @return DeleteCenterPolicyResponse
 */
async function deleteCenterPolicy(request: DeleteCenterPolicyRequest): DeleteCenterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCloudDriveGroupsRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.

This parameter is required.', example='cn-hangzhou+cds-532033****', position='Query'),
  groupId?: [ string ](name='GroupId', description='The IDs of the teams that you want to delete. You can delete multiple teams at a time.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The error message returned. This parameter is not returned if the value of Code is `success`.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true: The request is successful. false: The request fails.', example='true'),
}

model DeleteCloudDriveGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCloudDriveGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCloudDriveGroups  DeleteCloudDriveGroupsRequest
  * @return DeleteCloudDriveGroupsResponse
 */
async function deleteCloudDriveGroups(request: DeleteCloudDriveGroupsRequest): DeleteCloudDriveGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCloudDriveGroups', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCloudDriveUsersRequest {
  cdsId: string(name='CdsId', description='This parameter is required.', example='cn-hangzhou+cds-64326*****', position='Query'),
  endUserId?: [ string ](name='EndUserId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCloudDriveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCloudDriveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCloudDriveUsers  DeleteCloudDriveUsersRequest
  * @return DeleteCloudDriveUsersResponse
 */
async function deleteCloudDriveUsers(request: DeleteCloudDriveUsersRequest): DeleteCloudDriveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCloudDriveUsers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConfigGroupRequest {
  groupIds?: [ string ](name='GroupIds', description='The IDs of the configuration groups that you want to delete.', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
}

model DeleteConfigGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
}

model DeleteConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConfigGroup  DeleteConfigGroupRequest
  * @return DeleteConfigGroupResponse
 */
async function deleteConfigGroup(request: DeleteConfigGroupRequest): DeleteConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDesktopGroupRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDesktopGroupResponseBody(name='body'),
}

/**
  * @description *   Before releasing a cloud computer share, ensure that no cloud computers within it are in the Connected state and that no end users have access permissions to it.
  * *   You cannot delete a cloud computer share with an active subscription if it contains cloud computers that have not yet expired.
  * *   Deleting a pay-as-you-go cloud computer share will release all pay-as-you-go cloud computers within it.
  * @param request  the request parameters of DeleteDesktopGroup  DeleteDesktopGroupRequest
  * @return DeleteDesktopGroupResponse
 */
async function deleteDesktopGroup(request: DeleteDesktopGroupRequest): DeleteDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 100 IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDesktops  DeleteDesktopsRequest
  * @return DeleteDesktopsResponse
 */
async function deleteDesktops(request: DeleteDesktopsRequest): DeleteDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDesktops', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDevicesRequest {
  clientType: int32(name='ClientType', description='The type of the client.

Valid values:

*   1: hardware client.
*   2: software client.

This parameter is required.', example='2', position='Query'),
  deviceIds: [ string ](name='DeviceIds', description='The IDs of the devices. You can specify up to 200 IDs.

This parameter is required.', position='Query'),
  force: int32(name='Force', description='Specifies whether to forcefully delete the device if the device is bound to a user.

Valid values:

*   0: do not forcefully delete the device.
*   1: forcefully delete the device.

This parameter is required.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
}

model DeleteDevicesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2AF861B4-0ECC-130C-B100-21A01E02****'),
}

model DeleteDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDevicesResponseBody(name='body'),
}

/**
  * @description You can call the operation to manage client devices.
  * @param request  the request parameters of DeleteDevices  DeleteDevicesRequest
  * @return DeleteDevicesResponse
 */
async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevices', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDirectoriesRequest {
  directoryId: [ string ](name='DirectoryId', description='The directory IDs. You can specify one or more directory IDs.

This parameter is required.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteDirectoriesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5CC5E450-FC43-4F5B-B540-9964BD313427'),
}

model DeleteDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDirectoriesResponseBody(name='body'),
}

/**
  * @description You cannot delete a directory that has a cloud computer or is used by a cloud computer.
  * @param request  the request parameters of DeleteDirectories  DeleteDirectoriesRequest
  * @return DeleteDirectoriesResponse
 */
async function deleteDirectories(request: DeleteDirectoriesRequest): DeleteDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectories', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEduRoomRequest {
  eduRoomId: string(name='EduRoomId', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
}

model DeleteEduRoomResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEduRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEduRoomResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEduRoom  DeleteEduRoomRequest
  * @return DeleteEduRoomResponse
 */
async function deleteEduRoom(request: DeleteEduRoomRequest): DeleteEduRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEduRoom', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImagesRequest {
  deleteCascadedBundle?: boolean(name='DeleteCascadedBundle', description='Specifies whether to delete the associated template.', example='true', position='Query'),
  imageId: [ string ](name='ImageId', description='The image IDs. You can specify 1 to 100 image IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteImagesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImagesResponseBody(name='body'),
}

/**
  * @description *   Images include system images and custom images. System images cannot be deleted.
  * *   If an image that you want to delete is referenced by a cloud computer template, call the [DeleteBundles](https://help.aliyun.com/document_detail/436972.html) operation to delete the cloud computer template before you delete the image.
  * @param request  the request parameters of DeleteImages  DeleteImagesRequest
  * @return DeleteImagesResponse
 */
async function deleteImages(request: DeleteImagesRequest): DeleteImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImages', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNASFileSystemsRequest {
  fileSystemId: [ string ](name='FileSystemId', description='The IDs of the NAS file systems that you want to delete.

This parameter is required.', example='04f314****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAS file system that you want to delete.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteNASFileSystemsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNASFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNASFileSystemsResponseBody(name='body'),
}

/**
  * @description Before you delete a File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
  * >Warning: If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
  * @param request  the request parameters of DeleteNASFileSystems  DeleteNASFileSystemsRequest
  * @return DeleteNASFileSystemsResponse
 */
async function deleteNASFileSystems(request: DeleteNASFileSystemsRequest): DeleteNASFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNASFileSystems', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkPackagesRequest {
  networkPackageId: [ string ](name='NetworkPackageId', description='The IDs of premium bandwidth plans. You can specify one or more IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteNetworkPackagesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteNetworkPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetworkPackages  DeleteNetworkPackagesRequest
  * @return DeleteNetworkPackagesResponse
 */
async function deleteNetworkPackages(request: DeleteNetworkPackagesRequest): DeleteNetworkPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkPackages', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOfficeSitesRequest {
  officeSiteId: [ string ](name='OfficeSiteId', description='The IDs of the office networks. You can specify 1 to 100 office networks.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteOfficeSitesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteOfficeSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOfficeSitesResponseBody(name='body'),
}

/**
  * @description Before you delete an office network, make sure that the following operations are complete:
  * *   All cloud computers in the office network are released.
  * *   The data that you want to retain is backed up.
  * >  Resources and data on cloud computers in an office network cannot be restored after you delete it. Proceed with caution.
  * @param request  the request parameters of DeleteOfficeSites  DeleteOfficeSitesRequest
  * @return DeleteOfficeSitesResponse
 */
async function deleteOfficeSites(request: DeleteOfficeSitesRequest): DeleteOfficeSitesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOfficeSites', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyGroupsRequest {
  policyGroupId: [ string ](name='PolicyGroupId', description='The cloud computer policy IDs. You can specify 1 to 100 policies.

This parameter is required.', example='pg-gx2x1dhsmthe9****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by EDS.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeletePolicyGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeletePolicyGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyGroupsResponseBody(name='body'),
}

/**
  * @description *   You cannot delete the cloud computer policy created by the Elastic Desktop Service (EDS) system.
  * *   You cannot delete the cloud computer policies that are associated with cloud computers.
  * @param request  the request parameters of DeletePolicyGroups  DeletePolicyGroupsRequest
  * @return DeletePolicyGroupsResponse
 */
async function deletePolicyGroups(request: DeletePolicyGroupsRequest): DeletePolicyGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyGroups', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  snapshotId: [ string ](name='SnapshotId', description='The snapshot IDs. You can specify 1 to 100 IDs.

This parameter is required.', example='s-2ze81owrnv9pity4****', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnapshotResponseBody(name='body'),
}

/**
  * @description If the IDs of the snapshots that you specify do not exist, requests are ignored.
  * @param request  the request parameters of DeleteSnapshot  DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualMFADeviceRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  serialNumber: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device that is bound by AD users.

This parameter is required.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****', position='Query'),
}

model DeleteVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteVirtualMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualMFADeviceResponseBody(name='body'),
}

/**
  * @description If an MFA device is deleted, the device is unbound, reset, and disabled. When an Active Directory (AD) user wants to connect to the cloud desktop that is bound to the MFA device, the AD user must bind a new MFA device.
  * @param request  the request parameters of DeleteVirtualMFADevice  DeleteVirtualMFADeviceRequest
  * @return DeleteVirtualMFADeviceResponse
 */
async function deleteVirtualMFADevice(request: DeleteVirtualMFADeviceRequest): DeleteVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAclEntriesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Maximum value: 1600.

Default value: 1600.', example='50', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results have been returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kRxd1mKkNnHlUy14zdjl/I', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-shanghai+dir-631324****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sourceId?: string(name='SourceId', description='The ID of the instance to which the ACL applies. You can specify an office network ID or a cloud computer ID.', example='cn-hangzhou+dir-****', position='Query'),
  sourceType?: string(name='SourceType', description='The granularity of the ACL.

Valid values:

*   desktop: cloud computer
*   vpc: office network', example='desktop', position='Query'),
}

model DescribeAclEntriesResponseBody = {
  aclEntries?: [ 
    {
      policy?: string(name='Policy', description='The ACL type.

Valid values:

*   allow: whitelist
*   disable: blacklist', example='allow'),
      sourceId?: string(name='SourceId', description='The ID of the instance to which the ACL applies, such as an office network ID or a cloud computer ID.', example='ecd-fsafeweh***'),
      sourceType?: string(name='SourceType', description='The granularity of the ACL.

Valid values:

*   desktop: cloud computer
*   vpc: office network', example='desktop'),
    }
  ](name='AclEntries', description='The ACL entries.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeAclEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAclEntries  DescribeAclEntriesRequest
  * @return DescribeAclEntriesResponse
 */
async function describeAclEntries(request: DescribeAclEntriesRequest): DescribeAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoSnapshotPolicyRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 20', example='10', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6mqIGdPhID94rjhZFGsvpJo', position='Query'),
  policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-c5tv9d64ebjnj****', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='Test 1201', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicies?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the automatic snapshot policy was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.', example='2023-01-11T09:14:00Z'),
      cronExpression?: string(name='CronExpression', description='The cron expression that specifies when Elastic Desktop Service creates snapshots on the cloud computers.', example='0 0 5,7 ? * 2/2'),
      desktopNum?: int32(name='DesktopNum', description='The number of cloud computers to which the automatic snapshot policy is applied.', example='5'),
      policyId?: string(name='PolicyId', description='The ID of the automatic snapshot policy.', example='sp-3e3bmfcdkjfl1****'),
      policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy.', example='snapshot01'),
      regionId?: string(name='RegionId', description='The ID of the region to which the automatic snapshot policy belongs.', example='cn-hangzhou'),
      retentionDays?: string(name='RetentionDays', description='The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.', example='3'),
      status?: string(name='Status', description='The status of the automatic snapshot policy.

Valid values:

*   Expire: The automatic snapshot policy cannot be used because you have overdue payments in your account.

    <!-- -->

    <!-- -->

    <!-- -->

*   Normal: The automatic snapshot policy is normal.

    <!-- -->

    <!-- -->

    <!-- -->', example='Normal'),
      timePoints?: string(name='TimePoints', description='The points in time at which the auto snapshots were created.

The parameter values are a JSON array. Example: `["0", "1", ... "23"]`. A maximum of 24 points in time are returned. The points in time are separated with commas (,).', example='["17","18"]'),
    }
  ](name='AutoSnapshotPolicies', description='The details of the queried automatic snapshot policies.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results haven been returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7F6612E-59CC-59F9-9DD1-91867FCC****'),
}

model DescribeAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @description You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
  * @param request  the request parameters of DescribeAutoSnapshotPolicy  DescribeAutoSnapshotPolicyRequest
  * @return DescribeAutoSnapshotPolicyResponse
 */
async function describeAutoSnapshotPolicy(request: DescribeAutoSnapshotPolicyRequest): DescribeAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBundlesRequest {
  bundleId?: [ string ](name='BundleId', description='The IDs of the cloud computer templates. You can specify 1 to 100 IDs.', example='bundle_ecd_graphics.2xlarge_s15d15_win2019', position='Query'),
  bundleType?: string(name='BundleType', description='The type of the cloud computer template.

Valid values:

*   SYSTEM: system template

    <!-- -->

    <!-- -->

    <!-- -->

*   CUSTOM: custom template

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM', position='Query'),
  checkStock?: boolean(name='CheckStock', description='Specifies whether to query the inventory status of the cloud computer instance type.', example='true', position='Query'),
  cpuCount?: int32(name='CpuCount', description='The number of vCPUs contained in the cloud computer instance type.', example='2', position='Query'),
  desktopTypeFamily?: string(name='DesktopTypeFamily', description='The instance family of the cloud computers.

Valid values:

*   eds.graphics: graphical instance families
*   eds.hf: instance families with high clock speeds
*   eds.general: general-purpose instance families', example='eds.general', position='Query'),
  fotaChannel?: string(name='FotaChannel', description='>  This parameter is not available for public use.', example='This parameter is now in invitational preview and unavailable.', position='Query'),
  fromDesktopGroup?: boolean(name='FromDesktopGroup', description='Specifies whether the cloud computers in the template belong to a cloud computer pool.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  gpuCount?: float(name='GpuCount', description='The number of GPUs contained in the cloud computer instance type.', example='1', position='Query'),
  gpuDriverType?: string(name='GpuDriverType', description='The GPU driver type.

Valid values:

*   T4
*   A10
*   G28
*   G39', example='T4', position='Query'),
  imageId?: [ string ](name='ImageId', description='The image IDs.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=0, maximum=500, position='Query'),
  memorySize?: int32(name='MemorySize', description='The memory size of the cloud computer instance type. Unit: GiB.', example='4', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  osType?: string(name='OsType', description='The type of the OS.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX: High-definition Experience (HDX) protocol
*   ASP: in-house Adaptive Streaming Protocol (ASP) (recommend)', example='ASP', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  scope?: string(name='Scope', description='The scenario to use the image.', example='FastBuy', position='Query'),
  selectedBundle?: boolean(name='SelectedBundle', description='The desktop template that is selected based on specific criteria.', example='true', position='Query'),
  sessionType?: string(name='SessionType', description='The type of the session. Valide values:

- SingleSession
- MultipleSession', example='SingleSession', position='Query'),
  supportMultiSession?: boolean(name='SupportMultiSession', description='Specifies whether to return multi-session cloud computer templates. Default value: false.', example='false', position='Query'),
  volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Specifies whether to enable disk encryption.', example='false', position='Query'),
}

model DescribeBundlesResponseBody = {
  bundles?: [ 
    {
      bundleId?: string(name='BundleId', description='The ID of the cloud computer template.', example='bundle_ecd_graphics.2xlarge_s15d15_win2019'),
      bundleName?: string(name='BundleName', description='The name of the cloud computer template.', example='Advanced graphics with Windows 2019'),
      bundleType?: string(name='BundleType', description='The type of the cloud computer template.

Valid values:

*   SYSTEM: system template

    <!-- -->

    <!-- -->

    <!-- -->

*   CUSTOM: custom template

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      creationTime?: string(name='CreationTime', description='The time when the cloud computer template was created.', example='2021-09-30T06:09Z'),
      dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_auto: SSD
*   cloud_essd: ESSD (supported by specific specifications)', example='cloud_efficiency'),
      description?: string(name='Description', description='The description of the cloud computer template.', example='test'),
      desktopType?: string(name='DesktopType', description='The instance type of the cloud computer.', example='ecd.graphics.2xlarge'),
      desktopTypeAttribute?: {
        cpuCount?: int32(name='CpuCount', description='The number of vCPUs.', example='10'),
        gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='0.5'),
        gpuSpec?: string(name='GpuSpec', description='The GPU type.', example='NVIDIA T4'),
        memorySize?: int32(name='MemorySize', description='The memory size. Unit: MiB.', example='47104'),
      }(name='DesktopTypeAttribute', description='The details of the cloud computer instance type.'),
      desktopTypeFamily?: string(name='DesktopTypeFamily', description='The instance family of the cloud computer.

Valid values:

*   eds.graphics: graphical instance family
*   eds.hf: instance family with a high clock speed
*   eds.general: general-purpose instance family', example='eds.general'),
      disks?: [ 
        {
          diskPerformanceLevel?: string(name='DiskPerformanceLevel', description='The PL of the disk.

Valid values:

*   PL1

    <!-- -->

    <!-- -->

    <!-- -->

*   PL0

    <!-- -->

    <!-- -->

    <!-- -->

*   PL3

    <!-- -->

    <!-- -->

    <!-- -->

*   PL2

    <!-- -->

    <!-- -->

    <!-- -->', example='PL0'),
          diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GiB.', example='150'),
          diskType?: string(name='DiskType', description='The type of the disk.

Valid values:

*   SYSTEM: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   DATA: data disk

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
        }
      ](name='Disks', description='Details of the disks.'),
      imageId?: string(name='ImageId', description='The image ID.', example='desktopimage-windows-server-2019-64-ch-vgpu'),
      imageName?: string(name='ImageName', description='The image name.', example='Windows server 2019 Chinese'),
      imageStatus?: string(name='ImageStatus', description='The status of the image.', example='Available'),
      language?: string(name='Language', description='The OS language of the image.

Valid values:

*   en-US: English
*   zh-HK: Chinese, Traditional (Hong Kong, China)
*   zh-CN: Simplified Chinese
*   ja-JP: Japanese', example='en-US'),
      osType?: string(name='OsType', description='The type of the OS.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows'),
      platform?: string(name='Platform', description='The OS.

Valid values:

*   Ubuntu

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows Server 2022

    <!-- -->

    <!-- -->

    <!-- -->

*   UOS

    <!-- -->

    <!-- -->

    <!-- -->

*   CentOS

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows Server 2019

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows Server 2016

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows Server 2019'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX: HDX protocol
*   ASP: in-house ASP', example='ASP'),
      sessionType?: string(name='SessionType', description='The session type.

Valid values:

*   0: single-session
*   1: multi-session', example='0'),
      stockState?: string(name='StockState', description='The inventory status of the cloud computer instance type. This parameter is returned only if you set the `CheckStock` parameter to `true`.', example='Sufficient'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_auto: SSD
*   cloud_essd: ESSD (supported by specific specifications)', example='cloud_efficiency'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Bundles', description='The details of the cloud computer templates.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results have been returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6lu3PTF6h3zE8egwlYuv8M8'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCC854D8-5D1E-46D3-96EF-797A5DD36789'),
}

model DescribeBundlesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBundlesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBundles  DescribeBundlesRequest
  * @return DescribeBundlesResponse
 */
async function describeBundles(request: DescribeBundlesRequest): DescribeBundlesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBundles', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCdsFileShareLinksRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-532033****', position='Query'),
  creators?: [ string ](name='Creators', description='The users that create the file sharing links.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of resources to return. Valid values: 1 to 100. Default value: 100. The number of returned resources must be less than or equal to the specified number.', example='100', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='Specifies the marker after which the returned list begins. If this parameter is not specified, all results are returned. Default value: null.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****', position='Query'),
  shareId?: string(name='ShareId', description='The ID of the file sharing link.', example='7JQX1Fs****', position='Query'),
  shareName?: string(name='ShareName', description='The sharing name for fuzzy search.', example='user', position='Query'),
  status?: string(name='Status', description='The file sharing status. Valid values: ● disabled: canceled ● enabled: valid', example='disabled', position='Query'),
}

model DescribeCdsFileShareLinksResponseBody = {
  code?: string(name='Code', description='The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: [
    CdsFileShareLinkModel
  ](name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is `success`.', example='success'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6mnFXZiT7NdvGNgkInJ****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeCdsFileShareLinksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCdsFileShareLinksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCdsFileShareLinks  DescribeCdsFileShareLinksRequest
  * @return DescribeCdsFileShareLinksResponse
 */
async function describeCdsFileShareLinks(request: DescribeCdsFileShareLinksRequest): DescribeCdsFileShareLinksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCdsFileShareLinks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCensRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.\\
Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.\\
Default value: 50.', example='50', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeCensResponseBody = {
  cens?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-3gwy16dojz1m65****'),
      creationTime?: string(name='CreationTime', description='The time when the CEN instance was created.', example='2021-06-16T08:46Z'),
      description?: string(name='Description', description='The description of the CEN instance.', example='test'),
      ipv6Level?: string(name='Ipv6Level', description='The IPv6 level.

>  IPv6 is not supported.

Valid value:

*   DISABLED

    <!-- -->

    <!-- -->

    <!-- -->', example='DISABLED'),
      name?: string(name='Name', description='The name of the CEN instance.', example='testCen'),
      packageIds?: [ 
        {
          packageId?: string(name='PackageId', description='The ID of the bandwidth plan that is bound to the CEN instance.', example='cenbwp-4c2zaavbvh5f42****'),
        }
      ](name='PackageIds', description='The bandwidth plans that are bound to the CEN instance.'),
      protectionLevel?: string(name='ProtectionLevel', description='The tolerated level of CIDR block conflict.

Valid value:

*   REDUCED: CIDR block conflicts are allowed, but the conflicting CIDR blocks cannot be identical.', example='REDUCED'),
      status?: string(name='Status', description='The status of the CEN instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Active

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->', example='Active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='testKey'),
          value?: string(name='Value', description='The value of the tag.', example='testValue'),
        }
      ](name='Tags', description='The tags of the CEN instance.'),
    }
  ](name='Cens', description='Details of the CEN instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of CEN instances returned.', example='1'),
}

model DescribeCensResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCensResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCens  DescribeCensRequest
  * @return DescribeCensResponse
 */
async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCens', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenterPolicyListRequest {
  businessType: int32(name='BusinessType', description='This parameter is required.', example='1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=200, position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  policyGroupId?: [ string ](name='PolicyGroupId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
  scope?: string(name='Scope', example='GLOBAL', position='Query'),
}

model DescribeCenterPolicyListResponseBody = {
  describePolicyGroups?: [ 
    {
      adminAccess?: string(name='AdminAccess', example='deny'),
      appContentProtection?: string(name='AppContentProtection', example='off'),
      authorizeAccessPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
          description?: string(name='Description', example='test'),
        }
      ](name='AuthorizeAccessPolicyRules'),
      authorizeSecurityPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
          description?: string(name='Description', example='test'),
          ipProtocol?: string(name='IpProtocol', example='tcp'),
          policy?: string(name='Policy', example='accept'),
          portRange?: string(name='PortRange', example='22/22'),
          priority?: string(name='Priority', example='1'),
          type?: string(name='Type', example='inflow'),
        }
      ](name='AuthorizeSecurityPolicyRules'),
      cameraRedirect?: string(name='CameraRedirect', example='on'),
      clientTypes?: [ 
        {
          clientType?: string(name='ClientType', example='windows'),
          status?: string(name='Status', example='on'),
        }
      ](name='ClientTypes'),
      clipboard?: string(name='Clipboard', example='off'),
      colorEnhancement?: string(name='ColorEnhancement', example='off'),
      cpuDownGradeDuration?: int32(name='CpuDownGradeDuration', example='30'),
      cpuProcessors?: [ string ](name='CpuProcessors'),
      cpuProtectedMode?: string(name='CpuProtectedMode', example='on'),
      cpuRateLimit?: int32(name='CpuRateLimit', example='70'),
      cpuSampleDuration?: int32(name='CpuSampleDuration', example='10'),
      cpuSingleRateLimit?: int32(name='CpuSingleRateLimit', example='70'),
      desktopCount?: int32(name='DesktopCount', example='1'),
      desktopGroupCount?: int32(name='DesktopGroupCount', example='1'),
      deviceRedirects?: [ 
        {
          deviceType?: string(name='DeviceType', example='camera'),
          redirectType?: string(name='RedirectType', example='usbRedirect'),
        }
      ](name='DeviceRedirects'),
      deviceRules?: [ 
        {
          deviceName?: string(name='DeviceName', example='sandisk'),
          devicePid?: string(name='DevicePid', example='0x55b1'),
          deviceType?: string(name='DeviceType', example='storage'),
          deviceVid?: string(name='DeviceVid', example='0x0781'),
          optCommand?: string(name='OptCommand', example='2:0'),
          redirectType?: string(name='RedirectType', example='usbRedirect'),
        }
      ](name='DeviceRules'),
      disconnectKeepSession?: string(name='DisconnectKeepSession', example='persistent'),
      disconnectKeepSessionTime?: int32(name='DisconnectKeepSessionTime', example='120'),
      displayMode?: string(name='DisplayMode', example='adminCustom'),
      domainRegisterValue?: string(name='DomainRegisterValue', example='xxxx'),
      domainResolveRule?: [ 
        {
          description?: string(name='Description'),
          domain?: string(name='Domain', example='*.example.com'),
          policy?: string(name='Policy', example='allow'),
        }
      ](name='DomainResolveRule'),
      domainResolveRuleType?: string(name='DomainResolveRuleType', example='on'),
      endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', example='off'),
      endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', example='off'),
      gpuAcceleration?: string(name='GpuAcceleration', example='off'),
      html5Access?: string(name='Html5Access', example='off'),
      html5FileTransfer?: string(name='Html5FileTransfer', example='off'),
      internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', example='tcp'),
      localDrive?: string(name='LocalDrive', example='readwrite'),
      maxReconnectTime?: int32(name='MaxReconnectTime', example='120'),
      memoryDownGradeDuration?: int32(name='MemoryDownGradeDuration', example='30'),
      memoryProcessors?: [ string ](name='MemoryProcessors'),
      memoryProtectedMode?: string(name='MemoryProtectedMode', example='off'),
      memoryRateLimit?: int32(name='MemoryRateLimit', example='70'),
      memorySampleDuration?: int32(name='MemorySampleDuration', example='30'),
      memorySingleRateLimit?: int32(name='MemorySingleRateLimit', example='30'),
      mobileRestart?: string(name='MobileRestart', example='off'),
      mobileShutdown?: string(name='MobileShutdown', example='off'),
      name?: string(name='Name', example='testPolicyGroupName'),
      netRedirect?: string(name='NetRedirect', example='off'),
      netRedirectRule?: [ 
        {
          domain?: string(name='Domain', example='*.example.com'),
          policy?: string(name='Policy', example='allow'),
          ruleType?: string(name='RuleType', example='domain'),
        }
      ](name='NetRedirectRule'),
      noOperationDisconnect?: string(name='NoOperationDisconnect', example='off'),
      noOperationDisconnectTime?: int32(name='NoOperationDisconnectTime', example='120'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****'),
      policyGroupType?: string(name='PolicyGroupType', example='SYSTEM'),
      policyStatus?: string(name='PolicyStatus', example='AVAILABLE'),
      printerRedirection?: string(name='PrinterRedirection', example='off'),
      qualityEnhancement?: string(name='QualityEnhancement', example='off'),
      recordContent?: string(name='RecordContent', example='off'),
      recordContentExpires?: long(name='RecordContentExpires', example='30'),
      recordEventDuration?: int32(name='RecordEventDuration', example='10'),
      recordEventFilePaths?: [ string ](name='RecordEventFilePaths'),
      recordEventRegisters?: [ string ](name='RecordEventRegisters'),
      recording?: string(name='Recording', example='off'),
      recordingAudio?: string(name='RecordingAudio', example='on'),
      recordingDuration?: int32(name='RecordingDuration', example='10'),
      recordingEndTime?: string(name='RecordingEndTime', example='08:59:00'),
      recordingExpires?: long(name='RecordingExpires', example='15'),
      recordingFps?: long(name='RecordingFps', example='5'),
      recordingStartTime?: string(name='RecordingStartTime', example='08:00:00'),
      recordingUserNotify?: string(name='RecordingUserNotify', example='off'),
      recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage'),
      remoteCoordinate?: string(name='RemoteCoordinate', example='fullControl'),
      resolutionHeight?: int32(name='ResolutionHeight', example='1280'),
      resolutionModel?: string(name='ResolutionModel', example='adaptive'),
      resolutionWidth?: int32(name='ResolutionWidth', example='1920'),
      resourceGroupCount?: int32(name='ResourceGroupCount', example='1'),
      scope?: string(name='Scope', example='GLOBAL'),
      scopeValue?: [ string ](name='ScopeValue'),
      smoothEnhancement?: string(name='SmoothEnhancement', example='off'),
      statusMonitor?: string(name='StatusMonitor', example='on'),
      streamingMode?: string(name='StreamingMode', example='smooth'),
      targetFps?: int32(name='TargetFps', example='30'),
      taskbar?: string(name='Taskbar', example='off'),
      usbRedirect?: string(name='UsbRedirect', example='off'),
      usbSupplyRedirectRule?: [ 
        {
          description?: string(name='Description'),
          productId?: string(name='ProductId', example='08**'),
          usbRedirectType?: long(name='UsbRedirectType', example='1'),
          usbRuleType?: long(name='UsbRuleType', example='1'),
          vendorId?: string(name='VendorId', example='04**'),
        }
      ](name='UsbSupplyRedirectRule'),
      videoEncAvgKbps?: int32(name='VideoEncAvgKbps', example='1000'),
      videoEncMaxQP?: int32(name='VideoEncMaxQP', example='20'),
      videoEncMinQP?: int32(name='VideoEncMinQP', example='20'),
      videoEncPeakKbps?: int32(name='VideoEncPeakKbps', example='2000'),
      videoEncPolicy?: string(name='VideoEncPolicy', example='qualityFirst'),
      videoRedirect?: string(name='VideoRedirect', example='off'),
      visualQuality?: string(name='VisualQuality', example='medium'),
      watermark?: string(name='Watermark', example='on'),
      watermarkAntiCam?: string(name='WatermarkAntiCam', example='off'),
      watermarkColor?: int32(name='WatermarkColor', example='0'),
      watermarkCustomText?: string(name='WatermarkCustomText', example='custom-watermark'),
      watermarkDegree?: double(name='WatermarkDegree', example='-10'),
      watermarkFontSize?: int32(name='WatermarkFontSize', example='10'),
      watermarkFontStyle?: string(name='WatermarkFontStyle', example='plain'),
      watermarkPower?: string(name='WatermarkPower', example='medium'),
      watermarkRowAmount?: int32(name='WatermarkRowAmount', example='3'),
      watermarkSecurity?: string(name='WatermarkSecurity', example='on'),
      watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', example='10'),
      watermarkType?: string(name='WatermarkType', example='EndUserId'),
      wyAssistant?: string(name='WyAssistant', example='on'),
    }
  ](name='DescribePolicyGroups'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeCenterPolicyListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCenterPolicyListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCenterPolicyList  DescribeCenterPolicyListRequest
  * @return DescribeCenterPolicyListResponse
 */
async function describeCenterPolicyList(request: DescribeCenterPolicyListRequest): DescribeCenterPolicyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenterPolicyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClientEventsRequest {
  desktopId?: string(name='DesktopId', description='The cloud desktop ID. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.', example='ecd-8fupvkhg0aayu****', position='Query'),
  desktopIp?: string(name='DesktopIp', description='The IP address of the cloud desktop. If you do not specify a value for this parameter, the events of all cloud desktops in the specified region are queried.', example='10.10.*.*', position='Query'),
  desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='test', position='Query'),
  directoryId?: string(name='DirectoryId', description='This parameter is not available to the public.', example='cn-hangzhou+dir-bh77qa8nmjot4****', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
If you do not specify a value for this parameter, the current time is used.', example='2020-11-31T06:32:31Z', position='Query'),
  endUserId?: string(name='EndUserId', description='The information about the end user that connects to the cloud desktop from the Elastic Desktop Service (EDS) client. The information can be a Resource Access Management (RAM) user ID or an Active Directory (AD) username. If you do not specify a value for this parameter, the events of all end users in the specified region are queried.', example='28961708130834****', position='Query'),
  eventType?: string(name='EventType', description='The type of the events that you want to query. If you specify multiple values for the EventTypes parameter, the events of all specified types are returned. If you do not specify values for the EventTypes and EventType parameters, all events of end users in the specified region are returned.

Valid values:

*   DESKTOP_STOP: End users stop the cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->

*   GET_LITE_CONNECTION_TICKET: End users obtain the credential for reconnecting to the cloud desktop upon disconnection.

    <!-- -->

    <!-- -->

    <!-- -->

*   DESKTOP_DISCONNECT: End users disconnect desktop sessions.

    <!-- -->

    <!-- -->

    <!-- -->

*   GET_CONNECTION_TICKET: End users request to connect to the cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->

*   CLIENT_LOGIN: End users log on to the cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->

*   DESKTOP_REBOOT: End users restart the cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->

*   DESKTOP_CONNECT: End users establish desktop sessions.

    <!-- -->

    <!-- -->

    <!-- -->

*   DESKTOP_START: End users start the cloud desktop.

    <!-- -->

    <!-- -->

    <!-- -->', example='DESKTOP_DISCONNECT', position='Query'),
  eventTypes?: [ string ](name='EventTypes', description='The array of event types that you want to query. You can specify multiple event types. The response contains all or specified types of events.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.\\
Default value: 100.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the cloud desktop belongs. If you do not specify a value for this parameter, the events of all workspaces in the specified region are queried.', example='cn-hangzhou+dir-bh77qa8nmjot4****', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The workspace name.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.', example='2020-11-30T06:32:31Z', position='Query'),
}

model DescribeClientEventsResponseBody = {
  events?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account with which the event is associated.', example='112259558861****'),
      bytesReceived?: string(name='BytesReceived', description='The number of bytes that are received.', example='8665'),
      bytesSend?: string(name='BytesSend', description='The number of bytes that are sent.', example='2345'),
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='100.68.*.*'),
      clientOS?: string(name='ClientOS', description='The OS that the client runs.', example='Darwin 17.7.0 x64'),
      clientVersion?: string(name='ClientVersion', description='The client version.', example='1.0.4 202012021700'),
      description?: string(name='Description', description='The description.', example='test'),
      desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-kadkdfaf****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The desktop group name.', example='testName'),
      desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ecd-8fupvkhg0aayu****'),
      desktopIp?: string(name='DesktopIp', description='The IP address of the cloud desktop.', example='10.10.*.*'),
      desktopName?: string(name='DesktopName', description='The cloud desktop name.', example='test'),
      directoryId?: string(name='DirectoryId', description='The ID of the directory to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      directoryType?: string(name='DirectoryType', description='The directory type.', example='RAM'),
      endUserId?: string(name='EndUserId', description='The information about the end user that connects to the cloud desktop from the EDS client. The information can be a RAM user ID or an AD username.', example='28961708130834****'),
      eventId?: string(name='EventId', description='The event ID.', example='5651188b-3070-d1cc-5311-75753d59****'),
      eventTime?: string(name='EventTime', description='The time when the event occurred.', example='2020-11-30T06:32:31Z'),
      eventType?: string(name='EventType', description='The event type. Valid values:', example='DESKTOP_DISCONNECT'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace to which the cloud desktop belongs.', example='cn-hangzhou+dir-bh77qa8nmjot4****'),
      officeSiteName?: string(name='OfficeSiteName', description='The workspace name.', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the workspace.

Valid values:

*   SIMPLE: convenience account

    <!-- -->

    <!-- -->

    <!-- -->

*   AD_CONNECTOR: enterprise AD account

    <!-- -->

    <!-- -->

    <!-- -->', example='SIMPLE'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the event. If you set the EventType parameter to `DESKTOP_DISCONNECT` or `GET_CONNECTION_TICKET`, this parameter is returned. Valid values:

*   200\\. The value indicates that the request is successful.
*   An error message. The value indicates that the request failed. Example: FailedToGetConnectionTicket.', example='200'),
    }
  ](name='Events', description='The information about the events of an end user.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='28A40F12-F340-442B-A35F-46EF6A03227B'),
}

model DescribeClientEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClientEventsResponseBody(name='body'),
}

/**
  * @description You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
  * @param request  the request parameters of DescribeClientEvents  DescribeClientEventsRequest
  * @return DescribeClientEventsResponse
 */
async function describeClientEvents(request: DescribeClientEventsRequest): DescribeClientEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudDriveGroupsRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.

This parameter is required.', example='cn-shanghai+cds-135515****', position='Query'),
  directoryId?: string(name='DirectoryId', description='The workspace ID.', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  directoryName?: string(name='DirectoryName', description='The workspace name.', example='testDirectoryName', position='Query'),
  driveStatus?: string(name='DriveStatus', description='The team space status. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='enabled', position='Query'),
  driveType?: string(name='DriveType', description='Specifies whether the space is increased.

*   binding: increased
*   unbound: not increased

Default value: null. The default value indicates that all spaces are queried.', example='binding', position='Query'),
  groupId?: [ string ](name='GroupId', description='The team ID.', position='Query'),
  groupName?: string(name='GroupName', description='The team name for fuzzy search.', example='Test Team 1', position='Query'),
  groupType?: string(name='GroupType', description='The team type.

*   org: organizational structure
*   directory: workspace

Default value: null. The default value indicates that all types of teams are queried.', example='org', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 20', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6lY3I2VNHLwy+nIoSXh****', position='Query'),
  parentGroupId?: string(name='ParentGroupId', description='The ID of the parent node. If a parent node ID is specified, the subnodes are queried. If you set the value of this parameter to root, the root node is queried.

Default value: null. The default value indicates that all nodes are queried.', example='cg-e70ga4ixp30ur****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeCloudDriveGroupsResponseBody = {
  cloudDriveGroups?: [ 
    {
      adminUserIds?: string(name='AdminUserIds'),
      adminUserInfos?: [ 
        {
          email?: string(name='Email'),
          endUserId?: string(name='EndUserId'),
          jobNumber?: string(name='JobNumber'),
          nickName?: string(name='NickName'),
          phone?: string(name='Phone'),
          realNickName?: string(name='RealNickName'),
          remark?: string(name='Remark'),
        }
      ](name='AdminUserInfos'),
      createTime?: string(name='CreateTime', description='The time when the team space was created.', example='2022-04-11T07:44:21Z'),
      directoryId?: string(name='DirectoryId', description='The workspace ID.', example='cn-hangzhou+dir-959593****'),
      driveId?: string(name='DriveId', description='The team space ID.', example='sh1234'),
      groupId?: string(name='GroupId', description='The team ID.', example='cg-e70ga4ixp30ur****'),
      groupName?: string(name='GroupName', description='The name of the team space.', example='Test Team 1'),
      orgId?: string(name='OrgId'),
      recycleBinSize?: string(name='RecycleBinSize'),
      status?: string(name='Status', description='The team space status. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='enabled'),
      totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='5368709120'),
      usedSize?: string(name='UsedSize', description='The capacity of the used space. Unit: bytes.', example='1024000000'),
    }
  ](name='CloudDriveGroups', description='The list of team spaces.'),
  count?: long(name='Count', description='The total number of entries returned.', example='0'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='EF015AE5-B30A-5189-B519-735CEE40****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeCloudDriveGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudDriveGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCloudDriveGroups  DescribeCloudDriveGroupsRequest
  * @return DescribeCloudDriveGroupsResponse
 */
async function describeCloudDriveGroups(request: DescribeCloudDriveGroupsRequest): DescribeCloudDriveGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudDriveGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudDrivePermissionsRequest {
  cdsId: string(name='CdsId', description='This parameter is required.', example='cn-hangzhou+cds-82414*****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeCloudDrivePermissionsResponseBody = {
  cloudDrivePermissionModels?: [ 
    {
      endUsers?: [ string ](name='EndUsers'),
      permission?: string(name='Permission', example='CDS_DOWNLOAD'),
    }
  ](name='CloudDrivePermissionModels'),
  requestId?: string(name='RequestId', example='A87DBB05-653A-5E4B-B72B-5F4A1E07E5B3'),
}

model DescribeCloudDrivePermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudDrivePermissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCloudDrivePermissions  DescribeCloudDrivePermissionsRequest
  * @return DescribeCloudDrivePermissionsResponse
 */
async function describeCloudDrivePermissions(request: DescribeCloudDrivePermissionsRequest): DescribeCloudDrivePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudDrivePermissions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudDriveUsersRequest {
  cdsId: string(name='CdsId', description='This parameter is required.', example='cn-hangzhou+cds-066224****', position='Query'),
  endUserId?: string(name='EndUserId', example='abc', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', example='aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeCloudDriveUsersResponseBody = {
  cloudDriveUsers?: [ 
    {
      driveId?: string(name='DriveId', example='8'),
      endUserId?: string(name='EndUserId'),
      status?: string(name='Status', example='enabled'),
      totalSize?: long(name='TotalSize', example='10240000'),
      usedSize?: long(name='UsedSize', example='20490'),
      userId?: string(name='UserId', example='abc'),
      userName?: string(name='UserName', example='abc'),
    }
  ](name='CloudDriveUsers'),
  nextToken?: string(name='NextToken', example='aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****'),
  requestId?: string(name='RequestId', example='F083AAE5-7AA9-53BB-9060-AFFB2C18****'),
}

model DescribeCloudDriveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudDriveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCloudDriveUsers  DescribeCloudDriveUsersRequest
  * @return DescribeCloudDriveUsersResponse
 */
async function describeCloudDriveUsers(request: DescribeCloudDriveUsersRequest): DescribeCloudDriveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudDriveUsers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConfigGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the configuration group.', example='cg-i1ruuudp92qpj****', position='Query'),
  groupIds?: [ string ](name='GroupIds', description='The IDs of the configuration groups.', position='Query'),
  name?: string(name='Name', description='The name of the configuration group.', example='ScheduledTask', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  productType?: string(name='ProductType', description='The service type of the configuration group.

Valid value:

*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
  statuses?: [ string ](name='Statuses', description='The status of the configuration groups.', position='Query'),
  type?: string(name='Type', description='The type of the configuration group.

Valid value:

*   Timer: the scheduled task type.', example='Timer', position='Query'),
}

model DescribeConfigGroupResponseBody = {
  data?: [ 
    {
      bindCount?: int32(name='BindCount', description='The number of resources that are bound to the configuration group.', example='4'),
      bindCountMap?: map[string]int32(name='BindCountMap', description='The number of bound cloud computers.'),
      description?: string(name='Description', description='The description of the configuration group.', example='ScheduledTask'),
      groupId?: string(name='GroupId', description='The ID of the configuration group.', example='ccg-0cid8v30an12****'),
      name?: string(name='Name', description='The name of the configuration group.', example='ScheduledTask'),
      productType?: string(name='ProductType', description='The service type of the configuration group.

Valid values:

*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
      status?: string(name='Status', description='The state of the configuration group.

Valid values:

*   AVAILABLE: The configuration group is available.
*   UNAVAILABLE: The configuration group is deleted.
*   DELETING: The configuration group is being deleted.
*   UPDATING: The configuration group is being modified.', example='AVAILABLE'),
      type?: string(name='Type', description='The type of the configuration group.

Valid values:

*   Timer: the scheduled task type.', example='Timer'),
    }
  ](name='Data', description='The configuration groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeConfigGroup  DescribeConfigGroupRequest
  * @return DescribeConfigGroupResponse
 */
async function describeConfigGroup(request: DescribeConfigGroupRequest): DescribeConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomizedListHeadersRequest {
  langType?: string(name='LangType', example='zh-CN', position='Query'),
  listType?: string(name='ListType', example='desktop', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeCustomizedListHeadersResponseBody = {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', example='display'),
      headerKey?: string(name='HeaderKey', example='pay_type'),
      headerName?: string(name='HeaderName'),
    }
  ](name='Headers'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeCustomizedListHeadersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomizedListHeadersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustomizedListHeaders  DescribeCustomizedListHeadersRequest
  * @return DescribeCustomizedListHeadersResponse
 */
async function describeCustomizedListHeaders(request: DescribeCustomizedListHeadersRequest): DescribeCustomizedListHeadersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomizedListHeaders', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopGroupSessionsRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='"2022-08-31T06:56:45Z"', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='xianqiu', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='"asdfdfsdfsdfds"', position='Query'),
  ownType?: int32(name='OwnType', description='The type of the session.

Valid values:

*   0: single-session
*   1: multi-session', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  sessionStatus?: string(name='SessionStatus', description='The status of the session.

Valid values:

*   Connected

    <!-- -->

    <!-- -->

    <!-- -->

*   Disconnected

    <!-- -->

    <!-- -->

    <!-- -->', example='Connected', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='"2022-08-31T06:56:45Z"', position='Query'),
}

model DescribeDesktopGroupSessionsResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='caeba0bbb2'),
  requestId?: string(name='RequestId', description='The request ID.', example='D0920845-7359-59FC-9899-B****'),
  sessions?: [ 
    {
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='172.21.XX.XX'),
      clientOS?: string(name='ClientOS', description='The OS that the client runs.', example='windows_\\"Windows10Enterprise\\"10.0(Build22000)'),
      clientVersion?: string(name='ClientVersion', description='The version of the client.', example='2.0.0-R-20221030.08****'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-iaqu3bi2xtie****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='Test'),
      desktopId?: string(name='DesktopId', description='If the session is being established, the value of this parameter indicates the ID of the current cloud desktop. If the session is disconnected, the value of this parameter indicates the ID of the cloud desktop that was most recently connected.', example='ecd-g6t1ukbaea****'),
      endUserApplyCoordinateTime?: long(name='EndUserApplyCoordinateTime', description='The point in time when the end user applies for administrator assistance.', example='1678794261000'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='xianqiu'),
      lastSessionEndTime?: string(name='LastSessionEndTime', description='The end time of the most recent connection.', example='2022-08-31 06:56:45'),
      lastSessionStartTime?: string(name='LastSessionStartTime', description='The start time of the most recent connection.', example='2022-08-31 06:56:45'),
      latestConnectionTime?: long(name='LatestConnectionTime', description='The duration of the most recent session.', example='120'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-8904****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='Test'),
      osType?: string(name='OsType', description='The OS. Valid values:

*   Windows
*   Linux', example='Windows'),
      ownType?: int32(name='OwnType', description='The type of the session.

Valid values:

*   0: single-session
*   1: multi-session', example='0'),
      protocolType?: string(name='ProtocolType', description='The type of the protocol.', example='ASP'),
      sessionIdleTime?: long(name='SessionIdleTime', description='The duration during which the cloud desktop stays in the Idle state.', example='120'),
      sessionStatus?: string(name='SessionStatus', description='The state of the session.

Valid values:

*   Connected

    <!-- -->

    <!-- -->

    <!-- -->

*   Disconnected

    <!-- -->

    <!-- -->

    <!-- -->', example='Connected'),
      totalConnectionDuration?: long(name='TotalConnectionDuration', description='The total duration of the sessions.', example='120'),
    }
  ](name='Sessions', description='The sessions.'),
  totalCount?: int32(name='TotalCount', description='The total number of sessions.', example='15'),
}

model DescribeDesktopGroupSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopGroupSessionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopGroupSessions  DescribeDesktopGroupSessionsRequest
  * @return DescribeDesktopGroupSessionsResponse
 */
async function describeDesktopGroupSessions(request: DescribeDesktopGroupSessionsRequest): DescribeDesktopGroupSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopGroupSessions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopGroupsRequest {
  bundleId?: [ string ](name='BundleId', description='The IDs of the cloud computer templates.', position='Query'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the cloud computer pool.', position='Query'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the cloud computer pool to query. Fuzzy search is supported.', example='testName', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The authorized user IDs of cloud computer pools.', position='Query'),
  excludedEndUserIds?: [ string ](name='ExcludedEndUserIds', description='The authorized users that you want to exclude.', position='Query'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  multiResource?: boolean(name='MultiResource', description='Specifies whether the shared group is a multi-cloud computer type.

Valid values:

- true: a multi-cloud computer type.
- false: a single-cloud computer type.', example='true', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network to which the cloud computer pool belongs.', example='cn-hangzhou+dir-467671****', position='Query'),
  ownType?: long(name='OwnType', description='The type of the cloud computer pool.

>  This parameter is not publicly available.

Valid values:

*   0: individual (single session)
*   1: shared (multiple sessions)', example='0', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the cloud computer pool. The unit is specified by the `PeriodUnit` parameter.

*   Valid values if the `PeriodUnit` parameter is set to `Month`:

    *   1
    *   2
    *   3
    *   6

*   Valid values if the `PeriodUnit` parameter is set to `Year`:

    *   1
    *   2
    *   3
    *   4
    *   5', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.', example='Month', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that you want to associate with the cloud computer pool.', example='pg-53iyi2aar0nd6****', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   High-definition Experience (HDX)

    <!-- -->

    <!-- -->

    <!-- -->

*   Adaptive Streaming Protocol (ASP)

    <!-- -->

    <!-- -->

    <!-- -->', example='ASP', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: int32(name='Status', description='The payment status of the cloud computer pool.

Valid values:

*   0: unpaid
*   1: paid
*   2: overdue or expired', example='1', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags attached to the cloud computer pool. You can specify 1 to 20 tags.', position='Query'),
}

model DescribeDesktopGroupsResponseBody = {
  desktopGroups?: [ 
    {
      bindAmount?: long(name='BindAmount', description='The number of concurrent sessions that is allowed for each cloud computer pool in a multi-session cloud computer pool.', example='1'),
      buyDesktopsCount?: int32(name='BuyDesktopsCount', description='*   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
*   For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Valid values: 0 to `MaxDesktopsCount`. Default value: 1.', example='5'),
      comments?: string(name='Comments', description='The remarks.', example='test'),
      connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which a session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.', example='90000'),
      countPerStatus?: [ 
        {
          count?: int32(name='Count', description='The total number of cloud computers.', example='10'),
          status?: string(name='Status', description='The status of the cloud computer.

Valid values:

*   Stopped

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   Rebuilding

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Expired

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleted

    <!-- -->

    <!-- -->

    <!-- -->

*   Pending

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
        }
      ](name='CountPerStatus', description='The number of cloud computers in each state.'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
      createTime?: string(name='CreateTime', description='The time when the cloud computer pool was created.', example='2022-02-17T14:51:07Z'),
      creator?: string(name='Creator', description='The Alibaba Cloud account that creates the cloud computer pool.', example='1007214305******'),
      dataDiskCategory?: string(name='DataDiskCategory', description='The category of the user disk.

Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)', example='cloud_ssd'),
      dataDiskSize?: string(name='DataDiskSize', description='The user disk capacity. Unit: GiB.', example='50'),
      desktopCount?: int32(name='DesktopCount', description='The number of cloud computers that are created.', example='2'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool.', example='dg-2i8qxpv6t1a03****'),
      desktopGroupName?: string(name='DesktopGroupName', description='The name of the cloud computer pool.', example='test1'),
      desktopType?: string(name='DesktopType', description='The cloud computer type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the IDs of the cloud computer types supported by WUYING Workspace.', example='eds.enterprise_office.4c4g'),
      endUserCount?: int32(name='EndUserCount', description='The number of users that are granted permissions to use the cloud computer pool.', example='1'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud computer pool expires.', example='2022-03-17T16:00:00Z'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='12'),
      gpuSpec?: string(name='GpuSpec', description='The GPU memory.', example='16 GiB'),
      idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='The period of time after which a session is closed. After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.', example='90000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-gq15cq5ydlvwn****'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration of a session after the session is disconnected. Valid values: 180000 (3 minutes) to 345600000 (4 days). Unit: milliseconds. If you set this parameter to 0, the session is permanently retained after it is disconnected.

When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.', example='1000'),
      loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session cloud computer pool.

Valid values:

*   0: depth-first
*   1: breadth-first', example='1'),
      maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.', example='10'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='16384'),
      minDesktopsCount?: int32(name='MinDesktopsCount', description='The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.', example='1'),
      officeSiteId?: string(name='OfficeSiteId', description='The name of the office network in which the cloud computer pool resides.', example='cn-hangzhou+dir-467671****'),
      officeSiteName?: string(name='OfficeSiteName', description='The ID of the office network to which the cloud computer pool belongs.', example='testName'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the office network.

Valid values:

*   PERSONAL: individual office network
*   SIMPLE: convenience office network
*   AD_CONNECTOR: enterprise Active Directory (AD) office network
*   RAM: Resource Access Management (RAM)-based office network', example='SIMPLE'),
      osType?: string(name='OsType', description='The OS.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows'),
      ownBundleId?: string(name='OwnBundleId', description='The ID of the cloud computer template.', example='bundle_eds_general_4c8g_s8d5_win2019'),
      ownBundleName?: string(name='OwnBundleName', description='The name of the cloud computer template.', example='test'),
      ownType?: long(name='OwnType', description='The type of the cloud computer pool.

Valid values:

*   0: individual (single session)
*   1: shared (multiple sessions)', example='0'),
      payType?: string(name='PayType', description='The billing method of the cloud computer pool.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PrePaid'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that is associated with the cloud computer pool.', example='pg-53iyi2aar0nd6c8qj'),
      policyGroupName?: string(name='PolicyGroupName', description='The name of the policy that is associated with the cloud computer pool.', example='test-policy'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX

    <!-- -->

    <!-- -->

    <!-- -->

*   ASP

    <!-- -->

    <!-- -->

    <!-- -->', example='ASP'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions is calculated by using the following formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.

When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.', example='0.85'),
      resetType?: long(name='ResetType', description='The disk reset type of the cloud computer pool.

Valid values:

*   0: does not reset disks
*   1: resets only the system disks
*   2: resets only the user disks
*   3: resets the system disks and user disks', example='0'),
      status?: int32(name='Status', description='The payment status of the cloud computer pool.

Valid values:

*   0: unpaid
*   1: paid
*   2: overdue or expired', example='1'),
      stopDuration?: long(name='StopDuration', description='The period of time after which an idle cloud computer is stopped. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer is automatically started. Unit: milliseconds.', example='900000'),
      subnetId?: string(name='SubnetId', description='The ID of the subnet.', example='vsw-uf63bb6*****8gfytm'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.

Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)', example='cloud_ssd'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk capacity. Unit: GiB.', example='80'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='desktop_group_name'),
          value?: string(name='Value', description='The value of the tag.', example='ds-dq2mybjr23yw*****'),
        }
      ](name='Tags', description='The tags attached to the cloud computer pool.'),
      userOuPath?: string(name='UserOuPath'),
      version?: int32(name='Version', description='The version number of the cloud computer pool.', example='2'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key for disk encryption.', example='e5409ada-xxxx-xxxx-xxxx-89e31e23e993'),
    }
  ](name='DesktopGroups', description='The cloud computer pools.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopGroups  DescribeDesktopGroupsRequest
  * @return DescribeDesktopGroupsResponse
 */
async function describeDesktopGroups(request: DescribeDesktopGroupsRequest): DescribeDesktopGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopInfoRequest {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 100 IDs.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeDesktopInfoResponseBody = {
  desktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the user.

Valid values:

*   Connected
*   Disconnected', example='Disconnected'),
      currentAppVersion?: string(name='CurrentAppVersion', description='The version of the cloud computer image.', example='1.4.0-R-***'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool.', example='dg-3uiojcc0j4kh7****'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-gx2x1dhsmucyy****'),
      desktopStatus?: string(name='DesktopStatus', description='The status of the cloud computer.

Valid values:

*   Stopped
*   Failed
*   Starting
*   Running
*   Stopping
*   Expired
*   Deleted
*   Pending', example='Running'),
      managementFlag?: [ string ](name='ManagementFlag', description='The information about flags that are used to manage cloud computers.'),
      newAppSize?: long(name='NewAppSize', description='The size of the update package. Unit: KB.', example='568533470'),
      newAppVersion?: string(name='NewAppVersion', description='The version number of the image that can be updated on the cloud computer.', example='1.6.0-R-***'),
      releaseNote?: string(name='ReleaseNote', description='The description of the image version that can be updated.', example='Test package 03-07'),
      startTime?: string(name='StartTime', description='The time when the cloud computer was first started.', example='2020-11-06T08:31Z'),
    }
  ](name='Desktops', description='The basic information about cloud computers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='062B1439-709A-580E-85DF-CE97A1560565'),
}

model DescribeDesktopInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopInfo  DescribeDesktopInfoRequest
  * @return DescribeDesktopInfoResponse
 */
async function describeDesktopInfo(request: DescribeDesktopInfoRequest): DescribeDesktopInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopOversoldGroupRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  oversoldGroupIds?: [ string ](name='OversoldGroupIds', position='Query'),
}

model DescribeDesktopOversoldGroupResponseBody = {
  count?: int32(name='Count'),
  data?: [ 
    {
      concurrenceCount?: int32(name='ConcurrenceCount'),
      curConcurrenceCount?: int32(name='CurConcurrenceCount'),
      dataDiskSize?: int32(name='DataDiskSize'),
      description?: string(name='Description'),
      desktopType?: string(name='DesktopType'),
      directoryId?: string(name='DirectoryId'),
      expireTime?: string(name='ExpireTime'),
      idleDisconnectDuration?: string(name='IdleDisconnectDuration'),
      imageId?: string(name='ImageId'),
      keepDuration?: string(name='KeepDuration'),
      name?: string(name='Name'),
      oversoldGroupId?: string(name='OversoldGroupId'),
      oversoldUserCount?: int32(name='OversoldUserCount'),
      oversoldWarn?: int32(name='OversoldWarn'),
      policyGroupId?: string(name='PolicyGroupId'),
      saleStatus?: string(name='SaleStatus'),
      status?: string(name='Status'),
      stopDuration?: long(name='StopDuration'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopOversoldGroup  DescribeDesktopOversoldGroupRequest
  * @return DescribeDesktopOversoldGroupResponse
 */
async function describeDesktopOversoldGroup(request: DescribeDesktopOversoldGroupRequest): DescribeDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopOversoldUserRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  endUserId?: string(name='EndUserId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  userDesktopIds?: [ string ](name='UserDesktopIds', position='Query'),
  userGroupId?: string(name='UserGroupId', position='Query'),
}

model DescribeDesktopOversoldUserResponseBody = {
  count?: int32(name='Count'),
  data?: [ 
    {
      endUserId?: string(name='EndUserId'),
      oversoldGroupId?: string(name='OversoldGroupId'),
      userDesktopId?: string(name='UserDesktopId'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopOversoldUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopOversoldUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopOversoldUser  DescribeDesktopOversoldUserRequest
  * @return DescribeDesktopOversoldUserResponse
 */
async function describeDesktopOversoldUser(request: DescribeDesktopOversoldUserRequest): DescribeDesktopOversoldUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopOversoldUser', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopOversoldUserGroupRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', position='Query'),
}

model DescribeDesktopOversoldUserGroupResponseBody = {
  count?: int32(name='Count'),
  data?: [ 
    {
      imageId?: string(name='ImageId'),
      name?: string(name='Name'),
      oversoldGroupId?: string(name='OversoldGroupId'),
      policyGroupId?: string(name='PolicyGroupId'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopOversoldUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopOversoldUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopOversoldUserGroup  DescribeDesktopOversoldUserGroupRequest
  * @return DescribeDesktopOversoldUserGroupResponse
 */
async function describeDesktopOversoldUserGroup(request: DescribeDesktopOversoldUserGroupRequest): DescribeDesktopOversoldUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopOversoldUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopSessionsRequest {
  checkOsSession?: boolean(name='CheckOsSession', description='Specifies whether to turn on the switch to check session status of cloud computers.', example='true', position='Query'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='DemoComputer', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='2023-02-13T02:51:43Z', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='testUser', position='Query'),
  endUserIdFilter?: string(name='EndUserIdFilter', description='The ID the end user. It is the same as EndUserId. Either one of these two parameters is required.', example='alice', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-363353****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  sessionStatus?: string(name='SessionStatus', description='The state of the session.

Valid values:

*   Connected
*   Disconnected', example='Connected', position='Query'),
  startTime?: string(name='StartTime', description='The start of the time range to query.', example='2023-01-28T02:31:43Z', position='Query'),
  subPayType?: string(name='SubPayType', description='The billing method of cloud computers.

Valid values:

*   duration: hourly plan (available for users in the whitelist)
*   postPaid: pay-as-you-go
*   monthPackage: monthly subscription (the 120-hour/250-hour computing plan)
*   prePaid: monthly subscription (the Unlimited computing plan)', example='monthPackage', position='Query'),
}

model DescribeDesktopSessionsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3EC4A6DB-EC8D-55B0-9038-543DE671****'),
  sessions?: [ 
    {
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='172.21.XX.XX'),
      clientOS?: string(name='ClientOS', description='The client OS.', example='windows_\\"Windows10Enterprise\\"10.0(Build22000)'),
      clientVersion?: string(name='ClientVersion', description='The client version.', example='2.0.0-R-20221030.08****'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-g6t1ukbaea****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testDesktop'),
      endUserApplyCoordinateTime?: long(name='EndUserApplyCoordinateTime', description='The duration of the remote assistance. Unit: seconds.', example='120'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='testUser'),
      latestConnectionTime?: long(name='LatestConnectionTime', description='The duration of the last connection to the cloud computer. Unit: seconds.', example='120'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-8904****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the office network.', example='DemoOfficeSite'),
      osSessionStatus?: string(name='OsSessionStatus', description='Indicates whether the switch to check session status of cloud computers is turned on.', example='true'),
      osType?: string(name='OsType', description='The OS.

Valid values:

*   Linux
*   Windows', example='Windows'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX
*   ASP', example='ASP'),
      sessionEndTime?: string(name='SessionEndTime', description='The end time of the session.', example='2023-01-28T02:31:43Z'),
      sessionIdleTime?: long(name='SessionIdleTime', description='The idle duration of the session. Unit: seconds.', example='120'),
      sessionStartTime?: string(name='SessionStartTime', description='The start time of the session.', example='2023-01-28T02:31:43Z'),
      sessionStatus?: string(name='SessionStatus', description='The state of the session.

Valid values:

*   Connected
*   Disconnected', example='Connected'),
      subPayType?: string(name='SubPayType', description='The billing method of cloud computers.

Valid values:

*   duration: hourly plan (available for users in the whitelist)
*   postPaid: pay-as-you-go
*   monthPackage: monthly subscription (120-hour computing plan and 250-hour computing plan)
*   prePaid: monthly subscription (Unlimited computing plan)', example='monthPackage'),
      totalConnectionTime?: long(name='TotalConnectionTime', description='The total connection duration. Unit: seconds.', example='240'),
    }
  ](name='Sessions', description='Details of sessions.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeDesktopSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopSessionsResponseBody(name='body'),
}

/**
  * @description You can only query data within the last 30 days.
  * @param request  the request parameters of DescribeDesktopSessions  DescribeDesktopSessionsRequest
  * @return DescribeDesktopSessionsResponse
 */
async function describeDesktopSessions(request: DescribeDesktopSessionsRequest): DescribeDesktopSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopSessions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopTypesRequest {
  appliedScope?: string(name='AppliedScope', description='Applicable Scope of specifications. Default value: `Public`', example='Public', position='Query'),
  cpuCount?: int32(name='CpuCount', description='The number of vCPUs.', example='2', position='Query'),
  desktopGroupIdForModify?: string(name='DesktopGroupIdForModify', description='The ID of the cloud computer pool when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer pool is included in the response.', example='dg-abcdefg****', position='Query'),
  desktopIdForModify?: string(name='DesktopIdForModify', description='The ID of the cloud computer when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer is included in the response.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  desktopTypeId?: string(name='DesktopTypeId', description='The IDs of the instance types of cloud computers.

>  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance types of cloud computers are queried.

Valid values:

*   eds.hf.4c8g

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.basic.large

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.advanced.large

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.basic.small

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.graphics.2xlarge

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.hf.8c16g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.hf.12c24g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.8c16g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.16c32g

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.advanced.xlarge

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.graphics.16c1t4

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.graphics.xlarge

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.performance.2xlarge

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.8c32g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.2c2g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.2c4g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.graphics.24c1t4

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.4c8g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.4c16g

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general.2c8g

    <!-- -->

    <!-- -->

    <!-- -->', example='ecd.graphics.xlarge', position='Query'),
  desktopTypeIdList?: [ string ](name='DesktopTypeIdList', description='The array of specifications.', position='Query'),
  gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1', position='Query'),
  gpuDriverType?: string(name='GpuDriverType', description='The type of the pre-installed GPU driver. Valid values:

- T4
- A10
- G28
- G39', example='A10', position='Query'),
  gpuMemory?: int32(name='GpuMemory', description='The GPU memory size. Unit: MB.', example='2048', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The name of the instance family.

>  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance families of cloud computers are queried.

Valid values:

*   ecd.advanced

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.graphics

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.basic

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.hf

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.graphics

    <!-- -->

    <!-- -->

    <!-- -->

*   eds.general

    <!-- -->

    <!-- -->

    <!-- -->

*   ecd.performance

    <!-- -->

    <!-- -->

    <!-- -->', example='ecd.graphics', position='Query'),
  memorySize?: int32(name='MemorySize', description='The memory size. Unit: MiB.', example='4', position='Query'),
  orderBy?: string(name='OrderBy', description='The sort criterion. If left empty, the entries will be in descending order based on the creation time. Valid values:

- Memory: sort by memory size
- Cpu: sort by number of CPU cores', example='Memory', position='Query'),
  orderType?: string(name='OrderType', description='The order type.', example='DOWNGRADE', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  scope?: string(name='Scope', description='The sales mode. Valid values:

- MonthPackage: monthly subscription
- FastBuy: fast buy', example='FastBuy', position='Query'),
  sortType?: string(name='SortType', description='The sort order. Valid values:

- ASC: in ascending order [default]
- DESC: in descending order', example='ASC', position='Query'),
  supportMinSessionCount?: int32(name='SupportMinSessionCount', description='The number of sessions supported.', example='2', position='Query'),
  zoneId?: string(name='ZoneId', description='> This parameter is not publicly available.', example='null', position='Query'),
}

model DescribeDesktopTypesResponseBody = {
  desktopTypes?: [ 
    {
      cpuCount?: string(name='CpuCount', description='The number of vCPUs.', example='2'),
      dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='150'),
      desktopTypeId?: string(name='DesktopTypeId', description='The ID of the cloud desktop type.', example='ecd.graphics.xlarge'),
      desktopTypeStatus?: string(name='DesktopTypeStatus', description='The status of the cloud desktop type. If SUFFICIENT is returned, the number of cloud desktops of the type is sufficient.', example='SUFFICIENT'),
      gpuCount?: float(name='GpuCount', description='The number of GPUs.', example='1'),
      gpuMemory?: int32(name='GpuMemory', description='The GPU memory size. Unit: MB. This parameter applies to GPU-enabled cloud computers only.', example='2048'),
      gpuSpec?: string(name='GpuSpec', description='The GPU memory.', example='16 GiB'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The family of the cloud desktop type.', example='ecd.graphics'),
      maxSessionCount?: int32(name='MaxSessionCount', description='The number of sessions supported by the current specification.', example='4'),
      memorySize?: string(name='MemorySize', description='The memory size. Unit: MiB.', example='23552'),
      scopes?: [ string ](name='Scopes', description='The array of sales modes.'),
      stockState?: string(name='StockState', description='The stock status.', example='Sufficient'),
      systemDiskSize?: string(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='150'),
    }
  ](name='DesktopTypes', description='Details of cloud desktop types.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeDesktopTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopTypesResponseBody(name='body'),
}

/**
  * @description When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all types of cloud desktops are queried.
  * @param request  the request parameters of DescribeDesktopTypes  DescribeDesktopTypesRequest
  * @return DescribeDesktopTypesResponse
 */
async function describeDesktopTypes(request: DescribeDesktopTypesRequest): DescribeDesktopTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopsRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud computer.

Valid values:

*   Postpaid (default): pay-as-you-go
*   PrePaid: subscription', example='PostPaid', position='Query'),
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool. If you specify `OnlyDesktopGroup`, ignore `DesktopGroupId`. If you leave `DesktopId` empty, all IDs of the cloud computers in the cloud computer pool are queried.````', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopId?: [ string ](name='DesktopId', description='The cloud computer IDs. You can specify the IDs of 1 to 100 cloud computers.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  desktopName?: string(name='DesktopName', description='The cloud computer name.', example='testDesktopName', position='Query'),
  desktopStatus?: string(name='DesktopStatus', description='The cloud computer status.

Valid values:

*   Stopped
*   Starting
*   Rebuilding
*   Running
*   Stopping
*   Expired
*   Deleted
*   Pending', example='Running', position='Query'),
  desktopStatusList?: [ string ](name='DesktopStatusList', description='The list of cloud computer status.', position='Query'),
  desktopType?: string(name='DesktopType', description='The cloud computer type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the IDs of all supported types.', example='eds.general.2c8g', position='Query'),
  directoryId?: string(name='DirectoryId', description='The directory ID, which is the same as the office network ID.', example='cn-hangzhou+dir-363353****', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The authorized users of the cloud computer. You can specify the IDs of 1 to 100 users.

>  During a specific period of time, only one user can connect to and use the cloud computer.', example='alice', position='Query'),
  excludedEndUserId?: [ string ](name='ExcludedEndUserId', description='The list of authorized users that you want to exclude from the cloud computer. You can specify the IDs of 1 to 100 users.', example='andy', position='Query'),
  expiredTime?: string(name='ExpiredTime', description='The time when a subscription cloud computer expires.', example='2022-12-31T15:59:59Z', position='Query'),
  fillResourceGroup?: boolean(name='FillResourceGroup', description='Specifies whether to query the information about the enterprise resource group.', example='true', position='Query'),
  filterDesktopGroup?: boolean(name='FilterDesktopGroup', description='Specifies whether to exclude pooled cloud computers.

Valid values:

*   true (default)
*   false', example='false', position='Query'),
  gpuInstanceGroupId?: string(name='GpuInstanceGroupId', description='The ID of the elastic GPU pool.', example='gp-0bm2iz1v6m6nx****', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the cloud computer pool.', example='dg-boyczi8enfyc5****', position='Query'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images.', position='Query'),
  managementFlag?: string(name='ManagementFlag', description='The flag that is used to manage the cloud desktops.', example='NoFlag', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Maximum value: 100
*   Default value: 10', example='10', minimum=1, maximum=1000, position='Query'),
  multiResource?: boolean(name='MultiResource', description='Specifies whether the shared group is a multi-cloud computer type.

Valid values:

- true: a multi-cloud computer type.
- false: a single-cloud computer type.', example='false', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The office network name.', example='testName', position='Query'),
  onlyDesktopGroup?: boolean(name='OnlyDesktopGroup', description='Specifies whether to query pooled cloud computers.', example='true', position='Query'),
  osTypes?: [ string ](name='OsTypes', description='The operating systems (OSs).', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the cloud computer policy.', example='system-all-enabled-policy', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol.

Valid values:

*   HDX: High-definition Experience (HDX) protocol
*   ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)', example='ASP', position='Query'),
  qosRuleId?: string(name='QosRuleId', description='The ID of the network throttling rule.', example='qos-5605u0gelk200****', position='Query'),
  queryFotaUpdate?: boolean(name='QueryFotaUpdate', description='Specifies whether to query the image update information about the cloud computer.

Valid values:

*   true
*   false (default)', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the enterprise resource group.', example='rg-4hsvzbbmqdzu3s****', position='Query'),
  snapshotPolicyId?: string(name='SnapshotPolicyId', description='The ID of the snapshot policy.', example='sp-hb12mclyne09xw***', position='Query'),
  subPayType?: string(name='SubPayType', description='The billing method of the cloud computer.

Valid values:

*   duration: hourly plan (available for users in the whitelist)
*   postPaid: pay-as-you-go
*   monthPackage: monthly subscription (120-hour or 250-hour computing plan)
*   prePaid: monthly subscription (unlimited-hour computing plan)', example='monthPackage', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun` and contain only spaces.', example='TestKey'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the cloud computer. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud computers by group. This facilitates search and batch operations. For more information, see [Use tags to manage cloud computers](https://help.aliyun.com/document_detail/203781.html).', position='Query'),
  userName?: string(name='UserName', description='The name of the end user.', example='Alice', position='Query'),
}

model DescribeDesktopsResponseBody = {
  desktops?: [ 
    {
      bindAmount?: int32(name='BindAmount', description='The number of concurrent sessions of each cloud computer in a multi-session cloud computer pool.', example='10'),
      bundleId?: string(name='BundleId', description='The ID of the template used to create the cloud computer.', example='b-2g65ljy4291vl****'),
      bundleName?: string(name='BundleName', description='The name of the template used to create the cloud computer.', example='Name'),
      chargeType?: string(name='ChargeType', description='The billing method of the cloud computer.

Valid values:

*   Postpaid (default): pay-as-you-go
*   PrePaid: subscription', example='PostPaid'),
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the end user.

Valid values:

*   Unknown

    <!-- -->

    <!-- -->

    <!-- -->

*   Connected

    <!-- -->

    <!-- -->

    <!-- -->

*   Disconnected

    <!-- -->

    <!-- -->

    <!-- -->', example='Disconnected'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the cloud computer was created.', example='2020-11-06T08:28Z'),
      dataDiskCategory?: string(name='DataDiskCategory', description='>  This parameter is in invitational preview and is not publicly available.', example='null'),
      dataDiskSize?: string(name='DataDiskSize', description='>  This parameter is in invitational preview and is not publicly available.', example='null'),
      desktopDurationList?: [ 
        {
          orderInstanceId?: string(name='OrderInstanceId'),
          packageCreationTime?: string(name='PackageCreationTime'),
          packageExpiredTime?: string(name='PackageExpiredTime'),
          packageId?: string(name='PackageId'),
          packageStatus?: string(name='PackageStatus'),
          packageType?: string(name='PackageType'),
          packageUsedUpStrategy?: string(name='PackageUsedUpStrategy'),
          periodEndTime?: string(name='PeriodEndTime'),
          periodStartTime?: string(name='PeriodStartTime'),
          postPaidLimitFee?: float(name='PostPaidLimitFee'),
          totalDuration?: long(name='TotalDuration'),
          usedDuration?: long(name='UsedDuration'),
        }
      ](name='DesktopDurationList'),
      desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool to which cloud computers belong. Default value: null.``', example='null'),
      desktopId?: string(name='DesktopId', description='The cloud computer ID.', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', description='The cloud computer name.', example='testDesktopName'),
      desktopStatus?: string(name='DesktopStatus', description='The cloud computer status.', example='Running'),
      desktopType?: string(name='DesktopType', description='The cloud computer type.', example='ecd.basic.large'),
      directoryId?: string(name='DirectoryId', description='The directory ID, which is the same as the office network ID (OfficeSiteId).', example='cn-hangzhou+dir-363353****'),
      directoryType?: string(name='DirectoryType', description='>  This parameter is in invitational preview and is not publicly available.', example='SIMPLE'),
      disks?: [ 
        {
          diskCategory?: string(name='DiskCategory', description='The type of the disk. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_auto: standard SSD.
*   cloud_essd: enhanced SSD (ESSD).', example='cloud_auto'),
          diskId?: string(name='DiskId', description='The disk ID.', example='d-jedbpr4sl9l37****'),
          diskSize?: int32(name='DiskSize', description='The disk size. Unit: GiB.', example='80'),
          diskType?: string(name='DiskType', description='The type of the disk.

Valid values:

*   SYSTEM: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   DATA: data disk

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
          performanceLevel?: string(name='PerformanceLevel', description='The performance level (PL) of the disk when an enterprise SSD (ESSD) is used.

For more information about the differences among enterprise SSDs (ESSDs) at different PLs, see [ESSDs](https://help.aliyun.com/document_detail/122389.html).

Valid values:

*   PL1
*   PL0
*   PL3
*   PL2', example='PL0'),
        }
      ](name='Disks', description='The information about the disks.'),
      downgradeQuota?: long(name='DowngradeQuota', description='The number of times for which the cloud desktop can be downgraded.', example='3'),
      downgradedTimes?: long(name='DowngradedTimes', description='The number of times for which the cloud desktop has been downgraded.', example='0'),
      endUserIds?: [ string ](name='EndUserIds', description='The end user IDs.'),
      expiredTime?: string(name='ExpiredTime', description='The time when a subscription cloud computer expired.', example='2021-12-31T15:59Z'),
      fotaUpdate?: {
        currentAppVersion?: string(name='CurrentAppVersion', description='The current image version of the cloud computer.', example='0.0.0-D-20220102.000000'),
        newAppVersion?: string(name='NewAppVersion', description='The version number to which the image of the cloud computer can be updated.', example='0.0.0-R-20220307.190736'),
        releaseNote?: string(name='ReleaseNote', description='The description of the version to which the image of the cloud computer can be updated.', example='Upgrade package for testing 03-07'),
        releaseNoteEn?: string(name='ReleaseNoteEn', description='The English description of the version to which the image of the cloud computer can be updated.', example='Release note'),
        releaseNoteJp?: string(name='ReleaseNoteJp', description='The Japanese description of the image version to which the cloud desktop can be updated.', example='リリースノート'),
        size?: long(name='Size', description='The size of the installation package for the image to which the cloud desktop can be updated. Unit: KB.', example='108815097'),
      }(name='FotaUpdate', description='The information about the image version of the cloud computer.'),
      gpuCategory?: long(name='GpuCategory', description='Indicates whether the cloud computer uses GPUs.', example='0'),
      gpuCount?: float(name='GpuCount', description='The number of GPU cores.', example='1'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The GPU driver version used by the cloud computer.', example='null'),
      gpuSpec?: string(name='GpuSpec', description='The GPU Specifications.', example='NVIDIA T4'),
      hibernationBeta?: boolean(name='HibernationBeta', description='>  This parameter is in invitational preview and is not publicly available.', example='true'),
      hibernationOptionsConfigured?: boolean(name='HibernationOptionsConfigured', description='>  This parameter is in invitational preview and is not publicly available.', example='true'),
      hostName?: string(name='HostName', description='The hostname of the cloud desktop.', example='testName'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-4zfb6zj728hhr****'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used to manage the cloud computer.

Valid values:

*   Migrating: The cloud computer is being migrated.
*   Updating: The configurations of the cloud computer are being updated.
*   NoFlag: No flags are available.', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used to manage the cloud computers.'),
      memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='4096'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the supplementary network interface controller (NIC) created by EDS within an RAM user or Active Directory (AD) user. You cannot modify the ID.', example='123456'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', description='The IP address of the supplementary NIC created by EDS within an RAM or AD user.', example='192.168.74.165'),
      officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The office network name.', example='test'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the office network.

Valid values:

*   SIMPLE: convenience account
*   AD_CONNECTOR: enterprise AD account', example='SIMPLE'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The VPC type of the office network.

Valid values:

*   standard
*   customized
*   basic', example='basic'),
      osType?: string(name='OsType', description='The OS that is defined in the desktop template.', example='Windows'),
      osUpdate?: {
        checkId?: string(name='CheckId'),
        packageCount?: int32(name='PackageCount'),
        packages?: [ 
          {
            description?: string(name='Description'),
            kb?: string(name='Kb'),
            title?: string(name='Title'),
          }
        ](name='Packages'),
      }(name='OsUpdate'),
      platform?: string(name='Platform', description='The information about the OS platform.

Valid values:

*   Ubuntu
*   Windows Server 2022
*   UOS
*   CentOS
*   Windows Server 2019
*   Windows Server 2016', example='Ubuntu'),
      policyGroupId?: string(name='PolicyGroupId', description='The policy ID.', example='system-all-enabled-policy'),
      policyGroupIdList?: [ string ](name='PolicyGroupIdList', description='The IDs of the cloud computer policies.'),
      policyGroupName?: string(name='PolicyGroupName', description='The policy name.', example='test'),
      policyGroupNameList?: [ string ](name='PolicyGroupNameList', description='The names of the cloud computer policies.'),
      progress?: string(name='Progress', description='The progress of creating the cloud computer.', example='100%'),
      protocolType?: string(name='ProtocolType', description='The protocol.

Valid values:

*   HDX
*   ASP', example='ASP'),
      resourceGroups?: [ 
        {
          id?: string(name='Id', description='The ID of the enterprise resource group.', example='rg-4hsvzbbmqdzu3s****'),
          name?: string(name='Name', description='The name of the enterprise resource group.', example='Resource group 01'),
        }
      ](name='ResourceGroups', description='The information about the enterprise resource groups.'),
      sessionType?: string(name='SessionType', description='The type of the session.

Valid values:

*   SINGLE_SESSION

    <!-- -->

    <!-- -->

    <!-- -->

*   MULTIPLE_SESSION

    <!-- -->

    <!-- -->

    <!-- -->', example='SINGLE_SESSION'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', description='The ID of the end user that connects to the cloud computer.', example='29615820929547****'),
          establishmentTime?: string(name='EstablishmentTime', description='The time when the cloud computer session was established.', example='2021-03-07T08:23Z'),
          externalUserName?: string(name='ExternalUserName', description='The name of the external user.', example='Testname'),
        }
      ](name='Sessions', description='The session information about cloud computers connected by end users.'),
      snapshotPolicyId?: string(name='SnapshotPolicyId', description='The snapshot policy ID.', example='sp-gi007jgyc3kcey2bb'),
      snapshotPolicyName?: string(name='SnapshotPolicyName', description='The name of the snapshot policy.', example='testSnapshotName'),
      standardStartTime?: string(name='StandardStartTime', description='The standard start time.', example='2025-02-24T06:38:02Z'),
      startTime?: string(name='StartTime', description='The time when the cloud computer was first started.', example='2020-11-06T08:31Z'),
      supportHibernation?: boolean(name='SupportHibernation', description='Indicates whether the cloud desktop supports hibernation.', example='true'),
      systemDiskCategory?: string(name='SystemDiskCategory', description='>  This parameter is in invitational preview and is not publicly available.', example='null'),
      systemDiskSize?: int32(name='SystemDiskSize', description='>  This parameter is in invitational preview and is not publicly available.', example='0'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='Details about the tags.'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
      zoneType?: string(name='ZoneType', description='The zone type. Default value: `AvailabilityZone`. This value indicates Alibaba Cloud zones.', example='AvailabilityZone'),
    }
  ](name='Desktops', description='The information about the cloud computers.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  totalCount?: int32(name='TotalCount', description='The total number of cloud computers.', example='1'),
}

model DescribeDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktops  DescribeDesktopsRequest
  * @return DescribeDesktopsResponse
 */
async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktops', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDesktopsInGroupRequest {
  customEndTimePeriod?: long(name='CustomEndTimePeriod', position='Query'),
  customStartTimePeriod?: long(name='CustomStartTimePeriod', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  ignoreDeleted?: boolean(name='IgnoreDeleted', description='Specifies whether to ignore deletion flags.

Default value: true. Valid values:

*   true: ignores deletion flags. The cloud computers that were deleted are returned.
*   false: does not ignore deletion flags. The cloud computers that were deleted are not returned.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page.

*   Default value: 10.
*   Maximum value: 100.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  payType?: string(name='PayType', description='The billing method of the cloud computer share.', example='PrePaid', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeDesktopsInGroupResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.
If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlinePrePaidDesktopsCount?: int32(name='OnlinePrePaidDesktopsCount', description='The number of subscription cloud computers that are in the Connected state.', example='100'),
  paidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud computer.

Valid values:

*   Unknown

    <!-- -->

    <!-- -->

    <!-- -->

*   Connected

    <!-- -->

    <!-- -->

    <!-- -->

*   Disconnected

    <!-- -->

    <!-- -->

    <!-- -->', example='Connected'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ud-7ftf5b6yu77b0****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The status of the cloud computer.

Valid values:

*   Stopped

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   Rebuilding

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Expired

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleted

    <!-- -->

    <!-- -->

    <!-- -->

*   Pending

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      diskType?: string(name='DiskType', description='The type of the disk.

Valid values:

*   SYSTEM: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   DATA: data disk

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The ID of the authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of the end users who are connected to the cloud computers in the cloud computer share. If no end users are connected, no values are returned for this parameter.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='The usernames of the end users who are connected to the cloud computers in the cloud computer share. If no end users are connected, no values are returned for this parameter.'),
      fotaVersion?: string(name='FotaVersion', description='The image version.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='1.0'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The image name.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used to manage the cloud computer.

Valid values:

*   Updating: The configurations of the cloud computer are being updated.

    <!-- -->

    <!-- -->

    <!-- -->

*   NoFlag: No flags are attached to the cloud computer.

    <!-- -->

    <!-- -->

    <!-- -->', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used to manage the cloud computers.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member network interface controller (NIC) of the instance.', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary NIC of the instance.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The protocol.

Valid values:

*   HDX: High-definition Experience (HDX) protocol

    <!-- -->

    <!-- -->

    <!-- -->

*   ASP: Adaptive Streaming Protocol (ASP) protocol provided by Alibaba Cloud

    <!-- -->

    <!-- -->

    <!-- -->', example='ASP'),
      resetTime?: string(name='ResetTime', description='The time when the cloud computer was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size. Unit: GiB.', example='80'),
    }
  ](name='PaidDesktops', description='The subscription cloud computers.'),
  paidDesktopsCount?: int32(name='PaidDesktopsCount', description='The total number of subscription cloud computers.', example='10'),
  postPaidDesktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status of the cloud computer.

Valid values:

*   Unknown

    <!-- -->

    <!-- -->

    <!-- -->

*   Connected

    <!-- -->

    <!-- -->

    <!-- -->

*   Disconnected

    <!-- -->

    <!-- -->

    <!-- -->', example='Connected'),
      createDuration?: string(name='CreateDuration', description='The retention period. Unit: milliseconds.', example='4153958447'),
      createTime?: string(name='CreateTime', description='The time when the cloud computer was created.', example='2022-01-21T06:34:57Z'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ud-2i8qxpv6t1a07****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName'),
      desktopStatus?: string(name='DesktopStatus', description='The status of the cloud computer.

Valid values:

*   Stopped

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   Rebuilding

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Expired

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleted

    <!-- -->

    <!-- -->

    <!-- -->

*   Pending

    <!-- -->

    <!-- -->

    <!-- -->', example='Stopped'),
      diskType?: string(name='DiskType', description='The type of the disk.

Valid values:

*   SYSTEM: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   DATA: data disk

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      endUserId?: string(name='EndUserId', description='The ID of the authorized user.', example='alice'),
      endUserIds?: [ string ](name='EndUserIds', description='The IDs of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserNames?: [ string ](name='EndUserNames', description='The usernames of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.'),
      fotaVersion?: string(name='FotaVersion', description='The image version.', example='0.1.0-R-20220914.17****'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='1.0'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-hn5v2mmk0****'),
      imageName?: string(name='ImageName', description='The image name.', example='Win10_ZC'),
      managementFlag?: string(name='ManagementFlag', description='The flag that is used to manage the cloud computer.

Valid values:

*   Updating: The configurations of the cloud computer are being updated.

    <!-- -->

    <!-- -->

    <!-- -->

*   NoFlag: No flags are attached to the cloud computer.

    <!-- -->

    <!-- -->

    <!-- -->', example='NoFlag'),
      managementFlags?: [ string ](name='ManagementFlags', description='The flags that are used to manage the cloud computers.'),
      memberEniIp?: string(name='MemberEniIp', description='The IP address of the member NIC of the instance.', example='192.168.XX.XX'),
      osType?: string(name='OsType', description='The OS.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows'),
      primaryEniIp?: string(name='PrimaryEniIp', description='The IP address of the primary NIC of the instance.', example='192.168.XX.XX'),
      protocolType?: string(name='ProtocolType', description='The protocol.

Valid values:

*   HDX: HDX protocol

    <!-- -->

    <!-- -->

    <!-- -->

*   ASP: ASP protocol provided by Alibaba Cloud

    <!-- -->

    <!-- -->

    <!-- -->', example='HDX'),
      releaseTime?: string(name='ReleaseTime', description='The time when the cloud computer was released.', example='2022-01-21T16:34:57Z'),
      resetTime?: string(name='ResetTime', description='The time when the cloud computer was reset.', example='2021-03-03 08:48:08'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size. Unit: GiB.', example='80'),
    }
  ](name='PostPaidDesktops', description='The pay-as-you-go cloud computers.'),
  postPaidDesktopsCount?: int32(name='PostPaidDesktopsCount', description='The total number of pay-as-you-go cloud computers.', example='10'),
  postPaidDesktopsTotalAmount?: int32(name='PostPaidDesktopsTotalAmount', description='The total amount of bills for pay-as-you-go cloud computers.', example='10000'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  runningPrePaidDesktopsCount?: int32(name='RunningPrePaidDesktopsCount', description='The number of subscription cloud computers that are in the Running state.', example='100'),
  stopedPrePaidDesktopsCount?: int32(name='StopedPrePaidDesktopsCount', description='The number of subscription cloud computers that are in the Stopped state.', example='100'),
  stoppedPrePaidDesktopsCount?: int32(name='StoppedPrePaidDesktopsCount', description='The number of subscription cloud computers that are in the Stopped state.', example='100'),
}

model DescribeDesktopsInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopsInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktopsInGroup  DescribeDesktopsInGroupRequest
  * @return DescribeDesktopsInGroupResponse
 */
async function describeDesktopsInGroup(request: DescribeDesktopsInGroupRequest): DescribeDesktopsInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktopsInGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDevicesRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) office network.', example='xn--0zw****', position='Query'),
  clientType: string(name='ClientType', description='The type of the client.

Valid values:

*   1: hardware client.
*   2: software client.

This parameter is required.', example='2', position='Query'),
  deviceId?: string(name='DeviceId', description='The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.', example='5F52817BE267A43C608D245070D2****', position='Query'),
  directoryId?: string(name='DirectoryId', description='The ID of the convenient office network.', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the bound user.', example='moli', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='10', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1', position='Query'),
  region?: string(name='Region', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.', example='cn-hangzhou', position='Query'),
  userType?: string(name='UserType', description='The account type of the user.

Valid values:

*   AD: enterprise AD account.
*   SIMPLE: convenience account', example='SIMPLE', position='Query'),
}

model DescribeDevicesResponseBody = {
  devices?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.', example='5F52817BE267A43C608D245070D2****'),
      endUserList?: [ 
        {
          adDomain?: string(name='AdDomain', description='The address of the AD office network.', example='xn--0zw****'),
          directoryId?: string(name='DirectoryId', description='The ID of the convenient office network.', example='cn-hangzhou+dir-jedbpr4sl9l37****'),
          endUserId?: string(name='EndUserId', description='The ID of the user.', example='moli'),
          userType?: string(name='UserType', description='The account type of the user.

Valid values:

*   AD: enterprise AD account.
*   SIMPLE: convenience account', example='SIMPLE'),
        }
      ](name='EndUserList', description='The users who are bound to the device.'),
    }
  ](name='Devices', description='The information about devices that you queried.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BEFE642-A383-4A18-8939-FB7DE452****'),
}

model DescribeDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDevices  DescribeDevicesRequest
  * @return DescribeDevicesResponse
 */
async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', description='Details of directory IDs. You can specify one or more directory IDs.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****', position='Query'),
  directoryStatus?: string(name='DirectoryStatus', description='The directory status. This parameter is equivalent to `Status`.', example='REGISTERED', position='Query'),
  directoryType?: string(name='DirectoryType', description='The directory type.

Valid values:

*   SIMPLE: a directory of the convenience account type
*   AD_CONNECTOR: an AD directory
*   RAM: a RAM directory', example='RAM', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The directory status.

Valid values:

*   REGISTERING: The directory is being registered.

    <!-- -->

    <!-- -->

    <!-- -->

*   DEREGISTERING: The directory is being deregistered.

    <!-- -->

    <!-- -->

    <!-- -->

*   REGISTERED: The directory is registered.

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGTRUST: A trust relationship needs to be configured for the directory.

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the directory.

    <!-- -->

    <!-- -->

    <!-- -->

*   DEREGISTERED: The directory is deregistered.

    <!-- -->

    <!-- -->

    <!-- -->

*   ERROR: One or more configurations of the directory are invalid.

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTING: A trust relationship is being configured.

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGUSER: Users need to be configured for the directory.

    <!-- -->

    <!-- -->

    <!-- -->', example='REGISTERED', position='Query'),
}

model DescribeDirectoriesResponseBody = {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows. This parameter is returned only when the directory type is AD office network.', example='cnshsv21hmc****'),
  directories?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', description='The connection address.', example='`172.17.**.**`'),
          connectorStatus?: string(name='ConnectorStatus', description='Valid values:

*   CONNECT_ERROR
*   RUNNING
*   CONNECTING: You must configure domain trust for your AD system.
*   EXPIRED
*   CREATING', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the NIC to which the AD connector is mounted.', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', description='The AD connector type.

Valid values:

*   1: General

    <!-- -->

    <!-- -->

    <!-- -->

*   2: Advanced

    <!-- -->

    <!-- -->

    <!-- -->', example='1'),
          trustKey?: string(name='TrustKey', description='The trust password of the AD domain controller.', example='yfpoAD****'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the AD connector is associated.', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors', description='Details of the AD connector.'),
      adHostname?: string(name='AdHostname', description='The hostname of the domain controller.', example='dc001'),
      backupDCHostname?: string(name='BackupDCHostname', description='The hostname of the backup domain controller.', example='dc002'),
      backupDns?: string(name='BackupDns', description='The DNS address of the backup domain controller.', example='192.168.2.100'),
      creationTime?: string(name='CreationTime', description='The time when the directory was created.', example='2020-11-02T01:44Z'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', description='The security group ID. This parameter is returned only when the directory type is AD office network.', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', description='The method in which the cloud computer is connected.

Valid values:

*   VPC

    <!-- -->

    <!-- -->

    <!-- -->

*   Internet

    <!-- -->

    <!-- -->

    <!-- -->

*   Any

    <!-- -->

    <!-- -->

    <!-- -->', example='Internet'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', description='The endpoint that is used to connect to cloud computers in the directory over a VPC.', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      directoryId?: string(name='DirectoryId', description='The directory ID.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      directoryType?: string(name='DirectoryType', description='The directory type.

Valid values:

*   AD_CONNECTOR: AD directory

    <!-- -->

    <!-- -->

    <!-- -->

*   RAM: RAM directory

    <!-- -->

    <!-- -->

    <!-- -->', example='RAM'),
      dnsAddress?: [ string ](name='DnsAddress', description='The DNS address of the directory.'),
      dnsUserName?: string(name='DnsUserName', description='The username of a DNS user.', example='testDnsUserName'),
      domainName?: string(name='DomainName', description='The domain name.', example='example.com'),
      domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. This parameter is returned only when the directory type is AD office network.', example='testPassword'),
      domainUserName?: string(name='DomainUserName', description='The username of the domain administrator.', example='sAMAccountName'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the local administrator permissions are granted to users that use cloud computers in the office network.', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Indicates whether cloud computers can communicate with each other in the directory.', example='true'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', description='Indicates whether access over the Internet is enabled.

>  This parameter is unavailable.', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds', description='The IDs of File Storage NAS (NAS) file systems.'),
      logs?: [ 
        {
          level?: string(name='Level', description='The level of the log entry.

Valid values:

*   ERROR

    <!-- -->

    <!-- -->

    <!-- -->

*   INFO

    <!-- -->

    <!-- -->

    <!-- -->

*   WARN

    <!-- -->

    <!-- -->

    <!-- -->', example='INFO'),
          message?: string(name='Message', description='Details of the log entry.', example='code:success | message:Create Connector complete.'),
          step?: string(name='Step', description='The step that corresponds to the log entry.', example='DescribeDirectories'),
          timeStamp?: string(name='TimeStamp', description='The time when the log entry was printed.', example='2021-01-22T06:45Z'),
        }
      ](name='Logs', description='The registration logs. This parameter is returned only when the directory type is AD office network.'),
      mfaEnabled?: boolean(name='MfaEnabled', description='Indicates whether MFA is enabled.', example='false'),
      name?: string(name='Name', description='The directory name.', example='testDirectoryName'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Indicates whether two-step verification for logons is enabled. This parameter is returned only for directories of convenience account type.\\
If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to an Alibaba Cloud Workspace client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.', example='false'),
      ouName?: string(name='OuName', description='The organization unit that you selected when you added the cloud computer to the domain.', example='example.com/Domain Controllers'),
      ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether single sign-on (SSO) is enabled.', example='false'),
      status?: string(name='Status', description='The status of the AD directory.

Valid values:

*   REGISTERING

    <!-- -->

    <!-- -->

    <!-- -->

*   REGISTERED

    <!-- -->

    <!-- -->

    <!-- -->', example='REGISTERING'),
      subDnsAddress?: [ string ](name='SubDnsAddress', description='The DNS address of the enterprise AD subdomain.'),
      subDomainName?: string(name='SubDomainName', description='The fully qualified domain name (FQDN) of the existing AD subdomain. The value contains both the host name and the domain name.', example='child.example.com'),
      trustPassword?: string(name='TrustPassword', description='The AD trust password. This parameter is returned only when the directory type is AD office network.', example='82Tg****'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='The IDs of the vSwitches specified when the directory was created.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the vSwitch belongs. This parameter is returned only when the directory type is AD office network.', example='vpc-uf6tz5k67puge5jn8****'),
    }
  ](name='Directories', description='The directories.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F369A091-002F-49C8-AD55-02A776297C7B'),
}

model DescribeDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDirectoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDirectories  DescribeDirectoriesRequest
  * @return DescribeDirectoriesResponse
 */
async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowMetricRequest {
  endTime: string(name='EndTime', description='This parameter is required.', example='1664714703743', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  instanceType: string(name='InstanceType', description='This parameter is required.', example='desktop', position='Query'),
  metricType: string(name='MetricType', description='This parameter is required.', example='intranetOutRate', position='Query'),
  period: int32(name='Period', description='This parameter is required.', example='60', minimum=60, maximum=900, position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='1651817220643', position='Query'),
}

model DescribeFlowMetricResponseBody = {
  data?: string(name='Data', example='{\\"instanceId\\": \\"np-4wrye3ishxi47****\\", \\"requestId\\": \\"4F0CD5B6-70D6-5115-A2F7-7EAC3981****\\", \\"dataPoints\\": [{\\"timeStamp\\": 1636510320000, \\"Average\\": 293752.0}]}'),
  requestId?: string(name='RequestId', example='6857EDCB-631F-5405-BE95-45CBB4C3****'),
}

model DescribeFlowMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFlowMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFlowMetric  DescribeFlowMetricRequest
  * @return DescribeFlowMetricResponse
 */
async function describeFlowMetric(request: DescribeFlowMetricRequest): DescribeFlowMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowMetric', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowStatisticRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.\\
Default value: 1.', example='1', minimum=0, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=0, maximum=500, position='Query'),
  period: int32(name='Period', description='The statistic collection interval. Unit: seconds.

Valid values:

*   3600: 1 hour
*   10800: 3 hours
*   86400: 24 hours

This parameter is required.', example='3600', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeFlowStatisticResponseBody = {
  desktopCount?: int32(name='DesktopCount', description='The number of available cloud computers in the office network.', example='10'),
  desktopFlowStatistic?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-8bslxqq0csytn****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='desktop-1'),
      flowIn?: string(name='FlowIn', description='The traffic amount. Unit: KB.', example='1000'),
      flowRank?: int32(name='FlowRank', description='The traffic ranking.', example='1'),
    }
  ](name='DesktopFlowStatistic', description='The traffic statistics.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC2****'),
}

model DescribeFlowStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFlowStatisticResponseBody(name='body'),
}

/**
  * @description > You can query only the traffic data in the last 90 days.
  * @param request  the request parameters of DescribeFlowStatistic  DescribeFlowStatisticRequest
  * @return DescribeFlowStatisticResponse
 */
async function describeFlowStatistic(request: DescribeFlowStatisticRequest): DescribeFlowStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowStatistic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFotaPendingDesktopsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100.
*   Default value: 20.', example='20', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of `NextToken`.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network. You can call the [DescribeOfficeSites](https://help.aliyun.com/document_detail/216071.html) operation to obtain the value of this parameter.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  taskUid?: string(name='TaskUid', description='The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.', example='aot-c4khwrp9ocml4****', position='Query'),
}

model DescribeFotaPendingDesktopsResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  fotaPendingDesktops?: [ 
    {
      currentAppVersion?: string(name='CurrentAppVersion', description='The current version of the image used by the cloud computer.', example='0.0.1-D-20220513.143129'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-bvdtu3jn97o1r****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='TestDesktop'),
      fotaProject?: string(name='FotaProject', description='> This parameter is not publicly available.', example='To be hidden'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-815419****'),
      sessions?: [ 
        {
          endUserId?: string(name='EndUserId', description='The ID of the end user that connects to the cloud computer.', example='end user id'),
        }
      ](name='Sessions', description='The connected sessions.'),
      status?: long(name='Status', description='The status of the cloud computer.

Valid values:

*   0: The cloud computer is being created.
*   1: The cloud computer is being started.
*   2: The cloud computer is running.
*   3: The cloud computer is being stopped.
*   5: The cloud computer is stopped.
*   6: The cloud computer expires.
*   7: The cloud computer is deleted.
*   9: Failed to create the cloud computer.', example='2'),
    }
  ](name='FotaPendingDesktops', description='The cloud computers whose images can be and are pending to be updated to the version specified in `TaskUid`.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaPendingDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFotaPendingDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFotaPendingDesktops  DescribeFotaPendingDesktopsRequest
  * @return DescribeFotaPendingDesktopsResponse
 */
async function describeFotaPendingDesktops(request: DescribeFotaPendingDesktopsRequest): DescribeFotaPendingDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFotaPendingDesktops', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFotaTasksRequest {
  fotaStatus?: string(name='FotaStatus', description='>  This parameter is not publicly available.', example='To be hidden.', position='Query'),
  lang?: string(name='Lang', description='The language of the image version to update.

Valid values:

*   en: English.
*   zh: Simplified Chinese.', example='zh', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100
*   Default value: 20', example='20', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  taskUid?: [ string ](name='TaskUid', description='The IDs of the image update tasks.', position='Query'),
  userStatus?: string(name='UserStatus', description='Specifies whether to automatically push the image update task.

Valid values:

*   Running: automatically pushes the image update task.
*   Pending: does not automatically push the image update task.', example='Pending', position='Query'),
}

model DescribeFotaTasksResponseBody = {
  code?: string(name='Code', description='The returned message. If the request was successful, a `success` is returned. If the request failed, an error message is returned.', example='success'),
  fotaTasks?: [ 
    {
      appVersion?: string(name='AppVersion', description='The image version. You can call the [DescribeImages](https://help.aliyun.com/document_detail/188895.html) operation to obtain the value of this parameter.', example='0.0.1-D-20220513.143129'),
      fotaProject?: string(name='FotaProject', description='>  This parameter is not publicly available.', example='To be hidden.'),
      pendingCustomImageCount?: int32(name='PendingCustomImageCount', description='The number of custom images that can be updated to this version.', example='1'),
      pendingDesktopCount?: int32(name='PendingDesktopCount', description='The number of cloud computers whose images can be updated to this version.', example='1'),
      publishTime?: string(name='PublishTime', description='The time when the image version available for update was published.', example='2022-05-31T04:28:48Z'),
      releaseNote?: string(name='ReleaseNote', description='The description of the image version available for update.', example='test'),
      size?: int32(name='Size', description='The size of the update package. Unit: KB.', example='568533470'),
      status?: string(name='Status', description='Indicates whether the image update task is automatically pushed.

Valid values:

*   Running: automatically pushes the image update task.
*   Pending: does not automatically push the image update task.', example='valid'),
      taskUid?: string(name='TaskUid', description='The ID of the image upgrade task.', example='aot-c4khwrp9ocml4****'),
    }
  ](name='FotaTasks', description='Details about the image update task.'),
  message?: string(name='Message', description='The returned error message. This parameter is not returned if the Code value is a `success` message.', example='success'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeFotaTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFotaTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFotaTasks  DescribeFotaTasksRequest
  * @return DescribeFotaTasksResponse
 */
async function describeFotaTasks(request: DescribeFotaTasksRequest): DescribeFotaTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFotaTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGuestApplicationsRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-asw3giklqvfqe****', position='Query'),
  endUserId: string(name='EndUserId', description='The ID of the end user.

This parameter is required.', example='demo001', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeGuestApplicationsResponseBody = {
  applications?: [ 
    {
      applicationName?: string(name='ApplicationName', description='The application name.', example='Google Chrome'),
      applicationVersion?: string(name='ApplicationVersion', description='The application version.', example='115.0.5790.110'),
      cpuPercent?: double(name='CpuPercent', description='The CPU utilization (%).', example='89'),
      gpuPercent?: double(name='GpuPercent', description='The GPU utilization (%).', example='15'),
      iconUrl?: string(name='IconUrl', description='The icon URL of the application.', example='https://app-center-icon-prod-shanghai.oss-cn-shanghai.aliyuncs.com/market/preload/default****.png'),
      ioSpeed?: double(name='IoSpeed', description='The I/O read and write performance.', example='124906.0'),
      memPercent?: double(name='MemPercent', description='The memory utilization (%).', example='34'),
      pid?: int32(name='Pid', description='The process ID (PID).', example='1357'),
      processData?: [ 
        {
          applicationName?: string(name='ApplicationName', description='The application name.', example='Google Chrome'),
          applicationVersion?: string(name='ApplicationVersion', description='The application version.', example='115.0.5790.110'),
          cpuPercent?: double(name='CpuPercent', description='The CPU utilization (%).', example='89'),
          gpuPercent?: double(name='GpuPercent', description='The GPU utilization (%).', example='15'),
          iospeed?: double(name='Iospeed', description='The I/O read and write performance.', example='124906.0'),
          memPercent?: double(name='MemPercent', description='The memory utilization (%).', example='34'),
          pid?: int32(name='Pid', description='The PID.', example='1357'),
          processPath?: string(name='ProcessPath', description='The path to the process.', example='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe'),
        }
      ](name='ProcessData', description='The process information.'),
      processPath?: string(name='ProcessPath', description='The path to the process.', example='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe'),
      status?: string(name='Status', description='The application status.', example='Running'),
    }
  ](name='Applications', description='The details of the applications.'),
  requestId?: string(name='RequestId', description='The request ID.', example='272CF39E-B5DE-5BE3-A09B-B43F1026****'),
}

model DescribeGuestApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGuestApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGuestApplications  DescribeGuestApplicationsRequest
  * @return DescribeGuestApplicationsResponse
 */
async function describeGuestApplications(request: DescribeGuestApplicationsRequest): DescribeGuestApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGuestApplications', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageModifiedRecordsRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-bd53sfmysz8ir****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='AAAAAV3MpHK1AP0pfERHZN5pu6l3d+SWeOobbIlDLjwhjkTk', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeImageModifiedRecordsResponseBody = {
  imageModifiedRecords?: [ 
    {
      imageId?: string(name='ImageId', description='The ID of the original image.', example='m-8rnz2imrpcfuh****'),
      imageName?: string(name='ImageName', description='The name of the original image.', example='win10-0307'),
      newImageId?: string(name='NewImageId', description='The ID of the new image after the image was modified.', example='xxxNewImageID'),
      newImageName?: string(name='NewImageName', description='The name of the new image after the image was modified.', example='xxxxImageID'),
      status?: int32(name='Status', description='The status of the image modification.

Valid values:

*   0: The image is being modified.

*   1: The image is successfully modified.

*   2: The image fails to be modified.', example='1'),
      updateTime?: string(name='UpdateTime', description='The time when the image was last modified.', example='2022-03-03T02:43:44.851Z'),
    }
  ](name='ImageModifiedRecords', description='Details about the image modification record.'),
  nextToken?: string(name='NextToken', description='If the NextToken parameter is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6koN7RqHg3d2z8LKmSoe821'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC40EE61-7E83-59ED-AEA6-7EE9C437F352'),
  totalCount?: int32(name='TotalCount', description='The total number of image modification records.', example='20'),
}

model DescribeImageModifiedRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageModifiedRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeImageModifiedRecords  DescribeImageModifiedRecordsRequest
  * @return DescribeImageModifiedRecordsResponse
 */
async function describeImageModifiedRecords(request: DescribeImageModifiedRecordsRequest): DescribeImageModifiedRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageModifiedRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagePermissionRequest {
  imageId: string(name='ImageId', description='The image ID.

This parameter is required.', example='m-4zfb6zj728hhr****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeImagePermissionResponseBody = {
  aliUids?: [ string ](name='AliUids', description='The IDs of the Alibaba Cloud accounts with which the image is shared.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribeImagePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImagePermissionResponseBody(name='body'),
}

/**
  * @description You can call the [ModifyImagePermission](https://help.aliyun.com/document_detail/436982.html) operation to share an image with another cloud computer user or unshare an image. You can call the DescribeImagePermission operation to obtain the Alibaba Cloud accounts with which the current image is shared.
  * @param request  the request parameters of DescribeImagePermission  DescribeImagePermissionRequest
  * @return DescribeImagePermissionResponse
 */
async function describeImagePermission(request: DescribeImagePermissionRequest): DescribeImagePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImagePermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagesRequest {
  desktopInstanceType?: string(name='DesktopInstanceType', description='The instance type of the cloud computer. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/436816.html) operation to obtain the parameter value.', example='ecd.graphics.xlarge', position='Query'),
  fotaVersion?: string(name='FotaVersion', description='The image version.', example='0.0.3-R-20220616.133609', position='Query'),
  gpuCategory?: boolean(name='GpuCategory', description='Specifies whether the images are GPU-accelerated images.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  gpuDriverVersion?: string(name='GpuDriverVersion', description='The version of the GPU driver.', example='417.22', position='Query'),
  imageId?: [ string ](name='ImageId', description='The IDs of the images. You can specify one or more image IDs.', example='m-gx2x1dhsmusr2****', position='Query'),
  imageName?: string(name='ImageName', description='The image name.', example='Win_01', position='Query'),
  imageStatus?: string(name='ImageStatus', description='The state of the image.', example='Available', position='Query'),
  imageType?: string(name='ImageType', description='The type of the image.', example='SYSTEM', position='Query'),
  languageType?: string(name='LanguageType', description='The language of the OS.', example='en-US', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If you do not specify this parameter, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  osType?: string(name='OsType', description='The type of the operating system of the images. Default value: `null`.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX: High-definition Experience (HDX) protocol
*   ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)', example='ASP', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sessionType?: string(name='SessionType', description='The session type.', example='SINGLE_SESSION', position='Query'),
}

model DescribeImagesResponseBody = {
  images?: [ 
    {
      appVersion?: string(name='AppVersion', description='The version of the image.', example='1.0.0'),
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2018-01-10T01:01:10Z'),
      dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GiB.', example='150'),
      description?: string(name='Description', description='The description of the image.', example='This is description.'),
      gpuCategory?: boolean(name='GpuCategory', description='Indicates whether the image is a GPU-accelerated image.', example='false'),
      gpuDriverVersion?: string(name='GpuDriverVersion', description='The version number of the GPU driver.', example='417.22'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-gx2x1dhsmusr2****'),
      imageType?: string(name='ImageType', description='The type of the image.

Valid values:

*   SYSTEM

    <!-- -->

    <!-- -->

    <!-- -->

*   CUSTOM

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      name?: string(name='Name', description='The name of the image.', example='testImageName'),
      osType?: string(name='OsType', description='The type of the operating system.', example='WINDOWS'),
      platform?: string(name='Platform', description='The operating system type of the image.

Valid values:

*   Ubuntu

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows Server 2022

    <!-- -->

    <!-- -->

    <!-- -->

*   UOS

    <!-- -->

    <!-- -->

    <!-- -->

*   CentOS

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows Server 2019

    <!-- -->

    <!-- -->

    <!-- -->

*   SQL Server 2016

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows 10

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows Server 2019'),
      progress?: string(name='Progress', description='The creation progress of the image. Unit: %.', example='100%'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX: High-definition Experience (HDX) protocol
*   ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)', example='ASP'),
      sessionType?: string(name='SessionType', description='The type of the image session.

Valid values:

*   SINGLE_SESSION: single-session image.

*   MULTIPLE_SESSION: multi-session image.', example='MULTIPLE_SESSION'),
      sharedCount?: int32(name='SharedCount', description='The number of shared images.', example='1'),
      size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='40'),
      status?: string(name='Status', description='The status of the image.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Available

    <!-- -->

    <!-- -->

    <!-- -->

*   CreateFailed

    <!-- -->

    <!-- -->

    <!-- -->', example='Available'),
      supportedLanguages?: [ string ](name='SupportedLanguages', description='The languages of the operating system.'),
      updateTime?: string(name='UpdateTime', description='The time when the image was last modified.', example='2021-12-22T02:48:43Z'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Images', description='The details of the images.'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model DescribeImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeImages  DescribeImagesRequest
  * @return DescribeImagesResponse
 */
async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationsRequest {
  commandType?: string(name='CommandType', description='The type of the command. Valid values:

*   RunBatScript
*   RunPowerShellScript', example='RunPowerShellScript', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding method of the command content and output. Valid values:

*   PlainText
*   Base64

Default value: Base64.', example='PlainText', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop. If you specify a cloud desktop, all the execution records of Cloud Assistant commands on the cloud desktop are queried.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  desktopIds?: [ string ](name='DesktopIds', description='The IDs of the cloud desktops.', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='test1', position='Query'),
  includeInvokeDesktops?: boolean(name='IncludeInvokeDesktops', description='Specifies whether to return the execution results of all cloud computers if the command is executed on multiple cloud computers.

Valid values:

- true: returned.
- false: not returned.', example='false', position='Query'),
  includeOutput?: boolean(name='IncludeOutput', description='Specifies whether to return command outputs in the response. Valid values:

*   true: returns command outputs.
*   false: does not return command outputs.

Default value: false.', example='false', position='Query'),
  invokeId?: string(name='InvokeId', description='The ID of the execution.', example='t-hz0jdfwd9f****', position='Query'),
  invokeStatus?: string(name='InvokeStatus', description='The overall execution status of a command. The overall execution status is determined by the execution status of the command on one or more cloud desktops. Valid values:

*   Running: The execution is in progress on one or more cloud desktops.
*   Finished: The execution is finished on all cloud desktops, or the execution is manually stopped on some cloud desktops and the execution is finished on others.
*   Failed: The execution failed on all cloud desktops.
*   PartialFailed: The execution failed on some cloud desktops.
*   Stopped: The execution is stopped.

Default value: Running.', example='Finished', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 50.
*   Default value: 10.', example='10', minimum=0, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value that is returned from the last call to the previous DescribeInvocations operation.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeInvocationsResponseBody = {
  invocations?: [ 
    {
      commandContent?: string(name='CommandContent', description='The Base64-encoded command content.', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
      commandType?: string(name='CommandType', description='The type of the command.', example='RunPowerShellScript'),
      creationTime?: string(name='CreationTime', description='The time when the execution task is created.', example='2020-12-19T09:15:46Z'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='User1'),
      invocationStatus?: string(name='InvocationStatus', description='The overall execution status of the command. The overall execution status is determined by the execution status on all involved cloud desktops. The valid values include:

*   Pending: The system is verifying or sending the command. If the execution status on at least one cloud desktop is Pending, the overall execution status is Pending.

*   Running: The execution is in progress on cloud desktops. If the execution status on at least one cloud desktop is Running, the overall execution status is Running.

*   Success: If the execution status on all cloud desktops is Success or Stopped, or the execution status on at least one cloud desktop is Success, the overall execution status is Success.

*   Failed: If the execution status on all cloud desktops is Stopped or Failed, the overall execution status is Failed. If one or more execution status of a cloud desktop is one of the following values, Failed is returned:

    *   Invalid: The command is invalid.
    *   Aborted: The command fails to be sent.
    *   Failed: The command is executed, but the exit code is not 0.
    *   Timeout: The command times out.
    *   Error: An error occurs in the command.

*   Stopping: The execution is being stopped. If the execution status on at least one cloud desktop is Stopping, the overall execution state is Stopping.

*   Stopped: The execution is stopped. If the execution status on all cloud desktops is Stopped, the overall execution state is Stopped. If the execution status on a cloud desktop is one of the following values, Stopped is returned:

    *   Cancelled: The execution is canceled.
    *   Terminated: The execution is terminated.

*   PartialFailed: The execution succeeded on some cloud desktops and failed on others. If the execution status on different cloud desktops is Success, Failed, or Stopped, the overall execution state is PartialFailed.', example='Pending'),
      invokeDesktopCount?: int32(name='InvokeDesktopCount', description='The total number of cloud computers on which the command is executed.', example='1'),
      invokeDesktopSucceedCount?: int32(name='InvokeDesktopSucceedCount', description='The total number of cloud computers on which the command is executed successfully.', example='1'),
      invokeDesktops?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the command execution was performed.', example='2020-12-20T06:15:54Z'),
          desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-7w78ozhjcwa3u****'),
          desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='demo1234'),
          dropped?: int32(name='Dropped', description='The size of the text that is truncated and discarded when the Output value exceeds 24 KB in size.', example='0'),
          errorCode?: string(name='ErrorCode', description='The code that indicates the reason why a command failed to be sent or executed. The valid values include:

*   If this parameter is empty, the execution is normal.
*   InstanceNotExists: The specified cloud desktop does not exist or is released.
*   InstanceReleased: The cloud desktop is released during the execution.
*   InstanceNotRunning: The cloud desktop is not running during the execution.
*   CommandNotApplicable: The command cannot be used on the cloud desktop.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The time to send the command in the request times out.
*   ExecutionTimeout: The execution times out.
*   ExecutionException: An exception occurs during the execution.
*   ExecutionInterrupted: The execution is interrupted.
*   ExitCodeNonzero: The execution finishes, but the exit code is not 0.', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', description='Details about the reason why the command failed to be sent or executed. The valid values include:

*   If this parameter is empty, the execution is normal.
*   the specified instance does not exists: The cloud desktop does not exist or is released.
*   the instance has released when create task: The cloud desktop is released during execution.
*   the instance is not running when create task: The cloud desktop is not running when the execution is being performed.
*   the command is not applicable: The command cannot be used on the specified cloud desktop.
*   the aliyun service is not running on the instance: The Cloud Assistance client is not running.
*   the aliyun service in the instance does not response: The Cloud Assistant client is not responding.
*   the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
*   the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
*   the command delivery has been timeout: The command that is sent in the request times out.
*   the command execution has been timeout: The execution times out.
*   the command execution got an exception: An exception occurs when the command is running.
*   the command execution has been interrupted: The execution is interrupted.
*   the command execution exit code is not zero: The execution finishes, but the exit code is not 0.', example='The specified instance does not exist.'),
          exitCode?: long(name='ExitCode', description='The exit code of the execution.', example='0'),
          finishTime?: string(name='FinishTime', description='The time when the command execution ended.', example='2020-12-20T06:15:56Z'),
          invocationStatus?: string(name='InvocationStatus', description='The execution status on the cloud desktop.', example='Success'),
          output?: string(name='Output', description='The command output.

*   If the IncludeOutput parameter is set to false, Output is not returned.
*   If the ContentEncoding parameter is set to Base64, the value of Output is the output information that is encoded in Base64.', example='OutPutTestmsg'),
          repeats?: int32(name='Repeats', description='The number of times that the command is executed on the cloud desktop.', example='0'),
          startTime?: string(name='StartTime', description='The start time of the execution on the cloud desktop.', example='2020-12-20T06:15:55Z'),
          stopTime?: string(name='StopTime', description='The time when you called the [StopInvocation](~~196957#doc-api-ecd-StopInvocation~~ "You can call this operation to stop a Cloud Assistant command that is running on one or cloud desktops.") operation to manually stop the command.', example='2020-12-25T09:15:47Z'),
          updateTime?: string(name='UpdateTime', description='The time when the execution status was updated.', example='2020-12-25T06:15:56Z'),
        }
      ](name='InvokeDesktops', description='The cloud desktops on which the command is executed.'),
      invokeId?: string(name='InvokeId', description='The ID of the execution.', example='t-hz0jdfwd9f****'),
    }
  ](name='Invocations', description='Details about execution records of the command.'),
  nextToken?: string(name='NextToken', description='The query token that is returned from this call.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInvocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvocationsResponseBody(name='body'),
}

/**
  * @description *   After you run a command, it may not succeed. You can call this operation to query the execution result.
  * *   You can query the information about execution in the last two weeks. A maximum of 100,000 lines of execution information can be retained.
  * @param request  the request parameters of DescribeInvocations  DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKmsKeysRequest {
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeKmsKeysResponseBody = {
  authorizeStatus?: string(name='AuthorizeStatus', description='The authorization status.', example='authorized'),
  keys?: [ 
    {
      alias?: string(name='Alias', description='The alias of the key.', example='TestAlias'),
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the key in KMS.', example='acs:kms:cn-hangzhou:154035569884****:key/05754286-3ba2-4fa6-8d41-4323aca6****'),
      keyId?: string(name='KeyId', description='The ID of the key.', example='05754286-3ba2-4fa6-8d41-4323aca6****'),
      type?: string(name='Type', description='The type of the key.', example='ServiceKey'),
    }
  ](name='Keys', description='Details about the customer master keys (CMKs).'),
  kmsServiceStatus?: string(name='KmsServiceStatus', description='Indicates whether KMS is activated.', example='enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeKmsKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKmsKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeKmsKeys  DescribeKmsKeysRequest
  * @return DescribeKmsKeysResponse
 */
async function describeKmsKeys(request: DescribeKmsKeysRequest): DescribeKmsKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKmsKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModificationPriceRequest {
  bandwidth?: int32(name='Bandwidth', example='20', minimum=2, maximum=1000, position='Query'),
  instanceId?: string(name='InstanceId', example='ecd-0gfv2z3sf95zvt****', position='Query'),
  instanceType?: string(name='InstanceType', example='eds.enterprise_office.8c16g', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', example='Desktop', position='Query'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', example='80', minimum=0, maximum=32768, position='Query'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', example='50', minimum=0, maximum=32768, position='Query'),
}

model DescribeModificationPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: float(name='DiscountPrice', example='15.8'),
      orderLines?: map[string]string(name='OrderLines'),
      originalPrice?: float(name='OriginalPrice', example='79.0'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='test'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='promo_option'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='false'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice', example='63.2'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='14806'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='48174475-5EB2-5F99-A9E9-6F892D645****'),
}

model DescribeModificationPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModificationPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeModificationPrice  DescribeModificationPriceRequest
  * @return DescribeModificationPriceResponse
 */
async function describeModificationPrice(request: DescribeModificationPriceRequest): DescribeModificationPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModificationPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNASFileSystemsRequest {
  fileSystemId?: [ string ](name='FileSystemId', description='The IDs of the NAS file system.', example='04f314****', position='Query'),
  matchCompatibleProfile?: boolean(name='MatchCompatibleProfile', description='Specifies whether to filter NAS file systems that only support the user profile management (UPM) feature.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeNASFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      allowOperateUserDrive?: boolean(name='AllowOperateUserDrive', description='> This parameter is not publicly available.'),
      appInstanceGroups?: [ 
        {
          appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-0bz55ibznu9p7****'),
          appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery group.', example='DemoDeliveryGroup'),
        }
      ](name='AppInstanceGroups', description='The array of the app steaming delivery groups bound with UPM-supported NAS.'),
      capacity?: long(name='Capacity', description='The total capacity of the NAS file system. Unit: GiB.

*   The Capacity type has 10 PiB of storage, which is equal to 10,485,760 GiB.
*   The Performance type has 1 PiB of storage, which is equal to 1,048,576 GiB.', example='10485760'),
      createTime?: string(name='CreateTime', description='The time when the NAS file system was created.', example='2021-05-10T11:39Z'),
      description?: string(name='Description', description='The description of the NAS file system.', example='testDescription'),
      desktopGroups?: [ 
        {
          desktopGroupId?: string(name='DesktopGroupId', description='The ID of the desktop group.', example='dg-9eeyf15b25nyl****'),
          desktopGroupName?: string(name='DesktopGroupName', description='The name of the desktop group.', example='test_dg'),
        }
      ](name='DesktopGroups', description='The desktop groups that are associated with the NAS file systems that support the UPM feature.'),
      encryptionEnabled?: boolean(name='EncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      fileSystemId?: string(name='FileSystemId', description='The ID of the NAS file system.', example='04f314****'),
      fileSystemName?: string(name='FileSystemName', description='The name of the NAS file system.', example='testNAS'),
      fileSystemStatus?: string(name='FileSystemStatus', description='The status of the NAS file system. The possible values include:

*   Pending: The NAS file system is being created.
*   Running: The NAS file system is running.
*   Stopped: The NAS file system is stopped.
*   Deleting: The NAS file system is being deleted.
*   Deleted: The NAS file system is deleted.
*   Invalid: The NAS file system is invalid.', example='Running'),
      fileSystemType?: string(name='FileSystemType', description='The type of the NAS file system. Valid value: Universal NAS. This value indicates that the NAS file system is a General-purpose one.', example='standard'),
      meteredSize?: long(name='MeteredSize', description='The used storage of the NAS file system. Unit: byte.', example='0'),
      mountTargetDomain?: string(name='MountTargetDomain', description='The domain name of the mount target.', example='04f314****-at***.cn-hangzhou.nas.aliyuncs.com'),
      mountTargetStatus?: string(name='MountTargetStatus', description='The status of the mount target. The possible values include:

*   Pending: The mount target is being created.
*   Active: The mount target is enabled.
*   Inactive: The mount target is disabled.
*   Deleting: The mount target is being deleted.
*   Invalid: The mount target is invalid.', example='Active'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test'),
      officeSites?: [ 
        {
          officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-363353****'),
          officeSiteName?: string(name='OfficeSiteName', description='The name of the office network.', example='DemoOfficeNetwork'),
        }
      ](name='OfficeSites', description='The array of office networks.'),
      profileCompatible?: boolean(name='ProfileCompatible', description='Indicates whether the User Profile Management (UPM) feature is supported.', example='false'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      scene?: string(name='Scene', description='The storage type of the NAS file system. Valid values:

- Upm: UPM NAS
- ShareNas: Shared NAS', example='Upm'),
      storageType?: string(name='StorageType', description='The storage type of the NAS file system. Valid values:

*   Capacity
*   Performance', example='Capacity'),
      supportAcl?: boolean(name='SupportAcl', description='Indicates whether the Server Message Block (SMB) access control list (ACL) feature was enabled.', example='false'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the NAS file system resides.', example='cn-hangzhou-f'),
    }
  ](name='FileSystems', description='Details about the NAS file systems.'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. This parameter is empty if no additional results exist.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
}

model DescribeNASFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNASFileSystemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNASFileSystems  DescribeNASFileSystemsRequest
  * @return DescribeNASFileSystemsResponse
 */
async function describeNASFileSystems(request: DescribeNASFileSystemsRequest): DescribeNASFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNASFileSystems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkPackagesRequest {
  internetChargeType?: string(name='InternetChargeType', description='The charge type of the pay-as-you-go premium bandwidth plan.

Valid values:

*   PayByTraffic: charges by data transfer.

*   PayByBandwidth: charges by fixed bandwidth.', example='PayByBandwidth', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100
*   Default value: 10', example='10', minimum=1, maximum=100, position='Query'),
  networkPackageId?: [ string ](name='NetworkPackageId', description='The ID of the premium bandwidth plan. You can specify 1 to 100 IDs.', example='np-amtp8e8q1o9e4****', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeNetworkPackagesResponseBody = {
  networkPackages?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.', example='10'),
      businessStatus?: string(name='BusinessStatus', description='The business status.

Valid values:

*   Expired

    <!-- -->

    <!-- -->

    <!-- -->

*   Normal

    <!-- -->

    <!-- -->

    <!-- -->', example='Normal'),
      createTime?: string(name='CreateTime', description='The time when the premium bandwidth plan was created.', example='2021-05-10T02:35:26Z'),
      eipAddresses?: [ string ](name='EipAddresses', description='The public egress IP address of the premium bandwidth plan.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the premium bandwidth plan expires.

*   If the plan is a subscription one, the time when the plan expires is returned.
*   If the plan is a pay-as-you-go one, `2099-12-31T15:59:59Z` is returned.', example='2099-12-31T15:59:59Z'),
      internetChargeType?: string(name='InternetChargeType', description='The charge type of the premium bandwidth plan.

*   Valid value when the `PayType` parameter is set to `PrePaid`:

    *   PayByBandwidth: charges by fixed bandwidth.

*   Valid values when the `PayType` parameter is set to `PostPaid`:

    *   PayByTraffic: charges by data transfer.
    *   PayByBandwidth: charges by fixed bandwidth.', example='PayByTraffic'),
      networkPackageId?: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan.', example='np-amtp8e8q1o9e4****'),
      networkPackageStatus?: string(name='NetworkPackageStatus', description='The status of the premium bandwidth plan.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Released

    <!-- -->

    <!-- -->

    <!-- -->

*   InUse

    <!-- -->

    <!-- -->

    <!-- -->

*   Releasing

    <!-- -->

    <!-- -->

    <!-- -->', example='InUse'),
      officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The office network name.', example='test'),
      officeSiteVpcType?: string(name='OfficeSiteVpcType', description='The type of the office network.

Valid values:

*   standard: advanced office network
*   customized: custom office network
*   basic: basic office network', example='basic'),
      payType?: string(name='PayType', description='The billing method of the premium bandwidth plan.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PostPaid'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the reserved network bandwidth took effect.', example='2021-07-10T00:00:00Z'),
      reservationBandwidth?: int32(name='ReservationBandwidth', description='The peak bandwidth that is reserved for the premium bandwidth plan. Unit: Mbit/s.', example='20'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The billing method of the reserved network bandwidth.

Valid values:

*   PayByTraffic: charges by data transfer.

*   PayByBandwidth: charges by fixed bandwidth.', example='PayByBandwidth'),
    }
  ](name='NetworkPackages', description='The premium bandwidth plans.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeNetworkPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNetworkPackages  DescribeNetworkPackagesRequest
  * @return DescribeNetworkPackagesResponse
 */
async function describeNetworkPackages(request: DescribeNetworkPackagesRequest): DescribeNetworkPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOfficeSitesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='The office network IDs. You can specify the IDs of 1 to 100 office networks.', example='cn-hangzhou+dir-363353****', position='Query'),
  officeSiteType?: string(name='OfficeSiteType', description='The account type of the office network.

Valid values:

*   SIMPLE: convenience account

    <!-- -->

    <!-- -->

    <!-- -->

*   AD_CONNECTOR: enterprise Active Directory (AD) account

    <!-- -->

    <!-- -->

    <!-- -->', example='SIMPLE', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  securityProtection?: string(name='SecurityProtection', description='The security protection setting of the office network.

Valid values:

*   SASE: SASE is configured.
*   OFF: No security protection setting is configured.', example='SASE', position='Query'),
  status?: string(name='Status', description='The office network status.

Valid values:

*   REGISTERING: The office network is being registered.

    <!-- -->

    <!-- -->

    <!-- -->

*   DEREGISTERING: The office network is being deregistered.

    <!-- -->

    <!-- -->

    <!-- -->

*   REGISTERED: The office network is registered.

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGTRUST: A trust relationship is required for the office network.

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.

    <!-- -->

    <!-- -->

    <!-- -->

*   DEREGISTERED: The office network is deregistered.

    <!-- -->

    <!-- -->

    <!-- -->

*   ERROR: One or more configurations of the office network are invalid.

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTING: A trust relationship is being configured for the office network.

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGUSER: Users are required for the office network.

    <!-- -->

    <!-- -->

    <!-- -->', example='REGISTERED', position='Query'),
}

model DescribeOfficeSitesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSites?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress', description='The connection address of the AD connector.', example='172.24.*.*'),
          connectorStatus?: string(name='ConnectorStatus', description='The status of the AD connector.

Valid values:

*   CONNECT_ERROR
*   RUNNING
*   CONNECTING (You must configure the AD domain in which the AD connector is used.)
*   EXPIRED
*   CREATING', example='RUNNING'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of an elastic network interface (ENI) to which the AD connector is mounted.', example='eni-bp1i4wx78lgosrj6****'),
          specification?: string(name='Specification', description='The AD connector type.

Valid values:

*   1: General
*   2: Advanced', example='1'),
          trustKey?: string(name='TrustKey', description='The trust password that is specified when you configure the AD trust relationship.', example='password123***'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that resides in the network of the AD connector.', example='vsw-bp19ocz3erfx15uon****'),
        }
      ](name='ADConnectors', description='Details of AD connectors.'),
      acceleratorId?: string(name='AcceleratorId', description='The ID of the GA instance.', example='ga-bp1astu3yrplkzoo2****'),
      adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows.', example='beijing-ad01'),
      backupDCHostname?: string(name='BackupDCHostname', description='The hostname of the secondary domain controller.', example='beijing-ad02'),
      backupDns?: string(name='BackupDns', description='The DNS address of the secondary domain controller.', example='172.24.XX.XX'),
      bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth value. Valid values: 0 to 1000.\\
If you leave this parameter empty or set this parameter to 0, Internet access is not enabled.', example='10'),
      cenAttachStatus?: string(name='CenAttachStatus', description='The CEN instance status.', example='attached'),
      cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-3gwy16dojz1m65****'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the VPC that the office network uses.', example='172.16.0.0/16'),
      cloudBoxOfficeSite?: boolean(name='CloudBoxOfficeSite', description='Indicates whether the CloudBox-based office network is created.

Valid values:

*   true
*   false', example='true'),
      creationTime?: string(name='CreationTime', description='The time when the office network was created.', example='2021-05-06T05:58Z'),
      customAccessPoint?: string(name='CustomAccessPoint', description='The custom gateway.', example='gw-****.com'),
      customDnsAddress?: [ string ](name='CustomDnsAddress', description='The array of custom DNS addresses.'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId', description='The ID of the security group.', example='sg-bp1ce64o4g9mdf5u****'),
      desktopAccessType?: string(name='DesktopAccessType', description='The method that is used to connect cloud computers that reside in the office network from Alibaba Cloud Workspace clients.

>  The VPC connection depends on Alibaba Cloud PrivateLink. You can use Alibaba Cloud PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.

Valid values:

*   INTERNET (default): Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet.
*   VPC: Cloud computers are connected from Alibaba Cloud Workspace clients over the VPC.
*   ANY: Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet or the VPC. When end users connect to cloud computers from Alibaba Cloud Workspace clients, you can choose a connection method based on your business requirements.', example='INTERNET'),
      desktopCount?: long(name='DesktopCount', description='The number of cloud computers that are created.', example='1'),
      desktopVpcEndpoint?: string(name='DesktopVpcEndpoint', description='The endpoint that is used to connect to cloud computers in the directory over a VPC.', example='http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com'),
      dnsAddress?: [ string ](name='DnsAddress', description='The array of DNS addresses in the AD domains.'),
      dnsUserName?: string(name='DnsUserName', description='The username of a Domain Name System (DNS) user.', example='testDnsUserName'),
      domainName?: string(name='DomainName', description='The domain name of the enterprise AD.', example='example.com'),
      domainPassword?: string(name='DomainPassword', description='The password of the domain administrator.', example='testPassword'),
      domainUserName?: string(name='DomainUserName', description='The username of the domain administrator.', example='Administrator'),
      enableAdminAccess?: boolean(name='EnableAdminAccess', description='Indicates whether the local administrator permissions are granted to users that are authorized to use cloud computers in the office network.

Valid values:

*   true (default)
*   false', example='true'),
      enableCrossDesktopAccess?: boolean(name='EnableCrossDesktopAccess', description='Indicates whether the connection between cloud computers in the office network is enabled. After you enable the connection between cloud computers in the office network, cloud computers in the office network can access each other.', example='false'),
      enableInternetAccess?: boolean(name='EnableInternetAccess', description='Indicates whether Internet access is enabled.', example='false'),
      enableServiceRoute?: boolean(name='EnableServiceRoute', description='Indicates whether route access control is enabled for cloud services.', example='false'),
      fileSystemIds?: [ string ](name='FileSystemIds', description='An array of File Storage NAS (NAS) file system IDs.'),
      logs?: [ 
        {
          level?: string(name='Level', description='The log severity.

Valid values:

*   ERROR
*   INFO
*   WARN', example='INFO'),
          message?: string(name='Message', description='Details of the log entry.', example='code:success | message:Create Connector complete'),
          step?: string(name='Step', description='The step in the log entry.', example='CREATE_CONNECTOR'),
          timeStamp?: string(name='TimeStamp', description='The time when the log entry was printed.', example='2021-05-12T09:42Z'),
        }
      ](name='Logs', description='Details about registration logs.'),
      mfaEnabled?: boolean(name='MfaEnabled', description='Indicates whether multi-factor authentication (MFA) is enabled.', example='false'),
      name?: string(name='Name', description='The name of the office network. The name is unique in a region.', example='test'),
      needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Indicates whether two-factor verification is enabled when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.', example='false'),
      needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='Indicates whether the trusted device verification is enabled.

Valid values:

*   true
*   false', example='true'),
      networkPackageId?: string(name='NetworkPackageId', description='The premium bandwidth plan ID.', example='np-amtp8e8q1o9e4****'),
      nmVersion?: string(name='NmVersion', description='The network version. App Streaming is supported by the new version. Valid values:

- DEFAULT: the legacy version
- NM: the new version', example='NM'),
      officeSiteId?: string(name='OfficeSiteId', description='The IDs of the office networks.', example='cn-hangzhou+dir-363353****'),
      officeSiteType?: string(name='OfficeSiteType', description='The account type of the office network.

Valid values:

*   SIMPLE: the convenience account
*   AD_CONNECTOR: the enterprise AD account', example='AD_CONNECTOR'),
      ouName?: string(name='OuName', description='The organizational unit (OU) in the AD domain to which the office network is connected.', example='example.com/Domain Controllers'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX
*   ASP', example='ASP'),
      rdsLicenseAddress?: string(name='RdsLicenseAddress', description='The IP address of the RDS license.', example='47.100.XX.XX'),
      rdsLicenseDomainName?: string(name='RdsLicenseDomainName', description='The domain name of the RDS license.', example='test.com'),
      rdsLicenseStatus?: string(name='RdsLicenseStatus', description='The remote desktop service (RDS) license status.', example='2'),
      resourceAmounts?: [ 
        {
          amount?: long(name='amount', description='The amount of resources.', example='1'),
          resourceType?: string(name='resourceType', description='The resource type. Valid values:

- desktop: cloud computers
- desktopGroup: shared cloud computers', example='desktop'),
        }
      ](name='ResourceAmounts', description='The amount of resources.'),
      securityProtection?: string(name='SecurityProtection', description='The security protection setting of the office network.

Valid values:

*   SASE: SASE is configured.
*   OFF: No security protection setting is configured.', example='SASE'),
      ssoEnabled?: boolean(name='SsoEnabled', description='Indicates whether single sign-on (SSO) is enabled.', example='false'),
      ssoType?: string(name='SsoType', description='The SSO type.

Valid values:

*   SAML.', example='null'),
      status?: string(name='Status', description='The office network status.

Valid values:

*   REGISTERING: The office network is being registered.
*   DEREGISTERING: The office network is being deregistered.
*   REGISTERED: The office network is registered.
*   NEEDCONFIGTRUST: A trust relationship is required for the office network.
*   CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.
*   DEREGISTERED: The office network is deregistered.
*   ERROR: One or more configurations of the office network are invalid.
*   CONFIGTRUSTING: A trust relationship is being configured for the office network.
*   NEEDCONFIGUSER: Users are required for the office network.', example='REGISTERED'),
      subDnsAddress?: [ string ](name='SubDnsAddress', description='An array of DNS addresses for AD subdomains.'),
      subDomainName?: string(name='SubDomainName', description='The username of enterprise AD subdomain.', example='testSubDnsUserName'),
      subnetMode?: string(name='SubnetMode', description='The subnet mode of the office network.

Valid values:

*   0: disabled.
*   1: enabled.', example='0'),
      totalEdsCount?: long(name='TotalEdsCount', description='The total number of cloud computers.', example='0'),
      totalEdsCountForGroup?: long(name='TotalEdsCountForGroup', description='The number of pooled cloud computers in the cloud computer pool.', example='0'),
      totalResourceAmount?: long(name='TotalResourceAmount', description='The total number of network cards.', example='1'),
      trustPassword?: string(name='TrustPassword', description='>  This parameter is unavailable.', example='null'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='An array of VSwitch IDs.'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf6tz5k67puge5jn8****'),
      vpcType?: string(name='VpcType', description='The VPC type.

Valid values:

*   Basic
*   Customized
*   Standard', example='Basic'),
    }
  ](name='OfficeSites', description='The information about office networks.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeOfficeSitesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOfficeSitesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOfficeSites  DescribeOfficeSitesRequest
  * @return DescribeOfficeSitesResponse
 */
async function describeOfficeSites(request: DescribeOfficeSitesRequest): DescribeOfficeSitesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOfficeSites', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyGroupsRequest {
  externalPolicyGroupIds?: [ string ](name='ExternalPolicyGroupIds', description='The array of cloud computer policy IDs to be excluded.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100
*   Default value: 10', example='10', minimum=1, maximum=200, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  policyGroupId?: [ string ](name='PolicyGroupId', description='The IDs of the cloud computer policies.', example='system-all-enabled-policy', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  scope?: string(name='Scope', description='The effective scope of the cloud computer policy.

Valid values:

*   ALL
*   IP
*   GLOBAL', example='ALL', position='Query'),
}

model DescribePolicyGroupsResponseBody = {
  count?: int32(name='Count'),
  describePolicyGroups?: [ 
    {
      adminAccess?: string(name='AdminAccess', description='Indicates whether end users are granted the administrator permissions.

>  This parameter is in invitational preview for specific users and not available to the public.', example='deny'),
      appContentProtection?: string(name='AppContentProtection', description='Indicates whether the anti-screenshot feature is enabled.

Valid values:

*   off (default)
*   on', example='off'),
      authorizeAccessPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The CIDR block that is allowed to access the client. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The remarks on the CIDR block that is allowed to access the client.', example='test'),
        }
      ](name='AuthorizeAccessPolicyRules', description='The client IP address whitelist. End users can access cloud computers only from the IP addresses in the whitelist.'),
      authorizeSecurityPolicyRules?: [ 
        {
          cidrIp?: string(name='CidrIp', description='The object to which the security group rule applies. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
          description?: string(name='Description', description='The description of the security group rule.', example='test'),
          ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.

Valid values:

*   tcp: Transmission Control Protocol (TCP)
*   udp: User Datagram Protocol (UDP)
*   all: all protocols
*   gre: Generic Routing Encapsulation (GRE)
*   icmp: Internet Control Message Protocol (ICMP) for IPv4', example='tcp'),
          policy?: string(name='Policy', description='The authorization of the security group rule.

Valid values:

*   drop: denies all access requests.
*   accept: accepts all requests.', example='accept'),
          portRange?: string(name='PortRange', description='The port range of the security group rule.', example='22/22'),
          priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority.', example='1'),
          type?: string(name='Type', description='The direction of the security group rule.

Valid values:

*   outflow: outbound
*   inflow: inbound', example='inflow'),
        }
      ](name='AuthorizeSecurityPolicyRules', description='The security group rules.'),
      cameraRedirect?: string(name='CameraRedirect', description='Indicates whether the webcam redirection feature is enabled.

Valid values:

*   off
*   on (default)', example='on'),
      clientTypes?: [ 
        {
          clientType?: string(name='ClientType', description='The client type.

Valid values:

*   html5: web client
*   android: Android client
*   windows: Windows client
*   ios: iOS client
*   macos: macOS client', example='windows'),
          status?: string(name='Status', description='Indicates whether end users are allowed to use a specific type of the client to connect to cloud computers.

Valid values:

*   OFF
*   ON', example='ON'),
        }
      ](name='ClientTypes', description='The logon method control rules to limit the type of the Alibaba Cloud Workspace client used by end users to connect to cloud computers.'),
      clipboard?: string(name='Clipboard', description='The permissions on the clipboard.

Valid values:

*   read: specifies one-way transfer. You can copy files only from local devices to cloud computers.
*   readwrite: specifies two-way transfer. You can copy files between local devices and cloud computers.
*   write: specifies one-way transfer. You can only copy files from cloud computers to local devices.
*   off: disables both one-way and two-way transfer. Files cannot be copied between local devices and cloud computers.', example='readwrite'),
      colorEnhancement?: string(name='ColorEnhancement', description='Indicates whether the Color Enhancement switch is turned on in design and 3D scenarios.

Valid values:

*   off
*   on', example='off'),
      cpuDownGradeDuration?: int32(name='CpuDownGradeDuration', description='The CPU underclocking duration. Valid values: 30 to 120. Unit: seconds.', example='30'),
      cpuProcessors?: [ string ](name='CpuProcessors', description='The process whitelist that is not restricted by the CPU usage limit.'),
      cpuProtectedMode?: string(name='CpuProtectedMode', description='Indicates whether the CPU spike protection switch is turned on.

Valid values:

*   off
*   on', example='on'),
      cpuRateLimit?: int32(name='CpuRateLimit', description='The overall CPU usage. Valid values: 70 to 90. Unit: percentage (%).', example='70'),
      cpuSampleDuration?: int32(name='CpuSampleDuration', description='The overall CPU sampling duration. Valid values: 10 to 60. Unit: seconds.', example='10'),
      cpuSingleRateLimit?: int32(name='CpuSingleRateLimit', description='The single-CPU usage. Valid values: 70 to 100. Unit: %.', example='70'),
      desktopCount?: int32(name='DesktopCount', description='The number of cloud computers bound with this policy.', example='1'),
      desktopGroupCount?: int32(name='DesktopGroupCount', description='The number of shared cloud computers bound with this policy.', example='1'),
      deviceConnectHint?: string(name='DeviceConnectHint'),
      deviceRedirects?: [ 
        {
          deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   printer
*   scanner
*   camera
*   adb: the Android Debug Bridge (ADB) device.', example='camera'),
          redirectType?: string(name='RedirectType', description='The redirection type. Valid values:

*   usbRedirect
*   deviceRedirect
*   off: direction disabled.', example='usbRedirect'),
        }
      ](name='DeviceRedirects', description='The device redirection rules.'),
      deviceRules?: [ 
        {
          deviceName?: string(name='DeviceName', description='The device name.', example='sandisk'),
          devicePid?: string(name='DevicePid', description='The product ID (PID).', example='0x55b1'),
          deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   usbKey
*   other
*   graphicsTablet
*   printer
*   cardReader
*   scanner
*   storage
*   camera
*   adb
*   networkInterfaceCard: the NIC device.', example='storage'),
          deviceVid?: string(name='DeviceVid', description='The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='0x0781'),
          optCommand?: string(name='OptCommand', description='The link optimization command.', example='2:0'),
          redirectType?: string(name='RedirectType', description='The redirection type.

Valid values:

*   deviceRedirect
*   usbRedirect
*   off: redirection disabled.', example='usbRedirect'),
        }
      ](name='DeviceRules', description='The custom peripheral rules.'),
      displayMode?: string(name='DisplayMode', description='The display mode.

Valid values:

*   clientCustom: suitable for user-defined scenarios.
*   adminOffice: suitable for daily office scenarios.
*   adminDesign: suitable for 3D application scenarios.
*   adminCustom: administrator-customized scenarios', example='adminCustom'),
      domainList?: string(name='DomainList', description='Specifies whether to enable the access control for domain names. Domain names support wildcards (\\*). Separate multiple domain names with commas (,).

Valid values:

*   off
*   on', example='off'),
      domainResolveRule?: [ 
        {
          description?: string(name='Description', description='The rule description.', example='Test'),
          domain?: string(name='Domain', description='The destination domain name.', example='*.com'),
          policy?: string(name='Policy', description='Indicates whether the domain name resolution rule is allowed.

Valid values:

*   allow
*   block', example='allow'),
        }
      ](name='DomainResolveRule', description='The domain name resolution rules.'),
      domainResolveRuleType?: string(name='DomainResolveRuleType', description='Indicates whether the switch for domain name resolution is turned on.

Valid values:

*   off
*   on', example='on'),
      edsCount?: int32(name='EdsCount', description='The number of cloud computers that are associated with the policy. The number of cloud computers that are associated only with custom policies is returned.', example='1'),
      endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', description='Indicates whether the Contact Administrator for Help switch is turned on.

Valid values:

*   off
*   on', example='on'),
      endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', description='Indicates whether the User Stream Collaboration switch is turned on.

Valid values:

*   off
*   on', example='on'),
      fileMigrate?: string(name='FileMigrate'),
      fileTransfer?: string(name='FileTransfer', description='Transfers files.', example='null'),
      gpuAcceleration?: string(name='GpuAcceleration', description='Indicates whether the Image Quality Control feature is enabled. If you have high requirements on the performance and user experience in scenarios such as professional design, we recommend that you enable this feature.

Valid values:

*   off
*   on', example='off'),
      html5Access?: string(name='Html5Access', description='Specifies whether to allow web client access.

Valid values:

*   off (default)
*   on', example='off'),
      html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer feature on the web client.

Valid values:

*   all: Files can be uploaded and downloaded between local computers and the web client.
*   download: Files on the web client can be downloaded to local computers.
*   upload: Files on local computers can be uploaded to the web client.
*   off (default): Files cannot be transferred between the web client and local computers.', example='off'),
      internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol for network communication.

Valid values:

*   TCP (default): TCP.
*   BOTH: TCP and UDP.', example='BOTH'),
      localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.

Valid values:

*   read: read-only. Local disk mapping is available on cloud computers. However, you can only read (copy) local files but cannot modify the files.
*   readwrite: read and write. Local disk mapping is available on cloud computers. You can read (copy) and write (modify) local files.
*   off (default): none.', example='readwrite'),
      maxReconnectTime?: int32(name='MaxReconnectTime', description='The maximum retry period for reconnecting to cloud computers when the cloud computers are disconnected due to none-human reasons. Valid values: 30 to 7200. Unit: seconds.', example='120'),
      memoryDownGradeDuration?: int32(name='MemoryDownGradeDuration', description='The memory underclocking duration for a single process. Valid values: 30 to 120. Unit: seconds.', example='30'),
      memoryProcessors?: [ string ](name='MemoryProcessors', description='The whitelist of processes that are not restricted by the memory usage limit.'),
      memoryProtectedMode?: string(name='MemoryProtectedMode', description='Indicates whether the memory spike protection switch is turned on.

Valid values:

*   off
*   on', example='on'),
      memoryRateLimit?: int32(name='MemoryRateLimit', description='The overall memory usage. Valid values: 70 to 90. Unit: %.', example='70'),
      memorySampleDuration?: int32(name='MemorySampleDuration', description='The overall memory sampling duration. Valid values: 30 to 60. Unit: seconds.', example='30'),
      memorySingleRateLimit?: int32(name='MemorySingleRateLimit', description='The memory usage of a single process. Valid values: 30 to 60. Unit: %.', example='30'),
      mobileRestart?: string(name='MobileRestart', description='Specifies whether to display the restart button in the DesktopAssistant when the cloud computer is accessed from the Alibaba Cloud Workspace mobile clients (including the Android client and the iOS client).

> Mobile clients of V7.4 and higher versions required.

Valid values:

- off: not provided.
- on: provided.', example='off'),
      mobileShutdown?: string(name='MobileShutdown', description='Specifies whether to display the shut down button in the DesktopAssistant when the cloud computer is accessed from the Alibaba Cloud Workspace mobile clients (including the Android client and the iOS client).

> Mobile clients of V7.4 and higher versions required.

Valid values:

- off: not provided.
- on: provided.', example='off'),
      name?: string(name='Name', description='The name of the cloud computer policy.', example='testPolicyGroupName'),
      netRedirect?: string(name='NetRedirect', description='Indicates whether the network redirection feature is enabled.

>  This parameter is in invitational preview for specific users and not available to the public.

Valid values:

*   off (default)
*   on', example='off'),
      netRedirectRule?: [ 
        {
          domain?: string(name='Domain', description='The rule content.', example='*.com'),
          policy?: string(name='Policy', description='Indicates whether the rule is allowed.

Valid values:

*   allow
*   block', example='allow'),
          ruleType?: string(name='RuleType', description='The rule type.

Valid values:

*   prc: process
*   domain: domain name', example='domain'),
        }
      ](name='NetRedirectRule', description='The network redirection rule.

>  This parameter is in invitational preview for specific users and not available to the public.'),
      policyGroupId?: string(name='PolicyGroupId', description='The ID of the cloud computer policy.', example='pg-gx2x1dhsmthe9****'),
      policyGroupType?: string(name='PolicyGroupType', description='The type of the cloud computer policy.

Valid values:

*   SYSTEM
*   CUSTOM', example='SYSTEM'),
      policyStatus?: string(name='PolicyStatus', description='The status of the cloud computer policy.

Valid values:

*   AVAILABLE
*   CREATING', example='AVAILABLE'),
      preemptLogin?: string(name='PreemptLogin', description='The cloud computer preemption feature.

>  To ensure user experience and data security, when a cloud computer is used by an end user, other end users cannot connect to the cloud computer. By default, this parameter is set to `off`, which cannot be modified.

Valid values:

*   off: Preemption is not allowed.', example='off'),
      preemptLoginUsers?: [ string ](name='PreemptLoginUsers', description='The usernames that can preempt to connect to the cloud computer.'),
      printerRedirection?: string(name='PrinterRedirection', description='Indicates whether the printer redirection feature is enabled.

Valid values:

*   off
*   on', example='on'),
      qualityEnhancement?: string(name='QualityEnhancement', description='Indicates whether the Image Quality Enhancement switch is turned on for design and 3D scenarios.

Valid values:

*   off
*   on', example='off'),
      recordContent?: string(name='RecordContent', description='Indicates whether the custom screen recording feature is enabled.

Valid values:

*   off (default)
*   on', example='off'),
      recordContentExpires?: long(name='RecordContentExpires', description='The period when the custom screen recording can be retained before expiration. Default value: 30 days.', example='30'),
      recordEventDuration?: int32(name='RecordEventDuration', description='The recording duration since a target event is detected by the screen recording audit policy. Unit: Minute. Valid values: 10-60.', example='10'),
      recordEventFilePaths?: [ string ](name='RecordEventFilePaths', description='The array of absolute paths of the monitored files in the screen recording audit policy.'),
      recordEventRegisters?: [ string ](name='RecordEventRegisters', description='The array of absolute paths of the monitored registry entries in the screen recording audit policy.'),
      recording?: string(name='Recording', description='Indicates whether the screen recording feature is enabled.

Valid values:

*   byaction_cmd_ft: enables the operation-triggered screen recording upon command execution and file transfer.
*   ALLTIME: enables the whole-process screen recording. That is, the recording starts when cloud computers are connected and ends when the cloud computers are disconnected.
*   PERIOD: enables the interval-based screen recording. You must specify an interval between the start time and end time of this type of recording.
*   byaction_commands: enables the operation-triggered screen recording upon command execution.
*   OFF: disables the screen recording feature.
*   byaction_file_transfer: enables the operation-triggered screen recording upon file transfer.', example='OFF'),
      recordingAudio?: string(name='RecordingAudio', description='Indicates whether audio files generated from cloud computers are recorded.

Valid values:

*   off (default): records only video files.
*   on: records video and audio files.', example='on'),
      recordingDuration?: int32(name='RecordingDuration', description='The file length of the screen recording. Unit: minutes. Screen recording files are split based on the specified file length and uploaded to Object Storage Service (OSS) buckets. When a screen recording file reaches 300 MB in size, the system preferentially performs rolling update for the file.

Valid values:

*   10
*   20
*   30
*   60', example='10'),
      recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording ended. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.', example='08:59:00'),
      recordingExpires?: long(name='RecordingExpires', description='The retention period of the screen recording file. Valid values: 1 to 180. Unit: days.', example='15'),
      recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Unit: fps.

Valid values:

*   2
*   5
*   10
*   15', example='5'),
      recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording was started. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.', example='08:00:00'),
      recordingUserNotify?: string(name='RecordingUserNotify', description='Indicates whether the screen recording notification feature is enabled after end users log on to the Alibaba Cloud Workspace client.

Valid values:

*   off
*   on', example='off'),
      recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage', description='The notification content of screen recording. By default, this parameter is left empty.', example='Your desktop is being recorded'),
      remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions on keyboard and mouse control during remote assistance.

Valid values:

*   optionalControl: By default, you are not granted the permissions. You can apply for the permissions.
*   fullControl: You are granted the full permissions.
*   disableControl: You are not granted the permissions.', example='fullControl'),
      resetDesktop?: string(name='ResetDesktop', description='Resets the cloud computer.', example='null'),
      resolutionHeight?: int32(name='ResolutionHeight'),
      resolutionModel?: string(name='ResolutionModel'),
      resolutionWidth?: int32(name='ResolutionWidth'),
      resourceGroupCount?: int32(name='ResourceGroupCount', description='The number of resource groups bound with this policy.', example='1'),
      resourceRegionId?: string(name='ResourceRegionId', description='The region of the cloud computer policy.

> The value of a region-less policy is `center`.', example='center'),
      scope?: string(name='Scope', description='The effective scope of the policy.

Valid values:

*   IP: The policy takes effect based on the IP address.
*   GLOBAL: The policy takes effect globally.', example='GLOBAL'),
      scopeValue?: [ string ](name='ScopeValue', description='This parameter is required when the `Scope` parameter is set to `IP`.````'),
      smoothEnhancement?: string(name='SmoothEnhancement', description='Indicates whether the Smooth Enhancement switch is turned on.

Valid values:

*   off
*   on', example='off'),
      statusMonitor?: string(name='StatusMonitor', description='Specifies whether to provide the Metrics function in the DesktopAssistant. Valid values:

- off: not provided.
- on: provided.', example='on'),
      streamingMode?: string(name='StreamingMode', description='The streaming mode.

Valid values:

*   intelligent: suitable for daily office scenarios (Intelligent Mode).
*   smooth: suitable for design and 3D application scenarios (Smooth Mode).', example='smooth'),
      targetFps?: int32(name='TargetFps', description='The destination frame rate. Valid values: 10 to 60. Unit: fps.', example='30'),
      usbRedirect?: string(name='UsbRedirect', description='Indicates whether the USB redirection feature is enabled.

Valid values:

*   off
*   on', example='on'),
      usbSupplyRedirectRule?: [ 
        {
          description?: string(name='Description', description='The rule description.', example='Test'),
          deviceClass?: string(name='DeviceClass', description='The device class. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
          deviceSubclass?: string(name='DeviceSubclass', description='The subclass of the device. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
          productId?: string(name='ProductId', description='The product ID.', example='08**'),
          usbRedirectType?: long(name='UsbRedirectType', description='Indicates whether USB redirection is allowed.

Valid values:

*   1: allowed
*   2: not allowed', example='1'),
          usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.

Valid values:

*   1: by device class
*   2: by device vendor', example='1'),
          vendorId?: string(name='VendorId', description='The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='04**'),
        }
      ](name='UsbSupplyRedirectRule', description='The USB redirection rule.'),
      videoEncAvgKbps?: int32(name='VideoEncAvgKbps', description='The average bitrate for video encoding. Valid values: 1000 to 50000.', example='1000'),
      videoEncMaxQP?: int32(name='VideoEncMaxQP', description='The maximum quantizer parameter (QP) of video files. A larger QP value indicates worse video quality. Valid values: 0 to 51.', example='20'),
      videoEncMinQP?: int32(name='VideoEncMinQP', description='The minimum quantizer parameter (QP) of video files. A smaller QP value indicates higher video quality. Valid values: 0 to 51.', example='20'),
      videoEncPeakKbps?: int32(name='VideoEncPeakKbps', description='The peak bitrate for video encoding. Valid values: 1000 to 50000.', example='1000'),
      videoEncPolicy?: string(name='VideoEncPolicy', description='The video encoding feature.

Valid values:

*   qualityFirst: The priority given to the image quality.
*   bandwidthFirst: The priority given to the bitrate.', example='qualityFirst'),
      videoRedirect?: string(name='VideoRedirect', description='Indicates whether the multimedia redirection feature is enabled.

Valid values:

*   off
*   on', example='off'),
      visualQuality?: string(name='VisualQuality', description='The image display quality.

Valid values:

*   high: high-definition (HD)
*   low: fluent
*   medium (default): adaptive
*   lossless: no quality loss', example='medium'),
      watermark?: string(name='Watermark', description='The watermarking feature.

Valid values:

*   blind: Invisible watermarks are applied.
*   off: The watermarking feature is disabled.
*   on: Visible watermarks are applied.', example='on'),
      watermarkAntiCam?: string(name='WatermarkAntiCam', description='Indicates whether the anti-screen photo feature is enabled for invisible watermarks.

Valid values:

*   off
*   on', example='off'),
      watermarkColor?: int32(name='WatermarkColor', description='The font color in red, green, and blue (RGB) of the watermark. Valid values: 0 to 16777215.', example='0'),
      watermarkCustomText?: string(name='WatermarkCustomText', description='If you set `WatermarkType` to `custom`, you must also specify `WatermarkCustomText`.', example='test'),
      watermarkDegree?: double(name='WatermarkDegree', description='The slope of the watermark. Valid values: -10 to -30.', example='-10'),
      watermarkFontSize?: int32(name='WatermarkFontSize', description='The font size of the watermark. Valid values: 10 to 20.', example='10'),
      watermarkFontStyle?: string(name='WatermarkFontStyle', description='The watermark font style.

Valid values:

*   plain
*   bold', example='plain'),
      watermarkPower?: string(name='WatermarkPower', description='The watermark enhancement feature.

Valid values:

*   high
*   low
*   medium', example='medium'),
      watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows.

>  This parameter is not available for public use.', example='5'),
      watermarkSecurity?: string(name='WatermarkSecurity', description='Indicates whether the security priority feature is enabled for invisible watermarks.

Valid values:

*   off
*   on', example='on'),
      watermarkTransparency?: string(name='WatermarkTransparency', description='The watermark transparency.

Valid values:

*   LIGHT
*   DARK
*   MIDDLE', example='LIGHT'),
      watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The watermark transparency. A greater value indicates that the watermark is less transparent. Valid values: 10 to 100.', example='10'),
      watermarkType?: string(name='WatermarkType', description='The watermark content.

Valid values:

*   EndUserId: the username.
*   Custom
*   DesktopIp: the IP address of the cloud computer.
*   ClientIp: the IP address of the Alibaba Cloud Workspace client.
*   HostName: the rightmost 15 digits of the cloud computer ID.
*   ClientTime: the current time displayed on the cloud computer.', example='EndUserId'),
      wuyingKeeper?: string(name='WuyingKeeper'),
      wyAssistant?: string(name='WyAssistant', description='Specifies whether to provide the AI Assistant function in the DesktopAssistant when the cloud computer is accessed from the Alibaba Cloud Workspace desktop clients (including the Windows client and the macOS client).

> Desktop clients of V7.7 and higher versions required.

Valid values:

- off: the AI Aisstant function is not provided.
- on: the AI Aisstant function is provided.', example='on'),
    }
  ](name='DescribePolicyGroups', description='The details of the cloud computer policies.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a****'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribePolicyGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePolicyGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePolicyGroups  DescribePolicyGroupsRequest
  * @return DescribePolicyGroupsResponse
 */
async function describePolicyGroups(request: DescribePolicyGroupsRequest): DescribePolicyGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  amount?: int32(name='Amount', description='The number of resources. Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth. Unit: Mbit/s.

*   Valid values if you set InternetChargeType to PayByBandwidth: 10 to 1000.
*   Valid values if you set InternetChargeType to InternetChargeType: 10 to 200.', example='10', minimum=1, maximum=2048, position='Query'),
  duration?: int32(name='Duration', description='The type of hourly plan if you use the Monthly Subscription billing method. If you set `ResourceType` to `DesktopMonthPackage`, you must specify this parameter.

Valid values:

*   120: the 120-hour computing plan.
*   250: the 250-hour computing plan.', example='120', position='Query'),
  groupDesktopCount?: int32(name='GroupDesktopCount', description='The number of cloud computer shares. Default value: 1.

>  This parameter takes effect only if you set `ResourceType` to `DesktopGroup`.', example='1', position='Query'),
  instanceType?: string(name='InstanceType', description='The specifications of the resource.

*   This parameter is required if you set `ResourceType` to `Desktop`. You can call the [DescribeDesktopTypes](~~DescribeDesktopTypes~~) to query the available cloud computer types that correspond to the value of `DesktopTypeId`.
*   If you set `ResourceType` to `DesktopGroup`, set the value of this parameter to `large`.
*   If you set `ResourceType` to `Bandwidth`, you can leave this parameter empty.', example='eds.general.2c2g', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method for network traffic.

Valid values:

*   PayByTraffic: You are charged for the actually consumed traffic.
*   PayByBandwidth: You are charged by a fixed bandwidth.', example='PayByTraffic', position='Query'),
  osType?: string(name='OsType', description='The OS type.

Valid values:

*   Linux
*   Windows (default)', example='Windows', position='Query'),
  period?: int32(name='Period', description='The subscription duration. The valid values of this parameter vary based on the value of `PeriodUnit`.

*   If you set `PeriodUnit` to `Hour`, set the value of this parameter to 1.
*   If you set `PeriodUnit` to `Month`, set the value of this parameter to 1, 2, 3, or 6.
*   If you set `PeriodUnit` to `Year`, set the value of this parameter to 1, 2, or 3.

Default value: 1.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The billing cycle.

Valid values:

*   Month
*   Year
*   Hour (default)', example='Hour', position='Query'),
  promotionId?: string(name='PromotionId', description='The promotion ID.', example='123456', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by EDS.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

*   DesktopMonthPackage: monthly subscription cloud computers that use hourly limit plans.
*   Desktop (default): pay-as-you-go cloud computers/monthly subscription cloud computers that use unlimited plans.
*   Bandwidth: premium bandwidth plans.
*   DesktopGroup: cloud computer shares.', example='Desktop', position='Query'),
  rootDiskCategory?: string(name='RootDiskCategory', description='The category of the system disk.

Valid values:

*   cloud_efficiency: the ultra disk
*   cloud_auto: the standard SSD.
*   cloud_essd: the Enterprise SSD (ESSD). Take note that only specific cloud computer types support ESSDs.', example='40', position='Query'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The size of the system disk. Unit: GiB. If you set `ResourceType` to `Desktop`, you must specify this parameter.', example='80', minimum=0, maximum=32768, position='Query'),
  userDiskCategory?: string(name='UserDiskCategory', description='The category of the data disk.

Valid values:

*   cloud_efficiency: the ultra disk
*   cloud_auto: the standard SSD.
*   cloud_essd: the ESSD. Take note that only specific cloud computer types support ESSDs.', example='80', position='Query'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The size of the data disk. Unit: GiB.', example='100', minimum=0, maximum=65536, position='Query'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    freeCdsQuota?: boolean(name='FreeCdsQuota', description='Indicates whether a free enterprise drive is available.', example='true'),
    freeCdsSize?: long(name='FreeCdsSize', description='The free capacity provided by the enterprise drive. Unit: GiB.', example='100'),
    price?: {
      currency?: string(name='Currency', description='The unit of currency (USD).', example='CNY'),
      discountPrice?: float(name='DiscountPrice', description='The discounted amount.', example='0'),
      orderLines?: map[string]string(name='OrderLines', description='The orders.'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='2.796'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The description of the promotion rule.', example='test'),
          promotionDesc?: string(name='PromotionDesc', description='The description of the promotion.', example='Get started with new services with a discount.'),
          promotionId?: string(name='PromotionId', description='The promotion ID.', example='123456'),
          promotionName?: string(name='PromotionName', description='The promotion name.', example='Special Offer'),
          selected?: boolean(name='Selected', description='Indicates whether an item is selected.', example='false'),
        }
      ](name='Promotions', description='The promotions.'),
      spPrice?: long(name='SpPrice', description='The price under an effective savings plan.', example='50.00'),
      tradePrice?: float(name='TradePrice', description='The actual price. The original price minus the discounted amount equals the actual price.', example='2.796'),
    }(name='Price', description='The price.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the rule.', example='Receive a 15% discount on a one-year subscription.'),
        ruleId?: long(name='RuleId', description='The rule ID.', example='587'),
      }
    ](name='Rules', description='The details of the promotion rules.'),
  }(name='PriceInfo', description='The price details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B1175630-3C44-4389-A3C1-15639FFC8EBC'),
}

model DescribePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
  * *   If you set ResourceType to OfficeSite, you must specify InstanceType.
  * *   If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
  * *   If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
  * > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](https://help.aliyun.com/document_detail/188609.html).
  * @param request  the request parameters of DescribePrice  DescribePriceRequest
  * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceForCreateDesktopOversoldGroupRequest {
  concurrenceCount?: int32(name='ConcurrenceCount', position='Query'),
  dataDiskSize?: int32(name='DataDiskSize', position='Query'),
  desktopType?: string(name='DesktopType', position='Query'),
  oversoldUserCount?: int32(name='OversoldUserCount', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', position='Query'),
}

model DescribePriceForCreateDesktopOversoldGroupResponseBody = {
  data?: {
    price?: string(name='Price'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribePriceForCreateDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceForCreateDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePriceForCreateDesktopOversoldGroup  DescribePriceForCreateDesktopOversoldGroupRequest
  * @return DescribePriceForCreateDesktopOversoldGroupResponse
 */
async function describePriceForCreateDesktopOversoldGroup(request: DescribePriceForCreateDesktopOversoldGroupRequest): DescribePriceForCreateDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePriceForCreateDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceForModifyDesktopOversoldGroupSaleRequest {
  concurrenceCount?: int32(name='ConcurrenceCount', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  oversoldUserCount?: int32(name='OversoldUserCount', position='Query'),
}

model DescribePriceForModifyDesktopOversoldGroupSaleResponseBody = {
  data?: {
    price?: string(name='Price'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribePriceForModifyDesktopOversoldGroupSaleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceForModifyDesktopOversoldGroupSaleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePriceForModifyDesktopOversoldGroupSale  DescribePriceForModifyDesktopOversoldGroupSaleRequest
  * @return DescribePriceForModifyDesktopOversoldGroupSaleResponse
 */
async function describePriceForModifyDesktopOversoldGroupSale(request: DescribePriceForModifyDesktopOversoldGroupSaleRequest): DescribePriceForModifyDesktopOversoldGroupSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePriceForModifyDesktopOversoldGroupSale', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceForRenewDesktopOversoldGroupRequest {
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
}

model DescribePriceForRenewDesktopOversoldGroupResponseBody = {
  data?: {
    price?: string(name='Price'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribePriceForRenewDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceForRenewDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePriceForRenewDesktopOversoldGroup  DescribePriceForRenewDesktopOversoldGroupRequest
  * @return DescribePriceForRenewDesktopOversoldGroupResponse
 */
async function describePriceForRenewDesktopOversoldGroup(request: DescribePriceForRenewDesktopOversoldGroupRequest): DescribePriceForRenewDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePriceForRenewDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecordingsRequest {
  desktopId?: string(name='DesktopId', example='ecd-hlh41mk78dugw****', position='Query'),
  endTime?: string(name='EndTime', example='20230424004441', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  needSignedUrl?: boolean(name='NeedSignedUrl', example='false', position='Query'),
  nextToken?: string(name='NextToken', example='aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', example='pg-gx2x1dhsmthe9****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-beijing', position='Query'),
  signedUrlExpireMinutes?: int32(name='SignedUrlExpireMinutes', example='10', position='Query'),
  standardEndTime?: string(name='StandardEndTime', position='Query'),
  standardStartTime?: string(name='StandardStartTime', position='Query'),
  startTime?: string(name='StartTime', example='20230424000000', position='Query'),
}

model DescribeRecordingsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6nbCQ7ar+fECeh1IuWQXi39R5eoJ68zWp99mTAKRRNRhw=='),
  recordings?: [ 
    {
      desktopId?: string(name='DesktopId', example='ecd-10v0vuvm616sk****'),
      desktopName?: string(name='DesktopName', example='DemoComputer'),
      endTime?: string(name='EndTime', example='2023-04-10T07:26:06Z'),
      endUserIds?: [ string ](name='EndUserIds'),
      filePath?: string(name='FilePath', example='pg-4w5nk44zo5yl129dd/1mk78dugw344.mp4'),
      policyGroupId?: string(name='PolicyGroupId', example='pg-6dn811rzrwh9ws4z6'),
      recordingSize?: int32(name='RecordingSize', example='1742845'),
      recordingType?: string(name='RecordingType', example='alltime'),
      signedUrl?: string(name='SignedUrl'),
      startTime?: string(name='StartTime', example='2023-04-10T07:26:06Z'),
    }
  ](name='Recordings'),
  requestId?: string(name='RequestId', example='327CFE78-1C0D-51AC-A9C6-BCEDF0DD44D6'),
}

model DescribeRecordingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecordingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecordings  DescribeRecordingsRequest
  * @return DescribeRecordingsResponse
 */
async function describeRecordings(request: DescribeRecordingsRequest): DescribeRecordingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecordings', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRefundPriceRequest {
  desktopId: [ string ](name='DesktopId', description='ID of cloud computer N. Valid values of N: 1 to 20.

This parameter is required.', position='Query'),
  refundType?: string(name='RefundType', description='The unsubscription type.

Valid values:

*   RemainRefund: refunds the remaining balance and releases resources.
*   RenewRefund: refunds only the renewal fee and adjusts the expiration date accordingly.', example='RemainRefund', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the list of regions where Elastic Desktop Service (EDS) Enterprise is available.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeRefundPriceResponseBody = {
  priceInfo?: {
    currency?: string(name='Currency', description='The unit of currency (USD).', example='CNY'),
    refundFee?: float(name='RefundFee', description='The amount of the refund.', example='3990.75'),
  }(name='PriceInfo', description='The price details.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRefundPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRefundPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRefundPrice  DescribeRefundPriceRequest
  * @return DescribeRefundPriceResponse
 */
async function describeRefundPrice(request: DescribeRefundPriceRequest): DescribeRefundPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRefundPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The display name of the region, which varies based on the current language.', example='zh', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The display name of the region, which varies based on the current language.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='ecd.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The information about regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRenewalPriceRequest {
  instanceId?: string(name='InstanceId', example='ecd-6ldllk9zxcpfhs****', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', example='Desktop', position='Query'),
}

model DescribeRenewalPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: float(name='DiscountPrice', example='15.8'),
      orderLines?: map[string]string(name='OrderLines'),
      originalPrice?: float(name='OriginalPrice', example='79.0'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='test'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='promo_option'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='false'),
        }
      ](name='Promotions'),
      tradePrice?: float(name='TradePrice', example='63.2'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='29644'),
      }
    ](name='Rules'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='72E47B1E-6B11-5A11-A27C-7A80F866****'),
}

model DescribeRenewalPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRenewalPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRenewalPrice  DescribeRenewalPriceRequest
  * @return DescribeRenewalPriceResponse
 */
async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenewalPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceByCenterPolicyIdRequest {
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6l69tQX7yFxx6/4dbooBAOc', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='This parameter is required.', example='pg-53iyi2aar0nd6****', position='Query'),
  productType?: string(name='ProductType', example='desktop', position='Query'),
  resourceId?: string(name='ResourceId', example='ecd-ia2zw38bi6cm7****', position='Query'),
}

model DescribeResourceByCenterPolicyIdResponseBody = {
  count?: string(name='Count', example='2'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='48174475-5EB2-5F99-A9E9-6F892D645****'),
  resourceModelList?: [ 
    {
      appModelList?: [ 
        {
          appId?: string(name='AppId', example='18'),
          appName?: string(name='AppName', example='alipic-powergem'),
        }
      ](name='AppModelList'),
      cpu?: int32(name='Cpu', example='64'),
      desktopType?: string(name='DesktopType', example='eds.enterprise_office.8c32g'),
      gpuCount?: double(name='GpuCount', example='0.125'),
      gpuSpec?: string(name='GpuSpec', example='2GiB'),
      memory?: long(name='Memory', example='10240'),
      osType?: string(name='OsType', example='Linux'),
      payType?: string(name='PayType', example='postPaid'),
      productType?: string(name='ProductType', example='desktop'),
      protocolType?: string(name='ProtocolType', example='ASP'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-d7pasxsd3b9nhq**'),
      resourceGroupName?: string(name='ResourceGroupName', example='test'),
      resourceGroupRelCount?: int32(name='ResourceGroupRelCount', example='10'),
      resourceId?: string(name='ResourceId', example='ecd-7o96aa08fr****'),
      resourceName?: string(name='ResourceName'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-shenzhen'),
      resourceType?: string(name='ResourceType', example='desktop'),
      status?: string(name='Status', example='Stopped'),
    }
  ](name='ResourceModelList'),
}

model DescribeResourceByCenterPolicyIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceByCenterPolicyIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResourceByCenterPolicyId  DescribeResourceByCenterPolicyIdRequest
  * @return DescribeResourceByCenterPolicyIdResponse
 */
async function describeResourceByCenterPolicyId(request: DescribeResourceByCenterPolicyIdRequest): DescribeResourceByCenterPolicyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceByCenterPolicyId', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSessionStatisticRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.', example='1677808889806', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-shanghai+dir-259382****', position='Query'),
  period?: int32(name='Period', description='The query interval. Unit: seconds. Valid values:

*   60
*   120', example='60', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-shanghai', position='Query'),
  searchRegionId?: string(name='SearchRegionId', description='Specifies to search for session information by region ID. This parameter is used to filter desktop information of a specific region.', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.', example='1679449506572', position='Query'),
}

model DescribeSessionStatisticResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C5528624-C6ED-5CA4-A4A2-7C30DBF2****'),
  statistic?: [ 
    {
      count?: long(name='Count', description='The total number of sessions in the time range.', example='4'),
      timePoint?: long(name='TimePoint', description='The point in time.', example='1690164443508'),
    }
  ](name='Statistic', description='The statistics.'),
  totalCount?: string(name='TotalCount', description='The total number of sessions returned.', example='1'),
}

model DescribeSessionStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSessionStatisticResponseBody(name='body'),
}

/**
  * @description *   This is a central operation and can be called only by using services in the China (Shanghai) region.
  * *   You can query session statistics for the past hour.
  * @param request  the request parameters of DescribeSessionStatistic  DescribeSessionStatisticRequest
  * @return DescribeSessionStatisticResponse
 */
async function describeSessionStatistic(request: DescribeSessionStatisticRequest): DescribeSessionStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSessionStatistic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotsRequest {
  creator?: string(name='Creator', description='The user who creates the snapshot.', example='Administrator', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2020-11-31T06:32:31Z', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 10', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='8051af8d01b5479bec9f5ddf02e4a8fbd0ab6e7e43f8****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-2ze81owrnv9pity4****', position='Query'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.', example='test_data_disk', position='Query'),
  snapshotType?: string(name='SnapshotType', description='The category of the snapshots.

Default value: all. Valid values:

*   all: all snapshot categories

    <!-- -->

    <!-- -->

    <!-- -->

*   auto: automatic snapshots

    <!-- -->

    <!-- -->

    <!-- -->

*   user: manual snapshots

    <!-- -->

    <!-- -->

    <!-- -->', example='user', position='Query'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the disk for which the snapshot is created.

>  The value of this parameter is not case-sensitive.

Valid values:

*   Data: data disk

    <!-- -->

    <!-- -->

    <!-- -->

*   System: system disk

    <!-- -->

    <!-- -->

    <!-- -->', example='system', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2020-11-30T06:32:31Z', position='Query'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', description='If the NextToken parameter is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****'),
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The point in time at which the snapshot was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      creator?: string(name='Creator', description='The user who creates the snapshot.', example='Administrator'),
      deletionTime?: string(name='DeletionTime', description='The time when the snapshot was deleted. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      description?: string(name='Description', description='The description of the snapshot.', example='testDescription'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer to which the snapshot belongs.', example='ecd-g03l3tlm8djoj****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='test'),
      desktopStatus?: string(name='DesktopStatus', description='The status of the cloud computer.

Valid values:

*   Stopped
*   Starting
*   Rebuilding
*   Running
*   Stopping
*   Expired
*   Deleted
*   Pending', example='Running'),
      progress?: string(name='Progress', description='The progress of creating the snapshot. Unit: %.', example='100%'),
      protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   HDX: High-definition Experience (HDX) protocol

    <!-- -->

    <!-- -->

    <!-- -->

*   ASP: in-house Adaptive Streaming Protocol (ASP)

    <!-- -->

    <!-- -->

    <!-- -->', example='ASP'),
      remainTime?: int32(name='RemainTime', description='The remaining time that is required to complete the snapshot creation. Unit: seconds.

>  When the `Status` value is `PROGRESSING`, the `RemainTime` value is `-1`. A value of -1 indicates that the system is calculating the remaining time.', example='30'),
      restorePointId?: string(name='RestorePointId', description='The ID of the restore point.', example='rp-btgmaa20wkcju****'),
      restorePointName?: string(name='RestorePointName', description='The name of the restore point.', example='DataDiskBackup'),
      snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-2zeipxmnhej803x7****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', description='The type of the snapshot.

Valid values:

*   AUTO: automatic snapshot

    <!-- -->

    <!-- -->

    <!-- -->

*   USER: manual snapshot

    <!-- -->

    <!-- -->

    <!-- -->', example='USER'),
      sourceDiskSize?: string(name='SourceDiskSize', description='The capacity of the source disk. Unit: GiB.', example='150'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk.

Valid values:

*   SYSTEM: system disk

    <!-- -->

    <!-- -->

    <!-- -->

*   DATA: data disk

    <!-- -->

    <!-- -->

    <!-- -->', example='SYSTEM'),
      status?: string(name='Status', description='The status of the snapshot.

Valid values:

*   PROGRESSING: The snapshot is being created.

    <!-- -->

    <!-- -->

    <!-- -->

*   FAILED: The snapshot fails to be created.

    <!-- -->

    <!-- -->

    <!-- -->

*   ACCOMPLISHED: The snapshot is created.

    <!-- -->

    <!-- -->

    <!-- -->', example='ACCOMPLISHED'),
      volumeEncryptionEnabled?: boolean(name='VolumeEncryptionEnabled', description='Indicates whether disk encryption is enabled.', example='false'),
      volumeEncryptionKey?: string(name='VolumeEncryptionKey', description='The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.', example='08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****'),
    }
  ](name='Snapshots', description='Details of the queried snapshots.'),
}

model DescribeSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnapshotsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSnapshots  DescribeSnapshotsRequest
  * @return DescribeSnapshotsResponse
 */
async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTimerGroupRequest {
  groupId: string(name='GroupId', description='The ID of the configuration group.

This parameter is required.', example='cg-hs3i1w39o68ma****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
}

model DescribeTimerGroupResponseBody = {
  data?: {
    bindCount?: int32(name='BindCount', description='The number of resources that are bound to the configuration group.', example='50'),
    bindCountMap?: map[string]int32(name='BindCountMap', description='The number of bound resources.'),
    configTimers?: [ 
      {
        allowClientSetting?: boolean(name='AllowClientSetting', description='Indicates whether end users can configure scheduled tasks.', example='true'),
        cronExpression?: string(name='CronExpression', description='The CRON expression for the scheduled task.', example='0 0 16 ? * 1,2,3,4,5,6,7'),
        enforce?: boolean(name='Enforce', description='Specifies whether to forcibly execute the scheduled task. A value of true specifies the scheduled task will run forcefully, ignoring the cloud computer and connection status.', example='false'),
        interval?: int32(name='Interval', description='The interval at which the scheduled task is executed. Unit: minutes.', example='10'),
        operationType?: string(name='OperationType', description='The type of the scheduled disconnection task.

Valid values:

*   Hibernate: scheduled hibernation.
*   Shutdown: scheduled shutdown.', example='Shutdown'),
        processWhitelist?: [ string ](name='ProcessWhitelist', description='The process whitelist. If whitelisted processes are running, the scheduled task upon inactivity does not take effect.'),
        resetType?: string(name='ResetType', description='The reset operation of the scheduled task.

Valid values:

*   RESET_TYPE_SYSTEM: resets the system disk.
*   RESET_TYPE_USER_DISK: resets the data disk.
*   RESET_TYPE_BOTH: resets the system disk and data disk.', example='RESET_TYPE_SYSTEM'),
        timerType?: string(name='TimerType', description='The type of the scheduled task.

Valid values:

*   NoOperationDisconnect: scheduled disconnection upon inactivity.
*   NoConnect: scheduled disconnection upon specified operation (OperationType).
*   TimerBoot: scheduled start.
*   TimerReset: scheduled reset.
*   NoOperationShutdown: scheduled shutdown upon inactivity.
*   NoOperationHibernate: scheduled hibernation upon inactivity.
*   TimerShutdown: scheduled shutdown.
*   NoOperationReboot: scheduled restart upon inactivity.
*   TimerReboot: scheduled restart.', example='TimerBoot'),
        triggerType?: string(name='TriggerType', description='The method to trigger the scheduled task upon inactivity.

Valid values:

*   Advanced: intelligent detection.
*   Standard: standard detection.', example='Standard'),
      }
    ](name='ConfigTimers', description='The scheduled task configuration groups.'),
    description?: string(name='Description', description='The description of the configuration group.'),
    groupId?: string(name='GroupId', description='The ID of the configuration group.', example='cg-75aazkg2tnqb2*****'),
    name?: string(name='Name', description='The name of the configuration group.'),
    productType?: string(name='ProductType', description='The service type of the configuration group.

Valid value:

*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
    status?: string(name='Status', description='The state of the configuration group.

Valid values:

*   AVAILABLE: The configuration group is available.
*   UNAVAILABLE: The configuration group is deleted.
*   DELETING: The configuration group is being deleted.
*   UPDATING: The configuration group is being modified.', example='AVAILABLE'),
    type?: string(name='Type', description='The type of the configuration group.

Valid value:

*   Timer: the scheduled task type.', example='Timer'),
  }(name='Data', description='The information about the configuration group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DescribeTimerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTimerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTimerGroup  DescribeTimerGroupRequest
  * @return DescribeTimerGroupResponse
 */
async function describeTimerGroup(request: DescribeTimerGroupRequest): DescribeTimerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTimerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserConnectTimeRequest {
  endTime?: string(name='EndTime', position='Query'),
  endUserId?: string(name='EndUserId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  userDesktopId?: string(name='UserDesktopId', position='Query'),
  userGroupId?: string(name='UserGroupId', position='Query'),
}

model DescribeUserConnectTimeResponseBody = {
  count?: int32(name='Count'),
  data?: [ 
    {
      endConnectTime?: string(name='EndConnectTime'),
      endUserId?: string(name='EndUserId'),
      oversoldGroupId?: string(name='OversoldGroupId'),
      startConnectTime?: string(name='StartConnectTime'),
      userDesktopId?: string(name='UserDesktopId'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeUserConnectTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserConnectTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserConnectTime  DescribeUserConnectTimeRequest
  * @return DescribeUserConnectTimeResponse
 */
async function describeUserConnectTime(request: DescribeUserConnectTimeRequest): DescribeUserConnectTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserConnectTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserConnectionRecordsRequest {
  connectDurationFrom?: long(name='ConnectDurationFrom', description='The duration when the cloud desktop is connected, which is the minimum value for condition filtering.', example='100', position='Query'),
  connectDurationTo?: long(name='ConnectDurationTo', description='The duration when the cloud desktop is connected, which is the maximum value for condition filtering.', example='100', position='Query'),
  connectEndTimeFrom?: long(name='ConnectEndTimeFrom', description='The time when the cloud desktop stops to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631266200000', position='Query'),
  connectEndTimeTo?: long(name='ConnectEndTimeTo', description='The time when the cloud desktop stops to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631268000000', position='Query'),
  connectStartTimeFrom?: long(name='ConnectStartTimeFrom', description='The time when the cloud desktop starts to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631239200000', position='Query'),
  connectStartTimeTo?: long(name='ConnectStartTimeTo', description='The time when the cloud desktop starts to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.', example='1631241000000', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer pool.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-138dsptkrt00u****', position='Query'),
  endUserId: string(name='EndUserId', description='The ID of the authorized user.

This parameter is required.', example='alice', position='Query'),
  endUserType?: string(name='EndUserType', description='The type of the user account.

Valid values:

*   SIMPLE: convenience account

    <!-- -->

    <!-- -->

    <!-- -->

*   AD_CONNECTOR: enterprise AD account

    <!-- -->

    <!-- -->

    <!-- -->', example='SIMPLE', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Maximum value: 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeUserConnectionRecordsResponseBody = {
  connectionRecords?: [ 
    {
      connectDuration?: string(name='ConnectDuration', description='The connection duration. Unit: milliseconds.', example='3405035000'),
      connectEndTime?: string(name='ConnectEndTime', description='The time when the end user disconnected from the cloud computer.', example='2022-02-27T20:03:13Z'),
      connectStartTime?: string(name='ConnectStartTime', description='The time when the end user connected to the cloud computer.', example='2022-01-19T10:12:38Z'),
      connectionRecordId?: string(name='ConnectionRecordId', description='The ID of the connection record.', example='528'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer to which the end user connected.', example='ud-2hawufy3uedi1****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer to which the end user connected.', example='testName'),
    }
  ](name='ConnectionRecords', description='The connection records.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A8E03'),
}

model DescribeUserConnectionRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserConnectionRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserConnectionRecords  DescribeUserConnectionRecordsRequest
  * @return DescribeUserConnectionRecordsResponse
 */
async function describeUserConnectionRecords(request: DescribeUserConnectionRecordsRequest): DescribeUserConnectionRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserConnectionRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID. This parameter is required when you set RuleType parameter to DesktopGroup.', example='dg-2i8qxpv6t1a03****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  ruleType?: string(name='RuleType', description='The rule type that you want to configure for the directory.

Valid values:

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='DesktopGroup', position='Query'),
}

model DescribeUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A87DBB05-653A-5E4B-B72B-5F4A1E07****'),
  userProfilePathRule?: {
    desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-4i8fvpv6tfs03****'),
    rules?: [ 
      {
        blackPath?: {
          path?: string(name='Path', description='The path.', example='AppLocal/Data'),
          type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
        }(name='BlackPath', description='The blacklist that is configured.'),
        whitePaths?: [ 
          {
            path?: string(name='Path', description='The path.', example='games'),
            type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='folder'),
          }
        ](name='WhitePaths', description='The directories in the whitelist.'),
      }
    ](name='Rules', description='The directory rules.'),
    userProfileRuleType?: string(name='UserProfileRuleType', description='The directory type that is configured for the directory.

Valid values:

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='Default'),
  }(name='UserProfilePathRule', description='The directory blacklist and whitelist.'),
}

model DescribeUserProfilePathRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserProfilePathRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUserProfilePathRules  DescribeUserProfilePathRulesRequest
  * @return DescribeUserProfilePathRulesResponse
 */
async function describeUserProfilePathRules(request: DescribeUserProfilePathRulesRequest): DescribeUserProfilePathRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserProfilePathRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersInGroupRequest {
  connectState?: int32(name='ConnectState', description='The status of the desktop connection for the end user.

Valid values:

- 0: Disconnected.
- 1: Connected.', example='1', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-8ttn55ujj8nj8****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the authorized user.', example='alice', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The IDs of the authorized users.', position='Query'),
  filter?: string(name='Filter', description='The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.', example='alice', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 100.
*   Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  orgId?: string(name='OrgId', description='The ID of the organization to which the end user belongs.', example='org-d0fua2oyukw8j****', position='Query'),
  queryUserDetail?: boolean(name='QueryUserDetail', description='Specifies whether to query user details.

Valid values:

*   true (default)

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeUsersInGroupResponseBody = {
  endUsers?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus', description='The connection status.

Valid values:

*   0: disconnected
*   1: connecting', example='1'),
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-gx2x1dhsmucyy****'),
      desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName'),
      displayName?: string(name='DisplayName', description='The display name of the enterprise AD account.', example='alice'),
      endUserEmail?: string(name='EndUserEmail', description='The email address of the authorized user.', example='alice@example.com'),
      endUserId?: string(name='EndUserId', description='The ID of the authorized user.', example='alice'),
      endUserName?: string(name='EndUserName', description='The username of the authorized user.', example='alice'),
      endUserPhone?: string(name='EndUserPhone', description='The mobile number of the authorized user.', example='1381111****'),
      endUserRemark?: string(name='EndUserRemark', description='The remarks.', example='Note'),
      endUserType?: string(name='EndUserType', description='The user account type.

Valid values:

*   SIMPLE: convenience account
*   AD_CONNECTOR: enterprise Active Directory (AD) account', example='SIMPLE'),
      externalInfo?: {
        externalName?: string(name='ExternalName', description='The external name.', example='nameDemo'),
        jobNumber?: string(name='JobNumber', description='The employee ID.', example='123'),
      }(name='ExternalInfo', description='The appended information.'),
      userDesktopId?: string(name='UserDesktopId', description='The ID of the cloud computer that is used by the user.', example='ud-i896ze8hazpvl****'),
      userSetPropertiesModels?: [ 
        {
          propertyId?: long(name='PropertyId', description='The property ID.', example='123'),
          propertyKey?: string(name='PropertyKey', description='The property name.', example='key'),
          propertyType?: int32(name='PropertyType', description='The property type.

Valid values:

*   1: system property
*   2: custom property', example='1'),
          propertyValues?: [ 
            {
              propertyValue?: string(name='PropertyValue', description='The property value.', example='value'),
              propertyValueId?: long(name='PropertyValueId', description='The ID of the property value.', example='123'),
            }
          ](name='PropertyValues', description='Details about property values.'),
          userId?: long(name='UserId', description='The user ID.', example='123'),
          userName?: string(name='UserName', description='The username.', example='nameDemo'),
        }
      ](name='UserSetPropertiesModels', description='Details about the seats of users.'),
    }
  ](name='EndUsers', description='The list of authorized users.'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  onlineUsersCount?: int32(name='OnlineUsersCount', description='The total number of authorized users that are connected to cloud computers of the cloud computer share.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  userOuPath?: string(name='UserOuPath'),
  usersCount?: int32(name='UsersCount', description='The total number of authorized users of the cloud computer share.', example='1'),
}

model DescribeUsersInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsersInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsersInGroup  DescribeUsersInGroupRequest
  * @return DescribeUsersInGroupResponse
 */
async function describeUsersInGroup(request: DescribeUsersInGroupRequest): DescribeUsersInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsersInGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUsersPasswordRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-gq8u6whi9f6k8****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeUsersPasswordResponseBody = {
  desktopUsers?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the end user.', example='alice_1365*****'),
      endUserId?: string(name='EndUserId', description='The ID of the end user.', example='alice'),
      password?: string(name='Password', description='The password of the end user.', example='tes123'),
    }
  ](name='DesktopUsers', description='The authorized users of the cloud computer.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7B4B17B-5C8A-514C-AA4D-F8090E3A63E9'),
}

model DescribeUsersPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUsersPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeUsersPassword  DescribeUsersPasswordRequest
  * @return DescribeUsersPasswordResponse
 */
async function describeUsersPassword(request: DescribeUsersPasswordRequest): DescribeUsersPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUsersPassword', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualMFADevicesRequest {
  endUserId?: [ string ](name='EndUserId', description='The names of the AD users.', example='testuser', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 500. Default value: 100.', example='100', minimum=0, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-269345****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeVirtualMFADevicesResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.If NextToken is empty, no next page exists.', example='AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL23as'),
  requestId?: string(name='RequestId', description='The request ID.', example='FB550AAB-FB36-4A91-93F6-F4374AF65403'),
  virtualMFADevices?: [ 
    {
      consecutiveFails?: int32(name='ConsecutiveFails', description='The number of consecutive failures to bind the virtual MFA device, or the number of failures on the verification of the virtual MFA device.', example='1'),
      directoryId?: string(name='DirectoryId', description='> This parameter is in invitational preview and is not publicly available.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****'),
      endUserId?: string(name='EndUserId', description='The name of the AD user who uses the virtual MFA device.', example='usertest'),
      gmtEnabled?: string(name='GmtEnabled', description='The time when the virtual MFA device was started. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2020-12-20T14:52:28Z'),
      gmtUnlock?: string(name='GmtUnlock', description='The time when a locked virtual MFA device was automatically unlocked. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2020-12-21T15:21:28Z'),
      officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-269345****'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****'),
      status?: string(name='status', description='The status of the virtual MFA device.

Valid values:

*   LOCKED

    <!-- -->

    <!-- -->

    <!-- -->

*   UNBOUND

    <!-- -->

    <!-- -->

    <!-- -->

*   NORMAL

    <!-- -->

    <!-- -->

    <!-- -->', example='NORMAL'),
    }
  ](name='VirtualMFADevices', description='Details of the virtual MFA devices.'),
}

model DescribeVirtualMFADevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualMFADevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualMFADevices  DescribeVirtualMFADevicesRequest
  * @return DescribeVirtualMFADevicesResponse
 */
async function describeVirtualMFADevices(request: DescribeVirtualMFADevicesRequest): DescribeVirtualMFADevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualMFADevices', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  zoneType?: string(name='ZoneType', description='The type of the zone. Default value: `AvailabilityZone`. This value indicates Alibaba Cloud zones.', example='AvailabilityZone', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  zones?: [ 
    {
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-h'),
    }
  ](name='Zones', description='Details of zones.'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeZones  DescribeZonesRequest
  * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachCenRequest {
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DetachCenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachCenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachCen  DetachCenRequest
  * @return DetachCenResponse
 */
async function detachCen(request: DetachCenRequest): DetachCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachCen', 'POST', '/', 'json', false, 'json', request);
}

model DetachEndUserRequest {
  adDomain?: string(name='AdDomain', description='The address of the Active Directory (AD) office network.', example='xn--0zw****', position='Query'),
  clientType: string(name='ClientType', description='The type of the client.

Valid values:

*   1: hardware client.

This parameter is required.', example='2', position='Query'),
  deviceId: string(name='DeviceId', description='The serial number (SN) of the hardware client.

This parameter is required.', example='F9E52EDCCB2B****', position='Query'),
  directoryId?: string(name='DirectoryId', description='The ID of the convenient office network.', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  endUserId: string(name='EndUserId', description='The ID of the user that you want to unbind from the hardware client.

This parameter is required.', example='moli', position='Query'),
  region?: string(name='Region', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.', example='cn-shanghai', position='Query'),
}

model DetachEndUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DetachEndUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachEndUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachEndUser  DetachEndUserRequest
  * @return DetachEndUserResponse
 */
async function detachEndUser(request: DetachEndUserRequest): DetachEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachEndUser', 'POST', '/', 'json', false, 'json', request);
}

model DisableDesktopsInGroupRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopIds: [ string ](name='DesktopIds', description='The IDs of the cloud computers.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the list of regions where Elastic Desktop Service (EDS) Enterprise is available.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DisableDesktopsInGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='34FB4D97-C0D9-5534-ABC6-90C7EBD5****'),
}

model DisableDesktopsInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableDesktopsInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableDesktopsInGroup  DisableDesktopsInGroupRequest
  * @return DisableDesktopsInGroupResponse
 */
async function disableDesktopsInGroup(request: DisableDesktopsInGroupRequest): DisableDesktopsInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDesktopsInGroup', 'POST', '/', 'json', false, 'json', request);
}

model DisconnectDesktopSessionsRequest {
  preCheck?: boolean(name='PreCheck', description='Specifies whether to perform precheck. If you perform precheck, the system does not disconnect from desktop sessions. Only the sessions that do not meet specific conditions are returned.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sessions: [ 
    {
      desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ecd-90g15fkhsxxxn0unj'),
      endUserId?: string(name='EndUserId', description='The end user ID.', example='wy01'),
    }
  ](name='Sessions', description='The session details.

This parameter is required.', position='Query'),
}

model DisconnectDesktopSessionsResponseBody = {
  invalidSessions?: [ 
    {
      desktopId?: string(name='DesktopId', description='The cloud desktop ID.', example='ecd-2jv6wugbkp65pxxxx'),
      endUserId?: string(name='EndUserId', description='The end user ID.', example='wy01'),
    }
  ](name='InvalidSessions', description='The list of invalid sessions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2507CFA8-FEAB-5208-98F5-5E028C50XXXX'),
}

model DisconnectDesktopSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisconnectDesktopSessionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisconnectDesktopSessions  DisconnectDesktopSessionsRequest
  * @return DisconnectDesktopSessionsResponse
 */
async function disconnectDesktopSessions(request: DisconnectDesktopSessionsRequest): DisconnectDesktopSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisconnectDesktopSessions', 'POST', '/', 'json', false, 'json', request);
}

model DissociateNetworkPackageRequest {
  networkPackageId: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) operation to obtain the ID.

This parameter is required.', example='np-*********', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DissociateNetworkPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DissociateNetworkPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateNetworkPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DissociateNetworkPackage  DissociateNetworkPackageRequest
  * @return DissociateNetworkPackageResponse
 */
async function dissociateNetworkPackage(request: DissociateNetworkPackageRequest): DissociateNetworkPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateNetworkPackage', 'POST', '/', 'json', false, 'json', request);
}

model DownloadCdsFileRequest {
  cdsId?: string(name='CdsId', example='cn-hangzhou+cds-643267****', position='Query'),
  endUserId?: string(name='EndUserId', example='user****', position='Query'),
  fileId?: string(name='FileId', example='63f3257b68b018170b194d87b875512d108f****', position='Query'),
  groupId?: string(name='GroupId', example='cg-i1ruuudp92qpj****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DownloadCdsFileResponseBody = {
  downloadFileModel?: {
    downloadType?: string(name='DownloadType'),
    downloadUrl?: string(name='DownloadUrl', example='https://pds-XXXX-bj-1693807057.oss-cn-beijing.aliyuncs.com/A0SKfLOp%2F2%2F6662612e0570fb2bdd5549759716d433439f0572%2F6662612ee3804e4901794928b14f9a7477640ee7?di=XXXX&dr=1030&f=667d5a322ebf7409e91c485d808fb3bd8a73efbb&response-content-disposition=attachment%3B%20'),
    expirationSecond?: string(name='ExpirationSecond'),
    expirationTime?: string(name='ExpirationTime', example='2024-07-18T02:55:49.795Z'),
    fileId?: string(name='FileId', example='667d5a322ebf7409e91c485d808fb3bd8a73efbb'),
    size?: long(name='Size', example='1594642'),
    streamUrl?: string(name='StreamUrl'),
  }(name='DownloadFileModel'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='E3ED9519-DD73-5C86-9C0A-43C9281C****'),
  success?: boolean(name='Success', example='true'),
}

model DownloadCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadCdsFile  DownloadCdsFileRequest
  * @return DownloadCdsFileResponse
 */
async function downloadCdsFile(request: DownloadCdsFileRequest): DownloadCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model ExportClientEventsRequest {
  desktopId?: string(name='DesktopId', description='The ID of the cloud desktop.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud desktop.', example='testName', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, the current time is used.', example='2022-03-23T07:11:01Z', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the endpoint user.', example='user01', position='Query'),
  eventType?: string(name='EventType', description='The type of event that you want to query. Valid values:

*   DESKTOP_CONNECT: The desktop session is established.
*   DESKTOP_DISCONNECT: The desktop session is disconnected.
*   DESKTOP_REBOOT: The cloud desktop is restarted.
*   CLIENT_AD_LOGIN: The AD user logs on to the client.
*   GET_CONNECTION_TICKET: The request to connect to the cloud desktop is sent.
*   DESKTOP_START: The cloud desktop is started.
*   DESKTOP_STOP: The cloud desktop is stopped.

If you do not specify a value for this parameter, events of all types are queried.', example='CLIENT_LOGIN', position='Query'),
  eventTypes?: [ string ](name='EventTypes', description='The types of event.', position='Query'),
  langType?: string(name='LangType', description='The language in which the cloud desktop is displayed in the console UI. You can export the list of cloud desktops in the specified language. Valid values:

*   `zh-CN`: Simplified Chinese
*   `en-GB`: English (United Kingdom)

Default value: `zh-CN`.', example='zh-CN', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Maximum value: 5000.
*   Default value: 5000.', example='50', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the workspace.', example='cn-hangzhou+dir-363353****', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The name of the workspace.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.

If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.', example='2022-03-23T04:10:21Z', position='Query'),
}

model ExportClientEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', description='The download address from which you can export desktop groups.', example='https://cn-shanghai-servicemanager.oss-cn-shanghai.aliyuncs.com/A0_CLIENT_EVENT/EDS_Events%20List_20220519234611_w5HuD83KGs.csv?Expires=1652975773&OSSAccessKeyId=****&Signature=4erMG*********k%3D'),
}

model ExportClientEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportClientEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportClientEvents  ExportClientEventsRequest
  * @return ExportClientEventsResponse
 */
async function exportClientEvents(request: ExportClientEventsRequest): ExportClientEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportClientEvents', 'POST', '/', 'json', false, 'json', request);
}

model ExportDesktopGroupInfoRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud computer share.

Valid values:

*   PostPaid: pay-as-you-go.
*   PrePaid: subscription.', example='PrePaid', position='Query'),
  desktopGroupId?: [ string ](name='DesktopGroupId', description='The IDs of the cloud computer shares.', position='Query'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the cloud computer share.', example='test', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the users to be authorized.', position='Query'),
  expiredTime?: string(name='ExpiredTime', description='The expiration date of the subscription cloud computer share.', example='2022-12-31T15:59Z', position='Query'),
  langType?: string(name='LangType', description='The language of the response.', example='zh-CN', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this parameter is left empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-467671****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy.', example='pg-53iyi2aar0nd6****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You cannot specify an empty string as a tag key. A tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The tag value. You can specify an empty string as a tag key. A tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags. You can specify up to 20 tags.', position='Query'),
}

model ExportDesktopGroupInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='24E05D3E-08F4-551E-B1F0-F6D84EE0BCCC'),
  url?: string(name='Url', description='The download URL of the XLSX file that contains cloud computer shares. The XLSX file provides the following information:

*   Cloud computer share ID/name
*   Office network ID/name
*   Cloud computer share template
*   vCPUs/Memory size
*   System disk/Data disk
*   Security policy name
*   Number of authorized users
*   Billing method
*   Creation time
*   Expiration time', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktopGroups_202203********_xBjqdCT***.xlsx?*********'),
}

model ExportDesktopGroupInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportDesktopGroupInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportDesktopGroupInfo  ExportDesktopGroupInfoRequest
  * @return ExportDesktopGroupInfoResponse
 */
async function exportDesktopGroupInfo(request: ExportDesktopGroupInfoRequest): ExportDesktopGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportDesktopGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model ExportDesktopListInfoRequest {
  chargeType?: string(name='ChargeType', description='The billing method of the cloud computer.

Default value: Postpaid. Valid values:

*   Postpaid: pay-as-you-go

    <!-- -->

    <!-- -->

    <!-- -->

*   PrePaid: subscription

    <!-- -->

    <!-- -->

    <!-- -->', example='PostPaid', position='Query'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 100 IDs.', position='Query'),
  desktopName?: string(name='DesktopName', description='The name of the cloud computer.', example='testName', position='Query'),
  desktopStatus?: string(name='DesktopStatus', description='The status of the cloud computers.

Valid values:

*   Stopped

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   Rebuilding

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Expired

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleted

    <!-- -->

    <!-- -->

    <!-- -->

*   Pending

    <!-- -->

    <!-- -->

    <!-- -->', example='Running', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The IDs of the end users of the cloud computer. You can specify 1 to 100 IDs.

>  During a specific period of time, only one user can connect to and use the cloud computer.', position='Query'),
  expiredTime?: string(name='ExpiredTime', description='The time when a subscription cloud computer expires.', example='2022-12-31T15:59Z', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the cloud computer pool to which the cloud computers belong.', example='dg-boyczi8enfyc5***', position='Query'),
  langType?: string(name='LangType', description='The language in which the cloud computer is displayed in the console UI. You can export the list of cloud computers in the specified language.

Default value: zh-CN. Valid values:

*   zh-CN: Simplified Chinese

    <!-- -->

    <!-- -->

    <!-- -->

*   en-GB: British English

    <!-- -->

    <!-- -->

    <!-- -->', example='`zh-CN`', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that is attached to the cloud computer.', example='system-all-enabled-policy', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun` and cannot contain only spaces.', example='TestKey'),
      value?: string(name='Value', description='The tag value. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that are added to the cloud computer. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud computers by group. This facilitates search and batch operations. For more information, see [Use tags to manage cloud computers](https://help.aliyun.com/document_detail/203781.html).', position='Query'),
  userName?: string(name='UserName', description='The username of the end user who is using the cloud computer.', example='alice', position='Query'),
}

model ExportDesktopListInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  url?: string(name='Url', description='The URL of the exported file of the cloud computer list.', example='https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktops%20List_2022**********_w3fq******.csv?**********'),
}

model ExportDesktopListInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportDesktopListInfoResponseBody(name='body'),
}

/**
  * @description The cloud computer list exported by calling this operation is saved as a CSV file. Each entry of data of a cloud computer includes the following fields:
  * *   Cloud computer ID and name
  * *   Office network ID and name
  * *   The instance type, OS and protocol of the cloud computer
  * *   System disk and data disk of the cloud computer
  * *   The status
  * *   Purchase method
  * *   The time when the cloud computer expires
  * *   Remaining duration and total duration
  * *   Number of assigned users and number of current users
  * *   Office network type
  * *   The time when the cloud computer was created
  * *   Tags
  * *   Encryption status
  * *   IP
  * *   The hostname
  * @param request  the request parameters of ExportDesktopListInfo  ExportDesktopListInfoRequest
  * @return ExportDesktopListInfoResponse
 */
async function exportDesktopListInfo(request: ExportDesktopListInfoRequest): ExportDesktopListInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportDesktopListInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetAsyncTaskRequest {
  asyncTaskId: string(name='AsyncTaskId', description='The asynchronous task ID. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and information about an asynchronous task.

This parameter is required.', example='81a8a07a-aec4-4dd5-80da-ae69e482****', position='Query'),
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-shanghai+cds-135515****', position='Query'),
}

model GetAsyncTaskResponseBody = {
  code?: string(name='Code', description='The operation result. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='success'),
  data?: {
    asyncTaskId?: string(name='AsyncTaskId', description='The asynchronous task ID.', example='000e89fb-cf8f-11e9-8ab4-b6e98080****'),
    consumedProcess?: string(name='ConsumedProcess', description='The total number of asynchronous tasks that are processed. Example: the number of files that are packaged and downloaded on the server.', example='100'),
    errCode?: long(name='ErrCode', description='The error code of the asynchronous task.', example='InternalError'),
    message?: string(name='Message', description='The error message of the asynchronous task.', example='The request has been failed due to some unknown error. Please try again later.'),
    status?: string(name='Status', description='The task status.

Valid values:

*   Failed: The task failed.

    <!-- -->

    <!-- -->

    <!-- -->

*   Running: The task was running.

    <!-- -->

    <!-- -->

    <!-- -->

*   PartialSucceed: The task did not completely succeed.

    <!-- -->

    <!-- -->

    <!-- -->

*   Succeed: The task succeeded.

    <!-- -->

    <!-- -->

    <!-- -->', example='Failed'),
    totalProcess?: long(name='TotalProcess', description='The total number of asynchronous tasks to be processed, such as the amount of files to be downloaded and packaged on the server.', example='1000'),
    url?: string(name='Url', description='The URL to download data generated by the asynchronous task. Example: the URL to package and download tasks on the server.', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  }(name='Data', description='The data information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:', example='true'),
}

model GetAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAsyncTask  GetAsyncTaskRequest
  * @return GetAsyncTaskResponse
 */
async function getAsyncTask(request: GetAsyncTaskRequest): GetAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  commandContent?: string(name='CommandContent', description='The command that you want to run to configure a custom application in user mode. After you obtain the credential, the application is automatically started. Parameter description in the command:

*   appPath: the path of the application startup file. Example: `"C:\\\\Program Files (x86)\\\\000\\\\000.exe"`. Use double slashes (\\\\\\) as the delimiter. Type of the parameter value: string.
*   appParameter: the startup arguments of the application. Example: `"meetingid 000 meetingname aaa"`. Separate multiple arguments with spaces. Type of the parameter value: string.', example='{
      "startApplication": {
            "startApplicationList": [
                  {
                        "sessionName": "",
                        "appList": [
                              {
                                    "appPath": "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe",
                                    "appParameter": "www.example.com www.example1.com"
                              }
                        ]
                  }
            ]
      }
}', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer for which you want to generate a connection credential. This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user of the cloud computer. The end user must be the current end user of the cloud computer.', example='Alice', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', description='The password of the current end user of the cloud computer.', example='Ab123456', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the cloud computer connection task.', example='2afbad19-778a-4fc5-9674-1f19c63862da', position='Query'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='28c80e90-f71e-4c23-93d6-1225329cf949', position='Query'),
}

model GetConnectionTicketResponseBody = {
  desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-gx2x1dhsmucyy****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskCode?: string(name='TaskCode', description='The credential that is returned to connect to the cloud computer. Before you use the credential, you must Base64 decode the content of the credential, save the credential as an xxx.ica file, and then open the file. Python sample code:

    import base64
    response = {
        "Ticket": "W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********",
        "RequestId": "1CBAFFAB-B697-4049-A9B1-67E1FC5F****",
    }
    f = open (\\"xxx.ica\\", \\"w\\")
    out = base64.b64decode(response[\\"Ticket\\"])
    f.write(out)
    f.close()', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
  taskId?: string(name='TaskId', description='The ID of the cloud computer connection task.', example='2afbad19-778a-4fc5-9674-1f19c638****'),
  taskMessage?: string(name='TaskMessage', description='The ID of the cloud computer connection task.', example='2afbad19-778a-4fc5-9674-1f19c638****'),
  taskStatus?: string(name='TaskStatus', description='The task status.

Valid values:

*   FAILED: The credential fails to be obtained.

    <!-- -->

    <!-- -->

    <!-- -->

*   RUNNING: The credential is being obtained.

    <!-- -->

    <!-- -->

    <!-- -->

*   FINISHED: The credential is obtained.

    <!-- -->

    <!-- -->

    <!-- -->', example='FINISHED'),
  ticket?: string(name='Ticket', description='The credential of the cloud computer connection.', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

/**
  * @description The cloud computer must be in the Running state.
  * @param request  the request parameters of GetConnectionTicket  GetConnectionTicketRequest
  * @return GetConnectionTicketResponse
 */
async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', false, 'json', request);
}

model GetCoordinateTicketRequest {
  coId: string(name='CoId', description='The ID of the stream collaboration. You can obtain the value of this parameter based on the value of `Coid` that is returned by the `ApplyCoordinationForMonitoring` operation.

This parameter is required.', example='co-0sot77uale3****', position='Query'),
  endUserId?: string(name='EndUserId', description='The name of the convenience user account. If you initiate the request as an administrator, you do not need to specify this parameter.', example='Alice', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the cloud computer connection task. The first time you initiate the request, you do not need to specify the ID of the cloud computer connection task. If no ticket is returned after you initiate the first request, you must specify the value of taskId that is returned for the first request in the subsequent request.', example='39cc15e5-6998-4b9f-9b2c-7a4cc3e2****', position='Query'),
  userType: string(name='UserType', description='The type of the user.

Set the value to TENANT_ADMIN.

*   The value of

    <!-- -->

    <!-- -->

    TENANT_ADMIN

    <!-- -->

    specifies an administrator.

This parameter is required.', example='TENANT_ADMIN', position='Query'),
}

model GetCoordinateTicketResponseBody = {
  coId?: string(name='CoId', description='The ID of the stream collaboration.', example='co-0sot77uale3****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', description='The ID of the cloud computer connection task.', example='39cc15e5-6998-4b9f-9b2c-7a4cc3e2****'),
  taskStatus?: string(name='TaskStatus', description='The task status.

Possible values:

*   Finished

    <!-- -->

    <!-- -->

    <!-- -->

*   Failed

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->', example='Finished'),
  ticket?: string(name='Ticket', description='The credentials of the stream collaboration.', example='W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********'),
}

model GetCoordinateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCoordinateTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCoordinateTicket  GetCoordinateTicketRequest
  * @return GetCoordinateTicketResponse
 */
async function getCoordinateTicket(request: GetCoordinateTicketRequest): GetCoordinateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCoordinateTicket', 'POST', '/', 'json', false, 'json', request);
}

model GetDesktopGroupDetailRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer pool.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetDesktopGroupDetailResponseBody = {
  desktops?: {
    allowAutoSetup?: int32(name='AllowAutoSetup', description='Indicates whether cloud computers can be automatically created in the subscription cloud computer pool.

Valid values:

*   0: false
*   1: true', example='1'),
    allowBufferCount?: int32(name='AllowBufferCount', description='The number of cloud computers that is allowed to be reserved in the pay-as-you-go cloud computer pool. Valid values:

*   0: does not allow the system to reserve cloud computers.
*   N: allows the system to reserve N cloud computers. (1≤ N ≤ 100)', example='1'),
    bindAmount?: int32(name='BindAmount', description='The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.', example='1'),
    buyDesktopsCount?: int32(name='BuyDesktopsCount', description='*   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter indicates the number of cloud computers that you purchase in the pool. Valid values: 0 to 200.
*   For a pay-as-you-go pool, this parameter indicates the minimum number of cloud computers that you can create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.', example='5'),
    comments?: string(name='Comments', description='The remarks.', example='for students'),
    connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.', example='60000'),
    cpu?: int32(name='Cpu', description='The number of vCPUs.', example='4'),
    creationTime?: string(name='CreationTime', description='The time when the desktop group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2020-11-06T08:28Z'),
    creator?: string(name='Creator', description='The Alibaba Cloud account that creates the cloud computer pool.', example='155177335370****'),
    dataDiskCategory?: string(name='DataDiskCategory', description='The category of the user disk.', example='cloud_essd'),
    dataDiskSize?: string(name='DataDiskSize', description='The user disk capacity. Unit: GiB.', example='80'),
    desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer pool.', example='dg-3uiojcc0j4kh7****'),
    desktopGroupName?: string(name='DesktopGroupName', description='The name of the cloud computer pool that is queried.', example='DesktopGroupDemo'),
    directoryId?: string(name='DirectoryId', description='The ID of the directory or office network.', example='cn-hangzhou+dir-363353****'),
    directoryType?: string(name='DirectoryType', description='The type of the directory.', example='SIMPLE'),
    expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud computer pool expires.', example='2021-12-31T15:59Z'),
    gpuCount?: float(name='GpuCount', description='The number of vGPUs.', example='4'),
    gpuSpec?: string(name='GpuSpec', description='The GPU specifications.', example='NVIDIA T4'),
    idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='After an end user connects to a cloud computer, the session is established. If the system does not detect any inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.', example='900000'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****'),
    keepDuration?: long(name='KeepDuration', description='The amount of time to retain a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.

When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.', example='180000'),
    loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy of the multi-session cloud computer pool.

Valid values:

*   0: depth-first
*   1: breadth-first', example='0'),
    maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.', example='10'),
    memory?: long(name='Memory', description='The memory size. Unit: MiB.', example='4096'),
    minDesktopsCount?: int32(name='MinDesktopsCount', description='The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.', example='1'),
    nasFileSystemID?: string(name='NasFileSystemID', description='The ID of the File Storage NAS (NAS) file system for the user data roaming feature.', example='0783b4****'),
    nasFileSystemName?: string(name='NasFileSystemName', description='The name of the NAS file system for the user data roaming feature.', example='abcd'),
    officeSiteId?: string(name='OfficeSiteId', description='The ID of the office network.', example='cn-hangzhou+dir-990541****'),
    officeSiteName?: string(name='OfficeSiteName', description='The name of the office network in which the cloud computer pool resides.', example='test'),
    officeSiteType?: string(name='OfficeSiteType', description='The office network type.

Valid values:

*   PERSONAL: individual office network
*   SIMPLE: convenience office network
*   AD_CONNECTOR: enterprise Active Directory (AD) office network
*   RAM: Resource Access Management (RAM)-based office network', example='SIMPLE'),
    ownBundleId?: string(name='OwnBundleId', description='The ID of the cloud computer template.', example='b-1se9fb37r5tfq****'),
    ownBundleName?: string(name='OwnBundleName', description='The name of the cloud computer template.', example='BundleDemo'),
    ownType?: int32(name='OwnType', description='The type of the cloud computer pool.

Valid values:

*   0: individual (single session)
*   1: shared (multiple sessions)', example='0'),
    payType?: string(name='PayType', description='The billing method.

Valid values:

*   PostPaid: pay-as-you-go.

*   PrePaid: subscription.', example='PrePaid'),
    policyGroupId?: string(name='PolicyGroupId', description='The ID of the policy that is associated with the cloud computer pool.', example='pg-9cktlowtxfl6****'),
    policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of policies that are associated with the cloud computer pool.'),
    policyGroupName?: string(name='PolicyGroupName', description='The name of the policy that is associated with the cloud computer pool.', example='test'),
    policyGroupNames?: [ string ](name='PolicyGroupNames', description='The names of policies that are associated with the cloud computer pool.'),
    profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Indicates whether user data roaming is enabled.', example='true'),
    ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`

If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.', example='0.6'),
    resType?: int32(name='ResType', description='The type of the resource. Only Elastic Compute Service (ECS) instances are supported.

Valid value:

*   0: ECS', example='0'),
    resetType?: int32(name='ResetType', description='The disk reset type of the cloud computer.

Valid values:

*   0: does not reset disks.
*   1: resets only the system disk.
*   2: resets only the user disk.
*   3: resets the system disk and the user disk.', example='0'),
    scaleTimerInfos?: [ 
      {
        buyResAmount?: int32(name='BuyResAmount', description='The number of cloud computers that you purchase in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.', example='5'),
        cron?: string(name='Cron', description='The cron expression for the scheduled task.', example='0 0 0 * * ?'),
        keepDuration?: long(name='KeepDuration', description='The duration that is retained after the session is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.

When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.', example='600000'),
        loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy of the multi-session cloud computer pool.

Valid values:

*   0: depth-first
*   1: breadth-first', example='1'),
        maxResAmount?: int32(name='MaxResAmount', description='The maximum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.', example='100'),
        minResAmount?: int32(name='MinResAmount', description='The minimum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.', example='1'),
        ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`

If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.', example='0.5'),
        type?: string(name='Type', description='The type of the scheduled task.

Valid values:

*   drop: decline policy
*   normal: normal policy
*   peak: peak hour policy
*   rise: rise policy', example='rise'),
      }
    ](name='ScaleTimerInfos', description='Details of the scheduled tasks.'),
    status?: int32(name='Status', description='The payment status of the cloud computer pool.

Valid values:

*   0: unpaid
*   1: paid
*   2: overdue or expired', example='1'),
    stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud computer enters the Stopped state. If the specified value is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.', example='180000'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk.', example='cloud_essd'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The system disk capacity. Unit: GiB.', example='80'),
    timerInfos?: [ 
      {
        cronExpression?: string(name='CronExpression', description='The cron expression.', example='0 58 11 ? * 2'),
        forced?: boolean(name='Forced', description='Indicates whether the scheduled task is forcibly executed.', example='false'),
        status?: int32(name='Status', description='The status of the cloud computer pool.

Valid values:

*   1: enabled
*   2: disabled
*   3: deleted', example='1'),
        timerType?: int32(name='TimerType', description='The type of the scheduled task.

Valid values:

*   1: scheduled reset
*   2: scheduled startup
*   3: scheduled stop
*   4: scheduled restart', example='1'),
      }
    ](name='TimerInfos', description='The list of scheduled points in time for desktop group tasks.'),
    timingStrategyInfo?: string(name='TimingStrategyInfo', description='The information about the scheduling policy.', example='abcd'),
    version?: long(name='Version', description='The version number of the cloud computer pool.', example='1'),
  }(name='Desktops', description='The information about the cloud computer pool.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1B5268CE-5EB3-545F-9F38-A8BCF710****'),
}

model GetDesktopGroupDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDesktopGroupDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDesktopGroupDetail  GetDesktopGroupDetailRequest
  * @return GetDesktopGroupDetailResponse
 */
async function getDesktopGroupDetail(request: GetDesktopGroupDetailRequest): GetDesktopGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDesktopGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetOfficeSiteSsoStatusRequest {
  officeSiteId: string(name='OfficeSiteId', description='The workspace ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  ssoStatus?: boolean(name='SsoStatus', description='Indicates whether SSO is enabled.', example='false'),
}

model GetOfficeSiteSsoStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOfficeSiteSsoStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOfficeSiteSsoStatus  GetOfficeSiteSsoStatusRequest
  * @return GetOfficeSiteSsoStatusResponse
 */
async function getOfficeSiteSsoStatus(request: GetOfficeSiteSsoStatusRequest): GetOfficeSiteSsoStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOfficeSiteSsoStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.', example='cn-hangzhou+dir-400695****', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-400695****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetSpMetadataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  spMetadata?: string(name='SpMetadata', description='The metadata of the SP.'),
}

model GetSpMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSpMetadataResponseBody(name='body'),
}

/**
  * @description You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  * @param request  the request parameters of GetSpMetadata  GetSpMetadataRequest
  * @return GetSpMetadataResponse
 */
async function getSpMetadata(request: GetSpMetadataRequest): GetSpMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpMetadata', 'POST', '/', 'json', false, 'json', request);
}

model HibernateDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model HibernateDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='101AE027-8299-5E6E-A782-6C91C962****'),
}

model HibernateDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HibernateDesktopsResponseBody(name='body'),
}

/**
  * @description Hibernating a cloud desktop is in private preview. If you want to try this feature, submit a ticket.
  * @param request  the request parameters of HibernateDesktops  HibernateDesktopsRequest
  * @return HibernateDesktopsResponse
 */
async function hibernateDesktops(request: HibernateDesktopsRequest): HibernateDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HibernateDesktops', 'POST', '/', 'json', false, 'json', request);
}

model ListCdsFilesRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-320357****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the user to whom the cloud disk is allocated.', example='testUser', position='Query'),
  fileIds?: [ string ](name='FileIds', description='The IDs of the files to be queried.', shrink='json', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: 100.', example='100', position='Query'),
  nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all results are returned.', example='WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****', position='Query'),
  orderType?: string(name='OrderType', description='The sorting method of the files.

Valid values:

*   CreateTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are created.

    <!-- -->

*   ModifiedTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are modified.

    <!-- -->

*   NameDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their names.

    <!-- -->

*   SizeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their sizes.

    <!-- -->

*   ModifiedTimeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on the time when they are modified.

    <!-- -->

*   CreateTimeAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on the time when they are created.

    <!-- -->

*   SizeDesc

    <!-- -->

    :

    <!-- -->

    sorts files in descending order based on their sizes.

    <!-- -->

*   NameAsc

    <!-- -->

    :

    <!-- -->

    sorts files in ascending order based on their names.

    <!-- -->', example='CreateTimeDesc', position='Query'),
  parentFileId?: string(name='ParentFileId', description='The ID of the parent file.', example='63636837e47e5a24a8a940218bef395c210e****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The file status.

Valid values:

*   available

    <!-- -->

    :

    <!-- -->

    returns only normal files.

    <!-- -->

*   uploading

    <!-- -->

    :

    <!-- -->

    returns only the files that are being uploaded.

    <!-- -->', example='available', position='Query'),
}

model ListCdsFilesResponseBody = {
  code?: string(name='Code', description='The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  count?: string(name='Count', description='The total number of entries.', example='0'),
  fileModels?: [ 
    {
      category?: string(name='Category', description='The file category. PDS categorizes files based on their suffixes and MIME types. The following major categories are included: doc, image, audio, and video.', example='image'),
      contentType?: string(name='ContentType', description='The content type of the file.', example='application/json'),
      createTime?: string(name='CreateTime', description='The time when the file was created.', example='2022-09-06T07:27:08Z'),
      creator?: string(name='Creator', description='The file creator.', example='user01'),
      description?: string(name='Description', description='The file description.', example='test1'),
      downloadUrl?: string(name='DownloadUrl', description='The URL that is used to download the file. The download URL is valid for only 15 minutes. If the URL is expired, you can call the GetFile operation to obtain the file.', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
      fileExtension?: string(name='FileExtension', description='The filename extension.', example='pdf'),
      fileId?: string(name='FileId', description='The file ID.', example='637725ff2f63db8470984e6c92c692b87d52****'),
      filePath?: string(name='FilePath', description='The file path.', example='isv/1019236948660053/temp/'),
      fileType?: string(name='FileType', description='The file type.', example='file'),
      md5?: string(name='Md5', description='The MD5 value of the file.', example='63c83ececb4e6926c51448fc5ecb****'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the file was last modified.', example='2022-09-06T07:27:08Z'),
      modifier?: string(name='Modifier', description='The user who modified the file.', example='user02'),
      name?: string(name='Name', description='The file name.', example='fvt-appcenterp4qwa'),
      openTime?: string(name='OpenTime', description='The time when the file was last opened.', example='2022-09-06T07:27:08Z'),
      openTimeStamp?: long(name='OpenTimeStamp', description='The timestamp that indicates the time when the file was last opened.', example='168951245231'),
      parentId?: string(name='ParentId', description='The ID of the parent folder.', example='3343213ff2f63db8470984e6c92c3213dfdw****'),
      regionId?: string(name='RegionId', description='The region ID You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.', example='cn-beijing'),
      sha1?: string(name='Sha1', description='The SHA 1 file.', example='EA4942AA8761213890A5C386F88E6464D2C3****'),
      size?: long(name='Size', description='The file size. Unit: bits.', example='102400'),
      thumbnail?: string(name='Thumbnail', description='The URL of the thumbnail.', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    }
  ](name='FileModels', description='The files.'),
  message?: string(name='Message', description='The error message returned if the request failed. This parameter is empty if the value of Code is success.', example='success'),
  nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all results have been returned.', example='WyI2MzhmMjA2ZTFmZGZlZGVjZDk3OTRlNzVhZmIwMDFiZmM5NWQ3YTgwIiwibiIsIm4iLDEsLTEsMTY3MDMyNDMzNTAzMSwiNjM4ZjIwNmZjNDFkMzIwOTZmZWU0NGYxODkwY2I5ZjI0Mjg0NzM2****'),
  requestId?: string(name='RequestId', description='The request ID. An ID is the unique identifier of the request.', example='40D86754-20FD-53DC-A9B8-25F7FECC****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true'),
}

model ListCdsFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCdsFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCdsFiles  ListCdsFilesRequest
  * @return ListCdsFilesResponse
 */
async function listCdsFiles(request: ListCdsFilesRequest): ListCdsFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCdsFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListDirectoryUsersRequest {
  assignedInfo?: string(name='AssignedInfo', description='> This parameter is not publicly available. The value can be 1 or left empty.', example='1', position='Query'),
  directoryId: string(name='DirectoryId', description='The ID of the AD directory.

This parameter is required.', example='cn-hangzhou+dir-jedbpr4sl9l37****', position='Query'),
  filter?: string(name='Filter', description='The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.', example='alice', position='Query'),
  includeAssignedUser?: boolean(name='IncludeAssignedUser', description='Specifies whether to return the users with assigned cloud computers only.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  OUPath?: string(name='OUPath', description='The organizational unit (OU) in the specified AD domain.', example='example.com/Domain Controllers', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sortType?: string(name='SortType', description='The sort type.

Valide values:

- asc: cloud computers assigned to users on bottom
- desc: cloud computers assigned to users on top', example='asc', position='Query'),
}

model ListDirectoryUsersResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query. If the value of this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ 
    {
      assignedDesktopNumber?: int32(name='AssignedDesktopNumber', description='The number of assigned cloud computers.', example='2'),
      displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
      email?: string(name='Email', description='The email address.', example='user@example.com'),
      endUser?: string(name='EndUser', description='The name of the user.', example='Alice'),
      phone?: string(name='Phone', description='The mobile number.', example='130********'),
    }
  ](name='Users', description='The names of users corresponding to the AD directory. If the AD directory contains only Administrator and Guest, an empty Users array is returned.'),
}

model ListDirectoryUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDirectoryUsersResponseBody(name='body'),
}

/**
  * @description If you use an AD directory to connect to an AD system, you can call this operation to obtain the user information in the AD system.
  * @param request  the request parameters of ListDirectoryUsers  ListDirectoryUsersRequest
  * @return ListDirectoryUsersResponse
 */
async function listDirectoryUsers(request: ListDirectoryUsersRequest): ListDirectoryUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDirectoryUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListFilePermissionRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-hangzhou+cds-346063****', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The ID of the shared file.

This parameter is required.', example='6333e553a133ce21e6f747cf948bb9ef95d7****', position='Query'),
  groupId?: string(name='GroupId', description='The group ID.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the cloud disk. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListFilePermissionResponseBody = {
  filePermissions?: [
    FilePermissionMember
  ](name='FilePermissions', description='The permissions on the shared file.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListFilePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFilePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFilePermission  ListFilePermissionRequest
  * @return ListFilePermissionResponse
 */
async function listFilePermission(request: ListFilePermissionRequest): ListFilePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFilePermission', 'POST', '/', 'json', false, 'json', request);
}

model ListOfficeSiteOverviewRequest {
  forceRefresh?: boolean(name='ForceRefresh', description='Specifies whether to refresh the cache.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

*   Valid values: 1 to 100
*   Default value: 10', example='10', minimum=0, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. If this is your first query or no next query is to be sent, skip this parameter. If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  officeSiteId?: [ string ](name='OfficeSiteId', description='The office network IDs. You can specify IDs of 1 to 100 office networks.', example='cn-hangzhou+dir-363353****', position='Query'),
  queryRange?: int32(name='QueryRange', description='The query scope. Cloud computers in a cloud computer pool are pooled cloud computers.

Default values:

*   1 (default): queries non-pooled cloud computers in the office network.
*   2: queries pooled cloud computers in the office network.
*   3: queries all cloud computers in the office network.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListOfficeSiteOverviewResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used to start the next query. If this parameter is empty, all results are returned.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  officeSiteOverviewResults?: [ 
    {
      hasExpiredEdsCount?: int32(name='HasExpiredEdsCount', description='The number of expired cloud computers in the office network.', example='0'),
      hasExpiredEdsCountForGroup?: int32(name='HasExpiredEdsCountForGroup', description='The number of expired cloud computers in the cloud computer pool.', example='0'),
      officeSiteId?: string(name='OfficeSiteId', description='The office network ID.', example='cn-hangzhou+dir-363353****'),
      officeSiteName?: string(name='OfficeSiteName', description='The office network name.', example='test'),
      officeSiteStatus?: string(name='OfficeSiteStatus', description='The office network status.

Default values:

*   CONFIGUSERFAILED

    <!-- -->

    <!-- -->

    <!-- -->

*   REGISTERING

    <!-- -->

    <!-- -->

    <!-- -->

*   REGISTERED

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGTRUST

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGUSERING

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTFAILED

    <!-- -->

    <!-- -->

    <!-- -->

*   ERROR

    <!-- -->

    <!-- -->

    <!-- -->

*   CONFIGTRUSTING

    <!-- -->

    <!-- -->

    <!-- -->

*   NEEDCONFIGUSER

    <!-- -->

    <!-- -->

    <!-- -->', example='REGISTERED'),
      regionId?: string(name='RegionId', description='The ID of the region where the office network resides.', example='cn-hangzhou'),
      runningEdsCount?: int32(name='RunningEdsCount', description='The number of cloud computers that are running in the office network.', example='1'),
      runningEdsCountForGroup?: int32(name='RunningEdsCountForGroup', description='The number of running cloud computers in the cloud computer pool.', example='1'),
      totalEdsCount?: int32(name='TotalEdsCount', description='The total number of cloud computers in the office network.', example='1'),
      totalEdsCountForGroup?: int32(name='TotalEdsCountForGroup', description='The total number of cloud computers in the cloud computer pool.', example='1'),
      vpcType?: string(name='VpcType', description='The office network type and its suitable VPC type.

Valid values:

*   standard (default): standard, exclusive VPC
*   customized: custom, user VPC
*   basic: basic, shared VPC', example='standard'),
      willExpiredEdsCount?: int32(name='WillExpiredEdsCount', description='The number of cloud computers that are about to expire in the office network.', example='0'),
      willExpiredEdsCountForGroup?: int32(name='WillExpiredEdsCountForGroup', description='The number of cloud computers that are about to expire in the cloud computer pool.', example='0'),
    }
  ](name='OfficeSiteOverviewResults', description='The office network information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListOfficeSiteOverviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOfficeSiteOverviewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOfficeSiteOverview  ListOfficeSiteOverviewRequest
  * @return ListOfficeSiteOverviewResponse
 */
async function listOfficeSiteOverview(request: ListOfficeSiteOverviewRequest): ListOfficeSiteOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOfficeSiteOverview', 'POST', '/', 'json', false, 'json', request);
}

model ListOfficeSiteUsersRequest {
  assignedInfo?: string(name='AssignedInfo', position='Query'),
  filter?: string(name='Filter', description='The query string for fuzzy query.', example='*jin*', position='Query'),
  includeAssignedUser?: boolean(name='IncludeAssignedUser', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

*   Valid values: 1 to 100.
*   Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next query exists. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  OUPath?: string(name='OUPath', description='The organizational unit (OU) of the specified AD domain.', example='example.com/Domain Controllers', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID. The office network must be of the enterprise AD account type.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sortType?: string(name='SortType', position='Query'),
}

model ListOfficeSiteUsersResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='269BDB16-2CD8-4865-84BD-11C40BC21DB0'),
  users?: [ 
    {
      assignedDesktopNumber?: int32(name='AssignedDesktopNumber'),
      displayName?: string(name='DisplayName', description='The display name of the user.', example='Alice'),
      email?: string(name='Email'),
      endUser?: string(name='EndUser', description='The name of the AD user.', example='Alice'),
      phone?: string(name='Phone'),
    }
  ](name='Users', description='The usernames of AD users.\\
If the only Administrator and Guest users exist in the enterprise AD, an empty User array is returned.'),
}

model ListOfficeSiteUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOfficeSiteUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOfficeSiteUsers  ListOfficeSiteUsersRequest
  * @return ListOfficeSiteUsersResponse
 */
async function listOfficeSiteUsers(request: ListOfficeSiteUsersRequest): ListOfficeSiteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOfficeSiteUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.', example='ecd-ia2zw38bi6cm7****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Valid values:

* ALIYUN::GWS::INSTANCE: cloud computer.

This parameter is required.', example='ALIYUN::GWS::INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys. You can specify 1 to 20 tag keys.', example='TestKey'),
      value?: string(name='Value', description='The tag values. You can specify 1 to 20 tag values.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to query.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID, which is the cloud computer ID.', example='ecd-ia2zw38bi6cm7****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

* ALIYUN::GWS::INSTANCE: cloud computer.', example='ALIYUN::GWS::INSTANCE'),
      tagKey?: string(name='TagKey', description='The tag keys.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag values.', example='TestValue'),
    }
  ](name='TagResources', description='The resources and their tags.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description You must use at least one of the following parameters in the request to determine the object that you want to query: `ResourceId.N`, `Tag.N.Key`, and `Tag.N.Value`.
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUserAdOrganizationUnitsRequest {
  filter?: string(name='Filter', description='The string that you enter for fuzzy search.', example='develop', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500. Default value: 500.', example='100', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next request exists. You must specify the token that is obtained from the previous query as the value of NextToken.', example='CAAAAA==', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The enterprise AD office network ID.

This parameter is required.', example='cn-hangzhou+dir-485361****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListUserAdOrganizationUnitsResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token.', example='CAAAAA=='),
  OUNames?: [ 
    {
      displayOUName?: string(name='DisplayOUName', description='The name of the OU.', example='wuying_computers'),
      OUName?: string(name='OUName', description='The canonical name (CNAME) of the OU in the AD domain controller.', example='example.com/wuying_computers'),
      officeSiteId?: string(name='OfficeSiteId', description='The enterprise AD office network ID.', example='cn-hangzhou+dir-485361****'),
    }
  ](name='OUNames', description='The OUs of the AD domain.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListUserAdOrganizationUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserAdOrganizationUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserAdOrganizationUnits  ListUserAdOrganizationUnitsRequest
  * @return ListUserAdOrganizationUnitsResponse
 */
async function listUserAdOrganizationUnits(request: ListUserAdOrganizationUnitsRequest): ListUserAdOrganizationUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserAdOrganizationUnits', 'POST', '/', 'json', false, 'json', request);
}

model LockVirtualMFADeviceRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  serialNumber: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to AD users.

This parameter is required.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****', position='Query'),
}

model LockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LockVirtualMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LockVirtualMFADeviceResponseBody(name='body'),
}

/**
  * @description After a virtual MFA device is locked, its status changes to LOCKED. The Active Directory (AD) user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](https://help.aliyun.com/document_detail/206212.html) operation to unlock the device.
  * @param request  the request parameters of LockVirtualMFADevice  LockVirtualMFADeviceRequest
  * @return LockVirtualMFADeviceResponse
 */
async function lockVirtualMFADevice(request: LockVirtualMFADeviceRequest): LockVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model MigrateDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 100 IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  targetOfficeSiteId: string(name='TargetOfficeSiteId', description='The ID of the destination office network.

This parameter is required.', example='cn-shenzhen+dir-388505****', position='Query'),
}

model MigrateDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E46DECEC-AC72-570E-958B-B52A4B****'),
}

model MigrateDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MigrateDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MigrateDesktops  MigrateDesktopsRequest
  * @return MigrateDesktopsResponse
 */
async function migrateDesktops(request: MigrateDesktopsRequest): MigrateDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateDesktops', 'POST', '/', 'json', false, 'json', request);
}

model MigrateImageProtocolRequest {
  imageId: [ string ](name='ImageId', description='The image IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  targetProtocolType?: string(name='TargetProtocolType', description='The protocol to which you want to update the image protocols. Set the value to ASP.', example='ASP', position='Query'),
}

model MigrateImageProtocolResponseBody = {
  failedIds?: [ string ](name='FailedIds', description='The IDs of the images whose protocols failed to be updated.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D4E5AF5-DF28-5FE7-85C7-9F98315B****'),
}

model MigrateImageProtocolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MigrateImageProtocolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MigrateImageProtocol  MigrateImageProtocolRequest
  * @return MigrateImageProtocolResponse
 */
async function migrateImageProtocol(request: MigrateImageProtocolRequest): MigrateImageProtocolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateImageProtocol', 'POST', '/', 'json', false, 'json', request);
}

model ModifyADConnectorDirectoryRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.', example='cnshsv21hmcdc01', position='Query'),
  directoryId: string(name='DirectoryId', description='The ID of the directory.

This parameter is required.', example='cn-hangzhou+dir-gx2x1dhsmu52rd****', position='Query'),
  directoryName?: string(name='DirectoryName', description='The name of the AD directory.', example='testDirectoryName', position='Query'),
  dnsAddress?: [ string ](name='DnsAddress', description='The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.', example='`127.0.**.**`', position='Query'),
  domainName?: string(name='DomainName', description='The domain name. The name must be 2 to 255 characters in length and must be in the two-part domain name format, such as `example.com`. You can register each domain name only once.', example='example.com', position='Query'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The username can be up to 64 characters in length.', example='testPassword', position='Query'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.', example='sAMAccountName', position='Query'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.

>  When end users log on to a cloud computer for the first time, they must bind an MFA device.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   <!-- -->

    false (default)

    <!-- -->

    <!-- -->', example='false', position='Query'),
  OUName?: string(name='OUName', description='The name of the organizational unit (OU) in the AD domain. You can call the ListUserAdOrganizationUnits operation to obtain the name of the OU.', example='example.com/Domain Controllers', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the existing AD subdomain.\\
If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.', example='`127.0.**.**`', position='Query'),
  subDomainName?: string(name='SubDomainName', description='The domain name of the existing AD subdomain.', example='childexample.com', position='Query'),
}

model ModifyADConnectorDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyADConnectorDirectoryResponseBody(name='body'),
}

/**
  * @description You can modify the following domain name- and Domain Name System (DNS)-related parameters only for Active Directory (AD) directories that are in the ERROR or REGISTERING state: `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress`.
  * @param request  the request parameters of ModifyADConnectorDirectory  ModifyADConnectorDirectoryRequest
  * @return ModifyADConnectorDirectoryResponse
 */
async function modifyADConnectorDirectory(request: ModifyADConnectorDirectoryRequest): ModifyADConnectorDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyADConnectorDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ModifyADConnectorOfficeSiteRequest {
  adHostname?: string(name='AdHostname', description='The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.', example='beijing-ad01', position='Query'),
  backupDCHostname?: string(name='BackupDCHostname', description='The hostname of the backup domain controller.', example='dc002', position='Query'),
  backupDns?: string(name='BackupDns', description='The DNS address of the backup domain controller.', example='192.168.2.100', position='Query'),
  dnsAddress?: [ string ](name='DnsAddress', description='Details of the IP addresses of the Domain Name System (DNS) servers that correspond to the enterprise AD system. You can specify only one IP address.', example='127.0.*.*', position='Query'),
  domainName?: string(name='DomainName', description='The domain name of the enterprise AD system. You can register each domain name only once.', example='example.com', position='Query'),
  domainPassword?: string(name='DomainPassword', description='The password of the domain administrator. The username can be up to 64 characters in length.', example='testPassword', position='Query'),
  domainUserName?: string(name='DomainUserName', description='The username of the domain administrator. The username can be up to 64 characters in length.

> Specify the value of the sAMAccountName parameter instead of the value of the userPrincipalName parameter as the username.', example='Administrator', position='Query'),
  mfaEnabled?: boolean(name='MfaEnabled', description='Specifies whether to enable multi-factor authentication (MFA).

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  OUName?: string(name='OUName', description='The name of the organizational unit (OU) in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to obtain OUs.', example='oldad.com/Domain Controllers', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  subDomainDnsAddress?: [ string ](name='SubDomainDnsAddress', description='The DNS address of the subdomain in the enterprise AD domain. You can specify only one DNS address. If you configure `SubDomainName` and leave this parameter empty, the value is the same as that of the enterprise AD domain.', example='127.0.*.*', position='Query'),
  subDomainName?: string(name='SubDomainName', description='The name of the subdomain in the enterprise AD domain.', example='childexample.com', position='Query'),
}

model ModifyADConnectorOfficeSiteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyADConnectorOfficeSiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyADConnectorOfficeSiteResponseBody(name='body'),
}

/**
  * @description You can modify parameters of domain names and Domain Name System (DNS) for enterprise AD office networks that are in the `ERROR` or `REGISTERED` state. The parameters include `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress.N`.
  * @param request  the request parameters of ModifyADConnectorOfficeSite  ModifyADConnectorOfficeSiteRequest
  * @return ModifyADConnectorOfficeSiteResponse
 */
async function modifyADConnectorOfficeSite(request: ModifyADConnectorOfficeSiteRequest): ModifyADConnectorOfficeSiteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyADConnectorOfficeSite', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAclEntriesRequest {
  policy: string(name='Policy', description='The Internet access control policy.

Valid values:

*   allow: allows access to the Internet.

*   disable: forbids access to the Internet.

This parameter is required.', example='allow', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  sourceId: [ string ](name='SourceId', description='The instance IDs (office network IDs or cloud computer IDs) to which the Internet access control policy is applicable.

This parameter is required.', position='Query'),
  sourceType: string(name='SourceType', description='The granularity to which the Internet access control policy is applicable.

Valid values:

*   desktop: cloud computer granularity.

*   vpc: office network granularity.

This parameter is required.', example='desktop', position='Query'),
}

model ModifyAclEntriesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='062B1439-709A-580E-85DF-CE97A1560565'),
}

model ModifyAclEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAclEntriesResponseBody(name='body'),
}

/**
  * @description You can set different Internet access control policies at different granularities to achieve the effect of composite policies. For example, you can disable the Internet access on the office network granularity and enable the Internet access on specific cloud computer granularity. The effect is that all cloud computers in the office network except the specified cloud computers are not allowed to access the Internet.
  * @param request  the request parameters of ModifyAclEntries  ModifyAclEntriesRequest
  * @return ModifyAclEntriesResponse
 */
async function modifyAclEntries(request: ModifyAclEntriesRequest): ModifyAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoSnapshotPolicyRequest {
  cronExpression?: string(name='CronExpression', description='The CRON expression.', example='0 20 16 ? * 1,2,3,4,5,6,7', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the automatic snapshot policy.

This parameter is required.', example='sp-itcmrhqt01tdo****', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.', example='Automatic system snapshot', minLength=2, maxLength=128, position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.', example='5', position='Query'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAutoSnapshotPolicy  ModifyAutoSnapshotPolicyRequest
  * @return ModifyAutoSnapshotPolicyResponse
 */
async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBundleRequest {
  bundleId: string(name='BundleId', description='The ID of the cloud computer template that you want to modify.

This parameter is required.', example='b-2g65ljy4291vl****', position='Query'),
  bundleName?: string(name='BundleName', description='The name of the new cloud computer template.', example='newName', position='Query'),
  description?: string(name='Description', description='The description of the new cloud computer template.', example='newDescription', position='Query'),
  imageId?: string(name='ImageId', description='The new image ID. The new image must meet the following conditions:

*   The new image must be in the Available state.
*   The operating system of the new image must be the same as that of the original image.
*   The required disk size for the new image cannot be greater than that for the original image.
*   The GPU type of the new image must be the same as that of the original image.', example='m-aea3oaww001np****', position='Query'),
  language?: string(name='Language', description='The OS language. This parameter is available only for system images.

Valid values:

*   en-US: American English
*   zh-HK: Traditional Chinese (Hong Kong)
*   zh-CN: Simplified Chinese.

*   ja-JP: Japanese', example='zh-CN', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyBundleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyBundleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBundleResponseBody(name='body'),
}

/**
  * @description Only custom desktop templates can be modified.
  * @param request  the request parameters of ModifyBundle  ModifyBundleRequest
  * @return ModifyBundleResponse
 */
async function modifyBundle(request: ModifyBundleRequest): ModifyBundleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBundle', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCdsFileRequest {
  cdsId: string(name='CdsId', description='The cloud disk ID.

This parameter is required.', example='cn-hangzhou+cds-64326*****', position='Query'),
  conflictPolicy?: string(name='ConflictPolicy', description='The processing mode of files that have the same name.

Valid values:

*   refuse

    <!-- -->

    :

    <!-- -->

    refuses to create a file that has the same name as the file in the cloud.

    <!-- -->

*   auto_rename

    <!-- -->

    :

    <!-- -->

    automatically renames a file if the file has the same name as another file. By default, the current point in time is appended. Example: xxx20060102_150405.

    <!-- -->

*   ignore

    <!-- -->

    :

    <!-- -->

    allows files with the same name.

    <!-- -->', example='ignore', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user who uses the cloud disk.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The file ID.

This parameter is required.', example='6333e553a133ce21e6f747cf948bb9ef95d7****', position='Query'),
  fileName: string(name='FileName', description='The file name.

This parameter is required.', example='test.txt', minLength=1, maxLength=1024, position='Query'),
  groupId?: string(name='GroupId', description='The group ID.', example='cg-i1ruuudp92qpj****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyCdsFileResponseBody = {
  code?: string(name='Code', description='The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='Specifies whether data is returned.

Valid values:

*   false: Data fails to be returned.

    <!-- -->

    <!-- -->

    <!-- -->

*   true

    <!-- -->

    : Data is returned.

    <!-- -->

    <!-- -->', example='true'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true: The request is successful.

    <!-- -->

    <!-- -->

    <!-- -->

*   false: The request fails.

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model ModifyCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCdsFile  ModifyCdsFileRequest
  * @return ModifyCdsFileResponse
 */
async function modifyCdsFile(request: ModifyCdsFileRequest): ModifyCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCdsFileShareLinkRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk.

This parameter is required.', example='cn-shanghai+cds-135515****', position='Query'),
  description?: string(name='Description', description='The description of the file sharing task. The description must be 0 to 1,024 characters in length.', example='testDescription', maxLength=1024, position='Query'),
  disableDownload?: boolean(name='DisableDownload', description='Specifies whether to prohibit the download of the files that are being shared.

Valid values:

*   false

    <!-- -->

    <!-- -->

    <!-- -->

*   true

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  disablePreview?: boolean(name='DisablePreview', description='Specifies whether to prohibit the preview of the files that are being shared.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  disableSave?: boolean(name='DisableSave', description='Specifies whether to prohibit the dump of the files that are being shared.

Valid values:

*   false

    <!-- -->

    <!-- -->

    <!-- -->

*   true

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  downloadCount?: long(name='DownloadCount', description='The number of times that the shared files are downloaded. The value of this parameter must be equal to or greater than 0.', example='0', position='Query'),
  downloadLimit?: long(name='DownloadLimit', description='The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='0', position='Query'),
  expiration?: string(name='Expiration', description='The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.', example='2022-07-20T06:30:22.365Z', position='Query'),
  previewCount?: long(name='PreviewCount', description='The number of times that the shared files are previewed. The value of this parameter must be equal to or greater than 0.', example='0', position='Query'),
  previewLimit?: long(name='PreviewLimit', description='The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='100', position='Query'),
  reportCount?: long(name='ReportCount', description='The number of times that the shared files are reported. The value of this parameter must be equal to or greater than 0.', example='0', position='Query'),
  saveCount?: long(name='SaveCount', description='The number of times that the shared files are dumped. The value of this parameter must be equal to or greater than 0.', example='0', position='Query'),
  saveLimit?: long(name='SaveLimit', description='The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.', example='100', position='Query'),
  shareId: string(name='ShareId', description='The ID of the file sharing task.

This parameter is required.', example='7JQX1Fs****', position='Query'),
  shareName?: string(name='ShareName', description='The name of the file sharing task. If you do not configure this parameter, the sharing task name is the first ID that is returned in the file_id_list value.

>  The sharing task name must be 0 to 128 characters in length.', maxLength=128, position='Query'),
  sharePwd?: string(name='SharePwd', description='The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.', example='12345678', minLength=6, maxLength=8, position='Query'),
  status?: string(name='Status', description='The sharing status.

Valid values:

*   disabled: The sharing task is canceled.

    <!-- -->

    <!-- -->

    <!-- -->

*   enabled: The sharing task is valid.

    <!-- -->

    <!-- -->

    <!-- -->', example='enabled', position='Query'),
  videoPreviewCount?: long(name='VideoPreviewCount', description='The number of times that the videos are previewed in the shared files. The value of this parameter must be equal to or greater than 0.', example='0', position='Query'),
}

model ModifyCdsFileShareLinkResponseBody = {
  code?: string(name='Code', description='The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  data?: CdsFileShareLinkModel(name='Data', description='The data information.'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
  success?: boolean(name='Success', description='The request status.

Valid values:

*   true: The request is successful.

    <!-- -->

    <!-- -->

    <!-- -->

*   false: The request fails.

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model ModifyCdsFileShareLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCdsFileShareLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCdsFileShareLink  ModifyCdsFileShareLinkRequest
  * @return ModifyCdsFileShareLinkResponse
 */
async function modifyCdsFileShareLink(request: ModifyCdsFileShareLinkRequest): ModifyCdsFileShareLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCdsFileShareLink', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenterPolicyRequest {
  adminAccess?: string(name='AdminAccess', example='deny', position='Query'),
  appContentProtection?: string(name='AppContentProtection', example='on', position='Query'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
    }
  ](name='AuthorizeAccessPolicyRule', position='Query'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      policy?: string(name='Policy', example='accept'),
      portRange?: string(name='PortRange', example='22/22'),
      priority?: string(name='Priority', example='1'),
      type?: string(name='Type', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', position='Query'),
  businessType: int32(name='BusinessType', description='This parameter is required.', example='1', position='Query'),
  cameraRedirect?: string(name='CameraRedirect', example='on', position='Query'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', example='android'),
      status?: string(name='Status', example='off'),
    }
  ](name='ClientType', position='Query'),
  clipboard?: string(name='Clipboard', example='off', position='Query'),
  colorEnhancement?: string(name='ColorEnhancement', example='off', position='Query'),
  cpuDownGradeDuration?: int32(name='CpuDownGradeDuration', example='50', position='Query'),
  cpuProcessors?: [ string ](name='CpuProcessors', position='Query'),
  cpuProtectedMode?: string(name='CpuProtectedMode', example='off', position='Query'),
  cpuRateLimit?: int32(name='CpuRateLimit', example='70', position='Query'),
  cpuSampleDuration?: int32(name='CpuSampleDuration', example='30', position='Query'),
  cpuSingleRateLimit?: int32(name='CpuSingleRateLimit', example='80', position='Query'),
  deviceConnectHint?: string(name='DeviceConnectHint', example='off', position='Query'),
  deviceRedirects?: [ 
    {
      deviceType?: string(name='DeviceType', example='camera'),
      redirectType?: string(name='RedirectType', example='deviceRedirect'),
    }
  ](name='DeviceRedirects', position='Query'),
  deviceRules?: [ 
    {
      deviceName?: string(name='DeviceName', example='sandisk'),
      devicePid?: string(name='DevicePid', example='0x55b1'),
      deviceType?: string(name='DeviceType', example='storage'),
      deviceVid?: string(name='DeviceVid', example='0x0781'),
      optCommand?: string(name='OptCommand', example='2:0'),
      redirectType?: string(name='RedirectType', example='usbRedirect'),
    }
  ](name='DeviceRules', position='Query'),
  disconnectKeepSession?: string(name='DisconnectKeepSession', example='customTime', position='Query'),
  disconnectKeepSessionTime?: int32(name='DisconnectKeepSessionTime', example='120', position='Query'),
  displayMode?: string(name='DisplayMode', example='clientCustom', position='Query'),
  domainResolveRule?: [ 
    {
      description?: string(name='Description'),
      domain?: string(name='Domain', example='*.example.com'),
      policy?: string(name='Policy', example='allow'),
    }
  ](name='DomainResolveRule', position='Query'),
  domainResolveRuleType?: string(name='DomainResolveRuleType', example='off', position='Query'),
  enableSessionRateLimiting?: string(name='EnableSessionRateLimiting', example='off', position='Query'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', example='off', position='Query'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', example='off', position='Query'),
  fileMigrate?: string(name='FileMigrate', example='off', position='Query'),
  gpuAcceleration?: string(name='GpuAcceleration', example='off', position='Query'),
  html5FileTransfer?: string(name='Html5FileTransfer', example='off', position='Query'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', example='both', position='Query'),
  localDrive?: string(name='LocalDrive', example='off', position='Query'),
  maxReconnectTime?: int32(name='MaxReconnectTime', example='120', position='Query'),
  memoryDownGradeDuration?: int32(name='MemoryDownGradeDuration', example='40', position='Query'),
  memoryProcessors?: [ string ](name='MemoryProcessors', position='Query'),
  memoryProtectedMode?: string(name='MemoryProtectedMode', example='off', position='Query'),
  memoryRateLimit?: int32(name='MemoryRateLimit', example='70', position='Query'),
  memorySampleDuration?: int32(name='MemorySampleDuration', example='40', position='Query'),
  memorySingleRateLimit?: int32(name='MemorySingleRateLimit', example='40', position='Query'),
  mobileRestart?: string(name='MobileRestart', example='off', position='Query'),
  mobileShutdown?: string(name='MobileShutdown', example='off', position='Query'),
  name?: string(name='Name', example='testPolicyGroupName', position='Query'),
  netRedirect?: string(name='NetRedirect', example='on', position='Query'),
  netRedirectRule?: [ 
    {
      domain?: string(name='Domain', example='*.taobao.com'),
      policy?: string(name='Policy', example='Allow'),
      ruleType?: string(name='RuleType', example='domain'),
    }
  ](name='NetRedirectRule', position='Query'),
  noOperationDisconnect?: string(name='NoOperationDisconnect', example='off', position='Query'),
  noOperationDisconnectTime?: int32(name='NoOperationDisconnectTime', example='120', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='This parameter is required.', example='pg-53iyi2aar0nd6****', position='Query'),
  printerRedirect?: string(name='PrinterRedirect', example='off', position='Query'),
  qualityEnhancement?: string(name='QualityEnhancement', example='off', position='Query'),
  recordEventDuration?: int32(name='RecordEventDuration', example='10', position='Query'),
  recordEventFilePaths?: [ string ](name='RecordEventFilePaths', position='Query'),
  recordEventRegisters?: [ string ](name='RecordEventRegisters', position='Query'),
  recordEvents?: [ string ](name='RecordEvents', position='Query'),
  recording?: string(name='Recording', example='off', position='Query'),
  recordingAudio?: string(name='RecordingAudio', example='on', position='Query'),
  recordingDuration?: int32(name='RecordingDuration', example='10', position='Query'),
  recordingEndTime?: string(name='RecordingEndTime', example='08:59:00', position='Query'),
  recordingExpires?: int32(name='RecordingExpires', example='15', position='Query'),
  recordingFps?: string(name='RecordingFps', example='5', position='Query'),
  recordingStartTime?: string(name='RecordingStartTime', example='08:00:00', position='Query'),
  recordingUserNotify?: string(name='RecordingUserNotify', example='off', position='Query'),
  recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  remoteCoordinate?: string(name='RemoteCoordinate', example='fullControl', position='Query'),
  resetDesktop?: string(name='ResetDesktop', example='off', position='Query'),
  resolutionHeight?: int32(name='ResolutionHeight', example='1280', position='Query'),
  resolutionModel?: string(name='ResolutionModel', example='adaptive', position='Query'),
  resolutionWidth?: int32(name='ResolutionWidth', example='720', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
  revokeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
    }
  ](name='RevokeAccessPolicyRule', position='Query'),
  revokeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', example='47.100.XX.XX/16'),
      description?: string(name='Description', example='test'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      policy?: string(name='Policy', example='accept'),
      portRange?: string(name='PortRange', example='22/22'),
      priority?: string(name='Priority', example='1'),
      type?: string(name='Type', example='outflow'),
    }
  ](name='RevokeSecurityPolicyRule', position='Query'),
  scope?: string(name='Scope', example='GLOBAL', position='Query'),
  scopeValue?: [ string ](name='ScopeValue', position='Query'),
  sessionMaxRateKbps?: int32(name='SessionMaxRateKbps', example='2000', position='Query'),
  smoothEnhancement?: string(name='SmoothEnhancement', example='off', position='Query'),
  statusMonitor?: string(name='StatusMonitor', example='off', position='Query'),
  streamingMode?: string(name='StreamingMode', example='smooth', position='Query'),
  targetFps?: int32(name='TargetFps', example='30', position='Query'),
  taskbar?: string(name='Taskbar', example='off', position='Query'),
  usbRedirect?: string(name='UsbRedirect', example='off', position='Query'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description'),
      productId?: string(name='ProductId', example='08**'),
      usbRedirectType?: string(name='UsbRedirectType', example='1'),
      usbRuleType?: string(name='UsbRuleType', example='1'),
      vendorId?: string(name='VendorId', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', position='Query'),
  videoEncAvgKbps?: int32(name='VideoEncAvgKbps', example='2000', position='Query'),
  videoEncMaxQP?: int32(name='VideoEncMaxQP', example='30', position='Query'),
  videoEncMinQP?: int32(name='VideoEncMinQP', example='30', position='Query'),
  videoEncPeakKbps?: int32(name='VideoEncPeakKbps', example='2000', position='Query'),
  videoEncPolicy?: string(name='VideoEncPolicy', example='qualityFirst', position='Query'),
  videoRedirect?: string(name='VideoRedirect', example='on', position='Query'),
  visualQuality?: string(name='VisualQuality', example='low', position='Query'),
  watermark?: string(name='Watermark', example='off', position='Query'),
  watermarkAntiCam?: string(name='WatermarkAntiCam', example='off', position='Query'),
  watermarkColor?: int32(name='WatermarkColor', example='0', position='Query'),
  watermarkColumnAmount?: int32(name='WatermarkColumnAmount', example='3', position='Query'),
  watermarkCustomText?: string(name='WatermarkCustomText', example='test', position='Query'),
  watermarkDegree?: double(name='WatermarkDegree', example='-10', position='Query'),
  watermarkFontSize?: int32(name='WatermarkFontSize', example='10', position='Query'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', example='plain', position='Query'),
  watermarkPower?: string(name='WatermarkPower', example='medium', position='Query'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', example='5', position='Query'),
  watermarkSecurity?: string(name='WatermarkSecurity', example='off', position='Query'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', example='10', position='Query'),
  watermarkType?: string(name='WatermarkType', example='EndUserId', position='Query'),
  wuyingKeeper?: string(name='WuyingKeeper', example='off', position='Query'),
  wyAssistant?: string(name='WyAssistant', example='on', position='Query'),
}

model ModifyCenterPolicyResponseBody = {
  requestId?: string(name='RequestId', example='5CED7F18-43B1-5035-BBB6-2538B***'),
}

model ModifyCenterPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCenterPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCenterPolicy  ModifyCenterPolicyRequest
  * @return ModifyCenterPolicyResponse
 */
async function modifyCenterPolicy(request: ModifyCenterPolicyRequest): ModifyCenterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCloudDriveGroupsRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.

This parameter is required.', example='cn-shanghai+cds-135515****', position='Query'),
  groupId?: [ string ](name='GroupId', description='The IDs of the teams.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The status of the team space. Valid values:

*   enabled
*   disabled

Default value: enabled.', example='disabled', position='Query'),
  totalSize?: long(name='TotalSize', description='The total capacity of the team space.', example='32212254720', minimum=1, position='Query'),
}

model ModifyCloudDriveGroupsResponseBody = {
  code?: string(name='Code', description='The returned results. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.', example='success'),
  data?: string(name='Data', description='The data information.', example='[]'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ModifyCloudDriveGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCloudDriveGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCloudDriveGroups  ModifyCloudDriveGroupsRequest
  * @return ModifyCloudDriveGroupsResponse
 */
async function modifyCloudDriveGroups(request: ModifyCloudDriveGroupsRequest): ModifyCloudDriveGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCloudDriveGroups', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCloudDrivePermissionRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.

This parameter is required.', example='cn-hangzhou+cds-60911*****', position='Query'),
  downloadEndUserIds?: [ string ](name='DownloadEndUserIds', description='The IDs of the users who have the download permissions.', position='Query'),
  downloadUploadEndUserIds?: [ string ](name='DownloadUploadEndUserIds', description='The IDs of the users who have the upload and download permissions.', position='Query'),
  noDownloadNoUploadEndUserIds?: [ string ](name='NoDownloadNoUploadEndUserIds', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyCloudDrivePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9197824D-AD4B-571F-94BB-C2E6D5855AB6'),
}

model ModifyCloudDrivePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCloudDrivePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCloudDrivePermission  ModifyCloudDrivePermissionRequest
  * @return ModifyCloudDrivePermissionResponse
 */
async function modifyCloudDrivePermission(request: ModifyCloudDrivePermissionRequest): ModifyCloudDrivePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCloudDrivePermission', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCloudDriveUsersRequest {
  cdsId: string(name='CdsId', description='This parameter is required.', example='cn-hangzhou+cds-596198****', position='Query'),
  endUserId: [ string ](name='EndUserId', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The status of Cloud Drive Service users.

Valid values:

*   disabled

    <!-- -->

    :

    <!-- -->

    unavailable

    <!-- -->

*   enabled

    <!-- -->

    :

    <!-- -->

    available

    <!-- -->', example='enabled', position='Query'),
  userMaxSize?: long(name='UserMaxSize', description='The maximum storage space of a user. Unit: bytes.', example='1024', position='Query'),
}

model ModifyCloudDriveUsersResponseBody = {
  requestId?: string(name='RequestId', example='D2E005C4-8CA3-5F1D-9917-E75BE3BF****'),
}

model ModifyCloudDriveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCloudDriveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCloudDriveUsers  ModifyCloudDriveUsersRequest
  * @return ModifyCloudDriveUsersResponse
 */
async function modifyCloudDriveUsers(request: ModifyCloudDriveUsersRequest): ModifyCloudDriveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCloudDriveUsers', 'POST', '/', 'json', false, 'json', request);
}

model ModifyConfigGroupRequest {
  description?: string(name='Description', description='The description of the configuration group.', example='ScheduledTask', maxLength=500, position='Query'),
  groupId: string(name='GroupId', description='The ID of the configuration group.

This parameter is required.', example='cg-i1ruuudp92qpj****', position='Query'),
  name?: string(name='Name', description='The name of the configuration group.', example='ScheduledTask', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
}

model ModifyConfigGroupResponseBody = {
  groupId?: string(name='GroupId', description='The ID of the configuration group.', example='cg-i1ruuudp92qpj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyConfigGroup  ModifyConfigGroupRequest
  * @return ModifyConfigGroupResponse
 */
async function modifyConfigGroup(request: ModifyConfigGroupRequest): ModifyConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustomizedListHeadersRequest {
  headers?: [ 
    {
      displayType?: string(name='DisplayType', description='The display type of the header.

> For the desktop_id_name and office_site_id_name head keys, set the value of this parameter to required. For other header keys, set the value of this parameter to display or hide based on your requirements.', example='display'),
      headerKey?: string(name='HeaderKey', description='The key of the header.

> All header keys of the list must be specified.

Valid values:

*   desktop_id_name: the IDs and names of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   system_data_disk: the system disks and data disks of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   office_site_type: the office network types of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   create_time: the time when the cloud computers are created.

    <!-- -->

    <!-- -->

    <!-- -->

*   ip: the IP addresses of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   spec_system_protocol: the instance types, OSs, and protocol types of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   monitor: the monitoring information of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   assigned_users: the number of end users that are assigned to the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   encryption: indicates whether the cloud computers are encrypted.

    <!-- -->

    <!-- -->

    <!-- -->

*   office_site_id_name: the IDs and names of the office networks.

    <!-- -->

    <!-- -->

    <!-- -->

*   pay_type: the billing methods of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   tag: the tags that are attached to the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   hostname: the hostnames of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   status: the statuses of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   current_user: the current end users of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->', example='pay_type'),
    }
  ](name='Headers', description='The headers.', position='Query'),
  listType?: string(name='ListType', description='The type of the list.

Valid values:

*   desktop: cloud computer

    <!-- -->

    <!-- -->

    <!-- -->', example='desktop', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyCustomizedListHeadersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyCustomizedListHeadersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustomizedListHeadersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCustomizedListHeaders  ModifyCustomizedListHeadersRequest
  * @return ModifyCustomizedListHeadersResponse
 */
async function modifyCustomizedListHeaders(request: ModifyCustomizedListHeadersRequest): ModifyCustomizedListHeadersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustomizedListHeaders', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment if you specify subscription as the new billing method for the cloud desktop.', example='false', position='Query'),
  chargeType?: string(name='ChargeType', description='The new billing method that you want to apply.

Valid values:

*   PostPaid: changes the billing method from subscription to pay-as-you-go.

    <!-- -->

    <!-- -->

    <!-- -->

*   PrePaid: changes the billing method from pay-as-you-go to subscription.

    <!-- -->

    <!-- -->

    <!-- -->', example='PrePaid', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 20 IDs.

This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the cloud computers if you set the ChargeType parameter to PrePaid. The unit is specified by the `PeriodUnit` parameter. This parameter is valid only when the `ChargeType` parameter is set to `PrePaid`. In this case, you must specify this parameter.

*   If the `PeriodUnit` parameter is set to `Week`, set the Period parameter to 1.
*   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
*   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration if you specify subscription as the new billing method for the cloud desktop.', example='Month', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the promotional activity.', example='500038360030606', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  useDuration?: int32(name='UseDuration', description='>  This parameter is in invitational preview and not publicly available.', example='internal only', position='Query'),
}

model ModifyDesktopChargeTypeResponseBody = {
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='123456789'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopChargeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopChargeTypeResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you fully understand the billing methods of cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
  * *   Before you call this operation, make sure that the cloud computers whose billing method you want to change are in the Running or Stopped state and you have no overdue payments in your Alibaba Cloud account.
  * *   After the order payment is completed, the system starts to change the billing method of the cloud computers. During the change, you cannot perform operations, such as starting or stopping the cloud computers, and changing configurations of the cloud computers.
  * @param request  the request parameters of ModifyDesktopChargeType  ModifyDesktopChargeTypeRequest
  * @return ModifyDesktopChargeTypeResponse
 */
async function modifyDesktopChargeType(request: ModifyDesktopChargeTypeRequest): ModifyDesktopChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopChargeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopGroupRequest {
  allowAutoSetup?: int32(name='AllowAutoSetup', description='Specifies whether cloud computers can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`.

Valid values:

*   0: false
*   1: true', example='1', minimum=0, maximum=1, position='Query'),
  allowBufferCount?: int32(name='AllowBufferCount', description='The number of cloud computers that can be reserved in the pay-as-you-go cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PostPaid`. Valid values:

*   0: does not allow the system to reserve cloud computers.
*   N: allows the system to reserve N cloud computers (1≤ N ≤ 100).

>  If you set this parameter to 0, the system must create and start cloud computers and then assign the cloud computers to end users when the end users request cloud computers. This process is time-consuming. To improve user experience, we recommend that you reserve a specific number of cloud computers.', example='1', minimum=0, maximum=1000, position='Query'),
  bindAmount?: long(name='BindAmount', description='The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.

>  This parameter is unavailable.', example='1', position='Query'),
  buyDesktopsCount?: int32(name='BuyDesktopsCount', description='*   This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
*   For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.', example='5', position='Query'),
  classify?: string(name='Classify', description='The role that uses the cloud computer pool.

>  This parameter is unavailable.

Valid values:

*   teacher

    <!-- -->

    <!-- -->

    <!-- -->

*   student

    <!-- -->

    <!-- -->

    <!-- -->', example='teacher', position='Query'),
  comments?: string(name='Comments', description='The remarks.', example='test', position='Query'),
  connectDuration?: long(name='ConnectDuration', description='The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds. Valid values: 900000 to 345600000. That is, the session can be connected for 15 to 5,760 minutes (4 days).', example='600000', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer pool.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopGroupName?: string(name='DesktopGroupName', description='The name of the cloud computer pool.', example='desktopGroupName1', position='Query'),
  disableSessionConfig?: boolean(name='DisableSessionConfig', description='Specifies whether to disable session management.', example='true', position='Query'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the File Storage NAS (NAS) file system for the user data roaming feature.

>  This parameter is unavailable.', example='04f314****', position='Query'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', description='After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds. Valid values: 360000 to 3600000 (6 minutes to 60 minutes)

End users can receive a prompt to save data before sessions are disconnected. The system sends the prompt 30 seconds before the specified period of time is reached. To prevent data loss, end users must save the data of the sessions.

>  This parameter is suitable only for cloud computers whose image version is v1.0.2 or later.', example='120000', position='Query'),
  imageId?: string(name='ImageId', description='The IDs of the images.', example='desktopimage-windows-server-2016-64-ch', position='Query'),
  keepDuration?: long(name='KeepDuration', description='The retention period of a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5,760 minutes (4 days) after it is disconnected. If you set this parameter to 0, the session is permanently retained after it is disconnected.

When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.', example='1000', position='Query'),
  loadPolicy?: long(name='LoadPolicy', description='The load balancing policy of the multi-session cloud computer pool.

>  This parameter is unavailable.

Valid values:

*   0: depth-first
*   1: breadth-first', example='0', position='Query'),
  maxDesktopsCount?: int32(name='MaxDesktopsCount', description='The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool. Valid values: 0 to 500.', example='10', minimum=0, maximum=1000, position='Query'),
  minDesktopsCount?: int32(name='MinDesktopsCount', description='The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.', example='1', minimum=0, maximum=500, position='Query'),
  ownBundleId?: string(name='OwnBundleId', description='The ID of the cloud computer template.', example='b-7t275tpgjueeu****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the security policy.', example='pg-53iyi2aar0nd6****', position='Query'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of policy groups.', position='Query'),
  profileFollowSwitch?: boolean(name='ProfileFollowSwitch', description='Specifies whether to enable user data roaming.

>  This parameter is unavailable.', example='false', position='Query'),
  ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions IS calculated by using the following formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`

If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.

>  This parameter is unavailable.', example='0.5', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resetType?: long(name='ResetType', description='The disk reset type of cloud computers.

Valid values:

*   0: does not reset disks.

*   1: resets only the system disks.

*   2: resets only the user disks.

*   3: resets the system disks and user disks.', example='0', position='Query'),
  scaleStrategyId?: string(name='ScaleStrategyId', description='The ID of the scaling policy group.

>  This parameter is unavailable.', example='s-kakowkdl****', position='Query'),
  stopDuration?: long(name='StopDuration', description='The period of time before the idle cloud computer enters the Stopped state. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.', example='180000', position='Query'),
}

model ModifyDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopGroupResponseBody(name='body'),
}

/**
  * @description After a cloud computer pool is created, the system creates a specific number of cloud computers in the pool based on the auto scaling policy and user connections. Cloud computers are created by using the same cloud computer template and security policy. You can modify the configurations of the pool, including the pool name, cloud computer template, and policy, in different business scenarios.
  * @param request  the request parameters of ModifyDesktopGroup  ModifyDesktopGroupRequest
  * @return ModifyDesktopGroupResponse
 */
async function modifyDesktopGroup(request: ModifyDesktopGroupRequest): ModifyDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopHostNameRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  newHostName: string(name='NewHostName', description='The new hostname of the cloud computer. The hostname must meet the following requirements:

*   The hostname must be 2 to 15 characters in length.
*   The hostname can contain only letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.

This parameter is required.', example='NewName', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyDesktopHostNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopHostNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopHostNameResponseBody(name='body'),
}

/**
  * @description The Windows cloud computer whose hostname you want to modify must be in an AD office network. After the hostname is modified, the cloud computer is re-created.
  * @param request  the request parameters of ModifyDesktopHostName  ModifyDesktopHostNameRequest
  * @return ModifyDesktopHostNameResponse
 */
async function modifyDesktopHostName(request: ModifyDesktopHostNameRequest): ModifyDesktopHostNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopHostName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopNameRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  newDesktopName: string(name='NewDesktopName', description='The new name of the cloud computer. The name of the cloud computer must meet the following requirements:

*   The name must be 1 to 64 characters in length.
*   The name must start with a letter but cannot start with `http://` or `https://`.
*   The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).

This parameter is required.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyDesktopNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesktopName  ModifyDesktopNameRequest
  * @return ModifyDesktopNameResponse
 */
async function modifyDesktopName(request: ModifyDesktopNameRequest): ModifyDesktopNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopOversoldGroupRequest {
  concurrenceCount?: int32(name='ConcurrenceCount', position='Query'),
  description?: string(name='Description', position='Query'),
  idleDisconnectDuration?: long(name='IdleDisconnectDuration', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  keepDuration?: int32(name='KeepDuration', position='Query'),
  name?: string(name='Name', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  oversoldUserCount?: int32(name='OversoldUserCount', position='Query'),
  oversoldWarn?: int32(name='OversoldWarn', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', position='Query'),
  stopDuration?: int32(name='StopDuration', position='Query'),
}

model ModifyDesktopOversoldGroupResponseBody = {
  data?: {
    oversoldGroupId?: string(name='OversoldGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesktopOversoldGroup  ModifyDesktopOversoldGroupRequest
  * @return ModifyDesktopOversoldGroupResponse
 */
async function modifyDesktopOversoldGroup(request: ModifyDesktopOversoldGroupRequest): ModifyDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopOversoldGroupSaleRequest {
  concurrenceCount?: int32(name='ConcurrenceCount', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  oversoldUserCount?: int32(name='OversoldUserCount', position='Query'),
}

model ModifyDesktopOversoldGroupSaleResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
    oversoldGroupId?: string(name='OversoldGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopOversoldGroupSaleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopOversoldGroupSaleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesktopOversoldGroupSale  ModifyDesktopOversoldGroupSaleRequest
  * @return ModifyDesktopOversoldGroupSaleResponse
 */
async function modifyDesktopOversoldGroupSale(request: ModifyDesktopOversoldGroupSaleRequest): ModifyDesktopOversoldGroupSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopOversoldGroupSale', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopOversoldUserGroupRequest {
  imageId?: string(name='ImageId', position='Query'),
  name?: string(name='Name', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', position='Query'),
  userGroupId?: string(name='UserGroupId', position='Query'),
}

model ModifyDesktopOversoldUserGroupResponseBody = {
  data?: {
    userGroupId?: string(name='UserGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyDesktopOversoldUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopOversoldUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesktopOversoldUserGroup  ModifyDesktopOversoldUserGroupRequest
  * @return ModifyDesktopOversoldUserGroupResponse
 */
async function modifyDesktopOversoldUserGroup(request: ModifyDesktopOversoldUserGroupRequest): ModifyDesktopOversoldUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopOversoldUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the auto-payment feature.

Default value: true. Valid values:

*   true: enables the auto-payment feature.

    <!-- -->

    <!-- -->

    Make sure that you have sufficient balance in your Alibaba Cloud account. Otherwise, an exception occurs on your order.

    <!-- -->

*   false: disables the auto-payment feature. In this case, an order is generated, and no payment is automatically made.

    <!-- -->

    <!-- -->

    You can log on to the Elastic Desktop Service console and complete the payment based on the order ID on the Orders page.

    <!-- -->', example='false', position='Query'),
  desktopId?: string(name='DesktopId', description='The ID of a cloud computer.', example='ecd-4543qyik164a4****', position='Query'),
  desktopType: string(name='DesktopType', description='The destination instance type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.

This parameter is required.', example='eds.general.2c8g', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the promotional activity.', example='500033080110596', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceSpecs?: [ 
    {
      desktopId?: string(name='DesktopId', description='The ID of the cloud computer.', example='ecd-4543qyik164a4****'),
      rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The target size of the system disk. Valid values: 80-500 GiB. The value must be a multiple of 10.', example='80'),
      userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The target size of the data disk. Valid values: 80-500 GiB. The value must be a multiple of 10.', example='20'),
    }
  ](name='ResourceSpecs', description='The array of resource specification templates.', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type.

> This parameter is optional for non-subscribed cloud computers.', example='DesktopMonthPackage', position='Query'),
  rootDiskSizeGib?: int32(name='RootDiskSizeGib', description='The size of the new system disk. Unit: GiB. Valid values: 80 to 500 GiB. The value must be a multiple of 10.', example='80', minimum=0, maximum=32768, position='Query'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The performance level (PL) of the data disk. Default value: PL0.

Valid values:

*   PL1

    <!-- -->

    <!-- -->

    <!-- -->

*   PL0

    <!-- -->

    <!-- -->

    <!-- -->

*   PL3

    <!-- -->

    <!-- -->

    <!-- -->

*   PL2

    <!-- -->

    <!-- -->

    <!-- -->', example='PL0', position='Query'),
  userDiskSizeGib?: int32(name='UserDiskSizeGib', description='The destination data disk size. Unit: GiB.

*   The data disk size of a non-graphical cloud computer ranges from 20 to 1020 GiB and must be a multiple of 10.
*   The data disk size of a graphical cloud computer ranges from 40 to 1020 GiB and must be a multiple of 10.', example='100', minimum=0, maximum=65536, position='Query'),
}

model ModifyDesktopSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='123456789'),
  orderIds?: [ long ](name='OrderIds', description='The array of order IDs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopSpecResponseBody(name='body'),
}

/**
  * @description Changing the configurations of a cloud computer includes changing the instance type of the cloud computer and scaling up the disks of the cloud computer.
  * *   Before you change the configurations of a cloud computer, you must understand the instance types and disk sizes supported by cloud computers. For more information, see [Cloud computer types](https://help.aliyun.com/document_detail/188609.html). You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
  * *   You must change at least one of the following configurations: instance type, system disk size, and data disk size of the cloud computer. You must specify at least one of the following parameters: `DesktopType`, `RootDiskSizeGib`, and `UserDiskSizeGib`. Take note of the following items:
  *     *   The instance type of a cloud computer includes the configurations of vCPUs, memory, and GPUs. You can only change an instance type to another. You cannot change only one of the configurations.
  *     *   You cannot change a cloud computer between the General Office type and the non-General Office type. You cannot yet change a cloud computer between the Graphics type and the non-Graphics type.
  *     *   The system disk and data disks of a cloud computer can only be scaled up and cannot be scaled down.
  *     *   If the billing method of the cloud computer is subscription, the system calculates the price difference based on the configuration difference between the original cloud computer and the new cloud computer. You must make up for the price difference or receive a refund for the price difference.
  *     *   We recommend that you do not change the configurations of a cloud computer twice within 5 minutes.
  *     *   When you change the configurations of a cloud computer, the cloud computer must be in the Stopped state.
  * *   After you change the configurations of a cloud computer, the personal data on the cloud computer is not affected.
  * @param request  the request parameters of ModifyDesktopSpec  ModifyDesktopSpecRequest
  * @return ModifyDesktopSpecResponse
 */
async function modifyDesktopSpec(request: ModifyDesktopSpecRequest): ModifyDesktopSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopTimerRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers.

This parameter is required.', position='Query'),
  desktopTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting', description='Specifies whether to allow end users to configure the scheduled task.', example='true'),
      cronExpression?: string(name='CronExpression', description='The cron expression of the schedule.

> The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7', example='0 0 16 ? * 1,2,3,4,5,6,7'),
      enforce?: boolean(name='Enforce', description='Specifies whether to forcibly execute the scheduled task.

Valid values:

*   true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   false: does not forcibly execute the scheduled task.

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      interval?: int32(name='Interval', description='The interval at which the scheduled task is executed. Unit: minutes.', example='10'),
      operationType?: string(name='OperationType', description='The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.

Valid values:

*   Hibernate: hibernates the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   Shutdown: stops the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->', example='Shutdown'),
      resetType?: string(name='ResetType', description='The reset type of the cloud computers.

Valid values:

*   RESET_TYPE_SYSTE: resets the system disk.

    <!-- -->

    <!-- -->

    <!-- -->

*   RESET_TYPE_BOTH: resets data and user disks.

    <!-- -->

    <!-- -->

    <!-- -->', example='RESET_TYPE_SYSTEM'),
      timerType?: string(name='TimerType', description='The type of the scheduled task.

Valid values:

*   NoOperationDisconnect: Disconnects the cloud computers without performing operations on the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   LogoutShutdown: Stops the cloud computers when end users log out Alibaba Cloud Workspace clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   NoConnect: Disconnects the cloud computers when end users perform one of the actions that is specified by the OperationType parameter.

    <!-- -->

    <!-- -->

    <!-- -->

*   TimerBoot: Starts the cloud computers on schedule.

    <!-- -->

    <!-- -->

    <!-- -->

*   TimerReset: Resets the cloud computers on schedule.

    <!-- -->

    <!-- -->

    <!-- -->

*   LoginAutoConnect: automatically connects to the cloud computers when end users log on to Alibaba Cloud Workspace clients.

    <!-- -->

    <!-- -->

    <!-- -->

*   NoOperationShutdown: Stops the cloud computers without performing operations on the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   TimerShutdown: Stops the cloud computers on schedule.

    <!-- -->

    <!-- -->

    <!-- -->

*   NoOperationReboot: Restarts the cloud computers without performing operations on the cloud computers.

    <!-- -->

    <!-- -->

    <!-- -->

*   TimerReboot: Restarts the cloud computers on schedule.

    <!-- -->

    <!-- -->

    <!-- -->', example='TimerBoot'),
    }
  ](name='DesktopTimers', description='The details of the scheduled task on cloud computers.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  useDesktopTimers?: boolean(name='UseDesktopTimers', description='Specifies whether to use the `DesktopTimers`** parameter. Set the value to `true`**.', example='true', position='Query'),
}

model ModifyDesktopTimerResponseBody = {
  desktopIds?: [ string ](name='DesktopIds', description='The IDs of the cloud computers for which you successfully configure the scheduled task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4638719F-3CAB-5704-BD54-55617BFF****'),
}

model ModifyDesktopTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDesktopTimer  ModifyDesktopTimerRequest
  * @return ModifyDesktopTimerResponse
 */
async function modifyDesktopTimer(request: ModifyDesktopTimerRequest): ModifyDesktopTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopTimer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDesktopsPolicyGroupRequest {
  desktopId: [ string ](name='DesktopId', description='The cloud computer IDs. You can specify one or more cloud computers IDs. The value is a JSON array.

This parameter is required.', example='ecd-ia2zw38bi6cm7****', position='Query'),
  policyGroupId?: string(name='PolicyGroupId', description='The ID of the cloud computer policy that you want to associate with cloud computers.

>  If the `PolicyGroupIds` parameter is used, ignore the current parameter.', example='pg-gx2x1dhsmthe9****', position='Query'),
  policyGroupIds?: [ string ](name='PolicyGroupIds', description='The IDs of the cloud computer policies that you want to associate with cloud computers.

>  You can specify up to one cloud computer policy that takes effect globally, and up to four cloud computer policies that apply to specific IP addresses. If you specify more than one cloud computer policy that takes effect globally, only the policy first associate with the cloud computer can take effect.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyDesktopsPolicyGroupResponseBody = {
  modifyResults?: [ 
    {
      code?: string(name='Code', description='The returned message. If the request was successful, `success` is returned. If the request failed, an error message is returned.', example='success'),
      desktopId?: string(name='DesktopId', description='The cloud computer ID.', example='ecd-7w78ozhjcwa3u****'),
      message?: string(name='Message', description='The error message returned if the request failed. This parameter is not returned if the value of Code is success.``', example='The specified param DesktopId ecd-ia2zw38bi6cm7**** is not found.'),
    }
  ](name='ModifyResults', description='The request results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyDesktopsPolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDesktopsPolicyGroupResponseBody(name='body'),
}

/**
  * @description The cloud computers for which you want to change their policies must be in the Running state.
  * @param request  the request parameters of ModifyDesktopsPolicyGroup  ModifyDesktopsPolicyGroupRequest
  * @return ModifyDesktopsPolicyGroupResponse
 */
async function modifyDesktopsPolicyGroup(request: ModifyDesktopsPolicyGroupRequest): ModifyDesktopsPolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDesktopsPolicyGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskSpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the automatic payment feature.

*   If you set the value to `true`, ensure your account has sufficient balance to avoid generating abnormal orders.
*   If you set the value to `false`, go to the **Expenses and Costs** page to complete the payment based on the order number.

Valid values:

*   true (default): enables the automatic payment feature.
*   false: generates the order and manually complete the payment.', example='false', position='Query'),
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-2yjhqxo1monxxxxxx', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the sales promotion activity. You can call the DescribePrice operation to obtain the IDs of matching sales promotion activities.', example='youhuiquan_promotion_option_id_for_blank', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the list of regions where Elastic Desktop Service (EDS) Enterprise is available.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resellerOwnerUid?: long(name='ResellerOwnerUid', position='Query'),
  rootDiskPerformanceLevel?: string(name='RootDiskPerformanceLevel', description='The PL of the system disk. Only Enterprise Graphics or High Frequency cloud computers support disk PL adjustments.

Valid values:

*   PL1
*   PL0
*   PL3
*   PL2', example='PL1', position='Query'),
  userDiskPerformanceLevel?: string(name='UserDiskPerformanceLevel', description='The PL of the data disk. Only Enterprise Graphics or High Frequency cloud computers support disk PL adjustments.

Valid values:

*   PL1
*   PL0
*   PL3
*   PL2', example='PL1', position='Query'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order. You can obtain the ID of an order from the [Expenses and Costs > Orders](https://usercenter2-intl.aliyun.com/order/list) page.', example='219861020660568'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F89BBB13-8B3B-5C8A-A700-EEFDC17B8227'),
}

model ModifyDiskSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskSpecResponseBody(name='body'),
}

/**
  * @description When creating a cloud computer in Elastic Desktop Service (EDS) Enterprise, you can use a template to define specifications that align with your business needs. By default, Enterprise Graphics or High Frequency cloud computers utilize Enterprise SSDs (ESSDs). You can customize the disk capacity and performance level (PL) of these ESSDs, and adjust the PL for both system and data disks as needed.
  * >  Only Enterprise Graphics or High Frequency cloud computers support disk PL adjustments.
  * @param request  the request parameters of ModifyDiskSpec  ModifyDiskSpecRequest
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEntitlementRequest {
  desktopId: string(name='DesktopId', description='The ID of the cloud computer.

This parameter is required.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The username IDs. End users specified by this parameter become the end users of the cloud computer, and the original end users of the cloud computer are removed. You can specify 1 to 100 IDs.', example='alice', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyEntitlementResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyEntitlementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEntitlementResponseBody(name='body'),
}

/**
  * @description *   The cloud computer must be in the Running state.
  * *   After you call this operation, the assignment result is immediately returned. You can call the [DescribeDesktops](https://help.aliyun.com/document_detail/436815.html) operation to query the assignment of the cloud computer. The value of the `ManagementFlags` response parameter indicates the assignment of the cloud computer. A value of `ASSIGNING` indicates that the cloud computer is being assigned, and other values indicate that the cloud computer is assigned.
  * *   We recommend that you check the assignment every 2 to 5 seconds and perform the checks within 50 seconds. Typically, 1 to 5 seconds are required to complete the assignment.
  * @param request  the request parameters of ModifyEntitlement  ModifyEntitlementRequest
  * @return ModifyEntitlementResponse
 */
async function modifyEntitlement(request: ModifyEntitlementRequest): ModifyEntitlementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEntitlement', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageAttributeRequest {
  description?: string(name='Description', description='The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription', position='Query'),
  imageId: string(name='ImageId', description='The image ID.

This parameter is required.', example='m-2g65ljy3ynrdq****', position='Query'),
  name?: string(name='Name', description='The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testName', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImageAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyImageAttributeResponseBody(name='body'),
}

/**
  * @description You can call this operation to modify the attributes of only custom images that are in the Available state.
  * @param request  the request parameters of ModifyImageAttribute  ModifyImageAttributeRequest
  * @return ModifyImageAttributeResponse
 */
async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImagePermissionRequest {
  addAccount?: [ long ](name='AddAccount', description='The IDs of Alibaba Cloud accounts to which to share the image that will be created based on the image template. You can specify up to 20 account IDs.', position='Query'),
  imageId: string(name='ImageId', description='The IDs of the images.

This parameter is required.', example='m-gx2x1dhsmusr2****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  removeAccount?: [ long ](name='RemoveAccount', description='The ID of Alibaba Cloud account N from which you want to unshare the custom image. Valid values of N: 1 to 10. If the value of N is greater than 10, this parameter is ignored.', position='Query'),
}

model ModifyImagePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyImagePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyImagePermissionResponseBody(name='body'),
}

/**
  * @description ### [](#)Security of shared images
  * Elastic Desktop Service cannot guarantee the integrity and security of shared images. When you use a shared image, you must make sure that the image comes from a trusted sharer or account, and you are legally responsible for using the shared image.
  * ### [](#)Quota and billing
  * *   A shared image does not count against the image quotas of principals to which the image is shared.
  * *   After a principal uses a shared image to create a cloud computer, the sharer is not charged for the shared image.
  * *   You are not charged for shared images.
  * ### [](#)Supported sharing behaviors
  * *   You can share custom images with other Alibaba Cloud accounts.
  * *   You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
  * ### [](#)Unsupported sharing behaviors
  * *   You cannot share images that are shared by other Alibaba Cloud accounts.
  * *   You cannot share encrypted images.
  * *   You cannot share images across regions. If you want to share an image across regions, you must copy the image to the destination region and then share the image. For more information, see [CopyImage](https://help.aliyun.com/document_detail/436978.html).
  * @param request  the request parameters of ModifyImagePermission  ModifyImagePermissionRequest
  * @return ModifyImagePermissionResponse
 */
async function modifyImagePermission(request: ModifyImagePermissionRequest): ModifyImagePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImagePermission', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNASDefaultMountTargetRequest {
  fileSystemId: string(name='FileSystemId', description='The ID of the NAS file system.

This parameter is required.', example='04f314****', position='Query'),
  mountTargetDomain: string(name='MountTargetDomain', description='The domain name of the mount target.

This parameter is required.', example='0bf744****-xo***.cn-hangzhou.nas.aliyuncs.com', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNASDefaultMountTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * @description When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is deleted by misoperation, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](https://help.aliyun.com/document_detail/62621.html) operation to create a mount target.
  * @param request  the request parameters of ModifyNASDefaultMountTarget  ModifyNASDefaultMountTargetRequest
  * @return ModifyNASDefaultMountTargetResponse
 */
async function modifyNASDefaultMountTarget(request: ModifyNASDefaultMountTargetRequest): ModifyNASDefaultMountTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNASDefaultMountTarget', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkPackageBandwidthRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the automatic payment feature.

Valid values:

*   true (default): enables the auto-payment feature.

    <!-- -->

    <!-- -->

    Make sure that your account has sufficient balance. Otherwise, no order is generated.

    <!-- -->

*   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.

    <!-- -->

    <!-- -->

    To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.

    <!-- -->', example='true', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.

*   Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
*   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
*   Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.

This parameter is required.', example='10', minimum=2, maximum=1000, position='Query'),
  networkPackageId: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan.

This parameter is required.', example='np-cxj99qb8d34vo****', position='Query'),
  promotionId?: string(name='PromotionId', description='The promotion ID.', example='500033080110596', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyNetworkPackageBandwidthResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='214552063030752'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkPackageBandwidthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNetworkPackageBandwidth  ModifyNetworkPackageBandwidthRequest
  * @return ModifyNetworkPackageBandwidthResponse
 */
async function modifyNetworkPackageBandwidth(request: ModifyNetworkPackageBandwidthRequest): ModifyNetworkPackageBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkPackageBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkPackageEnabledRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to restore the premium bandwidth plan of the cloud computer.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  networkPackageId: string(name='NetworkPackageId', description='The ID of the premium bandwidth plan.

This parameter is required.', example='np-cfedn7r2pe48g****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyNetworkPackageEnabledResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNetworkPackageEnabledResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkPackageEnabledResponseBody(name='body'),
}

/**
  * @description If you want to temporarily disable the Internet access of your cloud computer after the Internet access is enabled for your cloud computer, you can disable the premium bandwidth plan and restore it as needed.
  * @param request  the request parameters of ModifyNetworkPackageEnabled  ModifyNetworkPackageEnabledRequest
  * @return ModifyNetworkPackageEnabledResponse
 */
async function modifyNetworkPackageEnabled(request: ModifyNetworkPackageEnabledRequest): ModifyNetworkPackageEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkPackageEnabled', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOfficeSiteAttributeRequest {
  desktopAccessType?: string(name='DesktopAccessType', description='The method to connect to cloud computers from Alibaba Cloud Workspace clients.

>  VPC connection relies on the Alibaba Cloud PrivateLink service. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, the system automatically activates PrivateLink.

Valid values:

*   INTERNET (default): allows end users to connect to cloud computers over the Internet.
*   VPC: allows end users to connect to cloud computers over VPCs.
*   ANY: allows end users to connect to cloud computers over the Internet and VPCs. When end users connect to cloud computers from Elastic Desktop Service, you can choose a connection method based on your business requirements.', example='INTERNET', position='Query'),
  enableAdminAccess?: boolean(name='EnableAdminAccess', description='Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.

Valid values:

* true (default)
* false', example='false', position='Query'),
  needVerifyLoginRisk?: boolean(name='NeedVerifyLoginRisk', description='Specifies whether to enable two-factor verification when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when the end user uses a convenience user to log on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account of the convenience user. Then, the end user can log on to the client only when the verification code is correct.', example='false', position='Query'),
  needVerifyZeroDevice?: boolean(name='NeedVerifyZeroDevice', description='Specifies whether to enable device verification. This parameter is required only for convenience office networks. This parameter is left empty for enterprise Active Directory (AD) office networks.', example='false', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-882398****', position='Query'),
  officeSiteName?: string(name='OfficeSiteName', description='The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
This parameter is empty by default.', example='test', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyOfficeSiteAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOfficeSiteAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOfficeSiteAttribute  ModifyOfficeSiteAttributeRequest
  * @return ModifyOfficeSiteAttributeResponse
 */
async function modifyOfficeSiteAttribute(request: ModifyOfficeSiteAttributeRequest): ModifyOfficeSiteAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOfficeSiteAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOfficeSiteCrossDesktopAccessRequest {
  enableCrossDesktopAccess: boolean(name='EnableCrossDesktopAccess', description='Specifies whether to enable the communication between cloud computers in an office network. If you enable the communication between cloud computers in an office network, the cloud computers can access each other.

This parameter is required.', example='false', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-068266****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyOfficeSiteCrossDesktopAccessResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteCrossDesktopAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOfficeSiteCrossDesktopAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOfficeSiteCrossDesktopAccess  ModifyOfficeSiteCrossDesktopAccessRequest
  * @return ModifyOfficeSiteCrossDesktopAccessResponse
 */
async function modifyOfficeSiteCrossDesktopAccess(request: ModifyOfficeSiteCrossDesktopAccessRequest): ModifyOfficeSiteCrossDesktopAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOfficeSiteCrossDesktopAccess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOfficeSiteDnsInfoRequest {
  dnsAddress?: [ string ](name='DnsAddress', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='This parameter is required.', example='cn-hangzhou+dir-778418****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyOfficeSiteDnsInfoResponseBody = {
  requestId?: string(name='RequestId', example='F7E4322D-D679-5ACB-A909-490D2F0E****'),
}

model ModifyOfficeSiteDnsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOfficeSiteDnsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOfficeSiteDnsInfo  ModifyOfficeSiteDnsInfoRequest
  * @return ModifyOfficeSiteDnsInfoResponse
 */
async function modifyOfficeSiteDnsInfo(request: ModifyOfficeSiteDnsInfoRequest): ModifyOfficeSiteDnsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOfficeSiteDnsInfo', 'POST', '/', 'json', false, 'json', request);
}

model ModifyOfficeSiteMfaEnabledRequest {
  mfaEnabled: boolean(name='MfaEnabled', description='Specifies whether to enable MFA.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='true', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The office network ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyOfficeSiteMfaEnabledResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyOfficeSiteMfaEnabledResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyOfficeSiteMfaEnabledResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyOfficeSiteMfaEnabled  ModifyOfficeSiteMfaEnabledRequest
  * @return ModifyOfficeSiteMfaEnabledResponse
 */
async function modifyOfficeSiteMfaEnabled(request: ModifyOfficeSiteMfaEnabledRequest): ModifyOfficeSiteMfaEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyOfficeSiteMfaEnabled', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyGroupRequest {
  adminAccess?: string(name='AdminAccess', description='Specifies whether end users have the administrator permissions.

>  This parameter is in invitational preview for specific users and not available to the public.', example='deny', position='Query'),
  appContentProtection?: string(name='AppContentProtection', description='Specifies whether to enable the anti-screenshot feature.

Valid values:

*   off (default)
*   on', example='on', position='Query'),
  authorizeAccessPolicyRule?: [ 
    {
      cidrIp: string(name='CidrIp', description='The client CIDR block from which end users can connect to cloud computers. The value is an IPv4 CIDR block.

This parameter is required.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client IP address whitelist.', example='test'),
    }
  ](name='AuthorizeAccessPolicyRule', description='The client IP address whitelist.', position='Query'),
  authorizeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The object to which the security group rule applies. The value is an IPv4 CIDR block.', example='10.0.XX.XX/8'),
      description?: string(name='Description', description='The description of the security group rule.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule.

Valid values:

*   UDP: the User Datagram Protocol (UDP) protocol.
*   TCP: the Transmission Control Protocol (TCP) protocol.
*   ALL: all protocols.
*   GRE: the Generic Routing Encapsulation (GRE) protocol.
*   ICMP: the Internet Control Message Protocol (ICMP) for (IPv4)', example='tcp'),
      policy?: string(name='Policy', description='The authorization of the security group rule.

Valid values:

*   drop: denies all access requests. If no messages of access denied are returned, the requests timed out or failed.
*   accept: accepts all requests.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.

*   If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to ICMP, set the value to -1/-1.
*   If the IpProtocol parameter is set to GRE, set the value to -1/-1.
*   If the IpProtocol parameter is set to ALL, set the value to -1/-1.

For more information about the common ports applied in EDS, see [Common ports](https://help.aliyun.com/document_detail/40724.html).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority. Valid values: 1 to 60. Default value: 1', example='1'),
      type?: string(name='Type', description='The direction of the security group rule.

Valid values:

*   outflow: outbound
*   inflow: inbound', example='inflow'),
    }
  ](name='AuthorizeSecurityPolicyRule', description='The security group rules.', position='Query'),
  cameraRedirect?: string(name='CameraRedirect', description='Specifies whether to enable the webcam redirection feature.

Valid values:

*   off
*   on (default)', example='on', position='Query'),
  clientType?: [ 
    {
      clientType?: string(name='ClientType', description='The type of the Alibaba Cloud Workspace client.

>  If you do not specify the `ClientType` parameter, all types of the client are allowed by default.

Valid values:

*   html5: web client
*   android: Android client
*   windows: Windows client
*   ios: iOS client
*   macos: macOS client', example='windows'),
      status?: string(name='Status', description='Specifies whether to allow end users to use a specific type of the client to connect to cloud computers.

>  If you do not specify the `ClientType` parameter, all types of the client are allowed by default.

Valid values:

*   off
*   on', example='ON'),
    }
  ](name='ClientType', description='The logon method control rules to limit the type of the Alibaba Cloud Workspace client used by end users to connect to cloud computers.', position='Query'),
  clipboard?: string(name='Clipboard', description='The permissions on the clipboard.

Valid values:

*   read: specifies one-way transfer. You can copy files only from local devices to cloud computers.
*   readwrite: specifies two-way transfer You can copy files between local devices and cloud computers.
*   write: specifies one-way transfer. You can only copy files from cloud computers to local devices.
*   off: disables both one-way and two-way transfer. Files cannot be copied between local devices and cloud computers.', example='off', position='Query'),
  deviceRedirects?: [ 
    {
      deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   printer
*   scanner
*   camera
*   adb: the Android Debug Bridge (ADB) device', example='camera'),
      redirectType?: string(name='RedirectType', description='The redirection type.

Valid values:

*   deviceRedirect: device redirection
*   usbRedirect: USB redirection
*   off: redirection disabled', example='usbRedirect'),
    }
  ](name='DeviceRedirects', description='The device redirection rules.', position='Query'),
  deviceRules?: [ 
    {
      deviceName?: string(name='DeviceName', description='The device name.', example='sandisk'),
      devicePid?: string(name='DevicePid', description='The product ID (PID).', example='0x0781'),
      deviceType?: string(name='DeviceType', description='The peripheral type.

Valid values:

*   usbKey
*   other
*   graphicsTablet
*   printer
*   cardReader
*   scanner
*   storage
*   camera
*   adb
*   networkInterfaceCard: the NIC device', example='storage'),
      deviceVid?: string(name='DeviceVid', description='The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='0x55b1'),
      optCommand?: string(name='OptCommand', description='The link optimization command.', example='2:0'),
      redirectType?: string(name='RedirectType', description='The redirection type.

Valid values:

*   deviceRedirect: device redirection
*   usbRedirect: USB redirection
*   off: redirection disabled', example='usbRedirect'),
    }
  ](name='DeviceRules', description='The custom peripheral rules.', position='Query'),
  domainList?: string(name='DomainList', description='Specifies whether the access control for domain names is enabled. Domain names support wildcards (\\*). Separate multiple domain names with commas (,).

Valid values:

*   off
*   on', example='[black:],example1.com,example2.com', position='Query'),
  domainResolveRule?: [ 
    {
      description?: string(name='Description', description='The description of domain name resolution rule.', example='description policy'),
      domain?: string(name='Domain', description='The domain name.', example='*.igetget.com'),
      policy?: string(name='Policy', description='Specifies whether to allow the domain name resolution rule.

Valid values:

*   allow
*   block', example='block'),
    }
  ](name='DomainResolveRule', description='The details of the domain name resolution rules.', position='Query'),
  domainResolveRuleType?: string(name='DomainResolveRuleType', description='The type of the domain name resolution rule.

Valid values:

*   OFF
*   ON', example='OFF', position='Query'),
  endUserApplyAdminCoordinate?: string(name='EndUserApplyAdminCoordinate', description='Specifies whether to turn on the Contact Administrator for Help switch.

Valid values:

*   off
*   on', example='on', position='Query'),
  endUserGroupCoordinate?: string(name='EndUserGroupCoordinate', description='Specifies whether to turn on the User Stream Collaboration switch.

Valid values:

*   off
*   on', example='on', position='Query'),
  gpuAcceleration?: string(name='GpuAcceleration', description='Specifies whether to enable the Image Quality Control feature for Graphic-based cloud computers. If you have high requirements on the performance and user experience in scenarios such as professional design, we recommend that you enable this feature.

Valid values:

*   off
*   on', example='off', position='Query'),
  html5Access?: string(name='Html5Access', description='Specifies whether to allow web client access.

>  We recommend that you specify the ClientType-related parameters to control the Alibaba Cloud Workspace client type for cloud computer connection.``

Valid values:

*   off
*   on', example='off', position='Query'),
  html5FileTransfer?: string(name='Html5FileTransfer', description='The file transfer feature on the web client.

Valid values:

*   all: Files can be uploaded and downloaded between local computers and the web client.
*   download: Files on the web client can be downloaded to local computers.
*   upload: Files on local computers can be uploaded to the web client.
*   off (default): Files cannot be transferred between the web client and local computers.', example='off', position='Query'),
  internetCommunicationProtocol?: string(name='InternetCommunicationProtocol', description='The protocol for network communication.

Valid values:

*   TCP (default): TCP
*   BOTH: TCP and UDP', example='BOTH', position='Query'),
  localDrive?: string(name='LocalDrive', description='The permissions on local disk mapping.

Valid values:

*   read: read-only. Local disk mapping is available on cloud computers. However, you can only read (copy) local files but cannot modify the files.
*   readwrite: read and write. Local disk mapping is available on cloud computers. You can read (copy) and write (modify) local files.
*   off (default): no permissions. Local disk mapping is unavailable on cloud computers.', example='off', position='Query'),
  maxReconnectTime?: int32(name='MaxReconnectTime', description='The maximum retry period for reconnecting to cloud computers when the cloud computers are disconnected due to none-human reasons. Valid values: 30 to 7200. Unit: seconds.', example='120', position='Query'),
  name?: string(name='Name', description='The name of the cloud computer policy.', example='testPolicyGroupName', position='Query'),
  netRedirect?: string(name='NetRedirect', description='Specifies whether to enable network redirection.

>  This parameter is in invitational preview for specific users and not available to the public.

Valid values:

*   off (default)
*   on', example='on', position='Query'),
  policyGroupId: string(name='PolicyGroupId', description='The ID of the cloud computer policy.

This parameter is required.', example='pg-gx2x1dhsmthe9****', position='Query'),
  preemptLogin?: string(name='PreemptLogin', description='The cloud computer preemption feature.

>  To ensure user experience and data security, when a cloud computer is used by an end user, other end users cannot connect to the cloud computer. By default, this parameter is set to `off`, which cannot be modified.

Valid values:

*   off (default): Multiple end users cannot connect to the same cloud computer at the same time.', example='off', position='Query'),
  preemptLoginUser?: [ string ](name='PreemptLoginUser', description='The usernames that are allowed to connect to the cloud computer in use. You can specify up to five usernames.

>  To ensure user experience and data security, other end users cannot connect to the cloud computer that is used by an end user.', position='Query'),
  printerRedirection?: string(name='PrinterRedirection', description='The printer redirection feature.

Valid values:

*   off
*   on', example='off', position='Query'),
  recordContent?: string(name='RecordContent', description='Specifies whether to enable the custom screen recording feature.

Valid values:

*   off (default)
*   on', example='OFF', position='Query'),
  recordContentExpires?: long(name='RecordContentExpires', description='The duration in which the custom screen recording is valid. Default value: 30. Unit: days.', example='30', position='Query'),
  recording?: string(name='Recording', description='Specifies whether to enable the screen recording feature.

Valid values:

*   byaction_cmd_ft: enables the operation-triggered screen recording upon command execution and file transfer.
*   ALLTIME: enables the whole-process screen recording. That is, the recording starts when cloud computers are connected and ends when the cloud computers are disconnected.
*   session: enables the screen recording for session lifecycle listening.
*   PERIOD: enables the interval-based screen recording. You must specify an interval between the start time and end time of this type of recording.
*   byaction_commands: enables the operation-triggered screen recording upon command execution.
*   OFF: disables the screen recording feature.
*   byaction_file_transfer: enables the operation-triggered screen recording upon file transfer.', example='OFF', position='Query'),
  recordingAudio?: string(name='RecordingAudio', description='Specifies whether to record the audio files generated from cloud computers.

Valid values:

*   off: records only video files.
*   on: records video and audio files.', example='on', position='Query'),
  recordingDuration?: int32(name='RecordingDuration', description='The file length of the screen recording. Unit: minutes. Screen recording files are split based on the specified file length and uploaded to Object Storage Service (OSS) buckets. When a screen recording file reaches 300 MB in size, the system preferentially performs rolling update for the file.

Valid values:

*   10
*   20
*   30
*   60', example='15', position='Query'),
  recordingEndTime?: string(name='RecordingEndTime', description='The time when the screen recording stops. Specify the value in the HH:MM:SS format. The value is meaningful only when you set `Recording` to `PERIOD`.', example='08:59:00', position='Query'),
  recordingExpires?: long(name='RecordingExpires', description='The retention period of the screen recording file. Valid values: 1 to 180. Unit: days.', example='30', position='Query'),
  recordingFps?: long(name='RecordingFps', description='The frame rate of screen recording. Unit: fps.

Valid values:

*   2
*   5
*   10
*   15', example='5', position='Query'),
  recordingStartTime?: string(name='RecordingStartTime', description='The time when the screen recording starts. Specify the value in the HH:MM:SS format. The value is meaningful only when you set the `Recording` parameter to `PERIOD`.', example='08:00:00', position='Query'),
  recordingUserNotify?: string(name='RecordingUserNotify', description='Specifies whether to enable the screen recording notification feature after end users log on to the Alibaba Cloud Workspace client.

Valid values:

*   off
*   on', example='off', position='Query'),
  recordingUserNotifyMessage?: string(name='RecordingUserNotifyMessage', description='The notification content of screen recording. By default, this parameter is left empty.', example='Your desktop is being recorded.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  remoteCoordinate?: string(name='RemoteCoordinate', description='The permissions on keyboard and mouse control during remote assistance.

Valid values:

*   optionalControl: By default, you are not granted the permissions. You can apply for the permissions.
*   fullControl: You are granted the full permissions.
*   disableControl: You are not granted the permissions.', example='fullControl', position='Query'),
  revokeAccessPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The client CIDR block that you want to delete. After it is deleted, end users cannot connect to cloud computers from the CIDR block. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the client IP addresses that you want to delete from the whitelist.', example='test'),
    }
  ](name='RevokeAccessPolicyRule', description='The client IP addresses that you want to delete from the whitelist.', position='Query'),
  revokeSecurityPolicyRule?: [ 
    {
      cidrIp?: string(name='CidrIp', description='The object of the security group rule that you want to delete. The value is an IPv4 CIDR block.', example='47.100.XX.XX/16'),
      description?: string(name='Description', description='The description of the security group rule that you want to delete.', example='test'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type of the security group rule that you want to delete.

Valid values:

*   TCP
*   UDP
*   ALL
*   GRE
*   ICMP', example='tcp'),
      policy?: string(name='Policy', description='The authorization of the security group rule that you want to delete.

Valid values:

*   drop: denies all access requests. If no messages of access denied are returned, the requests timed out or failed.
*   accept (default): accepts all requests.', example='accept'),
      portRange?: string(name='PortRange', description='The port range of the security group rule that you want to delete. The value range of this parameter varies based on the value of the IpProtocol parameter.

*   If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to ICMP, set the value to -1/-1.
*   If the IpProtocol parameter is set to GRE, set the value to -1/-1.
*   If the IpProtocol parameter is set to ALL, set the value to -1/-1.

For more information about the common ports applied in EDS, see [Common ports](https://help.aliyun.com/document_detail/40724.html).', example='22/22'),
      priority?: string(name='Priority', description='The priority of the security group rule that you want to delete. A smaller value indicates a higher priority. Valid values: 1 to 60. Default value: 1.', example='1'),
      type?: string(name='Type', description='The direction of the security group rule that you want to delete.

Valid values:

*   outflow: outbound
*   inflow: inbound', example='outflow'),
    }
  ](name='RevokeSecurityPolicyRule', description='The security group rules that you want to delete.', position='Query'),
  scope?: string(name='Scope', description='The effective scope of the policy.

Valid values:

*   IP: The policy takes effect based on the IP address.
*   GLOBAL: The policy takes effect globally.', example='GLOBAL', position='Query'),
  scopeValue?: [ string ](name='ScopeValue', description='This parameter is required when the `Scope` parameter is set to `IP`.````', position='Query'),
  usbRedirect?: string(name='UsbRedirect', description='Specifies whether to enable the USB redirection feature.

Valid values:

*   off
*   on', example='off', position='Query'),
  usbSupplyRedirectRule?: [ 
    {
      description?: string(name='Description', description='The rule description.', example='Test rule'),
      deviceClass?: string(name='DeviceClass', description='The device class. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='0Eh'),
      deviceSubclass?: string(name='DeviceSubclass', description='The device subclass. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).', example='xxh'),
      productId?: string(name='ProductId', description='The product ID (PID).', example='08**'),
      usbRedirectType?: long(name='UsbRedirectType', description='Specifies whether to allow USB redirection.

Valid values:

*   1: allows USB redirection.
*   2: forbids USB redirection.', example='1'),
      usbRuleType?: long(name='UsbRuleType', description='The type of the USB redirection rule.

Valid values:

*   1: by device class
*   2: by device vendor', example='1'),
      vendorId?: string(name='VendorId', description='The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).', example='04**'),
    }
  ](name='UsbSupplyRedirectRule', description='The USB redirection rules.', position='Query'),
  videoRedirect?: string(name='VideoRedirect', description='The multimedia redirection feature.', example='on', position='Query'),
  visualQuality?: string(name='VisualQuality', description='The image display quality.

Valid values:

*   high: high-definition (HD)
*   low: smoothness
*   lossless: no quality loss
*   medium (default): scenario-specific adaptation', example='low', position='Query'),
  watermark?: string(name='Watermark', description='The watermarking feature.

Valid values:

*   blind: Invisible watermarks are applied.
*   off: The watermarking feature is disabled.
*   on: Visible watermarks are applied.', example='off', position='Query'),
  watermarkAntiCam?: string(name='WatermarkAntiCam', description='Specifies whether to enable the anti-screen photo feature for invisible watermarks.

Valid values:

*   off
*   on', example='off', position='Query'),
  watermarkColor?: int32(name='WatermarkColor', description='The font color in red, green, and blue (RGB) of the watermark. Valid values: 0 to 16777215.', example='0', position='Query'),
  watermarkDegree?: double(name='WatermarkDegree', description='The watermark rotation. Valid values: -10 to -30.', example='-10', position='Query'),
  watermarkFontSize?: int32(name='WatermarkFontSize', description='The watermark font size. Valid values: 10 to 20.', example='10', position='Query'),
  watermarkFontStyle?: string(name='WatermarkFontStyle', description='The watermark font style.

Valid values:

*   plain
*   bold', example='plain', position='Query'),
  watermarkPower?: string(name='WatermarkPower', description='The watermark enhancement feature.

Valid values:

*   high
*   low
*   medium', example='medium', position='Query'),
  watermarkRowAmount?: int32(name='WatermarkRowAmount', description='The number of watermark rows.

>  This parameter is not available for public use.', example='3', position='Query'),
  watermarkSecurity?: string(name='WatermarkSecurity', description='Specifies whether to enable the security priority feature for invisible watermarks.

Valid values:

*   off
*   on', example='off', position='Query'),
  watermarkTransparency?: string(name='WatermarkTransparency', description='The watermark transparency.

Valid values:

*   LIGHT (default)
*   DARK
*   MIDDLE', example='LIGHT', position='Query'),
  watermarkTransparencyValue?: int32(name='WatermarkTransparencyValue', description='The watermark opacity. A larger value indicates more opaque watermarks. Valid values: 10 to 100.', example='10', position='Query'),
  watermarkType?: string(name='WatermarkType', description='The watermark content. You can select up to three items as the watermark content. Separate multiple items with commas (,).

>  If you set this parameter to `Custom`, you must specify `WatermarkCustomText`.

Valid values:

*   EndUserId: the username
*   Custom: the custom text
*   DesktopIp: the IP address of the cloud computer
*   ClientIp: the IP address of the Alibaba Cloud Workspace client
*   HostName: the rightmost 15 digits of the cloud computer ID
*   ClientTime: the current time displayed on the cloud computer', example='EndUserId', position='Query'),
  wyAssistant?: string(name='WyAssistant', description='Specifies whether to provide the AI Assistant function in the DesktopAssistant when the cloud computer is accessed from the Alibaba Cloud Workspace desktop clients (including the Windows client and the macOS client).

> Desktop clients of V7.7 and higher versions required.

Valid values:

- off: the AI Aisstant function is not provided.
- on: the AI Aisstant function is provided.', example='on', position='Query'),
}

model ModifyPolicyGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyPolicyGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPolicyGroup  ModifyPolicyGroupRequest
  * @return ModifyPolicyGroupResponse
 */
async function modifyPolicyGroup(request: ModifyPolicyGroupRequest): ModifyPolicyGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicyGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyResourceCenterPolicyRequest {
  policyGroupIds: [ string ](name='PolicyGroupIds', description='This parameter is required.', position='Query'),
  policyGroupType: string(name='PolicyGroupType', description='This parameter is required.', example='general', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='desktop', position='Query'),
  resourceIds: [ string ](name='ResourceIds', description='This parameter is required.', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='desktop', position='Query'),
}

model ModifyResourceCenterPolicyResponseBody = {
  modifyResults?: [ 
    {
      checkResult?: boolean(name='CheckResult', example='true'),
      resourceId?: string(name='ResourceId', example='ecd-e254cpyt9bb*****'),
    }
  ](name='ModifyResults'),
  requestId?: string(name='RequestId', example='51592A88-0F2C-55E6-AD2C-2AD9C10D****'),
}

model ModifyResourceCenterPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyResourceCenterPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyResourceCenterPolicy  ModifyResourceCenterPolicyRequest
  * @return ModifyResourceCenterPolicyResponse
 */
async function modifyResourceCenterPolicy(request: ModifyResourceCenterPolicyRequest): ModifyResourceCenterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyResourceCenterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTimerGroupRequest {
  configTimers?: [ 
    {
      allowClientSetting?: boolean(name='AllowClientSetting', description='Specifies whether to allow end users to configure scheduled tasks.', example='true'),
      cronExpression?: string(name='CronExpression', description='The CRON expression for the scheduled task.

>  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\* 1,2,3,4,5,6,7.', example='0 0 16 ? * 1,2,3,4,5,6,7'),
      enforce?: boolean(name='Enforce', description='Specifies whether to forcibly execute the scheduled task. A value of true specifies the scheduled task will run forcefully, ignoring the cloud computer and connection status.', example='false'),
      interval?: int32(name='Interval', description='The interval at which the scheduled task is executed. Unit: minutes.', example='10'),
      operationType?: string(name='OperationType', description='The type of the scheduled operation. If you set TimerType to NoConnect, you can specify this parameter.

Valid values:

*   Hibernate: scheduled hibernation.
*   Shutdown: scheduled shutdown.', example='Shutdown'),
      processWhitelist?: [ string ](name='ProcessWhitelist', description='The process whitelist. If whitelisted processes are running, the scheduled task upon inactivity does not take effect.'),
      resetType?: string(name='ResetType', description='The reset operation.

Valid values:

*   RESET_TYPE_SYSTEM: resets the system disk.
*   RESET_TYPE_USER_DISK: resets the data disk.
*   RESET_TYPE_BOTH: resets the system disk and data disk.', example='RESET_TYPE_SYSTEM'),
      timerType?: string(name='TimerType', description='The type of the scheduled task.

Valid values:

*   NoOperationDisconnect: scheduled disconnection upon inactivity.
*   NoConnect: scheduled disconnection upon specified operation (OperationType).
*   TimerBoot: scheduled start.
*   TimerReset: scheduled reset.
*   NoOperationShutdown: scheduled shutdown upon inactivity.
*   NoOperationHibernate: scheduled hibernation upon inactivity.
*   TimerShutdown: scheduled shutdown.
*   NoOperationReboot: scheduled restart upon inactivity.
*   TimerReboot: scheduled restart.', example='TIMER_BOOT'),
      triggerType?: string(name='TriggerType', description='The method to trigger the scheduled task upon inactivity.

Valid values:

*   Advanced: intelligent detection.
*   Standard: standard detection.', example='Standard'),
    }
  ](name='ConfigTimers', description='The configuration groups.', position='Query'),
  description?: string(name='Description', description='The description of the configuration group.', position='Query'),
  groupId: string(name='GroupId', description='The ID of the configuration group.

This parameter is required.', example='cg-i1ruuudp92qpj****', position='Query'),
  name?: string(name='Name', description='The name of the configuration group.', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
}

model ModifyTimerGroupResponseBody = {
  groupId?: string(name='GroupId', description='The ID of the configuration group.', example='cg-i1ruuudp92qpj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTimerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTimerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTimerGroup  ModifyTimerGroupRequest
  * @return ModifyTimerGroupResponse
 */
async function modifyTimerGroup(request: ModifyTimerGroupRequest): ModifyTimerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTimerGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserEntitlementRequest {
  authorizeDesktopId?: [ string ](name='AuthorizeDesktopId', description='The IDs of the cloud computers to which you want to add end users.', position='Query'),
  endUserId?: [ string ](name='EndUserId', description='The ID of the users.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  revokeDesktopId?: [ string ](name='RevokeDesktopId', description='The IDs of the cloud computers whose end users you want to remove.', position='Query'),
}

model ModifyUserEntitlementResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserEntitlementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserEntitlementResponseBody(name='body'),
}

/**
  * @description You can modify end users only for cloud computers that are in the Running state.
  * @param request  the request parameters of ModifyUserEntitlement  ModifyUserEntitlementRequest
  * @return ModifyUserEntitlementResponse
 */
async function modifyUserEntitlement(request: ModifyUserEntitlementRequest): ModifyUserEntitlementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserEntitlement', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserToDesktopGroupRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  newEndUserIds: [ string ](name='NewEndUserIds', description='The IDs of the end users that you want to add. You can configure 1 to 500 IDs.

This parameter is required.', position='Query'),
  oldEndUserIds: [ string ](name='OldEndUserIds', description='The IDs of the end users that you want to remove. You can configure 1 to 500 IDs.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyUserToDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyUserToDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserToDesktopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUserToDesktopGroup  ModifyUserToDesktopGroupRequest
  * @return ModifyUserToDesktopGroupResponse
 */
async function modifyUserToDesktopGroup(request: ModifyUserToDesktopGroupRequest): ModifyUserToDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserToDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model MoveCdsFileRequest {
  cdsId?: string(name='CdsId', description='The ID of the cloud disk.', example='cn-hangzhou+cds-346063****', position='Query'),
  conflictPolicy?: string(name='ConflictPolicy', description='The processing mode of files that have the same name.

Valid values:

*   <!-- -->

    refuse

    <!-- -->

    : If you want to create a file that uses the same name as an existing file in the cloud, the system denies your request and returns the details of the existing file.

    <!-- -->

*   <!-- -->

    auto_rename

    <!-- -->

    : If you want to create a file that uses the same name as an existing file in the cloud, the system renames the file that you want to create by appending the current time point.

    <!-- -->

*   <!-- -->

    ignore

    <!-- -->

    : The system allows you to create a file that uses the same name as an existing file in the cloud.

    <!-- -->

*   <!-- -->

    over_write

    <!-- -->

    : After you create a file that uses the same name as an existing file in the cloud, the new file overwrites the existing file.

    <!-- -->', example='ignore', position='Query'),
  endUserId?: string(name='EndUserId', description='The user ID that you want to use to access the cloud disk.', example='user01', position='Query'),
  fileId?: string(name='FileId', description='The ID of the file.', example='63f3257b68b018170b194d87b875512d108f****', position='Query'),
  groupId?: string(name='GroupId', description='The group ID.', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder that you want to move. If you want to remove the root folder, set the value to root.', example='6409848a6da91d6240604e7ba7337d85ba8a1****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model MoveCdsFileResponseBody = {
  code?: string(name='Code', description='The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.', example='success'),
  message?: string(name='Message', description='The error message that is returned. This parameter is not returned if the value of Code is success.', example='success'),
  moveCdsFileModel?: {
    asyncTaskId?: string(name='AsyncTaskId', description='The ID of the asynchronous task. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.', example='fe307518-825a-4c8b-a69c-958f0e8a****'),
    exist?: boolean(name='Exist', description='Indicates whether the file exists.

Valid values:

*   <!-- -->

    true

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='false'),
    fileId?: string(name='FileId', description='The ID of the file.', example='63636837e47e5a24a8a940218bef395c210e****'),
  }(name='MoveCdsFileModel', description='The response object when you move a file.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   <!-- -->

    true

    <!-- -->

    <!-- -->

*   <!-- -->

    false

    <!-- -->

    <!-- -->', example='true'),
}

model MoveCdsFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveCdsFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveCdsFile  MoveCdsFileRequest
  * @return MoveCdsFileResponse
 */
async function moveCdsFile(request: MoveCdsFileRequest): MoveCdsFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveCdsFile', 'POST', '/', 'json', false, 'json', request);
}

model RebootDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 100 IDs.

This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  osUpdate?: boolean(name='OsUpdate', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebootDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootDesktopsResponseBody(name='body'),
}

/**
  * @description The cloud computers that you want to restart must be in the Running state.
  * @param request  the request parameters of RebootDesktops  RebootDesktopsRequest
  * @return RebootDesktopsResponse
 */
async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootDesktops', 'POST', '/', 'json', false, 'json', request);
}

model RebuildDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The cloud computer IDs. You can specify the IDs of 1 to 20 cloud computers.

This parameter is required.', example='ecd-gx2x1dhsmucyy****', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the new image.', example='m-84mztzatmlnys****', position='Query'),
  language?: string(name='Language', description='The OS language. Only system images are supported, and Linux cloud computers support only English.

Valid values:

*   en-US: English
*   zh-HK: Traditional Chinese (Hong Kong, China)
*   zh-CN: Simplified Chinese
*   ja-JP: Japanese', example='en-US', position='Query'),
  operateType?: string(name='OperateType', description='The operation type on the data disk.

>  This parameter is empty by default regardless of whether data disks are attached to the cloud computer.

*   No data disks are attached to the cloud computer:\\
    No operation is performed on the data disks of the cloud computer regardless of the value of this parameter.

*   Data disks are attached to the cloud computer:

    1.  The OS of the cloud computer is the same as the OS of the destination image:

        *   If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
        *   If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is retained.

    2.  The OS of the cloud computer is different from the OS of the destination image:

        *   If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
        *   If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is cleared.', example='replace', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RebuildDesktopsResponseBody = {
  rebuildResults?: [ 
    {
      code?: string(name='Code', description='The recreation result code. If the request was successful, `success` is returned. If the request failed, an error message is returned.', example='IncorrectDesktopStatus'),
      desktopId?: string(name='DesktopId', description='The IDs of the cloud computers.', example='ecd-gx2x1dhsmucyy****'),
      message?: string(name='Message', description='The error message. This parameter is invalid if the value of `Code` is `success`.', example='The current status of the desktop does not support this operation.'),
    }
  ](name='RebuildResults', description='The recreation results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RebuildDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebuildDesktopsResponseBody(name='body'),
}

/**
  * @description Take note of the following limits when you change an image:
  * *   You can select an image whose OS is different from the OS of the original image. The image change feature is not supported in the following regions: China (Hong Kong), Singapore, and Japan (Tokyo).
  * *   GPU images and non-GPU images cannot be exchanged. Graphic-based cloud computers can only use GPU-accelerated images. The other cloud computers can only use non-GPU-accelerated images.
  * After the image of a cloud computer is changed, the system uses the new image to initialize the system disk of the cloud computer. This has the following impacts:
  * *   Data in the system disk of the original cloud computer is cleared. Snapshots that are created based on the system disk of the original cloud computer become unavailable. The system automatically deletes the snapshots.
  * *   If the OS of the image is changed, the data in the data disk of the original cloud computer is cleared, and the snapshots that are created based on the data disk of the original cloud computer can no longer be used. The system automatically deletes the snapshots. If the OS of the image is not changed, the data in the data disk of the original cloud computer is retained, and the snapshots that are created based on the data disk of the original cloud computer can still be used.
  * @param request  the request parameters of RebuildDesktops  RebuildDesktopsRequest
  * @return RebuildDesktopsResponse
 */
async function rebuildDesktops(request: RebuildDesktopsRequest): RebuildDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebuildDesktops', 'POST', '/', 'json', false, 'json', request);
}

model RemoveFilePermissionRequest {
  cdsId: string(name='CdsId', description='The ID of the cloud disk in Cloud Drive Service.

This parameter is required.', example='cn-hangzhou+cds-066224****', position='Query'),
  endUserId?: string(name='EndUserId', description='The user ID.', example='user01', position='Query'),
  fileId: string(name='FileId', description='The file ID. The ID is a unique identifier for the file.

This parameter is required.', example='6333e553a133ce21e6f747cf948bb9ef95d7****', position='Query'),
  groupId?: string(name='GroupId', description='The group ID.', position='Query'),
  memberList: [ 
    {
      cdsIdentity: {
        id: string(name='Id', description='The user ID or group ID.

This parameter is required.', example='249dsfseee643h33g3dv****'),
        type: string(name='Type', description='The object type.

Valid values:

*   IT_Group

    <!-- -->

    :

    <!-- -->

    group

    <!-- -->

*   IT_User

    <!-- -->

    :

    <!-- -->

    user

    <!-- -->

This parameter is required.', example='IT_User'),
      }(name='CdsIdentity', description='The permission information.

This parameter is required.'),
      roleId: string(name='RoleId', description='The role ID. You can configure permissions on roles or actions. This parameter is used to specify the permissions on roles, which conflicts with the ActionList parameter. When you configure both the parameters, this parameter shall prevail.

Valid values:

*   SystemFileEditorWithoutShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files but cannot share files

    <!-- -->

*   SystemFileUploaderAndDownloaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload, download, and share files

    <!-- -->

*   SystemFileDownloader

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to download files

    <!-- -->

*   SystemFileEditorWithoutDelete

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files but cannot delete files

    <!-- -->

*   SystemFileOwner

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to collaborate with others

    <!-- -->

*   SystemFileDownloaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to download and share files

    <!-- -->

*   SystemFileUploaderAndViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to preview or upload files

    <!-- -->

*   SystemFileViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to preview files

    <!-- -->

*   SystemFileEditor

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to edit files

    <!-- -->

*   SystemFileUploaderWithShareLink

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload or share files

    <!-- -->

*   SystemFileUploader

    <!-- -->

    :

    <!-- -->

    the role that has the permission to upload files

    <!-- -->

*   SystemFileUploaderAndDownloader

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to upload or download files

    <!-- -->

*   SystemFileMetaViewer

    <!-- -->

    :

    <!-- -->

    the role that has the permissions to view files

    <!-- -->

This parameter is required.', example='SystemFileUploaderAndDownloader'),
    }
  ](name='MemberList', description='The users that you want to authorize.

This parameter is required.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RemoveFilePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB'),
}

model RemoveFilePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveFilePermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveFilePermission  RemoveFilePermissionRequest
  * @return RemoveFilePermissionResponse
 */
async function removeFilePermission(request: RemoveFilePermissionRequest): RemoveFilePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveFilePermission', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromDesktopGroupRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer share.', example='dg-2i8qxpv6t1a03****', position='Query'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the cloud computer shares.', position='Query'),
  endUserIds?: [ string ](name='EndUserIds', description='The IDs of the authorized users that you want to remove.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userOuPath?: string(name='UserOuPath', position='Query'),
}

model RemoveUserFromDesktopGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RemoveUserFromDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserFromDesktopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserFromDesktopGroup  RemoveUserFromDesktopGroupRequest
  * @return RemoveUserFromDesktopGroupResponse
 */
async function removeUserFromDesktopGroup(request: RemoveUserFromDesktopGroupRequest): RemoveUserFromDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromDesktopOversoldUserGroupRequest {
  endUserId?: string(name='EndUserId', position='Query'),
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  userDesktopId?: string(name='UserDesktopId', position='Query'),
  userGroupId?: string(name='UserGroupId', position='Query'),
}

model RemoveUserFromDesktopOversoldUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveUserFromDesktopOversoldUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserFromDesktopOversoldUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserFromDesktopOversoldUserGroup  RemoveUserFromDesktopOversoldUserGroupRequest
  * @return RemoveUserFromDesktopOversoldUserGroupResponse
 */
async function removeUserFromDesktopOversoldUserGroup(request: RemoveUserFromDesktopOversoldUserGroupRequest): RemoveUserFromDesktopOversoldUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromDesktopOversoldUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewDesktopGroupRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the auto-payment feature.

Valid values:

*   true (default): enables the auto-payment feature. Make sure that your account balance is sufficient. Otherwise, an abnormal order is generated.
*   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually. You can log on to the EDS console and complete the payment based on the order ID on the Orders page.', example='true', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal.

Valid values:

*   true
*   false', example='false', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the shared group.

This parameter is required.', example='dg-7724r1jitbjzc****', position='Query'),
  period?: int32(name='Period', description='The renewal duration. Valid values of this parameter are determined by the value of the `PeriodUnit` parameter.

*   Valid values if you set the `PeriodUnit` parameter to `Month`: 1, 2, 3, and 6
*   Valid values if you set the `PeriodUnit` parameter to `Year`: 1, 2, 3, 4, and 5

Default value: 1', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by the `Period` parameter.

Valid values:

*   Month (default)
*   Year', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RenewDesktopGroupResponseBody = {
  orderId?: [ string ](name='OrderId', description='The order IDs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E55E6732-2028-52FA-AB06-EA29C36B****'),
}

model RenewDesktopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewDesktopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewDesktopGroup  RenewDesktopGroupRequest
  * @return RenewDesktopGroupResponse
 */
async function renewDesktopGroup(request: RenewDesktopGroupRequest): RenewDesktopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewDesktopGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewDesktopOversoldGroupRequest {
  oversoldGroupId?: string(name='OversoldGroupId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
}

model RenewDesktopOversoldGroupResponseBody = {
  data?: {
    orderId?: long(name='OrderId'),
    oversoldGroupId?: string(name='OversoldGroupId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model RenewDesktopOversoldGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewDesktopOversoldGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewDesktopOversoldGroup  RenewDesktopOversoldGroupRequest
  * @return RenewDesktopOversoldGroupResponse
 */
async function renewDesktopOversoldGroup(request: RenewDesktopOversoldGroupRequest): RenewDesktopOversoldGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewDesktopOversoldGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewDesktopsRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the auto-payment feature.

Valid values:

*   true (default): enables the auto-payment feature. Make sure that your account balance is sufficient. Otherwise, an abnormal order is generated.
*   false: disables the auto-payment feature. In this case, an order is generated but you need to complete the payment. You can log on to the EDS console and complete the payment based on the order ID on the Orders page.', example='true', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable the auto-renewal feature.', example='false', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The cloud computer IDs. You can only renew monthly subscription cloud computers.

This parameter is required.', example='ecd-ia2zw38bi6cm7****', position='Query'),
  period?: int32(name='Period', description='The renewal duration. Valid values of this parameter are determined by the value of the `PeriodUnit` parameter.

*   Valid values if you set the `PeriodUnit` parameter to `Month`: 1, 2, 3, and 6
*   Valid values if you set the `PeriodUnit` parameter to `Year`: 1, 2, 3, 4, 5, and 6

Default value: 1.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by the `Period` parameter.

Default value: Month. Valid values:

*   Month

    <!-- -->

    <!-- -->

    <!-- -->

*   Year

    <!-- -->

    <!-- -->

    <!-- -->', example='Month', position='Query'),
  promotionId?: string(name='PromotionId', description='The ID of the promotional activity.', example='500030980150146', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='>  This field is not available for public use.', example='null', position='Query'),
}

model RenewDesktopsResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='20844399755****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewDesktops  RenewDesktopsRequest
  * @return RenewDesktopsResponse
 */
async function renewDesktops(request: RenewDesktopsRequest): RenewDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewDesktops', 'POST', '/', 'json', false, 'json', request);
}

model RenewNetworkPackagesRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable the automatic payment feature.

Valid values:

*   true (default): enables the auto-payment feature.

    <!-- -->

    <!-- -->

    Make sure that your account has sufficient balance. Otherwise, no order is generated.

    <!-- -->

*   false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.

    <!-- -->

    <!-- -->

    To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.

    <!-- -->', example='true', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  networkPackageId: [ string ](name='NetworkPackageId', description='The IDs of premium bandwidth plans. You can specify up to 100 IDs.

This parameter is required.', position='Query'),
  period?: int32(name='Period', description='The subscription duration if you specify subscription as the new billing method for the cloud desktop. The unit of the value is specified by the `PeriodUnit` parameter. This parameter takes effect only when the `ChargeType` parameter is set to `PrePaid`.

*   If the `PeriodUnit` parameter is set to `Week`, the valid value of the Period parameter is 1.
*   If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
*   If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by the Period parameter. Valid values:

*   Month
*   Year

Default value: Month.', example='Month', position='Query'),
  promotionId?: string(name='PromotionId', description='The promotion ID.', example='500038360030606', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RenewNetworkPackagesResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='214726268900640'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewNetworkPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewNetworkPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewNetworkPackages  RenewNetworkPackagesRequest
  * @return RenewNetworkPackagesResponse
 */
async function renewNetworkPackages(request: RenewNetworkPackagesRequest): RenewNetworkPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewNetworkPackages', 'POST', '/', 'json', false, 'json', request);
}

model ResetDesktopsRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The ID of the cloud computer share.

*   If you specify `DesktopId`, ignore `DesktopGroupId`.
*   If you leave `DesktopId` empty, the system obtains the IDs of all cloud computers within the share specified by `DesktopGroupId`.``', example='dg-07if7qsxoxkb6****', position='Query'),
  desktopGroupIds?: [ string ](name='DesktopGroupIds', description='The IDs of the cloud computer shares.', position='Query'),
  desktopId?: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-4zfb6zj728hhr****', position='Query'),
  payType?: string(name='PayType', description='The billing method of the cloud computer share.

>  This parameter takes effect when you reset a cloud computer share. If you leave this parameter empty, all cloud computers in that share are reset.

Valid values:

*   PostPaid: pay-as-you-go.
*   PrePaid: subscription.', example='PrePaid', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resetScope?: string(name='ResetScope', description='The reset scope. You can configure this parameter to reset the image or cloud computer.

Valid values:

*   ALL (default): resets the image and cloud computer.
*   IMAGE: resets only the image.', example='ALL', position='Query'),
  resetType: string(name='ResetType', description='The disk reset type.

Valid values:

*   0: does not reset disks.
*   1: resets only the system disk.
*   2: resets only the user disk.
*   3: resets the system disk and the user disk.

This parameter is required.', example='1', position='Query'),
}

model ResetDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDesktopsResponseBody(name='body'),
}

/**
  * @description >  You can call this operation to reset only cloud computers from a cloud computer share.
  * @param request  the request parameters of ResetDesktops  ResetDesktopsRequest
  * @return ResetDesktopsResponse
 */
async function resetDesktops(request: ResetDesktopsRequest): ResetDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDesktops', 'POST', '/', 'json', false, 'json', request);
}

model ResetNASDefaultMountTargetRequest {
  fileSystemId: string(name='FileSystemId', description='The ID of the NAS file system.

This parameter is required.', example='3a6ef4****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ResetNASDefaultMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetNASDefaultMountTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetNASDefaultMountTargetResponseBody(name='body'),
}

/**
  * @description When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
  * @param request  the request parameters of ResetNASDefaultMountTarget  ResetNASDefaultMountTargetRequest
  * @return ResetNASDefaultMountTargetResponse
 */
async function resetNASDefaultMountTarget(request: ResetNASDefaultMountTargetRequest): ResetNASDefaultMountTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetNASDefaultMountTarget', 'POST', '/', 'json', false, 'json', request);
}

model ResetSnapshotRequest {
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hzngahou', position='Query'),
  snapshotId: string(name='SnapshotId', description='The ID of the snapshot.

This parameter is required.', example='s-2zeipxmnhej803x7****', position='Query'),
}

model ResetSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ResetSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSnapshotResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that the following operations are performed:
  * *   The data that you want to retain is backed up.
  *     > The disk restoration operation is irreversible. After you call this operation, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore the disk based on the snapshot, make sure that you back up data.
  * *   The cloud computer to which the disk belongs is stopped.
  * @param request  the request parameters of ResetSnapshot  ResetSnapshotRequest
  * @return ResetSnapshotResponse
 */
async function resetSnapshot(request: ResetSnapshotRequest): ResetSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model RevokeCoordinatePrivilegeRequest {
  coId: string(name='CoId', description='The ID of the stream coordination task.

This parameter is required.', example='co-fqsm6e8ee75w61fp9', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user.', example='zhangsan', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userType: string(name='UserType', description='The type of user who requires the coordinate permissions.

Set the value to TENANT_ADMIN. Only tenant administrators can be granted with the coordinate permissions.

This parameter is required.', example='TENANT_ADMIN', position='Query'),
  uuid?: string(name='Uuid', description='The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About** on the client logon page to view the identifier of the client.', example='C78CA9E99315687575DD2844C1F3****', position='Query'),
}

model RevokeCoordinatePrivilegeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RevokeCoordinatePrivilegeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeCoordinatePrivilegeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeCoordinatePrivilege  RevokeCoordinatePrivilegeRequest
  * @return RevokeCoordinatePrivilegeResponse
 */
async function revokeCoordinatePrivilege(request: RevokeCoordinatePrivilegeRequest): RevokeCoordinatePrivilegeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeCoordinatePrivilege', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  commandContent: string(name='CommandContent', description='The content of the command. The command content can be plaintext or Base64-encoded.\\
The Base64-encoded command content cannot exceed 16 KB in size.

> If the command content is Base64-encoded, you must set the ContentEncoding parameter to Base64.

This parameter is required.', example='ipconfig', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content. Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is Base64-encoded.

Default value: PlainText. If the specified value of this parameter is invalid, PlainText is used by default.', example='Base64', position='Query'),
  desktopId: [ string ](name='DesktopId', description='The ID of cloud desktop N. Valid values of N: 1 to 50.\\
If multiple cloud desktops are specified and the command execution succeeds on at least one of the cloud desktops, the operation is considered successful. If multiple cloud desktops are specified and the command execution fails on all the cloud desktops, verify the value of the parameter and try again.

This parameter is required.', position='Query'),
  endUserId?: string(name='EndUserId', description='The ID of the end user. If you specify a value, you run the command as the end user that is granted specific permissions. Note: The end user has sessions on a cloud computer. That is, when the cloud computer is started, the end user logs on to an Alibaba Cloud Workspace client and connects to the cloud computer, and the cloud computer is not preempted by another end user during the connection. This parameter is not available for Linux cloud computers.', example='User1', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  timeout?: long(name='Timeout', description='The timeout period for the command to run. Unit: seconds. Default value: 60.\\
A timeout error occurs if the command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When a timeout error occurs, the command process is forcibly terminated.', example='3600', position='Query'),
  type: string(name='Type', description='The language of the O\\&M command. Valid values:

*   RunBatScript
*   RunPowerShellScript

This parameter is required.', example='RunPowerShellScript', position='Query'),
}

model RunCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The ID of the command execution.', example='t-hz01qgsqj2n****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RunCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunCommandResponseBody(name='body'),
}

/**
  * @description You can use the RunCommand operation to run scripts only on Windows cloud desktops.
  * @param request  the request parameters of RunCommand  RunCommandRequest
  * @return RunCommandResponse
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model SendVerifyCodeRequest {
  extraInfo?: string(name='ExtraInfo', description='The information that is required to send the verification code, in JSON format. When you verify the CEN instance of another Alibaba Cloud account, you must provide the ID of the CEN instance and the ID of the Alibaba Cloud account to which the instance belongs.

*   CenId: the ID of the CEN instance.
*   CenOwnerId: the ID of the Alibaba Cloud account to which the CEN instance belongs.

>  If you own the CEN instance, skip this parameter. If you do not own the CEN instance, specify the ID of the Alibaba Cloud account that owns the CEN instance.', example='{"cenOwnerId": 1234567890******,"cenId": "cen-3weq30r6t0s7t4****"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  verifyCodeAction: string(name='VerifyCodeAction', description='The action that you want to perform by using the verification code.

Valid value:

*   eds_cenID_securityverification: Use the verification code to verify the CEN instance.

This parameter is required.', example='eds_cenID_securityverification', position='Query'),
}

model SendVerifyCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SendVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerifyCodeResponseBody(name='body'),
}

/**
  * @description You must call this operation to obtain the verification code that is required when you bind an advanced office network to a CEN instance that belongs to another Alibaba Cloud account. After you call this operation, the system sends a verification code to the email address associated with the Alibaba Cloud account to which the CEN instance belongs.
  * @param request  the request parameters of SendVerifyCode  SendVerifyCodeRequest
  * @return SendVerifyCodeResponse
 */
async function sendVerifyCode(request: SendVerifyCodeRequest): SendVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerifyCode', 'POST', '/', 'json', false, 'json', request);
}

model SetDesktopGroupScaleTimerRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer pool.

This parameter is required.', example='dg-2i8qxpv6t1a03****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  scaleTimerInfos?: [ 
    {
      buyResAmount?: int32(name='BuyResAmount', description='One option for the auto scaling policy. This option specifies the number of cloud computers that you want to create in the cloud computer pool. Valid values: 0 to 200.', example='5'),
      cron?: string(name='Cron', description='The cron expression of the trigger time.', example='0 0 12 ? * 1'),
      keepDuration?: long(name='KeepDuration', description='The keep-alive duration of a session after the session is disconnected. Unit: milliseconds. Valid values: 180000 (3 minutes) to 345600000 (4 days). A value of 0 indicates that the session always keeps alive.

If a session is disconnected by the end user or accidentally due to a factor and the end user does not re-establish a connection with the session within the keep-alive duration, the session expires and unsaved data is deleted. If the end user successfully re-establishes a connection with the session within the keep-alive duration, the end user returns to the session and can still access the original data.', example='1000'),
      loadPolicy?: int32(name='LoadPolicy', description='The load balancing policy for the multi-session cloud computer pool.

Valid values:

*   0: depth-first
*   1: breadth first.', example='0'),
      maxResAmount?: int32(name='MaxResAmount', description='One option for the auto scaling policy. This option specifies the maximum number of cloud computers that you can create in the cloud computer pool. Valid values: 0 to 200.', example='100'),
      minResAmount?: int32(name='MinResAmount', description='One option for the auto scaling policy. This option specifies the minimum number of cloud computers that you must create in the cloud computer pool. Valid values: 0 to 200.', example='5'),
      ratioThreshold?: float(name='RatioThreshold', description='The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. Formula:

`Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.

When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.', example='0.9'),
      type?: string(name='Type', description='The type of the auto scaling policy.

Valid values:

*   drop

    <!-- -->

    <!-- -->

    <!-- -->

*   normal

    <!-- -->

    <!-- -->

    <!-- -->

*   peak

    <!-- -->

    <!-- -->

    <!-- -->

*   rise

    <!-- -->

    <!-- -->

    <!-- -->', example='rise'),
    }
  ](name='ScaleTimerInfos', description='The information about the scheduled auto scaling task.', position='Query'),
}

model SetDesktopGroupScaleTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDesktopGroupScaleTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDesktopGroupScaleTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDesktopGroupScaleTimer  SetDesktopGroupScaleTimerRequest
  * @return SetDesktopGroupScaleTimerResponse
 */
async function setDesktopGroupScaleTimer(request: SetDesktopGroupScaleTimerRequest): SetDesktopGroupScaleTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDesktopGroupScaleTimer', 'POST', '/', 'json', false, 'json', request);
}

model SetDesktopGroupTimerRequest {
  cronExpression?: string(name='CronExpression', description='The cron expression for the scheduled task. This parameter is required when `TimerType` is set to 2, 3, or 4.', example='0 0 2 ? * 1-7', position='Query'),
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-dbdkfmh883****', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully execute the scheduled task.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resetType?: int32(name='ResetType', description='The type of the disk that you want to reset.

Valid values:

- does not reset disks.
- resets only the system disk.
- resets only the user disk.
- resets the system disk and the user disk.', example='1', position='Query'),
  timerType: int32(name='TimerType', description='The type of the scheduled task.

Valid values:

*   1: scheduled reset
*   2: scheduled startup
*   3: scheduled stop
*   4: scheduled restart

This parameter is required.', example='1', position='Query'),
}

model SetDesktopGroupTimerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='388CF76E-FFB3-5174-9F91-CDD****'),
}

model SetDesktopGroupTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDesktopGroupTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDesktopGroupTimer  SetDesktopGroupTimerRequest
  * @return SetDesktopGroupTimerResponse
 */
async function setDesktopGroupTimer(request: SetDesktopGroupTimerRequest): SetDesktopGroupTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDesktopGroupTimer', 'POST', '/', 'json', false, 'json', request);
}

model SetDesktopGroupTimerStatusRequest {
  desktopGroupId: string(name='DesktopGroupId', description='The ID of the cloud computer share.

This parameter is required.', example='dg-fgxsniu6at****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  status?: int32(name='Status', description='The status of the scheduled task.

Valid values:

*   1: enabled
*   2: disabled
*   3: deleted
*   100: unknown', example='1', position='Query'),
  timerType: int32(name='TimerType', description='The type of the scheduled task.

Valid values:

*   1: scheduled reset
*   2: scheduled startup
*   3: scheduled stop
*   4: scheduled restart

This parameter is required.', example='1', position='Query'),
}

model SetDesktopGroupTimerStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC7912E7-8BDF-547F-BCAC****'),
}

model SetDesktopGroupTimerStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDesktopGroupTimerStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDesktopGroupTimerStatus  SetDesktopGroupTimerStatusRequest
  * @return SetDesktopGroupTimerStatusResponse
 */
async function setDesktopGroupTimerStatus(request: SetDesktopGroupTimerStatusRequest): SetDesktopGroupTimerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDesktopGroupTimerStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetDesktopMaintenanceRequest {
  desktopIds: [ string ](name='DesktopIds', description='This parameter is required.', position='Query'),
  mode: string(name='Mode', description='This parameter is required.', example='enter', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model SetDesktopMaintenanceResponseBody = {
  requestId?: string(name='RequestId', example='BA6A1853-3EA9-5EEB-86C8-3D14A3E01905'),
}

model SetDesktopMaintenanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDesktopMaintenanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDesktopMaintenance  SetDesktopMaintenanceRequest
  * @return SetDesktopMaintenanceResponse
 */
async function setDesktopMaintenance(request: SetDesktopMaintenanceRequest): SetDesktopMaintenanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDesktopMaintenance', 'POST', '/', 'json', false, 'json', request);
}

model SetDirectorySsoStatusRequest {
  directoryId: string(name='DirectoryId', description='The AD directory ID.

This parameter is required.', example='cn-hangzhou+dir-h95efs1mbukd9****', position='Query'),
  enableSso: boolean(name='EnableSso', description='Specifies whether to enable SSO. Valid values:

*   true: enables SSO.
*   false: disables SSO.

This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model SetDirectorySsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetDirectorySsoStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDirectorySsoStatusResponseBody(name='body'),
}

/**
  * @description This operation is supported only for AD directories, not for RAM directories.
  * @param request  the request parameters of SetDirectorySsoStatus  SetDirectorySsoStatusRequest
  * @return SetDirectorySsoStatusResponse
 */
async function setDirectorySsoStatus(request: SetDirectorySsoStatusRequest): SetDirectorySsoStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDirectorySsoStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetIdpMetadataRequest {
  directoryId?: string(name='DirectoryId', description='The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.', example='cn-hangzhou+dir-400695****', position='Query'),
  idpMetadata: string(name='IdpMetadata', description='The metadata of the IdP.

This parameter is required.', example='&lt;EntityDescriptor ID********Descriptor&gt;', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', description='The workspace ID.', example='cn-hangzhou+dir-400695****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model SetIdpMetadataResponseBody = {
  idpEntityId?: string(name='IdpEntityId', description='The entity ID obtained after the IdP metadata file is parsed.', example='http://test****.cn/adfs/services/trust'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetIdpMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetIdpMetadataResponseBody(name='body'),
}

/**
  * @description You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
  * @param request  the request parameters of SetIdpMetadata  SetIdpMetadataRequest
  * @return SetIdpMetadataResponse
 */
async function setIdpMetadata(request: SetIdpMetadataRequest): SetIdpMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIdpMetadata', 'POST', '/', 'json', false, 'json', request);
}

model SetOfficeSiteSsoStatusRequest {
  enableSso: boolean(name='EnableSso', description='Specifies whether to enable SSO.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='true', position='Query'),
  officeSiteId: string(name='OfficeSiteId', description='The workspace ID.

This parameter is required.', example='cn-hangzhou+dir-363353****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model SetOfficeSiteSsoStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetOfficeSiteSsoStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetOfficeSiteSsoStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetOfficeSiteSsoStatus  SetOfficeSiteSsoStatusRequest
  * @return SetOfficeSiteSsoStatusResponse
 */
async function setOfficeSiteSsoStatus(request: SetOfficeSiteSsoStatusRequest): SetOfficeSiteSsoStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetOfficeSiteSsoStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetUserProfilePathRulesRequest {
  desktopGroupId?: string(name='DesktopGroupId', description='The desktop group ID.', example='dg-2i8qxpv6t1a03****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  userProfilePathRule?: [ 
    {
      blackPath?: {
        path?: string(name='Path', description='The blacklist path.', example='AppLocal/Data', maxLength=260),
        type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='folder'),
      }(name='BlackPath', description='The directory in the blacklist.'),
      whitePaths?: [ 
        {
          path?: string(name='Path', description='The whitelist path.', example='whitePath', maxLength=260),
          type?: string(name='Type', description='The path type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   folder

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
        }
      ](name='WhitePaths', description='The directories that you want to configure in the whitelist.'),
    }
  ](name='UserProfilePathRule', description='The directories that you want to configure in the blacklist and whitelist.', shrink='json', position='Query'),
  userProfileRuleType?: string(name='UserProfileRuleType', description='The directory type that you want to configure.

Valid values:

*   Both_Default_DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   DesktopGroup

    <!-- -->

    <!-- -->

    <!-- -->

*   Default

    <!-- -->

    <!-- -->

    <!-- -->', example='DesktopGroup', position='Query'),
}

model SetUserProfilePathRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model SetUserProfilePathRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetUserProfilePathRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetUserProfilePathRules  SetUserProfilePathRulesRequest
  * @return SetUserProfilePathRulesResponse
 */
async function setUserProfilePathRules(request: SetUserProfilePathRulesRequest): SetUserProfilePathRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserProfilePathRules', 'POST', '/', 'json', false, 'json', request);
}

model StartDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 20 IDs.

This parameter is required.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDesktopsResponseBody(name='body'),
}

/**
  * @description The cloud computers that you want to start must be in the Stopped state.
  * @param request  the request parameters of StartDesktops  StartDesktopsRequest
  * @return StartDesktopsResponse
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDesktops', 'POST', '/', 'json', false, 'json', request);
}

model StopDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify 1 to 20 IDs.

This parameter is required.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  osUpdate?: boolean(name='OsUpdate', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  stoppedMode?: string(name='StoppedMode', description='The billing mode after you stop the cloud computer.

Default value: StopCharging. Valid values:

*   StopCharging: After the cloud computer is stopped, the system automatically reclaims computing resources. You are no longer charged for computing resources. However, you are still charged for storage resources.

    <!-- -->

    <!-- -->

    <!-- -->

*   KeepCharging: After the cloud computer is stopped, the system does not reclaim resources to prevent insufficient resources and startup failures. You are still charged for the resources.

    <!-- -->

    <!-- -->

    <!-- -->', example='StopCharging', position='Query'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDesktopsResponseBody(name='body'),
}

/**
  * @description The cloud computers that you want to stop must be in the Running state.
  * @param request  the request parameters of StopDesktops  StopDesktopsRequest
  * @return StopDesktopsResponse
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDesktops', 'POST', '/', 'json', false, 'json', request);
}

model StopInvocationRequest {
  desktopId?: [ string ](name='DesktopId', description='The ID of cloud desktop N. Valid values of N: 1 to 50.', example='ecd-7w78ozhjcwa3u****', position='Query'),
  invokeId: string(name='InvokeId', description='The ID of the execution.

This parameter is required.', example='t-7d2a745b412b4601b2d47f6a768d****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StopInvocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInvocationResponseBody(name='body'),
}

/**
  * @description When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
  * @param request  the request parameters of StopInvocation  StopInvocationRequest
  * @return StopInvocationResponse
 */
async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInvocation', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.

This parameter is required.', example='ecd-ia2zw38bi6cm7****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Valid values:

* ALIYUN::GWS::INSTANCE: cloud computer.

This parameter is required.', example='ALIYUN::GWS::INSTANCE', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The tag keys. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. It cannot start with `acs:` or `aliyun` and cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the cloud computers. You can specify 1 to 20 tags.

This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @description If TagKey is specified, the new TagValue value overrides the original TagValue value.
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnbindConfigGroupRequest {
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-shanghai`.', example='cn-hangzhou', position='Query'),
  resourceInfos: [ 
    {
      productType?: string(name='ProductType', description='The service type of the resource.

Valid value:

*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='ecd-ctwj0bk3l5nz****'),
      resourceRegionId?: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-chengdu'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

*   RESOURCE_GROUP: the resource group.
*   CLOUD_DESKTOP: the cloud computer service.', example='CLOUD_DESKTOP'),
    }
  ](name='ResourceInfos', description='The resources from which you want to unbind the configuration group.

This parameter is required.', position='Query'),
  type: string(name='Type', description='The type of the configuration group.

Valid value:

*   Timer: the scheduled task type.

This parameter is required.', example='Timer', position='Query'),
}

model UnbindConfigGroupResponseBody = {
  groupIds?: [ string ](name='GroupIds', description='The IDs of the configuration groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD0FF13D-FC7D-56AD-934F-91C8487*****'),
}

model UnbindConfigGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindConfigGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindConfigGroup  UnbindConfigGroupRequest
  * @return UnbindConfigGroupResponse
 */
async function unbindConfigGroup(request: UnbindConfigGroupRequest): UnbindConfigGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindConfigGroup', 'POST', '/', 'json', false, 'json', request);
}

model UnbindUserDesktopRequest {
  desktopAgentIds?: [ string ](name='DesktopAgentIds', position='Query'),
  desktopGroupId?: string(name='DesktopGroupId', position='Query'),
  desktopIds?: [ string ](name='DesktopIds', position='Query'),
  force?: boolean(name='Force', position='Query'),
  reason?: string(name='Reason', position='Query'),
  userDesktopIds?: [ string ](name='UserDesktopIds', position='Query'),
}

model UnbindUserDesktopResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindUserDesktopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindUserDesktopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindUserDesktop  UnbindUserDesktopRequest
  * @return UnbindUserDesktopResponse
 */
async function unbindUserDesktop(request: UnbindUserDesktopRequest): UnbindUserDesktopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindUserDesktop', 'POST', '/', 'json', false, 'json', request);
}

model UnlockVirtualMFADeviceRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  serialNumber: string(name='SerialNumber', description='The serial number of the virtual MFA device, which is a unique identifier.

You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to Active Directory (AD) users.

This parameter is required.', example='a25f297f-f2e1-4a44-bbf1-5f48a6e5****', position='Query'),
}

model UnlockVirtualMFADeviceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnlockVirtualMFADeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockVirtualMFADeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnlockVirtualMFADevice  UnlockVirtualMFADeviceRequest
  * @return UnlockVirtualMFADeviceResponse
 */
async function unlockVirtualMFADevice(request: UnlockVirtualMFADeviceRequest): UnlockVirtualMFADeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockVirtualMFADevice', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to unbind all tags from the resource. This parameter takes effect only when TagKey.N is not specified. Default value: false.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.

This parameter is required.', example='ecd-ia2zw38bi6cm7****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Valid values:

* ALIYUN::GWS::INSTANCE: cloud computer.

This parameter is required.', example='ALIYUN::GWS::INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. You can specify 1 to 20 tag keys.', example='TestKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFotaTaskRequest {
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.

This parameter is required.', example='cn-hangzhou', position='Query'),
  taskUid: string(name='TaskUid', description='The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.

This parameter is required.', example='aot-c4khwrp9ocml4****', position='Query'),
  userStatus?: string(name='UserStatus', description='Specifies whether to automatically push the image update task.

Valid values:

*   Running: automatically pushes the image update task.
*   Pending: does not automatically push the image update task.', example='Pending', position='Query'),
}

model UpdateFotaTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateFotaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFotaTaskResponseBody(name='body'),
}

/**
  * @description You can call this operation to manage each image update task. This operation is valid only when the auto-update switch in the image update module for global image updates is turned off. If the auto-update switch is turned on, the switches for each image update task are always turned on. If you want to turn on or off the auto-update switch, go to the Elastic Desktop Service console and choose **Operations > Image Updates** in the left-side navigation pane.
  * @param request  the request parameters of UpdateFotaTask  UpdateFotaTaskRequest
  * @return UpdateFotaTaskResponse
 */
async function updateFotaTask(request: UpdateFotaTaskRequest): UpdateFotaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFotaTask', 'POST', '/', 'json', false, 'json', request);
}

model UploadImageRequest {
  dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Valid values: 80 to 500. Unit: GiB.', example='80', minimum=5, maximum=500, position='Query'),
  description?: string(name='Description', description='The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='test description', position='Query'),
  enableSecurityCheck?: boolean(name='EnableSecurityCheck', description='Specifies whether to enable security check.', example='true', position='Query'),
  gpuCategory?: boolean(name='GpuCategory', description='Specifies whether the image is a GPU-accelerated image.', example='true', position='Query'),
  gpuDriverType?: string(name='GpuDriverType', description='The type of the pre-installed GPU driver.

Valid values:

*   gpu_grid9: This GPU driver is used on cloud computers of the following two specifications: graphics – 4 vCPUs, 23 GiB memory, 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, 8 GiB GPU memory.
*   gpu_custom: You can install the driver later.
*   gpu_grid12: This GPU driver is used on graphical cloud computers of specifications other than the following two specifications: graphics – 4 vCPUs, 23 GiB memory, & 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, & 8 GiB GPU memory.', example='gpu_grid9', position='Query'),
  imageName: string(name='ImageName', description='The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

This parameter is required.', example='Win10_Test', position='Query'),
  licenseType?: string(name='LicenseType', description='The type of the license that is used to activate the operating system after the image is imported. Valid values:

*   Auto: Elastic Desktop Service detects the operating system of the image and allocates a license to the operating system. In this mode, the system first checks whether a license allocated by an official Alibaba Cloud channel is specified in the `Platform`. If a license allocated by an official Alibaba Cloud channel is specified, the system allocates the license to the imported image. If no such license is specified, the BYOL (Bring Your Own License) mode is used.
*   Aliyun: The license that is allocated by an official Alibaba Cloud channel and is specified by `Platform` is used for the operating system distribution.
*   BYOL: The license that comes with the source operating system is used. When you use the BYOL mode, make sure that your license key is supported by Alibaba Cloud.

Default value: Auto.

>  Windows 10 cannot be activated by Alibaba Cloud. Set the `LicenseType` to BYOL for Windows 10.', example='Auto', position='Query'),
  osType?: string(name='OsType', description='The type of the operating system.

Valid values:

*   Linux

    <!-- -->

    <!-- -->

    <!-- -->

*   Windows

    <!-- -->

    <!-- -->

    <!-- -->', example='Windows', position='Query'),
  ossObjectPath: string(name='OssObjectPath', description='The object path of the image file in Object Storage Service (OSS).

This parameter is required.', example='https://ossbucket:endpoint/object', position='Query'),
  protocolType?: string(name='ProtocolType', description='The protocol type.

Valid values:

*   ASP: in-house Adaptive Streaming Protocol (ASP)', example='ASP', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  systemDiskSize?: string(name='SystemDiskSize', description='The size of the system disk. Unit: GB.

> The size of the system disk cannot be smaller than the size of the image.', example='80', position='Query'),
}

model UploadImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-d4dwr5tgrgvd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CC66B0A-BA3B-5D87-BFBE-11AAAD7A****'),
}

model UploadImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadImageResponseBody(name='body'),
}

/**
  * @description >  You can upload only Windows images.
  * @param request  the request parameters of UploadImage  UploadImageRequest
  * @return UploadImageResponse
 */
async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadImage', 'POST', '/', 'json', false, 'json', request);
}

model VerifyCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.

This parameter is required.', example='cen-3gwy16dojz1m65****', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', description='The Alibaba Cloud account to which the CEN instance belongs.

*   If you own the CEN instance, you can skip this parameter.
*   If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.', example='102681951715****', position='Query'),
  cidrBlock: string(name='CidrBlock', description='The IPv4 CIDR block of the associated office network.

This parameter is required.', example='47.100.XX.XX', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  verifyCode?: string(name='VerifyCode', description='The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.', example='12****', position='Query'),
}

model VerifyCenResponseBody = {
  cidrBlocks?: [ string ](name='CidrBlocks', description='The recommended IPv4 CIDR blocks. Three CIDR blocks are randomly recommended. This parameter is returned when the `Status` value is `Conflict`.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AF9D857-AE96-53D6-B317-5DD665EC4EC0'),
  routeEntries?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The CIDR block of the route.', example='172.16.111.3****'),
      nextHopInstanceId?: string(name='NextHopInstanceId', description='The ID of the instance corresponding to the route.', example='vpc-uf62bu0xs5j8md54p****'),
      regionId?: string(name='RegionId', description='The region ID of the route.', example='cn-hangzhou'),
      status?: string(name='Status', description='The verification result of the route.

Valid values:

*   Conflict: A CIDR block conflict exists.
*   Access: The verification is passed.', example='Access'),
    }
  ](name='RouteEntries', description='The routes provided by the CEN instance.'),
  status?: string(name='Status', description='The check result of CIDR block conflict.

Valid values:

*   InvalidCen.CenUidInvalid: The Alibaba Cloud account is invalid or the Alibaba Cloud account does not have the permission to access Elastic Desktop Service.
*   VerifyCode.InvalidTokenCode: The verification code is invalid.
*   VerifyCode.ReachTokenRetryTime: The maximum number of times for entering a verification code reaches the limit.
*   Conflict: A CIDR block conflict exists. If the verification result of at least one route is Conflict, Conflict is returned for this parameter.
*   Access: The verification is passed. If the verification result for all routes is Access, Access is returned for this parameter.
*   InvalidCen.ParameterCenInstanceId: The Alibaba Cloud account does not own the CEN instance.', example='Access'),
}

model VerifyCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyCenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyCen  VerifyCenRequest
  * @return VerifyCenResponse
 */
async function verifyCen(request: VerifyCenRequest): VerifyCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyCen', 'POST', '/', 'json', false, 'json', request);
}

model WakeupDesktopsRequest {
  desktopId: [ string ](name='DesktopId', description='The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.

This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model WakeupDesktopsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6557DBA9-CF3E-5C1B-B1F1-68FDA599****'),
}

model WakeupDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WakeupDesktopsResponseBody(name='body'),
}

/**
  * @description Only cloud computers that are in the Hibernated state can be waked up.
  * @param request  the request parameters of WakeupDesktops  WakeupDesktopsRequest
  * @return WakeupDesktopsResponse
 */
async function wakeupDesktops(request: WakeupDesktopsRequest): WakeupDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WakeupDesktops', 'POST', '/', 'json', false, 'json', request);
}

