/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IntlMarket';
  @version = '2025-08-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribePriceRequest {
  commodity?: string(name='Commodity', example='{\\"duration\\": 1, \\"productCode\\": \\"cmjz000325\\", \\"quantity\\": 1, \\"pricingCycle\\": \\"Year\\", \\"skuCode\\": \\"jichuban\\"}', position='Query'),
  orderType?: string(name='OrderType', example='DOWNGRADE', position='Query'),
}

model DescribePriceResponseBody = {
  code?: string(name='Code', example='200'),
  coupons?: [ 
    {
      canPromFee?: long(name='CanPromFee', example='CanPromFee'),
      couponName?: string(name='CouponName', example='CouponName'),
      couponOptionCode?: string(name='CouponOptionCode', example='CouponOptionCode'),
      couponOptionNo?: string(name='CouponOptionNo', example='CouponOptionNo'),
      isSelected?: boolean(name='IsSelected', example='IsSelected'),
      promotionDesc?: string(name='PromotionDesc', example='PromotionDesc'),
    }
  ](name='Coupons'),
  currency?: string(name='Currency', example='CNY'),
  cuxiao?: boolean(name='Cuxiao'),
  cycle?: string(name='Cycle', example='once'),
  discountPrice?: float(name='DiscountPrice', example='0.0'),
  duration?: int32(name='Duration', example='3'),
  expressionCode?: string(name='ExpressionCode', example='NO_AVAILABLE_PAYMENT_METHOD'),
  expressionMessage?: string(name='ExpressionMessage', example='ExpressionMessage'),
  infoTitle?: string(name='InfoTitle', example='139.41'),
  message?: string(name='Message', example='OK'),
  originalPrice?: float(name='OriginalPrice', example='2099.0'),
  productCode?: string(name='ProductCode', example='csas'),
  promotionRules?: [ 
    {
      name?: string(name='Name', example='alb-xdnghlhvm9vvo1sk54_Accelerator'),
      ruleId?: string(name='RuleId', example='1827975'),
      title?: string(name='Title', example='12'),
    }
  ](name='PromotionRules'),
  requestId?: string(name='RequestId', example='054AF571-C86F-533F-8A7B-F62206FA4367'),
  tradePrice?: float(name='TradePrice', example='1320.0'),
}

model DescribePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePrice  DescribePriceRequest
  * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

