/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('intlmarket', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateOrderRequest {
  clientToken?: string(name='ClientToken', description='This parameter is required.', example='dhjggh7'),
  commodity?: string(name='Commodity', description='This parameter is required.', example='{\\\\"productCode\\\\":\\\\"cmgj00063418\\\\",\\\\"skuCode\\\\":\\\\"postpay\\\\",\\\\"pricingCycle\\\\":\\\\"YEAR\\\\"}'),
  orderSouce?: string(name='OrderSouce', example='ros'),
  orderType?: string(name='OrderType', description='This parameter is required.', example='INSTANCE_BUY'),
  ownerId?: string(name='OwnerId'),
  paymentType?: string(name='PaymentType', description='This parameter is required.', example='Subscription'),
}

model CreateOrderResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  orderId?: string(name='OrderId', example='12809858'),
  requestId?: string(name='RequestId', example='054AF571-C86F-533F-8A7B-F62206FA4367'),
}

model CreateOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrderResponseBody(name='body'),
}

/**
 * @summary 创建云市场订单
 *
 * @param request CreateOrderRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOrderResponse
 */
@context("createOrderWithContext")
async function createOrderWithOptions(request: CreateOrderRequest, runtime: $RuntimeOptions): CreateOrderResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!$isNull(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!$isNull(request.orderSouce)) {
    query['OrderSouce'] = request.orderSouce;
  }
  if (!$isNull(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateOrder',
    version = '2025-08-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建云市场订单
 *
 * @param request CreateOrderRequest
 * @return CreateOrderResponse
 */
async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new $RuntimeOptions{};
  return createOrderWithOptions(request, runtime);
}

model DescribePriceRequest {
  commodity?: string(name='Commodity', example='{\\\\"duration\\\\": 1, \\\\"productCode\\\\": \\\\"cmjz000325\\\\", \\\\"quantity\\\\": 1, \\\\"pricingCycle\\\\": \\\\"Year\\\\", \\\\"skuCode\\\\": \\\\"jichuban\\\\"}'),
  orderType?: string(name='OrderType', example='DOWNGRADE'),
}

model DescribePriceResponseBody = {
  code?: string(name='Code', example='200'),
  coupons?: [ 
    {
      canPromFee?: long(name='CanPromFee', example='CanPromFee'),
      couponName?: string(name='CouponName', example='CouponName'),
      couponOptionCode?: string(name='CouponOptionCode', example='CouponOptionCode'),
      couponOptionNo?: string(name='CouponOptionNo', example='CouponOptionNo'),
      isSelected?: boolean(name='IsSelected', example='IsSelected'),
      promotionDesc?: string(name='PromotionDesc', example='PromotionDesc'),
    }
  ](name='Coupons'),
  currency?: string(name='Currency', example='CNY'),
  cuxiao?: boolean(name='Cuxiao'),
  cycle?: string(name='Cycle', example='once'),
  discountPrice?: float(name='DiscountPrice', example='0.0'),
  duration?: int32(name='Duration', example='3'),
  expressionCode?: string(name='ExpressionCode', example='NO_AVAILABLE_PAYMENT_METHOD'),
  expressionMessage?: string(name='ExpressionMessage', example='ExpressionMessage'),
  infoTitle?: string(name='InfoTitle', example='139.41'),
  message?: string(name='Message', example='OK'),
  originalPrice?: float(name='OriginalPrice', example='2099.0'),
  productCode?: string(name='ProductCode', example='csas'),
  promotionRules?: [ 
    {
      name?: string(name='Name', example='alb-xdnghlhvm9vvo1sk54_Accelerator'),
      ruleId?: string(name='RuleId', example='1827975'),
      title?: string(name='Title', example='12'),
    }
  ](name='PromotionRules'),
  requestId?: string(name='RequestId', example='054AF571-C86F-533F-8A7B-F62206FA4367'),
  tradePrice?: float(name='TradePrice', example='1320.0'),
}

model DescribePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceResponseBody(name='body'),
}

/**
 * @summary 询价
 *
 * @param request DescribePriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePriceResponse
 */
@context("describePriceWithContext")
async function describePriceWithOptions(request: DescribePriceRequest, runtime: $RuntimeOptions): DescribePriceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.commodity)) {
    query['Commodity'] = request.commodity;
  }
  if (!$isNull(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribePrice',
    version = '2025-08-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 询价
 *
 * @param request DescribePriceRequest
 * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new $RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

