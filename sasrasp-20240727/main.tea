/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('sasrasp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeAttackProtectionCountRequest {
  agentType?: string(name='AgentType', example='sas'),
  endTimestamp?: int32(name='EndTimestamp', description='This parameter is required.', example='1767456000000'),
  startTimestamp?: int32(name='StartTimestamp', description='This parameter is required.', example='1739289981765'),
}

model DescribeAttackProtectionCountResponseBody = {
  blockHighCount?: long(name='BlockHighCount', example='0'),
  blockLowCount?: long(name='BlockLowCount', example='0'),
  blockMediumCount?: long(name='BlockMediumCount', example='0'),
  monitorHighCount?: long(name='MonitorHighCount', example='0'),
  monitorLowCount?: long(name='MonitorLowCount', example='0'),
  monitorMediumCount?: long(name='MonitorMediumCount', example='0'),
  requestId?: string(name='RequestId', example='400E8C8C-ADD3-5F25-9038-BDC057841D20'),
  totalRequestCount?: long(name='TotalRequestCount', example='61134279'),
}

model DescribeAttackProtectionCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAttackProtectionCountResponseBody(name='body'),
}

/**
 * @summary DescribeAttackProtectionCount
 *
 * @param request DescribeAttackProtectionCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAttackProtectionCountResponse
 */
async function describeAttackProtectionCountWithOptions(request: DescribeAttackProtectionCountRequest, runtime: Util.RuntimeOptions): DescribeAttackProtectionCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentType)) {
    query['AgentType'] = request.agentType;
  }
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttackProtectionCount',
    version = '2024-07-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DescribeAttackProtectionCount
 *
 * @param request DescribeAttackProtectionCountRequest
 * @return DescribeAttackProtectionCountResponse
 */
async function describeAttackProtectionCount(request: DescribeAttackProtectionCountRequest): DescribeAttackProtectionCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackProtectionCountWithOptions(request, runtime);
}

model DescribeAttacksRequest {
  agentType?: string(name='AgentType', example='sas'),
  applicationId?: string(name='ApplicationId', example='67e283ee866f097cf07d****'),
  attackHostId?: string(name='AttackHostId', example='127.0.0.1'),
  attackType?: string(name='AttackType', example='sql'),
  attackUrl?: string(name='AttackUrl', example='http://aliyun.com'),
  endTimestamp?: long(name='EndTimestamp', description='This parameter is required.', example='1737216000000'),
  handlerType?: string(name='HandlerType', example='block'),
  hostname?: string(name='Hostname', example='lshm-sec-waf-new-38'),
  ip?: string(name='Ip', example='127.0.0.1'),
  lang?: string(name='Lang', example='zh'),
  pageNumber?: long(name='PageNumber', example='4'),
  pageSize?: long(name='PageSize', example='10'),
  pid?: string(name='Pid'),
  raspType?: string(name='RaspType', example='java'),
  region?: string(name='Region', example='cn-hangzhou'),
  remote?: string(name='Remote'),
  severity?: string(name='Severity', example='high'),
  startTimestamp?: long(name='StartTimestamp', description='This parameter is required.', example='1727281449756'),
  unionId?: string(name='UnionId', example='2d14556b77cf1bf7c696e010aaa*****'),
}

model DescribeAttacksResponseBody = {
  attacks?: [ 
    {
      appDir?: string(name='AppDir', example='/app'),
      appId?: string(name='AppId', example='661dece60bb1'),
      appName?: string(name='AppName', example='zhxy'),
      avd?: string(name='Avd', example='null'),
      cmdline?: string(name='Cmdline', example='jar'),
      confidence?: string(name='Confidence', example='high'),
      content?: string(name='Content', example='{\\\\"Exist\\\\": \\\\"false\\\\"}'),
      contentLength?: long(name='ContentLength', example='1024'),
      count?: long(name='Count', example='1'),
      data?: string(name='Data', example='{\\\\"All\\\\": 12, \\\\"Online\\\\": 9}'),
      headers?: string(name='Headers', example='{\\\\"X-Total-Count\\\\": 1}'),
      hostId?: string(name='HostId', example='100.116.60.78'),
      hostname?: string(name='Hostname', example='hostnames'),
      inputParamItemList?: [ 
        {
          processedKey?: string(name='ProcessedKey', example='4E7772EA-1AD0-5583-BA55-A4****'),
          rawKey?: string(name='RawKey', example='4E7772EA-1AD0-5583-BA55-A4****'),
          value?: string(name='Value', example='10.101.9.189'),
        }
      ](name='InputParamItemList'),
      installType?: long(name='InstallType'),
      ip?: string(name='Ip', example='47.92.92.85'),
      jdk?: string(name='Jdk', example='1.8.0_342'),
      language?: string(name='Language', example='cn'),
      languageVersion?: string(name='LanguageVersion', example='1.0'),
      maxTimestamp?: long(name='MaxTimestamp', example='1727281449756'),
      message?: string(name='Message'),
      method?: string(name='Method', example='POST'),
      middlewareInstanceId?: string(name='MiddlewareInstanceId', example='null'),
      minTimestamp?: long(name='MinTimestamp', example='1727281449756'),
      os?: string(name='Os', example='linux'),
      osArch?: string(name='OsArch', example='linux'),
      osVersion?: string(name='OsVersion', example='aliyun_V3_5.1'),
      param?: string(name='Param', example='PUBLIC_CLOUD'),
      payload?: string(name='Payload', example='245256'),
      payloadLength?: long(name='PayloadLength', example='100'),
      pid?: string(name='Pid', example='29719'),
      raspVersion?: string(name='RaspVersion', example='php'),
      region?: string(name='Region', example='cn-shanghai'),
      remote?: string(name='Remote', example='192.168.1.1'),
      result?: string(name='Result', example='[{\\\\"TagKey\\\\": \\\\"acs:rm:rgId\\\\", \\\\"TagValue\\\\": \\\\"rg-aek25bwhtt22cjq\\\\"}]'),
      ruleResult?: string(name='RuleResult', example='2'),
      severity?: string(name='Severity', example='low'),
      stacktrace?: [ string ](name='Stacktrace'),
      time?: string(name='Time', example='1724033134746'),
      timestamp?: long(name='Timestamp', example='1712284140'),
      type?: string(name='Type', example='exact'),
      unionId?: string(name='UnionId', description='unionId。', example='23yaet4dg6ek3s7aj'),
      url?: string(name='Url', example='https://other-general-huadong1.oss-cn-hangzhou.aliyuncs.com/uploadWidget/TaxiInvoice_01.jpeg'),
    }
  ](name='Attacks'),
  requestId?: string(name='RequestId', example='4E7772EA-1AD0-5583-BA55-A4E7B65F****'),
  totalCount?: long(name='TotalCount', example='289'),
}

model DescribeAttacksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAttacksResponseBody(name='body'),
}

/**
 * @summary 查询攻击项
 *
 * @param request DescribeAttacksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAttacksResponse
 */
async function describeAttacksWithOptions(request: DescribeAttacksRequest, runtime: Util.RuntimeOptions): DescribeAttacksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentType)) {
    query['AgentType'] = request.agentType;
  }
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.attackHostId)) {
    query['AttackHostId'] = request.attackHostId;
  }
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.attackUrl)) {
    query['AttackUrl'] = request.attackUrl;
  }
  if (!Util.isUnset(request.endTimestamp)) {
    query['EndTimestamp'] = request.endTimestamp;
  }
  if (!Util.isUnset(request.handlerType)) {
    query['HandlerType'] = request.handlerType;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.raspType)) {
    query['RaspType'] = request.raspType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.remote)) {
    query['Remote'] = request.remote;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.startTimestamp)) {
    query['StartTimestamp'] = request.startTimestamp;
  }
  if (!Util.isUnset(request.unionId)) {
    query['UnionId'] = request.unionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttacks',
    version = '2024-07-27',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询攻击项
 *
 * @param request DescribeAttacksRequest
 * @return DescribeAttacksResponse
 */
async function describeAttacks(request: DescribeAttacksRequest): DescribeAttacksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttacksWithOptions(request, runtime);
}

