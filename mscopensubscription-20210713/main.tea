/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mscopensubscription', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateContactRequest {
  clientToken?: string(name='ClientToken'),
  contactName?: string(name='ContactName'),
  email?: string(name='Email'),
  locale?: string(name='Locale'),
  mobile?: string(name='Mobile'),
  position?: string(name='Position'),
}

model CreateContactResponseBody = {
  code?: string(name='Code'),
  contactId?: long(name='ContactId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContactResponseBody(name='body'),
}

async function createContactWithOptions(request: CreateContactRequest, runtime: Util.RuntimeOptions): CreateContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactName)) {
    body['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.email)) {
    body['Email'] = request.email;
  }
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.position)) {
    body['Position'] = request.position;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateContact',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createContact(request: CreateContactRequest): CreateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createContactWithOptions(request, runtime);
}

model CreateSubscriptionItemRequest {
  itemName?: string(name='ItemName'),
  locale?: string(name='Locale'),
}

model CreateSubscriptionItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subscriptionItem?: {
    channel?: string(name='Channel'),
    contactIds?: [ long ](name='ContactIds'),
    description?: string(name='Description'),
    emailStatus?: int32(name='EmailStatus'),
    itemId?: int32(name='ItemId'),
    itemName?: string(name='ItemName'),
    pmsgStatus?: int32(name='PmsgStatus'),
    smsStatus?: int32(name='SmsStatus'),
    ttsStatus?: int32(name='TtsStatus'),
    webhookIds?: [ long ](name='WebhookIds'),
    webhookStatus?: int32(name='WebhookStatus'),
  }(name='SubscriptionItem'),
  success?: boolean(name='Success'),
}

model CreateSubscriptionItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubscriptionItemResponseBody(name='body'),
}

async function createSubscriptionItemWithOptions(request: CreateSubscriptionItemRequest, runtime: Util.RuntimeOptions): CreateSubscriptionItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.itemName)) {
    body['ItemName'] = request.itemName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscriptionItem',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubscriptionItem(request: CreateSubscriptionItemRequest): CreateSubscriptionItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscriptionItemWithOptions(request, runtime);
}

model CreateWebhookRequest {
  clientToken?: string(name='ClientToken'),
  locale?: string(name='Locale'),
  serverUrl?: string(name='ServerUrl'),
  webhookName?: string(name='WebhookName'),
}

model CreateWebhookResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  webhookId?: long(name='WebhookId'),
}

model CreateWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWebhookResponseBody(name='body'),
}

async function createWebhookWithOptions(request: CreateWebhookRequest, runtime: Util.RuntimeOptions): CreateWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.serverUrl)) {
    body['ServerUrl'] = request.serverUrl;
  }
  if (!Util.isUnset(request.webhookName)) {
    body['WebhookName'] = request.webhookName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateWebhook',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWebhook(request: CreateWebhookRequest): CreateWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWebhookWithOptions(request, runtime);
}

model DeleteContactRequest {
  contactId?: long(name='ContactId'),
  locale?: string(name='Locale'),
}

model DeleteContactResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model DeleteContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContactResponseBody(name='body'),
}

async function deleteContactWithOptions(request: DeleteContactRequest, runtime: Util.RuntimeOptions): DeleteContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactId)) {
    body['ContactId'] = request.contactId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteContact',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteContactWithOptions(request, runtime);
}

model DeleteWebhookRequest {
  locale?: string(name='Locale'),
  webhookId?: long(name='WebhookId'),
}

model DeleteWebhookResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model DeleteWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteWebhookResponseBody(name='body'),
}

async function deleteWebhookWithOptions(request: DeleteWebhookRequest, runtime: Util.RuntimeOptions): DeleteWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.webhookId)) {
    body['WebhookId'] = request.webhookId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebhook',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebhook(request: DeleteWebhookRequest): DeleteWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebhookWithOptions(request, runtime);
}

model GetContactRequest {
  contactId?: long(name='ContactId'),
  locale?: string(name='Locale'),
}

model GetContactResponseBody = {
  code?: string(name='Code'),
  contact?: {
    accountUid?: long(name='AccountUid'),
    contactId?: long(name='ContactId'),
    contactName?: string(name='ContactName'),
    email?: string(name='Email'),
    isAccount?: boolean(name='IsAccount'),
    isObsolete?: boolean(name='IsObsolete'),
    isVerifiedEmail?: boolean(name='IsVerifiedEmail'),
    isVerifiedMobile?: boolean(name='IsVerifiedMobile'),
    lastEmailVerificationTimeStamp?: long(name='LastEmailVerificationTimeStamp'),
    lastMobileVerificationTimeStamp?: long(name='LastMobileVerificationTimeStamp'),
    mobile?: string(name='Mobile'),
    position?: string(name='Position'),
  }(name='Contact'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContactResponseBody(name='body'),
}

async function getContactWithOptions(request: GetContactRequest, runtime: Util.RuntimeOptions): GetContactResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetContact',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getContact(request: GetContactRequest): GetContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getContactWithOptions(request, runtime);
}

model GetSubscriptionItemRequest {
  itemId?: int32(name='ItemId'),
  locale?: string(name='Locale'),
}

model GetSubscriptionItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subscriptionItem?: {
    channel?: string(name='Channel'),
    contactIds?: [ long ](name='ContactIds'),
    description?: string(name='Description'),
    emailStatus?: int32(name='EmailStatus'),
    itemId?: int32(name='ItemId'),
    itemName?: string(name='ItemName'),
    pmsgStatus?: int32(name='PmsgStatus'),
    smsStatus?: int32(name='SmsStatus'),
    ttsStatus?: int32(name='TtsStatus'),
    webhookIds?: [ long ](name='WebhookIds'),
    webhookStatus?: int32(name='WebhookStatus'),
  }(name='SubscriptionItem'),
  success?: boolean(name='Success'),
}

model GetSubscriptionItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubscriptionItemResponseBody(name='body'),
}

async function getSubscriptionItemWithOptions(request: GetSubscriptionItemRequest, runtime: Util.RuntimeOptions): GetSubscriptionItemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionItem',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubscriptionItem(request: GetSubscriptionItemRequest): GetSubscriptionItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionItemWithOptions(request, runtime);
}

model GetSubscriptionItemDetailRequest {
  itemId?: int32(name='ItemId'),
  locale?: string(name='Locale'),
}

model GetSubscriptionItemDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subscriptionItemDetail?: {
    channel?: string(name='Channel'),
    contacts?: [ 
      {
        accountUID?: long(name='AccountUID'),
        contactId?: long(name='ContactId'),
        email?: string(name='Email'),
        isAccount?: boolean(name='IsAccount'),
        isObsolete?: boolean(name='IsObsolete'),
        isVerifiedEmail?: boolean(name='IsVerifiedEmail'),
        isVerifiedMobile?: boolean(name='IsVerifiedMobile'),
        lastEmailVerificationTimeStamp?: long(name='LastEmailVerificationTimeStamp'),
        lastMobileVerificationTimeStamp?: long(name='LastMobileVerificationTimeStamp'),
        mobile?: string(name='Mobile'),
        name?: string(name='Name'),
        position?: string(name='Position'),
      }
    ](name='Contacts'),
    description?: string(name='Description'),
    emailStatus?: int32(name='EmailStatus'),
    itemId?: int32(name='ItemId'),
    itemName?: string(name='ItemName'),
    pmsgStatus?: int32(name='PmsgStatus'),
    regionId?: string(name='RegionId'),
    smsStatus?: int32(name='SmsStatus'),
    ttsStatus?: int32(name='TtsStatus'),
    webhookStatus?: int32(name='WebhookStatus'),
    webhooks?: [ 
      {
        name?: string(name='Name'),
        serverUrl?: string(name='ServerUrl'),
        webhookId?: long(name='WebhookId'),
      }
    ](name='Webhooks'),
  }(name='SubscriptionItemDetail'),
  success?: boolean(name='Success'),
}

model GetSubscriptionItemDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubscriptionItemDetailResponseBody(name='body'),
}

async function getSubscriptionItemDetailWithOptions(request: GetSubscriptionItemDetailRequest, runtime: Util.RuntimeOptions): GetSubscriptionItemDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionItemDetail',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubscriptionItemDetail(request: GetSubscriptionItemDetailRequest): GetSubscriptionItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionItemDetailWithOptions(request, runtime);
}

model GetWebhookRequest {
  locale?: string(name='Locale'),
  webhookId?: long(name='WebhookId'),
}

model GetWebhookResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  webhook?: {
    serverUrl?: string(name='ServerUrl'),
    webhookId?: long(name='WebhookId'),
    webhookName?: string(name='WebhookName'),
  }(name='Webhook'),
}

model GetWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWebhookResponseBody(name='body'),
}

async function getWebhookWithOptions(request: GetWebhookRequest, runtime: Util.RuntimeOptions): GetWebhookResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWebhook',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWebhook(request: GetWebhookRequest): GetWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWebhookWithOptions(request, runtime);
}

model ListContactsRequest {
  contactId?: long(name='ContactId'),
  filter?: string(name='Filter'),
  locale?: string(name='Locale'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListContactsResponseBody = {
  code?: string(name='Code'),
  contacts?: [ 
    {
      accountUid?: long(name='AccountUid'),
      contactId?: long(name='ContactId'),
      contactName?: string(name='ContactName'),
      email?: string(name='Email'),
      isAccount?: boolean(name='IsAccount'),
      isObsolete?: boolean(name='IsObsolete'),
      isVerifiedEmail?: boolean(name='IsVerifiedEmail'),
      isVerifiedMobile?: boolean(name='IsVerifiedMobile'),
      lastEmailVerificationTimeStamp?: long(name='LastEmailVerificationTimeStamp'),
      lastMobileVerificationTimeStamp?: long(name='LastMobileVerificationTimeStamp'),
      mobile?: string(name='Mobile'),
      position?: string(name='Position'),
    }
  ](name='Contacts'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListContactsResponseBody(name='body'),
}

async function listContactsWithOptions(request: ListContactsRequest, runtime: Util.RuntimeOptions): ListContactsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListContacts',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listContacts(request: ListContactsRequest): ListContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listContactsWithOptions(request, runtime);
}

model ListSubscriptionItemGroupDetailsRequest {
  locale?: string(name='Locale'),
}

model ListSubscriptionItemGroupDetailsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  subscriptionItemGroupDetails?: [ 
    {
      description?: string(name='Description'),
      itemDetails?: [ 
        {
          channel?: string(name='Channel'),
          contacts?: [ 
            {
              accountUID?: long(name='AccountUID'),
              contactId?: long(name='ContactId'),
              email?: string(name='Email'),
              isAccount?: boolean(name='IsAccount'),
              isObsolete?: boolean(name='IsObsolete'),
              isVerifiedEmail?: boolean(name='IsVerifiedEmail'),
              isVerifiedMobile?: boolean(name='IsVerifiedMobile'),
              lastEmailVerificationTimeStamp?: long(name='LastEmailVerificationTimeStamp'),
              lastMobileVerificationTimeStamp?: long(name='LastMobileVerificationTimeStamp'),
              mobile?: string(name='Mobile'),
              name?: string(name='Name'),
              position?: string(name='Position'),
            }
          ](name='Contacts'),
          description?: string(name='Description'),
          emailStatus?: int32(name='EmailStatus'),
          itemId?: int32(name='ItemId'),
          itemName?: string(name='ItemName'),
          pmsgStatus?: int32(name='PmsgStatus'),
          regionId?: string(name='RegionId'),
          smsStatus?: int32(name='SmsStatus'),
          ttsStatus?: int32(name='TtsStatus'),
          webhookStatus?: int32(name='WebhookStatus'),
          webhooks?: [ 
            {
              name?: string(name='Name'),
              serverUrl?: string(name='ServerUrl'),
              webhookId?: long(name='WebhookId'),
            }
          ](name='Webhooks'),
        }
      ](name='ItemDetails'),
      itemGroupId?: int32(name='ItemGroupId'),
      itemGroupName?: string(name='ItemGroupName'),
    }
  ](name='SubscriptionItemGroupDetails'),
  success?: boolean(name='Success'),
}

model ListSubscriptionItemGroupDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubscriptionItemGroupDetailsResponseBody(name='body'),
}

async function listSubscriptionItemGroupDetailsWithOptions(request: ListSubscriptionItemGroupDetailsRequest, runtime: Util.RuntimeOptions): ListSubscriptionItemGroupDetailsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubscriptionItemGroupDetails',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubscriptionItemGroupDetails(request: ListSubscriptionItemGroupDetailsRequest): ListSubscriptionItemGroupDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubscriptionItemGroupDetailsWithOptions(request, runtime);
}

model ListSubscriptionItemsRequest {
  filter?: string(name='Filter'),
  itemId?: int32(name='ItemId'),
  locale?: string(name='Locale'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model ListSubscriptionItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  subscriptionItems?: [ 
    {
      channel?: string(name='Channel'),
      contactIds?: [ long ](name='ContactIds'),
      description?: string(name='Description'),
      emailStatus?: int32(name='EmailStatus'),
      itemId?: int32(name='ItemId'),
      itemName?: string(name='ItemName'),
      pmsgStatus?: int32(name='PmsgStatus'),
      smsStatus?: int32(name='SmsStatus'),
      ttsStatus?: int32(name='TtsStatus'),
      webhookIds?: [ long ](name='WebhookIds'),
      webhookStatus?: int32(name='WebhookStatus'),
    }
  ](name='SubscriptionItems'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListSubscriptionItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubscriptionItemsResponseBody(name='body'),
}

async function listSubscriptionItemsWithOptions(request: ListSubscriptionItemsRequest, runtime: Util.RuntimeOptions): ListSubscriptionItemsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubscriptionItems',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSubscriptionItems(request: ListSubscriptionItemsRequest): ListSubscriptionItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubscriptionItemsWithOptions(request, runtime);
}

model ListWebhooksRequest {
  filter?: string(name='Filter'),
  locale?: string(name='Locale'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  webhookId?: long(name='WebhookId'),
}

model ListWebhooksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  webhooks?: [ 
    {
      serverUrl?: string(name='ServerUrl'),
      webhookId?: long(name='WebhookId'),
      webhookName?: string(name='WebhookName'),
    }
  ](name='Webhooks'),
}

model ListWebhooksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListWebhooksResponseBody(name='body'),
}

async function listWebhooksWithOptions(request: ListWebhooksRequest, runtime: Util.RuntimeOptions): ListWebhooksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListWebhooks',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listWebhooks(request: ListWebhooksRequest): ListWebhooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWebhooksWithOptions(request, runtime);
}

model SendVerificationMessageRequest {
  contactId?: long(name='ContactId'),
  locale?: string(name='Locale'),
  type?: int32(name='Type'),
}

model SendVerificationMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  success?: boolean(name='Success'),
}

model SendVerificationMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerificationMessageResponseBody(name='body'),
}

async function sendVerificationMessageWithOptions(request: SendVerificationMessageRequest, runtime: Util.RuntimeOptions): SendVerificationMessageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerificationMessage',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendVerificationMessage(request: SendVerificationMessageRequest): SendVerificationMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationMessageWithOptions(request, runtime);
}

model UpdateContactRequest {
  clientToken?: string(name='ClientToken'),
  contactId?: long(name='ContactId'),
  contactName?: string(name='ContactName'),
  email?: string(name='Email'),
  locale?: string(name='Locale'),
  mobile?: string(name='Mobile'),
}

model UpdateContactResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateContactResponseBody(name='body'),
}

async function updateContactWithOptions(request: UpdateContactRequest, runtime: Util.RuntimeOptions): UpdateContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactId)) {
    body['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactName)) {
    body['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.email)) {
    body['Email'] = request.email;
  }
  if (!Util.isUnset(request.mobile)) {
    body['Mobile'] = request.mobile;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateContact',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateContact(request: UpdateContactRequest): UpdateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateContactWithOptions(request, runtime);
}

model UpdateSubscriptionItemRequest {
  clientToken?: string(name='ClientToken'),
  contactIds?: [ long ](name='ContactIds'),
  emailStatus?: int32(name='EmailStatus'),
  itemId?: int32(name='ItemId'),
  locale?: string(name='Locale'),
  pmsgStatus?: int32(name='PmsgStatus'),
  regionId?: string(name='RegionId'),
  smsStatus?: int32(name='SmsStatus'),
  ttsStatus?: int32(name='TtsStatus'),
  webhookIds?: [ long ](name='WebhookIds'),
  webhookStatus?: int32(name='WebhookStatus'),
}

model UpdateSubscriptionItemShrinkRequest {
  clientToken?: string(name='ClientToken'),
  contactIdsShrink?: string(name='ContactIds'),
  emailStatus?: int32(name='EmailStatus'),
  itemId?: int32(name='ItemId'),
  locale?: string(name='Locale'),
  pmsgStatus?: int32(name='PmsgStatus'),
  regionId?: string(name='RegionId'),
  smsStatus?: int32(name='SmsStatus'),
  ttsStatus?: int32(name='TtsStatus'),
  webhookIdsShrink?: string(name='WebhookIds'),
  webhookStatus?: int32(name='WebhookStatus'),
}

model UpdateSubscriptionItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateSubscriptionItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSubscriptionItemResponseBody(name='body'),
}

async function updateSubscriptionItemWithOptions(tmpReq: UpdateSubscriptionItemRequest, runtime: Util.RuntimeOptions): UpdateSubscriptionItemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSubscriptionItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contactIds)) {
    request.contactIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contactIds, 'ContactIds', 'json');
  }
  if (!Util.isUnset(tmpReq.webhookIds)) {
    request.webhookIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.webhookIds, 'WebhookIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactIdsShrink)) {
    body['ContactIds'] = request.contactIdsShrink;
  }
  if (!Util.isUnset(request.emailStatus)) {
    body['EmailStatus'] = request.emailStatus;
  }
  if (!Util.isUnset(request.itemId)) {
    body['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.pmsgStatus)) {
    body['PmsgStatus'] = request.pmsgStatus;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.smsStatus)) {
    body['SmsStatus'] = request.smsStatus;
  }
  if (!Util.isUnset(request.ttsStatus)) {
    body['TtsStatus'] = request.ttsStatus;
  }
  if (!Util.isUnset(request.webhookIdsShrink)) {
    body['WebhookIds'] = request.webhookIdsShrink;
  }
  if (!Util.isUnset(request.webhookStatus)) {
    body['WebhookStatus'] = request.webhookStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubscriptionItem',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSubscriptionItem(request: UpdateSubscriptionItemRequest): UpdateSubscriptionItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscriptionItemWithOptions(request, runtime);
}

model UpdateWebhookRequest {
  clientToken?: string(name='ClientToken'),
  locale?: string(name='Locale'),
  serverUrl?: string(name='ServerUrl'),
  webhookId?: long(name='WebhookId'),
  webhookName?: string(name='WebhookName'),
}

model UpdateWebhookResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateWebhookResponseBody(name='body'),
}

async function updateWebhookWithOptions(request: UpdateWebhookRequest, runtime: Util.RuntimeOptions): UpdateWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.serverUrl)) {
    body['ServerUrl'] = request.serverUrl;
  }
  if (!Util.isUnset(request.webhookId)) {
    body['WebhookId'] = request.webhookId;
  }
  if (!Util.isUnset(request.webhookName)) {
    body['WebhookName'] = request.webhookName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWebhook',
    version = '2021-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateWebhook(request: UpdateWebhookRequest): UpdateWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWebhookWithOptions(request, runtime);
}

