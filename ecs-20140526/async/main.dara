/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ecs';
  @version = '2014-05-26';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AcceptInquiredSystemEventRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  choice?: string(name='Choice', description='> This parameter is in invitational preview and is unavailable to general users.', example='hide', position='Query'),
  eventId: string(name='EventId', description='The ID of the system event.', example='e-2zeielxl1qzq8slb****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the system event. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AcceptInquiredSystemEventResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4DD56CA6-6D75-4D33-BE34-E4A44EBE1C3D'),
}

model AcceptInquiredSystemEventResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptInquiredSystemEventResponseBody(name='body'),
}

async function acceptInquiredSystemEvent(request: AcceptInquiredSystemEventRequest): AcceptInquiredSystemEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptInquiredSystemEvent', 'POST', '/', 'json', false, 'json', request);
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model AddBandwidthPackageIpsRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ipCount: string(name='IpCount', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  body: AddBandwidthPackageIpsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function addBandwidthPackageIps(request: AddBandwidthPackageIpsRequest): AddBandwidthPackageIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBandwidthPackageIps', 'POST', '/', 'json', false, 'json', request);
}

model AddTagsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource on which you want to add or overwrite tags. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource. When ResourceType is set to instance, this parameter can be interpreted as InstanceId.', example='i-bp1gtjxuuvwj17zr****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy

All these values are lowercase.', example='instance', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://](http://https://).', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://](http://https://).', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model AddTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Up to 20 tags can be added to each ECS resource.
  * *   `Tag.N.Key` must match `Tag.N.Value` based on the value of N.
  * *   If you add a tag that has the same key (`Tag.N.Key`) as an existing tag on the specified resource, the new tag value (`Tag.N.Value`) overwrites the original tag value.
  *
 */
async function addTags(request: AddTagsRequest): AddTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTags', 'POST', '/', 'json', false, 'json', request);
}

model AllocateDedicatedHostsRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period for a UDP session between a Server Load Balancer (SLB) instance and the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
    udpTimeout?: int32(name='UdpTimeout', description='The timeout period for a UDP session between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
  }(name='NetworkAttributes', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy used to migrate the instances deployed on the dedicated host when the dedicated host fails or needs to be repaired online. Valid values:

*   Migrate: Instances are migrated to another physical server and restarted.

    If the dedicated host is attached with cloud disks, the default value is Migrate.

*   Stop: The instances are stopped. If the dedicated host cannot be repaired, the instances are migrated to another physical server and restarted.

    If the dedicated host is attached with local disks, the default value is Stop.', example='Migrate', position='Query'),
  autoPlacement?: string(name='AutoPlacement', description='Specifies whether to add the dedicated host to the resource pool for automatic deployment. If you create an ECS instance on a dedicated host without specifying the **DedicatedHostId** parameter, Alibaba Cloud selects a dedicated host from the resource pool to host the instance. For more information, see [Automatic deployment](~~118938~~). Valid values:

*   on: The dedicated host is added to the resource pool for automatic deployment.
*   off: The dedicated host is not added to the resource pool for automatic deployment.

Default value: on.

>  If you do not want to add the dedicated host to the resource pool for automatic deployment, set the value to off.', example='off', position='Query'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the dedicated host. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> *   It must be at least half an hour later than the current time.
> *   It must be at most three years later than the current time.
> *   If the value of seconds (ss) is not 00, it is automatically set to 00.', example='2019-08-21T12:30:24Z', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to automatically renew the subscription dedicated host.

>  The **AutoRenew** parameter takes effect only when the **ChargeType** parameter is set to PrePaid.

Default value: false.', example='false', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal period of the dedicated host. Unit: months. Valid values: 1, 2, 3, 6, and 12.

>  The **AutoRenewPeriod** parameter takes effect and is required only when the **AutoRenew** parameter is set to true.', example='1', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method of the dedicated host. Default value: PostPaid. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient account balance or credit. Otherwise, InvalidPayMethod is returned.
*   PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio. You can configure CPU overcommit ratios only for the following dedicated host types: g6s, c6s, and r6s. Valid values: 1 to 5.

The CPU overcommit ratio affects the number of available vCPUs on a dedicated host. You can use the following formula to calculate the number of available vCPUs on a dedicated host: Number of available vCPUs = Number of physical CPU cores × 2 × CPU overcommit ratio. For example, the number of physical CPU cores on each g6s dedicated host is 52. If you set the CPU overcommit ratio of a g6s dedicated host to 4, the number of available vCPUs on the dedicated host is 416. For scenarios that have minimal requirements on CPU stability or where CPU load is not heavy, such as development and test environments, you can increase the number of available vCPUs on a dedicated host by increasing the CPU overcommit ratio. This way, you can deploy more ECS instances of the same specifications on the dedicated host and reduce the unit deployment cost.', example='1', position='Query'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which to assign the dedicated host.', example='dc-bp12wlf6am0vz9v2****', position='Query'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='myDDH', position='Query'),
  dedicatedHostType: string(name='DedicatedHostType', description='The type of the dedicated host. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to obtain the most recent list of dedicated host types.', example='ddh.c5', position='Query'),
  description?: string(name='Description', description='The description of the dedicated host. The description must be 2 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This-is-my-DDH', position='Query'),
  minQuantity?: int32(name='MinQuantity', description='The minimum number of dedicated hosts to create. Valid values: 1 to 100.

>  If the number of available dedicated hosts is less than the minimum number of dedicated hosts to create, the dedicated hosts fail to be created.', example='2', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription period of the dedicated host. The `Period` parameter is required and takes effect only when the `ChargeType` parameter is set to `PrePaid`. Valid values:

*   Valid values when the PeriodUnit parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values when the PeriodUnit parameter is set to Year: 1, 2, 3, 4, and 5.', example='6', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period of the dedicated host. Valid values:

*   Month
*   Year

Default value: Month.', example='Month', position='Query'),
  quantity?: int32(name='Quantity', description='The number of dedicated hosts that you want to create. Valid values: 1 to 100.

Default: 1.', example='2', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the dedicated host.', example='rg-bp67acfmxazb4ph***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag to be added to the dedicated host.

The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='Environment'),
      value?: string(name='Value', description='The value of tag to the dedicated host.

The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or contain `http://` or `https://`.', example='Production'),
    }
  ](name='Tag', description='The list of the tags that you want to add. It can be up to 20.', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the dedicated host.

This parameter is empty by default. If you do not specify a zone, the system selects a zone.', example='cn-hangzhou-f', position='Query'),
}

model AllocateDedicatedHostsResponseBody = {
  dedicatedHostIdSets?: {
    dedicatedHostId?: [ string ](name='DedicatedHostId')
  }(name='DedicatedHostIdSets', description='The IDs of the dedicated hosts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2A664A6-2933-4C64-88AE-5033D003EADF'),
}

model AllocateDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateDedicatedHostsResponseBody(name='body'),
}

/**
  * Before you create a dedicated host, you can call the [DescribeAvailableResource](~~66186~~) operation to query the available resources in a specific region or zone.
  * We recommend that you understand the billing methods of resources before you create a dedicated host. You are charged for resources used by the created dedicated host. For more information, see [Billing overview](~~68978~~).
  * * You can create up to 100 pay-as-you-go or subscription dedicated hosts at a time.
  * * After a dedicated host is created, you can use its ID that is returned by the system as the value of a request parameter to call the [DescribeDedicatedHosts](~~134242~~) operation to query the state of the dedicated host.
  * * After you submit a request to create a dedicated host, an error is returned if a specific parameter is invalid or the requested resources are insufficient. For more information about error reasons, see the "Error codes" section in this topic.
  * * After a dedicated host is created, you can call the [ModifyInstanceDeployment](~~134248~~) operation to migrate ECS instances from a shared host to the dedicated host. You can also migrate ECS instances from another dedicated host to the created dedicated host.
  *
 */
async function allocateDedicatedHosts(request: AllocateDedicatedHostsRequest): AllocateDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipAddressRequest {
  activityId?: long(name='ActivityId', position='Query'),
  bandwidth?: string(name='Bandwidth', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ISP?: string(name='ISP', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateEipAddressResponseBody = {
  allocationId?: string(name='AllocationId'),
  eipAddress?: string(name='EipAddress'),
  requestId?: string(name='RequestId'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AllocatePublicIpAddressRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp1gtjxuuvwj17zr****', position='Query'),
  ipAddress?: string(name='IpAddress', description='The public IP address. If you leave this parameter empty, the system randomly assigns a public IP address to the specified instance.', example='112.124.**.**', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='720', position='Query'),
}

model AllocatePublicIpAddressResponseBody = {
  ipAddress?: string(name='IpAddress', description='The public IP address of the instance.', example='112.124.**.**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AllocatePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicIpAddressResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The instance to which to assign a public IP address must be in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  * *   If `OperationLocks` in the DescribeInstances response contains `"LockReason" : "security"` for an instance, the instance is [locked for security reasons](~~25695~~) and cannot be assigned a public IP address.
  * *   You can assign only a single public IP address to an instance. If the instance already has a public IP address, the `AllocatedAlready` error code is returned.
  * *   After you assign a public IP address to an instance, you must restart the instance ([RebootInstance](~~25502~~)) or start the instance ([StartInstance](~~25500~~)) for the public IP address to take effect.
  * If an instance is located in a virtual private cloud (VPC), you can assign a public IP address to the instance or associate an elastic IP address (EIP) with the instance. For more information, see [AssociateEipAddress](~~36017~~).
  * > After an EIP is associated with an instance located in a VPC, no public IP addresses can be assigned to the instance.
  *
 */
async function allocatePublicIpAddress(request: AllocatePublicIpAddressRequest): AllocatePublicIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePublicIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model ApplyAutoSnapshotPolicyRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-bp14yziiuvu3s6jn****', position='Query'),
  diskIds: string(name='diskIds', description='The IDs of disks. The value is a JSON array that consists of disk IDs. Separate the disk IDs with commas (,).', example='["d-bp14k9cxvr5uzy54****", "d-bp1dtj8v7x6u08iw****", "d-bp1c0tyj9tfli2r8****"]', position='Query'),
  regionId: string(name='regionId', description='The region ID of the automatic snapshot policy and the disks. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * *   Each disk can have only one automatic snapshot policy applied.
  * *   A single automatic snapshot policy can be applied to multiple disks.
  *
 */
async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AssignIpv6AddressesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N to assign to the ENI. Valid values of N: 1 to 10.

Example: Ipv6Address.1=2001:db8:1234:1a00::\\*\\*\\*\\*

> You must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but cannot specify both.', example='2001:db8:1234:1a00::****', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the ENI. Valid values: 1 to 10.

>  You must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but cannot specify both.', example='1', position='Query'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', description='> 该参数正在邀测中，暂未开放使用。', position='Query'),
  ipv6PrefixCount?: int32(name='Ipv6PrefixCount', description='> 该参数正在邀测中，暂未开放使用。', example='hide', minimum=1, maximum=10, position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp1iqejowblx6h8j****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssignIpv6AddressesResponseBody = {
  ipv6PrefixSets?: {
    ipv6Prefix?: [ string ](name='Ipv6Prefix')
  }(name='Ipv6PrefixSets', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv6Sets?: {
    ipv6Address?: [ string ](name='Ipv6Address')
  }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI.'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp1iqejowblx6h8j****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  body: AssignIpv6AddressesResponseBody(name='body'),
}

/**
  * You can specify IPv6 addresses that are in the CIDR block of the vSwitch with which the ENI is associated, or specify the number of IPv6 addresses to automatically generate for the ENI. When you call this operation, take note of the following items:
  * *   IPv6 must be enabled for the vSwitch with which the ENI is associated. For more information, see [Enable IPv6 for a vSwitch](~~98923~~).
  * *   The ENI must be in the Available (Available) or InUse (InUse) state.
  * *   If you want to assign IPv6 addresses to a primary ENI, make sure that the instance to which the ENI is attached is in the Running (Running) or Stopped (Stopped) state.
  * *   The maximum number of IPv6 addresses that can be assigned to an ENI varies per instance type.
  *     *   If the ENI is in the Available (Available) state, it can be assigned a maximum of 10 IPv6 addresses.
  *     *   If the ENI is already attached to an Elastic Compute Service (ECS) instance, the maximum number of IPv6 addresses that can be assigned to the ENI varies based on the instance type. For more information, see [Overview of instance families](~~25378~~).
  * *   After the operation is called, you can obtain the IPv6 addresses that are assigned to the ENI from the response.
  *
 */
async function assignIpv6Addresses(request: AssignIpv6AddressesRequest): AssignIpv6AddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignIpv6Addresses', 'POST', '/', 'json', false, 'json', request);
}

model AssignPrivateIpAddressesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv4Prefix?: [ string ](name='Ipv4Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', position='Query'),
  ipv4PrefixCount?: int32(name='Ipv4PrefixCount', description='> This parameter is in invitational preview and is unavailable to general users.', example='hide', minimum=1, maximum=10, position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The IDs of the ENIs.', example='eni-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='One or more secondary private IP addresses selected from within the CIDR block of the vSwitch that is connected to the ENI. Valid values of N:

*   When the ENI is in the`Available` state, the valid values of N are 1 to 32.
*   When the ENI is in the `InUse` state, the valid values of N are subject to the instance type. For more information, see [Instance families](~~25378~~).

To assign secondary private IP addresses to the ENI, you cannot specify the `PrivateIpAddress.N` and `SecondaryPrivateIpAddressCount` parameters at the same time.', example='10.1.**.**', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount', description='The number of private IP addresses to be automatically assigned from within the CIDR block of the vSwitch that is connected to the ENI.

To assign secondary private IP addresses to the ENI, you cannot specify the `PrivateIpAddress.N` and `SecondaryPrivateIpAddressCount` parameters at the same time.', example='1', minimum=1, position='Query'),
}

model AssignPrivateIpAddressesResponseBody = {
  assignedPrivateIpAddressesSet?: {
    ipv4PrefixSet?: {
      ipv4Prefixes?: [ string ](name='Ipv4Prefixes')
    }(name='Ipv4PrefixSet', description='> This parameter is in invitational preview and is unavailable for general users.'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp125p95hhdhn3ot****'),
    privateIpSet?: {
      privateIpAddress?: [ string ](name='PrivateIpAddress')
    }(name='PrivateIpSet', description='The private IP addresses assigned to the ENI.'),
  }(name='AssignedPrivateIpAddressesSet', description='Details about the ENI.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: AssignPrivateIpAddressesResponseBody(name='body'),
}

/**
  * *   The ENI to which you want to assign secondary private IP addresses must be in the Available or InUse state.
  * *   When you assign secondary private IP addresses to a primary ENI, the instance to which the ENI is attached must be in the Running or Stopped state.
  * *   When an ENI is in the Available state, you can assign up to 50 secondary private IP addresses to it. When an ENI is attached to an instance, the number of secondary private IP addresses that can be assigned to the ENI is subject to the instance type. For more information, see [Instance families](~~25378~~).
  * *   After you call this operation for an ENI, you can obtain the secondary private IP addresses that are assigned to the ENI from the response.
  *
 */
async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignPrivateIpAddresses', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEipAddressRequest {
  allocationId: string(name='AllocationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AssociateHaVipRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  haVipId: string(name='HaVipId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model AttachClassicLinkVpcRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the classic network-type instance. You can call the [DescribeInstances](~~25506~~) operation to query available instances.', example='i-bp1gtjxuuvwj17zr****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC for which the ClassicLink feature is enabled. You can call the [DescribeVpcs](~~35739~~) operation to query available VPCs.', example='vpc-bp1j4z1sr8zxu4l8u****', position='Query'),
}

model AttachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClassicLinkVpcResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   The instance to be connected must be in the **Running** state or **Stopped** state.
  * *   The ClassicLink feature must be enabled for the target VPC. For more information, see [Enable ClassicLink](~~65413~~).
  * *   The instance and the VPC must be in the same region.
  *
 */
async function attachClassicLinkVpc(request: AttachClassicLinkVpcRequest): AttachClassicLinkVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachClassicLinkVpc', 'POST', '/', 'json', false, 'json', request);
}

model AttachDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  bootable?: boolean(name='Bootable', description='Specifies whether to attach the disk as a system disk.

Default value: false.

> If the `Bootable` parameter is set to true, the instance must be in the No System Disk state.', example='false', position='Query'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the disk when the instance is released. Valid values:

*   true: releases the disk when the instance is released.
*   false: does not release the data disk when the instance is released. The disk is retained as a pay-as-you-go data disk.

Default value: false.

When you specify this parameter, take note of the following items:

*   If `OperationLocks` in the DescribeInstances response contains `"LockReason" : "security"` for the instance to which the disk is attached, the instance is locked for security reasons. Even if `DeleteWithInstance` is set to `false`, the DeleteWithInstance parameter is ignored, and the disk is released when the instance is released.
*   This parameter cannot be specified for disks for which the multi-attach feature is enabled.', example='false', position='Query'),
  device?: string(name='Device', description='The device name of the disk.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='testDeviceName', position='Query'),
  diskId: string(name='DiskId', description='The ID of the disk. The disk specified by the `DiskId` parameter and the instance specified by the `InstanceId` parameter must reside in the same zone.

> For more information about the limits on attaching a data disk and system disk, see the "Description" section of this topic.', example='d-bp1j4l5axzdy6ftk****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance to which to attach the disk.', example='i-bp1dq5lozx5f4pmd****', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair that you bind to the Linux instance when you attach the system disk.

*   Windows instances do not support logons based on SSH key pairs. The `Password` parameter takes effect even if the KeyPairName parameter is specified.
*   For Linux instances, the username and password-based logon method is disabled by default.', example='KeyPairTestName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', description='The password set when you attach the system disk. The password is applicable only to the administrator and root users. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

    ( ) ` ~ ! @ # $ % ^ & * - _ + = | { } [ ] : ; \\" < > , . ? /

The password of a Windows instance cannot start with a forward slash (/).

> If the `Password` parameter is specified, we recommend that you send requests over HTTPS to prevent password leaks.', example='EcsV587!', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following points:
  * *   The disk to be attached must be in the **Unattached** (`Available`) state.
  * *   When the disk is attached as a data disk, take note of the following items:
  *     *   The instance must be in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  *     *   If the disk was separately purchased, the billing method of the disk must be pay-as-you-go.
  *     *   If the disk is a system disk detached from an instance, no limits apply to the billing method of the disk.
  * *   When the disk is attached as a system disk, take note of the following items:
  *     *   The instance must be the original instance from which the system disk was detached.
  *     *   The instance must be in the **Stopped** (`Stopped`) state.
  *     *   The logon credentials must be configured.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query the information of the instance, the instance is locked for security reasons and all operations are prohibited on it.
  * *   Disks for which the multi-attach feature is enabled can be attached only to instances that support the NVMe protocol. For more information, see [NVMe protocol](~~256487~~) and [Use the multi-attach feature](~~262105~~).
  *
 */
async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDisk', 'POST', '/', 'json', false, 'json', request);
}

model AttachInstanceRamRoleRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds: string(name='InstanceIds', description='The ID of the instance. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='[“i-bp14ss25xca5ex1u****”, “i-bp154z5o1qjalfse****”, “i-bp10ws62o04ubhvi****”…]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policy?: string(name='Policy', description='The policy. The policy must be 1 to 1,024 characters in length. When you attach an instance RAM role to one or more instances, you can specify an additional policy to further restrict the permissions of the role. For more information, see [Policy overview](~~93732~~).', example='{"Statement": [{"Action": ["*"],"Effect": "Allow","Resource": ["*"]}],"Version":"1"}', position='Query'),
  ramRoleName: string(name='RamRoleName', description='The name of the instance RAM role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='testRamRoleName', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachInstanceRamRoleResponseBody = {
  attachInstanceRamRoleResults?: {
    attachInstanceRamRoleResult?: [ 
    {
      code?: string(name='Code', description='Indicates whether the instance RAM role was attached. If the instance RAM role was attached, 200 is returned. If the instance RAM role failed to be attached, any other value is returned. For more information, see the "Error codes" section.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp10ws62o04ubhvi****'),
      message?: string(name='Message', description='Indicates whether the instance RAM role was attached. If the instance RAM role was attached, success is returned. If the instance RAM role failed to be attached, any other value is returned. For more information, see the "Error codes" section.', example='success'),
      success?: boolean(name='Success', description='Indicates whether the instance RAM role was attached.', example='true'),
    }
  ](name='AttachInstanceRamRoleResult')
  }(name='AttachInstanceRamRoleResults', description='Details about the results of attaching the instance RAM role.'),
  failCount?: int32(name='FailCount', description='The number of the instances to which the instance RAM role failed to be attached.', example='0'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='testRamRoleName'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9553E4C-6C3A-4D66-AE79-9835AF705639'),
  totalCount?: int32(name='TotalCount', description='The total number of instances to which you attempted to attach the instance RAM role.', example='1'),
}

model AttachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstanceRamRoleResponseBody(name='body'),
}

async function attachInstanceRamRole(request: AttachInstanceRamRoleRequest): AttachInstanceRamRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachInstanceRamRole', 'POST', '/', 'json', false, 'json', request);
}

model AttachKeyPairRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds: string(name='InstanceIds', description='The IDs of instances to which you want to attach the SSH key pair. The value can be a JSON array that consists of up to 50 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp1gtjxuuvwj17zr****", "i-bp17b7zrsbjwvmfy****", … "i-bp1h6jmbefj1ytos****"]', position='Query'),
  keyPairName: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSH key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachKeyPairResponseBody = {
  failCount?: string(name='FailCount', description='The number of instances to which the key pair fails to be attached.', example='0'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', description='The operation status code returned. 200 indicates that the operation was successful.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-m5eg7be9ndloji64****'),
      message?: string(name='Message', description='The operation information returned. When the value of Code is 200, the value of Message is successful.', example='successful'),
      success?: string(name='Success', description='Indicates whether the operation was successful.', example='true'),
    }
  ](name='Result')
  }(name='Results', description='An array that contains the results of the operation.'),
  totalCount?: string(name='TotalCount', description='The total number of instances to which the SSH key pair is attached.', example='2'),
}

model AttachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: AttachKeyPairResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   SSH key pairs are not supported on Windows instances.
  * *   If an SSH key pair is attached to an instance, the username and password authentication method is disabled for the instance.
  * *   If you attach an SSH key pair to an instance in the **Running** state, you must call the [RebootInstance](~~25502~~) operation to restart the instance for the key pair to take effect.
  * *   If you attach an SSH key pair to an instance in the **Stopped** state, you must call the [StartInstance](~~25500~~) operation to start the instance for the key pair to take effect.
  * *   If an instance already has an SSH key pair attached, the new SSH key pair will replace the original one.
  *
 */
async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model AttachNetworkInterfaceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp16qstyvxj9gpqw****', position='Query'),
  networkCardIndex?: int32(name='NetworkCardIndex', description='网卡指定的物理网卡索引。

>NetworkCardIndex 取值与实例规格族有关。如果实例规格不支持NetworkCard则不能指定；如果支持，取值请参见[实例规格族](~~25378~~)。', example='0', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp17pdijfczax1huji****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='The ID of the trunk ENI.

> This parameter is unavailable for use.', example='eni-f8zapqwj1v1j4ia3****', position='Query'),
  waitForNetworkConfigurationReady?: boolean(name='WaitForNetworkConfigurationReady', description='> This parameter is no longer used.', example='null', position='Query'),
}

model AttachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachNetworkInterfaceResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The ENI must be in the **Available** (`Available`) state. Each ENI can be attached to only a single instance that resides in the same zone and VPC as the ENI.
  * *   The instance must be in the Running (Running) or Stopped (Stopped) state. When you attach ENIs to instances of some instance types, make sure that the instances are in the Stopped (Stopped) state. For more information, see the "Instance types of the ECS instances that must be in the Stopped (Stopped) state" section in [Bind an ENI](~~58503~~).
  *     > If the last start time of the instance (including the start time of the instance if it is newly purchased, the last restart time of the instance, and the last reactivation time of the instance) is before April 1, 2018 and the instance stays in the Running state, you must call the RebootInstance operation to restart the instance. If you do not call the RebootInstance operation to restart the instance, the ENI cannot be attached to the instance.
  * *   You can attach multiple ENIs to a single instance. For more information, see [ENI overview](~~58496~~).
  * *   The vSwitch to which the ENI is connected must be in the same zone and VPC as the vSwitch to which the instance is connected.
  * *   This operation is an asynchronous operation. After this operation is called to attach an ENI, you can check the status or events of the ENI to determine whether the ENI is attached. The following figure shows the transitions between the states of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/en-US/20230223/vqky/AttachNetworkInterface.png) 
  * If the ENI is in the Attaching state, the ENI attachment request is sent and the ENI is being attached to the specified instance. If the ENI is in the InUse state, the ENI is attached to the specified instance. If the ENI is in the Available state, the ENI fails to be attached.
  * **For information about examples on how to call this operation, see** [Attach an ENI](~~471550~~).
  *
 */
async function attachNetworkInterface(request: AttachNetworkInterfaceRequest): AttachNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachNetworkInterface', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of the security group rule.', example='This is description.', position='Query'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='ALL', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:250:6000::***', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:250:6000::***', position='Query'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of the security group rule. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-insensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='ALL'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> The Permissions.N.Ipv6DestCidrIp parameter is valid only when the destination is ECS instances that reside in virtual private clouds (VPCs) and support IPv6 CIDR blocks. You cannot specify this parameter and the `DestCidrIp` parameter at the same time.', example='2001:250:6000::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block for the security group rule. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> The Permissions.N.Ipv6SourceCidrIp parameter is valid only when the source is ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot specify this parameter and the `SourceCidrIp` parameter at the same time.', example='2001:250:6000::***'),
      nicType?: string(name='NicType', description='The network interface controller (NIC) type of the security group rule when the security group is in the classic network. Valid values:

*   internet: public NIC
*   intranet: internal NIC

If the security group is in a VPC, this parameter is set to intranet by default and cannot be changed.

If you specify only DestGroupId when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The authorization policy. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

For more information, see [Typical applications of commonly used ports](~~40724~~).

Valid values of N: 1 to 100.', example='80/80'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority. Valid values: 1 to 100.

Default value: 1

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block for the security group rule. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourceGroupId?: string(name='SourceGroupId', description='The ID of the source security group.

*   At least one of `SourceGroupId`, `SourceCidrIp`, `Ipv6SourceCidrIp`, and `SourcePrefixListId` must be specified.
*   If `SourceGroupId` is specified but `SourceCidrIp` or `Ipv6SourceCidrIp` is not specified, `NicType` must be set to `intranet`.
*   If both `SourceGroupId` and `SourceCidrIp` are specified, `SourceCidrIp` takes precedence.

Valid values of N: 1 to 100.

When you call this operation, take note of the following items:

*   For advanced security groups, security groups cannot be used as authorization objects.
*   For each basic security group, a maximum of 20 security groups can be used as authorization objects.', example='sg-bp67acfmxazb4p****'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group when you set a security group rule across accounts.

*   If both `SourceGroupOwnerAccount` and `SourceGroupOwnerId` are not specified, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, the `SourceGroupOwnerAccount` parameter is invalid.

Valid values of N: 1 to 100.', example='test@aliyun.com'),
      sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the source security group when you set a security group rule across accounts.

*   If both `SourceGroupOwnerAccount` and `SourceGroupOwnerId` are not specified, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, the `SourceGroupOwnerAccount` parameter is invalid.

Valid values of N: 1 to 100.', example='1234567890'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='7000/8000'),
      sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

Valid values of N: 1 to 100.

Note:

*   If a security group is in the classic network, you cannot configure prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you specify the `SourceCidrIp`, `Ipv6SourceCidrIp`, or `SourceGroupId` parameter, this parameter is ignored.', example='pl-x1j1k5ykzqlixdcy****'),
    }
  ](name='Permissions', description='Security group rules. Valid values of N: 1 to 100.', position='Query'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to accept inbound access.', example='accept', position='Query'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='22/22', position='Query'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the rule priority.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  sourceGroupId?: string(name='SourceGroupId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupId` to specify the ID of the source security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerAccount` to specify the Alibaba Cloud account that manages the source security group.', example='test@aliyun.com', position='Query'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the source security group.', example='1234567890', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='22/22', position='Query'),
  sourcePrefixListId?: string(name='SourcePrefixListId', description='This parameter is deprecated. Use `Permissions.N.SourcePrefixListId`to specify the ID of the source prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model AuthorizeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
  * *   The valid value of Priority ranges from 1 to 100. A smaller value indicates a higher priority.
  * *   When multiple security group rules have the same priority, drop rules take precedence.
  * *   The source can be a CIDR block specified by SourceCidrIp, Ipv6SourceCidrIp, or SourcePrefixListId or can be Elastic Compute Service (ECS) instances in a security group specified by SourceGroupId.
  * *   For advanced security groups, security groups cannot be used as authorization objects.
  * *   For each basic security group, a maximum of 20 security groups can be used as authorization objects.
  * *   If the specified security group rule exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to some parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be specified together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
  *     *   Parameters used to specify a security group rule that controls access from a specified CIDR block: IpProtocol, PortRange, SourcePortRange, NicType, Policy, and SourceCidrIp. For a security group of the Virtual Private Cloud (VPC) type, you must set the NicType parameter to intranet. For a security group of the classic network type, you can set the NicType parameter to either internet or intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceCidrIp=10.0.0.0/8
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceGroupOwnerAccount, and SourceGroupId. In this case, you must set the NicType parameter to intranet. To allow mutual access between security groups in the classic network, you can allow or deny another security group within the same region access to your security group. The security group that is allowed access to your security group can belong to your own Alibaba Cloud account or another Alibaba Cloud account specified by the SourceGroupOwnerAccount parameter. To allow mutual access between security groups in VPCs, you can allow or deny another security group within the same VPC access to your security group. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceGroupId=sg-1651FBB**
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestPrefixListId. In this case, prefix lists support only security groups in VPCs. NicType must be set to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourcePrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  * *   For information about examples on security group rule settings, see [Security groups for different use cases](~~25475~~) and [Security group quintuple rules](~~97439~~).
  *
 */
async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeSecurityGroupEgressRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of the security group rule.', example='This is description.', position='Query'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  destGroupId?: string(name='DestGroupId', description='This parameter is deprecated. Use `Permissions.N.DestGroupId` to specify the ID of the destination security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerAccount` to specify the Alibaba Cloud account that manages the destination security group.', example='Test@aliyun.com', position='Query'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the destination security group.', example='12345678910', position='Query'),
  destPrefixListId?: string(name='DestPrefixListId', description='This parameter is deprecated. Use `Permissions.N.DestPrefixListId` to specify the ID of the destination prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='ALL', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6DestCidrIp` to specify the destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:db8:1234:1a00::***', position='Query'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of the security group rule. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block for the security group rule. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      destGroupId?: string(name='DestGroupId', description='The ID of the destination security group.

*   At least one of `DestGroupId`, `DestCidrIp`, `Ipv6DestCidrIp`, and `DestPrefixListId` must be specified.
*   If `DestGroupId` is specified but `DestCidrIp` is not specified, the `NicType` parameter must be set to intranet.
*   If both `DestGroupId` and `DestCidrIp` are specified, `DestCidrIp` takes precedence.

Valid values of N: 1 to 100.

When you call this operation, take note of the following items:

*   For advanced security groups, security groups cannot be used as authorization objects.
*   For each basic security group, a maximum of 20 security groups can be used as authorization objects.', example='sg-bp67acfmxazb4p****'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group when you set a security group rule across accounts.

*   If both `DestGroupOwnerAccount` and `DestGroupOwnerId` are not specified, the rule is created to control access to another security group within your Alibaba Cloud account.
*   If `DestCidrIp` is specified, `DestGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='Test@aliyun.com'),
      destGroupOwnerId?: long(name='DestGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the destination security group when you set a security group rule across accounts.

*   If both `DestGroupOwnerId` and `DestGroupOwnerAccount` are not specified, the rule is created to control access to another security group within your Alibaba Cloud account.
*   If you specify the `DestCidrIp` parameter, the `DestGroupOwnerId` parameter is ignored.

Valid values of N: 1 to 100.', example='12345678910'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

Note:

*   If a security group is in the classic network, you cannot configure prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you specify `DestCidrIp`, `Ipv6DestCidrIp`, or `DestGroupId`, Permissions.N.DestPrefixListId is ignored.

Valid values of N: 1 to 100.', example='pl-x1j1k5ykzqlixdcy****'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-insensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='ALL'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block for the security group rule. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> The Permissions.N.Ipv6DestCidrIp parameter is valid only when the destination is ECS instances that reside in virtual private clouds (VPCs) and support IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> The Permissions.N.Ipv6SourceCidrIp parameter is valid only when the source is ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot specify this parameter and the `DestCidrIp` parameter at the same time.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network interface controller (NIC) type of the security group rule when the security group is in the classic network. Valid values:

*   internet: public NIC

*   intranet: internal NIC

    *   If the security group is in a VPC, this parameter is set to intranet by default and cannot be changed.
    *   If you specify only DestGroupId when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The authorization policy. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

Valid values of N: 1 to 100.', example='80/80'),
      priority?: string(name='Priority', description='The priority of the security group rule. A smaller value indicates a higher priority. Valid values: 1 to 100.

Default value: 1

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Protocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='80/80'),
    }
  ](name='Permissions', description='Security group rules. Valid values of N: 1 to 100.', position='Query'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to allow outbound access.', example='accept', position='Query'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='80/80', position='Query'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the rule priority.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the source security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='80/80', position='Query'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section in [](~~25412#SecurityGroupQuota1~~).
  * *   You can set Policy to accept or drop for each security group rule to allow or deny access.
  * *   The valid value of Priority ranges from 1 to 100. A smaller value indicates a higher priority.
  * *   When several security group rules have the same priority, drop rules take precedence.
  * *   The destination can be a CIDR block specified by DestCidrIp, Ipv6DestCidrIp, or DestPrefixListId or can be Elastic Compute Service (ECS) instances in a security group specified by DestGroupId.
  * *   For advanced security groups, security groups cannot be used as authorization objects.
  * *   For each basic security group, a maximum of 20 security groups can be used as authorization objects.
  * *   If the specified security group rule exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to some parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be specified together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
  *     *   Parameters used to specify a security group rule that controls access to a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestCidrIp. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.IpProtocol=ICMP
  *             &Permissions.1.DestCidrIp=10.0.0.0/8
  *             &Permissions.1.PortRange=-1/-1
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestGroupOwnerAccount, and DestGroupId. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestGroupId=sg-bp67acfmxazb4pi***
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestPrefixListId. In this case, prefix lists support only security groups in virtual private clouds (VPCs). NicType must be set to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *
 */
async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeSecurityGroupEgress', 'POST', '/', 'json', false, 'json', request);
}

model CancelAutoSnapshotPolicyRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  diskIds: string(name='diskIds', description='The IDs of the disks for which you want to disable the automatic snapshot policy. To disable the automatic snapshot policy for multiple disks, you can set this parameter to a JSON array that consists of multiple disk IDs, such as \\["dxxxxxxxxx", "dyyyyyyyyy", … "dzzzzzzzzz"]. Separate the disk IDs with commas (,).', example='["d-bp14k9cxvr5uzy54****", "d-bp1dtj8v7x6u08iw****", "d-bp1c0tyj9tfli2r8****"]', position='Query'),
  regionId: string(name='regionId', description='The region ID of the automatic snapshot policy and the disks. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CancelCopyImageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageId: string(name='ImageId', description='The ID of the image that is being copied.', example='m-bp1caf3yicx5jlfl****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image copy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCopyImageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After you cancel an image copy task, the image copy created in the destination region is deleted, and the copied image remains unchanged.
  * *   If the image copy task is complete, the CancelCopyImage operation fails and an error is returned.
  *
 */
async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CancelImagePipelineExecutionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  executionId: string(name='ExecutionId', description='The ID of the image build task.', example='exec-5fb8facb8ed7427c****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image build task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='>  This parameter is deprecated.', example='null'),
      value?: string(name='Value', description='>  This parameter is deprecated.', example='null'),
    }
  ](name='TemplateTag', description='> This parameter is deprecated.', position='Query'),
}

model CancelImagePipelineExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: CancelImagePipelineExecutionResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the image build task to be canceled is in the BUILDING, DISTRIBUTING, or RELEASING state.
  *
 */
async function cancelImagePipelineExecution(request: CancelImagePipelineExecutionRequest): CancelImagePipelineExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelImagePipelineExecution', 'POST', '/', 'json', false, 'json', request);
}

model CancelPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CancelSimulatedSystemEventsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  eventId: [ string ](name='EventId', description='The IDs of system events. You can specify up to 100 event IDs in a single request.', example='e-xhskHun1256****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelSimulatedSystemEventsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  body: CancelSimulatedSystemEventsResponseBody(name='body'),
}

async function cancelSimulatedSystemEvents(request: CancelSimulatedSystemEventsRequest): CancelSimulatedSystemEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSimulatedSystemEvents', 'POST', '/', 'json', false, 'json', request);
}

model CancelTaskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', description='The ID of the task. You can call the [DescribeTasks](~~25622~~) operation to query the list of task IDs.', example='t-bp198jigq7l0h5ac****', position='Query'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelTask', 'POST', '/', 'json', false, 'json', request);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConnectRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ConnectRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model ConvertNatPublicIpToEipRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose public IP address you want to convert into an EIP.', example='i-bp171jr36ge2ulvk****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConvertNatPublicIpToEipResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ConvertNatPublicIpToEipResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertNatPublicIpToEipResponseBody(name='body'),
}

/**
  * After a public IP address is converted into an EIP, the EIP is billed separately. Make sure that you understand the billing methods of EIPs. For more information, see [Billing overview](~~122035~~).
  * Before you call this operation, make sure that the following requirements are met:
  * *   The instance is in the `Stopped` or `Running` state.
  * *   No EIPs are associated with the instance.
  * *   The instance has no configuration change tasks that have not taken effect.
  * *   The public bandwidth of the instance is not 0 Mbit/s.
  * *   The instance uses the pay-by-traffic billing method for network usage.
  * *   If the instance is a subscription instance that resides in a VPC, the instance does not expire within 24 hours.
  *
 */
async function convertNatPublicIpToEip(request: ConvertNatPublicIpToEipRequest): ConvertNatPublicIpToEipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertNatPublicIpToEip', 'POST', '/', 'json', false, 'json', request);
}

model CopyImageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  destinationDescription?: string(name='DestinationDescription', description='The description of the image copy. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a description example.', position='Query'),
  destinationImageName?: string(name='DestinationImageName', description='The name of the image copy. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `acs:` or `aliyun`. The name cannot contain `http://` or `https://`. The name can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).', example='YourImageName', position='Query'),
  destinationRegionId?: string(name='DestinationRegionId', description='The ID of the destination region to which to copy the source image.', example='cn-shanghai', position='Query'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='> This parameter is unavailable.', example='hide', position='Query'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the image copy.

Default value: false.', example='false', position='Query'),
  imageId: string(name='ImageId', description='The ID of the source image.', example='m-bp1h46wfpjsjastc****', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the key to use to encrypt the image copy.', example='e522b26d-abf6-4e0d-b5da-04b7******3c', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the source image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the image copy. If you do not specify this parameter, the image copy is assigned to the default resource group.

> If you call the CopyImage operation as a Resource Access Management (RAM) user who is not authorized to manage the default resource group and do not specify the `ResourceGroupId` parameter, the `Forbbiden: User not authorized to operate on the specified resource` error message is returned. You must specify the ID of a resource group that the RAM user is authorized to manage or authorize the RAM user to manage the default resource group before you call the CreateImage operation again.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the image copy. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the image copy. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the image copy.', position='Query'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image copy.', example='m-bp1h46wfpjsjastd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CopyImageResponseBody(name='body'),
}

/**
  * After you copy a custom image (source image) to the destination region, you can use the image copy to create ECS instances by calling the RunInstances operation or replace the system disks of ECS instances by calling the ReplaceSystemDisk operation in the destination region.
  * Before you call the CopyImage operation, take note of the following items:
  * *   You can copy only custom images that are in the `Available` state.
  * *   Custom images that you want to copy must belong to your Alibaba Cloud account or be shared with you by others, and cannot be copied across accounts.
  * *   When an image is being copied, the copied image cannot be deleted by calling the [DeleteImage](~~25537~~) operation. However, you can cancel the running copying task by calling the [CancelCopyImage](~~25539~~) operation.
  * *   A region can have only one image copying task running at a time. Other image copying tasks queue up for the current task to complete before the tasks run in sequence.
  * *   You can configure the `ResourceGroupId` parameter to specify the resource group to which to assign the image copy. If you do not configure the `ResourceGroupId` parameter, the image copy is assigned to the default resource group.
  *
 */
async function copyImage(request: CopyImageRequest): CopyImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyImage', 'POST', '/', 'json', false, 'json', request);
}

model CopySnapshotRequest {
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is unavailable.', example='0'),
      roleType?: string(name='RoleType', description='> This parameter is unavailable.', example='null'),
      rolearn?: string(name='Rolearn', description='> This parameter is unavailable.', example='null'),
    }
  ](name='Arn', description='> This parameter is currently in invitational preview and unavailable for public use.', position='Query'),
  destinationRegionId: string(name='DestinationRegionId', description='The region ID of the new snapshot.', example='us-east-1', position='Query'),
  destinationSnapshotDescription: string(name='DestinationSnapshotDescription', description='The description of the new snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='CopySnapshotDemo', position='Query'),
  destinationSnapshotName: string(name='DestinationSnapshotName', description='The name of the new snapshot. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='CopySnapshotDemo', position='Query'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.

Default value: false.', example='false', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The customer master keys (CMK) managed by Key Management Service (KMS) in the destination region.', example='0e478b7a-4262-4802-b8cb-00d3fb40****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the source snapshot. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-chengdu', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is unavailable.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of the new snapshot. Unit: days. The new snapshot is automatically released when its retention period ends. Valid values: 1 to 65536.

This parameter is empty by default, which indicates that the snapshot is not automatically released.', example='60', position='Query'),
  snapshotId: string(name='SnapshotId', description='The ID of the source snapshot.', example='s-bp67acfmxazb4p****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the new snapshot. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with acs: or aliyun or contain http:// or https://.[](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the new snapshot. The tag value can be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with `acs:` or `aliyun` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tag key and value of the new snapshot.', position='Query'),
}

model CopySnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8B26B44-0189-443E-9816-D951F596****'),
  snapshotId?: string(name='SnapshotId', description='The ID of the new snapshot.', example='s-bp17441ohwka0yui****'),
}

model CopySnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CopySnapshotResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   New snapshots (copies) cannot be used to roll back disks from which the source snapshots (originals) were created.
  * *   Encrypted snapshots cannot be copied.
  * *   Local snapshots cannot be copied.
  *
 */
async function copySnapshot(request: CopySnapshotRequest): CopySnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopySnapshot', 'POST', '/', 'json', false, 'json', request);
}

model CreateActivationRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description?: string(name='Description', description='The description of the activation code. The description can be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  instanceCount?: int32(name='InstanceCount', description='The maximum number of times that the activation code can be used to register managed instances. Valid values: 1 to 1000.

Default value: 10.', example='10', position='Query'),
  instanceName?: string(name='InstanceName', description='The default instance name prefix. The instance name prefix must be 1 to 50 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The instance name prefix can contain letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:).

If you use the activation code created by calling the CreateActivation operation to register managed instances, the instances are assigned sequential names that are prefixed by the value of this parameter. You can also specify a new instance name to override the assigned sequential name when you register a managed instance.

If you use an activation code for which the InstanceName parameter is specified to register a managed instance, an instance name in the format of `<InstanceName>-<Number>` is generated. The number of digits in the \\<Number> value is determined by that in the `InstanceCount` value. Example: `001`. If you do not specify InstanceName, the hostname (Hostname) is used as the instance name.', example='test-InstanceName', position='Query'),
  ipAddressRange?: string(name='IpAddressRange', description='The IP addresses of hosts that are allowed to use the activation code. The value can be IPv4 addresses, IPv6 addresses, or CIDR blocks.', example='0.0.0.0/0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the activation code. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the activation code. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the activation code. Valid values of N: 1 to 20. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the activation code.', position='Query'),
  timeToLiveInHours?: long(name='TimeToLiveInHours', description='The validity period of the activation code. The activation code cannot be used to register new instances after the validity period expires. Unit: hours. Valid values: 1 to 24.

Default value: 4.', example='4', position='Query'),
}

model CreateActivationResponseBody = {
  activationCode?: string(name='ActivationCode', description='The value of the activation code. The value is returned only once after the CreateActivation operation is called and cannot be subsequently queried. Properly save the return value.', example='a-hz0ch3SwhOlE1234+Xo32lAZC****'),
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
}

model CreateActivationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateActivationResponseBody(name='body'),
}

/**
  * After you use an activation code to register a server that is not provided by Alibaba Cloud as an Alibaba Cloud managed instance, you can use a variety of online services provided by Alibaba Cloud in the managed instance, such as Cloud Assistant, Operation Orchestration Service (OOS), and Apsara Devops.
  * A server that is not provided by Alibaba Cloud can be registered as an Alibaba Cloud managed instance only when the server can access the Internet and runs an operating system of one of the following versions:
  * *   Alibaba Cloud Linux 2, Alibaba Cloud Linux 3, and later
  * *   CentOS 6, CentOS 7, CentOS 8, and later
  * *   Debian 8, Debian 9, Debian 10, and later
  * *   Ubuntu 12, Ubuntu 14, Ubuntu 16, Ubuntu 18, and later
  * *   CoreOS
  * *   OpenSUSE
  * *   Red Hat 5, Red Hat 6, Red Hat 7, and later
  * *   SUSE Linux Enterprise Server (SLES) 11, SLES 12, SLES 15, and later
  * *   Windows Server 2012, Windows Server 2016, Windows Server 2019, and later
  * You can create up to 5,000 activation codes for managed instances within an Alibaba Cloud region. When the number of activation codes exceeds 1,000, the usage of activation codes must be greater than 50% before you can proceed to create more activation codes.
  * > You can go to the **Cloud Assistant** page in the Elastic Compute Service (ECS) console and click **Register Instance** on the **Managed Instances** tab to check the usage of activation codes.
  *
 */
async function createActivation(request: CreateActivationRequest): CreateActivationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateActivation', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoProvisioningGroupRequest {
  launchConfiguration?: {
    arn?: [ 
      {
        assumeRoleFor?: long(name='AssumeRoleFor', description='>  This parameter is in invitational preview and unavailable for general users.', example='123456789012****'),
        roleType?: string(name='RoleType', description='>  This parameter is in invitational preview and unavailable for general users.', example='34458433936495****:alice'),
        rolearn?: string(name='Rolearn', description='>  This parameter is in invitational preview and unavailable for general users.', example='acs:ram::123456789012****:role/adminrole'),
      }
    ](name='Arn', description='>  This parameter is in invitational preview and unavailable for general users.'),
    autoReleaseTime?: string(name='AutoReleaseTime'),
    creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: the standard mode. For more information, see the "Standard mode" section in [Burstable instances](~~59977~~).
*   Unlimited: the unlimited mode. For more information, see the "Unlimited mode" section in [Burstable instances](~~59977~~).

This parameter is empty by default.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Standard'),
    dataDisk?: [ 
      {
        category?: string(name='Category', description='The category of data disk N. Valid values of N: 1 to 16. Valid values of this parameter:

- cloud_efficiency: ultra disk
- cloud_ssd: standard SSD
- cloud_essd: ESSD
- cloud: basic disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.  

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssd'),
        deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when its associated instance is released. Valid values: 

- true: releases data disk N when the instance is released.
- false: does not release data disk N when the instance is released.

Default value: true. 

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='true'),
        description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='DataDisk_Description'),
        device?: string(name='Device', description='The mount point of data disk N. When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='/dev/vd1'),
        diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).  

This parameter is empty by default. 

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssdData'),
        encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt data disk N. Valid values:

- true: encrypts data disk N.
- false: does not encrypt data disk N.

Default value: false. 

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='false'),
        kmsKeyId?: string(name='KmsKeyId', description='The ID of the Key Management Service (KMS) key to be used for data disk N. When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
        performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to be used as data disk N. The value of N must be the same as that of N in the `LaunchConfiguration.DataDisk.N.Category` parameter. Default value: PL1. Valid values: 

- PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
- PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
- PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
- PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/essds).  

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PL1'),
        size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values of this parameter: 

- Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.
- Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_ssd: 20 to 32768.
- Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_essd: depend on the `LaunchConfiguration.DataDisk.N.PerformanceLevel` value.    - Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
  - Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
  - Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
  - Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.
- Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud: 5 to 2000.

>  The value of LaunchConfiguration.DataDisk.N.Size must be greater than or equal to the size of the snapshot specified by the `LaunchConfiguration.DataDisk.N.SnapshotId` parameter.  When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='20'),
        snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to be used to create data disk N. Valid values of N: 1 to 16. 

After this parameter is specified, the `LaunchConfiguration.DataDisk.N.Size` parameter is ignored. The size of data disk N is the same as that of the snapshot specified by this parameter. Use snapshots that were created on or after July 15, 2013. Otherwise, an error is returned and your request is rejected.  

When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='s-bp17441ohwka0yuh****'),
      }
    ](name='DataDisk', description='The details of data disks.'),
    deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1frxuzdg87zh4p****'),
    hostName?: string(name='HostName', description='The hostname of the instance. Take note of the following items:

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate a hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
*   You cannot specify both the `LaunchConfiguration.HostName` and `LaunchConfiguration.HostNames.N` parameters. Otherwise, an error is returned.
*   When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='k8s-node-[1,4]-ecshost'),
    hostNames?: [ string ](name='HostNames', description='The hostnames of instances. You can use this parameter to specify different hostnames for multiple instances.', example='ecs-host-01'),
    imageId?: string(name='ImageId', description='The ID of the image to be used to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available image resources. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='m-bp1g7004ksh0oeuc****'),
    instanceDescription?: string(name='InstanceDescription', description='The description of the instance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Instance_Description'),
    instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). The default value of this parameter is the `InstanceId` value.

When you batch create instances, you can batch configure sequential names for the instances. For more information, see [Batch configure sequential names or hostnames for multiple instances](~~196048~~).

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='k8s-node-[1,4]-alibabacloud'),
    internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

>  When the pay-by-traffic billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as the upper limits of bandwidth instead of guaranteed performance specifications. When demands outstrip resource supplies, the maximum bandwidth may be affected. If you want guaranteed bandwidth for your instance, use the pay-by-bandwidth billing method.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PayByTraffic'),
    internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the value of `LaunchConfiguration.InternetMaxBandwidthOut`, and the default value is the value of `LaunchConfiguration.InternetMaxBandwidthOut`.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='10'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='10'),
    ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

For instances of retired instance types, the default value is none. For instances of other instance types, the default value is optimized.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='optimized'),
    keyPairName?: string(name='KeyPairName', description='The name of the key pair to be bound to the instance.

*   For Windows instances, this parameter is ignored. This parameter is empty by default.
*   For Linux instances, the password-based logon method is disabled by default.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='KeyPair_Name'),
    password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

``( ) ` ~ ! @ # $ % ^ & * - _ + = | { }  ``: ; \\" < > , . ? /``  For Windows instances, the password cannot start with a forward slash (/). When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence. `', example='EcsV587!'),
    passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the password preset in the image. Valid values:

*   true: uses the preset password.
*   false: does not use the preset password.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='true'),
    ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='RAM_Name'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='rg-bp67acfmxazb4p****'),
    securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Active'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='sg-bp15ed6xe1yxeycg****'),
    securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of the security groups to assign the instance.'),
    systemDisk?: {
      encryptAlgorithm?: string(name='EncryptAlgorithm', description='> This parameter is in invitational preview and is unavailable.', example='aes-256'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.

Default value: false.', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
    }(name='SystemDisk', description='The information of the system disk on the instance. When both the LaunchTemplateId and LaunchConfiguration.* parameters are specified, the LaunchTemplateId parameter takes precedence.'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)
*   cloud: basic disk

For non-I/O optimized instances of a retired instance type, the default value is cloud. For other types of instances, the default value is cloud_efficiency.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssd'),
    systemDiskDescription?: string(name='SystemDiskDescription', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='SystemDisk_Description'),
    systemDiskName?: string(name='SystemDiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssdSystem'),
    systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel', description='The performance level of the ESSD to be used as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PL0'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Valid values: 20 to 500. Unit: GiB. This parameter value must be at least 20 and greater than or equal to the size of the image specified by the LaunchConfiguration.ImageId parameter.

Default value: 40 or the size of the image specified by the LaunchConfiguration.ImageId parameter, whichever is greater.

When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='40'),
    tag?: [ 
      {
        key?: string(name='Key', description='The key of tag of the instance.

The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.

When both the `LaunchTemplateId` and `LaunchConfiguration.*` parameters are specified, the `LaunchTemplateId` parameter takes precedence.', example='TestKey'),
        value?: string(name='Value', description='The value of tag of the instance.

The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or contain `http://` or `https://`.

When both the `LaunchTemplateId` and `LaunchConfiguration.*` parameters are specified, the `LaunchTemplateId` parameter takes precedence.', example='TestValue'),
      }
    ](name='Tag', description='The tags of the instance. You can specify up to 20 tags.'),
    userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The raw data can be up to 16 KB in size. When both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='ZWNobyBoZWxsbyBlY3Mh'),
  }(name='LaunchConfiguration', position='Query'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='apg-test', position='Query'),
  autoProvisioningGroupType?: string(name='AutoProvisioningGroupType', description='The delivery type of the auto provisioning group. Valid values:

*   request: one-time asynchronous delivery. When the auto provisioning group is started, it attempts to asynchronously deliver an instance cluster that meets the target capacity only once. The group does not retry the operation regardless of whether all the instances are delivered.
*   instant: one-time synchronous delivery. When the auto provisioning group is started, it attempts to synchronously deliver an instance cluster that meets the target capacity only once. The list of delivered instances and the causes of delivery failures are returned in the response.
*   maintain: continuous delivery. When the auto provisioning group is started, it attempts to deliver an instance cluster that meets the target capacity, and monitors the real-time capacity. If the target capacity of the auto provisioning group is not reached, the auto provisioning group continues to create instances until the target capacity is reached.

Default value: maintain.', example='maintain', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dataDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory', description='The category of data disk N. You can use this parameter to specify multiple disk categories, and the disk categories are prioritized in the order in which they are specified. If a specified disk category is unavailable, the system uses the next available disk category. Valid values: 

- cloud_efficiency: ultra disk
- cloud_ssd: standard SSD
- cloud_essd: ESSD
- cloud: basic disk', example='cloud_efficiency'),
    }
  ](name='DataDiskConfig', description='The configs of data disks.', position='Query'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='The type of supplemental instances. When the sum of the `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` values is smaller than the value of `TotalTargetCapacity`, the auto provisioning group creates instances of the specified type to meet the target capacity. Valid values:

*   PayAsYouGo: pay-as-you-go instances
*   Spot: preemptible instances

Default value: Spot.', example='Spot', position='Query'),
  description?: string(name='Description', description='The description of the auto provisioning group.', example='testDescription', position='Query'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='Specifies whether to release the removed instances when the real-time capacity of the auto provisioning group exceeds the target capacity and a scale-in event is triggered. Valid values:

*   termination: releases the removed instances.
*   no-termination: only removes the instances from the auto provisioning group but does not release them.

Default value: no-termination.', example='termination', position='Query'),
  hibernationOptionsConfigured?: boolean(name='HibernationOptionsConfigured', description='>  This parameter is in invitational preview and unavailable for general users.', example='false', position='Query'),
  launchTemplateConfig?: [ 
    {
      architectures?: [ string ](name='Architectures'),
      burstablePerformance?: string(name='BurstablePerformance'),
      cores?: [ int32 ](name='Cores'),
      excludedInstanceTypes?: [ string ](name='ExcludedInstanceTypes'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
      instanceType?: string(name='InstanceType', description='The instance type in extended configuration N. Valid values of N: 1 to 20. For more information about the valid values of this parameter, see [Instance families](~~25378~~).', example='ecs.g5.large'),
      maxPrice?: double(name='MaxPrice', description='The maximum price of preemptible instances in extended configuration N.

>  If you set one or more other `LaunchTemplateConfig.N.*` parameters, you must also set the `LaunchTemplateConfig.N.MaxPrice` parameter.', example='3'),
      maxQuantity?: int32(name='MaxQuantity'),
      memories?: [ float ](name='Memories'),
      priority?: int32(name='Priority', description='The priority of extended configuration N. A value of 0 indicates the highest priority. Valid values: 0 to ∞.', example='1'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in extended configuration N. The zone of the ECS instances created from the extended configuration is determined by the vSwitch.

>  If you set one or more other `LaunchTemplateConfig.N.*` parameters, you must also set the `LaunchTemplateConfig.N.VSwitchId` parameter.', example='vsw-sn5bsitu4lfzgc5o7****'),
      weightedCapacity?: double(name='WeightedCapacity', description='The weight of the instance type specified in extended configuration N. A greater weight indicates that a single instance has more computing power and that fewer instances are required. The value must be greater than 0.

The weight is calculated based on the computing power of the instance type and the minimum computing power of a single instance in the cluster to be created by the auto provisioning group. For example, assume that the minimum computing power of a single instance is 8 vCPUs and 60 GiB of memory.

*   For an instance type with 8 vCPUs and 60 GiB of memory, you can set the weight to 1.
*   For an instance type with 16 vCPUs and 120 GiB of memory, you can set the weight to 2.', example='2'),
    }
  ](name='LaunchTemplateConfig', description='The configurations of launch template.', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template associated with the auto provisioning group. You can call the [DescribeLaunchTemplates](~~73759~~) operation to query available launch templates. When both the LaunchTemplateId and `LaunchConfiguration.*` parameters are specified, the LaunchTemplateId parameter takes precedence.', example='lt-bp1fgzds4bdogu03****', position='Query'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', description='The version of the launch template associated with the auto provisioning group. You can call the [DescribeLaunchTemplateVersions](~~73761~~) operation to query the versions of available launch templates.

Default value: the default version of the launch template.', example='1', position='Query'),
  maxSpotPrice?: float(name='MaxSpotPrice', description='The maximum price of preemptible instances in the auto provisioning group.

>  When both the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are specified, the smaller one of the two parameter values is used.', example='2', position='Query'),
  minTargetCapacity?: string(name='MinTargetCapacity', description='The minimum target capacity of the auto provisioning group. The value must be a positive integer.  

When you specify this parameter, take note of the following items:

- This parameter takes effect only when `AutoProvisioningGroupType` is set to instant.
- If the number of instances that can be created in the current region is smaller than the value of this parameter, the operation cannot be called and no instances are created.
- If the number of instances that can be created in the current region is greater than the value of this parameter, instances can be created based on specified parameters.', example='20', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payAsYouGoAllocationStrategy?: string(name='PayAsYouGoAllocationStrategy', description='The policy for creating pay-as-you-go instances. Valid values:

*   lowest-price: cost optimization policy. The auto provisioning group attempts to create instances of the lowest-priced instance type.
*   prioritized: priority-based policy. The auto provisioning group attempts to create instances based on the priority specified by the `LaunchTemplateConfig.N.Priority` parameter.

Default value: lowest-price.', example='prioritized', position='Query'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', description='The target capacity of pay-as-you-go instances in the auto provisioning group. The value must be smaller than the `TotalTargetCapacity` value.', example='30', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the auto provisioning group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the auto provisioning group.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spotAllocationStrategy?: string(name='SpotAllocationStrategy', description='The policy for creating preemptible instances. Valid values:

*   lowest-price: cost optimization policy. The auto provisioning group attempts to create instances of the lowest-priced instance type.
*   diversified: balanced distribution policy. The auto provisioning group attempts to create instances in zones that are specified in extended configurations and then evenly distribute the instances across the zones.
*   capacity-optimized: capacity-optimized distribution policy. The auto provisioning group attempts to create instances that are of the optimal instance types across the optimal zones based on resource availability.

Default value: lowest-price.', example='diversified', position='Query'),
  spotInstanceInterruptionBehavior?: string(name='SpotInstanceInterruptionBehavior', description='The operation to be performed on the preemptible instance when it is interrupted. Valid values:

*   stop: stops the preemptible instance.
*   terminate: releases the preemptible instance.

Default value: terminate.', example='terminate', position='Query'),
  spotInstancePoolsToUseCount?: int32(name='SpotInstancePoolsToUseCount', description='The number of preemptible instances of the lowest-priced instance type to be created by the auto provisioning group. This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`.

The value of SpotInstancePoolsToUseCount must be smaller than the N value specified in `LaunchTemplateConfig.N.*` parameters.', example='2', position='Query'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', description='The target capacity of preemptible instances in the auto provisioning group. The value must be smaller than the `TotalTargetCapacity` value.', example='20', position='Query'),
  systemDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory', description='The category of system disk N. You can use this parameter to specify multiple disk categories, and the disk categories are prioritized in the order in which they are specified. If a specified disk category is unavailable, the system uses the next available disk category. Valid values: 

- cloud_efficiency: ultra disk
- cloud_ssd: standard SSD
- cloud_essd: ESSD
- cloud: basic disk', example='cloud_ssd'),
    }
  ](name='SystemDiskConfig', description='The configs of system disks.', position='Query'),
  terminateInstances?: boolean(name='TerminateInstances', description='Specifies whether to release instances in the auto provisioning group when the auto provisioning group is deleted. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: retains instances in the auto provisioning group.

Default value: false.', example='true', position='Query'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='Specifies whether to release instances in the auto provisioning group when the auto provisioning group expires. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: only removes instances from the auto provisioning group but does not release them.

Default value: false.', example='true', position='Query'),
  totalTargetCapacity: string(name='TotalTargetCapacity', description='The total target capacity of the auto provisioning group. The value must be a positive integer.

The total target capacity of the auto provisioning group must be greater than or equal to the sum of the target capacity of pay-as-you-go instances specified by the `PayAsYouGoTargetCapacity` parameter and the target capacity of preemptible instances specified by the `SpotTargetCapacity` parameter.', example='60', position='Query'),
  validFrom?: string(name='ValidFrom', description='The time at which to start the auto provisioning group. The period of time between this point in time and the point in time specified by the `ValidUntil` parameter is the effective time period of the auto provisioning group.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

By default, an auto provisioning group is started immediately after it is created.', example='2019-04-01T15:10:20Z', position='Query'),
  validUntil?: string(name='ValidUntil', description='The expiration time of the auto provisioning group. The period of time between this point in time and the point in time specified by the `ValidFrom` parameter is the effective time period of the auto provisioning group.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

Default value: 2099-12-31T23:59:59Z.', example='2019-06-01T15:10:20Z', position='Query'),
}

model CreateAutoProvisioningGroupResponseBody = {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-sn54avj8htgvtyh8****'),
  launchResults?: {
    launchResult?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code returned when the instance cannot be created.', example='InvalidParameter'),
      errorMsg?: string(name='ErrorMsg', description='The error message returned when the instance cannot be created.', example='Specific parameter is not valid.'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds', description='The IDs of created instances.'),
      instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.', example='NoSpot'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='LaunchResult')
  }(name='LaunchResults', description='Details about the instances created by the auto provisioning group. The values of parameters in this array are returned only when AutoProvisioningGroupType is set to `instant`.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='745CEC9F-0DD7-4451-9FE7-8B752F39****'),
}

model CreateAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoProvisioningGroupResponseBody(name='body'),
}

/**
  * * Auto Provisioning is a service that allows quick deployment of an instance cluster that consists of preemptible and pay-as-you-go instances. Auto Provisioning supports one-click deployment of instance clusters across different billing methods, instance families, and zones. For more information, see [Use auto provisioning group-related API operations to create multiple ECS instances at the same time](~~200772~~).
  * * Auto Provisioning uses auto provisioning groups to schedule and maintain computing resources. You can use auto provisioning groups to obtain a steady supply of computing resources. This helps reduce the impact on computing capacity when preemptible instances are reclaimed.
  * * Auto Provisioning is provided free-of-charge. However, you are charged for instance resources that are created in auto provisioning groups. For more information about the billing, see [Overview](~~52088~~) and [Pay-as-you-go](~~40653~~).
  * * When you specify both the `LaunchTemplateId` and `LaunchConfiguration.*` parameters, the LaunchTemplateId parameter takes precedence.
  *
 */
async function createAutoProvisioningGroup(request: CreateAutoProvisioningGroupRequest): CreateAutoProvisioningGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoProvisioningGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoSnapshotPolicyRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='The retention period of the snapshot copy in the destination region. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65535: The automatic snapshot is retained for the specified number of days.

Default value: -1.', example='30', position='Query'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='Specifies whether to enable cross-region replication for the automatic snapshot.

*   true: enables cross-region replication for snapshots.
*   false: disables cross-region replication for snapshots.', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2kkmhmhs****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageLocationArn?: string(name='StorageLocationArn', description='> This parameter is unavailable.', example='null', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the automatic snapshot policy. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the automatic snapshot policy. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. The tag value cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the automatic snapshot policy.', position='Query'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='The destination region to which to copy the snapshot. You can specify only a single destination region.', example='["cn-hangzhou"]', position='Query'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (.), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='TestName', position='Query'),
  regionId: string(name='regionId', description='The ID of the region in which to create the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  repeatWeekdays: string(name='repeatWeekdays', description='The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to Monday to Sunday. 1 indicates Monday.

*   Set this parameter to a JSON-formatted array. For example, a value of \\["1"] specifies automatic snapshots to be created every Monday.
*   To schedule multiple automatic snapshots to be created in a week, you can specify multiple values. Separate the values with commas (,). You can specify a maximum of seven days. For example, a value of \\["1","3","5"] specifies automatic snapshots to be created every Monday, Wednesday, and Friday.', example='["1","2"]', position='Query'),
  retentionDays: int32(name='retentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65535: The automatic snapshot is retained for the specified number of days.

Default value: -1.', example='30', position='Query'),
  timePoints: string(name='timePoints', description='The points in time of the day at which to create automatic snapshots. The time must be in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 on-the-hour points in time from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Format description:

*   You must set this parameter to a JSON-formatted array. For example, a value of \\["1"] specifies automatic snapshots to be created at 01:00:00.
*   To schedule multiple automatic snapshots to be created in a day, you can specify multiple values. Separate the values with commas (,). You can specify a maximum of 24 points in time. For example, a value of \\["1","3","5"] specifies automatic snapshots to be created at 01:00:00, 03:00:00, and 05:00:00.', example='["0", "1", … "23"]', position='Query'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-bp12m37ccmxvbmi5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * When you call this operation to create an automatic snapshot policy, you can specify the days of the week on which to create automatic snapshots, the retention period of the automatic snapshots, and cross-region replication for snapshots in the policy to meet your diverse data backup requirements. After you create an automatic snapshot policy, you must call the [ApplyAutoSnapshotPolicy](~~25531~~) operation to apply it to disks. If you want to modify the automatic snapshot policy, you must call the [ModifyAutoSnapshotPolicyEx](~~25529~~) operation.
  * When you call this operation, take note of the following items:
  * *   You can create a maximum of 100 automatic snapshot policies within each region for a single Alibaba Cloud account.
  * *   If an automatic snapshot is being created when the time scheduled for creating another automatic snapshot is due, the new snapshot task is skipped. This may occur when a disk contains a large volume of data. For example, you have scheduled snapshots to be created at 09:00:00, 10:00:00, 11:00:00, and 12:00:00 for a disk. The system starts to create a snapshot for the disk at 09:00:00. The process takes 80 minutes because the disk contains a large volume of data and ends at 10:20:00. The system skips the automatic snapshot task scheduled for 10:00:00 and creates the next automatic snapshot for the disk at 11:00:00.
  * *   For information about how to copy a snapshot from one region to another, see the "Background information" section in [Copy a snapshot](~~159441~~).
  *
 */
async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateCapacityReservationRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool to generate after the capacity reservation takes effect. Valid values:

*   Open: open private pool.
*   Target: targeted private pool.

Default value: Open.', example='Open'),
    name?: string(name='Name', description='The name of the capacity reservation. The description must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='crpTestName'),
  }(name='PrivatePoolOptions', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The `ClientToken` value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the capacity reservation. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='This is description.', position='Query'),
  endTime?: string(name='EndTime', description='The time when the capacity reservation expires. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. For more information, see [ISO 8601](~~25696~~).', example='2021-10-30T06:32:00Z', position='Query'),
  endTimeType?: string(name='EndTimeType', description='The release mode of the capacity reservation. Valid values:

*   Limited: The capacity reservation is automatically released at the specified time. If you specify this parameter, you must also specify the `EndTime` parameter.
*   Unlimited: The capacity reservation must be manually released. You can release it anytime.', example='Unlimited', position='Query'),
  instanceAmount: int32(name='InstanceAmount', description='The total number of instances for which to reserve the capacity of an instance type.', example='2', minimum=1, position='Query'),
  instanceType: string(name='InstanceType', description='The instance type. A capacity reservation can be created to reserve the capacity of only a single instance type. You can call the [DescribeInstanceTypes](~~25620~~) operation to query the instance types provided by ECS.', example='ecs.g6.xlarge', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', description='The operating system of the image used by the instance. This parameter corresponds to the `Platform` parameter of regional reserved instances. If the operating system of a capacity reservation matches that of a regional reserved instance, the regional reserved instance can be applied to offset bills of the unused capacity of the capacity reservation. Valid values:

*   Windows: Windows Server operating system.
*   Linux: Linux and UNIX-like operating system.

Default value: Linux.

> This parameter is unavailable for public use.', example='Linux', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the capacity reservation.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The time when the capacity reservation takes effect. The CreateCapacityReservation operation can be called to create only immediate capacity reservations.

>  If you do not specify this parameter, the capacity reservation takes effect immediately.', example='2021-10-30T05:32:00Z', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the capacity reservation. Valid values of N: 1 to 20. You cannot specify empty strings as tag keys. The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the capacity reservation. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the capacity reservation.', position='Query'),
  zoneId: [ string ](name='ZoneId', description='The ID of the zone in which to create the capacity reservation. A capacity reservation can reserve resources within only a single zone.', example='cn-hangzhou-h', position='Query'),
}

model CreateCapacityReservationResponseBody = {
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the capacity reservation.', example='crp-bp67acfmxazb4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCapacityReservationResponseBody(name='body'),
}

/**
  * When you create a capacity reservation, you can specify attributes such as a zone and an instance type. Then, the system uses a private pool to reserve resources that match the specified attributes. For more information, see [Overview of Immediate Capacity Reservation](~~193633~~).
  * *   Currently, only immediate capacity reservations are supported. Immediate capacity reservations take effect as soon as they are purchased. After you purchase an immediate capacity reservation, the specified instance type is billed on a pay-as-you-go basis regardless of whether the capacity reservation is actually used to create pay-as-you-go instances. Billing stops until you manually release the capacity reservation or until the capacity reservation expires and is automatically released.
  *     *   You can call the [CreateInstance](~~25499~~) or [RunInstances](~~63440~~) operation to specify private pool attributes when you create instances. You can also call the [ModifyInstanceAttachmentAttributes](~~190006~~) operation to modify the attributes of a private pool. When an instance matches a private pool associated with a capacity reservation, you are charged based on the configurations of the instance, such as the instance type, disks, and public bandwidth.
  *     *   Before a capacity reservation is used to create pay-as-you-go instances, you are charged only for the specified instance type.
  * *   Savings plans or regional reserved instances can be applied to offset the hourly bills of the unused capacity of immediate capacity reservations and the hourly bills of the instances that are matched to immediate capacity reservations. Zonal reserved instances cannot be applied to offset these bills. We recommend that you purchase reserved instances or savings plans before you purchase immediate capacity reservations. This way, you can have guaranteed access to resources for free within the coverage of the reserved instances or savings plans.
  * > The CreateCapacityReservation operation can be called to create only immediate capacity reservations. You can use the ECS console to create immediate or scheduled capacity reservations. For more information, see [Overview](~~193626#section-oil-qh5-xvx~~).
  *
 */
async function createCapacityReservation(request: CreateCapacityReservationRequest): CreateCapacityReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCapacityReservation', 'POST', '/', 'json', false, 'json', request);
}

model CreateCommandRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandContent: string(name='CommandContent', description='The Base64-encoded content of the command.

*   The parameter value must be Base64-encoded and cannot exceed 18 KB in size.

*   Custom parameters can be added to the command. To enable the custom parameter feature, you must set `EnableParameter` to true.

    *   Custom parameters are defined in the `{{}}` format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   The number of custom parameters cannot exceed 20.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.

*   You can specify built-in environment parameters as custom parameters. Then, when you run the command, these parameters are automatically specified by Cloud Assistant. You can specify the following built-in environment parameters:

    *   `{{ACS::RegionId}}`: the ID of the region.

    *   `{{ACS::AccountId}}`: the UID of the Alibaba Cloud account.

    *   `{{ACS::InstanceId}}`: the ID of the instance. When the command is run on multiple instances, if you want to specify `{{ACS::InstanceId}}` as a built-in environment variable, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::InstanceName}}`: the name of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceName}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.344
        *   Windows: 2.1.3.344

    *   `{{ACS::InvokeId}}`: the ID of the command task. If you want to specify `{{ACS::InvokeId}}` as a built-in environment variable, make sure that the version of the Cloud Assistant client is not earlier than the following one:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::CommandId}}`: the ID of the command. When you call the [RunCommand](~~141751~~) operation, if you want to specify `{{ACS::CommandId}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309', example='ZWNobyAxMjM=', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content (CommandContent). Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is Base64-encoded.

Default value: Base64.

> If the specified value of this parameter is invalid, Base64 is used by default.', example='PlainText', position='Query'),
  description?: string(name='Description', description='The description of the command. The description supports all character sets and can be up to 512 characters in length.', example='testDescription', position='Query'),
  enableParameter?: boolean(name='EnableParameter', description='Specifies whether to use custom parameters in the command.

Default value: false.', example='false', position='Query'),
  name: string(name='Name', description='The name of the command. The name supports all character sets and can be up to 128 characters in length.', example='testName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the command.', position='Query'),
  timeout?: long(name='Timeout', description='The maximum timeout period for the command execution on the instance. Unit: seconds. When a command cannot be run, a timeout error occurs. After that, the command process is forcefully terminated by canceling the PID of the command.

Default value: 60.', example='60', position='Query'),
  type: string(name='Type', description='The command type. Valid values:

*   RunBatScript: batch commands. These commands are applicable to Windows instances.
*   RunPowerShellScript: PowerShell commands. These commands are applicable to Windows instances.
*   RunShellScript: shell commands. These commands are applicable to Linux instances.', example='RunShellScript', position='Query'),
  workingDir?: string(name='WorkingDir', description='The working directory of the command on the instance.

Default value:

*   For Linux instances, the default value is the home directory of the root user, which is the `/root` directory.
*   For Windows instances, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32\\`.', example='/root/', position='Query'),
}

model CreateCommandResponseBody = {
  commandId?: string(name='CommandId', description='The ID of the command.', example='c-7d2a745b412b4601b2d47f6a768d****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCommandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCommandResponseBody(name='body'),
}

/**
  * *   You can create commands of the following types:
  *     *   RunBatScript: batch commands. These commands are applicable to Windows instances.
  *     *   RunPowerShellScript: PowerShell commands. These commands are applicable to Windows instances.
  *     *   RunShellScript: shell commands. These commands are applicable to Linux instances.
  * *   You can specify the TimeOut parameter to set the maximum timeout period for executions of a command on Elastic Compute Service (ECS) instances. If an execution times out, the Cloud Assistant client forcefully terminates the command process by canceling the process ID (PID) of the command. For more information, see [Install the Cloud Assistant client](~~64921~~).
  *     *   When the one-time execution of a command times out, the execution state ([InvokeRecordStatus](~~64845~~)) of the command becomes Failed.
  *     *   For a scheduled task, take note of the following items:
  *         *   The timeout period takes effect on each execution of the command.
  *         *   When a scheduled execution of a command times out, the execution state ([InvokeRecordStatus](~~64845~~)) of the command becomes Failed.
  *         *   The timeout of one execution does not affect the subsequent executions of the command.
  * *   You can retain up to 500 to 10,000 Cloud Assistant commands in each region.
  * *   You can use the WorkingDir parameter to specify the working directory of a Cloud Assistant command. For Linux instances, the default working directory of a command is the home directory of the root user, which is `/root`. For Windows instances, the default working directory of a command is the directory where the Cloud Assistant client process resides, such as `C:\\Windows\\System32`.
  * *   You can enable the custom parameter feature for a Cloud Assistant command by setting EnableParameter to true when you create the command. When you configure the CommandContent parameter, you can define custom parameters in the {{parameter}} format. Then, when the [InvokeCommand](~~64841~~) operation is called, the key-value pairs of custom parameters are passed in. For example, assume that the command content is `echo {{name}}`. You can use the Parameters parameter to pass in the `<name, Jack>` key-value pair when the InvokeCommand operation is called. The name key of the custom parameter is automatically replaced by the paired Jack value to generate a new command. Therefore, the `echo Jack` command is actually run.
  *
 */
async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommand', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedHostClusterRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter. It cannot contain `http://` or `https://`.

This parameter is empty by default.', example='myDDHCluster', position='Query'),
  description?: string(name='Description', description='The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='This-is-my-DDHCluster', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether RAM users are authorized, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned and the request is made.

Default value: false', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the dedicated host cluster.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag value cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the resource. You can enter most at 20 tags for the resource.', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the dedicated host cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-f', position='Query'),
}

model CreateDedicatedHostClusterResponseBody = {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6bw0vz9v2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2A664A6-2933-4C64-88AE-5033D003****'),
}

model CreateDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostClusterResponseBody(name='body'),
}

async function createDedicatedHostCluster(request: CreateDedicatedHostClusterRequest): CreateDedicatedHostClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHostCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDemandRequest {
  amount: int32(name='Amount', description='The number of instances. Valid values: 1 to 100000.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The `ClientToken` value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E', position='Query'),
  demandDescription?: string(name='DemandDescription', description='The description of the demand. The description must be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).', example='k8s-node-demand-desc', position='Query'),
  demandName?: string(name='DemandName', description='The name of the demand. The name must be 2 to 128 characters in length and start with a letter but cannot start with [http:// or https://](http://https://). It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

The default value is the instance type.', example='k8s-node-demand', position='Query'),
  endTime: string(name='EndTime', description='The end time of the subscription period. Specify the time in the [ISO 8601](~~25696~~) standard and use the UTC time. The format is yyyy-MM-dd hh:mm:ss.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the specified minute (mm). The value of EndTime must be later than the value of Starttime. In most cases, the interval between the two times cannot be more than 10 days.', example='2019-12-10 12:05:00', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Default value: PostPaid. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  instanceType: string(name='InstanceType', description='The instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Select instance types](~~58291~~) to learn how to select instance types.', example='ecs.c6.large', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: int32(name='Period', description='The subscription period of the resource. Valid values:

*   When the value of PeriodUnit is Day, the valid values of Period are 1, 2, 3, 4, 5, and 6.
*   When the value of PeriodUnit is Week, the valid values of Period are 1, 2, 3, and 4.
*   When the value of PeriodUnit is Month, the valid values of Period are 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='The unit of the subscription period. Default value: Month. Valid values:

*   Day
*   Week
*   Month', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The start time of the subscription period. Specify the time in the [ISO 8601](~~25696~~) standard and use the UTC time. The default format is yyyy-MM-dd HH:mm:ss.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the specified minute (mm). The value of EndTime must be later than the value of Starttime. In most cases, the interval between the two times cannot be more than 10 days.', example='2019-12-01 12:05:00', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent list of zones.

This parameter is empty by default, which indicates that the system randomly selects a zone.', example='cn-hangzhou-g', position='Query'),
}

model CreateDemandResponseBody = {
  demandId?: string(name='DemandId', description='The ID of the demand.', example='ed-bp11n21kq00sl71p****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateDemandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDemandResponseBody(name='body'),
}

/**
  * You can call this operation to file a demand for an ECS instance type. Alibaba Cloud provides the requested resources based on your demand.
  * You can file demands only for I/O optimized instance types and instances of the virtual private cloud (VPC) type.
  * > This operation is in internal preview and has not been officially released. We recommend that you do not call this operation.
  *
 */
async function createDemand(request: CreateDemandRequest): CreateDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDemand', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeploymentSetRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deploymentSetName?: string(name='DeploymentSetName', description='The name of the deployment set. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDeploymentSetName', position='Query'),
  description?: string(name='Description', description='The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription', position='Query'),
  domain?: string(name='Domain', description='The deployment domain. Set the value to Default.

Default: Instances in the deployment set are distributed only within the current zone.', example='Default', position='Query'),
  granularity?: string(name='Granularity', description='The deployment granularity. Set the value to host.

host: Instances in the deployment set are dispersed at the granularity of hosts.', example='host', position='Query'),
  groupCount?: long(name='GroupCount', description='The number of deployment set groups in the deployment set. Valid values: 1 to 7.

Default value: 3.

> This parameter takes effect only when `Strategy` is set to AvailabilityGroup.', example='1', position='Query'),
  onUnableToRedeployFailedInstance?: string(name='OnUnableToRedeployFailedInstance', description='The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:

*   CancelMembershipAndStart: removes the instances from the deployment set and starts the instances immediately after they are failed over.
*   KeepStopped: leaves the instances in the Stopped state and starts them after resources are replenished.

Default value: CancelMembershipAndStart.', example='CancelMembershipAndStart', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  strategy?: string(name='Strategy', description='The deployment strategy. Valid values:

*   Availability: high availability strategy.
*   AvailabilityGroup: high availability group strategy.

Default value: Availability.', example='Availability', position='Query'),
}

model CreateDeploymentSetResponseBody = {
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp1frxuzdg87zh4pzq****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeploymentSetResponseBody(name='body'),
}

async function createDeploymentSet(request: CreateDeploymentSetRequest): CreateDeploymentSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeploymentSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiagnosticMetricSetRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description?: string(name='Description', description='The description of the diagnostic metric set.', example='testDescription', maxLength=255, position='Query'),
  metricIds: [ string ](name='MetricIds', description='The IDs of diagnostic metrics. You can specify up to 100 diagnostic metric IDs.', position='Query'),
  metricSetName?: string(name='MetricSetName', description='The name of the diagnostic metric set.', example='my_dms', maxLength=128, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the diagnostic metric set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Default value: instance.', example='instance', position='Query'),
}

model CreateDiagnosticMetricSetResponseBody = {
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set, which is the unique identifier of the set.', example='dms-o7ymuutup5l*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model CreateDiagnosticMetricSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticMetricSetResponseBody(name='body'),
}

async function createDiagnosticMetricSet(request: CreateDiagnosticMetricSetRequest): CreateDiagnosticMetricSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiagnosticMetricSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiagnosticReportRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  endTime?: string(name='EndTime', description='The end of the reporting period. This parameter takes effect only for diagnostic metrics that do not need to be assessed by running Cloud Assistant commands in guest operating systems.', example='2022-07-11T14:00:00Z', position='Query'),
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set. If this parameter is left empty, the dms-instancedefault set is used, which is the default diagnostic metric set provided for Elastic Compute Service (ECS) instances.', example='dms-uf6i0tv2refv8wz*****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create a diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='i-uf6i0tv2refv8wz*****', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the reporting period. This parameter takes effect only for diagnostic metrics that do not need to be assessed by running Cloud Assistant commands in guest operating systems.', example='2022-07-11T12:00:00Z', position='Query'),
}

model CreateDiagnosticReportResponseBody = {
  reportId?: string(name='ReportId', description='The ID of the diagnostic report, which is the unique identifier of the report.', example='dr-uf6i0tv2refv8wz*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDiagnosticReport', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  advancedFeatures?: string(name='AdvancedFeatures', description='This parameter is unavailable.', example='hide', position='Query'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='This parameter is unavailable.', example='1000000000'),
      roleType?: string(name='RoleType', description='This parameter is unavailable.', example='hide'),
      rolearn?: string(name='Rolearn', description='This parameter is unavailable.', example='hide'),
    }
  ](name='Arn', description='该参数暂未开放使用。', position='Query'),
  burstingEnabled?: boolean(name='BurstingEnabled', description='This parameter is unavailable.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testDescription', position='Query'),
  diskCategory?: string(name='DiskCategory', description='The category of the data disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD

Default value: cloud.', example='cloud_ssd', position='Query'),
  diskName?: string(name='DiskName', description='The name of the disk. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='testDiskName', position='Query'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='This parameter is unavailable.', example='hide', position='Query'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.

Default value: false.', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the created subscription disk is automatically attached.

*   After you specify the instance ID, the specified ResourceGroupId, Tag.N.Key, Tag.N.Value, ClientToken, and KMSKeyId parameters are ignored.
*   You cannot specify ZoneId and InstanceId at the same time.

This parameter is empty by default. This indicates that a pay-as-you-go disk is created. The RegionId and ZoneId parameters specify where the disk resides.', example='i-bp18pnlg1ds9rky4****', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key used by the disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40826X', position='Query'),
  multiAttach?: string(name='MultiAttach', description='Specifies whether to enable the multi-attach feature for the disk. Valid values:

*   Disabled: disables the multi-attach feature.
*   Enabled: enables the multi-attach feature. Set the value to `Enabled` only for ESSDs.

Default value: Disabled.

>  Disks for which the multi-attach feature is enabled support only the pay-as-you-go billing method. When the `MultiAttach` parameter is set to Enabled, you cannot specify the `InstanceId` parameter. You can call the [AttachDisk](~~25515~~) operation to attach disks to instances after the disks are created. Disks for which the multi-attach feature is enabled can be attached only as data disks.', example='Disabled', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: An ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

Default value: PL1.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1', position='Query'),
  provisionedIops?: long(name='ProvisionedIops', description='This parameter is unavailable.', example='40000', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the disk.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  size?: int32(name='Size', description='The size of the disk. Unit: GiB. This parameter is required. Valid values:

*   Valid values when DiskCategory is set to cloud: 5 to 2,000

*   Valid values when DiskCategory is set to cloud_efficiency: 20 to 32,768

*   Valid values when DiskCategory is set to cloud_ssd: 20 to 32,768

*   Valid values when DiskCategory is set to cloud_essd: depends on the `PerformanceLevel` value.

    *   Valid values when PerformanceLevel is set to PL0: 40 to 32,768
    *   Valid values when PerformanceLevel is set to PL1: 20 to 32,768
    *   Valid values when PerformanceLevel is set to PL2: 461 to 32,768
    *   Valid values when PerformanceLevel is set to PL3: 1,261 to 32,768

If the `SnapshotId` parameter is specified, the following limits apply to the `SnapshotId` and `Size` parameters:

*   If the size of the snapshot specified by the `SnapshotId` parameter is greater than the specified `Size` value, the size of the created disk is equal to the specified snapshot size.
*   If the size of the snapshot specified by the `SnapshotId` parameter is smaller than the specified `Size` value, the size of the created disk is equal to the specified `Size` value.', example='2000', minimum=5, maximum=65536, position='Query'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot used to create the disk. Snapshots that were created on or before July 15, 2013 cannot be used to create disks.

The following limits apply to the `SnapshotId` and `Size` parameters:

*   If the size of the snapshot specified by the `SnapshotId` parameter is greater than the specified `Size` value, the size of the created disk is equal to the specified snapshot size.
*   If the size of the snapshot specified by the `SnapshotId` parameter is smaller than the specified `Size` value, the size of the created disk is equal to the specified `Size` value.', example='s-bp67acfmxazb4p****', position='Query'),
  storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. To create a disk in a specific dedicated block storage cluster, specify this parameter. For more information about dedicated block storage clusters, see [What is Dedicated Block Storage Cluster?](~~208883~~)

>  You can specify only one of the storage set-related parameters (`StorageSetId` and `StorageSetPartitionNumber`) and dedicated block storage cluster-related parameter (`StorageClusterId`). If you specify more than one of the preceding parameters, the call fails.', example='dbsc-j5e1sf2vaf5he8m2****', position='Query'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.

>  You can specify only one of the storage set-related parameters (`StorageSetId` and `StorageSetPartitionNumber`) and dedicated block storage cluster-related parameter (`StorageClusterId`). If you specify more than one of the preceding parameters, the call fails.', example='ss-bp67acfmxazb4p****', position='Query'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The number of partitions in the storage set. The value must be greater than or equal to 2, but cannot exceed the quota obtained by calling the [DescribeAccountAttributes](~~73772~~) operation.

Default value: 2.', example='3', minimum=1, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the disk. Valid values of N: 1 to 20. The key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the disk. Valid values of N: 1 to 20. The value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='云盘的标签信息列表。', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the pay-as-you-go disk.

*   If the InstanceId parameter is not specified, the ZoneId parameter is required.
*   You cannot specify ZoneId and InstanceId at the same time.', example='cn-hangzhou-g', position='Query'),
}

model CreateDiskResponseBody = {
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp131n0q38u3a4zi****'),
  orderId?: string(name='OrderId', description='The ID of the order.

>  This parameter is returned only when you create a subscription disk.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateDiskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskResponseBody(name='body'),
}

/**
  * ## Description
  * *   You can enable the multi-attach feature when you create a disk. We recommend that you first understand this feature and its limits. For more information, see [NVMe protocol](~~256487~~) and [Use the multi-attach feature](~~262105~~).
  * <!---->
  * *   The disk can be a basic disk, an ultra disk, a standard SSD, or an enhanced SSD (ESSD).
  * *   When you create disks, you may be charged for the resources used. We recommend that you understand the Elastic Compute Service (ECS) billing methods before you create a disk. For more information, see [Billing overview](~~25398~~).
  * *   By default, the `DeleteAutoSnapshot` parameter is set to `true` when a disk is created. This indicates that when the disk is released, its automatic snapshots are also deleted. You can call the [ModifyDiskAttribute](~~25517~~) operation to modify the parameter.
  * *   If you do not configure the performance level when you create an ESSD, the performance level for the ESSD is PL1 by default. You can call the [ModifyDiskSpec](~~123780~~) operation to modify the performance level of the ESSD.
  * *   By default, for a disk that is created by calling the CreateDisk operation, the `Portable` attribute is set to `true` and the billing method is pay-as-you-go.
  *
 */
async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDisk', 'POST', '/', 'json', false, 'json', request);
}

model CreateElasticityAssuranceRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool with which you want to associate the elasticity assurance. Valid values:

*   Open: open private pool
*   Target: specified private pool

Default value: Open.', example='Open'),
    name?: string(name='Name', description='The name of the elasticity assurance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='eapTestName'),
  }(name='PrivatePoolOptions', position='Query'),
  assuranceTimes?: string(name='AssuranceTimes', description='The total number of times that the elasticity assurance can be applied. Set the value to Unlimited. This value indicates that the elasticity assurance can be applied an unlimited number of times within its effective duration.

Default value: Unlimited.', example='Unlimited', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that you want to use to ensure the idempotency of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The `ClientToken` value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the elasticity assurance. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='This is description.', position='Query'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of instances for which to reserve the capacity of an instance type.

Valid values: 1 to 1000.', example='2', minimum=1, position='Query'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount', description='> This parameter is no longer used.', example='null', minimum=1, position='Query'),
  instanceType: [ string ](name='InstanceType', description='The instance type of the instance. An elasticity assurance can be created to reserve the capacity of a single instance type.', example='ecs.c6.xlarge', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The effective duration of the elasticity assurance. The unit of the effective duration is determined by the `PeriodUnit` value. Valid values:

*   When the `PeriodUnit` parameter is set to `Month`, the valid values are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   When the `PeriodUnit` parameter is set to `Year`, the valid values are 1, 2, 3, 4, and 5.

Default value: 1.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the effective duration of the elasticity assurance. Valid values:

*   Month
*   Year

Default value: Year.', example='Year', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the elasticity assurance.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', description='The time when the elasticity assurance takes effect. The default value is the time when the CreateElasticityAssurance operation is called to create the elasticity assurance. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. For more information, see [ISO 8601](~~25696~~).', example='2020-10-30T06:32:00Z', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the elasticity assurance. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the elasticity assurance. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the elasticity assurance.', position='Query'),
  zoneId: [ string ](name='ZoneId', description='The zone ID of the elasticity assurance. An elasticity assurance can be used to reserve resources within a single zone.', example='cn-hangzhou-h', position='Query'),
}

model CreateElasticityAssuranceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='1234567890'),
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the elasticity assurance.', example='eap-bp67acfmxazb4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateElasticityAssuranceResponseBody(name='body'),
}

/**
  * Elasticity Assurance provides a new method to purchase and use resources with flexibility and assurance. It offers assured resource reservations for pay-as-you-go Elastic Compute Service (ECS) instances. For more information, see [Overview of Elasticity Assurance](~~193630~~).
  * *   Elasticity assurances are not refundable after purchase.
  * *   Elasticity assurances are applicable to only pay-as-you-go ECS instances.
  * *   Elasticity assurances only support the unlimited mode. Therefore, you can set `AssuranceTimes` only to `Unlimited`. Elasticity assurances in unlimited mode take effect immediately after they are purchased and can be applied an unlimited number of times within their effective duration.
  *
 */
async function createElasticityAssurance(request: CreateElasticityAssuranceRequest): CreateElasticityAssuranceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateElasticityAssurance', 'POST', '/', 'json', false, 'json', request);
}

model CreateForwardEntryRequest {
  externalIp: string(name='ExternalIp', position='Query'),
  externalPort: string(name='ExternalPort', position='Query'),
  forwardTableId: string(name='ForwardTableId', position='Query'),
  internalIp: string(name='InternalIp', position='Query'),
  internalPort: string(name='InternalPort', position='Query'),
  ipProtocol: string(name='IpProtocol', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId'),
  requestId?: string(name='RequestId'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateHaVipRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  ipAddress?: string(name='IpAddress', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
}

model CreateHaVipResponseBody = {
  haVipId?: string(name='HaVipId'),
  requestId?: string(name='RequestId'),
}

model CreateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model CreateHpcClusterRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the HPC cluster. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testHPCDescription', position='Query'),
  name: string(name='Name', description='The name of the HPC cluster. The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='hpc-Cluster-01', position='Query'),
  ownerAccount?: string(name='OwnerAccount', description='RAM用户的账号登录名称。', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', description='RAM用户的虚拟账号ID。', example='1234567890', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='资源主账号的账号名称。', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源主账号的ID，亦即UID。', example='1234567890', position='Query'),
}

model CreateHpcClusterResponseBody = {
  hpcClusterId?: string(name='HpcClusterId', description='The ID of cluster.', example='hpc-pnlg1ds9rky4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHpcClusterResponseBody(name='body'),
}

async function createHpcCluster(request: CreateHpcClusterRequest): CreateHpcClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHpcCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  architecture?: string(name='Architecture', description='The system architecture of the system disk. If you specify a data disk snapshot to create the system disk of the custom image, use the Architecture parameter to specify the system architecture of the system disk. Valid values:

*   i386
*   x86\\_64
*   arm64

Default value: x86\\_64.', example='x86_64', position='Query'),
  bootMode?: string(name='BootMode', description='The boot mode of the custom image. Valid values:

*   BIOS
*   UEFI

> You must be familiar with the boot modes that are supported by the specified image. When you use this parameter to change the boot mode of the image, specify a boot mode that is supported by the image to ensure that instances that use this image can start as expected.', example='BIOS', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the custom image. The description must be 2 to 256 characters in length and cannot start with [http:// or https://.](http://https://。)', example='ImageTestDescription', position='Query'),
  detectionStrategy?: string(name='DetectionStrategy', description='The mode that you want to use to check the source image. If you do not specify this parameter, the source image is not checked. You can check only Linux images. Set the value to Standard, which specifies the standard check mode.

The following items are checked in standard check mode:

*   Virtio: whether the virtio driver is installed.
*   Fstab: whether the mounting configurations in the fstab file are valid.
*   Grub: whether the GRand Unified Bootloader (GRUB) configurations are valid.
*   SystemImage: whether the image is valid. Do not import images that are in the ISO format or empty.
*   CloudInit: whether cloud-init is installed.
*   NVMe: whether the NVMe driver is installed.
*   Selinux: whether SElinux is enabled.
*   OnlineResizeFS: whether the root partition can be automatically resized.
*   Dhcp: whether Dynamic Host Configuration Protocol (DHCP) is enabled for network interfaces.
*   RtcTimeMode: the RTC time mode.
*   Platform: the platform. Example: Linux or Windows.
*   OSVersion: the operating system version. Example: Centos 7.9.
*   Architecture: the architecture. Example: ARM or x86\\_64.
*   BootMode: the boot mode. Example: UEFI or Legacy.
*   KernelVersion: the kernel version.
*   CloudAssistant: whether the Cloud Assistant client is installed.
*   SecurityCenterAgent: whether the Security Center agent is installed.', example='Standard', position='Query'),
  diskDeviceMapping?: [ 
    {
      device?: string(name='Device', description='The device name of disk N in the custom image. Valid values:

*   For disks other than basic disks, such as standard SSDs, ultra disks, and enhanced SSDs (ESSDs), the valid values range from /dev/vda to /dev/vdz in alphabetical order.
*   For basic disks, the valid values range from /dev/xvda to /dev/xvdz in alphabetical order.', example='/dev/vdb'),
      diskType?: string(name='DiskType', description='The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:

*   system: system disk
*   data: data disk', example='system'),
      size?: int32(name='Size', description='The size of disk N in the custom image. Unit: GiB. The valid values and default value of the DiskDeviceMapping.N.Size parameter vary based on the value of the DiskDeviceMapping.N.SnapshotId parameter.

*   If no corresponding snapshot IDs are specified in the value of the DiskDeviceMapping.N.SnapshotId parameter, the DiskDeviceMapping.N.Size parameter has the following valid values and default values:

    *   For basic disks, the valid values range from 5 to 2000, and the default value is 5.
    *   For other disks, the valid values range from 20 to 32768, and the default value is 20.

*   If a corresponding snapshot ID is specified in the value of the DiskDeviceMapping.N.SnapshotId parameter, the value of the DiskDeviceMapping.N.Size parameter must be greater than or equal to the size of the specified snapshot. The default value of the DiskDeviceMapping.N.Size parameter is the size of the specified snapshot.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that is used to create the custom image.', example='s-bp17441ohwkdca0****'),
    }
  ](name='DiskDeviceMapping', description='The information about the custom image.', position='Query'),
  imageFamily?: string(name='ImageFamily', description='The name of the family of the custom image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with acs: or aliyun. The name cannot contain [http:// or https://. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)', example='hangzhou-daily-update', position='Query'),
  imageName?: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with [http:// or https://. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)', example='TestCentOS', position='Query'),
  imageVersion?: string(name='ImageVersion', description='The version of the custom image.

> If you specify an instance by using the `InstanceId` parameter and the instance uses an Alibaba Cloud Marketplace image or a custom image that is created from an Alibaba Cloud Marketplace image, you must leave this parameter empty or set this parameter to the value of the ImageVersion parameter of the instance.', example='2017011017', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that is used to create the custom image.', example='i-bp1g6zv0ce8oghu7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', description='The distribution of the operating system for the system disk in the custom image. If you specify a data disk snapshot to create the system disk of the custom image, use the Platform parameter to specify the distribution of the operating system for the system disk. Valid values:

*   CentOS
*   Ubuntu
*   SUSE
*   OpenSUSE
*   RedHat
*   Debian
*   CoreOS
*   Aliyun
*   Windows Server 2012
*   Windows 7
*   Customized Linux
*   Others Linux

Default value: Others Linux.', example='CentOS', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image that you want to create. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the custom image. If you do not specify this parameter, the image is assigned to the default resource group.

> If you call the CreateImage operation as a RAM user who is not authorized to manage the default resource group and you do not specify the `ResourceGroupId` parameter, the `Forbidden: User not authorized to operate on the specified resource` error message is returned. You must specify the ID of a resource group that the RAM user is authorized to manage or authorize the RAM user to manage the default resource group before you call the CreateImage operation again.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that is used to create the custom image.', example='s-bp17441ohwkdca0****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the custom image. You can specify up to 20 tag keys for a custom image. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='KeyTest'),
      value?: string(name='Value', description='The value of tag N of the custom image. You can specify up to 20 tag values for a custom image. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='ValueTest'),
    }
  ](name='Tag', description='The tags that you want to add to the custom image.', position='Query'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp146shijn7hujku****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8B26B44-0189-443E-9816-*******'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can use the created custom image only if the image is in the Available (Available) state.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked to ensure security. No operations are allowed on the instance.
  * You can call the CreateImage operation to create a custom image by using one of the following methods. The following request parameters are sorted by priority: `InstanceId` > `DiskDeviceMapping` > `SnapshotId`. If your request contains two or more of these parameters, the custom image is created based on the parameter that has a higher priority.
  * *   **Method 1**: Create a custom image from an instance. You need to only specify the ID of the instance by using the `InstanceId` parameter. The instance must be in the Running (`Running`) or Stopped (`Stopped`) state. After you call the CreateImage operation, a snapshot is created for each disk of the instance. When you create a custom image from a running instance, specific cache data may not be written to the disks. In this case, the data of the custom image may be slightly different from the data of the instance. We recommend that you create custom images from instances after you stop the instances by calling the [StopInstances](~~155372~~) operation.
  * *   **Method 2**: Create a custom image from the system disk snapshot of an instance. You need to only specify the ID of the system disk snapshot by using the `SnapshotId` parameter. The specified system disk snapshot must be created after July 15, 2013.
  * *   **Method 3**: Create a custom image from multiple disk snapshots. You must specify the data mapping between the disks and the snapshots by calling the `DiskDeviceMapping` operation.
  * When you use Method 3 to create a custom image, take note of the following items:
  * *   You can specify only one system disk snapshot. The device name of the system disk must be /dev/xvda.
  * *   You can specify multiple data disk snapshots. The device names of the data disks are unique and in alphabetical order from /dev/xvdb to /dev/xvdz.
  * *   You can leave the `SnapshotId` parameter empty. In this case, an empty data disk that has a specified size is created.
  * *   The specified disk snapshot must be created after July 15, 2013.
  *
 */
async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageComponentRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  componentType?: string(name='ComponentType', description='The type of the image component. Only image building components are supported. Set the value to Build.

Default value: Build.', example='Build', position='Query'),
  content?: string(name='Content', description='The content of the image component. The content can consist of up to 127 commands.', example='RUN yum update -y', position='Query'),
  description?: string(name='Description', description='The description of the image component. The description must be 2 to 256 characters in length and cannot start with http:// or https://.', example='This is description.', position='Query'),
  name?: string(name='Name', description='The name of the image component. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

>  If you do not specify the `Name` parameter, the return value of `ImageComponentId` is used by default.', example='testComponent', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the image component. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the image component.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  systemType?: string(name='SystemType', description='The operating system type supported by the image component. Only Linux is supported. Set the value to Linux.

Default value: Linux.', example='Linux', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain http:// or https://.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateImageComponentResponseBody = {
  imageComponentId?: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateImageComponentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageComponentResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * * Only custom image components can be created.
  * * Image components can be used to create only Linux images, so you must set the `SystemType` parameter to Linux.
  * * You must configure the image component type to image building component by setting the `ComponentType` parameter to Build.
  * * You can use Dockerfile to edit the content of image components and then pass the edited content into the `Content` parameter. The content cannot be greater than 16 KB in size and can contain up to 127 commands. `FROM` commands cannot be used in image components. For information about the commands that are supported, see [Commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the Elastic Compute Service (ECS) console, but cannot call API operations to use image components to create image templates. For more information, see [Overview](~~197410~~).
  *
 */
async function createImageComponent(request: CreateImageComponentRequest): CreateImageComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageComponent', 'POST', '/', 'json', false, 'json', request);
}

model CreateImagePipelineRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  addAccount?: [ long ](name='AddAccount', description='The IDs of Alibaba Cloud accounts with which you want to share the image that is created based on the image template. You can specify up to 20 account IDs.', example='1234567890', position='Query'),
  baseImage: string(name='BaseImage', description='The source image.

*   If you set the `BaseImageType` parameter to IMAGE, set the BaseImage parameter to the ID of a custom image.
*   If you set the `BaseImageType` parameter to IMAGE_FAMILY, set the BaseImage parameter to the name of an image family.', example='m-bp67acfmxazb4p****', position='Query'),
  baseImageType: string(name='BaseImageType', description='The type of the source image. Valid values:

*   IMAGE: image
*   IMAGE_FAMILY: image family', example='IMAGE', position='Query'),
  buildContent?: string(name='BuildContent', description='The content of the image template. The content cannot exceed 16 KB in size and can contain up to 127 commands. For information about the commands that are supported by the image template, see the "Usage notes" section in this topic.', example='FROM IMAGE:m-bp67acfmxazb4p****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure', description='Specifies whether to release the intermediate instance if the image cannot be created. Valid values:

*   true: releases the intermediate instance if the image cannot be created.
*   false: does not release the intermediate instance if the image cannot be created.

Default value: true.

> If the intermediate instance cannot be started, the instance is automatically released.', example='true', position='Query'),
  description?: string(name='Description', description='The description of the image template. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  imageName?: string(name='ImageName', description='The prefix of the image name. The prefix must be 2 to 64 characters in length. The prefix must start with a letter but cannot start with `http://` or `https://`. The prefix can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

The system generates the final image name that consists of the specified prefix and the ID of the build task (`ExecutionId`) in the `{ImageName}_{ExecutionId}` format.', example='testImageName', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type. You can call the [DescribeInstanceTypes](~~25620~~) to query supported instance types.

If you do not specify this parameter, an instance type that provides the fewest vCPUs and memory resources is selected. This configuration is subject to the resource availability of instance types. For example, the ecs.g6.large instance type is selected. If the available ecs.g6.large resources are insufficient, the ecs.g6.xlarge instance type is selected.', example='ecs.g6.large', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The size of the outbound public bandwidth of the intermediate instance. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='0', position='Query'),
  name?: string(name='Name', description='The name of the image template. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

> If you do not specify the `Name` parameter, the value of the `ImagePipelineId` return parameter is used.', example='testImagePipeline', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image template that you want to create. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk of the intermediate instance. Unit: GiB. Valid values: 20 to 500.

Default value: 40.', example='40', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The keys of tags. You can specify up to 20 tag keys. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The values of tags. You can specify up to 20 tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the image template.', position='Query'),
  toRegionId?: [ string ](name='ToRegionId', description='The IDs of regions to which you want to distribute the image that is created based on the image template. You can specify up to 20 region IDs.

If you do not specify this parameter, the image is created only in the current region.', example='cn-hangzhou', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

If you do not specify this parameter, a new virtual private cloud (VPC) and vSwitch are created by default. Make sure that the VPC quota of your account is sufficient. For more information, see [Limits](~~27750~~).', example='vsw-bp67acfmxazb4p****', position='Query'),
}

model CreateImagePipelineResponseBody = {
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImagePipelineResponseBody(name='body'),
}

/**
  * You can use image templates to specify custom image content and create images across regions and accounts. When you create an image template, take note of the following items:
  * *   You can create only custom image templates.
  * *   You can specify only public, custom, or shared Linux images or image families as source images when you create image templates.
  * *   When you use an image template to create an image, you must create an intermediate instance. You are charged for the intermediate instance based on the pay-as-you-go billing method. For more information, see [Pay-as-you-go](~~40653~~).
  * For the `BuildContent` parameter that specifies the content of image templates, take note of the following items:
  * *   If the value of the `BuildContent` parameter contains `FROM` commands, the `FROM` commands override the values of the `BaseImageType` parameter that specifies the type of the source image and the `BaseImage` parameter that specifies the source image.
  * *   If the value of the `BuildContent` parameter does not contain `FROM` commands, the system creates a `FROM` command that consists of the values of the `BaseImageType` and `BaseImage` parameters in the `<BaseImageType>:<BaseImage>` format and adds the command to the first line of the image template content.
  * *   You can use Dockerfile to modify the content of image templates and pass the modified content to the `BuildContent` parameter. The content cannot exceed 16 KB in size and can contain up to 127 commands. For information about the commands that are supported by image templates, see [Description of commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the Elastic Compute Service (ECS) console. You cannot call API operations to use image components to create image templates. For more information, see [Overview of creating an image](~~197410~~).
  *
 */
async function createImagePipeline(request: CreateImagePipelineRequest): CreateImagePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImagePipeline', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  hibernationOptions?: {
    configured?: boolean(name='Configured', description='> This parameter is in invitational preview and is unavailable.', example='false'),
  }(name='HibernationOptions', position='Query'),
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the private pool to use to create the instance. The ID of a private pool is the same as that of the elasticity assurance or capacity reservation for which the private pool is generated.', example='eap-bp67acfmxazb4****'),
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool to use to create the instance. A private pool is generated when an elasticity assurance or a capacity reservation takes effect. You can select a private pool when you create an instance. Valid values:

* Open: open private pool. The system selects a matching open private pool to create the instance. If no matching open private pools are found, resources in the public pool are used. When you set this parameter to Open, you can leave the `PrivatePoolOptions.Id` parameter empty.
* Target: specified private pool. The system uses the capacity in a specified private pool to create the instance. If the specified private pool is unavailable, the instance cannot be created. If you set this parameter to Target, you must specify the `PrivatePoolOptions.Id` parameter.
* None: no private pool. The capacity in private pools is not used.

Default value: None.

In the following scenarios, the PrivatePoolOptions.MatchCriteria parameter can be set only to `None` or left empty:

* Create a preemptible instance.
* Create an instance in the classic network.
* Create an instance on a dedicated host.', example='Open'),
  }(name='PrivatePoolOptions', position='Query'),
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk. Valid values:

* cloud_essd: ESSD. When the parameter is set to this value, you can use the `SystemDisk.PerformanceLevel` parameter to specify the performance level of the disk.
* cloud_efficiency: ultra disk.
* cloud_ssd: standard SSD.
* cloud: basic disk.

For non-I/O optimized instances of retired instance types, the default value is cloud. For other instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='TestDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='SystemDiskName'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL1. Valid values:

* PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
* PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
* PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
* PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.

Default value: 40 or the size of the image, whichever is greater.', example='40'),
    storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use a disk in a dedicated block storage cluster as the system disk when you create the instance, you must specify this parameter. For more information about dedicated block storage clusters, see [What is Dedicated Block Storage Cluster?](~~208883~~)', example='dbsc-j5e1sf2vaf5he8m2****'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  affinity?: string(name='Affinity', description='Specifies whether to associate the instance on a dedicated host with the dedicated host. Valid values:

*   default: does not associate the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance is automatically deployed to another dedicated host in the automatic deployment resource pool if the available resources of the original dedicated host are insufficient.
*   host: associates the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance remains on the original dedicated host. If the available resources of the original dedicated host are insufficient, the instance cannot start.

Default value: default.', example='default', position='Query'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is in invitational preview and is unavailable.', example='1234567890'),
      roleType?: string(name='RoleType', description='> This parameter is in invitational preview and is unavailable.', example='Primary'),
      rolearn?: string(name='Rolearn', description='> This parameter is in invitational preview and is unavailable.', example='acs:ram::123456789012****:role/adminrole'),
    }
  ](name='Arn', description='> This parameter is in invitational preview and is unavailable.', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PrePaid`. Default value: false. Valid values:

* true: enables auto-renewal.
* false: does not enable auto-renewal.', example='true', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal cycle of the instance. This parameter is required when AutoRenew is set to true.

Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, and 12', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster in which to create the instance.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='c-bp67acfmxazb4p****', position='Query'),
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: the standard mode. For more information, see the "Standard mode" section in [Burstable instances](~~59977~~).
*   Unlimited: the unlimited mode. For more information, see the "Unlimited mode" section in [Burstable instances](~~59977~~).', example='Standard', position='Query'),
  dataDisk?: [ 
    {
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   cloud: basic disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='TestDescription'),
      device?: string(name='Device', description='The mount point of data disk N.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='DataDiskName'),
      encryptAlgorithm?: string(name='EncryptAlgorithm', description='The algorithm to use to encrypt data disk N.', example='hide'),
      encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt data disk N.

Default value: false.', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key to use for data disk N.', example='0e478b7a-4262-4802-b8cb-00d****'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The N value must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL2'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

* Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

* Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

* Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL0: 40 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL1: 20 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL2: 461 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL3: 1261 to 32768.

* Valid values when DataDisk.N.Category is set to cloud: 5 to 2000.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16.

*   If the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored and the data disk is created with the size of the specified snapshot.
*   Use snapshots created after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
      storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use a disk in a dedicated block storage cluster as data disk N when you create the instance, you must specify this parameter.', example='dbsc-j5e1sf2vaf5he8m2****'),
    }
  ](name='DataDisk', description='The list of data disks.', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host on which to create the instance.

You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the list of dedicated host IDs.

If the `DedicatedHostId` parameter is specified, the `SpotStrategy` and `SpotPriceLimit` parameters are ignored. This is because preemptible instances cannot be created on dedicated hosts.', example='dh-bp67acfmxazb4p****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable release protection for the instance. This parameter determines whether you can use the ECS console or call the [DeleteInstance](~~25507~~) operation to release the instance. Default value: false. Valid values:

*   true: enables release protection.
*   false: disables release protection.

>  This parameter is applicable only to pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false', position='Query'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group to which to deploy the instance. If the deployment set specified by the DeploymentSetId parameter uses the high availability group strategy (AvailabilityGroup), you can use the DeploymentSetGroupNo parameter to specify a deployment set group in the deployment set. Valid values: 1 to 7.', example='1', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****', position='Query'),
  description?: string(name='Description', description='The description of the instance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='InstanceTest', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Default value: false. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether required parameters are specified, the request format, service limits, and available ECS resources. If the check fails, the corresponding error code is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked, and the request is made if the check succeeds.', example='false', position='Query'),
  hostName?: string(name='HostName', description='The hostname of the instance.

* The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
* For a Windows instance, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
* For an instance that runs another type of operating system such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='LocalHostName', position='Query'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster to which to assign the instance.', example='hpc-bp67acfmxazb4p****', position='Query'),
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether to enable the access channel for instance metadata. Valid values:

*   enabled: enables the access channel for instance metadata.
*   disabled: disables the access channel for instance metadata.

Default value: enabled.

>  For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled', position='Query'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='0', position='Query'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether to forcefully use the security-enhanced mode (IMDSv2) to access instance metadata. Valid values:

*   optional: does not forcibly use the security-enhanced mode (IMDSv2).
*   required: forcefully uses the security-enhanced mode (IMDSv2). After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

>  For more information about modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional', position='Query'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. You can set this parameter to obtain the latest available custom image from the specified image family to create the instance.

* ImageFamily must be empty if `ImageId` is specified.
* ImageFamily can be specified if `ImageId` is not specified.', example='hangzhou-daily-update', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. To use an Alibaba Cloud Marketplace image, you can view the `image ID` on the product page of the Alibaba Cloud Marketplace image. This parameter is required if you do not specify the `ImageFamily` parameter to obtain the latest available custom image from the specified image family.', example='ubuntu_18_04_64_20G_alibase_20190624.vhd', position='Query'),
  innerIpAddress?: string(name='InnerIpAddress', description='The internal IP address to assign to the instance.', example='192.168.**.**', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Default value: PostPaid. Valid values:

* PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient balance or credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
* PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). If you do not specify this parameter, the instance ID is used as the instance name by default.', example='2018-12-06T103200Z', position='Query'),
  instanceType: string(name='InstanceType', description='The instance type.

* Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
* Query available resources. You can call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.', example='ecs.g6.large', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Default value: PayByTraffic. Valid values:

* PayByBandwidth: pay-by-bandwidth
* PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

* When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
* When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='50', minimum=1, maximum=200, position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='5', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

For retired instance types, the default value is none. For more information, see [Retired instance types](~~55263~~).

For other instance types, the default value is optimized.', example='optimized', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

>  For Windows instances, this parameter is ignored. This parameter is empty by default. The `Password` parameter takes effect even if the KeyPairName parameter is specified.', example='KeyPairTestName', position='Query'),
  nodeControllerId?: string(name='NodeControllerId', description='> This parameter is in invitational preview and is unavailable.', example='hide', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

```plain
( ) ` ~ ! @ # $ % ^ & * - _ + = | { } [ ] : ; \\" < > , . ? /
```

Take note of the following items:

* For security reasons, we recommend that you use HTTPS to send requests if the Password parameter is specified.
* Passwords of Windows instances cannot start with a forward slash (/).
* Passwords cannot be set for instances that run some types of operating systems such as Others Linux and Fedora CoreOS. For these instances, only key pairs can be set.', example='TestEcs123!', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the password preset in the image. When you use this parameter, leave Password empty and make sure that the selected image has a password preset.', example='false', position='Query'),
  period?: int32(name='Period', description='The subscription period of the instance. The unit is specified by the `PeriodUnit` parameter. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. If the `DedicatedHostId` parameter is specified, the value of Period must not exceed the subscription period of the specified dedicated host. Valid values:

Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, and 12', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Valid values:

Month

Default value: Month.', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance. The private IP address must be an available IP address within the CIDR block of the specified vSwitch.', example='172.16.236.*', position='Query'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='RAMTestName', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Active', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances in the same security group can communicate with each other.', example='sg-bp15ed6xe1yxeycg****', position='Query'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   Protection periods of 2, 3, 4, 5, and 6 hours are in invitational preview. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1', minimum=0, maximum=6, position='Query'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='The interruption mode of the preemptible instance. Default value: Terminate. Set the value to Terminate, which specifies to release the instance.', example='Terminate', position='Query'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. The value is accurate to three decimal places. This parameter is valid only when the `SpotStrategy` parameter is set to `SpotWithPriceLimit`.', example='0.98', position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Default value: NoSpot. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.', example='NoSpot', position='Query'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp1j4i2jdf3owlhe****', position='Query'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set. Valid values: greater than or equal to 2.', example='2', minimum=1, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, disks, and primary elastic network interface (ENI). Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, disks, and primary ENI. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  tenancy?: string(name='Tenancy', description='Specifies whether to create the instance on a dedicated host. Valid values:

*   default: creates the instance on a non-dedicated host.
*   host: creates the instance on a dedicated host. If you do not specify the `DedicatedHostId` parameter, Alibaba Cloud selects a dedicated host for the instance.

Default value: default.', example='default', position='Query'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='Specifies whether to use the system configurations for virtual machines provided by Alibaba Cloud (Windows: NTP and KMS. Linux: NTP and YUM).', example='true', position='Query'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBlY3Mh', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required when you create an instance in a VPC. You can call the [DescribeVSwitches](~~35748~~) operation to query available vSwitches.

>  If the `VSwitchId` parameter is specified, the zone specified by the `ZoneId` parameter must be the zone where the specified vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch is located.', example='vsw-bp1s5fnvk4gn2tws0****', position='Query'),
  vlanId?: string(name='VlanId', description='The ID of the virtual LAN (VLAN).', example='10', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

>  If the `VSwitchId` parameter is specified, the zone specified by the `ZoneId` parameter must be the zone where the specified vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch is located.

This parameter is empty by default.', example='cn-hangzhou-g', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
  orderId?: string(name='OrderId', description='The ID of the order. This parameter is returned only when `InstanceChargeType` is set to PrePaid.', example='1234567890'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  tradePrice?: float(name='TradePrice', description='The transaction price.', example='0.165'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

/**
  * > You can call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone. If you want to batch create instances that automatically enter the Running state after they are created, we recommend that you call the [RunInstances](~~63440~~) operation.
  * When you call this operation, take note of the following items:
  * * **Billing**:
  *     * You must fully understand the ECS billing methods before you create an instance because you may be charged for resources used by the instance. For more information, see [Billing overview](~~25398~~).
  *     * If you create a subscription instance (`PrePaid`), available coupons within your account are used by default.
  * * **Instance type**:
  *     * You can use the `IoOptimized` parameter to specify whether to create an I/O optimized instance.
  *     * Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
  *     * Query available resources. Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.
  * > If the `QuotaExceed.ElasticQuota` error is returned when you call this operation, it indicates that you have reached the maximum number of instances of the specified instance type that can be created within the specified region or the maximum number of vCPUs for all instance types in a zone. You can go to the [ECS console](https://ecs.console.aliyun.com/?spm=a2c8b.12215451.favorites.decs.5e3a336aMGTtzy#/privileges/quota) or [Quota Center](https://quotas.console.aliyun.com/products/ecs/quotas) to request a quota increase.
  * * **Image**:
  *     * The image determines the system disk configurations of the new instance. The system disk of the new instance is a clone of the specified image.
  *     * If you want to create instances with 512 MiB of memory, you cannot use Windows Server images except for Windows Server Semi-Annual Channel images.
  *     * If you want to create instances with 4 GiB or more of memory, you cannot use 32-bit OS image.
  * * **Network type**:
  *     * Each instance that resides in a virtual private cloud (VPC) must be connected to only a single vSwitch.
  *     * If the `VSwitchId` parameter is specified, the security group specified by `SecurityGroupId` and the vSwitch specified by `VSwitchId` must belong to the same VPC.
  *     * The value of `PrivateIpAddress` depends on that of `VSwitchId` and cannot be separately specified.`` If both the `VSwitchId` and `PrivateIpAddress` parameters are specified, the IP address specified by `PrivateIpAddress` must be available in the CIDR block of the specified vSwitch.
  * * **Public bandwidth**:
  *     * As of November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The throttling policy imposes the following constraints: Within a single region, the total maximum bandwidth value of all instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s and that of all instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *     * If you call the `CreateInstance` operation to create an instance, no public IP addresses are assigned to the instance. You can call the [AllocatePublicIpAddress](~~25544~~) operation to manually assign public IP addresses to instances.
  *     * Network usage fees are determined based on the settings of `InternetChargeType` and `InternetMaxBandwidthOut`.
  *     * The `InternetMaxBandwidthIn` value is irrelevant to billing because inbound data traffic is free of charge.
  *     * If `InternetChargeType` is set to PayByBandwidth, `InternetMaxBandwidthOut` specifies the fixed bandwidth value. A fixed bandwidth is a specified amount of public bandwidth allocated to an instance that uses the pay-by-bandwidth billing method for network usage.
  *     * If `InternetChargeType` is set to PayByTraffic, `InternetMaxBandwidthOut` specifies the peak bandwidth value. A peak bandwidth is the maximum amount of public bandwidth that an instance can consume when it uses the pay-by-traffic billing method for network usage. Network usage costs are calculated based on the volume of network traffic.
  * * **Security group**:
  *     * If no security groups are available in the region where you want to create an instance, you must call the [CreateSecurityGroup](~~25553~~) operation to create a security group in that region first.
  *     * The maximum number of instances that a security group can contain varies based on the security group type. For more information, see the "Security group limits" section in [Limits](~~25412~~).
  *     * Instances in the same security group can communicate with each other over the internal network. By default, instances in different security groups cannot communicate with each other. You can allow communication between instances by allowing mutual access between their security groups. For more information, see [AuthorizeSecurityGroup](~~25554~~) and [AuthorizeSecurityGroupEgress](~~25560~~).
  * * **Storage**:
  *     * The instance is assigned a system disk whose size is determined based on the specified image. The size of the system disk must be at least `20 GiB` and greater than or equal to the image size. For more information about system disk categories, see the description of the `SystemDisk.Category` parameter.
  *     * The system disk of an I/O optimized instance can only be an enhanced SSD (ESSD) (`cloud_essd`), a standard SSD (`cloud_ssd`), or an ultra disk (`cloud_efficiency`).
  *     * The maximum size of a data disk varies based on its category. For more information, see the description of the `DataDisk.N.Size` parameter.
  *     * A maximum of 16 data disks can be attached to each instance. The mount points of data disks are allocated by the system in alphabetical order from /dev/xvdb to /dev/xvdz.
  * * **User data**: If the instance type supports [user data](~~49121~~), you can use the UserData parameter to pass in user data. User data is encoded in Base64. We recommend that you do not pass in confidential information (such as passwords or private keys) in plaintext as user data. This is because the system does not encrypt `UserData` values when API requests are transmitted. If you must pass in confidential information, we recommend that you encrypt and encode the information in Base64 and then decode and decrypt the information in the same way within the instance.
  * * **Others**: When you call API operations by using Alibaba Cloud CLI or SDKs, you must delete periods (.) from some request parameters before you use the parameters. For example, use `SystemDiskCategory` instead of `SystemDisk.Category` as a request parameter.
  *
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateKeyPairRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  keyPairName: string(name='KeyPairName', description='The name of the key pair. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testKeyPairName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the enterprise resource group to which the SSH key pair belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to be bound to the key pair. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the key pair. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain http:// or https://. It cannot start with acs:.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).', example='89:f0:ba:62:ac:b8:aa:e1:61:5e:fd:81:69:86:6d:6b:f0:c0:5a:**'),
  keyPairId?: string(name='KeyPairId', description='The ID of the SSH key pair.', example='ssh-bp67acfmxazb4p****'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName'),
  privateKeyBody?: string(name='PrivateKeyBody', description='The private key of the key pair. The private key is encoded with PEM in the PKCS#8 format.', example='MIIEpAIBAAKCAQEAtReyMzLIcBH78EV2zj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKeyPairResponseBody(name='body'),
}

/**
  * ## Description
  * In addition to calling CreateKeyPair, you can create a key pair by using a third-party key pair generation tool and call the [ImportKeyPair](~~51774~~) operation to upload the key pair to an Alibaba Cloud region.
  * A maximum of 500 key pairs can be created in each region. For more information, see [Limits](~~25412~~).
  *
 */
async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateLaunchTemplateRequest {
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to the system disk.', example='sp-gc7c37d4ylw7mtnk****'),
    burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for the system disk. Valid values:

*   true
*   false', example='true'),
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: enhanced SSD (ESSD). You can use the `SystemDisk.PerformanceLevel` parameter to set the performance level of the ESSD to use as the system disk. cloud_auto: ESSD AutoPL disk.

For non-I/O optimized instances of a retired instance type, the default value is cloud. For other types of instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the system disk when the instance is released. Valid values:

*   true: releases the system disk when the instance is released.
*   false: does not release the system disk when the instance is released.

Default value: true.', example='true'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testSystemDiskDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testSystemDiskName'),
    encrypted?: string(name='Encrypted', description='系统盘是否加密。取值范围：

- true：加密。
- false：不加密。

默认值：false。

>中国香港D可用区、新加坡A可用区暂不支持在创建实例时加密系统盘。', example='false'),
    iops?: int32(name='Iops', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL0'),
    provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as the system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the SystemDisk.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.', example='40'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

*   If the value of seconds (`ss`) is not `00`, the time is automatically rounded to the nearest minute based on the value of minutes (`mm`).
*   The release time must be at least 30 minutes later than the current time.
*   The release time must be at most three years from the current time.', example='2018-01-01T12:05:00Z', position='Query'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to data disk N.', example='sp-m5e7fa9ute44ssa****'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for data disk N. Valid values:

*   true
*   false', example='true'),
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD cloud_auto: ESSD AutoPL disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDataDiskDescription'),
      device?: string(name='Device', description='> This parameter will be removed in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='null'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDataDiskName'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt the data disk.', example='false'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as data disk N. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the DataDisk.N.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values when DataDisk.N.Category is set to cloud: 5 to 2000

*   Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16. When the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored. The data disk is created based on the size of the specified snapshot.

Use snapshots that were created on or after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
    }
  ](name='DataDisk', description='The data disks.', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****', position='Query'),
  description?: string(name='Description', description='The instance description. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testECSDescription', position='Query'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Specifies whether to enable the operating system configuration of the instance.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='false', position='Query'),
  hostName?: string(name='HostName', description='The instance hostname.

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='testHostName', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available images.', example='win2008r2_64_ent_sp1_en-us_40G_alibase_20170915.vhd', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud
*   self: custom images that you create.
*   others: shared images from other Alibaba Cloud accounts.
*   marketplace: [Alibaba Cloud Marketplace](https://market.aliyun.com/) images. If Alibaba Cloud Marketplace images are found, you can use these images without prior subscription. You must pay attention to the billing details of Alibaba Cloud Marketplace images.', example='system', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient balance and credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
*   PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testInstanceName', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance. For more information, see [Instance families](~~25378~~). Alternatively, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.', example='ecs.g5.large', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidths may be limited. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='10', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.', example='10', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether to create an I/O optimized instance. Valid values:

*   none: creates a non-I/O optimized instance.
*   optimized: creates an I/O optimized instance.', example='optimized', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the primary elastic network interface (ENI). Valid values: 1 to 10.', example='1', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. This parameter is empty by default.

*   For Windows instances, this parameter is ignored The `Password` parameter takes effect even if the KeyPairName parameter is specified.
*   For Linux instances, the password-based logon method is disabled by default.', example='testKeyPairName', position='Query'),
  launchTemplateName: string(name='LaunchTemplateName', description='The name of the launch template. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testLaunchTemplateName', position='Query'),
  networkInterface?: [ 
    {
      description?: string(name='Description', description='The description of the secondary ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testEniDescription'),
      instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you do not need to set this parameter.', example='testEniName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the primary ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: uses the remote direct memory access (RDMA) communication mode with the Elastic RDMA Interface (ERI) enabled.', example='Standard'),
      primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary IP address to assign to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2.

    *   If the value of N is 1, you can configure a primary or secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, the specified number of instances are created and consecutive primary IP addresses starting from the specified one are assigned to the instances. In this case, you cannot attach secondary ENIs to the instances.
    *   If the value of N is 2, you can configure a primary ENI and a secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, you cannot set `NetworkInterface.2.InstanceType` to Secondary to attach a secondary ENI.

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, this parameter is equivalent to `PrivateIpAddress` and you cannot specify `PrivateIpAddress`.

*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, the specified primary IP address is assigned to the secondary ENI. The default value is an IP address that is randomly selected from within the CIDR block of the vSwitch to which to connect the secondary ENI.

> You can attach only a single secondary ENI when you create an instance. After the instance is created, you can call the [CreateNetworkInterface](~~58504~~) and [AttachNetworkInterface](~~58515~~) operations to attach more secondary ENIs.', example='192.168.**.**'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign secondary ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `SecurityGroupId` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupIds.N`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp15ed6xe1yxeycg****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign ENI N.

*   Valid values of the first N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you can configure a primary ENI and a secondary ENI.
*   The second N indicates that one or more security group IDs can be specified. The valid values of N vary based on the maximum number of security groups to which an instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).

Take note of the following items:

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter or `NetworkInterface.N.SecurityGroupId`. In this case, this parameter is equivalent to `SecurityGroupIds.N` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp67acfmxazb4p****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `VSwitchId` and you cannot specify `VSwitchId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the vSwitch to which to connect the instance.', example='vsw-bp1s5fnvk4gn2tws0****'),
    }
  ](name='NetworkInterface', description='The information of the ENI.', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image.

> If you set the PasswordInherit parameter to true, make sure that you leave the Password parameter empty and the selected image has a preset password.', example='false', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the instance. Unit: months. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.

To assign a private IP address to an instance that resides in a VPC, make sure that the IP address is an idle IP address within the CIDR block of the vSwitch specified by the `VSwitchId` parameter.', example='10.1.**.**', position='Query'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='testRamRoleName', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance, Elastic Block Storage (EBS) device, and elastic network interface (ENI).', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening for the operating system. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Deactive', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances in the same security group can communicate with each other. A security group can contain up to 1,000 instances.

> You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.', example='sg-bp15ed6xe1yxeycg****', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of the security groups to which to assign the instance. The valid values of N are based on the maximum number of security groups to which the instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412~~).

> You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.', example='sg-bp15ed6xe1yxeycg7****', position='Query'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that no protection period is configured for the preemptible instance.

Default value: 1.', example='1', position='Query'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. The value is accurate to three decimal places. This parameter is valid only when the `SpotStrategy` parameter is set to `SpotWithPriceLimit`.', example='0.97', minimum=0, maximum=999999, position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.', example='NoSpot', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, EBS device, and ENI. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, EBS device, and ENI. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags of the launch template.', position='Query'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='The ID of the resource group to which the launch template belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the launch template. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the launch template. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='TemplateTag', description='The tags to add to the launch template.', position='Query'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBlY3Mh', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required if you specify the VpcId parameter.', example='vsw-bp1s5fnvk4gn2tws0****', position='Query'),
  versionDescription?: string(name='VersionDescription', description='The description of the launch template version. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testVersionDescription', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12433upq1y5scen****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance.', example='cn-hangzhou-g', position='Query'),
}

model CreateLaunchTemplateResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.', example='lt-m5eiaupmvm2op9d****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLaunchTemplateResponseBody(name='body'),
}

/**
  * ## Description
  * Launch templates contain preset configurations used to create instances, such as the region, image ID, instance type, security group ID, and public bandwidth settings. If a specific parameter is not included in a launch template, you must manually specify the parameter when you use the launch template to create an instance.
  * After you create a launch template (`CreateLaunchTemplate`), its version number is set to 1 by default. You can create multiple versions (`CreateLaunchTemplateVersion`) for the launch template. Version numbers start from 1 and increment by one. If you do not specify a template version number when you use a launch template to create instances ([RunInstances](~~63440~~)), the default version is used.
  * When you call this operation, take note of the following items:
  * *   You can create up to 30 launch templates in each region. Each launch template can have up to 30 versions.
  * *   Most parameters in launch templates are optional. When you create a launch template, ECS does not verify the existence or validity of specified parameter values. The validity of the parameter values are verified only when you use the launch template to create instances.
  * *   If you set a specific parameter in a launch template, you cannot filter out this parameter when you use the launch template to create instances ([RunInstances](~~63440~~)). For example, if you set the `HostName` parameter to LocalHost in a launch template and do not set the `HostName` parameter when you call the `RunInstances` operation to create instances from the launch template, the created instance still has a hostname of `LocalHost`. If you want to overwrite the `LocalHost` value of HostName provided by the launch template, you can set `HostName` to MyHost or another value when you call the `RunInstances` operation.
  *
 */
async function createLaunchTemplate(request: CreateLaunchTemplateRequest): CreateLaunchTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLaunchTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateLaunchTemplateVersionRequest {
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to the system disk.', example='sp-bp1dgzpaxwc4load****'),
    burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for the system disk. Valid values:

*   true
*   false', example='true'),
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD) You can use the `SystemDisk.PerformanceLevel` parameter to set the performance level of the ESSD to use as the system disk. cloud_auto: ESSD AutoPL disk.

For non-I/O optimized instances of a retired instance type, the default value is cloud. For other types of instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the system disk when the instance is released. Valid values:

*   true: releases the system disk when the instance is released.
*   false: does not release the system disk when the instance is released.

Default value: true.', example='true'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testSystemDiskDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='cloud_ssdSystem'),
    encrypted?: string(name='Encrypted', description='系统盘是否加密。取值范围：

- true：加密。

- false：不加密。

默认值：false。

>中国香港D可用区、新加坡A可用区暂不支持在创建实例时加密系统盘。', example='false'),
    iops?: int32(name='Iops', description='> This parameter is unavailable.', example='30000'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL0'),
    provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as the system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the SystemDisk.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.', example='40'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

*   If the value of seconds (`ss`) is not `00`, the time is automatically rounded to the nearest minute based on the value of minutes (`mm`).
*   The release time must be at least 30 minutes later than the current time.
*   The specified time must be at most three years from the current time.', example='2018-01-01T12:05:00Z', position='Query'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to be applied to data disk N.', example='sp-bp67acfmxazb4p****'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for data disk N. Valid values:

*   true
*   false', example='true'),
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD.
*   cloud_essd: ESSD cloud_auto: ESSD AutoPL disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDataDiskDescription'),
      device?: string(name='Device', description='> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='null'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDataDiskName'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt data disk N.', example='false'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as data disk N. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the DataDisk.N.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values when DataDisk.N.Category is set to cloud: 5 to 2000.

*   Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16. When the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored. The data disk is created based on the size of the specified snapshot.

Use snapshots that were created on or after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
    }
  ](name='DataDisk', description='The data disks.', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp1brhwhoqinyjd6****', position='Query'),
  description?: string(name='Description', description='The instance description. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription', position='Query'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Specifies whether to enable the operating system configuration of the instance.', example='false', position='Query'),
  hostName?: string(name='HostName', description='The instance hostname.

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='testHostName', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available images.', example='win2008r2_64_ent_sp1_en-us_40G_alibase_20170915.vhd', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='system', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient balance or credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
*   PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testInstanceName', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.', example='ecs.g5.large', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidths may be limited. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='50', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.', example='5', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether to create an I/O optimized instance. Valid values:

*   none: creates a non-I/O optimized instance.
*   optimized: creates an I/O optimized instance.', example='optimized', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the primary elastic network interface (ENI). Valid values: 1 to 10.', example='1', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. This parameter is empty by default.

*   For Windows instances, this parameter is ignored The `Password` parameter takes effect even if the KeyPairName parameter is specified.
*   For Linux instances, the password-based logon method is disabled by default.', example='testKeyPairName', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template. For more information, see [DescribeLaunchTemplates](~~73759~~). You must specify `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template.', example='lt-m5eiaupmvm2op9d****', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testLaunchTemplateName', position='Query'),
  networkInterface?: [ 
    {
      description?: string(name='Description', description='The description of the secondary ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testNetworkInterfaceDescription'),
      instanceType?: string(name='InstanceType', description='The type of the instance.', example='ecs.g5.large'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the secondary ENI. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testNetworkInterfaceName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the primary ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: uses the remote direct memory access (RDMA) communication mode with the Elastic RDMA Interface (ERI) enabled.', example='Standard'),
      primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the secondary ENI. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='192.168.**.**'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the secondary ENI. The security groups of the secondary ENI and of the instance must belong to the same VPC. The value of N in `NetworkInterface.N` cannot be greater than 1.

> The `NetworkInterface.N.SecurityGroupId` parameter and the `NetworkInterface.N.SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the secondary ENI. The security group and the secondary ENI must belong to the same VPC. The valid values of N in `SecurityGroupIds.N` depend on the maximum number of security groups to which a secondary ENI can belong. For more information, see the "Security group limits" section in [Limits](~~25412~~). The value of N in `NetworkInterface.N` cannot be greater than 1.

> The `NetworkInterface.N.SecurityGroupId` parameter and the `NetworkInterface.N.SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp67acfmxazb4p****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the secondary ENI. The instance and the ENI must reside within the same zone of the same VPC, but they can be connected to different vSwitches. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='vsw-bp1s5fnvk4gn2tws0****'),
    }
  ](name='NetworkInterface', description='The information of the ENI.', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image. Valid values:

*   true: uses the preset password of the image.
*   false: does not use the preset password of the image.

Default value: false.

> If the PasswordInherit parameter is specified, you must leave the Password parameter empty and make sure that the selected image has a password preset.', example='false', position='Query'),
  period?: int32(name='Period', description='The subscription period of the instance. Unit: months. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.

To assign a private IP address to an instance that resides in a VPC, make sure that the IP address is an idle IP address within the CIDR block of the vSwitch specified by the `VSwitchId` parameter.', example='10.1.**.**', position='Query'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='testRamRoleName', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening for the operating system. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Active', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances within the same security group can access each other.

> The `SecurityGroupId` parameter and the `SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg****', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the instance. The valid values of N depend on the maximum number of security groups to which an instance can belong. For more information, see [Limits](~~25412~~).

> The `SecurityGroupId` parameter and the `SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg7****', position='Query'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that no protection period is configured for the preemptible instance.

Default value: 1.', example='1', position='Query'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the preemptible instance. A maximum of three decimal places are allowed.', example='0.97', minimum=0, maximum=999999, position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.', example='NoSpot', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, block storage devices, or primary ENI. Valid values of N: 1 to 5. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, block storage devices, or primary ENI. Valid values of N: 1 to 5. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the image template.', position='Query'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBl****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required if you specify the VpcId parameter.', example='vsw-bp1s5fnvk4gn2tws0****', position='Query'),
  versionDescription?: string(name='VersionDescription', description='The description of the launch template version. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testVersionDescription', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12433upq1y5scen****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance.', example='cn-hangzhou-g', position='Query'),
}

model CreateLaunchTemplateVersionResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateVersionNumber?: long(name='LaunchTemplateVersionNumber', description='The version number of the launch template.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DExxxxx'),
}

model CreateLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLaunchTemplateVersionResponseBody(name='body'),
}

/**
  * ## Description
  * If you want to modify the parameters of a launch template version, you can create another version with different parameter settings for the launch template. A maximum of 30 versions can be created for each launch template.
  *
 */
async function createLaunchTemplateVersion(request: CreateLaunchTemplateVersionRequest): CreateLaunchTemplateVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLaunchTemplateVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatGatewayRequest {
  bandwidthPackage: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      ipCount?: int32(name='IpCount'),
      zone?: string(name='Zone'),
    }
  ](name='BandwidthPackage', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model CreateNatGatewayResponseBody = {
  bandwidthPackageIds?: {
    bandwidthPackageId?: [ string ](name='BandwidthPackageId')
  }(name='BandwidthPackageIds'),
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds'),
  natGatewayId?: string(name='NatGatewayId'),
  requestId?: string(name='RequestId'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatGatewayResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkInterfaceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  businessType?: string(name='BusinessType', description='> This parameter is no longer used.', example='null', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testDescription', position='Query'),
  instanceType?: string(name='InstanceType', description='> This parameter is no longer used.', example='null', position='Query'),
  ipv4Prefix?: [ string ](name='Ipv4Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', position='Query'),
  ipv4PrefixCount?: int32(name='Ipv4PrefixCount', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide', minimum=1, maximum=10, position='Query'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N to assign to the ENI. Valid values of N: 1 to 10.

Example: Ipv6Address.1=2001:db8:1234:1a00::\\*\\*\\*\\*

> To assign IPv6 addresses to the ENI, you must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but not both.', example='2001:db8:1234:1a00::****', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to generate at random for the ENI. Valid values: 1 to 10.

> To assign IPv6 addresses to the ENI, you must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but not both.', example='1', minimum=1, position='Query'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', position='Query'),
  ipv6PrefixCount?: int32(name='Ipv6PrefixCount', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide', minimum=1, maximum=10, position='Query'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='testNetworkInterfaceName', position='Query'),
  networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication model of the ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: enables Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.

> HighPerformance supports only the c7re RDMA-enhanced instance family. The maximum number of ENIs in RDMA mode that can be attached to a c7re instance is determined based on the instance type. The c7re instance family is in invitational preview in Beijing Zone K. For more information, see [Instance families](~~25378~~).

Default value: Standard.', example='Standard', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address to assign to the ENI.

The specified IP address must be an idle IP address within the CIDR block of the vSwitch with which to associate the ENI. If this parameter is not specified, an idle IP address is randomly assigned from within the CIDR block of the vSwitch.', example='172.17.**.**', position='Query'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='Secondary private IP address N to assign to the ENI. The IP address must be an idle IP address within the CIDR block of the vSwitch with which to associate the ENI. Valid values of N: 0 to 10.

> To assign secondary private IP addresses to the ENI, you cannot specify both the `PrivateIpAddress.N` and `SecondaryPrivateIpAddressCount` parameters.', example='172.17.**.**', position='Query'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI. Valid values: 1 to 2048.

When you attach the ENI to an instance, make sure that the value of this parameter is smaller than the maximum number of queues per ENI allowed for the instance type. To view the maximum number of queues per ENI allowed for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation and then check the `MaximumQueueNumberPerEni` response parameter.

This parameter is empty by default. If you do not specify this parameter, the default number of queues per ENI for the instance type of an instance is used when you attach the ENI to the instance. To view the default number of queues per ENI for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation and then check the `SecondaryEniQueueNumber` response parameter.', example='1', minimum=1, position='Query'),
  queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable for general users.', example='22', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the ENI. You can call the [ListResourceGroups](~~158855~~) operation to query the most recent resource group list.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount', description='The number of private IP addresses to be automatically created by ECS.', example='1', minimum=1, position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the ENI. The security group and the ENI must belong to the same VPC.

> You must specify `SecurityGroupId` or `SecurityGroupIds.N` but not both.', example='sg-bp1fg655nh68xyz9i****', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the ENI. The security group and the ENI must belong to the same VPC. The valid values of N are determined based on the maximum number of security groups to which an ENI can be assigned. For more information, see [Limits](~~25412~~).

> You must specify `SecurityGroupId` or `SecurityGroupIds.N` but not both.', example='sg-bp1fg655nh68xyz9i****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the ENI. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the ENI. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the ENI.', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch with which to associate the ENI. Private IP addresses are assigned to the ENI from within the CIDR block of the vSwitch.', example='vsw-bp1s5fnvk4gn2tws03****', position='Query'),
  visible?: boolean(name='Visible', description='> This parameter is no longer used.', example='null', position='Query'),
}

model CreateNetworkInterfaceResponseBody = {
  description?: string(name='Description', description='The description of the ENI.', example='testDescription'),
  ipv4PrefixSets?: {
    ipv4PrefixSet?: [ 
    {
      ipv4Prefix?: string(name='Ipv4Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
    }
  ](name='Ipv4PrefixSet')
  }(name='Ipv4PrefixSets', description='> This parameter is in invitational preview and is unavailable for general users.'),
  ipv6PrefixSets?: {
    ipv6PrefixSet?: [ 
    {
      ipv6Prefix?: string(name='Ipv6Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
    }
  ](name='Ipv6PrefixSet')
  }(name='Ipv6PrefixSets', description='> This parameter is in invitational preview and is unavailable for general users.'),
  ipv6Sets?: {
    ipv6Set?: [ 
    {
      ipv6Address?: string(name='Ipv6Address', description='The IPv6 address.', example='2001:db8:1234:1a00::****'),
    }
  ](name='Ipv6Set')
  }(name='Ipv6Sets', description='The IPv6 addresses of the ENI.'),
  macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
  ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      primary?: boolean(name='Primary', description='Indicates whether the private IP address is the primary private IP address.', example='true'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets', description='Details about the private IP addresses of the ENI.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the ENI belongs.', example='rg-2ze88m67qx5z****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
  serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
  status?: string(name='Status', description='The state of the ENI.', example='Available'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key of the ENI.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value of the ENI.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags of the ENI.'),
  type?: string(name='Type', description='The type of the ENI.', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the ENI is associated.', example='vsw-bp16usj2p27htro3****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.', example='vpc-bp1j7w3gc1cexjqd****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the ENI.', example='cn-hangzhou-e'),
}

model CreateNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkInterfaceResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   This operation is a synchronous operation. After an ENI is created, it immediately enters the Available state and can be attached to an Elastic Compute Service (ECS) instance.
  * *   If the NetworkInterfaceId parameter is empty in the response, it indicates that no ENI is created. Call the operation again to create an ENI.
  * *   An ENI can be attached only to a single instance that resides in a virtual private cloud (VPC).
  * *   When an ENI is detached from an instance and then attached to another instance, the attributes of the ENI remain unchanged and network traffic is directed to the new instance.
  * *   If you want to assign IPv6 addresses when you create an ENI, make sure that IPv6 has been enabled for the vSwitch with which to associate the ENI. For more information, see [What is an IPv6 gateway?](~~98896~~)
  * *   A quota is imposed on the number of ENIs that can be created per Alibaba Cloud region per account. You can view the quota in the ECS console. For more information, see [View and increase resource quotas](~~184115~~).
  * **For information about examples on how to call this operation, see **[Create an ENI](~~471552~~).
  *
 */
async function createNetworkInterface(request: CreateNetworkInterfaceRequest): CreateNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkInterface', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkInterfacePermissionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  accountId: long(name='AccountId', description='The ID of the Alibaba Cloud partner (a certified ISV) or individual user.', example='1234567890', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permission: string(name='Permission', description='The permission on the ENI. Set the value to InstanceAttach.

InstanceAttach: allows authorized users to attach the ENI to an ECS instance. The ENI and the ECS instance must reside in the same zone.', example='InstanceAttach', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateNetworkInterfacePermissionResponseBody = {
  networkInterfacePermission?: {
    accountId?: long(name='AccountId', description='The ID of the Alibaba Cloud partner (a certified ISV).', example='1234567890'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****'),
    networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId', description='The ID of the permission on the ENI.', example='eni-perm-bp1cs4lwn56lfb****'),
    permission?: string(name='Permission', description='The permission on the ENI.', example='InstanceAttach'),
    permissionState?: string(name='PermissionState', description='The state of the permission on the ENI. Valid values:

*   Pending: The permission is being granted.
*   Granted: The permission is granted.
*   Revoking: The permission is being revoked.
*   Revoked: The permission is revoked.', example='Granted'),
    serviceName?: string(name='ServiceName', description='The name of the Alibaba Cloud service.', example='Elastic Compute Service'),
  }(name='NetworkInterfacePermission', description='Details about permissions on ENIs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FCD3DEF-63D3-4605-A818-805C8BD7DB87'),
}

model CreateNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkInterfacePermissionResponseBody(name='body'),
}

async function createNetworkInterfacePermission(request: CreateNetworkInterfacePermissionRequest): CreateNetworkInterfacePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkInterfacePermission', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionRequest {
  accessPointId: string(name='AccessPointId', position='Query'),
  circuitCode?: string(name='CircuitCode', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  lineOperator: string(name='LineOperator', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation: string(name='PeerLocation', position='Query'),
  portType?: string(name='PortType', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type?: string(name='Type', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  bandwidth?: int32(name='bandwidth', position='Query'),
}

model CreatePhysicalConnectionResponseBody = {
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  requestId?: string(name='RequestId'),
}

model CreatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrefixListRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  addressFamily: string(name='AddressFamily', description='The IP address family. Valid values:

*   IPv4
*   IPv6', example='IPv4', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The `ClientToken` value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the prefix list. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  entry?: [ 
    {
      cidr: string(name='Cidr', description='The CIDR block in entry N. Valid values of N: 0 to 200. Take note of the following items:

*   The total number of entries must not exceed the `MaxEntries` value.
*   CIDR block types are determined by the IP address family. You cannot combine IPv4 and IPv6 CIDR blocks in a single prefix list.
*   CIDR blocks must be unique across all entries in a prefix list. For example, you cannot specify 192.168.1.0/24 twice in the entries of the prefix list.
*   IP addresses are supported. The system converts IP addresses into CIDR blocks. For example, if you specify 192.168.1.100, the system converts it into the 192.168.1.100/32 CIDR block.
*   If an IPv6 CIDR block is used, the system converts it to the zero compression format and changes uppercase letters into lowercase ones. For example, if you specify 2001:0DB8:0000:0000:0000:0000:0000:0000/32, the system converts it into 2001:db8::/32.

For more information about CIDR blocks, see the "What is CIDR block?" section of the [Network FAQ](https://www.alibabacloud.com/help/doc-detail/40637.htm#title-gu4-uzk-12r) topic.

This parameter is empty by default.', example='192.168.1.0/24'),
      description?: string(name='Description', description='The description in entry N. The description must be 2 to 32 characters in length and cannot start with `http://` or `https://`. Valid values of N: 0 to 200.', example='Description Sample 01'),
    }
  ](name='Entry', description='前缀列表条目信息。', position='Query'),
  maxEntries: int32(name='MaxEntries', description='The maximum number of entries that the prefix list can contain. Valid values: 1 to 200.', example='10', minimum=1, maximum=200, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListName: string(name='PrefixListName', description='The name of the prefix list. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://`, `https://`, `com.aliyun`, or `com.alibabacloud`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='PrefixListNameSample', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the prefix list.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model CreatePrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrefixListResponseBody(name='body'),
}

/**
  * ## Description
  * *   A prefix list is a set of one or more network prefixes (CIDR blocks). You can reference prefix lists to configure network rules for other network resources. For more information, see [Overview](~~206223~~).
  * *   When you create a prefix list, take note of the following items:
  *     *   You must specify an IP address family (IPv4 or IPv6) for the prefix list, and cannot change the IP address family after the prefix list is created. You cannot combine IPv4 and IPv6 CIDR blocks in a single prefix list.
  *     *   You must specify the maximum number of entries that the prefix list can contain. You cannot modify the maximum number of entries after the prefix list is created.
  *     *   You can specify one or more entries for the prefix list. Each entry consists of a CIDR block and a description for the CIDR block. The total number of your specified entries cannot exceed the maximum number.
  * *   For more information about the limits on prefix lists and other resources, see [Limits](~~25412~~).
  * *   You can create RAM users and grant them minimum permissions. This eliminates the need to share the AccessKey pair of your Alibaba Cloud account with other users and reduces security risks for your enterprises. For information about how to grant permissions on prefix lists to RAM users, see [Grant permissions on prefix lists to RAM users](~~206175~~)
  *
 */
async function createPrefixList(request: CreatePrefixListRequest): CreatePrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrefixList', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteEntryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  nextHopId?: string(name='NextHopId', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList', position='Query'),
  nextHopType?: string(name='NextHopType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouterInterfaceRequest {
  accessPointId?: string(name='AccessPointId', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  name?: string(name='Name', position='Query'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', position='Query'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', position='Query'),
  oppositeRegionId: string(name='OppositeRegionId', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  role: string(name='Role', position='Query'),
  routerId: string(name='RouterId', position='Query'),
  routerType: string(name='RouterType', position='Query'),
  spec: string(name='Spec', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model CreateRouterInterfaceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model CreateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the security group. The description must be 2 to 256 characters in length. The description can contain letters and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the security group.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.

The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). This parameter is empty by default.', example='testSecurityGroupName', position='Query'),
  securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group.
*   enterprise: advanced security group. For more information, see [Advanced security groups](~~120621~~).', example='enterprise', position='Query'),
  serviceManaged?: boolean(name='ServiceManaged', description='This parameter is unavailable.', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the security group.

Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add the security group.

Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the security group.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC in which to create the security group.

> If the specified region supports the classic network, you can create security groups of the classic network type without specifying the VpcId parameter. If the specified region does not support the classic network, you must specify the VpcId parameter to create security groups of the VPC type.', example='vpc-bp1opxu1zkhn00gzv****', position='Query'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1fg655nh68xyz9****'),
}

model CreateSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityGroupResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can create up to 100 security groups in each Alibaba Cloud region.
  * *   To create a security group of the Virtual Private Cloud (VPC) type, you must specify the VpcId parameter.
  *
 */
async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimulatedSystemEventsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  eventType: string(name='EventType', description='The type of the system event. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system error.
*   InstanceFailure.Reboot: The instance is restarted due to an instance error.
*   SystemMaintenance.Stop: The instance is stopped due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Redeploy: The instance is redeployed due to a system error.
*   SystemFailure.Stop: The instance is stopped due to a system error.
*   InstanceFailure.Reboot: The instance is restarted due to an instance error.', example='SystemMaintenance.Reboot', position='Query'),
  instanceId: [ string ](name='InstanceId', description='The IDs of instances. You can specify the IDs of up to 100 instances.', example='i-bp1gtjxuuvwj17zr****', position='Query'),
  notBefore: string(name='NotBefore', description='The scheduled start time of the scheduled event. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> For system events that occur due to system errors or instance errors, the simulated events of such system events enter the Executing (`Executing`) state when the simulated events are created. The value of `NotBefore` is the time when the simulated events enter the Executed (`Executed`) state.', example='2018-12-01T06:32:31Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the event. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateSimulatedSystemEventsResponseBody = {
  eventIdSet?: {
    eventId?: [ string ](name='EventId')
  }(name='EventIdSet', description='The IDs of the simulated system events.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimulatedSystemEventsResponseBody(name='body'),
}

/**
  * You can use the ECS console, call [ECS API](~~63962~~) operations, or use CloudMonitor to view the scheduled simulated system events.
  * A simulated system event can transition between the following lifecycle states:
  * *   Scheduled: The state of the simulated system event is automatically changed to Scheduled after it is scheduled.
  * *   Executed: The state of the simulated system event is automatically changed to Executed at the time specified by the NotBefore parameter if no manual intervention is involved.
  * *   Canceled: The state of the simulated system event is changed to Canceled if you cancel the event by calling the [CancelSimulatedSystemEvents](~~88808~~) operation.
  * *   Avoided: The state of the simulated system event generated from maintenance-triggered instance restart can be changed to Avoided if you restart the instance before the scheduled time of the simulated system event. The maintenance-triggered instance restart is indicated by the SystemMaintenance.Reboot value. For more information, see [RebootInstance](~~25502~~).
  *
 */
async function createSimulatedSystemEvents(request: CreateSimulatedSystemEventsRequest): CreateSimulatedSystemEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimulatedSystemEvents', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  category?: string(name='Category', description='The category of the snapshot. Valid values:

*   Standard: regular snapshot
*   Flash: local snapshot

>  This parameter will be removed in the future. We recommend that you use the `InstantAccess` parameter to ensure future compatibility. This parameter and the `InstantAccess` parameter cannot be specified at the same time. For more information, see the "Description" section of this topic.', example='Standard', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. **The token can only contain ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

By default, this parameter is left empty.', example='testDescription', position='Query'),
  diskId: string(name='DiskId', description='The ID of the disk.', example='d-bp1s5fnvk4gn2tws0****', position='Query'),
  instantAccess?: boolean(name='InstantAccess', description='Specifies whether to enable the instant access feature. Valid values:

*   true: enables the instant access feature. The feature can be enabled only for enhanced SSDs (ESSDs).

    **

    **Note** After the instant access feature is enabled, an instant access snapshot is created and can be used to roll back disks or create disks across zones even if the snapshot is being created. The feature ensures that a new snapshot of an ESSD becomes available for use within 5 seconds regardless of the ESSD size.

*   false: disables the instant access feature. In this case, regular snapshots are created.

Default value: false.

>  This parameter and the `Category` parameter cannot be specified at the same time. For more information, see the "Description" section of this topic.', example='false', position='Query'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The validity period of the instant access feature. When the validity period ends, the feature is disabled and the instant access snapshot is automatically released. This parameter takes effect only if you set the `InstantAccess` parameter to true. Unit: days. Valid values: 1 to 65535.

By default, the value of this parameter is the same as the value of the `RetentionDays` parameter.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the snapshot.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of the snapshot. Valid values: 1 to 65536. Unit: days. The snapshot is automatically released when its retention period expires.

By default, this parameter is left empty, which specifies that the snapshot is not automatically released.', example='30', position='Query'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName', position='Query'),
  storageLocationArn?: string(name='StorageLocationArn', description='>  This parameter is unavailable.', example='null', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N that you want to add to the snapshot. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with acs: or aliyun and cannot contain [http:// or https://.](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N that you want to add to the snapshot. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with acs: or contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the snapshot.', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp17441ohwka0yuh****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * The local snapshot feature is replaced by the instant access feature.
  * *   If you used the local snapshot feature before December 14, 2020, you can use the `Category` or `InstantAccess` parameter as expected and must take note of the following items:
  *     *   The `Category` and `InstantAccess` parameters cannot be specified at the same time.
  *     *   If you do not specify the `Category` or `InstantAccess` parameter, regular snapshots are created.
  * *   If you did not use the local snapshot feature before December 14, 2020, you can use the `InstantAccess` parameter but cannot use the `Category` parameter.
  * You cannot create snapshots for a disk in the following scenarios:
  * *   The number of manual snapshots of the disk has reached 256.
  * *   A snapshot is being created for the disk.
  * *   The instance to which the disk is attached has never been started.
  * *   The ECS instance to which the disk is attached is not in the **Stopped** (`Stopped`) or **Running** (`Running`) state.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.
  * When you create a snapshot, take note of the following items:
  * *   If a snapshot is being created, you cannot use this snapshot to create a custom image by calling the [CreateImage](~~25535~~) operation.
  * *   When a snapshot is being created for a disk that is attached to an instance, do not change the instance state.
  * *   You can create snapshots for a disk that is in the **Expired** (`Expired`) state. If the release time that is scheduled for a disk arrives when a snapshot is being created for the disk, the snapshot is in the **Creating** (`Creating`) state and is deleted when the disk is released.
  *
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotGroupRequest {
  description?: string(name='Description', description='The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  diskId?: [ string ](name='DiskId', description='The ID of disk N for which you want to create snapshots. You can specify multiple disk IDs across instances with the same zone. Valid values of N: 1 to 16. A single snapshot-consistent group can contain snapshots of up to 16 disks and cannot exceed 32 TiB in size.

When you call this operation, take note of the following items:

*   You cannot specify both DiskId.N and `ExcludeDiskId.N`.
*   If `InstanceId` is specified, DiskId.N is only used to specify the disks that are attached to the instance specified by InstanceId.', position='Query'),
  excludeDiskId?: [ string ](name='ExcludeDiskId', description='The ID of disk N for which you do not need to create snapshots. After this parameter is specified, the created snapshot-consistent group does not contain snapshots of the disk. Valid values of N: 1 to 16.

This parameter is empty by default, which indicates that snapshots are created for all the disks of the instance.

> You cannot specify both ExcludeDiskId.N and `DiskId.N`.', example='d-j6cf7l0ewidb78lq****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-j6ca469urv8ei629****', position='Query'),
  instantAccess?: boolean(name='InstantAccess', description='Specifies whether to enable the instant access feature. Valid values:

*   true: enables the instant access feature.
*   false: disables the instant access feature.

Default value: false.', example='false', position='Query'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='Specify the number of days for which the instant access feature is available. Unit: days. Valid values: 1 to 65535.

This parameter takes effect only when `InstantAccess` is set to true. The instant access feature is automatically disabled when the specified duration of the instant access feature expires.

This parameter is empty by default, which indicates that the expiration time of the instant access feature is determined by the time when the snapshots are released.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the snapshot-consistent group. The name must be 2 to 128 characters in length, and contain letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:). It must start with a letter and cannot start with `http://` or `https://`.', example='testName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageLocationArn?: string(name='StorageLocationArn', description='> This parameter is unavailable.', example='null', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the snapshot-consistent group. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the snapshot-consistent group. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the snapshot-consistent group.', position='Query'),
}

model CreateSnapshotGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='01ABBD93-1ABB-4D92-B496-1A3D20EC0697'),
  snapshotGroupId?: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group.', example='ssg-j6ciyh3k52qp7ovm****'),
}

model CreateSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotGroupResponseBody(name='body'),
}

/**
  * You can specify `InstanceId` to create a snapshot-consistent group for the specified disks of the instance. You can also specify `DiskId.N` to create a snapshot-consistent group for multiple disks that are attached to multiple instances within the same zone.
  * > You cannot specify both `DiskId.N` and `ExcludeDiskId.N`. If `InstanceId` is specified, `DiskId.N` is only used to specify the disks that are attached to the instance specified by InstanceId.
  * When you call this operation, take note of the following items:
  * *   The disk for which you want to create a snapshot must be in the **In Use** (`In_use`) or **Unattached** (`Available`) state.
  *     *   If the disk is in the **In Use** (`In_use`) state, the instance to which the disk is attached must be in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  *     *   If the disk is in the **Unattached** (`Available`) state, make sure that the disk has been attached to an ECS instance. Snapshots cannot be created for disks that have never been attached to ECS instances.
  * *   The snapshot-consistent group feature can be used to create snapshots only for enhanced SSDs (ESSDs).
  * *   A single snapshot-consistent group can contain snapshots of up to 16 disks including the system disk and data disks and cannot exceed 32 TiB in size.
  * *   Snapshots that you created by using the snapshot-consistent group feature are retained until they are deleted. We recommend that you delete unnecessary snapshots on a regular basis to prevent them from incurring excessive fees.
  * *   Snapshot-consistent groups cannot be created for disks that have the multi-attach feature enabled. If disks that have the multi-attach feature enabled are attached to the instance for which you want to create a snapshot-consistent group, you must set the `ExcludeDiskId.N` parameter to exclude these disks.
  * For information about the snapshot-consistent group feature and its billing, see [Create a snapshot-consistent group](~~199625~~).
  *
 */
async function createSnapshotGroup(request: CreateSnapshotGroupRequest): CreateSnapshotGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshotGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateStorageSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the storage set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription', position='Query'),
  maxPartitionNumber?: int32(name='MaxPartitionNumber', description='The maximum number of partitions supported by the storage set. The value must be greater than or equal to 2, but cannot exceed the quota obtained by calling the [DescribeAccountAttributes](~~73772~~)operation.

Default value: 2.', example='10', minimum=2, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which to create the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set.

The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testStorageSetName', position='Query'),
  zoneId: string(name='ZoneId', description='The ID of the zone in which to create the storage set. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g', position='Query'),
}

model CreateStorageSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
}

model CreateStorageSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStorageSetResponseBody(name='body'),
}

/**
  * A storage set can distribute disks or Shared Block Storage devices to different locations. You can specify the number of partitions in a storage set. A larger number of partitions indicate more discrete distribution of disks or Shared Block Storage devices.
  * When you call this operation, take note of the following items:
  * *   A limitation exists on the number of storage sets that you can create in a region. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the allowed number of storage sets in a region.
  * *   A limitation exists on the number of partitions in a zone. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the allowed number of storage sets in a zone.
  *
 */
async function createStorageSet(request: CreateStorageSetRequest): CreateStorageSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStorageSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateVSwitchRequest {
  cidrBlock: string(name='CidrBlock', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchName?: string(name='VSwitchName', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVSwitchResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualBorderRouterRequest {
  circuitCode?: string(name='CircuitCode', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vbrOwnerId?: long(name='VbrOwnerId', position='Query'),
  vlanId: int32(name='VlanId', position='Query'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
  vbrId?: string(name='VbrId'),
}

model CreateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcRequest {
  cidrBlock?: string(name='CidrBlock', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vpcName?: string(name='VpcName', position='Query'),
}

model CreateVpcResponseBody = {
  requestId?: string(name='RequestId'),
  routeTableId?: string(name='RouteTableId'),
  vRouterId?: string(name='VRouterId'),
  vpcId?: string(name='VpcId'),
}

model CreateVpcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpc', 'POST', '/', 'json', false, 'json', request);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeactivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeleteActivationRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  activationId: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the activation code. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteActivationResponseBody = {
  activation?: {
    activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
    creationTime?: string(name='CreationTime', description='The time when the activation code was created.', example='2021-01-20T06:00:00Z'),
    deregisteredCount?: int32(name='DeregisteredCount', description='The number of instances that were deregistered.', example='0'),
    description?: string(name='Description', description='The description of the activation code.', example='This is description.'),
    instanceCount?: int32(name='InstanceCount', description='The maximum number of times that the activation code can be used to register managed instances.', example='1'),
    instanceName?: string(name='InstanceName', description='The default instance name prefix.', example='test-InstanceName'),
    ipAddressRange?: string(name='IpAddressRange', description='The IP addresses of hosts that are allowed to use the activation code.', example='0.0.0.0/0'),
    registeredCount?: int32(name='RegisteredCount', description='The number of registered instances.', example='0'),
    timeToLiveInHours?: long(name='TimeToLiveInHours', description='The validity period of the activation code. Unit: hours.', example='4'),
  }(name='Activation', description='Details of the activation code and its usage information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4ECEEE12-56F1-4FBC-9AB1-890F74942176'),
}

model DeleteActivationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteActivationResponseBody(name='body'),
}

/**
  * ## Description
  * Before you call this operation to delete an activation code, make sure that the activation code has never been used to register managed instances.
  *
 */
async function deleteActivation(request: DeleteActivationRequest): DeleteActivationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteActivation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoProvisioningGroupRequest {
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group to be deleted.', example='apg-bpuf6jel2bbl62wh13****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='123456', position='Query'),
  ownerId?: long(name='OwnerId', example='123456', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456', position='Query'),
  terminateInstances: boolean(name='TerminateInstances', description='Specifies whether to release instances in the auto provisioning group. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: retains instances in the auto provisioning group.', example='true', position='Query'),
}

model DeleteAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
}

model DeleteAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoProvisioningGroupResponseBody(name='body'),
}

async function deleteAutoProvisioningGroup(request: DeleteAutoProvisioningGroupRequest): DeleteAutoProvisioningGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoProvisioningGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoSnapshotPolicyRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='The ID of the automatic snapshot policy. You can call the [DescribeAutoSnapshotPolicyEx](~~25530~~) operation to query the available automatic snapshot policies.', example='sp-bp14yziiuvu3s6jn****', position='Query'),
  regionId: string(name='regionId', description='The region ID of the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBandwidthPackageResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteBandwidthPackage(request: DeleteBandwidthPackageRequest): DeleteBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCommandRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandId: string(name='CommandId', description='The ID of the command. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.', example='c-4d34302d02424c5c8e10281e3a31****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteCommandResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommandResponseBody(name='body'),
}

async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommand', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDedicatedHostClusterRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  dedicatedHostClusterId: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDedicatedHostClusterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D02FF8'),
}

model DeleteDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostClusterResponseBody(name='body'),
}

async function deleteDedicatedHostCluster(request: DeleteDedicatedHostClusterRequest): DeleteDedicatedHostClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedHostCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDemandRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value that is unique among different requests. The `ClientToken` value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E', position='Query'),
  demandId: string(name='DemandId', description='The ID of the requirement.', example='ed-bp11n21kq00sl71p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reason?: string(name='Reason', description='The reason for deleting the filing form. Enter details.', example='test-reason', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the filed instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDemandResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDemandResponseBody(name='body'),
}

/**
  * >  This operation is in internal preview and has not been officially released. We recommend that you avoid using this operation.
  *
 */
async function deleteDemand(request: DeleteDemandRequest): DeleteDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDemand', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeploymentSetRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  deploymentSetId: string(name='DeploymentSetId', description='The ID of the deployment set. You cannot delete a deployment set that contains instances.', example='ds-bp1g5ahlkal88d7x****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
}

model DeleteDeploymentSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeploymentSetResponseBody(name='body'),
}

async function deleteDeploymentSet(request: DeleteDeploymentSetRequest): DeleteDeploymentSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeploymentSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiagnosticMetricSetsRequest {
  metricSetIds: [ string ](name='MetricSetIds', description='The IDs of diagnostic metric sets. You can specify up to 10 set IDs.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic metric set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DeleteDiagnosticMetricSetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DeleteDiagnosticMetricSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiagnosticMetricSetsResponseBody(name='body'),
}

async function deleteDiagnosticMetricSets(request: DeleteDiagnosticMetricSetsRequest): DeleteDiagnosticMetricSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiagnosticMetricSets', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiagnosticReportsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Host'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  reportIds: [ string ](name='ReportIds', description='The IDs of diagnostic reports. You can specify up to 100 report IDs.', position='Query'),
}

model DeleteDiagnosticReportsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DeleteDiagnosticReportsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiagnosticReportsResponseBody(name='body'),
}

/**
  * You can call this operation to delete the diagnostic reports that are no longer needed.
  *
 */
async function deleteDiagnosticReports(request: DeleteDiagnosticReportsRequest): DeleteDiagnosticReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDiagnosticReports', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  diskId: string(name='DiskId', description='The ID of the disk to be released.', example='d-bp14k9cxvr5uzy5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', description='RAM 用户的虚拟账号ID。', example='155780923770', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='资源主账号的账号名称。', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源主账号的ID，亦即UID。', example='155780923770', position='Query'),
}

model DeleteDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation to release a pay-as-you-go data disk, take note of the following items:
  * *   Manual snapshots of the disk are retained.
  * *   You can call the [ModifyDiskAttribute](~~25517~~) operation to configure whether to release automatic snapshots together with the disk. We recommend that you delete unneeded snapshots to maintain an enough snapshot quota for new automatic snapshots.
  * *   The disk must be in the Unattached (Available) state.
  * *   If the specified disk does not exist, the request is ignored.
  *
 */
async function deleteDisk(request: DeleteDiskRequest): DeleteDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDisk', 'POST', '/', 'json', false, 'json', request);
}

model DeleteForwardEntryRequest {
  forwardEntryId: string(name='ForwardEntryId', position='Query'),
  forwardTableId: string(name='ForwardTableId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHaVipRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  haVipId: string(name='HaVipId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHaVip', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHpcClusterRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value must contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  hpcClusterId: string(name='HpcClusterId', description='The ID of the HPC cluster.', example='hpc-cxvr5uzy54j0ya****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='EcsforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='EcsforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
}

model DeleteHpcClusterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHpcClusterResponseBody(name='body'),
}

async function deleteHpcCluster(request: DeleteHpcClusterRequest): DeleteHpcClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHpcCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  force?: boolean(name='Force', description='Specifies whether to forcibly delete the custom image. Valid values:

*   true: forcibly deletes the custom image, regardless of whether the image is being used by other instances.
*   false: verifies that the image is not being used by other instances and then deletes the image.

Default value: false.', example='false', position='Query'),
  imageId: string(name='ImageId', description='The ID of the image. If the specified custom image does not exist, the request is ignored.', example='m-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageComponentRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageComponentId: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image component. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteImageComponentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImageComponentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageComponentResponseBody(name='body'),
}

/**
  * Only custom image components can be deleted.
  *
 */
async function deleteImageComponent(request: DeleteImageComponentRequest): DeleteImageComponentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImageComponent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImagePipelineRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imagePipelineId: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteImagePipelineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImagePipelineResponseBody(name='body'),
}

/**
  * ## Description
  * If an image build task based on an image template is in the BUILDING, DISTRIBUTING, RELEASING, or CANCELLING state, you cannot delete the template. You can delete the template only when the image build task is in the SUCCESS, FAILED, or CANCELLED state. You can call the DescribeImagePipelineExecutions operation to query the details of an image build task.
  *
 */
async function deleteImagePipeline(request: DeleteImagePipelineRequest): DeleteImagePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImagePipeline', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  force?: boolean(name='Force', description='Specifies whether to forcefully release the instance in the **Running** (`Running`) state. Valid values:

*   true: forcefully releases the instance in the **Running** (`Running`) state. When the Force parameter is set to true, this operation is equivalent to the power-off operation. Temporary data in the memory and storage of the instance is erased and cannot be restored.
*   false: normally releases the instance. This value is valid only for instances in the **Stopped** (`Stopped`) state.

Default value: false.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to release.', example='i-bp1g6zv0ce8oghu7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='Specifies whether to release the expired subscription instance.

Default value: false.', example='false', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * ## Description
  * *   After an instance is released, all the physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
  * *   Disks attached to the instance:
  *     *   The disks for which `DeleteWithInstance` is set to false are retained as pay-as-you-go disks.
  *     *   The disks for which `DeleteWithInstance` is set to true are released along with the instance.
  *     *   For disks for which `DeleteAutoSnapshot` is set to false, the automatic snapshots of the disks are retained.
  *     *   For disks for which `DeleteAutoSnapshot` is set to true, the automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If `OperationLocks` in the response contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~). Even if `DeleteWithInstance` is set to `false` for the data disks that are attached to the instance, this parameter is ignored and the data disks are released along with the instance.
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   true: performs a dry run. The system checks the AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DRYRUN.SUCCESS error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2XX HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully release the instance that is in the **Running** (`Running`) state. Default value: false. Valid values:

*   true: forcefully releases the instance that is in the **Running** (`Running`) state. When the Force parameter is set to true, this operation is equivalent to the power-off operation. Temporary data in the memory and storage of the instance is erased and cannot be recovered.
*   false: normally releases the instance. This value is valid only for instances that are in the **Stopped** (`Stopped`) state.', example='false', position='Query'),
  instanceId: [ string ](name='InstanceId', description='The IDs of instances. You can specify up to 100 instance IDs in a single request.', example='i-bp1g6zv0ce8oghu7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='Specifies whether to release the expired subscription instance.

Default value: false.', example='false', position='Query'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B7813C6-57BF-41XX-B12B-F172F65A6046'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstancesResponseBody(name='body'),
}

/**
  * *   After an instance is released, all the physical resources used by the instance are recycled. Relevant data is erased and cannot be recovered.
  * *   Disks attached to the instance:
  *     *   The disks for which `DeleteWithInstance` is set to false are retained as pay-as-you-go disks.
  *     *   The disks for which `DeleteWithInstance` is set to true are released along with the instance.
  *     *   For disks for which `DeleteAutoSnapshot` is set to false, the automatic snapshots of the disks are retained.
  *     *   For disks for which `DeleteAutoSnapshot` is set to true, the automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If `OperationLocks` in the DescribeInstances response contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons. Even if the `DeleteWithInstance` parameter is set to `false` for the data disks that are attached to the instance, this parameter is ignored and the data disks are released along with the instance. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
 */
async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstances', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKeyPairsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  keyPairNames: string(name='KeyPairNames', description='The names of SSH key pairs. The value can be a JSON array that consists of up to 100 key pair names. Separate multiple key pair names with commas (,).', example='["skp-bp67acfmxazb41****", "skp-bp67acfmxazb42****", … "skp-bp67acfmxazb4p3***"]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After an SSH key pair is deleted, you cannot query the SSH key pair by calling the [DescribeKeyPairs](~~51773~~) operation.
  * *   If an SSH key pair is bound to one or more Elastic Compute Service (ECS) instances, the SSH key pair cannot be deleted.
  *
 */
async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLaunchTemplateRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the instance launch template. For more information, call the [DescribeLaunchTemplates](~~73759~~) operation.

You must specify the `LaunchTemplateId` parameter or the `LaunchTemplateName` parameter to determine an instance launch template.', example='lt-bp1apo0bbbkuy0rj****', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the instance launch template.

You must specify the `LaunchTemplateId` parameter or the `LaunchTemplateName` parameter to determine an instance launch template.', example='testLaunchTemplateName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteLaunchTemplateResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLaunchTemplateResponseBody(name='body'),
}

async function deleteLaunchTemplate(request: DeleteLaunchTemplateRequest): DeleteLaunchTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLaunchTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLaunchTemplateVersionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  deleteVersion: [ long ](name='DeleteVersion', description='The version numbers of instance launch templates that to be deleted. You can specify at most 29 version numbers.', example='2', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the instance launch template. For more information, call the [DescribeLaunchTemplates](~~73759~~) operation.', example='lt-bp1apo0bbbkuy0rj****', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the instance launch template.', example='testLaunchTemplateName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the instance lauch template belongs. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteLaunchTemplateVersionResponseBody = {
  launchTemplateVersions?: {
    launchTemplateVersion?: [ 
    {
      launchTemplateId?: string(name='LaunchTemplateId'),
      launchTemplateVersionNumber?: long(name='LaunchTemplateVersionNumber'),
    }
  ](name='LaunchTemplateVersion')
  }(name='LaunchTemplateVersions'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLaunchTemplateVersionResponseBody(name='body'),
}

async function deleteLaunchTemplateVersion(request: DeleteLaunchTemplateVersionRequest): DeleteLaunchTemplateVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLaunchTemplateVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatGatewayRequest {
  natGatewayId: string(name='NatGatewayId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkInterfaceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F3CD6886-D8D0-4FEE-B93E-1B73239673DE'),
}

model DeleteNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkInterfaceResponseBody(name='body'),
}

/**
  * ## Description
  * *   The ENI must be in the Available state.
  * *   If the ENI is bound to an ECS instance, you must unbind the ENI from the ECS instance ([DetachNetworkInterface](~~58514~~)) before you can delete the ENI.
  * *   After an ENI is deleted:
  *     *   All the private IP addresses (including primary and secondary private IP addresses) of the ENI are automatically released. 
  *     *   The ENI is automatically removed from its security groups.
  * *   This operation is an asynchronous operation. After this operation is called to delete an ENI, you can check the state or events of the ENI to determine whether the ENI is deleted. The following figure shows the transitions between the states of the ENI.
  *     
  *     ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/en-US/20230223/krcd/DeleteNetworkInterface.png)
  *     *   If the ENI is in the Deleting state, the ENI deletion request is sent and the ENI is being deleted.
  *     *   If the ENI is not found, the ENI is deleted.
  *     *   If the ENI is stuck in the Deleting state, the ENI fails to be deleted and you can re-initiate the request to delete the ENI. 
  * For information about examples on how to call this operation, see [Delete an ENI](~~471553~~).
  *
 */
async function deleteNetworkInterface(request: DeleteNetworkInterfaceRequest): DeleteNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkInterfacePermissionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  force?: boolean(name='Force', position='Query'),
  networkInterfacePermissionId: string(name='NetworkInterfacePermissionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNetworkInterfacePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkInterfacePermissionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteNetworkInterfacePermission(request: DeleteNetworkInterfacePermissionRequest): DeleteNetworkInterfacePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkInterfacePermission', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrefixListRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePrefixListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DeletePrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrefixListResponseBody(name='body'),
}

/**
  * ## Description
  * If a prefix list is associated with resources, you cannot delete the prefix list. You must disassociate the prefix list from the resources before you can delete the prefix list. You can call the [DescribePrefixListAssociations](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/describeprefixlistassociations) operation to query resources that are associated with a specific prefix list.
  *
 */
async function deletePrefixList(request: DeletePrefixListRequest): DeletePrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrefixList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteEntryRequest {
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  nextHopId?: string(name='NextHopId', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouterInterfaceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group. You can call the [DescribeSecurityGroups](~~25556~~) to query the security group ID.', example='sg-bp1fg655nh68xyz9****', position='Query'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

/**
  * Before you delete a security group, make sure that no instances are present in the security group and that the security group is not referenced by other security groups [DescribeSecurityGroupReferences](~~57320~~)). Otherwise, the DeleteSecurityGroup request fails.
  *
 */
async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  force?: boolean(name='Force', description='Specifies whether to forcefully delete the snapshot that has been used to create disks. Valid values:

*   true: forcefully deletes the snapshot. After the snapshot is forcefully deleted, the disks created from this snapshot cannot be re-initialized.
*   false: does not forcefully delete the snapshot.

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotId: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp1c0doj0taqyzzl****', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   If the specified snapshot does not exist, the request is ignored.
  * *   If the specified snapshot has been used to create custom images, the snapshot cannot be deleted. You must call the [DeleteImage](~~25537~~) operation to delete the custom images before you can delete the snapshot.
  * *   If the specified snapshot has been used to create disks and the `Force` parameter is not specified or is set to `false`, the snapshot cannot be deleted directly. If you want to delete the snapshot, set the `Force` parameter to true to forcefully delete the snapshot. The disks created from the snapshot cannot be re-initialized after the snapshot is forcefully deleted.
  *
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotGroupRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the snapshot-consistent group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotGroupId: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group. You can call the [DescribeSnapshotGroups](~~210940~~) operation to query the IDs of one or more snapshot-consistent groups.', example='ssg-j6c9lpuyxo2uxxny****', position='Query'),
}

model DeleteSnapshotGroupResponseBody = {
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code. This parameter is empty when the operation was successful.

For information about error codes and error messages, visit the [API error center](https://error-center.alibabacloud.com/status/product/Ecs).', example='400'),
      errorMsg?: string(name='ErrorMsg', description='The error message. This parameter is empty when the operation was successful.

For information about error codes and error messages, visit the [API error center](https://error-center.alibabacloud.com/status/product/Ecs).', example='testErrorMsg'),
      operationStatus?: string(name='OperationStatus', description='Indicates whether the operation was successful. If the operation was successful, a value of Success is returned. If the operation failed, an error code and an error message are returned.', example='Success'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name', description='The name of the resource.', example='SnapshotId'),
          value?: string(name='Value', description='The ID of the resource.', example='s-j6c9lpuyxo2uxxnx****'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet', description='Details about the resources.'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet', description='Details about the delete operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6EDE885A-FDC1-4FAE-BC44-6EACAEA6CC6E'),
}

model DeleteSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotGroupResponseBody(name='body'),
}

/**
  * ## Description
  * If you have custom images that were created from a disk snapshot contained in a snapshot-consistent group, the disk snapshot is retained when the snapshot-consistent group is deleted. Before you can delete the disk snapshot, you must call the [DeleteImage](~~25537~~) operation to delete the custom images. Then, you can call the [DeleteSnapshot](~~25525~~) operation to delete the disk snapshot.
  *
 */
async function deleteSnapshotGroup(request: DeleteSnapshotGroupRequest): DeleteSnapshotGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshotGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStorageSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='hide', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
  storageSetId: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****', position='Query'),
}

model DeleteStorageSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteStorageSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStorageSetResponseBody(name='body'),
}

async function deleteStorageSet(request: DeleteStorageSetRequest): DeleteStorageSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStorageSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVSwitchRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVSwitchResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vbrId: string(name='VbrId', position='Query'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpc', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterManagedInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the managed instance.', example='mi-hz01axdfas****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the secondary ENI. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeregisterManagedInstanceResponseBody = {
  instance?: {
    activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F7494****'),
    agentVersion?: string(name='AgentVersion', description='The version number of the Cloud Assistant client.', example='2.2.0.102'),
    hostname?: string(name='Hostname', description='The hostname of the managed instance.', example='test-Hostname'),
    instanceId?: string(name='InstanceId', description='The ID of the managed instance.', example='mi-hz01axdfas****'),
    instanceName?: string(name='InstanceName', description='The name of the managed instance.', example='test-InstanceName-001'),
    internetIp?: string(name='InternetIp', description='The public IP address of the managed instance.', example='47.8.**.**'),
    intranetIp?: string(name='IntranetIp', description='The internal IP address of the managed instance.', example='10.0.**.**'),
    invocationCount?: long(name='InvocationCount', description='The number of times that Cloud Assistant tasks were executed on the managed instance.', example='2'),
    lastInvokedTime?: string(name='LastInvokedTime', description='The last Cloud Assistant task execution time.', example='2021-01-20T09:00:40Z'),
    machineId?: string(name='MachineId', description='The machine code of the managed instance.', example='e03231b37ab14e53b5795ad625fc****'),
    osType?: string(name='OsType', description='The operating system type of the managed instance.', example='linux'),
    osVersion?: string(name='OsVersion', description='The version information of the operating system.', example='Linux_#38~18.04.1-Ubuntu SMP Wed Jan 6 18:26:30 UTC 2021_x86_64'),
    registrationTime?: string(name='RegistrationTime', description='The time when the managed instance was registered.', example='2021-01-20T08:57:56Z'),
  }(name='Instance', description='Details of the managed instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4ECEEE12-56F1-4FBC-9AB1-890F74942176'),
}

model DeregisterManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterManagedInstanceResponseBody(name='body'),
}

async function deregisterManagedInstance(request: DeregisterManagedInstanceRequest): DeregisterManagedInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterManagedInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessPointsRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      attachedRegionNo?: string(name='AttachedRegionNo'),
      description?: string(name='Description'),
      hostOperator?: string(name='HostOperator'),
      location?: string(name='Location'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessPointsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessPoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  attributeName?: [ string ](name='AttributeName', description='The list of attribute names.', example='max-security-groups', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b', position='Query'),
}

model DescribeAccountAttributesResponseBody = {
  accountAttributeItems?: {
    accountAttributeItem?: [ 
    {
      attributeName?: string(name='AttributeName', description='The type of the resource quota in the specified region. Valid values:

* instance-network-type: available network types
* max-security-groups: the maximum number of security groups
* max-elastic-network-interfaces: the maximum number of ENIs
* max-postpaid-instance-vcpu-count: the maximum number of vCPUs for pay-as-you-go instances
* max-spot-instance-vcpu-count: the maximum number of vCPUs for preemptible instances
* used-postpaid-instance-vcpu-count: the number of vCPUs that have been allocated to pay-as-you-go instances
* used-spot-instance-vcpu-count: the number of vCPUs that have been allocated to preemptible instances
* max-postpaid-yundisk-capacity: the maximum capacity of pay-as-you-go data disks
* used-postpaid-yundisk-capacity: the capacity of pay-as-you-go disks that have been created
* max-dedicated-hosts: the maximum number of dedicated hosts
* supported-postpaid-instance-types: the instance types of pay-as-you-go I/O optimized instances
* max-axt-command-count: the maximum number of Cloud Assistant commands
* max-axt-invocation-daily: the maximum number of Cloud Assistant command executions per day
* real-name-authentication: whether an account has completed real-name verification
* max-cloud-assistant-activation-count: the maximum number of activation codes that can be created to use to register managed instances', example='max-security-groups'),
      attributeValues?: {
        valueItem?: [ 
        {
          count?: int32(name='Count', description='The number of privilege attributes in the account.', example='3'),
          diskCategory?: string(name='DiskCategory', description='The category of the data disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)', example='cloud_ssd'),
          expiredTime?: string(name='ExpiredTime', description='The expiration time of a privilege. This parameter is returned only when the account privilege has an expiration time. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-01-01T12:30:00Z'),
          instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.', example='PrePaid'),
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
          value?: string(name='Value', description='The value of the resource quota in the specified region. Valid values:

The values returned for the resource quotas to which the following AttributeName values correspond are 0 or positive integers:

* max-security-groups
* max-elastic-network-interfaces
* max-postpaid-instance-vcpu-count
* max-spot-instance-vcpu-count
* used-postpaid-instance-vcpu-count
* used-spot-instance-vcpu-count
* max-postpaid-yundisk-capacity
* used-postpaid-yundisk-capacity
* max-dedicated-hosts
* max-axt-command-count
* max-axt-invocation-daily
* max-cloud-assistant-activation-count

When the AttributeName parameter is set to supported-postpay-instance-types, an instance type is returned. For more information, see [Instance families](~~25378~~).

When the AttributeName parameter is set to real-name-authentications, one of the following values is returned:

* yes
* none
* unnecessary

When the AttributeName parameter is set to instance-network-type, one of the following values is returned:

* vpc
* classic', example='800'),
          zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-b'),
        }
      ](name='ValueItem')
      }(name='AttributeValues', description='The specific values of resource quotas.'),
    }
  ](name='AccountAttributeItem')
  }(name='AccountAttributeItems', description='Details about account privileges specified by AccountAttributeItem in the specified region.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CE45CD5-31FB-47C2-959D-CA8144CE****'),
}

model DescribeAccountAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountAttributesResponseBody(name='body'),
}

/**
  * After you [create](https://account.alibabacloud.com/register/intl_register.htm) an Alibaba Cloud account, you can create a specific number of ECS instances in different regions within the account. For more information, see [Limits](~~25412~~).
  * You can also [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex) to request a quota increase.
  *
 */
async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActivationsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****', position='Query'),
  instanceName?: string(name='InstanceName', description='The default instance name prefix.', example='test-InstanceName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the activation code. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', position='Query'),
}

model DescribeActivationsResponseBody = {
  activationList?: [ 
    {
      activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
      creationTime?: string(name='CreationTime', description='The time when the activation code was created.', example='2021-01-20T06:00:00Z'),
      deregisteredCount?: int32(name='DeregisteredCount', description='The number of instances that were deregistered.', example='1'),
      description?: string(name='Description', description='The description of the activation code.', example='This is description.'),
      disabled?: boolean(name='Disabled', description='Indicates whether the activation code was disabled.', example='false'),
      instanceCount?: int32(name='InstanceCount', description='The maximum number of times that the activation code can be used to register managed instances.', example='1'),
      instanceName?: string(name='InstanceName', description='The default instance name prefix.', example='test-InstanceName'),
      ipAddressRange?: string(name='IpAddressRange', description='The IP address range of hosts that are allowed to use the activation code.', example='0.0.0.0/0'),
      registeredCount?: int32(name='RegisteredCount', description='The number of instances that were registered.', example='1'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', example='owner'),
          tagValue?: string(name='TagValue', example='zhangsan'),
        }
      ](name='Tags'),
      timeToLiveInHours?: long(name='TimeToLiveInHours', description='The validity period of the activation code. Unit: hours.', example='4'),
    }
  ](name='ActivationList', description='Details of the activation codes and their usage information.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4ECEEE12-56F1-4FBC-9AB1-890F74625134'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeActivationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActivationsResponseBody(name='body'),
}

async function describeActivations(request: DescribeActivationsRequest): DescribeActivationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActivations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoProvisioningGroupHistoryRequest {
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-bp67acfmxazb4p****', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range of the queried data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-20T15:10:20Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='123456', position='Query'),
  ownerId?: long(name='OwnerId', example='123456', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Pages start from page 1.

Default value: 1', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: 100.

Default value: 10.', example='5', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range of the queried data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-04-01T15:10:20Z', position='Query'),
}

model DescribeAutoProvisioningGroupHistoryResponseBody = {
  autoProvisioningGroupHistories?: {
    autoProvisioningGroupHistory?: [ 
    {
      activityDetails?: {
        activityDetail?: [ 
        {
          detail?: string(name='Detail', description='The execution details of instance creation performed by the single scheduling task.', example='New ECS instances "i-bp67acfmxazb4p****, i-bp67acfmxazb5p****" created.'),
          status?: string(name='Status', description='The execution status of instance creation performed by the single scheduling task. Valid values:

*   Successful: Instances are created.
*   Failed: Instances failed to be created.
*   InProgress: Instances are being created.
*   Warning: Some instances are created.', example='Successful'),
        }
      ](name='ActivityDetail')
      }(name='ActivityDetails', description='An array consisting of ActivityDetail data.'),
      lastEventTime?: string(name='LastEventTime', description='The execution time of the last instance creation performed by the single scheduling task.', example='2019-04-01T15:10:20Z'),
      startTime?: string(name='StartTime', description='The start time of executing the single scheduling task.', example='2019-04-01T15:10:20Z'),
      status?: string(name='Status', description='The execution status of the single scheduling task. Valid values:

*   prepare: The scheduling task is being executed.
*   success: The scheduling task is executed.
*   failed: The scheduling task failed to be executed.', example='success'),
      taskId?: string(name='TaskId', description='The ID of the scheduling task.', example='apg-task-bp67acfmxazb4p****'),
    }
  ](name='AutoProvisioningGroupHistory')
  }(name='AutoProvisioningGroupHistories', description='An array consisting of AutoProvisioningGroupHistory data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
  totalCount?: int32(name='TotalCount', description='The number of queried scheduling tasks in the auto provisioning group.', example='10'),
}

model DescribeAutoProvisioningGroupHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupHistoryResponseBody(name='body'),
}

async function describeAutoProvisioningGroupHistory(request: DescribeAutoProvisioningGroupHistoryRequest): DescribeAutoProvisioningGroupHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoProvisioningGroupHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoProvisioningGroupInstancesRequest {
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-uf6jel2bbl62wh13****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='123456', position='Query'),
  ownerId?: long(name='OwnerId', example='123456', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the auto provisioning group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456', position='Query'),
}

model DescribeAutoProvisioningGroupInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      CPU?: int32(name='CPU', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2017-12-10T04:04Z'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      instanceType?: string(name='InstanceType', description='The instance type of the ECS instance.', example='ecs.g5.large'),
      ioOptimized?: boolean(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
      isSpot?: boolean(name='IsSpot', description='Indicates whether the instance is a preemptible instance.', example='true'),
      memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='1024'),
      networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   vpc
*   classic', example='vpc'),
      osType?: string(name='OsType', description='The operating system type of the instance. Valid values:

*   windows
*   linux', example='linux'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the instance.', example='Running'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='Instance')
  }(name='Instances', description='An array consisting of Instance data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
  totalCount?: int32(name='TotalCount', description='The number of queried instances in the auto provisioning group.', example='2'),
}

model DescribeAutoProvisioningGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupInstancesResponseBody(name='body'),
}

async function describeAutoProvisioningGroupInstances(request: DescribeAutoProvisioningGroupInstancesRequest): DescribeAutoProvisioningGroupInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoProvisioningGroupInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoProvisioningGroupsRequest {
  autoProvisioningGroupId?: [ string ](name='AutoProvisioningGroupId', description='The IDs of auto provisioning groups. You can specify up to 20 auto provisioning group IDs.', example='apg-sn54avj8htgvtyh8****', position='Query'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group.', example='testAutoProvisioningGroupName', position='Query'),
  autoProvisioningGroupStatus?: [ string ](name='AutoProvisioningGroupStatus', description='The statuses of auto provisioning groups.', example='active', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='2', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAutoProvisioningGroupsResponseBody = {
  autoProvisioningGroups?: {
    autoProvisioningGroup?: [ 
    {
      autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-sn54avj8htgvtyh8****'),
      autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group.', example='EcsDocTest'),
      autoProvisioningGroupType?: string(name='AutoProvisioningGroupType', description='The delivery type of the auto provisioning group. Valid values:

*   request: one-time delivery.After the auto provisioning group is started, it attempts to deliver an instance cluster once. If the cluster fails to be delivered, the group does not retry the operation.
*   maintain: continuous delivery.After the auto provisioning group is started, it continuously attempts to deliver an instance cluster. The auto provisioning group compares the real-time capacity and the target cluster capacity. If the cluster does not meet the target capacity, the group creates instances until the cluster meets the target capacity.', example='maintain'),
      creationTime?: string(name='CreationTime', description='The time when the auto provisioning group was created.', example='2019-04-01T15:10:20Z'),
      excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='Indicates whether to release the scaled-in instances when the real-time capacity exceeds the target capacity and the group is triggered to scale in. Valid values:

*   termination: releases the scaled-in instances.
*   no-termination: removes the scaled-in instances from the auto provisioning group but not releases the instances.', example='termination'),
      launchTemplateConfigs?: {
        launchTemplateConfig?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type specified in the extended configurations.', example='ecs.g5.large'),
          maxPrice?: float(name='MaxPrice', description='The maximum price of the instance type specified in the extended configurations.', example='3'),
          priority?: float(name='Priority', description='The priority of the instance type specified in the extended configurations. A value of 0 indicates the highest priority.', example='1'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch specified in the extended configurations.', example='vsw-sn5bsitu4lfzgc5o7****'),
          weightedCapacity?: float(name='WeightedCapacity', description='The weight of the instance type specified in the extended configurations.', example='2'),
        }
      ](name='LaunchTemplateConfig')
      }(name='LaunchTemplateConfigs', description='Details about the extended configurations.'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template associated with the auto provisioning group.', example='lt-bp1fgzds4bdogu03****'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion', description='The version of the launch template associated with the auto provisioning group.', example='1'),
      maxSpotPrice?: float(name='MaxSpotPrice', description='The maximum price for preemptible instances in the auto provisioning group.

>  If both the MaxSpotPrice and LaunchTemplateConfig.N.MaxPrice parameters are specified, the maximum price is the lower value of the two parameters. The LaunchTemplateConfig.N.MaxPrice parameter is set when the auto provisioning group is created, and cannot be modified.', example='2'),
      payAsYouGoOptions?: {
        allocationStrategy?: string(name='AllocationStrategy', description='The provisioning policy for pay-as-you-go instances. Valid values:

- lowest-price: the cost optimization policy. This policy indicates that instance types of the lowest cost are used to create instances.
- prioritized: the priority-based policy. This policy indicates that instances are created based on the priority specified by the LaunchTemplateConfig.N.Priority parameter.

>  The LaunchTemplateConfig.N.Priority parameter is set when the auto provisioning group is created, and cannot be modified.', example='prioritized'),
      }(name='PayAsYouGoOptions', description='The policies related to pay-as-you-go instances.'),
      regionId?: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou'),
      spotOptions?: {
        allocationStrategy?: string(name='AllocationStrategy', description='The provisioning policy for preemptible instances. Valid values:

- lowest-price: the cost optimization policy. This policy indicates that instance types of the lowest cost are used to create instances.
- diversified: balanced distribution policy. This policy indicates that instances are created evenly across multiple zones specified in the extended configurations.', example='diversified'),
        instanceInterruptionBehavior?: string(name='InstanceInterruptionBehavior', description='The action to be performed after the extra preemptible instances are stopped. Valid values: 

- stop: retains the extra preemptible instances in the stopped state.
- terminate: releases the extra preemptible instances.', example='stop'),
        instancePoolsToUseCount?: int32(name='InstancePoolsToUseCount', description='The number of instances that the auto provisioning group used the instance type of the lowest cost to create. 

>  This parameter is set when the auto provisioning group is created, and cannot be modified.', example='2'),
      }(name='SpotOptions', description='The policy related to preemptible instances.'),
      state?: string(name='State', description='The overall status of instance scheduling of the auto provisioning group. Valid values:

- fulfilled: Scheduling is complete and the instance cluster is delivered.
- pending-fulfillment: The instances are being created.
- pending-termination: The instances are being removed.
- error: An exception has occurred during scheduling and the instance cluster was not delivered.', example='fulfilled'),
      status?: string(name='Status', description='The status of the auto provisioning group. Valid values:

- submitted: The auto provisioning group is created and has not started to execute scheduling tasks.
- active: The auto provisioning group is executing scheduling tasks.
- deleted: The auto provisioning group is deleted.
- deleted-running: The auto provisioning group is being deleted.
- modifying: The auto provisioning group is being modified.', example='submitted'),
      targetCapacitySpecification?: {
        defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='The billing method of supplemental instances. The target capacity of the auto provisioning group must be at least the sum of the pay-as-you-go instance capacity specified by the PayAsYouGoTargetCapacity parameter and the preemptible instance capacity specified by the SpotTargetCapacity parameter. Valid values: 

- PayAsYouGo: pay-as-you-go
- Spot: preemptible instance', example='Spot'),
        payAsYouGoTargetCapacity?: float(name='PayAsYouGoTargetCapacity', description='The target capacity of pay-as-you-go instances in the auto provisioning group.', example='30'),
        spotTargetCapacity?: float(name='SpotTargetCapacity', description='The target capacity of preemptible instances in the auto provisioning group.', example='20'),
        totalTargetCapacity?: float(name='TotalTargetCapacity', description='The target capacity of the auto provisioning group. The capacity consists of the following three parts: 

- PayAsYouGoTargetCapacity
- SpotTargetCapacity
- The supplemental capacity besides instance capacities specified by the PayAsYouGoTargetCapacity and SpotTargetCapacity parameters', example='60'),
      }(name='TargetCapacitySpecification', description='The settings of the target capacity of the auto provisioning group.'),
      terminateInstances?: boolean(name='TerminateInstances', description='Indicates whether to release the instances in the auto provisioning group when the auto provisioning group is deleted. Valid values: 

- true: releases the instances.
- false: retains the instances.', example='false'),
      terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='Indicates whether to release instances in the auto provisioning group when the auto provisioning group expires. Valid values: 

- true: releases the instances.
- false: removes the instances in the group from the auto provisioning group but not releases the instances.', example='true'),
      validFrom?: string(name='ValidFrom', description='The time when the auto provisioning group was started. The period of time between this point in time and the point in time specified by the ValidUntil parameter is the effective time period of the auto provisioning group.', example='2019-04-01T15:10:20Z'),
      validUntil?: string(name='ValidUntil', description='The time when the auto provisioning group expires. The period of time between this point in time and the point in time specified by the ValidFrom parameter is the effective time period of the auto provisioning group.', example='2019-06-01T15:10:20Z'),
    }
  ](name='AutoProvisioningGroup')
  }(name='AutoProvisioningGroups', description='Details about the auto provisioning groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='745CEC9F-0DD7-4451-9FE7-8B752F39****'),
  totalCount?: int32(name='TotalCount', description='The number of queried auto provisioning groups.', example='10'),
}

model DescribeAutoProvisioningGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupsResponseBody(name='body'),
}

async function describeAutoProvisioningGroups(request: DescribeAutoProvisioningGroupsRequest): DescribeAutoProvisioningGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoProvisioningGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoSnapshotPolicyExRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-bp67acfmxazb4ph****', position='Query'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='The name of the automatic snapshot policy.', example='TestName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Page start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the current list of regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-aek2kkmhmhs****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the automatic snapshot policy. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the automatic snapshot policy. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain http:// or https://.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model DescribeAutoSnapshotPolicyExResponseBody = {
  autoSnapshotPolicies?: {
    autoSnapshotPolicy?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-bp67acfmxazb4ph****'),
      autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='The name of the automatic snapshot policy.', example='testAutoSnapshotPolicyName'),
      copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='>  This parameter is in invitational preview and unavailable for general users.', example='0'),
      creationTime?: string(name='CreationTime', description='The time when the automatic snapshot policy was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2019-12-10T16:00Z'),
      diskNums?: int32(name='DiskNums', description='The number of disks to which the automatic snapshot policy is applied.', example='1'),
      enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='>  This parameter is in invitational preview and unavailable for general users.', example='false'),
      regionId?: string(name='RegionId', description='The region ID of the automatic snapshot policy.', example='cn-hangzhou'),
      repeatWeekdays?: string(name='RepeatWeekdays', description='The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to the days of the week. 1 indicates Monday. One or more days can be specified.', example='["6"]'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2kkmhmhs****'),
      retentionDays?: int32(name='RetentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The automatic snapshot is retained until it is deleted.
*   1 to 65536: The automatic snapshot is retained for the specified number of days.', example='7'),
      status?: string(name='Status', description='The state of the automatic snapshot policy. Valid values:

*   Normal: The automatic snapshot policy is normal.
*   Expire: The automatic snapshot policy cannot be used because your account has overdue payments.', example='Normal'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the automatic snapshot policy.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the automatic snapshot policy.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the automatic snapshot policy.'),
      targetCopyRegions?: string(name='TargetCopyRegions', description='>  This parameter is in invitational preview and unavailable for general users.', example='test'),
      timePoints?: string(name='TimePoints', description='The points in time of the day at which to create automatic snapshots.

The time is displayed in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Multiple points in time can be specified.

The parameter value is a JSON array that contains up to 24 points in time separated by commas (,). Example: `["0", "1", ... "23"]`.', example='["1"]'),
      volumeNums?: int32(name='VolumeNums', description='The number of extended volumes to which the automatic snapshot policy is applied.', example='2'),
    }
  ](name='AutoSnapshotPolicy')
  }(name='AutoSnapshotPolicies', description='Details about the automatic snapshot policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of automatic snapshot policies.', example='1'),
}

model DescribeAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoSnapshotPolicyExResponseBody(name='body'),
}

async function describeAutoSnapshotPolicyEx(request: DescribeAutoSnapshotPolicyExRequest): DescribeAutoSnapshotPolicyExResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoSnapshotPolicyEx', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  cores?: int32(name='Cores', description='The number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).

The Cores parameter takes effect only when the DestinationResource parameter is set to InstanceType.', example='2', position='Query'),
  dataDiskCategory?: string(name='DataDiskCategory', description='The type of the data disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   ephemeral_ssd: local SSD.
*   cloud_essd: ESSD.', example='cloud_ssd', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****', position='Query'),
  destinationResource: string(name='DestinationResource', description='The resource type to query. Valid values:

*   Zone: zone.
*   IoOptimized: I/O optimized resource.
*   InstanceType: instance type.
*   SystemDisk: system disk.
*   DataDisk: data disk.
*   Network: network type.
*   ddh: dedicated host.

For more information about how to configure the DestinationResource parameter, see the **Description** section of this topic.', example='InstanceType', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the resource. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.

Default value: PostPaid.', example='PrePaid', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance types. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.

For more information about how to configure the InstanceType parameter, see the **Description** section of this topic.', example='ecs.g5.large', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is an I/O optimized instance. Valid values:

*   none: The instance is a non-I/O optimized instance.
*   optimized: The instance is an I/O optimized instance.

Default value: optimized.', example='optimized', position='Query'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For more information, see [Instance families](~~25378~~).

The Memory parameter takes effect only when the DestinationResource parameter is set to InstanceType.', example='8.0', position='Query'),
  networkCategory?: string(name='NetworkCategory', description='The network type of the cluster. Valid values:

*   vpc
*   classic', example='vpc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region for which to query resources. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance.
*   disk: cloud disk.
*   reservedinstance: reserved instance.
*   ddh: dedicated host.', example='instance', position='Query'),
  scope?: string(name='Scope', description='The scope of the reserved instance. Valid values:

*   Region: regional.
*   Zone: zonal.', example='Region', position='Query'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1', minimum=2, maximum=6, position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for pay-as-you-go instances. Valid values:

*   NoSpot: The instance is a pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.

Default value: NoSpot.

The SpotStrategy parameter takes effect only when the InstanceChargeType parameter is set to PostPaid.', example='NoSpot', position='Query'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   ephemeral_ssd: local SSD.
*   cloud_essd: enhanced SSD (ESSD).

Default value: cloud_efficiency.

> When the ResourceType parameter is set to instance and the DestinationResource parameter is set to DataDisk, you must set the SystemDiskCategory parameter. If you do not set this parameter, the default value takes effect.', example='cloud_ssd', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.

This parameter is empty by default. When this parameter is empty, the system returns resources that match the other criteria in all zones within the region specified by `RegionId`.', example='cn-hangzhou-e', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      availableResources?: {
        availableResource?: [ 
        {
          supportedResources?: {
            supportedResource?: [ 
            {
              max?: int32(name='Max', description='The maximum number of available resources of a specific type. No value is returned when the parameter is empty.', example='2'),
              min?: int32(name='Min', description='The minimum number of available resources of a specific type. No value is returned when the parameter is empty.', example='1'),
              status?: string(name='Status', description='The state of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
              statusCategory?: string(name='StatusCategory', description='The resource category based on the stock. Valid values:

*   WithStock: Resources are in sufficient stock.
*   ClosedWithStock: Resources are insufficient. We recommend that you use other resources that are in sufficient stock.
*   WithoutStock: Resources are sold out and will be replenished. We recommend that you use other resources that are in sufficient stock.
*   ClosedWithoutStock: Resources are sold out and will not be replenished. We recommend that you use other resources that are in sufficient stock.', example='WithStock'),
              unit?: string(name='Unit', description='The unit of the resource type. No value is returned when the parameter is empty.', example='null'),
              value?: string(name='Value', description='The resource type.', example='ecs.d1ne.xlarge'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources', description='Details about the resources.'),
          type?: string(name='Type', description='The type of a resource. Valid values:

*   Zone: zone.
*   IoOptimized: I/O optimized resource.
*   InstanceType: instance type.
*   SystemDisk: system disk.
*   DataDisk: data disk.
*   Network: network type.
*   ddh: dedicated host.', example='InstanceType'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources', description='Details about the resources that can be created in the zone.'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of resources in the zone. Valid values:

*   Available
*   SoldOut', example='Available'),
      statusCategory?: string(name='StatusCategory', description='The resource category based on the stock. Valid values:

*   WithStock: Resources are in sufficient stock.
*   ClosedWithStock: Resources are insufficient. We recommend that you use other resources that are in sufficient stock.
*   WithoutStock: Resources are sold out and will be replenished. We recommend that you use other resources that are in sufficient stock.
*   ClosedWithoutStock: Resources are sold out and will not be replenished. We recommend that you use other resources that are in sufficient stock.', example='WithStock'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance resides.', example='cn-hangzhou-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones', description='Details about the zones in which resources are available.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0041D94C-FB92-4C49-B115-259DA1C*****'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

/**
  * The value of the `DestinationResource` parameter determines whether you need to specify additional parameters. The following sequence provides the order by which resources are filtered. You cannot query a higher order resource by specifying a lower order resource.
  * *   Sequence: `Zone > IoOptimized > InstanceType = Network = ddh > SystemDisk > DataDisk`
  * *   Examples:
  *     *   If you set `DestinationResource` to `DataDisk`, you must specify the `InstanceType` parameter or set the `ResourceType` parameter to `disk`.
  *     *   If you set `DestinationResource` to `SystemDisk`, you must specify the `InstanceType` parameter.
  *     *   If you set `DestinationResource` to `InstanceType`, you must specify the `IoOptimized` and `InstanceType` parameters.
  *     *   If you want to query available ecs.g5.large resources in all zones of the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to InstanceType, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *     *   If you want to query the zones where ecs.g5.large resources are available in the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to Zone, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *
 */
async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandwidthLimitationRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

Default value: PostPaid.', example='PrePaid', position='Query'),
  instanceType: string(name='InstanceType', description='The instance type. For more information about the values, see [Instance families](~~25378~~).

>  This parameter is required.', example='ecs.g5.large', position='Query'),
  operationType?: string(name='OperationType', description='Specifies the operation for which to query the maximum public bandwidth. Valid values:

*   Upgrade: upgrades the public bandwidth.
*   Downgrade: downgrades the public bandwidth.
*   Create: creates an ECS instance.

Default value: Create.', example='Upgrade', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.

>  This parameter is required when the OperationType parameter is set to Upgrade or Downgrade.', example='i-bp67acfmxazb4ph***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The preemption policy for the preemptible or pay-as-you-go instance. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with user-defined maximum hourly prices.
*   SpotAsPriceGo: The system automatically offers a bid, which is not higher than the pay-as-you-go price for the same instance type.

Default value: NoSpot.

>  This parameter takes effect only when the InstanceChargeType parameter is set to PostPaid.', example='NoSpot', position='Query'),
}

model DescribeBandwidthLimitationResponseBody = {
  bandwidths?: {
    bandwidth?: [ 
    {
      internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth
*   PayByTraffic', example='PayByTraffic'),
      max?: int32(name='Max', description='The maximum public bandwidth.', example='100'),
      min?: int32(name='Min', description='The minimum public bandwidth.', example='0'),
      unit?: string(name='Unit', description='The unit of the public bandwidth.', example='Mbps'),
    }
  ](name='Bandwidth')
  }(name='Bandwidths', description='Details about the maximum public bandwidth.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeBandwidthLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwidthLimitationResponseBody(name='body'),
}

async function describeBandwidthLimitation(request: DescribeBandwidthLimitationRequest): DescribeBandwidthLimitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandwidthLimitation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', position='Query'),
  natGatewayId?: string(name='NatGatewayId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBandwidthPackagesResponseBody = {
  bandwidthPackages?: {
    bandwidthPackage?: [ 
    {
      bandwidth?: string(name='Bandwidth'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      businessStatus?: string(name='BusinessStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      instanceChargeType?: string(name='InstanceChargeType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipCount?: string(name='IpCount'),
      name?: string(name='Name'),
      natGatewayId?: string(name='NatGatewayId'),
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          allocationId?: string(name='AllocationId'),
          ipAddress?: string(name='IpAddress'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='BandwidthPackage')
  }(name='BandwidthPackages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwidthPackagesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeBandwidthPackages(request: DescribeBandwidthPackagesRequest): DescribeBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCapacityReservationInstancesRequest {
  privatePoolOptions?: {
    id: string(name='Id', description='The ID of the capacity reservation.', example='crp-bp67acfmxazb4****'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query. Set the value to the NextToken value obtained from the response to the previous request.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCapacityReservationInstancesResponseBody = {
  capacityReservationItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4****'),
    }
  ](name='InstanceIdSet')
  }(name='CapacityReservationItem', description='Details about the instances that match the capacity reservation.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeCapacityReservationInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapacityReservationInstancesResponseBody(name='body'),
}

async function describeCapacityReservationInstances(request: DescribeCapacityReservationInstancesRequest): DescribeCapacityReservationInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCapacityReservationInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCapacityReservationsRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids', description='The IDs of capacity reservations. The value can be a JSON array that consists of up to 100 capacity reservation IDs. Separate the IDs with commas (,).', example='["crp-bp1gubrkqutenqdd****", "crp-bp67acfmxazb5****"]'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of instances to be created by using the capacity reservation. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription

Default value: PostPaid.', example='PostPaid', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query. Set the value to the NextToken value obtained from the response to the previous request.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', description='The operating system type of instances to be created by using the capacity reservation. Valid values:

*   windows: Windows operating systems
*   linux: Linux operating systems
*   all: all operating system types

Default value: all.', example='linux', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the capacity reservation belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.  

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The state of the capacity reservation. Valid values:

*   All: All states.
*   Pending: The capacity reservation is being initialized. Scheduled capacity reservations enter the Pending state after they are created.
*   Preparing: The capacity reservation is being prepared. Scheduled capacity reservations are in the Preparing state while resources are being provisioned.
*   Prepared: The capacity reservation is to take effect. After resources are provisioned, scheduled capacity reservations remain in the Prepared state until they take effect.
*   Active: The capacity reservation is in effect.
*   Released: The capacity reservation has been released manually or automatically when it expired.

Default value: Active.', example='Active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the capacity reservation. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the capacity reservation. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the capacity reservation.', example='cn-hangzhou-h', position='Query'),
}

model DescribeCapacityReservationsResponseBody = {
  capacityReservationSet?: {
    capacityReservationItem?: [ 
    {
      allocatedResources?: {
        allocatedResource?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
          totalAmount?: int32(name='TotalAmount', description='The total number of instances for which capacity of an instance type is reserved.', example='2'),
          usedAmount?: int32(name='UsedAmount', description='The number of instances that have used the capacity reservation.', example='2'),
          zoneId?: string(name='zoneId', description='The zone ID.', example='cn-hangzhou-h'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources', description='Details about the allocated resources.'),
      description?: string(name='Description', description='The description of the capacity reservation.', example='This is description.'),
      endTime?: string(name='EndTime', description='The time when the capacity reservation expires.', example='2021-02-19T03:02Z'),
      endTimeType?: string(name='EndTimeType', description='The release mode of the capacity reservation. Valid values:

*   Limited: The capacity reservation is automatically released at the specified time.
*   Unlimited: The capacity reservation is manually released. You can release it at anytime.', example='Unlimited'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of instances to be created by using the capacity reservation. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PostPaid'),
      platform?: string(name='Platform', description='The operating system type of instances to be created by using the capacity reservation. Valid values:

*   windows
*   linux', example='linux'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the capacity reservation.', example='crp-bp1gubrkqutenqdd****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The type of the private pool associated with the capacity reservation. Valid values:

*   Open: open private pool
*   Target: targeted private pool', example='Open'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName', description='The name of the capacity reservation.', example='crpTestName'),
      regionId?: string(name='RegionId', description='The region ID of the capacity reservation.', example='cn-hangzhou'),
      reservedInstanceId?: string(name='ReservedInstanceId', description='The ID of the reserved instance used with the capacity reservation.', example='ri-bpzhex2ulpzf53****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the capacity reservation belongs.', example='rg-bp67acfmxazb4p****'),
      savingPlanId?: string(name='SavingPlanId', description='The ID of the savings plan used with the capacity reservation.', example='spn-c29b5e18pJMT****'),
      startTime?: string(name='StartTime', description='The time when the capacity reservation takes effect.', example='2021-02-19T02:01Z'),
      startTimeType?: string(name='StartTimeType', description='The mode in which the capacity reservation takes effect. Valid values:

- Now: The capacity reservation takes effect as soon as it is created.
- Later: The capacity reservation takes effect at the specified time.', example='Now'),
      status?: string(name='Status', description='The state of the capacity reservation. Valid values:

*   Pending: The capacity reservation is being initialized.
*   Preparing: The capacity reservation is being prepared.
*   Prepared: The capacity reservation is to take effect.
*   Active: The capacity reservation is in effect.
*   Released: The capacity reservation has been released manually or automatically when it expired.', example='Active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the capacity reservation.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the capacity reservation.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the capacity reservation.'),
      timeSlot?: string(name='TimeSlot', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='null'),
    }
  ](name='CapacityReservationItem')
  }(name='CapacityReservationSet', description='Details about the capacity reservations.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCapacityReservationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapacityReservationsResponseBody(name='body'),
}

async function describeCapacityReservations(request: DescribeCapacityReservationsRequest): DescribeCapacityReservationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCapacityReservations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClassicLinkInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can specify up to 100 instance IDs in a single request. Separate the instance IDs with commas (,).', example='i-bp1a5zr3u7nq9cxh****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC. The ClassicLink feature must be enabled for the specified VPC. For more information, see [Establish a ClassicLink connection](~~65413~~).', example='vpc-bp1vwnn14rqpyiczj****', position='Query'),
}

model DescribeClassicLinkInstancesResponseBody = {
  links?: {
    link?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-test'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-test'),
    }
  ](name='Link')
  }(name='Links', description='The details about the ClassicLink connections between the instances located in the classic network and the VPCs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of ClassicLink connections.', example='2'),
}

model DescribeClassicLinkInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClassicLinkInstancesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   This operation applies only to instances that reside in the classic network.
  * *   You can query up to 100 instances that reside in the classic network at a time.
  * *   At least one of the `VpcId` and `InstanceId` parameters must be specified.
  *
 */
async function describeClassicLinkInstances(request: DescribeClassicLinkInstancesRequest): DescribeClassicLinkInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClassicLinkInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudAssistantStatusRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances.', example='i-bp1iudwa5b1tqa****', position='Query'),
  OSType?: string(name='OSType', description='The operating system of the instance. Valid values:

*   Windows
*   Linux', example='Windows', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. This parameter does not take effect if you specified the **InstanceId** parameter. Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCloudAssistantStatusResponseBody = {
  instanceCloudAssistantStatusSet?: {
    instanceCloudAssistantStatus?: [ 
    {
      activeTaskCount?: long(name='ActiveTaskCount', description='The number of tasks that Cloud Assistant was running on the instance.', example='0'),
      cloudAssistantStatus?: string(name='CloudAssistantStatus', description='Indicates whether Cloud Assistant is running on the instance. Valid values:

*   true: Heartbeats are detected within 1 minute.
*   false: No heartbeats are detected within 1 minute.', example='true'),
      cloudAssistantVersion?: string(name='CloudAssistantVersion', description='The version number of the Cloud Assistant client. This parameter is empty if the Cloud Assistant client is not installed or is not running.', example='2.2.0.106'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1iudwa5b1tqa****'),
      invocationCount?: long(name='InvocationCount', description='The number of tasks that Cloud Assistant completed on the instance.', example='2'),
      lastHeartbeatTime?: string(name='LastHeartbeatTime', description='The most recent heartbeat time of Cloud Assistant. The value is updated once every minute.', example='2021-03-15T09:00:00Z'),
      lastInvokedTime?: string(name='LastInvokedTime', description='The time when commands were last run.', example='2021-03-15T08:00:00Z'),
      OSType?: string(name='OSType', description='The operating system of the instance. Valid values:

*   Windows
*   Linux', example='Linux'),
      supportSessionManager?: boolean(name='SupportSessionManager', description='Indicates whether Cloud Assistant supports Session Manager on the instance. If Cloud Assistant does not support Session Manager on the instance, an early Cloud Assistant version may be installed on the instance or Session Manager may not be supported in the specified region.', example='true'),
    }
  ](name='InstanceCloudAssistantStatus')
  }(name='InstanceCloudAssistantStatusSet', description='The information about Cloud Assistant on the instances.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The total number of instances.', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudAssistantStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeClustersResponseBody = {
  clusters?: {
    cluster?: [ 
    {
      clusterId?: string(name='ClusterId'),
    }
  ](name='Cluster')
  }(name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommandsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandId?: string(name='CommandId', description='The ID of the command.', example='c-hz01272yr52****', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the `CommandContent` and `Output` response parameters. Valid values:

*   PlainText: returns the original command content and command output.
*   Base64: returns the Base64-encoded command content and command output

Default value: Base64.', example='PlainText', position='Query'),
  description?: string(name='Description', description='> This parameter is deprecated and does not take effect.', example='testDescription', position='Query'),
  latest?: boolean(name='Latest', description='Specifies whether to query only the latest version of common commands if common commands are queried. This parameter does not affect the query for private commands. Valid values:

*   true: queries only the latest version of common commands.
*   false: queries all versions of common commands.

Default value: false.', example='true', position='Query'),
  name?: string(name='Name', description='The name of the command. Partial command names are not supported.', example='testName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  provider?: string(name='Provider', description='The provider of the common command. Take note of the following items:

*   If you do not specify this parameter, all the commands that you created are queried.

*   If you set this parameter to `AlibabaCloud`, all the common commands provided by Alibaba Cloud are queried.

*   If you set this parameter to a specific provider, all the common commands provided by the provider are queried, such as the following ones:

    *   If you set `Provider` to AlibabaCloud.ECS.GuestOS, all the common commands provided by `AlibabaCloud.ECS.GuestOS` are queried.
    *   If you set `Provider` to AlibabaCloud.ECS.GuestOSDiagnose, all the common commands provided by `AlibabaCloud.ECS.GuestOSDiagnose` are queried.', example='AlibabaCloud', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='he key of tag N of the command. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the command.', position='Query'),
  type?: string(name='Type', description='The command type. Valid values:

*   RunBatScript: batch command, applicable to Windows instances
*   RunPowerShellScript: PowerShell command, applicable to Windows instances
*   RunShellScript: shell command, applicable to Linux instances', example='RunShellScript', position='Query'),
}

model DescribeCommandsResponseBody = {
  commands?: {
    command?: [ 
    {
      category?: string(name='Category', description='The category of the common command.', example='“”'),
      commandContent?: string(name='CommandContent', description='The Base64-encoded command content.', example='Y2QgL3Jvb3Q='),
      commandId?: string(name='CommandId', description='The ID of the command.', example='c-hz01272yr52****'),
      creationTime?: string(name='CreationTime', description='The time when the command was created.', example='2020-11-17T06:52Z'),
      description?: string(name='Description', description='The description of the command.', example='testDescription'),
      enableParameter?: boolean(name='EnableParameter', description='Indicates whether the custom parameter feature was enabled for the command.', example='true'),
      invokeTimes?: int32(name='InvokeTimes', description='The number of tasks created by using the command.', example='2'),
      latest?: boolean(name='Latest', description='Indicates whether the common command is of the latest version. If multiple common commands from the same provider (`Provider`) belong to the same category and have the same name, these commands are of different versions of the same command. This parameter is not returned for the Cloud Assistant commands that you created.', example='true'),
      name?: string(name='Name', description='The name of the command.', example='testName'),
      parameterDefinitions?: {
        parameterDefinition?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value of the custom parameter.', example='https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.rpm'),
          description?: string(name='Description', description='The description of the custom parameter.', example='Download path of the Cloud Assistant client installation package'),
          parameterName?: string(name='ParameterName', description='The name of the custom parameter.', example='DownloadUrl'),
          possibleValues?: {
            possibleValue?: [ string ](name='PossibleValue')
          }(name='PossibleValues', description='The valid values of the custom enumeration parameter.'),
          required?: boolean(name='Required', description='Indicates whether the custom parameter is required. Valid values:

*   true
*   false

Default value: false.', example='true'),
        }
      ](name='ParameterDefinition')
      }(name='ParameterDefinitions', description='Details about the custom parameters.'),
      parameterNames?: {
        parameterName?: [ string ](name='ParameterName')
      }(name='ParameterNames', description='The custom parameter names that are parsed from the command content specified when the command was being created. If the custom parameter feature is not enabled, an empty list is returned.'),
      provider?: string(name='Provider', description='The provider of the common command.', example='AlibabaCloud.ECS.GuestOS'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the command.', example='owner'),
          tagValue?: string(name='TagValue', description='The tag value of the command.', example='zhangsan'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags added to the command.'),
      timeout?: long(name='Timeout', description='The timeout period.', example='3600'),
      type?: string(name='Type', description='The type of the command.', example='RunShellScript'),
      version?: int32(name='Version', description='The version of the common command. If multiple common commands from the same provider (`Provider`) belong to the same category and have the same name, these commands are of different versions of the same command. This parameter is not returned for the Cloud Assistant commands that you created.', example='1'),
      workingDir?: string(name='WorkingDir', description='The working directory of the command on the Elastic Compute Service (ECS) instance.', example='/home/'),
    }
  ](name='Command')
  }(name='Commands', description='Details about the commands.'),
  pageNumber?: long(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', description='The total number of the commands.', example='5'),
}

model DescribeCommandsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCommandsResponseBody(name='body'),
}

/**
  * If you specify only the `Action` and `RegionId` parameters to call this operation, all the available commands (`CommandId`) that you created in the specified region are queried by default.
  *
 */
async function describeCommands(request: DescribeCommandsRequest): DescribeCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommands', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostAutoRenewRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='The IDs of the dedicated hosts. You can specify up to 100 subscription dedicated host IDs. Separate multiple IDs with commas (,).', example='dh-bp165p6xk2tlw61e****,dh-bp1f9vxmno****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostAutoRenewResponseBody = {
  dedicatedHostRenewAttributes?: {
    dedicatedHostRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Indicates whether the subscription dedicated host is automatically renewed. Valid values:

*   true: The dedicated host is automatically renewed.
*   false: The dedicated host is not automatically renewed.', example='false'),
      autoRenewWithEcs?: string(name='AutoRenewWithEcs', description='Indicates whether the subscription dedicated host is automatically renewed along with the subscription Elastic Compute Service (ECS) instances hosted on it if the new expiration time of the renewed instances is later than the expiration time of the dedicated host. Valid values:

*   AutoRenewWithEcs: The subscription dedicated host is automatically renewed along with the subscription ECS instances hosted on it.
*   StopRenewWithEcs: The subscription dedicated host is not automatically renewed along with the subscription ECS instances hosted on it.', example='StopRenewWithEcs'),
      dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
      duration?: int32(name='Duration', description='The auto-renewal period.', example='0'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the auto-renewal period. Valid values:

*   Week
*   Month', example='Month'),
      renewalStatus?: string(name='RenewalStatus', description='Indicates whether the subscription dedicated host is automatically renewed. Valid values:

*   AutoRenewal: The dedicated host is automatically renewed.
*   Normal: The dedicated host is not automatically renewed, and you will receive notifications for renewal.
*   NotRenewal: The dedicated host is not renewed, and no expiration notification is sent. Notifications for renewal are automatically sent three days before the dedicated host expires. You can change the value of this parameter from NotRenewal to Normal for the dedicated host and manually renew it by calling the [RenewDedicatedHosts](~~93287~~) operation. Alternatively, you can set this parameter to AutoRenewal to configure the dedicated host to be automatically renewed.', example='Normal'),
    }
  ](name='DedicatedHostRenewAttribute')
  }(name='DedicatedHostRenewAttributes', description='Details about the auto-renewal attributes of the dedicated hosts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeDedicatedHostAutoRenewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAutoRenewResponseBody(name='body'),
}

async function describeDedicatedHostAutoRenew(request: DescribeDedicatedHostAutoRenewRequest): DescribeDedicatedHostAutoRenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostAutoRenew', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostClustersRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostClusterIds?: string(name='DedicatedHostClusterIds', description='The IDs of dedicated host clusters. The value can be a JSON array that consists of up to 100 dedicated host cluster IDs in the format of `["dc-xxxxxxxxx", "dc-yyyyyyyyy", ... "dc-zzzzzzzzz"]`. Separate the IDs with commas (,).', example='["dc-bp12wlf6am0vz9v2****", "dc-bp12wlf6am0vz9v3****"]', position='Query'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster.', example='myDDHCluster', position='Query'),
  lockReason?: string(name='LockReason', description='>  This parameter is unavailable for use.', example='null', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='5', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host cluster belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.  

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='>  This parameter is unavailable for use.', example='null', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag value cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of the tags.', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-f', position='Query'),
}

model DescribeDedicatedHostClustersResponseBody = {
  dedicatedHostClusters?: {
    dedicatedHostCluster?: [ 
    {
      dedicatedHostClusterCapacity?: {
        availableInstanceTypes?: {
          availableInstanceType?: [ 
          {
            availableInstanceCapacity?: int32(name='AvailableInstanceCapacity', description='The available capacity of the ECS instance type.', example='0'),
            instanceType?: string(name='InstanceType', description='The ECS instance type.', example='ecs.c6.26xlarge'),
          }
        ](name='AvailableInstanceType')
        }(name='AvailableInstanceTypes', description='The available capacity of the Elastic Compute Service (ECS) instance types in the dedicated host cluster.'),
        availableMemory?: int32(name='AvailableMemory', description='The size of available memory. Unit: GiB.', example='4'),
        availableVcpus?: int32(name='AvailableVcpus', description='The number of available vCPUs.', example='2'),
        localStorageCapacities?: {
          localStorageCapacity?: [ 
          {
            availableDisk?: int32(name='AvailableDisk', description='The available capacity of the local disk. Unit: GiB.', example='20'),
            dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk. Valid values:

- cloud: basic disk
- cloud_efficiency: ultra disk
- cloud_ssd: standard SSD
- ephemeral_ssd: local SSD
- cloud_essd: enhanced SSD (ESSD)', example='cloud'),
            totalDisk?: int32(name='TotalDisk', description='The total capacity of the local disk. Unit: GiB.', example='40'),
          }
        ](name='LocalStorageCapacity')
        }(name='LocalStorageCapacities', description='The local storage capacity.'),
        totalMemory?: int32(name='TotalMemory', description='The total memory size. Unit: GiB.', example='8'),
        totalVcpus?: int32(name='TotalVcpus', description='The total number of vCPUs.', example='4'),
      }(name='DedicatedHostClusterCapacity', description='The capacity of the dedicated host cluster.'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****'),
      dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster.', example='myDDHCluster'),
      dedicatedHostIds?: {
        dedicatedHostId?: [ string ](name='DedicatedHostId')
      }(name='DedicatedHostIds', description='The IDs of dedicated hosts in the dedicated host cluster.'),
      description?: string(name='Description', description='The description of the dedicated host cluster.', example='This-is-my-DDHCluster'),
      regionId?: string(name='RegionId', description='The region ID of the dedicated host cluster.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host cluster belongs.', example='rg-bp67acfmxazb4p****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the dedicated host cluster.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the dedicated host cluster.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the dedicated host cluster.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host cluster.', example='cn-hangzhou-f'),
    }
  ](name='DedicatedHostCluster')
  }(name='DedicatedHostClusters', description='Details about the dedicated host clusters.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='214A2187-B06F-4E49-A081-4D053466A8C7'),
  totalCount?: int32(name='TotalCount', description='The total number of dedicated host clusters.', example='2'),
}

model DescribeDedicatedHostClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostClustersResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if `DedicatedHostClusterIds` is set to an empty JSON array (`[]`), it is regarded as a valid filter condition and an empty result is returned.
  *
 */
async function describeDedicatedHostClusters(request: DescribeDedicatedHostClustersRequest): DescribeDedicatedHostClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostTypesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The dedicated host type. For more information, see [Dedicated host types](~~68564~~).', example='ddh.sn1ne', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  supportedInstanceTypeFamily?: string(name='SupportedInstanceTypeFamily', description='The ECS instance family supported by the dedicated host type.', example='ecs.sn1ne', position='Query'),
}

model DescribeDedicatedHostTypesResponseBody = {
  dedicatedHostTypes?: {
    dedicatedHostType?: [ 
    {
      cores?: int32(name='Cores', description='The number of cores in a single physical CPU.', example='2'),
      cpuOverCommitRatioRange?: string(name='CpuOverCommitRatioRange', description='The supported CPU overcommit ratio range.', example='1-5'),
      dedicatedHostType?: string(name='DedicatedHostType', description='The type of the dedicated host. You can submit a ticket to request more dedicated host types.', example='ddh.sn1ne'),
      GPUSpec?: string(name='GPUSpec', description='The GPU model.', example='gpu'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of local disks on a dedicated host.', example='0'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The capacity of a local disk. Unit: GiB.', example='0'),
      localStorageCategory?: string(name='LocalStorageCategory', description='The category of the local disks.', example='local'),
      memorySize?: float(name='MemorySize', description='The size of the memory. Unit: GiB.', example='112.0'),
      physicalGpus?: int32(name='PhysicalGpus', description='The number of physical GPUs.', example='2'),
      sockets?: int32(name='Sockets', description='The number of physical CPUs.', example='2'),
      supportCpuOverCommitRatio?: boolean(name='SupportCpuOverCommitRatio', description='Indicates whether the CPU overcommit ratio setting is supported.', example='true'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies', description='The ECS instance families supported by the dedicated host.'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList', description='The ECS instance types supported by the dedicated host.'),
      totalVcpus?: int32(name='TotalVcpus', description='The total number of vCPUs.', example='56'),
      totalVgpus?: int32(name='TotalVgpus', description='The total number of vGPUs.', example='10'),
    }
  ](name='DedicatedHostType')
  }(name='DedicatedHostTypes', description='The information about the dedicated host type.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5FE5FF06-3A33-4658-8495-6445FC54E327'),
}

model DescribeDedicatedHostTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostTypesResponseBody(name='body'),
}

async function describeDedicatedHostTypes(request: DescribeDedicatedHostTypesRequest): DescribeDedicatedHostTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****', position='Query'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The IDs of dedicated hosts. You can specify up to 100 dedicated host IDs in a single request. Separate the IDs with commas (,).', example='["dh-bp165p6xk2tlw61e****", "dh-bp1f9vxmno7emy96****"]', position='Query'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='MyDDHTestName', position='Query'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The type of the dedicated host. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to obtain the most recent list of dedicated host types.', example='ddh.g5', position='Query'),
  lockReason?: string(name='LockReason', description='The reason why the dedicated host is locked. Valid values:

*   financial: The dedicated host is locked due to overdue payments.
*   security: The dedicated host is locked due to security reasons.', example='financial', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host belongs. When this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.  

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-aek3b6jzp66****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  socketDetails?: string(name='SocketDetails', position='Query'),
  status?: string(name='Status', description='The service state of the dedicated host. Valid values:

*   Available: The dedicated host is running normally.
*   UnderAssessment: The dedicated host is at risk, which may cause issues to ECS instances on the dedicated host.
*   PermanentFailure: The dedicated host has permanent failures and is unusable.
*   TempUnavailable: The dedicated host is temporarily unusable.
*   Redeploying: The dedicated host is being restored.

Default value: Available.', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the dedicated host. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the dedicated host. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='标签列表。', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g', position='Query'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHosts?: {
    dedicatedHost?: [ 
    {
      actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy used to migrate the instances deployed on the dedicated host when the dedicated host fails. Valid values:

*   Migrate: The instances are migrated to another physical server. Instances that are not in the Stopped state when the dedicated host fails are restarted after migration.
*   Stop: The instances are stopped. If the dedicated host cannot be repaired, the instances are migrated to another physical server and restarted.

If the dedicated host has cloud disks attached, the default value is Migrate. If the dedicated host has local disks attached, the default value is Stop.', example='Migrate'),
      autoPlacement?: string(name='AutoPlacement', description='Indicates whether the dedicated host was added to the resource pool for automatic deployment. Valid values:

*   on: The dedicated host was added to the resource pool for automatic deployment.
*   off: The dedicated host was not added to the resource pool for automatic deployment.

For more information about automatic deployment, see the "[Automatic deployment](~~118938~~)" section in the Functions and features topic.', example='on'),
      autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the dedicated host. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2017-01-01T12:00Z'),
      capacity?: {
        availableLocalStorage?: int32(name='AvailableLocalStorage', description='The amount of available space on the local disks. Unit: GiB.', example='65'),
        availableMemory?: float(name='AvailableMemory', description='The amount of available memory space. Unit: GiB.', example='25'),
        availableVcpus?: int32(name='AvailableVcpus', description='The number of available vCPUs.', example='5'),
        availableVgpus?: int32(name='AvailableVgpus', description='The number of available vGPUs.', example='2'),
        localStorageCategory?: string(name='LocalStorageCategory', description='The category of the local disks.', example='i2'),
        socketCapacities?: {
          socketCapacity?: [ 
          {
            availableMemory?: float(name='AvailableMemory'),
            availableVcpu?: int32(name='AvailableVcpu'),
            socketId?: int32(name='SocketId'),
            totalMemory?: float(name='TotalMemory'),
            totalVcpu?: int32(name='TotalVcpu'),
          }
        ](name='SocketCapacity')
        }(name='SocketCapacities'),
        totalLocalStorage?: int32(name='TotalLocalStorage', description='The total capacity of the local disks. Unit: GiB.', example='512'),
        totalMemory?: float(name='TotalMemory', description='The total capacity of the memory. Unit: GiB.', example='1024'),
        totalVcpus?: int32(name='TotalVcpus', description='The total number of vCPUs.', example='56'),
        totalVgpus?: int32(name='TotalVgpus', description='The total number of vGPUs.', example='10'),
      }(name='Capacity', description='The performance specifications of the dedicated host.'),
      chargeType?: string(name='ChargeType', description='The billing method of the dedicated host.', example='Prepaid'),
      cores?: int32(name='Cores', description='The number of cores in a single CPU.', example='3'),
      cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio.', example='1'),
      creationTime?: string(name='CreationTime', description='The time when the dedicated host was created. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2018-01-01T12:00Z'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which the dedicated host belongs.', example='dc-bp12wlf6am0vz9v2****'),
      dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
      dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='MyDDHTestName'),
      dedicatedHostOwnerId?: long(name='DedicatedHostOwnerId'),
      dedicatedHostType?: string(name='DedicatedHostType', description='The type of the dedicated host.', example='ddh.g5'),
      description?: string(name='Description', description='The description of the dedicated host.', example='this-is-my-DDH'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time of the subscription dedicated host. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2019-01-01T12:00Z'),
      GPUSpec?: string(name='GPUSpec', description='The GPU model.', example='gpu'),
      hostDetailInfo?: {
        serialNumber?: string(name='SerialNumber', description='This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='null'),
      }(name='HostDetailInfo', description='This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.'),
      instances?: {
        instance?: [ 
        {
          instanceId?: string(name='InstanceId', description='The ID of the ECS instance created on the dedicated host.', example='i-bp14ot0ykf8w13a1****'),
          instanceOwnerId?: long(name='InstanceOwnerId'),
          instanceType?: string(name='InstanceType', description='The instance type of the ECS instance created on the dedicated host.', example='ecs.g5.large'),
          socketId?: string(name='SocketId'),
        }
      ](name='Instance')
      }(name='Instances', description='Details about the ECS instances that were created on the dedicated host.'),
      machineId?: string(name='MachineId', description='The machine code of the dedicated host.', example='12aaa123456ff19dec12345d3026e****'),
      networkAttributes?: {
        slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period of the UDP session that was established between Server Load Balancer (SLB) and the dedicated host. Unit: seconds. Valid value: 60.', example='60'),
        udpTimeout?: int32(name='UdpTimeout', description='The timeout period of the UDP session that was established between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid value: 60.', example='60'),
      }(name='NetworkAttributes', description='The network attributes of the dedicated host.'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the dedicated host was locked. Valid values:

- financial: The dedicated host was locked due to overdue payments.
- security: The dedicated host was locked due to security reasons.', example='financial'),
        }
      ](name='OperationLock')
      }(name='OperationLocks', description='The reasons why the resources of the dedicated host were locked.'),
      physicalGpus?: int32(name='PhysicalGpus', description='The number of physical GPUs.', example='10'),
      regionId?: string(name='RegionId', description='The region ID of the dedicated host.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host belongs.', example='rg-aek3b6jzp66****'),
      saleCycle?: string(name='SaleCycle', description='The unit of the subscription period. Valid values:

*   Month
*   Year', example='Month'),
      schedulerOptions_managedPrivateSpaceId?: string(name='SchedulerOptions.ManagedPrivateSpaceId'),
      sockets?: int32(name='Sockets', description='The number of physical CPUs.', example='5'),
      status?: string(name='Status', description='The service state of the dedicated host. Valid values:

*   Available: The dedicated host is running normally.
*   UnderAssessment: The dedicated host is at risk, which may cause issues to ECS instances on the dedicated host.
*   PermanentFailure: The dedicated host has permanent failures and is unusable.', example='Available'),
      supportedCustomInstanceTypeFamilies?: {
        supportedCustomInstanceTypeFamily?: [ string ](name='SupportedCustomInstanceTypeFamily')
      }(name='SupportedCustomInstanceTypeFamilies', description='The custom ECS instance families supported by the dedicated host.'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies', description='The ECS instance families supported by the dedicated host.'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList', description='The ECS instance types supported by the dedicated host.'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the dedicated host.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the dedicated host.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the dedicated host.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host.', example='cn-hangzhou-g'),
    }
  ](name='DedicatedHost')
  }(name='DedicatedHosts', description='Details about the dedicated hosts.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7654525A-9964-4ABB-8BCD-98F8835E809A'),
  totalCount?: int32(name='TotalCount', description='The total number of dedicated hosts.', example='3'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

/**
  * ## Description
  * You can use one of the following methods to query the details of one or more dedicated hosts:
  * *   Specify the `DedicatedHostIds` parameter to query the details of specified dedicated hosts.
  * *   Specify the `DedicatedHostClusterId` parameter to query the details of the dedicated hosts in a dedicated host cluster.
  *
 */
async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDemandsRequest {
  demandId?: string(name='DemandId', position='Query'),
  demandStatus?: [ string ](name='DemandStatus', position='Query'),
  demandType?: string(name='DemandType', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeDemandsResponseBody = {
  demands?: {
    demand?: [ 
    {
      availableAmount?: int32(name='AvailableAmount'),
      comment?: string(name='Comment'),
      deliveringAmount?: int32(name='DeliveringAmount'),
      demandDescription?: string(name='DemandDescription'),
      demandId?: string(name='DemandId'),
      demandName?: string(name='DemandName'),
      demandStatus?: string(name='DemandStatus'),
      demandTime?: string(name='DemandTime'),
      endTime?: string(name='EndTime'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceType?: string(name='InstanceType'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      period?: int32(name='Period'),
      periodUnit?: string(name='PeriodUnit'),
      startTime?: string(name='StartTime'),
      supplyInfos?: {
        supplyInfo?: [ 
        {
          amount?: int32(name='Amount'),
          supplyEndTime?: string(name='SupplyEndTime'),
          supplyStartTime?: string(name='SupplyStartTime'),
          supplyStatus?: string(name='SupplyStatus'),
        }
      ](name='SupplyInfo')
      }(name='SupplyInfos'),
      totalAmount?: int32(name='TotalAmount'),
      usedAmount?: int32(name='UsedAmount'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Demand')
  }(name='Demands'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDemandsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDemandsResponseBody(name='body'),
}

async function describeDemands(request: DescribeDemandsRequest): DescribeDemandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDemands', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody = {
  instanceTypeFamilies?: string(name='InstanceTypeFamilies', description='The instance families that support deployment sets.', example='ecs.i2g,ecs.i1,ecs.i2ne,ecs.i2gne'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B7DB-A3DC7DE1C52E'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody(name='body'),
}

/**
  * For more information about instance families, see [Instance families](~~25378~~).
  *
 */
async function describeDeploymentSetSupportedInstanceTypeFamily(request: DescribeDeploymentSetSupportedInstanceTypeFamilyRequest): DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeploymentSetSupportedInstanceTypeFamily', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeploymentSetsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  deploymentSetIds?: string(name='DeploymentSetIds', description='The IDs of deployment sets. The value can be a JSON array that consists of up to 100 deployment set IDs in the format of `["ds-xxxxxxxxx", "ds-yyyyyyyyy", … "ds-zzzzzzzzz"]`. Separate multiple deployment set IDs with commas (,).', example='["ds-bp67acfmxazb4ph****", "ds-bp67acfmxazb4pi****", … "ds-bp67acfmxazb4pj****"]', position='Query'),
  deploymentSetName?: string(name='DeploymentSetName', description='The name of the deployment set. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDeploymentSetName', position='Query'),
  domain?: string(name='Domain', description='> The parameter is deprecated.', example='null', position='Query'),
  granularity?: string(name='Granularity', description='> The parameter is deprecated.', example='null', position='Query'),
  networkType?: string(name='NetworkType', description='> The parameter is deprecated.', example='null', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  strategy?: string(name='Strategy', description='The deployment strategy. Valid values:

*   Availability: high availability strategy.
*   AvailabilityGroup: high availability group strategy.', example='Availability', position='Query'),
}

model DescribeDeploymentSetsResponseBody = {
  deploymentSets?: {
    deploymentSet?: [ 
    {
      capacities?: {
        capacity?: [ 
        {
          availableAmount?: int32(name='AvailableAmount', description='The number of ECS instances that can be added to the deployment set within the zone.', example='18'),
          usedAmount?: int32(name='UsedAmount', description='The number of ECS instances that belong to the zone in the deployment set.', example='2'),
          zoneId?: string(name='ZoneId', description='The ID of the zone. Only the zone IDs of existing ECS instances in the deployment set are returned.', example='cn-hangzhou-i'),
        }
      ](name='Capacity')
      }(name='Capacities', description='Details of the capacities of the deployment set. This parameter is valid only when the deployment set contains Elastic Compute Service (ECS) instances. The value contains the capacities of the deployment set in different zones.'),
      creationTime?: string(name='CreationTime', description='The time when the deployment set was created.', example='2021-12-07T06:01:46Z'),
      deploymentSetDescription?: string(name='DeploymentSetDescription', description='The description of the deployment set.', example='testDeploymentSetDescription'),
      deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp67acfmxazb4ph****'),
      deploymentSetName?: string(name='DeploymentSetName', description='The name of the deployment set.', example='testDeploymentSetName'),
      deploymentStrategy?: string(name='DeploymentStrategy', description='The deployment strategy. The value of this response parameter is that of the `Strategy` request parameter.', example='Availability'),
      domain?: string(name='Domain', description='The deployment domain.', example='default'),
      granularity?: string(name='Granularity', description='The deployment granularity.', example='host'),
      groupCount?: int32(name='GroupCount', description='The number of deployment set groups in the deployment set.

>  This parameter is valid only when the Strategy request parameter is set to AvailabilityGroup.', example='3'),
      instanceAmount?: int32(name='InstanceAmount', description='The number of instances in the deployment set.', example='3'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds', description='The IDs of the instances in the deployment set.'),
      strategy?: string(name='Strategy', description='The deployment strategy.', example='LooseDispersion'),
    }
  ](name='DeploymentSet')
  }(name='DeploymentSets', description='Details about the deployment sets.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the deployment set.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of deployment sets returned.', example='1'),
}

model DescribeDeploymentSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeploymentSetsResponseBody(name='body'),
}

async function describeDeploymentSets(request: DescribeDeploymentSetsRequest): DescribeDeploymentSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeploymentSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosticMetricSetsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10', minimum=1, maximum=100, position='Query'),
  metricSetIds?: [ string ](name='MetricSetIds', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticMetricSets operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic metric set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric set.', example='instance', position='Query'),
  type?: string(name='Type', description='The type of the diagnostic metric set. Valid values:

*   User: user-defined diagnostic metric set
*   Common: common diagnostic metric set

Default value: user.', example='User', position='Query'),
}

model DescribeDiagnosticMetricSetsResponseBody = {
  metricSets?: [ 
    {
      description?: string(name='Description', description='The description of the diagnostic metric set.'),
      metricIds?: [ string ](name='MetricIds', description='The IDs of the diagnostic metrics.'),
      metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
      metricSetName?: string(name='MetricSetName', description='The name of the diagnostic metric set.'),
      resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric set.', example='instance'),
      type?: string(name='Type', description='The type of the diagnostic metric set. Valid values:

*   User: user-defined diagnostic metric set
*   Common: common diagnostic metric set', example='User'),
    }
  ](name='MetricSets'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticMetricSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticMetricSetsResponseBody(name='body'),
}

async function describeDiagnosticMetricSets(request: DescribeDiagnosticMetricSetsRequest): DescribeDiagnosticMetricSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosticMetricSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosticMetricsRequest {
  body?: string(name='body', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10', minimum=1, maximum=100, position='Query'),
  metricIds?: [ string ](name='MetricIds', description='The IDs of diagnostic metrics.', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticMetrics operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic metric. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric.', example='instance', position='Query'),
}

model DescribeDiagnosticMetricsResponseBody = {
  metrics?: [ 
    {
      description?: string(name='Description', description='The description of the diagnostic metric.', example='CPU diagnostic'),
      guestMetric?: boolean(name='GuestMetric', description='Indicates whether the diagnostic metric needs to be assessed by running a Cloud Assistant command in a guest operating system.', example='true'),
      metricCategory?: string(name='MetricCategory', description='The category of the diagnostic metric.', example='CPU'),
      metricId?: string(name='MetricId', description='The ID of the diagnostic metric.', example='GuestOS.WinFirewall'),
      metricName?: string(name='MetricName', description='The name of the diagnostic metric.', example='CPU diagnostic'),
      resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric.', example='instance'),
      supportedOperatingSystem?: string(name='SupportedOperatingSystem', description='The operating system type supported by the diagnostic metric. Valid values:

*   Windows
*   Linux
*   All: both Windows and Linux', example='ALL'),
    }
  ](name='Metrics', description='The list of diagnostic metrics.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticMetricsResponseBody(name='body'),
}

async function describeDiagnosticMetrics(request: DescribeDiagnosticMetricsRequest): DescribeDiagnosticMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosticMetrics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosticReportAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  reportId: string(name='ReportId', description='The ID of the diagnostic report.', example='dr-i-uf6i0tv2refv8wz*****', position='Query'),
}

model DescribeDiagnosticReportAttributesResponseBody = {
  attributes?: string(name='Attributes', description='The extended attributes of the diagnostic report.', example='{
    "OfflineDiagReportStatus":"CONFIRMED"
}'),
  creationTime?: string(name='CreationTime', description='The time when the diagnostic report was created.', example='2022-07-11T12:00:00Z'),
  endTime?: string(name='EndTime', description='The end of the reporting period of the diagnostic report. The value is the EndTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T14:00:00Z'),
  finishedTime?: string(name='FinishedTime', description='The time when the diagnostic report was complete.', example='2022-07-11T14:00:00Z'),
  metricResults?: {
    metricResult?: [ 
    {
      issues?: {
        issue?: [ 
        {
          additional?: string(name='Additional', description='The additional data about the diagnosed issue. The value is a JSON string.', example='{
  "TotalPercent": 95,
  "TopUtilizationProcesses": [
    {
      "Pid": "1223",
      "CommandName": "/usr/bin/mem.py",
      "PhysicalMemoryPercent": 50
    }
  ]
}'),
          issueId?: string(name='IssueId', description='The ID of the diagnosed issue, which is the unique identifier of the issue.', example='GuestOS.CPU.HighUtiliz*****'),
          occurrenceTime?: string(name='OccurrenceTime', description='The time when the diagnosed issue occurred.', example='2022-07-11T14:00:00Z'),
          severity?: string(name='Severity', description='The severity level of the diagnosed issue. Valid values:

*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Info'),
        }
      ](name='Issue')
      }(name='Issues', description='Details about the diagnosed issues.'),
      metricCategory?: string(name='MetricCategory', description='The category of the diagnostic metric.', example='CPU'),
      metricId?: string(name='MetricId', description='The ID of the diagnostic metric.', example='GuestOS.WinFirewall'),
      severity?: string(name='Severity', description='The severity level of the diagnostic metric. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   NotSupport: The version of the guest operating system does support diagnosing the metric.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
      status?: string(name='Status', description='The state of the diagnostic metric. Valid values:

*   InProgress: The diagnostic is in progress.
*   Finished: The diagnostic is complete.
*   Failed: The diagnostic failed.', example='Finished'),
    }
  ](name='MetricResult')
  }(name='MetricResults', description='The results of all diagnostic metrics in the diagnostic metric set.'),
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
  reportId?: string(name='ReportId', description='The ID of the diagnostic report, which is the unique identifier of the report.', example='dr-uf6i0tv2refv8wz*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-uf6i0tv2refv8wz*****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. The ResourceType parameter can only be set to instance, which indicates that only instances are supported.', example='instance'),
  severity?: string(name='Severity', description='The severity level of the diagnostic report. The value of this parameter is determined by the highest severity level of all diagnostic metrics. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
  startTime?: string(name='StartTime', description='The beginning of the reporting period of the diagnostic report. The value is the StartTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T12:00:00Z'),
  status?: string(name='Status', description='The state of the diagnostic report. Valid values:

*   InProgress: The diagnostic is in progress.
*   Finished: The diagnostic is complete.
*   Failed: The diagnostic failed.', example='Finished'),
}

model DescribeDiagnosticReportAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportAttributesResponseBody(name='body'),
}

async function describeDiagnosticReportAttributes(request: DescribeDiagnosticReportAttributesRequest): DescribeDiagnosticReportAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosticReportAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiagnosticReportsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticReports operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  reportIds?: [ string ](name='ReportIds', description='The IDs of diagnostic reports. You can specify up to 100 report IDs.', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', description='The IDs of resources. You can specify up to 100 resource IDs.', position='Query'),
  severity?: string(name='Severity', description='The severity level of the diagnostic report. Valid values:

* Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
* Normal: No exceptions are detected.
* Info: Diagnostic information is recorded and may be related to exceptions.
* Warn: Diagnostic information is recorded and may indicate exceptions.
* Critical: Critical exceptions are detected.', example='Normal', position='Query'),
  status?: string(name='Status', description='The state of the diagnostic report. Valid values:

*   InProgress: The diagnostic is in progress.
*   Failed: The diagnostic failed.
*   Finished: The diagnostic is complete.', example='Finished', position='Query'),
}

model DescribeDiagnosticReportsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  reports?: {
    report?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the diagnostic report was created.', example='2022-07-11T12:00:00Z'),
      endTime?: string(name='EndTime', description='The end of the reporting period of the diagnostic report. The value is the EndTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T14:00:00Z'),
      finishedTime?: string(name='FinishedTime', description='The time when the diagnostic was complete.', example='2022-07-11T14:00:00Z'),
      issues?: {
        issue?: [ 
        {
          issueId?: string(name='IssueId', description='The unique ID of the diagnosed issue.', example='GuestOS.CPU.HighUtiliz*****'),
          metricCategory?: string(name='MetricCategory', description='The category of the diagnostic metric.', example='ECSService.GuestOS'),
          metricId?: string(name='MetricId', description='The ID of the diagnostic metric.', example='GuestOS.WinFirewall'),
          severity?: string(name='Severity', description='The severity level of the diagnostic metric. Valid values:

*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate exceptions.
*   Critical: Critical exceptions were detected.', example='Info'),
        }
      ](name='Issue')
      }(name='Issues', description='The list of issues.'),
      metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
      reportId?: string(name='ReportId', description='The ID of the diagnostic report.', example='dr-uf6i0tv2refv8wz*****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-uf6i0tv2refv8wz*****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      severity?: string(name='Severity', description='The severity level of the diagnostic report. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
      startTime?: string(name='StartTime', description='The beginning of the reporting period of the diagnostic report. The value is the StartTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T12:00:00Z'),
      status?: string(name='Status', description='The state of the diagnostic report.', example='Finished'),
    }
  ](name='Report')
  }(name='Reports', description='The list of reports.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticReportsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiagnosticReportsResponseBody(name='body'),
}

async function describeDiagnosticReports(request: DescribeDiagnosticReportsRequest): DescribeDiagnosticReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiagnosticReports', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskMonitorDataRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  diskId: string(name='DiskId', description='The ID of the disk.', example='d-bp1bq5g3dxxo1x4o****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range in which you want to query the monitoring data. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2014-07-23T12:09:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The interval at which to retrieve the monitoring data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The start of the time range in which you want to query the monitoring data. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2014-07-23T12:07:00Z', position='Query'),
}

model DescribeDiskMonitorDataResponseBody = {
  monitorData?: {
    diskMonitorData?: [ 
    {
      BPSRead?: int32(name='BPSRead', description='The read bandwidth of the system disk. Unit: byte/s.', example='0'),
      BPSTotal?: int32(name='BPSTotal', description='The total read and write bandwidth of the system disk. Unit: byte/s.', example='204'),
      BPSWrite?: int32(name='BPSWrite', description='The write bandwidth of the system disk. Unit: byte/s.', example='204'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp1bq5g3dxxo1x4o****'),
      IOPSRead?: int32(name='IOPSRead', description='The number of read I/O operations per second on the system disk.', example='0'),
      IOPSTotal?: int32(name='IOPSTotal', description='The total number of read and write I/O operations per second on the system disk.', example='0'),
      IOPSWrite?: int32(name='IOPSWrite', description='The number of write I/O operations per second on the system disk.', example='0'),
      latencyRead?: int32(name='LatencyRead', description='The read latency of the disk. Unit: microseconds.', example='0'),
      latencyWrite?: int32(name='LatencyWrite', description='The write latency of the disk. Unit: microseconds.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the monitoring data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2014-07-23T12:07:00Z'),
    }
  ](name='DiskMonitorData')
  }(name='MonitorData', description='Details about the monitoring data of the disk.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned monitoring data entries.', example='3'),
}

model DescribeDiskMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskMonitorDataResponseBody(name='body'),
}

/**
  * The monitoring data includes read IOPS, write IOPS, read bandwidth (byte/s), write bandwidth (byte/s), read latency (microseconds), and write latency (microseconds) of the disk.
  * When you call this operation, take note of the following items:
  * *   Only the monitoring data of disks that are in the Running (`In_use`) state can be queried. For more information, see [Disk states](~~25689~~).
  *     > Some information may be missing from the monitoring data of a disk because the disk is not in the In Use (`In_Use`) state and the system cannot obtain the relevant information.
  * *   Up to 400 monitoring data entries can be returned at a time. An error is returned if the value calculated based on the following formula is greater than 400: `(EndTime - StartTime)/Period`.
  * *   You can query the monitoring data in the previous 30 days. If the value of `StartTime` is more than 30 days before the current time, an error is returned.
  *
 */
async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDisksRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 used to query resources. Set the value to `CreationStartTime`. You can specify a time by setting both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter 1 used to query resources. Set the value to a time. If you specify this parameter, you must also specify the `Filter.1.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='The values of attributes.', example='IOPS', position='Query'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy that is applied to the cloud disk.', example='sp-m5e2w2jutw8bv31****', position='Query'),
  category?: string(name='Category', description='The category of the disk. Valid values:

* all: all disk categories
* cloud: basic disk
* cloud_efficiency: ultra disk
* cloud_ssd: standard SSD
* cloud_essd: enhanced SSD (ESSD)
* local\\_ssd_pro: I/O-intensive local disk
* local\\_hdd_pro: throughput-intensive local disk
* ephemeral: retired local disk
* ephemeral_ssd: retired local SSD

Default value: all.', example='all', position='Query'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Specifies whether to delete the automatic snapshots of the cloud disk when the disk is released.

*   true: The automatic snapshots of the cloud disk are deleted when the disk is released.
*   false: The automatic snapshots of the cloud disk are not deleted when the disk is released.

Default value: false.', example='false', position='Query'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the cloud disk when its associated instance is released. Valid values:

*   true: The cloud disk is released when its associated instance is released.
*   false: The cloud disk is not released but is retained as a pay-as-you-go data disk when its associated instance is released.

Default value: false.', example='false', position='Query'),
  diskChargeType?: string(name='DiskChargeType', description='The billing method of the disk. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid', position='Query'),
  diskIds?: string(name='DiskIds', description='The IDs of disks. The value is a JSON array that consists of up to 100 disk IDs. Separate the disk IDs with commas (,).', example='["d-bp67acfmxazb4p****", "d-bp67acfmxazb4g****", … "d-bp67acfmxazb4d****"]', position='Query'),
  diskName?: string(name='DiskName', description='The name of the disk.', example='testDiskName', position='Query'),
  diskType?: string(name='DiskType', description='The type of the disk. Valid values:

*   all: system disk and data disk
*   system: system disk
*   data: data disk

Default value: all.', example='all', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether Resource Access Management (RAM) users are granted required permissions, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned, and the request is made.

Default value: false.', example='false', position='Query'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Specifies whether the automatic snapshot policy feature is enabled for the cloud disk.

*   true: The automatic snapshot policy feature is enabled for the cloud disk.
*   false: The automatic snapshot policy feature is not enabled for the cloud disk.

>  By default, the automatic snapshot policy feature is enabled for created cloud disks. You only need to apply an automatic snapshot policy to a cloud disk before you can use the automatic snapshot policy.', example='true', position='Query'),
  enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy', description='Specifies whether an automatic snapshot policy is applied to the cloud disk.

*   true: An automatic snapshot policy is applied to the cloud disk.
*   false: No automatic snapshot policy is applied to the cloud disk.

Default value: false.', example='false', position='Query'),
  enableShared?: boolean(name='EnableShared', description='Specifies whether the disk is a Shared Block Storage device.', example='false', position='Query'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to query only encrypted cloud disks.

*   true: queries only encrypted cloud disks.
*   false: does not query encrypted cloud disks.

Default value: false.', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk is attached.', example='i-bp67acfmxazb4q****', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****', position='Query'),
  lockReason?: string(name='LockReason', description='The reason why the disk is locked. Valid values:

*   financial: The disk is locked due to overdue payments.
*   security: The disk is locked due to security reasons.
*   recycling: The preemptible instance is locked and pending release.
*   dedicatedhostfinancial: The instance is locked due to overdue payments for the dedicated host.', example='recycling', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value:

*   If this parameter is not specified or is set to a value smaller than 10, the default value is 10.
*   If this parameter is set to a value greater than 500, the default value is 500.', example='50', minimum=1, maximum=500, position='Query'),
  multiAttach?: string(name='MultiAttach', description='Specifies whether the multi-attach feature is enabled for the disk. Valid values:

*   Disabled: The multi-attach feature is not enabled for the disk.
*   Enabled: The multi-attach feature is enabled for the disk.
*   LegacyShared: Shared Block Storage devices are queried.

The multi-attach feature is in invitational preview. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/console.htm#/ticket/list).', example='Disabled', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the Describedisks operation.

For more information about how to check the responses returned by this operation, see the preceding "Description" section.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Page start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  portable?: boolean(name='Portable', description='Specifies whether the disk is removable. Valid values:

*   true: The disk is removable. A removable disk can independently exist and can be attached to or detached from an instance within the same zone.
*   false: The disk is not removable. A disk that is not removable cannot independently exist or be attached to or detached from an instance within the same zone.

The `Portable` attribute of the following disks is `false`, and these disks share the same lifecycle with their associated instances:

*   Local disks
*   Local SSDs
*   Subscription data disks', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the disk belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that was used to create the cloud disk.', example='s-bp67acfmxazb4p****', position='Query'),
  status?: string(name='Status', description='The state of the cloud disk. For more information, see [Disk states](~~25689~~). Valid values:

* In_use
* Available
* Attaching
* Detaching
* Creating
* ReIniting
* All

Default value: All.', example='All', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the disk. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the disk. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the disk.', example='cn-hangzhou-g', position='Query'),
}

model DescribeDisksResponseBody = {
  disks?: {
    disk?: [ 
    {
      attachedTime?: string(name='AttachedTime', description='The time when the cloud disk was last attached. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2021-06-07T06:08:56Z'),
      attachments?: {
        attachment?: [ 
        {
          attachedTime?: string(name='AttachedTime', description='The time when the disk was attached. The time is displayed in UTC.', example='2021-06-07T06:08:56Z'),
          device?: string(name='Device', description='The device name of the disk.', example='/dev/xvda'),
          instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk was attached.', example='i-bp67acfmxazb4q****'),
        }
      ](name='Attachment')
      }(name='Attachments', description='The attachment information of the cloud disk. The value is an array that consists of the `Attachment` values. This value is not returned when you query Shared Block Storage devices.'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy that is applied to the cloud disk.', example='sp-bp67acfmxazb4p****'),
      bdfId?: string(name='BdfId', description='This parameter is in invitational preview and is unavailable for general users.', example='null'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='This parameter is unavailable.', example='false'),
      category?: string(name='Category', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_ssd'),
      creationTime?: string(name='CreationTime', description='The time when the disk was created.', example='2021-06-07T06:08:54Z'),
      deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Indicates whether the automatic snapshots of the cloud disk are deleted when the disk is released. Valid values:

*   true: The automatic snapshots of the cloud disk are deleted when the disk is released.
*   false: The automatic snapshots of the cloud disk are retained when the disk is released.

Snapshots that are created by calling the [CreateSnapshot](~~25524~~) operation or by using the Elastic Compute Service (ECS) console are retained and not affected by this parameter.', example='false'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Indicates whether the cloud disk is released when its associated instance is released. Valid values:

*   true: The cloud disk is released when its associated instance is released.
*   false: The cloud disk is retained when its associated instance is released.', example='true'),
      description?: string(name='Description', description='The description of the disk.', example='testDescription'),
      detachedTime?: string(name='DetachedTime', description='The time when the cloud disk was last detached.', example='2021-06-07T21:01:22Z'),
      device?: string(name='Device', description='The device name of the disk on its associated instance. Example: /dev/xvdb. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the disk based on the `Attachment` values.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
      diskChargeType?: string(name='DiskChargeType', description='The billing method of the disk. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PrePaid'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp18um4r4f2fve24****'),
      diskName?: string(name='DiskName', description='The name of the disk.', example='testDiskName'),
      enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Indicates whether the automatic snapshot policy feature is enabled for the cloud disk.', example='false'),
      enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy', description='Indicates whether an automatic snapshot policy was applied to the cloud disk.', example='false'),
      encrypted?: boolean(name='Encrypted', description='Indicates whether the cloud disk was encrypted.', example='false'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud disk expires.', example='2021-07-07T16:00Z'),
      IOPS?: int32(name='IOPS', description='The maximum number of IOPS.', example='4000'),
      IOPSRead?: int32(name='IOPSRead', description='The maximum number of read operations per second.', example='2000'),
      IOPSWrite?: int32(name='IOPSWrite', description='The maximum number of write operations per second.', example='2000'),
      imageId?: string(name='ImageId', description='The ID of the image that was used to create the instance. This parameter is empty unless the cloud disk was created from an image. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='m-bp13aqm171qynt3u***'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk was attached. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the disk based on the `Attachment` values.', example='i-bp67acfmxazb4q****'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key that is used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb408***'),
      mountInstanceNum?: int32(name='MountInstanceNum', description='The number of instances to which the Shared Block Storage device is attached.', example='1'),
      mountInstances?: {
        mountInstance?: [ 
        {
          attachedTime?: string(name='AttachedTime', description='The time when the cloud disk was attached. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-05T2340:00Z'),
          device?: string(name='Device', description='The mount point of the disk.', example='/dev/xvda'),
          instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk is attached.', example='i-bp1j4i2jdf3owlhe****'),
        }
      ](name='MountInstance')
      }(name='MountInstances', description='The attachment information of the Shared Block Storage device.'),
      multiAttach?: string(name='MultiAttach', description='Indicates whether the multi-attach feature was enabled for the cloud disk.', example='Disabled'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason', description='The security reason why the disk was locked.', example='security'),
        }
      ](name='OperationLock')
      }(name='OperationLocks', description='The reasons why the disk was locked.'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.', example='PL0'),
      portable?: boolean(name='Portable', description='Indicates whether the disk is removable.', example='false'),
      productCode?: string(name='ProductCode', description='The product code in Alibaba Cloud Marketplace.', example='jxsc000204'),
      provisionedIops?: long(name='ProvisionedIops', description='This parameter is unavailable.', example='40000'),
      regionId?: string(name='RegionId', description='The region ID of the disk.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the disk belongs.', example='rg-bp67acfmxazb4p****'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the disk.', example='bp18um4r4f2fve2****'),
      size?: int32(name='Size', description='The size of the disk. Unit: GiB.', example='60'),
      sourceSnapshotId?: string(name='SourceSnapshotId', description='The ID of the snapshot that was used to create the cloud disk.

This parameter is empty unless the cloud disk was created from a snapshot. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='s-bp67acfmxazb4p****'),
      status?: string(name='Status', description='The state of the cloud disk. Valid values:

*   In_use
*   Available
*   Attaching
*   Detaching
*   Creating
*   ReIniting', example='In_use'),
      storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster to which the cloud disk belongs. If your cloud disk belongs to the public block storage cluster, an empty value is returned.', example='dbsc-j5e1sf2vaf5he8m2****'),
      storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-i-bp1j4i2jdf3owlhe****'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set.', example='11'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the disk.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the disk.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the disk.'),
      throughput?: int32(name='Throughput', description='The amount of data transferred per second. Unit: MB/s.', example='100'),
      type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='system'),
      zoneId?: string(name='ZoneId', description='The zone ID of the disk.', example='cn-hangzhou-i'),
    }
  ](name='Disk')
  }(name='Disks', description='Details about the disks.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model DescribeDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksResponseBody(name='body'),
}

/**
  * * You can specify multiple request parameters such as `RegionId`, `ZoneId`, `DiskIds`, and `InstanceId` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * * The `DiskIds` value is a JSON array. If DiskIds is not specified, it is not used as a filter condition. If `DiskIds` is set to an empty JSON array, it is regarded as a valid filter condition, and an empty result is returned.
  * * You can use one of the following methods to check the responses:
  *     * Method 1: Use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeDisks operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *     * Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `NextToken` is specified, `PageSize` and `PageNumber` do not take effect and `TotalCount` in the response is invalid.
  * * A disk that has the multi-attach feature enabled can be attached to multiple instances. You can query the attachment information of the disk based on the `Attachment` values in the response.
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
 */
async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDisksFullStatusRequest {
  eventTime?: {
    end?: string(name='End', description='The end of the time range in which to query occurred events.

The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is specified in UTC.', example='2018-05-08T02:48:52Z'),
    start?: string(name='Start', description='The start of the time range in which to query occurred events.

The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time specified in UTC.', example='2018-05-06T02:43:10Z'),
  }(name='EventTime', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  diskId?: [ string ](name='DiskId', description='The ID of EBS device N. Valid values of N: 1 to 100.', example='d-bp67acfmxazb4p****', position='Query'),
  eventId?: [ string ](name='EventId', description='The ID of the event. Valid values of N: 1 to 100.', example='e-bp67acfmxazb4p****', position='Query'),
  eventType?: string(name='EventType', description='The event type. Valid values:

*   Degraded: The performance of the EBS device is degraded.
*   SeverelyDegraded: The performance of the EBS device is severely degraded.
*   Stalled: The performance of the EBS device is severely affected.
*   ErrorDetected: The local disk is damaged.', example='Stalled', position='Query'),
  healthStatus?: string(name='HealthStatus', description='The health status of the EBS device. Valid values:

*   Impaired: The EBS device is damaged.
*   Warning: The performance of the EBS device may be degraded.
*   Initializing: The disk is being initialized.
*   InsufficientData: The status cannot be determined due to insufficient data.
*   NotApplicable: The EBS device cannot be used.', example='Warning', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be a positive integer.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the EBS device. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the EBS device belongs. When you use this property to query resources, the number of resources that are contained in the specified resource group cannot exceed 1,000.', example='rg-aek2kkmhmhs****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The lifecycle status of the EBS device. For more information, see [Disk status](~~25689~~). Valid values:

*   In_use: The disk is in use.
*   Available: The disk can be attached.
*   Attaching: The disk is being attached.
*   Detaching: The disk is being detached.
*   Creating: The disk is being created.
*   ReIniting: The disk is being initialized.', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the EBS device. A key-value pair consists of a key specified by the Tag.N.Key parameter and a value specified by the `Tag.N.Value` parameter. The two parameters are associated with each other. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added are returned. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added are returned.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N added to the EBS device. A key-value pair consists of a key specified by the `Tag.N.Key` parameter and a value specified by the Tag.N.Value parameter. The two parameters are associated with each other. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the instance.', position='Query'),
}

model DescribeDisksFullStatusResponseBody = {
  diskFullStatusSet?: {
    diskFullStatusType?: [ 
    {
      device?: string(name='Device', description='The name of the EBS device that is attached to an instance. Example: /dev/xvdb.

This parameter has a value only when the value of `Status` is `In_use`.

> This parameter will be deprecated in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='null'),
      diskEventSet?: {
        diskEventType?: [ 
        {
          eventEndTime?: string(name='EventEndTime', description='The time when the event ended.', example='2018-05-06T02:48:52Z'),
          eventId?: string(name='EventId', description='The ID of the event.', example='e-bp67acfmxazb4p****'),
          eventTime?: string(name='EventTime', description='The time when the event occurred.', example='2018-05-08T02:43:10Z'),
          eventType?: {
            code?: int32(name='Code', description='The code of the event type.', example='7'),
            name?: string(name='Name', description='The name of the event type. Valid values:

*   Degraded: The performance of the EBS device was degraded.
*   SeverelyDegraded: The performance of the EBS device was severely degraded.
*   Stalled: The performance of the EBS device was severely affected.
*   ErrorDetected: The local disk was damaged.', example='Stalled'),
          }(name='EventType', description='The type of the event.'),
          impactLevel?: string(name='ImpactLevel', description='The impact level of the event.', example='100'),
        }
      ](name='DiskEventType')
      }(name='DiskEventSet', description='The events about the EBS device.'),
      diskId?: string(name='DiskId', description='The ID of EBS device N.', example='d-bp67acfmxazb4p****'),
      healthStatus?: {
        code?: int32(name='Code', description='The code of the health status of the EBS device.', example='128'),
        name?: string(name='Name', description='The name of the health status of the EBS device.', example='Impaired'),
      }(name='HealthStatus', description='The health status of the EBS device.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance that you query.', example='i-bp67acfmxazb4p****'),
      status?: {
        code?: int32(name='Code', description='The code of the lifecycle status of the EBS device.', example='129'),
        name?: string(name='Name', description='The name of the lifecycle status of the EBS device.', example='Available'),
      }(name='Status', description='The lifecycle status of the EBS device.'),
    }
  ](name='DiskFullStatusType')
  }(name='DiskFullStatusSet', description='The collection of full status information of the EBS devices.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of EBS devices for which full status information is returned.', example='2'),
}

model DescribeDisksFullStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksFullStatusResponseBody(name='body'),
}

/**
  * *   The full status information of an EBS device includes the lifecycle status provided by the `Status` parameter, health status provided by the `HealthStatus` parameter, and event type provided by the `EventType` parameter of the EBS device. You can filter the results based on these parameters.
  * *   The release time, scheduled execution time, and actual execution time of each EBS device event are identical. If you specify a period of time by using the `EventTime.Start` and `EventTime.End` parameters, all events that occurred within this period are queried. You can query events that occurred within the last seven days.
  *
 */
async function describeDisksFullStatus(request: DescribeDisksFullStatusRequest): DescribeDisksFullStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisksFullStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter', position='Query'),
  allocationId?: string(name='AllocationId', position='Query'),
  associatedInstanceId?: string(name='AssociatedInstanceId', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  eipAddress?: string(name='EipAddress', position='Query'),
  ISP?: string(name='ISP', position='Query'),
  lockReason?: string(name='LockReason', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId'),
      allocationTime?: string(name='AllocationTime'),
      bandwidth?: string(name='Bandwidth'),
      chargeType?: string(name='ChargeType'),
      eipBandwidth?: string(name='EipBandwidth'),
      expiredTime?: string(name='ExpiredTime'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipAddress?: string(name='IpAddress'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipMonitorDataRequest {
  allocationId: string(name='AllocationId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth'),
      eipFlow?: int32(name='EipFlow'),
      eipPackets?: int32(name='EipPackets'),
      eipRX?: int32(name='EipRX'),
      eipTX?: int32(name='EipTX'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipMonitorDataResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticityAssuranceInstancesRequest {
  privatePoolOptions?: {
    id: string(name='Id', description='The ID of the elasticity assurance.', example='eap-bp67acfmxazb4****'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query. Set the value to the NextToken value obtained from the response to the previous request.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeElasticityAssuranceInstancesResponseBody = {
  elasticityAssuranceItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4****'),
    }
  ](name='InstanceIdSet')
  }(name='ElasticityAssuranceItem', description='Details about the instances that match and use the elasticity assurance.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeElasticityAssuranceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticityAssuranceInstancesResponseBody(name='body'),
}

/**
  * When an elasticity assurance expires, data about the association between instances and the private pool generated by the elasticity assurance becomes invalid. When you call this operation to query the expired elasticity assurance, no value is returned.
  *
 */
async function describeElasticityAssuranceInstances(request: DescribeElasticityAssuranceInstancesRequest): DescribeElasticityAssuranceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticityAssuranceInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticityAssurancesRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids', description='The IDs of elasticity assurances. The value can be a JSON array that consists of up to 100 elasticity assurance IDs. Separate the IDs with commas (,).', example='["eap-bp67acfmxazb4****", "eap-bp67acfmxazb5****"]'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instances to be created by using the elasticity assurance. Set the value to PostPaid. Only pay-as-you-go instances can be created by using elasticity assurances.  

Default value: PostPaid.', example='PostPaid', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type to which the elasticity assurance applies.', example='ecs.c6.large', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query. Set the value to the NextToken value obtained from the response to the previous request.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', description='>  This parameter is deprecated.', example='null', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the elasticity assurance belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.  

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The state of the elasticity assurance. Valid values:

- All: All states.
- Preparing: The elasticity assurance is being prepared.
- Prepared: The elasticity assurance is to take effect.
- Active: The elasticity assurance is in effect.
- Released: The elasticity assurance is released.

Default value: Active.', example='Active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag of the elasticity assurance. You can specify multiple tag keys to query.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag of the elasticity assurance.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to query resources. You can specify a maximum of 20 tags.', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the elasticity assurance.', example='cn-hangzhou-h', position='Query'),
}

model DescribeElasticityAssurancesResponseBody = {
  elasticityAssuranceSet?: {
    elasticityAssuranceItem?: [ 
    {
      allocatedResources?: {
        allocatedResource?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
          totalAmount?: int32(name='TotalAmount', description='The total number of instances for which capacity of an instance type is reserved.', example='2'),
          usedAmount?: int32(name='UsedAmount', description='The number of instances that have used the elasticity assurance.', example='2'),
          zoneId?: string(name='zoneId', description='The zone ID.', example='cn-hangzhou-h'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources', description='Details about the allocated resources.'),
      description?: string(name='Description', description='The description of the elasticity assurance.', example='This is description.'),
      endTime?: string(name='EndTime', description='The time when the elasticity assurance expires.', example='2021-12-03T16:00Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instances to be created by using the elasticity assurance. Set the value to PostPaid. Only pay-as-you-go instances can be created by using elasticity assurances.', example='PostPaid'),
      latestStartTime?: string(name='LatestStartTime', description='>  This parameter is unavailable.', example='null'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the elasticity assurance.', example='eap-bp1ir35kqtn8ywci****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The type of the private pool associated with the elasticity assurance. Valid values:

- Open: open private pool
- Target: targeted private pool', example='Target'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName', description='The name of the elasticity assurance.', example='eapTestName'),
      regionId?: string(name='RegionId', description='The region ID of the elasticity assurance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the elasticity assurance belongs.', example='rg-bp67acfmxazb4p****'),
      startTime?: string(name='StartTime', description='The time when the elasticity assurance takes effect.', example='2020-12-03T05:25Z'),
      startTimeType?: string(name='StartTimeType', description='Indicates when the elasticity assurance takes effect. Valid values:

- Now: The elasticity assurance takes effect as soon as it is created.
- Later: The elasticity assurance takes effect at the specified time.', example='Now'),
      status?: string(name='Status', description='The state of the elasticity assurance. Valid values:

- Preparing: The elasticity assurance is being prepared.
- Prepared: The elasticity assurance is to take effect.
- Active: The elasticity assurance is in effect.
- Released: The elasticity assurance is released.', example='Active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the elasticity assurance.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the elasticity assurance.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the elasticity assurance.'),
      totalAssuranceTimes?: string(name='TotalAssuranceTimes', description='The total number of times that the elasticity assurance has been applied.', example='Unlimited'),
      usedAssuranceTimes?: int32(name='UsedAssuranceTimes', description='>  This parameter is unavailable.', example='0'),
    }
  ](name='ElasticityAssuranceItem')
  }(name='ElasticityAssuranceSet', description='Details about the elasticity assurances.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeElasticityAssurancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticityAssurancesResponseBody(name='body'),
}

async function describeElasticityAssurances(request: DescribeElasticityAssurancesRequest): DescribeElasticityAssurancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticityAssurances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEniMonitorDataRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2018-05-21T12:22:00Z', position='Query'),
  eniId?: string(name='EniId', description='The ID of the secondary ENI. By default, all secondary ENIs that are bound to the specified instance are queried.', example='eni-bp19da36d6xdwey****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance to which the secondary ENI is bound.', example='i-bp1a5zr3u7nq9cx****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The interval at which to retrieve monitored data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the secondary ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2018-05-21T12:19:00Z', position='Query'),
}

model DescribeEniMonitorDataResponseBody = {
  monitorData?: {
    eniMonitorData?: [ 
    {
      dropPacketRx?: string(name='DropPacketRx', description='The number of dropped packets received by the secondary ENI over the internal network.', example='0'),
      dropPacketTx?: string(name='DropPacketTx', description='The number of dropped packets sent by the secondary ENI over the internal network.', example='0'),
      eniId?: string(name='EniId', description='The ID of the secondary ENI.', example='eni-bp19da36d6xdwey****'),
      intranetRx?: string(name='IntranetRx', description='The average rate of data traffic received by the secondary ENI over the internal network. Unit: Kbit/s.', example='0'),
      intranetTx?: string(name='IntranetTx', description='The average rate of data traffic sent by the secondary ENI over the internal network. Unit: Kbit/s.', example='0'),
      packetRx?: string(name='PacketRx', description='The number of packets received by the secondary ENI over the internal network.', example='0'),
      packetTx?: string(name='PacketTx', description='The number of packets sent by the secondary ENI over the internal network.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the monitored data. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-05-21T03:22:00Z'),
    }
  ](name='EniMonitorData')
  }(name='MonitorData', description='Details about the monitored data of the ENI.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='4'),
}

model DescribeEniMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEniMonitorDataResponseBody(name='body'),
}

/**
  * ## Description
  * The monitored data includes traffic sent and received over the internal network, the number of packets sent and received by the secondary ENI, and the number of dropped packets sent and received by the secondary ENI. Specific information may be missing from the returned monitored data. This is because the system cannot obtain the relevant information. For example, if the instance to which the secondary ENI is bound is in the Stopped state, or if the secondary ENI is not bound to an instance and is in the Available state, the monitored data of the secondary ENI cannot be obtained. When you call this operation, take note of the following items:
  * *   Up to 400 monitored data entries can be returned at a time. If the value calculated by using the (EndTime - StartTime)/Period formula is greater than 400, an error is returned.
  * *   Only the monitored data within the last 30 days can be queried. If the value of the StartTime parameter is earlier than 30 days from the time when you call this operation, an error is returned.
  *
 */
async function describeEniMonitorData(request: DescribeEniMonitorDataRequest): DescribeEniMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEniMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeForwardTableEntriesRequest {
  forwardEntryId?: string(name='ForwardEntryId', position='Query'),
  forwardTableId: string(name='ForwardTableId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      externalIp?: string(name='ExternalIp'),
      externalPort?: string(name='ExternalPort'),
      forwardEntryId?: string(name='ForwardEntryId'),
      forwardTableId?: string(name='ForwardTableId'),
      internalIp?: string(name='InternalIp'),
      internalPort?: string(name='InternalPort'),
      ipProtocol?: string(name='IpProtocol'),
      status?: string(name='Status'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeForwardTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHaVipsRequest {
  filter: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHaVipsResponseBody = {
  haVips?: {
    haVip?: [ 
    {
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      haVipId?: string(name='HaVipId'),
      ipAddress?: string(name='IpAddress'),
      masterInstanceId?: string(name='MasterInstanceId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='HaVip')
  }(name='HaVips'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHaVipsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHaVipsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHaVips', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHpcClustersRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  hpcClusterIds?: string(name='HpcClusterIds', description='The IDs of the HPC clusters. The value is a JSON array that consists of up to 100 HPC cluster IDs. Separate the HPC cluster IDs with commas (,).', example='["hpc-xxxxxxxxx", "hpc-yyyyyyyyy", … "hpc-zzzzzzzzz"]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHpcClustersResponseBody = {
  hpcClusters?: {
    hpcCluster?: [ 
    {
      description?: string(name='Description', description='The description of the HPC cluster.', example='testDescription'),
      hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster.', example='hpc-bp1a5zr3u7nq9cx****'),
      name?: string(name='Name', description='The name of the HPC cluster.', example='testName'),
    }
  ](name='HpcCluster')
  }(name='HpcClusters', description='Details about the HPC clusters. The value is an array that consists of the information of each HPC cluster.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of the HPC clusters.', example='2'),
}

model DescribeHpcClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHpcClustersResponseBody(name='body'),
}

async function describeHpcClusters(request: DescribeHpcClustersRequest): DescribeHpcClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHpcClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageComponentsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageComponentId?: [ string ](name='ImageComponentId', description='The IDs of the image components. You can specify up to 20 image components.', example='ic-bp67acfmxazb4p****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value: 50.', example='50', minimum=1, maximum=500, position='Query'),
  name?: string(name='Name', description='The name of the image component. You must specify an exact name to search for the image component.', example='testComponent', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeImageComponents operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****', position='Query'),
  owner?: string(name='Owner', description='The type of the image component. Valid values:

*   SELF: the custom component that you created.
*   ALIYUN: the system component provided by Alibaba Cloud.', example='SELF', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image component. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image component. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image component. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags', position='Query'),
}

model DescribeImageComponentsResponseBody = {
  imageComponent?: {
    imageComponentSet?: [ 
    {
      componentType?: string(name='ComponentType', description='The type of the image component.', example='Build'),
      content?: string(name='Content', description='The content of the image component.', example='RESTART'),
      creationTime?: string(name='CreationTime', description='The time when the image component was created.', example='2020-11-24T06:00:00Z'),
      description?: string(name='Description', description='The description of the image component.', example='This is description.'),
      imageComponentId?: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****'),
      name?: string(name='Name', description='The name of the image component.', example='testComponent'),
      owner?: string(name='Owner', description='The type of the image component. Valid values:

*   SELF: the custom component that you created.
*   ALIYUN: the system component provided by Alibaba Cloud.', example='SELF'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      systemType?: string(name='SystemType', description='The operating system type supported by the image component.', example='Linux'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the image component.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the image component.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the image component.'),
    }
  ](name='ImageComponentSet')
  }(name='ImageComponent', description='Details about the image components.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The query token returned in this call. For information about how to use this return value, see the "Description" section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of image components returned.', example='1'),
}

model DescribeImageComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageComponentsResponseBody(name='body'),
}

/**
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeImageComponents operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
 */
async function describeImageComponents(request: DescribeImageComponentsRequest): DescribeImageComponentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageComponents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageFromFamilyRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  imageFamily: string(name='ImageFamily', description='The name of the image family. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with http://, https://, acs:, or aliyun.', example='hangzhou-daily-update', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeImageFromFamilyResponseBody = {
  image?: {
    architecture?: string(name='Architecture', description='The image architecture. Valid values:

*   i386
*   x86\\_64', example='x86_64'),
    creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2018-01-10T01:01:10Z'),
    description?: string(name='Description', description='The description of the image.', example='testDescription'),
    diskDeviceMappings?: {
      diskDeviceMapping?: [ 
      {
        device?: string(name='Device', description='The device name of the disk. Example: /dev/xvdb.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
        format?: string(name='Format', description='The format of the image.', example='qcow2'),
        importOSSBucket?: string(name='ImportOSSBucket', description='The OSS bucket that contains the imported image file.', example='testEcsImport'),
        importOSSObject?: string(name='ImportOSSObject', description='The OSS object corresponding to the imported image file.', example='imageImport'),
        size?: string(name='Size', description='The size of the disk. Unit: GiB.', example='80'),
        snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp17ot2q7x72ggtw****'),
        type?: string(name='Type', description='The type of the image.', example='custom'),
      }
    ](name='DiskDeviceMapping')
    }(name='DiskDeviceMappings', description='The mappings between the disks and snapshots under the image.'),
    imageFamily?: string(name='ImageFamily', description='The name of the image family.', example='testImageFamily'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp1g7004ksh0oeuc****'),
    imageName?: string(name='ImageName', description='The name of the image.', example='testImageName'),
    imageOwnerAlias?: string(name='ImageOwnerAlias', description='The alias of the image owner. Valid values:

- system: public images provided by Alibaba Cloud
- self: your custom images
- others: shared images from other Alibaba Cloud accounts
- marketplace: Alibaba Cloud Marketplace images', example='self'),
    imageVersion?: string(name='ImageVersion', description='The version of the image.', example='2'),
    isCopied?: boolean(name='IsCopied', description='Indicates whether the image is a copy of another image.', example='false'),
    isSelfShared?: string(name='IsSelfShared', description='Indicates whether the image has been shared to other Alibaba Cloud accounts.', example='true'),
    isSubscribed?: boolean(name='IsSubscribed', description='Indicates whether you have subscribed to the image corresponding to the specified product code.', example='false'),
    isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Indicates whether the image supports cloud-init.', example='true'),
    isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Indicates whether the image can be used on I/O optimized instances.', example='true'),
    OSName?: string(name='OSName', description='The name of the operating system.', example='Alibaba Cloud Linux 2.1903'),
    OSType?: string(name='OSType', description='The type of the operating system. Valid values:

- windows
- linux', example='linux'),
    platform?: string(name='Platform', description='The platform of the operating system.', example='Aliyun'),
    productCode?: string(name='ProductCode', description='The product code of the Alibaba Cloud Marketplace image.', example='jxsc00****'),
    progress?: string(name='Progress', description='The image creation progress. Unit: percent (%).', example='100'),
    size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='80'),
    status?: string(name='Status', description='The status of the image. Valid values:

- UnAvailable: The image is unavailable.
- Available: The image is available.
- Creating: The image is being created.
- CreateFailed: The image failed to be created.', example='Available'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key of the image.', example='TestKey'),
        tagValue?: string(name='TagValue', description='The tag value of the image.', example='TestValue'),
      }
    ](name='Tag')
    }(name='Tags', description='An array that consists of Tag data.'),
    usage?: string(name='Usage', description='Indicates whether the image has been used to create ECS instances. Valid values:

- instance: The image has been used to create one or more ECS instances.
- none: The image has not been used to create ECS instances.', example='none'),
  }(name='Image', description='The image information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeImageFromFamilyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageFromFamilyResponseBody(name='body'),
}

/**
  * ## Description
  * *   This API operation only returns the available custom images that are newly created in the specified image family. Public images, Alibaba Cloud Marketplace images, community images, or shared images are not queried.
  * *   If no available custom images exist in the specified image family, the response is empty.
  *
 */
async function describeImageFromFamily(request: DescribeImageFromFamilyRequest): DescribeImageFromFamilyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageFromFamily', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagePipelineExecutionsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  executionId?: string(name='ExecutionId', description='The ID of the image build task.', example='exec-5fb8facb8ed7427c****', position='Query'),
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value: 50.', example='50', minimum=1, maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value that was returned when you last called the DescribeImagePipelineExecutions operation. Leave this parameter empty when you call this operation for the first time.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image build task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the image build task. You can specify multiple values at the same time. Separate the values with commas (,). Example format: `BUILDING,DISTRIBUTING`. Valid values: 

- BUILDING: The image is being built.
- DISTRIBUTING: The image is being distributed.
- RELEASING: The image is being recycled.
- SUCCESS: The image is built.
- FAILED: The image fails to be built.
- CANCELLING: The image build task is being canceled.
- CANCELLED: The image build task is canceled.

>  You cannot query the image build tasks in all status by leaving this parameter empty.', example='BUILDING', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='> This parameter is deprecated.', example='null'),
      value?: string(name='Value', description='> This parameter is deprecated.', example='null'),
    }
  ](name='Tag', description='> This parameter is deprecated.', position='Query'),
}

model DescribeImagePipelineExecutionsResponseBody = {
  imagePipelineExecution?: {
    imagePipelineExecutionSet?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the image build task was created.', example='2020-11-24T06:00:00Z'),
      executionId?: string(name='ExecutionId', description='The ID of the image build task.', example='exec-5fb8facb8ed7427c****'),
      imageId?: string(name='ImageId', description='The ID of the image to be created by using the image build task.', example='m-bp67acfmxazb4p****'),
      imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
      message?: string(name='Message', description='The execution result of the image build task.', example='Create transition vpc "vpc-2ze70rc7093j9idu6****" success!'),
      modifiedTime?: string(name='ModifiedTime', description='The last time when the image build task was updated.', example='2020-11-25T06:00:00Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      status?: string(name='Status', description='The status of the image build task. Valid values:

*   BUILDING: The image was being built.
*   DISTRIBUTING: The image was being distributed.
*   RELEASING: The image was being recycled.
*   SUCCESS: The image was built.
*   FAILED: The image failed to be built.
*   CANCELLING: The image build task was being canceled.
*   CANCELLED: The image build task was cancelled.', example='BUILDING'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='null'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='null'),
        }
      ](name='Tag')
      }(name='Tags', description='The list of tag key-value pairs.'),
    }
  ](name='ImagePipelineExecutionSet')
  }(name='ImagePipelineExecution', description='Details of the image build task.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The query token returned in this call. For information about how to use this return value, see the Description section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned image components.', example='1'),
}

model DescribeImagePipelineExecutionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagePipelineExecutionsResponseBody(name='body'),
}

/**
  * * The image template specified by the `ImagePipelineId` parameter cannot be a deleted image template. The corresponding build task is deleted when an image template is deleted.
  * * You must set the `ImagePipelineId` parameter to specify the ID of an image template or the `ExecutionId` parameter to specify the ID of a build task.
  * * You can configure the query token by using the `NextToken` parameter. Set the value of NextToken to the `NextToken` value that was returned when you last called the `DescribeImagePipelineExecutions` operation. Then, use the `MaxResults` parameter to configure the maximum number of entries to return on each page to query the details of the image build task.
  *
 */
async function describeImagePipelineExecutions(request: DescribeImagePipelineExecutionsRequest): DescribeImagePipelineExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImagePipelineExecutions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagePipelinesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imagePipelineId?: [ string ](name='ImagePipelineId', description='The IDs of the image templates. You can specify at most 20 IDs.', example='ip-2ze5tsl5bp6nf2b3****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value: 50.', example='50', minimum=1, maximum=500, position='Query'),
  name?: string(name='Name', description='The name of the image template.', example='testImagePipeline', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeImagePipelines operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image template. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image template. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', position='Query'),
}

model DescribeImagePipelinesResponseBody = {
  imagePipeline?: {
    imagePipelineSet?: [ 
    {
      addAccounts?: {
        addAccount?: [ string ](name='AddAccount')
      }(name='AddAccounts', description='The IDs of Alibaba Cloud accounts to which to share the created image.'),
      baseImage?: string(name='BaseImage', description='The source image.

*   When `BaseImageType` is set to IMAGE, the value of this parameter is the ID of a custom image.
*   When `BaseImageType` is set to IMAGE_FAMILY, the value of this parameter is the name of an image family.', example='m-bp67acfmxazb4p****'),
      baseImageType?: string(name='BaseImageType', description='The type of the source image. Valid values:

*   IMAGE: custom image
*   IMAGE_FAMILY: image family', example='IMAGE'),
      buildContent?: string(name='BuildContent', description='The content of the image template.', example='FROM IMAGE:m-bp67acfmxazb4p****'),
      creationTime?: string(name='CreationTime', description='The time when the image template was created.', example='2020-11-24T06:00:00Z'),
      deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure', description='Indicates whether to release the intermediate instance when the image fails to be created.', example='true'),
      description?: string(name='Description', description='The description of the image template.', example='This is description.'),
      imageName?: string(name='ImageName', description='The name prefix of the created image.', example='testImageName'),
      imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
      instanceType?: string(name='InstanceType', description='The instance type of the intermediate instance.', example='ecs.g6.large'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The size of the outbound public bandwidth for the intermediate instance. Unit: Mbit/s.', example='0'),
      name?: string(name='Name', description='The name of the image template.', example='testImagePipeline'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size of the intermediate instance. Unit: GiB.', example='40'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the image template.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the image template.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the image template.'),
      toRegionIds?: {
        toRegionId?: [ string ](name='ToRegionId')
      }(name='ToRegionIds', description='The IDs of regions to which to distribute the created image.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp67acfmxazb4p****'),
    }
  ](name='ImagePipelineSet')
  }(name='ImagePipeline', description='Details of the image templates.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The query token returned in this call. For information about how to use this return value, see the "Description" section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of image templates returned.', example='1'),
}

model DescribeImagePipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagePipelinesResponseBody(name='body'),
}

/**
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the `DescribeImagePipelines` operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
 */
async function describeImagePipelines(request: DescribeImagePipelinesRequest): DescribeImagePipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImagePipelines', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageSharePermissionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageId: string(name='ImageId', description='The ID of the custom image.', example='m-bp1caf3yicx5jlfl****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeImageSharePermissionResponseBody = {
  accounts?: {
    account?: [ 
    {
      aliyunId?: string(name='AliyunId', description='The ID of the Alibaba Cloud account.', example='1234567890'),
    }
  ](name='Account')
  }(name='Accounts', description='The Alibaba Cloud accounts.'),
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp1caf3yicx5jlfl****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  shareGroups?: {
    shareGroup?: [ 
    {
      group?: string(name='Group', description='The shared group.', example='all'),
    }
  ](name='ShareGroup')
  }(name='ShareGroups', description='The shared groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageSharePermissionResponseBody(name='body'),
}

async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageSupportInstanceTypesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  actionType?: string(name='ActionType', description='The scenario in which the instance type is used. Default value: CreateEcs. Valid values:

*   CreateEcs: instance creation
*   Upgrade: instance type upgrade
*   Downgrade: instance type downgrade
*   RenewDowngrade: renewal and configuration downgrade', example='CreateEcs', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The key of filter. Only the image ID can be used to filter instance types. Valid values:

* imagId: image ID
* filter: image ID', example='imageId'),
      value?: string(name='Value', description='The value of filter.', example='m-o6w3gy99qf89rkga****'),
    }
  ](name='Filter', description='The list of filters to querying resources.', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-o6w3gy99qf89rkga****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeImageSupportInstanceTypesResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-o6w3gy99qf89rkga****'),
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount', description='The number of vCPUs of the instance type.', example='1'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family.', example='ecs.t1'),
      instanceTypeId?: string(name='InstanceTypeId', description='The ID of the instance type.', example='ecs.t1.xsmall'),
      memorySize?: float(name='MemorySize', description='The memory size of the instance type. Unit: GiB.', example='1024'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes', description='Details about the instance types that are supported by the image.'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeImageSupportInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageSupportInstanceTypesResponseBody(name='body'),
}

async function describeImageSupportInstanceTypes(request: DescribeImageSupportInstanceTypesRequest): DescribeImageSupportInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageSupportInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  actionType?: string(name='ActionType', description='The scenario in which to use the image. Default value: CreateEcs. Valid values:

*   CreateEcs: creates an instance.
*   ChangeOS: replaces the system disk or operating system.', example='CreateEcs', position='Query'),
  architecture?: string(name='Architecture', description='The architecture of the image. Valid values:

*   i386
*   x86\\_64
*   arm64', example='i386', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run.

*   true: performs a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, the corresponding error message is returned. If the check passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2XX HTTP status code is returned and the operation is performed.

Default value: false.', example='false', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter that is used to query resources. Valid values:

*   If you set this parameter to `CreationStartTime`, you can query the resources that were created after the point in time specified by the `Filter.N.Value` parameter.
*   If you set this parameter to `CreationEndTime`, you can query the resources that were created before the point in time specified by the `Filter.N.Value` parameter.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of the filter that is used to query resources. When you specify this parameter, you must also specify the `Filter.N.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter', description='The list of filter conditions used to query resources.', position='Query'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. You can specify this parameter to query images of the specified image family.

This parameter is empty by default.', example='hangzhou-daily-update', position='Query'),
  imageId?: string(name='ImageId', description='The IDs of the images.', example='m-bp1g7004ksh0oeuc****', position='Query'),
  imageName?: string(name='ImageName', description='The name of the image.', example='testImageName', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud. These are not available in Alibaba Cloud Marketplace.

*   self: custom images that you create.

*   others: shared images from other Alibaba Cloud accounts and community images that image providers released on the image platform of Alibaba Cloud Community. When you call this operation, take note of the following items:

    *   To query community images, you must set the IsPublic parameter to true.
    *   To query shared images, you must set the IsPublic parameter to false or leave the IsPublic parameter empty.

*   marketplace: an image maintained by Alibaba Cloud or Independent Software Vendors (ISVs) in the Alibaba Cloud Marketplace. These images need to be purchased together with an Elastic Compute Service (ECS) instance. Before you use Alibaba Cloud Marketplace images, take note of the billing details of the images.

This parameter is empty by default.

> This parameter is empty by default, which indicates that public images provided by Alibaba Cloud, custom images in your repository, shared images from other Alibaba Cloud accounts, and community images published by other Alibaba Cloud accounts are queried.', example='self', position='Query'),
  imageOwnerId?: long(name='ImageOwnerId', description='The ID of the Alibaba Cloud account to which the image belongs. This parameter is valid only when you query shared images or community images.', example='1234567890', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type for which the image can be used.', example='ecs.g5.large', position='Query'),
  isPublic?: boolean(name='IsPublic', description='Indicates whether to query published community images. Valid values:

*   true: queries published community images. When you set this parameter to true, you must set the ImageOwnerAlias parameter to others.
*   false: queries image types other than community images. The specific image types to be queried are determined by the ImageOwnerAlias parameter.

Default value: false.', example='false', position='Query'),
  isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Specifies whether the image supports cloud-init.', example='true', position='Query'),
  isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Specifies whether the image can be used on I/O optimized instances.', example='true', position='Query'),
  OSType?: string(name='OSType', description='The operating system type of the image. Valid values:

*   windows
*   linux', example='linux', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.

Maximum value: 100.

Default value: 10.', example='1', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the custom image belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group are returned.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  showExpired?: boolean(name='ShowExpired', description='Specifies whether the subscription image has expired.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='false', position='Query'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot used to create the custom image.', example='s-bp17ot2q7x72ggtw****', position='Query'),
  status?: string(name='Status', description='The state of the image. If you do not specify this parameter, only images in the Available state are returned. Valid values:

*   Creating: The image is being created.
*   Waiting: The image is waiting to be processed.
*   Available: The image is available. This is the default value.
*   UnAvailable: The image is unavailable.
*   CreateFailed: The image cannot be created.
*   Deprecated: The image is discontinued.

Default value: Available. You can specify multiple values for this parameter. Separate the values with commas (,).', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the image. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added are returned. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added are returned. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The tag value of the image. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
  usage?: string(name='Usage', description='Specifies whether the image is running on an ECS instance. Valid values:

*   instance: The image is in use and running on an ECS instance.
*   none: The image is not in use.', example='instance', position='Query'),
}

model DescribeImagesResponseBody = {
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', description='The architecture of the image. Valid values:

*   i386
*   x86\\_64
*   arm64', example='x86_64'),
      bootMode?: string(name='BootMode', description='The new boot mode of the image. Valid values:

*   BIOS
*   UEFI

> You need to be aware of the boot modes supported by the specified image. When you use this parameter to change the boot mode of the image, specify a boot mode supported by the image to ensure that instances that use this image can start as expected.', example='BIOS'),
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2019-11-15T06:07:05Z'),
      description?: string(name='Description', description='The description of the image.', example='Archive log for Oracle'),
      detectionOptions?: {
        items?: {
          item?: [ 
          {
            name?: string(name='Name', description='The name of the check item.', example='Nvme'),
            riskCode?: string(name='RiskCode', description='The risk that is detected on the check item.', example='NVMe.NotInstallded'),
            riskLevel?: string(name='RiskLevel', description='Indicates the severity of the risk that is detected on the check item of the imported custom image. If the system detects a risk on the check item, this parameter is returned. If the system does not detect a risk on the check item, this parameter is not returned.

Valid values:

*   High: The check item is a high-risk item that may affect the startup of the instance. We strongly recommended that you fix this item at your earliest convenience.
*   Medium: The check item is a medium-risk item that may affect the startup performance or configurations of the instance. We recommend that you fix this item.', example='High'),
            value?: string(name='Value', description='The result of the check item.', example='Supported'),
          }
        ](name='Item')
        }(name='Items', description='The check items.'),
        status?: string(name='Status', description='The state of the image check task. Valid values:

*   Processing: The image check task is in progress.
*   Finished: The image check task is completed.', example='Processing'),
      }(name='DetectionOptions', description='Details about the check performed on the image.'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          device?: string(name='Device', description='The device name of the disk. Example: /dev/xvdb.

> This parameter will be removed in the future. To ensure compatibility, we recommend that you use other parameters.', example='/dev/xvda'),
          format?: string(name='Format', description='The format of the image.', example='qcow2'),
          importOSSBucket?: string(name='ImportOSSBucket', description='The Object Storage Service (OSS) bucket that contains the imported image file.', example='testEcsImport'),
          importOSSObject?: string(name='ImportOSSObject', description='The OSS object that corresponds to the imported image file.', example='imageImport'),
          progress?: string(name='Progress', description='The progress of an image copy task.', example='32%'),
          remainTime?: int32(name='RemainTime', description='The amount of remaining time required for an image copy task. Unit: seconds.', example='233'),
          size?: string(name='Size', description='The size of the cloud disk.', example='60'),
          snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp17ot2q7x72ggtw****'),
          type?: string(name='Type', description='The type of the image.', example='system'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings', description='The mappings between disks and snapshots that belong to the image.'),
      features?: {
        nvmeSupport?: string(name='NvmeSupport', description='Indicates whether the image supports Non-Volatile Memory Express (NVMe). Valid values:

*   supported: The image supports NVMe. Instances created from this image also support NVMe.
*   unsupported: The image does not support NVMe. Instances created from this image do not support NVMe.', example='supported'),
      }(name='Features', description='The attributes of the image.'),
      imageFamily?: string(name='ImageFamily', description='The name of the image family.', example='hangzhou-daily-update'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp1g7004ksh0oeuc****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='testImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud.
*   self: your custom images.
*   others: shared images from other Alibaba Cloud accounts or community images published by other Alibaba Cloud accounts.
*   marketplace: Alibaba Cloud Marketplace images.', example='self'),
      imageOwnerId?: long(name='ImageOwnerId', description='The ID of the Alibaba Cloud account to which the image belongs. This parameter is valid only when you query shared images or community images.', example='1234567890'),
      imageVersion?: string(name='ImageVersion', description='The version of the image.', example='2'),
      isCopied?: boolean(name='IsCopied', description='Indicates whether the image is a copy of another image.', example='false'),
      isPublic?: boolean(name='IsPublic', description='Indicates whether the image is publicly available. Publicly available images include public images provided by Alibaba Cloud and custom images published as community images. Valid values:

*   true: The image is publicly available.
*   false: The image is not publicly available.', example='false'),
      isSelfShared?: string(name='IsSelfShared', description='Indicates whether the custom image was shared to other Alibaba Cloud accounts.', example='true'),
      isSubscribed?: boolean(name='IsSubscribed', description='Indicates whether you have subscribed to the image that corresponds to the specified product code.', example='false'),
      isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Indicates whether the image supports cloud-init.', example='true'),
      isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Indicates whether the image can be used on I/O optimized instances.', example='true'),
      loginAsNonRootSupported?: boolean(name='LoginAsNonRootSupported', description='Indicates whether the image supports logons of non-root users. Valid values:

*   true: The image supports logons of non-root users.
*   false: The image does not support logons of non-root users.', example='false'),
      OSName?: string(name='OSName', description='The display name of the operating system in Chinese.'),
      OSNameEn?: string(name='OSNameEn', description='The display name of the operating system in English.', example='Windows Server  2016 Data Center Edition 64bit Chinese Edition'),
      OSType?: string(name='OSType', description='The OS type of the image. Valid values:

*   windows
*   linux', example='windows'),
      platform?: string(name='Platform', description='The operating system.', example='Windows Server 2016'),
      productCode?: string(name='ProductCode', description='The product code of the Alibaba Cloud Marketplace image.', example='test000****'),
      progress?: string(name='Progress', description='The image creation progress. Unit: percent (%).', example='100%'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the image belongs.', example='rg-bp67acfmxazb4p****'),
      size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='60'),
      status?: string(name='Status', description='The state of the image. Valid values:

*   UnAvailable: The image is unavailable.
*   Available: The image is available.
*   Creating: The image is being created.
*   CreateFailed: The image cannot be created.', example='Available'),
      supplierName?: string(name='SupplierName', description='The name of the supplier that certified the community image.', example='TestName'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the image.', example='DTS'),
          tagValue?: string(name='TagValue', description='The tag value of the image.', example='Oracle'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the image.'),
      usage?: string(name='Usage', description='Indicates whether the image has been used to create ECS instances. Valid values:

*   instance: The image has been used to create one or more ECS instances.
*   none: The image has not been used to create ECS instances.', example='none'),
    }
  ](name='Image')
  }(name='Images', description='Details about the images.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='66189103-EDB2-43E2-BB60-BFF2B62F4EB8'),
  totalCount?: int32(name='TotalCount', description='The total number of images.', example='1'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

/**
  * ## Description
  * *   You can query public images provided by Alibaba Cloud, Alibaba Cloud Marketplace images, custom images in your repository, and shared images from other Alibaba Cloud accounts.
  * *   This is a paginated query. The response contains the total number of available images and the images on the returned page. By default, 10 entries are displayed on each page.
  * *   When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
 */
async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAttachmentAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds: string(name='InstanceIds', description='The IDs of instances. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='["i-bp67acfmxazb4****", "i-bp67acfmxazb5****", "i-bp67acfmxazb6****"]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceAttachmentAttributesResponseBody = {
  instances?: {
    instance?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4****'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the private pool. When the value of `PrivatePoolOptionsMatchCriteria` is `Open`, the value of PrivatePoolOptionsId is the ID of a private pool that is automatically matched to the instance.', example='eap-bp67acfmxazb4****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The match mode of the private pool. Valid values:

*   Open: open private pool. Instances automatically match an open private pool.
*   Target: specified private pool. Instances match a specified private pool.
*   None: no private pool. Instances do not use private pools.', example='Open'),
    }
  ](name='Instance')
  }(name='Instances', description='Details about the private pools that the instances match.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttachmentAttributesResponseBody(name='body'),
}

/**
  * A private pool is generated after an elasticity assurance or a capacity reservation is created. The private pool is associated with the attributes of matching instances. You can configure a private pool when you create an instance, so that the instance matches the elasticity assurance or capacity reservation that is associated with the private pool.
  * When a private pool expires, data about the association between instances and the private pool becomes invalid. In this case, a call to this operation returns empty values related to private pools.
  *
 */
async function describeInstanceAttachmentAttributes(request: DescribeInstanceAttachmentAttributesRequest): DescribeInstanceAttachmentAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAttachmentAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-uf6f5trc95ug8t33****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceAttributeResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the instance belongs. 

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='cls-bp67acfmxazb4p****'),
  cpu?: int32(name='Cpu', description='The number of vCPUs.', example='8'),
  creationTime?: string(name='CreationTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](https://icms.alibaba-inc.com/content/ecs/api?l=1&m=277&n=10049).', example='2017-12-10T04:04Z'),
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

- Standard: standard mode. For more information, see the "Standard mode" section in [Overview](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/burstable-instance-types-overview#section-svb-w9d-dju).
- Unlimited: unlimited mode. For more information, see the "Unlimited mode" section in [Overview](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/burstable-instance-types-overview#section-svb-w9d-dju).', example='Standard'),
  dedicatedHostAttribute?: {
    dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-2ze7qrzz6lvbfhr0****'),
    dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='ecs-autoui-create-ddh-temp'),
  }(name='DedicatedHostAttribute', description='Details about the dedicated host. It is an array that consists of the DedicatedHostClusterId, DedicatedHostId, and DedicatedHostName parameters.'),
  description?: string(name='Description', description='The description of the instance.', example='testDescription'),
  eipAddress?: {
    allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-wz9uilio26dfscamm****'),
    bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the EIP. Unit: Mbit/s.', example='8'),
    internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

- PayByBandwidth: pay-by-bandwidth
- PayByTraffic: pay-by-traffic

>  When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
    ipAddress?: string(name='IpAddress', description='The EIP of the instance.', example='30.21.**.**'),
  }(name='EipAddress', description='Details about the elastic IP address (EIP) associated with the instance.'),
  enableJumboFrame?: boolean(name='EnableJumboFrame'),
  expiredTime?: string(name='ExpiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](https://icms.alibaba-inc.com/content/ecs/api?l=1&m=277&n=10049).', example='2017-12-10T04:04Z'),
  hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
  imageId?: string(name='ImageId', description='The ID of the image that the instance is running.', example='m-bp1h46wfpjsjastc****'),
  innerIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='InnerIpAddress', description='The internal IP address of the instance located in the classic network.'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

- PrePaid: subscription
- PostPaid: pay-as-you-go', example='PrePaid'),
  instanceId?: string(name='InstanceId', description='The ID of instance.', example='i-uf6f5trc95ug8t33****'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='testInstanceName'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values: 

- classic
- vpc', example='vpc'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

- PayByBandwidth: pay-by-bandwidth
- PayByTraffic: pay-by-traffic

>  When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s.', example='50'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s.', example='5'),
  ioOptimized?: string(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
  memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='16384'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason', description='The reason why the instance was locked. Valid values:

- financial: The instance was locked due to overdue payments.
- security: The instance was locked due to security reasons.
- recycling: The preemptible instance was locked and pending release.
- dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
- refunded: The instance was locked because a refund was made for the instance.', example='financial'),
    }
  ](name='LockReason')
  }(name='OperationLocks', description='The reason why the instance was locked. Valid values:

- financial: The instance was locked due to overdue payments.
- security: The instance was locked due to security reasons.
- recycling: The preemptible instance was locked and pending release.
- dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
- refunded: The instance was locked because a refund was made for the instance.'),
  publicIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='PublicIpAddress', description='The public IP address of the instance.'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the instance belongs.'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the instance.', example='51d1353b-22bf-4567-a176-8b3e12e4****'),
  status?: string(name='Status', description='The state of the instance. Valid values:

- Pending: The instance is being created.
- Running: The instance is running.
- Starting: The instance is being started.
- Stopping: The instance is being stopped.
- Stopped: The instance is stopped.', example='Running'),
  stoppedMode?: string(name='StoppedMode', description='Indicates whether the instance continues to be billed after it is stopped. Valid values:

- KeepCharging: standard mode. Billing of the instance continues after the instance is stopped, and resources are retained for the instance.
- StopCharging: economical mode. Billing of some resources of the instance stops after the instance is stopped. When the instance is stopped, its resources such as vCPUs, memory, and public IP address are released. You may be unable to restart the instance if some types of resources are out of stock in the current region.
- Not-applicable: Economical mode is not applicable to the instance.', example='KeepCharging'),
  vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance. 

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='10'),
  vpcAttributes?: {
    natIpAddress?: string(name='NatIpAddress', description='The Network Address Translation (NAT) IP address of the instance. It is used by ECS instances in different VPCs for communication.', example='172.17.**.**'),
    privateIpAddress?: {
      ipAddress?: [ string ](name='IpAddress')
    }(name='PrivateIpAddress', description='The private IP address of the instance.'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-uf6ixacqz8osrwnqb****'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9e4e9pmbcnj6ki6****'),
  }(name='VpcAttributes', description='The virtual private cloud (VPC) attributes of the instance.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAutoRenewAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', description='The IDs of instances. You can specify a maximum of 100 subscription instance IDs in a single requets. Separate the instance IDs with commas (,).

> The `InstanceId` and `RenewalStatus` parameters cannot be empty at the same time.', example='i-bp18x3z4hc7bixhx****,i-bp1g6zv0ce8oghu7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  renewalStatus?: string(name='RenewalStatus', description='The auto-renewal state of the instance. Valid values:

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not to be renewed. The system sends no more expiration reminders, but sends only a non-renewal reminder three days before the expiration date. For an instance that is not to be renewed, you can call the [ModifyInstanceAutoRenewAttribute](~~52843~~) operation to change its auto-renewal state to `Normal`. Then, you can manually renew the instance or enable auto-renewal for the instance.', example='AutoRenewal', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Indicates whether auto-renewal was enabled.', example='false'),
      duration?: int32(name='Duration', description='The auto-renewal duration.', example='1'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp18x3z4hc7bixhx****'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the auto-renewal duration.', example='week'),
      renewalStatus?: string(name='RenewalStatus', description='The auto-renewal state of the instance. Valid values:

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not to be renewed. The system sends no more expiration reminders, but sends only a non-renewal reminder three days before the expiration date. For an instance that is not to be renewed, you can call the [ModifyInstanceAutoRenewAttribute](~~52843~~) operation to change its auto-renewal state to `Normal`. Then, you can manually renew the instance or enable auto-renewal for the instance.', example='Normal'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes', description='Details about the renewal attributes of instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='6'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

/**
  * *   Before you configure auto-renewal or manual renewal for subscription instances, you can query the auto-renewal status of the instances.
  * *   This operation is applicable to only subscription instances. An error is returned if you call this operation on pay-as-you-go instances.
  *
 */
async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceHistoryEventsRequest {
  eventPublishTime?: {
    end?: string(name='End', description='The end of the time range in which to query published system events. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-01T06:32:31Z'),
    start?: string(name='Start', description='The beginning of the time range in which to query published system events. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-30T06:32:31Z'),
  }(name='EventPublishTime', position='Query'),
  notBefore?: {
    end?: string(name='End', description='The end time of the scheduled execution period for the system event. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-01T06:32:31Z'),
    start?: string(name='Start', description='The start time of the scheduled execution period for the system event. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T06:32:31Z'),
  }(name='NotBefore', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  eventCycleStatus?: string(name='EventCycleStatus', description='The lifecycle state of the system event. This parameter is valid only when the InstanceEventCycleStatus.N parameter is not specified. Valid values:

*   Scheduled
*   Avoided
*   Executing
*   Executed
*   Canceled
*   Failed
*   Inquiring', example='Executed', position='Query'),
  eventId?: [ string ](name='EventId', description='The ID of system event N. Valid values of N: 1 to 100. Specify multiple event IDs in the repeated list form.', example='e-uf64yvznlao4jl2c****', position='Query'),
  eventType?: string(name='EventType', description='The type of the system event. This parameter is valid only when the InstanceEventType.N parameter is not specified. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system failure.
*   SystemFailure.Redeploy: The instance is redeployed due to a system failure.
*   SystemFailure.Delete: The instance is released due to an instance creation failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance failure.
*   InstanceExpiration.Stop: The instance is stopped due to subscription expiration.
*   InstanceExpiration.Delete: The instance is released due to subscription expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.

> For more information, see [Overview](~~66574~~). The values of this parameter are applicable only to instance system events, but not to disk system events.', example='SystemMaintenance.Reboot', position='Query'),
  impactLevel?: string(name='ImpactLevel', description='> This parameter is unavailable.', example='null', position='Query'),
  instanceEventCycleStatus?: [ string ](name='InstanceEventCycleStatus', description='The lifecycle state of system event N. Valid values of N: 1 to 7. Specify multiple states in the repeated list form. Valid values:

*   Scheduled
*   Avoided
*   Executing
*   Executed
*   Canceled
*   Failed
*   Inquiring', example='Executed', position='Query'),
  instanceEventType?: [ string ](name='InstanceEventType', description='The type of system event N. Valid values of N: 1 to 30. Specify multiple types in the repeated list form. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system failure.
*   SystemFailure.Redeploy: The instance is redeployed due to a system failure.
*   SystemFailure.Delete: The instance is released due to an instance creation failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance failure.
*   InstanceExpiration.Stop: The instance is stopped due to subscription expiration.
*   InstanceExpiration.Delete: The instance is released due to subscription expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.

> For more information, see [Overview](~~66574~~). The values of this parameter are applicable only to instance system events, but not to disk system events.', example='SystemMaintenance.Reboot', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. If this parameter is not specified, the system events of all instances within the specified region are queried.', example='i-uf678mass4zvr9n1****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be a positive integer.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N. Valid values of N: 1 to 100. Specify multiple resource IDs in the repeated list form. Valid values:

*   When the `ResourceType` parameter is set to instance, the ResourceId.N parameter specifies the ID of instance N.
*   When the `ResourceType` parameter is set to ddh, the ResourceId.N parameter specifies the ID of dedicated host N.
*   When the `ResourceType` parameter is set to managedhost, the ResourceId.N parameter specifies the ID of physical machine N in a smart hosting pool.

If this parameter is not specified, the system events of all resources of the resource type specified by `ResourceType` within the region specified by `RegionId` are queried.

> We recommend that you use the `ResourceId.N` parameter to specify one or more resource IDs. If you specify both the ` ResourceId.N  `and `InstanceId` parameters, the `ResourceId.N` parameter takes precedence by default.', example='i-uf678mass4zvr9n1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of resource. Valid values:

*   instance: Elastic Compute Service (ECS) instance
*   ddh: dedicated host
*   managehost: physical machine in a smart hosting pool

Default value: instance.', example='instance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource.', example='TestValue'),
    }
  ](name='Tag', description='The tags that are supported by system events.', position='Query'),
}

model DescribeInstanceHistoryEventsResponseBody = {
  instanceSystemEventSet?: {
    instanceSystemEventType?: [ 
    {
      eventCycleStatus?: {
        code?: int32(name='Code', description='The state code of the system event.', example='0'),
        name?: string(name='Name', description='The state name of the system event.', example='Executed'),
      }(name='EventCycleStatus', description='The lifecycle state of the system event.'),
      eventFinishTime?: string(name='EventFinishTime', description='The time when the system event ended. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-01T06:35:31Z'),
      eventId?: string(name='EventId', description='The ID of the system event.', example='e-uf64yvznlao4jl2c****'),
      eventPublishTime?: string(name='EventPublishTime', description='The time when the system event was published. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-30T06:32:31Z'),
      eventType?: {
        code?: int32(name='Code', description='The code of the system event type.', example='34'),
        name?: string(name='Name', description='The name of the system event type.', example='InstanceExpiration.Stop'),
      }(name='EventType', description='The type of the system event.'),
      extendedAttribute?: {
        canAccept?: string(name='CanAccept'),
        code?: string(name='Code'),
        device?: string(name='Device', description='The device name of the local disk.', example='/dev/vda'),
        diskId?: string(name='DiskId', description='The ID of the local disk.', example='d-diskid1'),
        hostId?: string(name='HostId', description='The ID of the host.', example='dh-bp1ewce1gk3iwv2****'),
        hostType?: string(name='HostType', description='The type of the host. Valid values:

*   ddh: dedicated host
*   managehost: physical machine in a smart hosting pool', example='ddh'),
        inactiveDisks?: {
          inactiveDisk?: [ 
          {
            creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-11-30T06:32:31Z'),
            deviceCategory?: string(name='DeviceCategory', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD) cloud_auto: ESSD AutoPL disk
*   local_ssd_pro: I/O-intensive local disk.
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_efficiency'),
            deviceSize?: string(name='DeviceSize', description='The size of the disk. Unit: GiB.', example='80'),
            deviceType?: string(name='DeviceType', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='data'),
            releaseTime?: string(name='ReleaseTime', description='The time when the disk was released. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-11-30T06:32:31Z'),
          }
        ](name='InactiveDisk')
        }(name='InactiveDisks', description='Details about the inactive cloud disks or local disks that have been released and must be cleared.'),
        migrationOptions?: {
          migrationOption?: [ string ](name='MigrationOption')
        }(name='MigrationOptions', description='The migration solution of the instance. Valid value: MigrationPlan. Instances can be migrated only by using migration plans.'),
        onlineRepairPolicy?: string(name='OnlineRepairPolicy', description='The online repair policy of the damaged disk. Valid value: IsolateOnly, which indicates that damaged disks are isolated but not repaired.', example='IsolateOnly'),
        punishDomain?: string(name='PunishDomain'),
        punishType?: string(name='PunishType'),
        punishUrl?: string(name='PunishUrl'),
        rack?: string(name='Rack', description='The rack number of the cloud box.', example='A01'),
      }(name='ExtendedAttribute', description='The extended attribute of the system event.'),
      impactLevel?: string(name='ImpactLevel', description='The impact level of the system event.', example='100'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-uf678mass4zvr9n1****'),
      notBefore?: string(name='NotBefore', description='The scheduled start time of the system event. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-06T00:00:00Z'),
      reason?: string(name='Reason', description='The reason why the system event was scheduled.', example='System maintenance is scheduled due to ***.'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   ddh: dedicated host
*   managehost: physical machine in a smart hosting pool', example='instance'),
    }
  ](name='InstanceSystemEventType')
  }(name='InstanceSystemEventSet', description='Details about the instance system events.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='2'),
}

model DescribeInstanceHistoryEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceHistoryEventsResponseBody(name='body'),
}

/**
  * ## Description
  * *   You can query system events that were finished within the last 30 days. The time range for querying unfinished system events is unlimited.
  * *   You can also specify the InstanceEventCycleStatus.N parameter to query the system events that are in the Scheduled, Executing, or Inquiring state.
  *
 */
async function describeInstanceHistoryEvents(request: DescribeInstanceHistoryEventsRequest): DescribeInstanceHistoryEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceHistoryEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceMaintenanceAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances. You can specify the IDs of up to 100 instances.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceMaintenanceAttributesResponseBody = {
  maintenanceAttributes?: {
    maintenanceAttribute?: [ 
    {
      actionOnMaintenance?: {
        defaultValue?: string(name='DefaultValue', description='The default maintenance action.', example='AutoRecover'),
        supportedValues?: {
          supportedValue?: [ string ](name='SupportedValue')
        }(name='SupportedValues', description='Details about the supported maintenance actions.'),
        value?: string(name='Value', description='The current maintenance action. Valid values:

*   Stop: The instance goes down.
*   AutoRecover: The instance is automatically recovered.
*   AutoRedeploy: Failover is performed on the instance, which may damage the data disks.', example='Stop'),
      }(name='ActionOnMaintenance', description='The attributes of the maintenance action of the instance.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp67acfmxazb4p****'),
      maintenanceWindows?: {
        maintenanceWindow?: [ 
        {
          endTime?: string(name='EndTime', description='The end time of the maintenance window.', example='18:00:00'),
          startTime?: string(name='StartTime', description='The start time of the maintenance window.', example='02:00:00'),
        }
      ](name='MaintenanceWindow')
      }(name='MaintenanceWindows', description='Details about the maintenance window.'),
      notifyOnMaintenance?: boolean(name='NotifyOnMaintenance', description='Indicates whether an event notification was sent before instance shutdown.', example='false'),
    }
  ](name='MaintenanceAttribute')
  }(name='MaintenanceAttributes', description='Details about the maintenance attributes.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of queried maintenance attributes.', example='100'),
}

model DescribeInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMaintenanceAttributesResponseBody(name='body'),
}

/**
  * This operation is used to query the specified maintenance policy of an instance, which contains the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the policy that you specify in response to instance shutdown.
  *
 */
async function describeInstanceMaintenanceAttributes(request: DescribeInstanceMaintenanceAttributesRequest): DescribeInstanceMaintenanceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceMaintenanceAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceModificationPriceRequest {
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk. You must specify this parameter only when you upgrade a non-I/O optimized instance of a retired instance type to an I/O optimized instance of an available instance type. For more information about instance types, see [Instance families](~~25378~~) and [Retired instance types](~~55263~~).

Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD

This parameter is empty by default.', example='cloud_ssd'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dataDisk?: [ 
    {
      category?: string(name='Category', description='The category of data disk. You can specify this parameter if you want to query the pricing information about newly attached subscription data disks. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   cloud: basic disk

This parameter is empty by default.

>  When you call the DescribeInstanceModificationPrice operation, you must specify at least one of the following parameters: `InstanceType` and `DataDisk.N.*`.', example='cloud_essd'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of data disk N that is an enhanced SSD (ESSD). The N value must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

Default value: PL1.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      size?: int32(name='Size', description='The capacity of data disk. Unit: GiB. Valid values:

*   Valid values when Category is set to cloud_efficiency: 20 to 32768.
*   Valid values when Category is set to cloud_ssd: 20 to 32768.
*   Valid values when Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.
    *   Valid values when PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when PerformanceLevel is set to PL3: 1261 to 32768.
*   Valid values when Category is set to cloud: 5 to 2000.

The default value is the minimum capacity allowed for the specified data disk category.', example='100'),
    }
  ](name='DataDisk', description='The list of data disk. The list size can up to 16.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to query pricing information for a configuration upgrade.', example='i-bp1f2o4ldh8l****', position='Query'),
  instanceType?: string(name='InstanceType', description='The new instance type. We recommend that you call the [DescribeResourcesModification](~~66187~~) operation to query the instance types available for configuration upgrades in a specified zone.

>  When you call the DescribeInstanceModificationPrice operation, you must specify at least one of the following parameters: `InstanceType` and `DataDisk.N.*`.', example='ecs.g6e.large', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceModificationPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit. 

Alibaba Cloud China site (aliyun.com): CNY. 

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='61.320'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='175.200'),
      tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='113.880'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.'),
        ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1234567890'),
      }
    ](name='Rule')
    }(name='Rules', description='Details about the promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and discount rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A3DC3196-379B-4F32-A2C5-B937134FAD8A'),
}

model DescribeInstanceModificationPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceModificationPriceResponseBody(name='body'),
}

/**
  * ## Description
  * *   Pricing information can be queried for unexpired subscription ECS instances only when you upgrade their configurations. The pricing information cannot be queried when the instance configurations are downgraded.
  * *   Pricing information cannot be queried for pay-as-you-go ECS instances when you change their configurations. Prices of existing pay-as-you-go ECS instances whose configurations are changed are the same as those of new pay-as-you-go instances. You can call the [DescribePrice](~~107829~~) operation to query the latest prices of ECS instances.
  * *   Before you upgrade the configurations of an instance, we recommend that you call the [DescribeResourcesModification](~~66187~~) operation to query the instance types available for configuration upgrades in a specified zone.
  *
 */
async function describeInstanceModificationPrice(request: DescribeInstanceModificationPriceRequest): DescribeInstanceModificationPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceModificationPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceMonitorDataRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  endTime: string(name='EndTime', description='The end of the time range to query. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. If the value of seconds (`ss`) is not `00`, the time is rounded up to the next minute.', example='2014-10-30T08:00:00Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp1a36962lrhj4ab****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The interval at which to retrieve monitored data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (`ss`) is not `00`, the time is rounded up to the next minute.', example='2014-10-29T23:00:00Z', position='Query'),
}

model DescribeInstanceMonitorDataResponseBody = {
  monitorData?: {
    instanceMonitorData?: [ 
    {
      BPSRead?: int32(name='BPSRead', description='The read bandwidth of the disks (system disk and data disks). Unit: Byte/s.', example='1000'),
      BPSWrite?: int32(name='BPSWrite', description='The write bandwidth of the disks (system disk and data disks). Unit: Byte/s.', example='13585'),
      CPU?: int32(name='CPU', description='The vCPU utilization of the instance. Unit: percent (%).', example='2'),
      CPUAdvanceCreditBalance?: float(name='CPUAdvanceCreditBalance', description='The overdrawn CPU credits of the burstable instance.', example='0.4'),
      CPUCreditBalance?: float(name='CPUCreditBalance', description='The total CPU credits of the burstable instance.', example='120'),
      CPUCreditUsage?: float(name='CPUCreditUsage', description='The number of CPU credits consumed by the burstable instance.', example='30'),
      CPUNotpaidSurplusCreditUsage?: float(name='CPUNotpaidSurplusCreditUsage', description='The unpaid excess credits.', example='0.5'),
      IOPSRead?: int32(name='IOPSRead', description='The number of read I/O operations per second on the disks (system disk and data disks).', example='1000'),
      IOPSWrite?: int32(name='IOPSWrite', description='The number of write I/O operations per second on the disks (system disk and data disks).', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1a36962lrhj4****'),
      internetBandwidth?: int32(name='InternetBandwidth', description='The public bandwidth of the instance. Unit: Kbit/s.', example='10'),
      internetRX?: int32(name='InternetRX', description='The public data traffic received by the instance during the period specified by the `Period` parameter, which starts from the time specified by the `TimeStamp` parameter. Unit: Kbit/s.', example='122'),
      internetTX?: int32(name='InternetTX', description='The public data traffic sent by the instance during the period specified by the `Period` parameter, which starts from the time specified by the `TimeStamp` parameter. Unit: Kbit/s.', example='343'),
      intranetBandwidth?: int32(name='IntranetBandwidth', description='The internal bandwidth of the instance. Unit: Kbit/s.', example='10'),
      intranetRX?: int32(name='IntranetRX', description='The internal data traffic received by the instance during the period specified by the `Period` parameter, which starts from the time specified by the `TimeStamp` parameter. Unit: Kbit/s.', example='122'),
      intranetTX?: int32(name='IntranetTX', description='The internal data traffic sent by the instance during the period specified by the `Period` parameter, which starts from the time specified by the `TimeStamp` parameter. Unit: Kbit/s.', example='343'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the monitoring data.', example='2014-10-30T05:00:00Z'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData', description='The monitoring data about the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInstanceMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMonitorDataResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Up to 400 monitoring data entries can be returned at a time. An error is returned if the value calculated based on the following formula is greater than 400: `(EndTime − StartTime)/Period`.
  * *   You can query the monitoring data of the last 30 days. If the value of the `StartTime` parameter is more than 30 days earlier than the current time, an error is returned.
  * *   In some scenarios, such as when the instance is in the Stopped state, the system cannot obtain the relevant information and a portion may be missing from the returned monitoring data.
  *
 */
async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRamRoleRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds?: string(name='InstanceIds', description='The IDs of instances. You can specify up to 100 instance IDs in a single request. You must specify at least one of the `InstanceIds` and `RamRoleName` parameters.', example='["i-bp67acfmxazb1p****", "i-bp67acfmxazb2p****", "bp67acfmxazb3p****"…]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', minimum=1, maximum=50, position='Query'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role. You can call the [ListRoles](~~28713~~) operation provided by Resource Access Management (RAM) to query the instance RAM roles that you created. You must specify at least one of the `InstanceIds` and `RamRoleName` parameters.', example='EcsServiceRole-EcsDocGuideTest', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance RAM role. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceRamRoleResponseBody = {
  instanceRamRoleSets?: {
    instanceRamRoleSet?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='EcsServiceRole-EcsDocGuideTest'),
    }
  ](name='InstanceRamRoleSet')
  }(name='InstanceRamRoleSets', description='Details about the instance RAM roles.'),
  regionId?: string(name='RegionId', description='The region ID of the instance RAM role.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instance RAM roles returned.', example='1'),
}

model DescribeInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceRamRoleResponseBody(name='body'),
}

/**
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
 */
async function describeInstanceRamRole(request: DescribeInstanceRamRoleRequest): DescribeInstanceRamRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceRamRole', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatusRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clusterId?: string(name='ClusterId', description='The cluster ID of the instance.', example='cls-bp67acfmxazb4p****', position='Query'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances.', example='i-bp1j4i2jdf3owlhe****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50.

Default value: 10.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-d', position='Query'),
}

model DescribeInstanceStatusResponseBody = {
  instanceStatuses?: {
    instanceStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of instance.', example='i-bp1j4i2jdf3owlhe****'),
      status?: string(name='Status', description='The state of the instance. Valid values:

* Pending: The instance is being created.
* Running: The instance is running.
* Starting: The instance is being started.
* Stopping: The instance is being stopped.
* Stopped: The instance is stopped.', example='Running'),
    }
  ](name='InstanceStatus')
  }(name='InstanceStatuses', description='The status information of the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='58'),
}

model DescribeInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatusResponseBody(name='body'),
}

/**
  * * For information about the lifecycle states of an ECS instance, see [Instance states](~~25687~~).
  * * You can also call this operation to query the list of ECS instances.
  *
 */
async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTopologyRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds?: string(name='InstanceIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceTopologyResponseBody = {
  requestId?: string(name='RequestId'),
  topologys?: {
    topology?: [ 
    {
      hostId?: string(name='HostId'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Topology')
  }(name='Topologys'),
}

model DescribeInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTopologyResponseBody(name='body'),
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTopology', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypeFamiliesRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  generation?: string(name='Generation', description='The generation of the instance family. For more information, see [Instance families](~~25378~~). Valid values:

*   ecs-1: Generation I, which consists of the earliest and cost-effective instance types
*   ecs-2: Generation II, which provides upgraded software and hardware and higher performance than Generation I
*   ecs-3: Generation III, which consists of high-performance instance families and is suitable for different business scenarios
*   ecs-4: Generation IV, which consists of enterprise-level instance families (such as g5, c5, and r5), Bare Metal Instance families (such as ebmc5s, ebmg5s, and ebmr5s), and burstable instance families (such as t5) that can meet a wide variety of business requirements with lower latency
*   ecs-5: Generation V, which consists of enterprise-level instance families (such as g6, c6, and r6), Bare Metal Instance families (such as ebmg6, ebmg6e, and ebmc6), and storage enhanced instance families (such as g6e) and delivers quick response and higher performance
*   ecs-6: Generation VI, which consists of enterprise-level instance families (such as hfc7, hfg7, and hfr7) and Bare Metal Instance families (such as ebmhfg7) and is in invitational preview', example='ecs-5', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
}

model DescribeInstanceTypeFamiliesResponseBody = {
  instanceTypeFamilies?: {
    instanceTypeFamily?: [ 
    {
      generation?: string(name='Generation', description='The generation of the instance family.', example='ecs-5'),
      instanceTypeFamilyId?: string(name='InstanceTypeFamilyId', description='The ID of the instance family.', example='ecs.g6'),
    }
  ](name='InstanceTypeFamily')
  }(name='InstanceTypeFamilies', description='Details about instance families.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInstanceTypeFamiliesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypeFamiliesResponseBody(name='body'),
}

async function describeInstanceTypeFamilies(request: DescribeInstanceTypeFamiliesRequest): DescribeInstanceTypeFamiliesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypeFamilies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  cpuArchitecture?: string(name='CpuArchitecture', description='The CPU architecture. Valid values:

*   X86
*   ARM', example='X86', position='Query'),
  GPUSpec?: string(name='GPUSpec', description='The GPU model.

> Fuzzy match is supported. For example, if an instance type provides NVIDIA V100 GPUs and you set this parameter to NVIDIA, information about the instance type is queried.', example='NVIDIA V100', position='Query'),
  instanceCategory?: string(name='InstanceCategory', description='The category of the instance type. Valid values:

*   General-purpose: general-purpose instance type
*   Compute-optimized: compute-optimized instance type
*   Memory-optimized: memory-optimized instance type
*   Big data: big data instance type
*   Local SSDs: instance type with local SSDs
*   High Clock Speed: instance type with high clock speeds
*   Enhanced: enhanced instance type
*   Shared: shared instance type
*   Compute-optimized with GPU: GPU-accelerated compute-optimized instance type
*   Visual Compute-optimized: visual compute-optimized instance type
*   Heterogeneous Service: heterogeneous service instance type
*   Compute-optimized with FPGA: FPGA-accelerated compute-optimized instance type
*   Compute-optimized with NPU: NPU-accelerated compute-optimized instance type
*   ECS Bare Metal: ECS Bare Metal Instance type
*   Super Computing Cluster: Super Computing Cluster (SCC) instance type', example='Big data', position='Query'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel: entry level (shared)
*   EnterpriseLevel: enterprise level
*   CreditEntryLevel: credit-based entry level', example='EntryLevel', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family to which the instance type belongs. For information about the valid values of this parameter, see [DescribeInstanceTypeFamilies](~~25621~~).

For more information about instance families, see [Instance families](~~25378~~).', example='ecs.g6', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', description='Instance type N. Valid values of N: 1 to 10. If this parameter is empty, information about all instance types is queried.', example='ecs.g6.large', position='Query'),
  localStorageCategory?: string(name='LocalStorageCategory', description='The category of local disks. For more information, see [Local disks](~~63138#section_n2w\\_8yc\\_5u1~~). Valid values:

*   local_hdd_pro: local Serial Advanced Technology Attachment (SATA) HDDs, which are used by d1ne or d1 instances
*   local_ssd_pro: local Non-Volatile Memory Express (NVMe) SSDs, which are used by i2, i2g, i1, ga1, or gn5 instances', example='local_ssd_pro', position='Query'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 1600.

Default value: 1600.', example='10', minimum=1, maximum=1600, position='Query'),
  maximumCpuCoreCount?: int32(name='MaximumCpuCoreCount', description='The maximum number of vCPUs. The value must be a positive integer.

> If an instance type has more vCPUs than the specified value, information about the instance type is not queried.', example='10', position='Query'),
  maximumCpuSpeedFrequency?: float(name='MaximumCpuSpeedFrequency', description='The maximum clock speed.

> If an instance type uses processors that have a higher clock speed than the specified value, information about the instance type is not queried.', example='3.2', position='Query'),
  maximumCpuTurboFrequency?: float(name='MaximumCpuTurboFrequency', description='The maximum turbo frequency.

> If an instance type uses processors that deliver a higher turbo frequency than the specified value, information about the instance type is not queried.', example='4.1', position='Query'),
  maximumGPUAmount?: int32(name='MaximumGPUAmount', description='The maximum number of GPUs. The value must be a positive integer.

> If an instance type provides more GPUs than the specified value, information about the instance type is not queried.', example='10', position='Query'),
  maximumMemorySize?: float(name='MaximumMemorySize', description='The maximum memory size. Unit: GiB.

> If the memory size of an instance type is larger than the specified value, information about the instance type is not queried.', example='60', position='Query'),
  minimumBaselineCredit?: int32(name='MinimumBaselineCredit', description='The minimum baseline CPU performance (overall baseline performance of all vCPUs) per t5 or t6 burstable instance.

> If a t5 or t6 instance type provides baseline CPU performance that is lower than the specified value, information about the instance type is not queried.', example='12', position='Query'),
  minimumCpuCoreCount?: int32(name='MinimumCpuCoreCount', description='The minimum number of vCPUs. The value must be a positive integer.

> If an instance type has fewer vCPUs than the specified value, information about the instance type is not queried.', example='2', position='Query'),
  minimumCpuSpeedFrequency?: float(name='MinimumCpuSpeedFrequency', description='The minimum clock speed.

> If an instance type uses processors that have a lower clock speed than the specified value, information about the instance type is not queried.', example='2.5', position='Query'),
  minimumCpuTurboFrequency?: float(name='MinimumCpuTurboFrequency', description='The minimum turbo frequency.

> If an instance type uses processors that deliver a lower turbo frequency than the specified value, information about the instance type is not queried.', example='3.2', position='Query'),
  minimumDiskQuantity?: int32(name='MinimumDiskQuantity', description='The minimum number of cloud disks.

> If an instance type supports fewer cloud disks than the specified value, information about the instance type is not queried.', example='4', position='Query'),
  minimumEniIpv6AddressQuantity?: int32(name='MinimumEniIpv6AddressQuantity', description='The minimum number of IPv6 addresses per ENI.

> If an instance type supports fewer IPv6 addresses per ENI than the specified value, information about the instance type is not queried.', example='2', position='Query'),
  minimumEniPrivateIpAddressQuantity?: int32(name='MinimumEniPrivateIpAddressQuantity', description='The minimum number of IPv4 addresses per ENI.

> If an instance type supports fewer IPv4 addresses per ENI than the specified value, information about the instance type is not queried.', example='2', position='Query'),
  minimumEniQuantity?: int32(name='MinimumEniQuantity', description='The minimum number of elastic network interfaces (ENIs).

> If an instance type supports fewer ENIs than the specified value, information about the instance type is not queried.', example='4', position='Query'),
  minimumEriQuantity?: int32(name='MinimumEriQuantity', description='The minimum number of ERIs.

> If an instance type supports fewer ERIs than the specified value, information about the instance type is not queried.', example='0', position='Query'),
  minimumGPUAmount?: int32(name='MinimumGPUAmount', description='The minimum number of GPUs. The value must be a positive integer.

> If an instance type provides fewer GPUs than the specified value, information about the instance type is not queried.', example='3', position='Query'),
  minimumInitialCredit?: int32(name='MinimumInitialCredit', description='The minimum initial CPU credits per t5 or t6 burstable instance.

> If a t5 or t6 instance type provides less initial vCPU credits than the specified value, information about the instance type is not queried.', example='12', position='Query'),
  minimumInstanceBandwidthRx?: int32(name='MinimumInstanceBandwidthRx', description='The minimum inbound internal bandwidth. Unit: Kbit/s.

> If an instance type provides an inbound internal bandwidth that is lower than the specified value, information about the instance type is not queried.', example='12288', position='Query'),
  minimumInstanceBandwidthTx?: int32(name='MinimumInstanceBandwidthTx', description='The minimum outbound internal bandwidth. Unit: Kbit/s.

> If an instance type provides an outbound internal bandwidth that is lower than the specified value, information about the instance type is not queried.', example='12288', position='Query'),
  minimumInstancePpsRx?: long(name='MinimumInstancePpsRx', description='The minimum inbound packet forwarding rate over the internal network. Unit: pps.

> If an instance type provides an inbound packet forwarding rate over the internal network that is lower than the specified value, information about the instance type is not queried.', example='15', position='Query'),
  minimumInstancePpsTx?: long(name='MinimumInstancePpsTx', description='The minimum outbound packet forwarding rate over the internal network. Unit: pps.

> If an instance type provides an outbound packet forwarding rate over the internal network that is lower than the specified value, information about the instance type is not queried.', example='15', position='Query'),
  minimumLocalStorageAmount?: int32(name='MinimumLocalStorageAmount', description='The minimum number of local disks.

> If an instance type supports fewer local disks than the specified value, information about the instance type is not queried.', example='4', position='Query'),
  minimumLocalStorageCapacity?: long(name='MinimumLocalStorageCapacity', description='The capacity of each local disk. Unit: GiB.', example='40', position='Query'),
  minimumMemorySize?: float(name='MinimumMemorySize', description='The minimum memory size. Unit: GiB.

> If the memory size of an instance type is smaller than the specified value, information about the instance type is not queried.', example='20', position='Query'),
  minimumPrimaryEniQueueNumber?: int32(name='MinimumPrimaryEniQueueNumber', description='The minimum default number of queues per primary network interface controller (NIC).

> If an instance type supports fewer queues per primary NIC than the specified value, information about the instance type is not queried.', example='8', position='Query'),
  minimumQueuePairNumber?: int32(name='MinimumQueuePairNumber', description='The minimum number of queue pair (QP) queues per elastic RDMA interface (ERI).

> If an instance type supports fewer QP queues per ERI than the specified value, information about the instance type is not queried.', example='8', position='Query'),
  minimumSecondaryEniQueueNumber?: int32(name='MinimumSecondaryEniQueueNumber', description='The minimum default number of queues per secondary NIC.

> If an instance type supports fewer queues per secondary NIC than the specified value, information about the instance type is not queried.', example='4', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeInstanceTypes operation. Leave this parameter empty the first time you call this operation.', example='e71d8a535bd9cc11', maxLength=50, position='Query'),
  nvmeSupport?: string(name='NvmeSupport', description='Specifies whether cloud disks can be attached by using the NVMe protocol. Valid values:

*   required: Cloud disks can be attached by using the NVMe protocol.
*   unsupported: Cloud disk cannot be attached by using the NVMe protocol.', example='required', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalProcessorModel?: string(name='PhysicalProcessorModel', description='The CPU model.

> Fuzzy match is supported. For example, if an instance type uses Intel Xeon (Ice Lake) Platinum 8369B processors and you set this parameter to Intel, information about the instance type is queried.', example='Intel Xeon(Ice Lake) Platinum 8369B', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceTypesResponseBody = {
  instanceTypes?: {
    instanceType?: [ 
    {
      baselineCredit?: int32(name='BaselineCredit', description='The baseline CPU performance (overall baseline performance of all vCPUs) per t5 or t6 burstable instance.', example='4'),
      cpuArchitecture?: string(name='CpuArchitecture', description='The CPU architecture. Valid values:

*   X86
*   ARM', example='X86'),
      cpuCoreCount?: int32(name='CpuCoreCount', description='The number of vCPUs.', example='4'),
      cpuSpeedFrequency?: float(name='CpuSpeedFrequency', description='The CPU base frequency. Unit: GHz.', example='2.7'),
      cpuTurboFrequency?: float(name='CpuTurboFrequency', description='The CPU turbo frequency. Unit: GHz.', example='3.5'),
      diskQuantity?: int32(name='DiskQuantity', description='The maximum number of cloud disks.', example='17'),
      eniIpv6AddressQuantity?: int32(name='EniIpv6AddressQuantity', description='The maximum number of IPv6 addresses per ENI.', example='1'),
      eniPrivateIpAddressQuantity?: int32(name='EniPrivateIpAddressQuantity', description='The maximum number of IPv4 addresses per ENI.', example='10'),
      eniQuantity?: int32(name='EniQuantity', description='The maximum number of ENIs.', example='3'),
      eniTotalQuantity?: int32(name='EniTotalQuantity', description='The maximum number of NICs, including the primary NIC, ENIs, and trunk NICs.

> This parameter is in invitational preview and is unavailable to general users.', example='0'),
      eniTrunkSupported?: boolean(name='EniTrunkSupported', description='Indicates whether NICs on instances of the instance type support trunking.

> This parameter is in invitational preview and is unavailable to general users.', example='true'),
      eriQuantity?: int32(name='EriQuantity', description='The number of ERIs.

> This parameter is in invitational preview and is unavailable to general users.', example='0'),
      GPUAmount?: int32(name='GPUAmount', description='The number of GPUs.', example='0'),
      GPUMemorySize?: float(name='GPUMemorySize', description='The amount of GPU memory per GPU. Unit: GiB.', example='32'),
      GPUSpec?: string(name='GPUSpec', description='The GPU model.', example='NVIDIA V100'),
      initialCredit?: int32(name='InitialCredit', description='The initial vCPU credits per t5 or t6 burstable instance.', example='120InstancePpsTx'),
      instanceBandwidthRx?: int32(name='InstanceBandwidthRx', description='The maximum inbound internal bandwidth. Unit: Kbit/s.', example='1024000'),
      instanceBandwidthTx?: int32(name='InstanceBandwidthTx', description='The maximum outbound internal bandwidth. Unit: Kbit/s.', example='1024000'),
      instanceCategory?: string(name='InstanceCategory', description='The category of the instance type. Valid values:

*   General-purpose: general-purpose instance type
*   Compute-optimized: compute-optimized instance type
*   Memory-optimized: memory-optimized instance type
*   Big data: big data instance type
*   Local SSDs: instance type with local SSDs
*   High Clock Speed: instance type with high clock speeds
*   Enhanced: enhanced instance type
*   Shared: shared instance type
*   Compute-optimized with GPU: GPU-accelerated compute-optimized instance type
*   Visual Compute-optimized: visual compute-optimized instance type
*   Heterogeneous Service: heterogeneous service instance type
*   Compute-optimized with FPGA: FPGA-accelerated compute-optimized instance type
*   Compute-optimized with NPU: NPU-accelerated compute-optimized instance type
*   ECS Bare Metal: ECS Bare Metal Instance type
*   Super Computing Cluster: SCC instance type', example='Big data'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel: entry level (shared).
*   EnterpriseLevel: enterprise level.
*   CreditEntryLevel: credit-based entry level. For more information, see [Overview](~~59977~~).', example='EnterpriseLevel'),
      instancePpsRx?: long(name='InstancePpsRx', description='The inbound packet forwarding rate over the internal network. Unit: pps.', example='500000'),
      instancePpsTx?: long(name='InstancePpsTx', description='The outbound packet forwarding rate over the internal network. Unit: pps.', example='500000'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family.', example='ecs.g6'),
      instanceTypeId?: string(name='InstanceTypeId', description='The ID of the instance type.', example='ecs.g6.large'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of local disks.', example='1'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The capacity of each local disk. Unit: GiB.', example='5000'),
      localStorageCategory?: string(name='LocalStorageCategory', description='The category of local disks. For more information, see [Local disks](~~63138~~). Valid values:

*   local_hdd_pro: local SATA HDDs, which are used by d1ne or d1 instances
*   local_ssd_pro: local NVMe SSDs, which are used by i2, i2g, i1, ga1, or gn5 instances', example='local_ssd_pro'),
      maximumQueueNumberPerEni?: int32(name='MaximumQueueNumberPerEni', description='The maximum number of queues per ENI (including primary ENI and secondary ENI).', example='4'),
      memorySize?: float(name='MemorySize', description='The memory size. Unit: GiB.', example='16'),
      networkCardQuantity?: int32(name='NetworkCardQuantity', description='The number of NICs.', example='100'),
      networkCards?: {
        networkCardInfo?: [ 
        {
          networkCardIndex?: int32(name='NetworkCardIndex', description='The index of the NIC.', example='1'),
        }
      ](name='NetworkCardInfo')
      }(name='NetworkCards', description='Details about NICs.'),
      networkEncryptionSupport?: boolean(name='NetworkEncryptionSupport', description='Indicates whether to allow network traffic transmitted over virtual private clouds (VPCs) to be encrypted. Valid values:

*   true: allows network traffic transmitted over VPCs to be encrypted.
*   false: does not allow network traffic transmitted over VPCs to be encrypted.', example='true'),
      nvmeSupport?: string(name='NvmeSupport', description='Indicates whether cloud disks can be attached by using the NVMe protocol. Valid values:

*   required: Cloud disks can be attached by using the NVMe protocol.
*   unsupported: Cloud disk cannot be attached by using the NVMe protocol.', example='unsupported'),
      physicalProcessorModel?: string(name='PhysicalProcessorModel', description='The CPU model.', example='Intel Xeon(Ice Lake) Platinum 8369B'),
      primaryEniQueueNumber?: int32(name='PrimaryEniQueueNumber', description='The default number of queues per primary NIC.', example='4'),
      queuePairNumber?: int32(name='QueuePairNumber', description='The maximum number of QP queues per ERI.', example='22'),
      secondaryEniQueueNumber?: int32(name='SecondaryEniQueueNumber', description='The default number of queues per secondary ENI.', example='4'),
      totalEniQueueQuantity?: int32(name='TotalEniQueueQuantity', description='The maximum number of queues on ENIs that the instance type supports.', example='12'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes', description='Details about the instance types.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='e71d8a535bd9cc11'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='00827261-20B7-4562-83F2-4DF39876A45A'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

/**
  * ## Description
  * Before you call this operation, take note of the following items:
  * *   The MaxResults parameter specifies the maximum number of entries to return on each page. The maximum value of this parameter is changed from 1600 to 100. If you called this operation in 2022, you can continue to use 1600 as the maximum value of MaxResults until November 15, 2023. As of November 15, 2023, only 100 can be used as the maximum value of MaxResults. If you do not specify the NextToken parameter when you call the DescribeInstanceTypes operation, only the first page of results that contains up to 100 entries is returned. If you want to retrieve more results, specify the NextToken parameter to perform paged queries, or specify filter conditions to filter results. For information about the best practices for using DescribeInstanceTypes, see [Compare the specifications of instance types](https://help.aliyun.com/practice_detail/461278) .
  * *   We recommend that you specify the MaxResults and NextToken parameters to perform paged queries. The first time you call the DescribeInstanceTypes operation, specify MaxResults to limit the maximum number of entries to return in the call. If the number of entries to return exceeds the specified value of MaxResults, the response includes a NextToken value. You can set NextToken to the return value and specify MaxResults in your next request to DescribeInstanceTypes to retrieve the next page of results.
  * *   The DescribeInstanceTypes operation is used to query only the specifications and performance information of instance types. To query instance types that are available in a specific region, call the [DescribeAvailableResource](~~66186~~) operation.
  * *   To use special instance types such as instance types that are unavailable for purchase, [submit a ticket](https://selfservice.console.aliyun.com/ticket/createIndex.htm).
  *
 */
async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceVncPasswdRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceVncPasswdResponseBody = {
  requestId?: string(name='RequestId'),
  vncPasswd?: string(name='VncPasswd'),
}

model DescribeInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncPasswdResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeInstanceVncPasswd(request: DescribeInstanceVncPasswdRequest): DescribeInstanceVncPasswdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceVncPasswd', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceVncUrlRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp1hzoinajzkh91h****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vncUrl?: string(name='VncUrl', description='The URL of the VNC management terminal.', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3DDvh%252FIA%252BYc73gWO48cBx2gBxUDVzaAnSKr74pq30mzqUYgeUMcB%252FbkNixDxdEA996'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The URL returned is valid only for 15 seconds. If a connection is not established within 15 seconds after a successful query, the URL expires and you must query it again.
  * *   The **KeepAlive** time of a connection to a VNC management terminal is 60 seconds. If you do not interact with the VNC management terminal within 60 seconds, the VNC management terminal is automatically disconnected.
  * *   When the VNC management terminal is disconnected, you can only reconnect to the VNC management terminal up to 30 times a minute.
  * *   You need to add `vncUrl`, `instanceId`, `isWindows`, and `password` parameters at the end of the URL `https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?`. Separate each parameter with an ampersand (`&`).`` Where,
  *     *   `vncUrl:` the `VncUrl` value returned after a successful query.
  *     *   `instanceId:` the ID of your instance.
  *     *   `isWindows:` specifies whether the operating system of the instance is Windows. Set the parameter to `true` if the operating system is Windows. Set the parameter to `false` if the operating system is not Windows.
  *     *   `password:` Optional. A six-character password used to connect to the VNC management terminal. It can contain digits and letters. You do not need to enter your password again when the connection is being established if you set this parameter.
  *         Example:
  *         ```
  *         ```
  * <https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%\\\\*\\\\*\\\\*\\\\*&instanceId=i-wz9hhwq5a6tm\\\\*\\\\*\\\\*\\\\*&isWindows=true> \\`\\`\\`
  *     or:
  *         ```
  * <https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%\\\\*\\\\*\\\\*\\\\*&instanceId=i-wz9hhwq5a6tm\\\\*\\\\*\\\\*\\\\*&isWindows=true&password=\\\\*\\\\*\\\\*\\\\>\\* \\`\\`\\`
  *
 */
async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceVncUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 used to query resources. Set the value to `CreationStartTime`. You can specify a time by setting both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter 1 used to query resources. Set the value to a time. If you specify this parameter, you must also specify the `Filter.1.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='The value of attribute N. Valid values of N: 1 to 20.', example='META_OPTIONS', position='Query'),
  deviceAvailable?: boolean(name='DeviceAvailable', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='false', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Default value: false. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the DryRunOperation error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned and the request is made.', example='false', position='Query'),
  eipAddresses?: string(name='EipAddresses', description='The elastic IP addresses (EIPs) of instances. This parameter is valid when InstanceNetworkType is set to vpc. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["42.1.1.**", "42.1.2.**", … "42.1.10.**"]', position='Query'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the High Performance Computing (HPC) cluster to which the instance belongs.', example='hpc-bp67acfmxazb4p****', position='Query'),
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether the access channel is enabled for instance metadata. Valid values:

*   enabled
*   disabled

Default value: enabled.

>  For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled', position='Query'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='0', position='Query'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether the security hardening mode (IMDSv2) is forcefully used to access instance metadata. Valid values:

*   optional: The security hardening mode (IMDSv2) is not forcefully used.
*   required: The security hardening mode (IMDSv2) is forcefully used. After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

>  For more information about modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp67acfmxazb4p****', position='Query'),
  innerIpAddresses?: string(name='InnerIpAddresses', description='The internal IP addresses of instances located in the classic network. This parameter is valid when InstanceNetworkType is set to classic. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["10.1.1.1", "10.1.2.1", … "10.1.10.1"]', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PostPaid', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The IDs of instances. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='["i-bp67acfmxazb4p****", "i-bp67acfmxazb4p****", … "i-bp67acfmxazb4p****"]', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the instance. Fuzzy search with the asterisk (\\*) wildcard characters is supported.', example='Test', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the instance.', example='ecs.g5', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

>  When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instances, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic', position='Query'),
  ioOptimized?: boolean(name='IoOptimized', description='Specifies whether the instance is I/O optimized.', example='true', position='Query'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N of the elastic network interface (ENI). You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair bound to the instance.', example='KeyPairNameTest', position='Query'),
  lockReason?: string(name='LockReason', description='The reason why the instance is locked. Valid values:

*   financial: The instance is locked due to overdue payments.
*   security: The instance is locked due to security reasons.
*   recycling: The preemptible instance is locked and pending release.
*   dedicatedhostfinancial: The instance is locked due to overdue payments for the dedicated host.
*   refunded: The instance is locked because a refund is made for the instance.', example='security', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is not specified or is set to a value smaller than 10, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10', minimum=1, maximum=100, position='Query'),
  needSaleCycle?: boolean(name='NeedSaleCycle', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='false', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeInstances operation.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  privateIpAddresses?: string(name='PrivateIpAddresses', description='The private IP addresses of instances located in VPCs. This parameter is valid when InstanceNetworkType is set to vpc. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["172.16.1.1", "172.16.2.1", … "172.16.10.1"]', position='Query'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='The public IP addresses of instances. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["42.1.1.**", "42.1.2.**", … "42.1.10.**"]', position='Query'),
  rdmaIpAddresses?: string(name='RdmaIpAddresses', description='The Remote Direct Memory Access (RDMA) IP address of the HPC instance.', example='10.10.10.102', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the instance belongs.', example='sg-bp67acfmxazb4p****', position='Query'),
  status?: string(name='Status', description='The state of the instance. Valid values:

*   Pending: The instance is being created.
*   Running: The instance is running.
*   Starting: The instance is being started.
*   Stopping: The instance is being stopped.
*   Stopped: The instance is stopped.', example='Running', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the instance. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance is connected.', example='vsw-bp67acfmxazb4p****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the instance belongs.', example='v-bp67acfmxazb4p****', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the pay-as-you-go instance.', example='2017-12-10T04:04Z'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster to which the instance belongs.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='c-bp67acfmxazb4p****'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='8'),
      cpuOptions?: {
        coreCount?: int32(name='CoreCount', description='The number of physical CPU cores.', example='2'),
        numa?: string(name='Numa', description='The number of threads allocated. Valid value: 2.', example='2'),
        threadsPerCore?: int32(name='ThreadsPerCore', description='The number of threads per CPU core.', example='4'),
      }(name='CpuOptions', description='Details about the CPU options.'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: standard mode. For more information, see the "Standard mode" section in [Overview](~~59977~~).
*   Unlimited: unlimited mode. For more information, see the "Unlimited mode" section in [Overview](~~59977~~).', example='Standard'),
      dedicatedHostAttribute?: {
        dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp67acfmxazb4h****'),
        dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp67acfmxazb4p****'),
        dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='testDedicatedHostName'),
      }(name='DedicatedHostAttribute', description='Details about the dedicated host. It is an array that consists of the DedicatedHostClusterId, DedicatedHostId, and DedicatedHostName parameters.'),
      dedicatedInstanceAttribute?: {
        affinity?: string(name='Affinity', description='Indicates whether the instance on the dedicated host is associated with the dedicated host. Valid values: 

- default: The instance is not associated with the dedicated host. When the instance is started from economical mode, the instance may be automatically deployed on another dedicated host in the automatic deployment resource pool.
- host: The instance is associated with the dedicated host. When the instance is started from economical mode, the instance is still deployed on the original dedicated host.', example='default'),
        tenancy?: string(name='Tenancy', description='Indicates whether the instance is hosted on a dedicated host. Valid values:

- default: The instance is not hosted on a dedicated host.
- host: The instance is hosted on a dedicated host.', example='default'),
      }(name='DedicatedInstanceAttribute', description='The attributes of the instance on the dedicated host.'),
      deletionProtection?: boolean(name='DeletionProtection', description='The release protection attribute of the instance. This parameter indicates whether you can use the ECS console or call the DeleteInstance operation to release the instance.

*   true: Release protection is enabled for the instance.
*   false: Release protection is disabled for the instance.

>  This parameter is applicable only to pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false'),
      deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group to which the instance belongs in a deployment set.', example='1'),
      deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set in which the instance is deployed.', example='ds-bp67acfmxazb4p****'),
      description?: string(name='Description', description='The description of the instance.', example='testDescription'),
      deviceAvailable?: boolean(name='DeviceAvailable', description='Indicates whether data disks can be attached to the instance.', example='true'),
      ecsCapacityReservationAttr?: {
        capacityReservationId?: string(name='CapacityReservationId', description='The ID of the capacity reservation.', example='cr-bp67acfmxazb4p****'),
        capacityReservationPreference?: string(name='CapacityReservationPreference', description='The preference of the capacity reservation.', example='cr-bp67acfmxazb4p****'),
      }(name='EcsCapacityReservationAttr', description='Details about the capacity reservation related to the instance.'),
      eipAddress?: {
        allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-2ze88m67qx5z****'),
        bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the EIP. Unit: Mbit/s.', example='5'),
        internetChargeType?: string(name='InternetChargeType', description='The billing method of the EIP. Valid values: 

- PayByBandwidth
- PayByTraffic', example='PayByTraffic'),
        ipAddress?: string(name='IpAddress', description='The EIP.', example='42.112.**.**'),
        isSupportUnassociate?: boolean(name='IsSupportUnassociate', description='Indicates whether the EIP can be disassociated.', example='true'),
      }(name='EipAddress', description='Details about the EIP associated with the instance.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      GPUAmount?: int32(name='GPUAmount', description='The number of GPUs for the instance type.', example='4'),
      GPUSpec?: string(name='GPUSpec', description='The category of GPUs for the instance type.', example='NVIDIA V100'),
      hibernationOptions?: {
        configured?: boolean(name='Configured', description='>  This parameter is in invitational preview and is unavailable for general users.', example='false'),
      }(name='HibernationOptions', description='>  This parameter is in invitational preview and is unavailable for general users.'),
      hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
      hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster to which the instance belongs.', example='hpc-bp67acfmxazb4p****'),
      ISP?: string(name='ISP', description='>  This parameter is in invitational preview and is unavailable for general users.', example='null'),
      imageId?: string(name='ImageId', description='The ID of the image that the instance is running.', example='m-bp67acfmxazb4p****'),
      imageOptions?: {
        loginAsNonRoot?: boolean(name='LoginAsNonRoot', description='Indicates whether the instance that uses the image supports logons of the ecs-user user. Valid values: 

- true: The instance that uses the image supports logons of the ecs-user user.
- false: The instance that uses the image does not support logons of the ecs-user user.', example='false'),
      }(name='ImageOptions', description='Details about the image options.'),
      innerIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='InnerIpAddress', description='The internal IP addresses of the instance located in the classic network.'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='InstanceNameTest'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic
*   vpc', example='vpc'),
      instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the instance.', example='ecs.g5'),
      internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic', example='PayByTraffic'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s.', example='50'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s.', example='5'),
      ioOptimized?: boolean(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
      keyPairName?: string(name='KeyPairName', description='The name of the key pair bound to the instance.', example='testKeyPairName'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of local disks attached to the instance.', example='2'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The capacity of local disks attached to the instance.', example='1000'),
      memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='16384'),
      metadataOptions?: {
        httpEndpoint?: string(name='HttpEndpoint', description='Indicates whether the access channel is enabled for instance metadata. Valid values:

- enabled
- disabled', example='enabled'),
        httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is unavailable.', example='0'),
        httpTokens?: string(name='HttpTokens', description='Indicates whether the security hardening mode (IMDSv2) is forcefully used to access instance metadata. Valid values: 

- optional: The security hardening mode (IMDSv2) is not forcefully used.
- required: The security hardening mode (IMDSv2) is forcefully used.', example='optional'),
      }(name='MetadataOptions', description='Details about the metadata options.'),
      networkInterfaces?: {
        networkInterface?: [ 
        {
          ipv4PrefixSets?: {
            ipv4PrefixSet?: [ 
            {
              ipv4Prefix?: string(name='Ipv4Prefix', description='The IPv4 prefix.', example='47.122.*.*/19'),
            }
          ](name='Ipv4PrefixSet')
          }(name='Ipv4PrefixSets', description='The sets of IPv4 prefix.'),
          ipv6PrefixSets?: {
            ipv6PrefixSet?: [ 
            {
              ipv6Prefix?: string(name='Ipv6Prefix', description='The IPv6 prefix.', example='2001:1111:*:*::/64'),
            }
          ](name='Ipv6PrefixSet')
          }(name='Ipv6PrefixSets', description='The sets of IPv6 prefix.'),
          ipv6Sets?: {
            ipv6Set?: [ 
            {
              ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2408:4321:180:1701:94c7:bc38:3bfa:***'),
            }
          ](name='Ipv6Set')
          }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI. This parameter has a value only when the `AdditionalAttributes.N` request parameter is set to `NETWORK_PRIMARY_ENI_IP`.'),
          macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:32:b4:**'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-2zeh9atclduxvf1z****'),
          primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the ENI.', example='172.17.**.***'),
          privateIpSets?: {
            privateIpSet?: [ 
            {
              primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address.', example='true'),
              privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance to which the ENI is bound.', example='172.17.**.**'),
            }
          ](name='PrivateIpSet')
          }(name='PrivateIpSets', description='Details about the private IP address.'),
          type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary', example='Primary'),
        }
      ](name='NetworkInterface')
      }(name='NetworkInterfaces', description='Details about the ENIs bound to the instance.'),
      OSName?: string(name='OSName', description='The name of the operating system of the instance.'),
      OSNameEn?: string(name='OSNameEn', description='The English name of the operating system of the instance.', example='CentOS  7.4 64 bit'),
      OSType?: string(name='OSType', description='The type of the operating system of the instance. Valid values:

*   windows
*   linux', example='linux'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockMsg?: string(name='LockMsg', description='The message returned when the instance was locked.', example='The specified instance is locked due to financial reason.'),
          lockReason?: string(name='LockReason', description='The reason why the instance was locked. Valid values:

- financial: The instance was locked due to overdue payments.
- security: The instance was locked due to security reasons.
- recycling: The preemptible instance was locked and pending release.
- dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
- refunded: The instance was locked because a refund was made for the instance.', example='Recycling'),
        }
      ](name='LockReason')
      }(name='OperationLocks', description='The reasons why the instance was locked.'),
      publicIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='PublicIpAddress', description='The public IP addresses of the instance.'),
      rdmaIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='RdmaIpAddress', description='The RDMA IP addresses of the HPC instance.'),
      recyclable?: boolean(name='Recyclable', description='Indicates whether the instance can be recycled.', example='false'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      saleCycle?: string(name='SaleCycle', description='>  The parameter is discontinued.', example='month'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds', description='The IDs of the security groups to which the instance belongs.'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the instance.', example='51d1353b-22bf-4567-a176-8b3e12e4****'),
      spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   Protection periods of 2, 3, 4, 5, and 6 hours are in invitational preview. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that the preemptible instance has no protection period.

>  This parameter is returned when the SpotStrategy parameter is set to SpotWithPriceLimit or SpotAsPriceGo.', example='1'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. It can be accurate to three decimal places. This parameter is valid only when the SpotStrategy parameter is set to SpotWithPriceLimit.', example='0.98'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.', example='NoSpot'),
      startTime?: string(name='StartTime', description='The time when the instance was last started. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      status?: string(name='Status', description='The state of the instance.', example='Running'),
      stoppedMode?: string(name='StoppedMode', description='Indicates whether the instance continues to be billed after it is stopped. Valid values:

*   KeepCharging: The instance is stopped in standard mode. The billing of the instance continues after the instance is stopped, and resources are retained for the instance.
*   StopCharging: The instance is stopped in economical mode. The billing of some resources of the instance stops after the instance is stopped. When the instance is stopped, its resources such as vCPUs, memory, and public IP address are released. The instance may be unable to start again if some required resources are out of stock in the current region.
*   Not-applicable: The instance does not support economical mode.', example='KeepCharging'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the instance.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the instance.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the instance.'),
      vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='10'),
      vpcAttributes?: {
        natIpAddress?: string(name='NatIpAddress', description='The NAT IP address of the instance. It is used by ECS instances in different VPCs for communication.', example='172.17.**.**'),
        privateIpAddress?: {
          ipAddress?: [ string ](name='IpAddress')
        }(name='PrivateIpAddress', description='The private IP addresses of the instance.'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-2zeh0r1pabwtg6wcs****'),
        vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeuphj08tt7q3brd****'),
      }(name='VpcAttributes', description='The VPC attributes of the instance.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='Instance')
  }(name='Instances', description='Details about the instances.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances returned.

>  If you specify the `MaxResults` and `NextToken` parameters to perform a paged query, the value of the `TotalCount` response parameter is invalid.', example='1'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

/**
  * * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
  * * If you are using a Resource Access Management (RAM) user or RAM role that does not have the permissions to call this operation, an empty list is returned. You can include the `DryRun` parameter in your request to check whether the empty list is caused by lack of permissions.
  * * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  * * You can use one of the following methods to check the responses:
  *     * Method 1: During a paged query, when you call the DescribeInstances operation to retrieve the first page of results, set `MaxResults` to specify the maximum number of entries to return in the call. The return value of `NextToken` is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeInstances operation to retrieve a new page of results, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  *     * Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `MaxResults` or `NextToken` is specified, the `PageSize` and `PageNumber` request parameters do not take effect and the `TotalCount` response parameter is invalid.
  *
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesFullStatusRequest {
  eventPublishTime?: {
    end?: string(name='End', description='The end of the period during which system events are published. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-07T00:00:00Z'),
    start?: string(name='Start', description='The beginning of the period during which system events are published. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T00:00:00Z'),
  }(name='EventPublishTime', position='Query'),
  notBefore?: {
    end?: string(name='End', description='The end of the period during which O\\&M tasks related to scheduled system events are executed. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T00:00:00Z'),
    start?: string(name='Start', description='The beginning of the period during which O\\&M tasks related to scheduled system events are executed. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-07T00:00:00Z'),
  }(name='NotBefore', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  eventId?: [ string ](name='EventId', description='The IDs of the event. You can specify up to 100 event IDs in a single request.', example='e-bp1hygp5b04o56l0****', position='Query'),
  eventType?: string(name='EventType', description='The type of the system event. This parameter is valid only when the InstanceEventType.N parameter is not specified. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance failure.
*   InstanceExpiration.Stop: The subscription instance is stopped due to expiration.
*   InstanceExpiration.Delete: The subscription instance is released due to expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.', example='InstanceExpiration.Stop', position='Query'),
  healthStatus?: string(name='HealthStatus', description='The health state of the instance. Valid values:

*   Impaired: The instance is impaired.
*   Warning: The performance of the instance is degraded.
*   Maintaining: The instance is being maintained.
*   Initializing: The instance is being initialized.
*   InsufficientData: The state cannot be determined due to insufficient data.
*   NotApplicable: The state is not applicable.

All these values are case-sensitive.', example='Maintaining', position='Query'),
  instanceEventType?: [ string ](name='InstanceEventType', description='The types of system events. You can specify up to 30 event types in a single request.', example='InstanceExpiration.Stop', position='Query'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances. You can specify up to 100 instance IDs in a single request.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be a positive integer.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The lifecycle state of the instance. Valid values:

*   Starting: The instance is being started.
*   Running: The instance is running.
*   Stopped: The instance is stopped.', example='Running', position='Query'),
}

model DescribeInstancesFullStatusResponseBody = {
  instanceFullStatusSet?: {
    instanceFullStatusType?: [ 
    {
      healthStatus?: {
        code?: int32(name='Code', description='The code of the health state.', example='64'),
        name?: string(name='Name', description='The name of the health state.', example='Warning'),
      }(name='HealthStatus', description='The health state of the instance.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      scheduledSystemEventSet?: {
        scheduledSystemEventType?: [ 
        {
          eventCycleStatus?: {
            code?: int32(name='Code', description='The code of the event state.', example='24'),
            name?: string(name='Name', description='The name of the event state.', example='Scheduled'),
          }(name='EventCycleStatus', description='The state of the event. Valid values:'),
          eventId?: string(name='EventId', description='The ID of the event.', example='e-bp1hygp5b04o56l0****'),
          eventPublishTime?: string(name='EventPublishTime', description='The time when the event was published. The time is displayed in UTC.', example='2017-11-30T06:32:31Z'),
          eventType?: {
            code?: int32(name='Code', description='The code of the event type.', example='1'),
            name?: string(name='Name', description='The name of the event type.', example='SystemMaintenance.Reboot'),
          }(name='EventType', description='The type of the event.'),
          extendedAttribute?: {
            device?: string(name='Device', description='The device name of the local disk.', example='/dev/vdb'),
            diskId?: string(name='DiskId', description='The ID of the local disk.', example='d-bp67acfmxazb4p****'),
            inactiveDisks?: {
              inactiveDisk?: [ 
              {
                creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-07-27T13:53:25Z'),
                deviceCategory?: string(name='DeviceCategory', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_ssd'),
                deviceSize?: string(name='DeviceSize', description='The size of the disk. Unit: GiB.', example='80'),
                deviceType?: string(name='DeviceType', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='system'),
                releaseTime?: string(name='ReleaseTime', description='The time when the disk was released. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-07-27T13:53:25Z'),
              }
            ](name='InactiveDisk')
            }(name='InactiveDisks', description='Details about the inactive cloud disks or local disks that have been released and must be cleared.'),
          }(name='ExtendedAttribute', description='The extended attributes of system events generated for instances that have local disks attached.'),
          impactLevel?: string(name='ImpactLevel', description='The impact level of the event.', example='100'),
          notBefore?: string(name='NotBefore', description='The scheduled time when to execute the O\\&M task related to the event. The time is displayed in UTC.', example='2017-12-07T00:00:00Z'),
          reason?: string(name='Reason', description='The reason why the event was scheduled.', example='A simulated event.'),
        }
      ](name='ScheduledSystemEventType')
      }(name='ScheduledSystemEventSet', description='Details about the scheduled system events.'),
      status?: {
        code?: int32(name='Code', description='The code of the instance lifecycle state.', example='1'),
        name?: string(name='Name', description='The name of the instance lifecycle state.', example='Running'),
      }(name='Status', description='The lifecycle state of the instance.'),
    }
  ](name='InstanceFullStatusType')
  }(name='InstanceFullStatusSet', description='Details about the full status information of instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeInstancesFullStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesFullStatusResponseBody(name='body'),
}

/**
  * The response includes instance states and instance system events in the Scheduled state.
  * If a period is specified, events are queried based on the specified period.
  *
 */
async function describeInstancesFullStatus(request: DescribeInstancesFullStatusRequest): DescribeInstancesFullStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstancesFullStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationResultsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandId?: string(name='CommandId', description='The ID of the command.', example='c-hz0jdfwcsr****', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding method of the `Output` response parameter. Valid values:

*   PlainText: returns the original command content and command output.
*   Base64: returns the Base64-encoded command content and command output.

Default value: Base64.', example='PlainText', position='Query'),
  includeHistory?: boolean(name='IncludeHistory', description='Specifies whether to return the results of historical scheduled executions. Valid values:

*   true: returns the results of historical scheduled executions. When this parameter is set to true, the `InvokeId` parameter must be set to the ID of a scheduled task.
*   false: does not return the results of historical scheduled executions.

Default value: false.', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1i7gg30r52z2em****', position='Query'),
  invokeId?: string(name='InvokeId', description='The ID of the command task. You can call the [DescribeInvocations](~~64840~~) operation to query the command task IDs.', example='t-hz0jdfwd9f****', position='Query'),
  invokeRecordStatus?: string(name='InvokeRecordStatus', description='The execution state of the command. Valid values:

*   Running
*   Finished
*   Failed
*   Stopped

> To ensure compatibility, we recommend that you use the `InvocationStatus` parameter instead of the InvokeRecordStatus parameter.', example='Running', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. After you set this parameter, command execution results in the specified resource group are queried.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command task. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command task. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model DescribeInvocationResultsResponseBody = {
  invocation?: {
    invocationResults?: {
      invocationResult?: [ 
      {
        commandId?: string(name='CommandId', description='The ID of the command.', example='c-hz0jdfwcsr****'),
        containerId?: string(name='ContainerId', description='The ID of the container.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
        containerName?: string(name='ContainerName', description='The name of the container.', example='test-container'),
        dropped?: int32(name='Dropped', description='The size of the text that is truncated and discarded when the `Output` value exceeds 24 KB in size.', example='0'),
        errorCode?: string(name='ErrorCode', description='The error code returned when the command cannot be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   InstanceNotExists: The instance does not exist or has been released.
*   InstanceReleased: The instance was released while the command was being run.
*   InstanceNotRunning: The instance was not running while the command was being run.
*   CommandNotApplicable: The command is not applicable to the specified instance.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The cron expression used to specify a schedule is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The request to send the command timed out.
*   ExecutionTimeout: The execution timed out.
*   ExecutionException: An exception occurred while the command was being run.
*   ExecutionInterrupted: The execution was interrupted.
*   ExitCodeNonzero: The execution is complete, but the exit code is not 0.', example='InstanceNotExists'),
        errorInfo?: string(name='ErrorInfo', description='The error message returned when the command cannot be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   the specified instance does not exists
*   the instance has released when create task
*   the instance is not running when create task
*   the command is not applicable
*   the specified account does not exists
*   the specified directory does not exists
*   the cron job expression is invalid
*   the aliyun service is not running on the instance
*   the aliyun service in the instance does not response
*   the aliyun service in the instance is upgrading now
*   the aliyun service in the instance need upgrade
*   the command delivery has been timeout
*   the command execution has been timeout
*   the command execution got an exception
*   the command execution has been interrupted
*   the command execution exit code is not zero', example='the specified instance does not exists'),
        exitCode?: long(name='ExitCode', description='The exit code of the command execution.

*   For Linux instances, the value is the exit code of the shell command.
*   For Windows instances, the value is the exit code of the batch or PowerShell command.', example='0'),
        finishedTime?: string(name='FinishedTime', description='The end time of the execution. If an execution times out, the end time of the execution is subject to the value of the TimedOut parameter specified in the [CreateCommand](~~64844~~) operation.', example='2019-12-20T06:15:56Z'),
        instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp1i7gg30r52z2em****'),
        invocationStatus?: string(name='InvocationStatus', description='The execution state on a single instance. Valid values:

*   Pending: The command is being verified or sent.

*   Invalid: The specified command type or parameter is invalid.

*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.

*   Running: The command is being run on the instance.

*   Success:

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The last execution succeeds, the exit code is 0, and the specified cycle ends.

*   Failed:

    *   Command that is set to run only once: The execution is complete, but the exit code is not 0.
    *   Command that is set to run on a schedule: The last execution is complete, the exit code is not 0, and the specified cycle is about to end.

*   Error: The execution cannot proceed due to an exception.

*   Timeout: The execution times out.

*   Cancelled: The execution is canceled, and the command is not run.

*   Stopping: The running command is being stopped.

*   Terminated: The command is terminated while it is being run.

*   Scheduled:

    *   Command that is set to run only once: The command is not applicable.
    *   Command that is set to run on a schedule: The command is waiting to be run.', example='Success'),
        invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz0jdfwd9f****'),
        invokeRecordStatus?: string(name='InvokeRecordStatus', description='The execution state of the command.', example='Running'),
        output?: string(name='Output', description='The command output.', example='MTU6MzA6MDEK'),
        repeats?: int32(name='Repeats', description='The number of times that the command is run on the instance.

*   If the command is set to run only once on the instance, the value is 0 or 1.
*   If the command is set to run on a schedule on the instance, the value is the number of times that the command is run.', example='0'),
        startTime?: string(name='StartTime', description='The time when the command started to be run on the instance.', example='2019-12-20T06:15:55Z'),
        stopTime?: string(name='StopTime', description='The time when the command stopped being run on the instance. If you call the `StopInvocation` operation to manually stop the execution, the value is the time when you called the operation.', example='2020-01-19T09:15:47Z'),
        tags?: {
          tag?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key of the command task.', example='owner'),
            tagValue?: string(name='TagValue', description='The tag value of the command task.', example='zhangsan'),
          }
        ](name='Tag')
        }(name='Tags', description='The tags of the command task.'),
        username?: string(name='Username', description='The username that was used to run the command on the instance.', example='root'),
      }
    ](name='InvocationResult')
    }(name='InvocationResults', description='The execution results.'),
    pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='1'),
    totalCount?: long(name='TotalCount', description='The total number of the commands.', example='1'),
  }(name='Invocation', description='Details of the execution results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeInvocationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationResultsResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the actual execution results.
  * *   You can query information about command executions within the last four weeks. A maximum of 100,000 pieces of execution information can be retained.
  *
 */
async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocationResults', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvocationsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandId?: string(name='CommandId', description='The ID of the command. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.', example='c-hz0jdfwcsr****', position='Query'),
  commandName?: string(name='CommandName', description='The name of the command.', example='CommandTestName', position='Query'),
  commandType?: string(name='CommandType', description='The type of the command. If this parameter and `InstanceId` are both specified, this parameter does not take effect.', example='RunShellScript', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the `CommandContent` and `Output` response parameters. Valid values:

*   PlainText: returns the original command content and command outputs.
*   Base64: returns the Base64-encoded command content and command outputs.

Default value: Base64.', example='PlainText', position='Query'),
  includeOutput?: boolean(name='IncludeOutput', description='Specifies whether to return the command outputs in the response.

*   true: The command outputs are returned. When this parameter is set to true, you must specify `InvokeId`, `InstanceId`, or both.
*   false: The command outputs are not returned.

Default value: false.', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. When you specify this parameter, the system queries all the execution records of all the commands that run on the instance.', example='i-bp1i7gg30r52z2em****', position='Query'),
  invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz0jdfwd9f****', position='Query'),
  invokeStatus?: string(name='InvokeStatus', description='The overall execution state of the command. The value of this parameter depends on the execution states on all involved instances. Valid values:

*   Running:

    *   Scheduled execution: Before you manually stop the execution of the command, the overall execution state is always Running.
    *   One-time execution: If the execution is in progress on one or more instances, the overall execution state is Running.

*   Finished:

    *   Scheduled execution: The overall execution state can never be Finished.
    *   One-time execution: The execution is complete on all instances, or the execution is manually stopped on some instances and is complete on other instances.

*   Failed:

    *   Scheduled execution: The overall execution state can never be Failed.
    *   One-time execution: The execution fails on all instances.

*   PartialFailed:

    *   Scheduled execution: The overall execution state can never be PartialFailed.
    *   One-time execution: The execution fails on some instances.

*   Stopped: The execution is stopped.', example='Finished', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Page start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  repeatMode?: string(name='RepeatMode', description='The execution mode of the command. Valid values:

*   Once: The command is immediately run.
*   Period: The command is run on a schedule.
*   NextRebootOnly: The command is automatically run the next time the instance starts.
*   EveryReboot: The command is automatically run every time the instance starts.

This parameter is empty by default, which indicates that commands run in all modes are queried.', example='Once', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. After you set this parameter, command execution results in the specified resource group are queried.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command task. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the command.', position='Query'),
  timed?: boolean(name='Timed', description='Specifies whether to query the commands that are to be automatically run. Valid values:

*   true: queries the commands that meet the following requirements: The commands are run by calling the `RunCommand` or `InvokeCommand` operation with `RepeatMode` set to `Period`, `NextRebootOnly`, or `EveryReboot`. The executions of the commands are not canceled and not complete or are not stopped and not complete.

*   false: queries commands that meet the following requirements:

    *   The commands are run by calling the `RunCommand` or `InvokeCommand` operation with `RepeatMode` set to `Once`.
    *   The executions of the commands are canceled, stopped, or complete.

Default value: false.', example='true', position='Query'),
}

model DescribeInvocationsResponseBody = {
  invocations?: {
    invocation?: [ 
    {
      commandContent?: string(name='CommandContent', description='The Base64-encoded command content.', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
      commandDescription?: string(name='CommandDescription', description='The description of the command.', example='testDescription'),
      commandId?: string(name='CommandId', description='The ID of the command.', example='c-hz0jdfwcsr****'),
      commandName?: string(name='CommandName', description='The name of the command.', example='CommandTestName'),
      commandType?: string(name='CommandType', description='The type of the command.', example='RunShellScript'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='test-container'),
      creationTime?: string(name='CreationTime', description='The time when the command task was created.', example='2020-01-19T09:15:46Z'),
      frequency?: string(name='Frequency', description='The schedule on which to run the command. For information about the value specifications, see [Cron expression](~~64769~~).', example='0 */20 * * * *'),
      invocationStatus?: string(name='InvocationStatus', description='The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values:

*   Pending: The command is being verified or sent. When the execution state on at least one instance is Pending, the overall execution state is Pending.

*   Scheduled: The command scheduled to run is sent and pending execution. When the execution state on at least one instance is Scheduled, the overall execution state is Scheduled.

*   Running: The command is being run on the instances. When the execution state on at least one instance is Running, the overall execution state is Running.

*   Success: When the execution state on at least one instance is Success and the execution state on other instances is Stopped or Success, the overall execution state is Success.

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The last execution is complete, the exit code is 0, and the specified cycle ends.

*   Failed: When the execution state on all instances is Stopped or Failed, the overall execution state is Failed. When the execution state on an instance is one of the following values, Failed is returned as the overall execution state:

    *   Invalid: The command is invalid.
    *   Aborted: The command failed to be sent.
    *   Failed: The command execution is complete, but the exit code is not 0.
    *   Timeout: The execution timed out.
    *   Error: An error occurred while the command was being run on the instance.

*   Stopping: The command task is being stopped. When the execution state on at least one instance is Stopping, the overall execution state is Stopping.

*   Stopped: The command task is stopped. When the execution state on all instances is Stopped, the overall execution state is Stopped. When the execution state on an instance is one of the following values, Stopped is returned as the overall execution state:

    *   Cancelled: The command task is canceled.
    *   Terminated: The command task is terminated.

*   PartialFailed: The execution is complete on some instances and fails on other instances. When the execution state is Success on some instances and is Failed or Stopped on other instances, the overall execution state is PartialFailed.

> The `InvokeStatus` response parameter functions similarly to this parameter. We recommend that you ignore InvokeStatus and check the value of InvocationStatus.', example='Running'),
      invokeId?: string(name='InvokeId', description='The ID of the command task.', example='t-hz0jdfwd9f****'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime', description='The start time of the execution.', example='2019-12-20T06:15:54Z'),
          dropped?: int32(name='Dropped', description='The size of the text that is truncated and discarded when the Output value exceeds 24 KB in size.', example='0'),
          errorCode?: string(name='ErrorCode', description='The code that indicates why the command failed to be sent or run. Valid values:

*   If this parameter is empty, the execution is normal.
*   InstanceNotExists: The instance does not exist or was released.
*   InstanceReleased: The instance was released while the command was being run.
*   InstanceNotRunning: The instance was not in the Running state while the command started to be run.
*   CommandNotApplicable: The command is not applicable to the specified instance.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The cron expression used to specify a schedule is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The request to send the command timed out.
*   ExecutionTimeout: The execution timed out.
*   ExecutionException: An exception occurs while the command is being run.
*   ExecutionInterrupted: The execution was interrupted.
*   ExitCodeNonzero: The execution is complete, but the exit code is not 0.', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', description='Details about the reason why the command failed to be sent or run. Valid values:

*   If this parameter is empty, the execution is normal.
*   the specified instance does not exists
*   the instance has released when create task
*   the instance is not running when create task
*   the command is not applicable
*   the specified account does not exists
*   the specified directory does not exists
*   the cron job expression is invalid
*   the aliyun service is not running on the instance
*   the aliyun service in the instance does not response
*   the aliyun service in the instance is upgrading now
*   the aliyun service in the instance is upgrading now
*   the command delivery has been timeout
*   the command execution has been timeout
*   the command execution got an exception
*   the command execution has been interrupted
*   the command execution exit code is not zero', example='the specified instance does not exists'),
          exitCode?: long(name='ExitCode', description='The exit code of the execution. Valid values:

*   For Linux instances, the exit code is the exit code of the shell process.
*   For Windows instances, the exit code is the exit code of the batch or PowerShell process.', example='0'),
          finishTime?: string(name='FinishTime', description='The end time of the execution.', example='2019-12-20T06:15:56Z'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1i7gg30r52z2em****'),
          instanceInvokeStatus?: string(name='InstanceInvokeStatus', description='The execution state on a single instance.

> We recommend that you ignore this parameter and check the value of the `InvocationStatus` response parameter for the overall execution state.', example='Finished'),
          invocationStatus?: string(name='InvocationStatus', description='The execution state on a single instance. Valid values:

*   Pending: The command is being verified or sent.

*   Invalid: The specified command type or parameter is invalid.

*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and that the command is sent within 1 minute.

*   Running: The command is being run on the instance.

*   Success:

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The previous execution is complete, the exit code is 0, and the specified cycle ends.

*   Failed:

    *   Command that is set to run only once: The execution is complete, but the exit code is not 0.
    *   Command that is set to run on a schedule: The previous execution is complete, the exit code is not 0, and the specified cycle is about to end.

*   Error: The execution cannot proceed due to an exception.

*   Timeout: The execution times out.

*   Cancelled: The execution is canceled, and the command is not started.

*   Stopping: The command task is being stopped.

*   Terminated: The command task is terminated while it is being run.

*   Scheduled:

    *   Command that is set to run only once: The overall execution state can never be Scheduled.
    *   Command that is set to run on a schedule: The command is pending execution.', example='Success'),
          output?: string(name='Output', description='The output of the command.', example='OutPutTestmsg'),
          repeats?: int32(name='Repeats', description='The number of times that the command is run on the instance.

*   If the execution is a one-time execution, the value is 0 or 1.
*   If the execution is a scheduled execution, the value is the number of times that the command is run.', example='0'),
          startTime?: string(name='StartTime', description='The time when the command started to be run on the instance.', example='2019-12-20T06:15:55Z'),
          stopTime?: string(name='StopTime', description='The time when the command stopped being run on the instance. If you call the `StopInvocation` operation to manually stop the execution, the value is the time when you called the operation.', example='2020-01-19T09:15:47Z'),
          timed?: boolean(name='Timed', description='Indicates whether the command is to be automatically run.', example='false'),
          updateTime?: string(name='UpdateTime', description='The time when the execution state was updated.', example='2020-01-19T09:15:47Z'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances', description='Details about the instances on which the command is run.'),
      invokeStatus?: string(name='InvokeStatus', description='The overall execution state of the command.

> We recommend that you ignore this parameter and check the value of the `InvocationStatus` response parameter for the overall execution state.', example='Finished'),
      parameters?: string(name='Parameters', description='The custom parameters in the command.', example='{}'),
      repeatMode?: string(name='RepeatMode', description='The execution mode of the command. Valid values:

*   Once: The command is immediately run.
*   Period: The command is run on a schedule.
*   NextRebootOnly: The command is automatically run the next time the instance starts.
*   EveryReboot: The command is automatically run every time the instance starts.', example='Once'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the command task.', example='owner'),
          tagValue?: string(name='TagValue', description='The tag value of the command task.', example='zhangsan'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the command task.'),
      timed?: boolean(name='Timed', description='Indicates whether the command is to be automatically run.', example='false'),
      timeout?: long(name='Timeout', description='The maximum timeout period for the command execution on the instance. Unit: seconds.

When a command cannot be run, the command execution times out. When a command execution times out, the Cloud Assistant client forcefully terminates the command process by canceling the PID of the command.', example='60'),
      username?: string(name='Username', description='The username that was used to run the command on the instance.', example='root'),
      workingDir?: string(name='WorkingDir', description='The execution path of the command.', example='/home/'),
    }
  ](name='Invocation')
  }(name='Invocations', description='Details about the command executions.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', description='The total number of the commands.', example='1'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or return the expected results. You can call this operation to query the execution results.
  * *   You can query information about command executions within the last four weeks. A maximum of 100,000 pieces of execution information can be retained.
  *
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKeyPairsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).', example='ABC1234567', position='Query'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. You can use the asterisk (\\*) symbol as a wildcard in regular expressions to perform a fuzzy search for key pairs. Sample patterns:

*   `*SshKey`: queries key pairs whose names end with SshKey, including the key pair named SshKey.
*   `SshKey*`: queries key pairs whose names start with SshKey, including the key pair named SshKey.
*   `*SshKey*`: queries key pairs whose names include SshKey, including the key pair named SshKey.
*   `SshKey`: queries the key pair named SshKey.', example='*SshKey*', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.

Default value: 10.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-amnhr7u7c7hj****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the key pair. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that are bound with this tag can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that are bound with all these tags can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the key pair. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model DescribeKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the key pair was created.', example='2019-12-04T13:35:00Z'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair.', example='ABC1234567'),
      keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-amnhr7u7c7hj****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the key pair.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the key pair.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the key pair.'),
    }
  ](name='KeyPair')
  }(name='KeyPairs', description='Details about the key pairs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of key pairs.', example='1'),
}

model DescribeKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKeyPairsResponseBody(name='body'),
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLaunchTemplateVersionsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  defaultVersion?: boolean(name='DefaultVersion', description='Specifies whether to query the default version.', example='true', position='Query'),
  detailFlag?: boolean(name='DetailFlag', description='Specifies whether to query the configurations of the launch template. Valid values:

*   true: queries the basic information and other details of the launch template. The details include the image ID and system disk size.
*   false: queries only the basic information of the launch template. The basic information includes the template ID, template name, and default version.

Default value: true.', example='true', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.

You must set LaunchTemplateId or LaunchTemplateName to specify a launch template.', example='lt-bp168lnahrdwl39p****', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template.', example='testLaunchTemplateName', position='Query'),
  launchTemplateVersion?: [ long ](name='LaunchTemplateVersion', description='Version N of the launch template.', example='1', position='Query'),
  maxVersion?: long(name='MaxVersion', description='The maximum version number in the version range to query.', example='10', position='Query'),
  minVersion?: long(name='MinVersion', description='The minimum version number in the version range to query.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Default value: 10', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the launch template.

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLaunchTemplateVersionsResponseBody = {
  launchTemplateVersionSets?: {
    launchTemplateVersionSet?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the launch template version was created.', example='2022-01-17T08:22:43Z'),
      createdBy?: string(name='CreatedBy', description='The creator of the launch template version.', example='123456789****'),
      defaultVersion?: boolean(name='DefaultVersion', description='Indicates whether the launch template version is the default version.', example='true'),
      launchTemplateData?: {
        autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance.', example='2018-05-14T14:18:00Z'),
        dataDisks?: {
          dataDisk?: [ 
          {
            autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-wz91dz3ghear2a5s****'),
            burstingEnabled?: boolean(name='BurstingEnabled', description='Indicates whether to enable the performance burst feature for the data disk. Valid values:

*   true
*   false', example='true'),
            category?: string(name='Category', description='The category of the data disk.', example='cloud_ssd'),
            deleteWithInstance?: boolean(name='DeleteWithInstance', description='Indicates whether to release the data disk when the instance is released.', example='true'),
            description?: string(name='Description', description='The description of the data disk.', example='testDiskDescription'),
            device?: string(name='Device', description='The device name of the data disk.

> This parameter will be deprecated in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='/dev/xvda'),
            diskName?: string(name='DiskName', description='The name of the data disk.', example='testDiskName'),
            encrypted?: string(name='Encrypted', description='Indicates whether the data disk is encrypted.', example='false'),
            performanceLevel?: string(name='PerformanceLevel', description='The performance level of ESSD to use as the data disk. This parameter is returned only when `Category` is set to cloud_essd. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.', example='PL1'),
            provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as the data disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the DiskCategory parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
            size?: int32(name='Size', description='The size of the data disk.', example='2000'),
            snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create the data disk.', example='s-bp67acfmxazb4p****'),
          }
        ](name='DataDisk')
        }(name='DataDisks', description='Details about the data disks.'),
        deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp1brhwhoqinyjd6****'),
        description?: string(name='Description', description='The description of the system disk.', example='testInstanceDescription'),
        enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Specifies whether to enable the operating system configuration of the instance.', example='false'),
        hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
        imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp67acfmxazb4p****'),
        imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud
*   self: custom images that you create
*   others: shared images from other Alibaba Cloud accounts
*   marketplace: Alibaba Cloud Marketplace images', example='system'),
        instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='Postpaid'),
        instanceName?: string(name='InstanceName', description='The name of the instance.', example='testInstanceName'),
        instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
        internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage.', example='PayByTraffic'),
        internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth.', example='5'),
        internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth.', example='100'),
        ioOptimized?: string(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='none'),
        ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to assign to the instance.', example='1'),
        keyPairName?: string(name='KeyPairName', description='The name of the key pair. This parameter is empty by default.', example='testKeyPairName'),
        networkInterfaces?: {
          networkInterface?: [ 
          {
            description?: string(name='Description', description='The description of the secondary ENI.', example='testNetworkInterfacesDescription'),
            instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.s2.xlarge'),
            networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the secondary ENI.', example='testNetworkInterfaceName'),
            networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the primary ENI. Valid values:

*   Standard: The TCP communication mode is used.
*   HighPerformance: Elastic RDMA Interface (ERI) is enabled and the remote direct memory access (RDMA) communication mode is used.', example='Standard'),
            primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the secondary ENI.', example='203.0.*.*'),
            securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the secondary ENI. The security group and the ENI must belong to the same VPC.

> The SecurityGroupId and SecurityGroupIds parameters are mutually exclusive in the response.', example='sg-bp67acfmxazb4p****'),
            securityGroupIds?: {
              securityGroupId?: [ string ](name='SecurityGroupId')
            }(name='SecurityGroupIds', description='The IDs of the security groups to which to assign the secondary ENI.

> The SecurityGroupId and SecurityGroupIds parameters are mutually exclusive in the response.'),
            vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the secondary ENI.', example='vsw-bp67acfmxazb4p****'),
          }
        ](name='NetworkInterface')
        }(name='NetworkInterfaces', description='Details about the secondary elastic network interfaces (ENIs).'),
        networkType?: string(name='NetworkType', description='The network type. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
        passwordInherit?: boolean(name='PasswordInherit', description='Indicates whether to use the password preset in the image.', example='true'),
        period?: int32(name='Period', description='The subscription duration of the resource.', example='1'),
        privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.', example='10.1.**.**'),
        ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role.', example='testRamRoleName'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the launch template belongs.', example='rg-bp67acfmxazb4p****'),
        securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Indicates whether security hardening is enabled.', example='active'),
        securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance.

> `The SecurityGroupId` and `SecurityGroupIds` parameters are mutually exclusive in the response.', example='sg-bp67acfmxazb4p****'),
        securityGroupIds?: {
          securityGroupId?: [ string ](name='SecurityGroupId')
        }(name='SecurityGroupIds', description='The IDs of the security groups to which to assign the instance.

> `The SecurityGroupId` and `SecurityGroupIds` parameters are mutually exclusive in the response.'),
        spotDuration?: int32(name='SpotDuration', description='The retention period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

Take note of the following items:

*   The following protection periods are in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.', example='1'),
        spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance.', example='0.98'),
        spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.', example='NoSpot'),
        systemDisk_autoSnapshotPolicyId?: string(name='SystemDisk.AutoSnapshotPolicyId'),
        systemDisk_burstingEnabled?: boolean(name='SystemDisk.BurstingEnabled'),
        systemDisk_category?: string(name='SystemDisk.Category'),
        systemDisk_deleteWithInstance?: boolean(name='SystemDisk.DeleteWithInstance'),
        systemDisk_description?: string(name='SystemDisk.Description'),
        systemDisk_diskName?: string(name='SystemDisk.DiskName'),
        systemDisk_encrypted?: string(name='SystemDisk.Encrypted'),
        systemDisk_iops?: int32(name='SystemDisk.Iops'),
        systemDisk_performanceLevel?: string(name='SystemDisk.PerformanceLevel'),
        systemDisk_provisionedIops?: long(name='SystemDisk.ProvisionedIops'),
        systemDisk_size?: int32(name='SystemDisk.Size'),
        tags?: {
          instanceTag?: [ 
          {
            key?: string(name='Key', description='The tag key of the instance.', example='TestKey'),
            value?: string(name='Value', description='The tag value of the instance.', example='TestValue'),
          }
        ](name='InstanceTag')
        }(name='Tags', description='The tags to add to the instance.'),
        userData?: string(name='UserData', description='The user data of the instance, which is Base64-encoded.', example='SGVsbG9FQ1M='),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance.', example='vsw-bp67acfmxazb4p****'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='v-bp67acfmxazb4p****'),
        zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-g'),
      }(name='LaunchTemplateData', description='The configurations of the launch template.'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the template.', example='lt-bp67acfmxazb4p****'),
      launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template version.', example='testLaunchTemplateName'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the launch template version was modified.', example='2022-01-17T08:40:00Z'),
      versionDescription?: string(name='VersionDescription', description='The description of the launch template version.', example='testVersionDescription'),
      versionNumber?: long(name='VersionNumber', description='The number of the launch template version.', example='1'),
    }
  ](name='LaunchTemplateVersionSet')
  }(name='LaunchTemplateVersionSets', description='Details about the launch template versions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3989ED0C-20A1-4351-A127-2067FF8390AX'),
  totalCount?: int32(name='TotalCount', description='The total number of launch templates.', example='1'),
}

model DescribeLaunchTemplateVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLaunchTemplateVersionsResponseBody(name='body'),
}

async function describeLaunchTemplateVersions(request: DescribeLaunchTemplateVersionsRequest): DescribeLaunchTemplateVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLaunchTemplateVersions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLaunchTemplatesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  launchTemplateId?: [ string ](name='LaunchTemplateId', description='The IDs of one or more launch templates. You can specify up to 100 launch template IDs.', example='lt-m5e3ofjr1zn1aw7q****', position='Query'),
  launchTemplateName?: [ string ](name='LaunchTemplateName', description='The names of one or more launch templates. You can specify up to 100 launch template names.', example='wd-152630748****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='The ID of the resource group to which the launch template belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-acfmxazb4p****', position='Query'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the launch template. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the launch template. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='TemplateTag', description='The tags.', position='Query'),
}

model DescribeLaunchTemplatesResponseBody = {
  launchTemplateSets?: {
    launchTemplateSet?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the launch template was created.', example='2018-05-14T14:18:00Z'),
      createdBy?: string(name='CreatedBy', description='The creator of the launch template.', example='1234567890'),
      defaultVersionNumber?: long(name='DefaultVersionNumber', description='The default version number of the launch template.', example='1'),
      latestVersionNumber?: long(name='LatestVersionNumber', description='The latest version number of the launch template.', example='1'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.', example='lt-m5e3ofjr1zn1aw7q****'),
      launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template.', example='wd-152630748****'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the launch template was modified.', example='2018-05-14T14:18:00Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the launch template belongs.', example='rg-acfmxazb4p****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the launch template.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the launch template.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the launch template.'),
    }
  ](name='LaunchTemplateSet')
  }(name='LaunchTemplateSets', description='Details about the launch templates.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE12CBA'),
  totalCount?: int32(name='TotalCount', description='The total number of launch templates.', example='1'),
}

model DescribeLaunchTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLaunchTemplatesResponseBody(name='body'),
}

async function describeLaunchTemplates(request: DescribeLaunchTemplatesRequest): DescribeLaunchTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLaunchTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLimitationRequest {
  limitation: string(name='Limitation', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLimitationResponseBody = {
  limitation?: string(name='Limitation'),
  requestId?: string(name='RequestId'),
  value?: string(name='Value'),
}

model DescribeLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLimitationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLimitation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeManagedInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F7494****', position='Query'),
  instanceId?: [ string ](name='InstanceId', description='The ID of managed instance N. Valid values of N: 1 to 50.', example='mi-hz018jrc1o0****', position='Query'),
  instanceIp?: string(name='InstanceIp', description='The internal or public IP address of the managed instance.', example='192.168.**.**', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the managed instance.', example='my-webapp-server', position='Query'),
  osType?: string(name='OsType', description='The operating system type of the managed instance. Valid values:

*   windows
*   linux', example='windows', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the managed instance. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the managed instance. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the managed instance. Valid values of N: 1 to 20. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the managed instance.', position='Query'),
}

model DescribeManagedInstancesResponseBody = {
  instances?: [ 
    {
      activationId?: string(name='ActivationId', description='The ID of the activation code.', example='3704F543-F768-43FA-9864-897F75B3****'),
      agentVersion?: string(name='AgentVersion', description='The version number of the Cloud Assistant client.', example='2.2.0.102'),
      connected?: boolean(name='Connected', description='Indicates whether the managed instance is connected. Valid values:

*   true: The managed instance is connected and you can manage the instance by using Cloud Assistant.
*   false: The managed instance is not connected because the managed instance is down or because the Cloud Assistant client is not installed correctly.', example='true'),
      hostname?: string(name='Hostname', description='The hostname of the managed instance.', example='demo'),
      instanceId?: string(name='InstanceId', description='The ID of the managed instance.', example='mi-hz018jrc1o0****'),
      instanceName?: string(name='InstanceName', description='The name of the managed instance.', example='webAPP-linux-01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the managed instance.', example='40.65.**.**'),
      intranetIp?: string(name='IntranetIp', description='The internal IP address of the managed instance.', example='10.0.**.**'),
      invocationCount?: long(name='InvocationCount', description='The number of times that Cloud Assistant tasks were executed on the managed instance.', example='1'),
      lastInvokedTime?: string(name='LastInvokedTime', description='The last Cloud Assistant task execution time.', example='2021-01-20T09:00:40Z'),
      machineId?: string(name='MachineId', description='The machine code of the managed instance.', example='e03231b37ab14e53b5795ad625fc****'),
      osType?: string(name='OsType', description='The operating system type of the managed instance.', example='Linux'),
      osVersion?: string(name='OsVersion', description='The version information of the operating system.', example='Linux_#38~18.04.1-Ubuntu SMP Wed Jan 6 18:26:30 UTC 2021_x86_64'),
      registrationTime?: string(name='RegistrationTime', description='The time when the managed instance was registered.', example='2021-01-20T08:57:56Z'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the managed instance. Up to 20 tag keys can be returned for each managed instance. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the managed instance. Up to 20 tag values can be returned for each managed instance. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
        }
      ](name='Tags', description='The tags of the managed instance.'),
    }
  ](name='Instances', description='Details about the managed instances.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77115469-F2C5-4ECA-94F7-FA04F2FD****'),
  totalCount?: long(name='TotalCount', description='The total number of managed instances returned.', example='1'),
}

model DescribeManagedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedInstancesResponseBody(name='body'),
}

async function describeManagedInstances(request: DescribeManagedInstancesRequest): DescribeManagedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeManagedInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatGatewaysRequest {
  natGatewayId?: string(name='NatGatewayId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: {
    natGateway?: [ 
    {
      bandwidthPackageIds?: {
        bandwidthPackageId?: [ string ](name='BandwidthPackageId')
      }(name='BandwidthPackageIds'),
      businessStatus?: string(name='BusinessStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds'),
      instanceChargeType?: string(name='InstanceChargeType'),
      name?: string(name='Name'),
      natGatewayId?: string(name='NatGatewayId'),
      regionId?: string(name='RegionId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NatGateway')
  }(name='NatGateways'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkInterfaceAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  attribute?: string(name='Attribute', description='The attributes of the ENI.', example='test', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='> This parameter is unavailable.', example='TestKey'),
      value?: string(name='Value', description='> This parameter is unavailable.', example='TestValue'),
    }
  ](name='Tag', description='> This parameter is unavailable.', position='Query'),
}

model DescribeNetworkInterfaceAttributeResponseBody = {
  associatedPublicIp?: {
    allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='null'),
    publicIpAddress?: string(name='PublicIpAddress', description='The EIP.', example='116.62.**.**'),
  }(name='AssociatedPublicIp', description='The elastic IP address (EIP) that is associated with the secondary private IP address of the ENI.'),
  attachment?: {
    deviceIndex?: int32(name='DeviceIndex', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
    instanceId?: string(name='InstanceId', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
    memberNetworkInterfaceIds?: {
      memberNetworkInterfaceId?: [ string ](name='MemberNetworkInterfaceId')
    }(name='MemberNetworkInterfaceIds', description='> This parameter is in invitational preview and is unavailable.'),
    networkCardIndex?: int32(name='NetworkCardIndex', description='网卡挂载指定的物理网卡索引。
- 如果网卡是未挂载（Available）状态或者挂载时未指定索引，则不返回此值。
- 如果网卡是已挂载（InUse）状态且挂载时指定，此值表示网卡挂载指定的物理网卡索引。', example='0'),
    trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
  }(name='Attachment', description='> This parameter is in invitational preview and is unavailable.'),
  bondInterfaceSpecification?: {
    bondMode?: string(name='BondMode', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    slaveInterfaceSpecification?: {
      slaveInterfaceSpecificationSet?: [ 
      {
        bondNetworkInterfaceId?: string(name='BondNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        slaveNetworkInterfaceId?: string(name='SlaveNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        workState?: string(name='WorkState', description='> This parameter is in invitational preview and is unavailable.', example='null'),
      }
    ](name='SlaveInterfaceSpecificationSet')
    }(name='SlaveInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  }(name='BondInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  creationTime?: string(name='CreationTime', description='The time when the ENI was created.', example='2019-12-25T12:31:31Z'),
  description?: string(name='Description', description='The description of the ENI.', example='testDescription'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is attached.

> If the ENI is managed and controlled by other Alibaba Cloud services, no instance ID is returned.', example='i-bp1e2l6djkndyuli****'),
  ipv4PrefixSets?: {
    ipv4PrefixSet?: [ 
    {
      ipv4Prefix?: string(name='Ipv4Prefix', description='The IPv4 address prefix.', example='47.122.*.*/24'),
    }
  ](name='Ipv4PrefixSet')
  }(name='Ipv4PrefixSets', description='The IPv4 address prefixes of the ENI.'),
  ipv6PrefixSets?: {
    ipv6PrefixSet?: [ 
    {
      ipv6Prefix?: string(name='Ipv6Prefix', description='The IPv6 address prefix.', example='2001:1111:*:*::/64'),
    }
  ](name='Ipv6PrefixSet')
  }(name='Ipv6PrefixSets', description='The IPv6 address prefixes of the ENI.'),
  ipv6Sets?: {
    ipv6Set?: [ 
    {
      ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2001:db8:1234:1a00::****'),
    }
  ](name='Ipv6Set')
  }(name='Ipv6Sets', description='The IPv6 addresses of the ENI.'),
  macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp125p95hhdhn3ot****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
  networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the ENI. Valid values:

*   Standard: The TCP communication mode is used.
*   HighPerformance: Elastic RDMA Interface (ERI) is enabled and the remote direct memory access (RDMA) communication mode is used.

> This parameter can have a value of HighPerformance only when the ENI is attached to a c7re RDMA-enhanced instance that resides in Beijing Zone K.', example='Standard'),
  ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='10.1.**.**'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        publicIpAddress?: string(name='PublicIpAddress', description='The EIP.', example='116.62.**.**'),
      }(name='AssociatedPublicIp', description='The EIP that is associated with the secondary private IP address of the ENI.'),
      primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address. Valid values:

*   true: The IP address is the primary private IP address.
*   false: The IP address is the secondary private IP address.', example='true'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets', description='Details about the private IP addresses.'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI.

*   For a primary ENI: The default number of queues that the instance type supports for the ENI is returned.

*   For a secondary ENI:

    *   When the ENI is in the InUse state, the following situations occur for the QueueNumber parameter:

        *   If the number of queues supported by the ENI has not been modified, the default number of queues that the instance type supports for the ENI is returned.
        *   If the number of queues supported by the ENI has been modified, the new number of queues is returned.

    *   When the ENI is in the Available state, the following situations occur for the QueueNumber parameter:

        *   If the number of queues supported by the ENI has not been modified, the return value is empty.
        *   If the number of queues supported by the ENI has been modified, the new number of queues is returned.', example='8'),
  queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable.', example='22'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
  serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
  slaveInterfaceSpecification?: {
    bondNetworkInterfaceId?: string(name='BondNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    slaveNetworkInterfaceId?: string(name='SlaveNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    workState?: string(name='WorkState', description='> This parameter is in invitational preview and is unavailable.', example='null'),
  }(name='SlaveInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  status?: string(name='Status', description='The state of the ENI. Valid values:

*   Available: The ENI is not attached to an instance.
*   Attaching: The ENI is being attached to an instance.
*   InUse: The ENI is attached to an instance.
*   Detaching: The ENI is being detached from an instance.
*   Deleting: The ENI is being deleted.

This parameter is empty by default, which indicates that all states are queried.', example='Available'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags of the ENI.'),
  type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-bp1s5fnvk4gn2tws0****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the ENI belongs.', example='vpc-bp67acfmxazb4p****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-g'),
}

model DescribeNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfaceAttributeResponseBody(name='body'),
}

async function describeNetworkInterfaceAttribute(request: DescribeNetworkInterfaceAttributeRequest): DescribeNetworkInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkInterfacePermissionsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI. You must specify `NetworkInterfaceId` or `NetworkInterfacePermissionId.N` to determine the query range.', example='eni-bp17pdijfczax****', position='Query'),
  networkInterfacePermissionId?: [ string ](name='NetworkInterfacePermissionId', description='The IDs of ENI permissions. You can specify up to 100 ENI permission IDs.', example='eni-perm-bp1cs4lwn56lfb****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI permission. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNetworkInterfacePermissionsResponseBody = {
  networkInterfacePermissions?: {
    networkInterfacePermission?: [ 
    {
      accountId?: long(name='AccountId', description='The ID of the Alibaba Cloud partner (a certified ISV) or individual user.', example='1234567890'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****'),
      networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId', description='The ID of the ENI permission.', example='eni-perm-bp1cs4lwn56lfb****'),
      permission?: string(name='Permission', description='The ENI permission.', example='InstanceAttach'),
      permissionState?: string(name='PermissionState', description='The state of the ENI permission. Valid values:

*   Pending: The permission is being granted.
*   Granted: The permission is granted.
*   Revoking: The permission is being revoked.
*   Revoked: The permission is revoked.', example='Granted'),
      serviceName?: string(name='ServiceName', description='The name of the Alibaba Cloud service.', example='Elastic Compute Service'),
    }
  ](name='NetworkInterfacePermission')
  }(name='NetworkInterfacePermissions', description='Details about the ENI permissions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FCD3DEF-63D3-4605-A818-805C8BD7DB87'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeNetworkInterfacePermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacePermissionsResponseBody(name='body'),
}

async function describeNetworkInterfacePermissions(request: DescribeNetworkInterfacePermissionsRequest): DescribeNetworkInterfacePermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkInterfacePermissions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkInterfacesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is bound.', example='i-bp1e2l6djkndyuli****', position='Query'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.', example='2408:4321:180:1701:94c7:bc38:3bfa:****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 10 to 500.

Default values:

*   If this parameter is not specified or if this parameter is set to a value smaller than 10, the default value is 10.
*   If this parameter is set to a value greater than 500, the default value is 500.', example='50', position='Query'),
  networkInterfaceId?: [ string ](name='NetworkInterfaceId', description='The ID of the ENI N. Valid values of N: 1 to 100.', example='eni-bp125p95hhdhn3ot****', position='Query'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='test-eni-name', position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the Describedisks operation.

For more information about how to check the responses returned by this operation, see the preceding "Description" section.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 1000.

Default value: 10.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='100', position='Query'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IPv4 address of the ENI.', example='192.168.**.**', position='Query'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='Secondary private IPv4 address N of the ENI. Valid values of N: 1 to 100.', example='192.168.**.**', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. When you use this property to filter resources, the number of resources that are contained in the specified resource group cannot exceed 1,000.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the secondary ENI belongs.

*   To query the details of secondary ENIs based on the ID of a security group, specify this parameter.
*   To query the details of primary ENIs based on the ID of a security group, call the [DescribeInstances](~~25506~~) operation and specify the `SecurityGroupId` parameter.', example='sg-bp144yr32sx6ndw****', position='Query'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true', position='Query'),
  status?: string(name='Status', description='The state of the ENI. Valid values:

*   Available: The ENI is available.
*   Attaching: The ENI is being bound to an instance.
*   InUse: The ENI is in use.
*   Detaching: The ENI is being unbound from an instance.
*   Deleting: The ENI is being deleted.

This parameter is empty by default, which indicates that all states are queried.', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the ENI. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the ENI. Valid values of N: 1 to 20.

Up to 1,000 resources that match the tags specified can be returned in the response. If the total number of resources that match the tags exceed 1,000, we recommend that you call the [ListTagResources](~~110425~~) operation.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the ENI.', position='Query'),
  type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary

This parameter is empty by default, which indicates that both primary and secondary ENIs are queried.', example='Secondary', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ENI belongs.', example='vsw-bp16usj2p27htro3****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the ENI belongs.', example='vsw-bp16usj2p27htro3****', position='Query'),
}

model DescribeNetworkInterfacesResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
        publicIpAddress?: string(name='PublicIpAddress', description='The EIP of the ENI.', example='116.62.**.**'),
      }(name='AssociatedPublicIp', description='Details about the EIP that is associated with the secondary private IP address of the ENI.'),
      attachment?: {
        deviceIndex?: int32(name='DeviceIndex', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
        instanceId?: string(name='InstanceId', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
        networkCardIndex?: int32(name='NetworkCardIndex', example='0'),
        trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
      }(name='Attachment', description='> This parameter is in invitational preview and is unavailable to the public.'),
      creationTime?: string(name='CreationTime', description='The time when the ENI was created.', example='2019-12-25T12:31:31Z'),
      description?: string(name='Description', description='The description of the ENI.', example='DescriptionTest'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance to which the ENI is bound.

> If the ENI is managed and controlled by other Alibaba Cloud services, no instance ID is returned.', example='i-bp1e2l6djkndyuli****'),
      ipv4PrefixSets?: {
        ipv4PrefixSet?: [ 
        {
          ipv4Prefix?: string(name='Ipv4Prefix', example='hide'),
        }
      ](name='Ipv4PrefixSet')
      }(name='Ipv4PrefixSets'),
      ipv6PrefixSets?: {
        ipv6PrefixSet?: [ 
        {
          ipv6Prefix?: string(name='Ipv6Prefix', example='hide'),
        }
      ](name='Ipv6PrefixSet')
      }(name='Ipv6PrefixSets'),
      ipv6Sets?: {
        ipv6Set?: [ 
        {
          ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2408:4321:180:1701:94c7:bc38:3bfa:****'),
        }
      ](name='Ipv6Set')
      }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI.'),
      macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp125p95hhdhn3ot****'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the ENI. Valid values:

*   Standard: the TCP communication mode is used.
*   HighPerformance: enables Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.

> The NetworkInterfaceTrafficMode parameter can be set to HighPerformance only when the instance to which the ENI is bound belongs to the c7re RDMA-enhanced instance family and is located within Beijing Zone K.', example='Standard'),
      ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          associatedPublicIp?: {
            allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable to the public.', example='null'),
            publicIpAddress?: string(name='PublicIpAddress', description='The EIP of the ENI.', example='116.62.**.**'),
          }(name='AssociatedPublicIp', description='The elastic IP address (EIP) associated with the ENI.'),
          primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address. Valid values:

*   true: The IP address is the primary private IP address.
*   false: The IP address is the secondary private IP address.', example='true'),
          privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance to which the ENI is bound.', example='172.17.**.**'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets', description='Details about the private IP addresses.'),
      queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI.

*   If the ENI is a secondary ENI in the InUse state and the number of queues supported by this ENI has never been modified, the default number of queues per secondary ENI that the instance type supports is returned.
*   If the number of queues supported by the secondary ENI has been modified, the new number of queues is returned.
*   If the ENI is a secondary ENI in the Available state and the number of queues supported by this ENI has never been modified, an empty value is returned.
*   If the ENI is a primary ENI, the default number of queues per primary ENI that the instance type supports is returned.', example='8'),
      queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of your Alibaba Cloud resource group.', example='rg-2ze88m67qx5z****'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
      serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
      status?: string(name='Status', description='The state of the ENI.', example='Available'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the ENI.'),
      type?: string(name='Type', description='The type of the ENI.', example='Secondary'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-bp16usj2p27htro3****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.', example='vpc-bp1j7w3gc1cexjqd****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance resides.', example='cn-hangzhou-e'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets', description='Details about the ENIs.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of ENIs.

> If you specify the `MaxResults` and `NextToken` parameters to perform a paged query, the value of the `TotalCount` response parameter is invalid.', example='2'),
}

model DescribeNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacesResponseBody(name='body'),
}

/**
  * The `DescribeNetworkInterfaces` operation supports multiple pagination mechanisms. We recommend that you set `MaxResults` to specify the maximum number of entries to return in each request. The returned value of `NextToken` is a pagination token, which can be used in the next request to retrieve a new page of results. When you perform the next request, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  * > If you specify `MaxResults` or `NextToken`, the system returns results based on the preceding pagination mechanism. Otherwise, the system paginates the results based on the `PageNumber` and `PageSize` parameters.
  *
 */
async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNewProjectEipMonitorDataRequest {
  allocationId: string(name='AllocationId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeNewProjectEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth'),
      eipFlow?: int32(name='EipFlow'),
      eipPackets?: int32(name='EipPackets'),
      eipRX?: int32(name='EipRX'),
      eipTX?: int32(name='EipTX'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeNewProjectEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNewProjectEipMonitorDataResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeNewProjectEipMonitorData(request: DescribeNewProjectEipMonitorDataRequest): DescribeNewProjectEipMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNewProjectEipMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhysicalConnectionsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model DescribePhysicalConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      adLocation?: string(name='AdLocation'),
      bandwidth?: long(name='Bandwidth'),
      businessStatus?: string(name='BusinessStatus'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      enabledTime?: string(name='EnabledTime'),
      lineOperator?: string(name='LineOperator'),
      name?: string(name='Name'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
      portNumber?: string(name='PortNumber'),
      portType?: string(name='PortType'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePhysicalConnectionsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhysicalConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrefixListAssociationsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to this operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePrefixListAssociationsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token that is returned in this call. If the return value is empty, no more data is returned.', example='AAAAAdDWBF2****'),
  prefixListAssociations?: {
    prefixListAssociation?: [ 
    {
      resourceId?: string(name='ResourceId', description='Indicates the ID of a resource.', example='sg-bp11ujym6xsff6l0****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='securitygroup'),
    }
  ](name='PrefixListAssociation')
  }(name='PrefixListAssociations', description='Details about the resources that are associated with the prefix list.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrefixListAssociationsResponseBody(name='body'),
}

async function describePrefixListAssociations(request: DescribePrefixListAssociationsRequest): DescribePrefixListAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrefixListAssociations', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrefixListAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePrefixListAttributesResponseBody = {
  addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6', example='IPv4'),
  creationTime?: string(name='CreationTime', description='The time when the prefix list was created.', example='2021-02-20T07:11Z'),
  description?: string(name='Description', description='The description of the prefix list.', example='This is description.'),
  entries?: {
    entry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block in the entry in the prefix list.', example='192.168.1.0/24'),
      description?: string(name='Description', description='The description of the entry in the prefix list.', example='Description Sample 01'),
    }
  ](name='Entry')
  }(name='Entries', description='Details about the entries in the prefix list.'),
  maxEntries?: int32(name='MaxEntries', description='The maximum number of entries that the prefix list can contain.', example='10'),
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='PrefixListNameSample'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrefixListAttributesResponseBody(name='body'),
}

async function describePrefixListAttributes(request: DescribePrefixListAttributesRequest): DescribePrefixListAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrefixListAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrefixListsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6

This parameter is empty by default, which indicates that all prefix lists are queried.', example='IPv4', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the previous call to the DescribePrefixLists operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId?: [ string ](name='PrefixListId', description='The IDs of prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='PrefixListNameSample', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePrefixListsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token returned in this call. If the return value is empty, no more data is returned.', example='AAAAAdDWBF2****'),
  prefixLists?: {
    prefixList?: [ 
    {
      addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6', example='IPv4'),
      associationCount?: int32(name='AssociationCount', description='The number of associated resources.', example='1'),
      creationTime?: string(name='CreationTime', description='The time when the prefix list was created.', example='2021-02-20T07:11Z'),
      description?: string(name='Description', description='The description of the prefix list.', example='This is description.'),
      maxEntries?: int32(name='MaxEntries', description='The maximum number of entries that the prefix list can contain.', example='20'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
      prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='PrefixListNameSample'),
    }
  ](name='PrefixList')
  }(name='PrefixLists', description='Details about the prefix lists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrefixListsResponseBody(name='body'),
}

/**
  * ## Description
  * You can specify the `AddressFamily`, `PrefixListId.N`, and `PrefixListName` request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
 */
async function describePrefixLists(request: DescribePrefixListsRequest): DescribePrefixListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrefixLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  dataDisk?: [
    {
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   ephemeral_ssd: local SSD
*   cloud_essd: ESSD

Valid values of N: 1 to 16.', example='cloud_ssd'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of data disk N when the disk is an ESSD. This parameter is valid only when the `DataDisk.N.Category` parameter is set to cloud_essd. Default value: PL1. Valid values:

*   PL0
*   PL1
*   PL2
*   PL3

Valid values of N: 1 to 16.', example='PL1'),
      size?: long(name='Size', description='The size of data disk N. Unit: GiB. Valid values:

*   Valid values if you set DataDisk.N.Category to cloud: 5 to 2000.

*   Valid values if you set DataDisk.N.Category to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

*   Valid values when DataDisk.N.Category is set to ephemeral_ssd: 5 to 800.

Valid values of N: 1 to 16.', example='2000'),
    }
  ](name='DataDisk', position='Query'),
  schedulerOptions?: {
    dedicatedHostId?: string(name='DedicatedHostId'),
  }(name='SchedulerOptions', position='Query'),
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   ephemeral_ssd: local SSD
*   cloud_essd: enhanced SSD (ESSD)

Description of the default values:

*   When the InstanceType parameter is set to a retired instance type and the `IoOptimized` parameter is set to `none`, the default value of this parameter is `cloud`.
*   In other cases, the default value of this parameter is `cloud_efficiency`.

> When you query the prices of system disks, you must also specify the `ImageId` parameter.', example='cloud_ssd'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the system disk when the disk is an ESSD. This parameter is valid only when the `SystemDiskCategory` parameter is set to cloud_essd. Default value: PL1. Valid values:

PL0 PL1 PL2 PL3', example='PL1'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

Default value: 20 or the image size, whichever is greater.', example='80'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  amount?: int32(name='Amount', description='The number of ECS instances. You can specify this parameter when you want to query the prices of multiple instances that have specific specifications. Valid values: 1 to 1000.

Default value: 1.', example='1', position='Query'),
  assuranceTimes?: string(name='AssuranceTimes', description='The total number of times that the elasticity assurance can be applied. Set the value to Unlimited. This value indicates that the elasticity assurance can be applied an unlimited number of times within its effective duration.

Default value: Unlimited.', example='Unlimited', position='Query'),
  capacity?: int32(name='Capacity', description='The storage capacity. Unit: GiB.', example='1024', position='Query'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The dedicated host type. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to query the most recent list of dedicated host types.', example='ddh.c5', position='Query'),
  imageId?: string(name='ImageId', description='The ID of the image. Images contain the runtime environment to load when instances start. You can call the [DescribeImages](~~25534~~) operation to query the available images. If you do not specify this parameter, the system queries the prices of Linux images.', example='centos_7_05_64_20G_alibase_20181212.vhd', position='Query'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of instances for which to reserve the capacity of an instance type.

Valid values: 1 to 1000.', example='100', position='Query'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount', description='The total number of vCPUs supported by the elasticity assurance. When you call this API operation, the system calculates the number of instances that an elasticity assurance must support based on your specified InstanceType value and rounds the calculated value up.

> When you call this API operation to query the price of an elasticity assurance, you can only specify either InstanceCoreCpuCount or InstanceAmount.', example='1024', position='Query'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: Virtual Private Cloud (VPC)

Default value: vpc.', example='vpc', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance. When the `ResourceType` parameter is set to `instance`, you must specify the InstanceType parameter. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.', example='ecs.g6.large', position='Query'),
  instanceTypeList?: [ string ](name='InstanceTypeList', description='The instance type. You can select only a single instance type when you configure an elasticity assurance in unlimited mode.', example='ecs.g6.xlarge', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

Default value: PayByTraffic.', example='PayByTraffic', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='5', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

If the instance type specified by the InstanceType parameter belongs to [Generation I instance families](~~55263~~), the default value of IoOptimized is none.

If the instance type specified by the InstanceType parameter does not belong to [Generation I instance families](~~55263~~), the default value of IoOptimized is optimized.', example='optimized', position='Query'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='cmcc', position='Query'),
  offeringType?: string(name='OfferingType', description='The payment option of the reserved instance. Valid values:

*   No Upfront
*   Partial Upfront
*   All Upfront', example='All Upfront', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The billing duration of the ECS instance. Valid values:

*   Valid values when PriceUnit is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values when PriceUnit is set to Year: 1, 2, 3, 4, and 5.
*   Valid value when PriceUnit is set to Hour: 1.
*   Valid values when PriceUnit is set to Week: 1, 2, 3, and 4.

Default value: 1.', example='1', position='Query'),
  platform?: string(name='Platform', description='The operating system of the image used by the instance. Valid values:

*   Windows: Windows Server operating systems
*   Linux: Linux and UNIX-like operating systems', example='Linux', position='Query'),
  priceUnit?: string(name='PriceUnit', description='The pricing unit of the ECS resource. Default value: Hour. Valid values:

*   Month
*   Year
*   Hour
*   Week', example='Year', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: queries the most recent prices of ECS instances. When this parameter is set to `instance`, you must specify the `InstanceType` parameter.
*   disk: queries the most recent prices of cloud disks. When this parameter is set to `disk`, you must specify both the `DataDisk.1.Category` and `DataDisk.1.Size` parameters.
*   bandwidth: queries the most recent prices for network usage.
*   ddh: queries the most recent prices of dedicated hosts.
*   ElasticityAssurance: queries the most recent prices of elasticity assurances. When this parameter is set to `ElasticityAssurance`, you must specify the `InstanceType` parameter.
*   CapacityReservation: queries the most recent prices of capacity reservations. When this parameter is set to `CapacityReservation`, you must specify the `InstanceType` parameter.

Default value: instance.', example='instance', position='Query'),
  scope?: string(name='Scope', description='The scope of the reserved instance. Valid values:

*   Region: regional
*   Zone: zonal

Default value: Region.', example='Zone', position='Query'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6

*   The following protection periods are unavailable: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, [submit a ticket](https://smartservice.console.aliyun.com/service/create-ticket) and enter the following information: - The specifications and number of the resources. Example: ecs.g6.8xlarge 1000. - The region where the resources reside. Example: China (Beijing). - The period of time during which the resources are used every day. Example: 1:00 to 4: 00 every day.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1', position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The preemption policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bidding price. The market price can be up to the pay-as-you-go price.

Default value: NoSpot.

> This parameter is valid only when the `PriceUnit` parameter is set to Hour and the `Period` parameter is set to 1. The default value of the `PriceUnit` parameter is `Hour` and the default value of the `Period` parameter is `1`. Therefore, you do not need to set the `PriceUnit` and `Period` parameters when you set the SpotStrategy parameter.', example='NoSpot', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.

> Prices of preemptible instances vary based on zones. When you query the price of a preemptible instance, specify the ZoneId parameter.', example='cn-hagzhou-i', position='Query'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit.

Alibaba Cloud China site (aliyun.com): CNY

Alibaba Cloud International site (alibabacloud.com): USD', example='CNY'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
          originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
          resource?: string(name='Resource', description='The name of the resource.', example='instance'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description', description='The description of the pricing rule.', example='Receive a 15% discount on a 1-year subscription'),
              ruleId?: long(name='RuleId', description='The ID of the pricing rule.', example='587'),
            }
          ](name='Rule')
          }(name='SubRules', description='Details about the pricing rules.'),
          tradePrice?: float(name='TradePrice', description='The transaction price.', example='3712.8'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos', description='Details about the price.

> This parameter is in invitational preview and unavailable.'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
      reservedInstanceHourPrice?: float(name='ReservedInstanceHourPrice', description='The hourly price of the reserved instance for which the No Upfront or Partial Upfront payment option is used.', example='1'),
      tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='3712.8'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.', example='Receive a 15% discount on a 1-year subscription'),
        ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='587'),
      }
    ](name='Rule')
    }(name='Rules', description='Details about the promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and promotion rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

/**
  * ## Description
  * *   The required parameters vary based on the types of resources whose prices you want to query.
  *     *   When the `ResourceType` parameter is set to instance, you must specify the `InstanceType` parameter.
  *     *   When the `ResourceType` parameter is set to disk, you must specify both the `DataDisk.1.Category` and `DataDisk.1.Size` parameters. When the `ResourceType` parameter is set to disk, only pay-as-you-go prices of cloud disks are returned. In this scenario, the `PriceUnit` parameter must be set to `Hour`.
  *     *   When the `ResourceType` parameter is set to ddh, you must specify the `DedicatedHostType` parameter.
  *     *   When the `ResourceType` parameter is set to ElasticityAssurance, you must specify the `InstanceType` parameter.
  *     *   When the `ResourceType` parameter is set to CapacityReservation, you must specify the `InstanceType` parameter.
  * *   When the `ResourceType` parameter is set to bandwidth, only the pay-by-traffic (`PayByTraffic`) price for network usage is returned.
  * *   When the `ResourceType` parameter is set to instance, the prices of up to four data disks can be queried.
  * *   By default, the `ChargeType` parameter is set to `PostPaid`. You can specify the `PriceUnit` parameter to query the prices of ECS resources that have different billing cycles.
  *
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecommendInstanceTypeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  cores?: int32(name='Cores', description='The number of vCPUs of the instance.

>  If the `Cores` and `Memory` parameters are both specified, all instance types that offer the vCPUs and memory size specified by the parameters are matched.', example='2', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instances of the instance type. For more information, see [Billing overview](~~25398~~). Valid values:

* PrePaid: subscription
* PostPaid: pay-as-you-go

Default value: PostPaid.', example='PostPaid', position='Query'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

* EntryLevel
* EnterpriseLevel.
* CreditEntryLevel. For more information, see [Burstable instance families](~~59977~~).', example='EnterpriseLevel', position='Query'),
  instanceType?: string(name='InstanceType', description='The specified instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.

>  If the `InstanceType` parameter is specified, none of the `Cores` and `Memory` parameters can be specified.', example='ecs.hfg6.large', position='Query'),
  instanceTypeFamily?: [ string ](name='InstanceTypeFamily', description='Instance families to be filtered out. You can specify up to 10 instance families.', example='ecs.hfg6', position='Query'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether to match I/O optimized instances. The IoOptimized parameter cannot be specified when the instance is not I/O optimized. Valid values:

* optimized: matches I/O optimized instances.
* none: matches non-I/O optimized instances.

Default value: optimized.

If you query alternative instance types for retired instance types, this parameter is set to none by default. Default value: none.', example='optimized', position='Query'),
  maxPrice?: float(name='MaxPrice', description='The maximum hourly price for pay-as-you-go instances or preemptible instances.

>  If this parameter is specified, the `SpotStrategy` parameter must be set to `SpotWithPriceLimit`.', example='10.0', position='Query'),
  memory?: float(name='Memory', description='The memory size of the instance. Unit: GiB.

>  If the `Cores` and `Memory` parameters are both specified, all instance types that offer the vCPUs and memory size specified by the parameters are matched.', example='8.0', position='Query'),
  networkType: string(name='NetworkType', description='The network type of the ECS instance. Valid values:

*   classic: classic network
*   vpc: VPC

Default value: vpc.', example='vpc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priorityStrategy?: string(name='PriorityStrategy', description='The policy for recommending instance types. Valid values:

* InventoryFirst: Instance types are recommended in descending order based on resource availability.
* PriceFirst: Instance types are recommended in ascending order based on hourly price per vCPU.
* NewProductFirst: The latest instance types are recommended first.

Default value: InventoryFirst.', example='PriceFirst', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the alternative instance types. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scene?: string(name='Scene', description='Specifies the scenario in which the instance type is recommended. Valid values:

* UPGRADE: instance type upgrade or downgrade
* CREATE: instance creation

Default value: CREATE.', example='CREATE', position='Query'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy of preemptible instances. Valid values:

* NoSpot: applies to regular pay-as-you-go instances.
* SpotWithPriceLimit: applies to preemptible instances that have user-defined maximum hourly prices.
* SpotAsPriceGo: applies to preemptible instances that are of the market price at the time of purchase.

> If the `SpotStrategy` parameter is specified, the `InstanceChargeType` parameter must be set to `PostPaid`.

Default value: NoSpot.', example='NoSpot', position='Query'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

* cloud_efficiency: ultra disk
* cloud_ssd: standard SSD
* cloud_essd: enhanced SSD (ESSD)
* cloud: basic disk

For non-I/O optimized instances, the default value is cloud.

For I/O optimized instances, the default value is cloud_efficiency.', example='cloud_ssd', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the alternative instance types. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

When you specify this parameter, we recommend that you set ZoneMatchMode to the default value Include. This value indicates that instance types in the zone specified by ZoneId are preferentially recommended, and instance types in other zones in the same region are also listed.', example='cn-hangzhou-f', position='Query'),
  zoneMatchMode?: string(name='ZoneMatchMode', description='Specifies which alternative instance types are recommended. Valid values:

* Strict: recommends only alternative instance types in the zone specified by ZoneId.
* Include: recommends all instance types in all the zones in the same region as the specified instance type.

When `ZoneId` is specified, the default value of this parameter is Strict. This value indicates that only alternative instance types in the zone specified by ZoneId are recommended.', example='Strict', position='Query'),
}

model DescribeRecommendInstanceTypeResponseBody = {
  data?: {
    recommendInstanceType?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code of the instance type.', example='ecs'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instances of the instance type.', example='PostPaid'),
      instanceType?: {
        cores?: int32(name='Cores', description='The number of vCPUs of the instance type.', example='1'),
        generation?: string(name='Generation', description='The generation of the instance family.', example='ecs-4'),
        instanceType?: string(name='InstanceType', description='The name of the instance type.', example='ecs.hfg6.large'),
        instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family.', example='ecs.hfg6'),
        memory?: int32(name='Memory', description='The memory size of the instance type. Unit: MB.', example='8192'),
        supportIoOptimized?: string(name='SupportIoOptimized', description='Indicates whether the instance type supports I/O optimization.', example='optimized'),
      }(name='InstanceType', description='The name of the instance type.'),
      networkType?: string(name='NetworkType', description='The network type of the ECS instance.', example='vpc'),
      priority?: int32(name='Priority', description='The sorting priority.', example='2'),
      regionId?: string(name='RegionId', description='The region ID of the instance type.', example='cn-hangzhou'),
      scene?: string(name='Scene', description='Indicates the scenario in which the instance type was recommended.', example='CREATE'),
      spotStrategy?: string(name='SpotStrategy', description='The preemption policy for the preemptible instance.', example='NoSpot'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance type.', example='cn-hangzhou-h'),
      zones?: {
        zone?: [ 
        {
          networkTypes?: {
            networkType?: [ string ](name='NetworkType')
          }(name='NetworkTypes', description='Details of network types of the alternative instance types.'),
          zoneNo?: string(name='ZoneNo', description='The zone ID of the specified instance type.', example='cn-hangzhou-h'),
        }
      ](name='zone')
      }(name='Zones', description='Details of the zones where the alternative instance types are available.'),
    }
  ](name='RecommendInstanceType')
  }(name='Data', description='Details of recommended instance types.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeRecommendInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecommendInstanceTypeResponseBody(name='body'),
}

async function describeRecommendInstanceType(request: DescribeRecommendInstanceTypeRequest): DescribeRecommendInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecommendInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The natural language that is used to filter responses. For more information, visit [RFC 7231](https://tools.ietf.org/html/rfc7231). Valid values:

*   zh-CN: Chinese
*   en-US: English
*   ja: Japanese

Default value: zh-CN.', example='zh-CN', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription. If this parameter is set to PrePaid, make sure that you have sufficient balance or credits in your account. Otherwise, the InvalidPayMethod error code is returned.
*   PostPaid: pay-as-you-go.

Default value: PostPaid.', example='PrePaid', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: Elastic Compute Service (ECS) instance
*   disk: disk
*   reservedinstance: reserved instance
*   scu: storage capacity unit (SCU)

Default value: instance.', example='instance', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Qingdao)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='ecs.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-qingdao-et2-bo1'),
      status?: string(name='Status', description='Indicates whether clusters are sold out. Valid values:

*   available
*   soldOut', example='available'),
    }
  ](name='Region')
  }(name='Regions', description='Details about the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRenewalPriceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  expectedRenewDay?: int32(name='ExpectedRenewDay', description='The synchronized expiration date. If you set this parameter, the price for renewing a specified instance to the specified synchronized expiration date is queried. Valid values: 1 to 28.

For information about how to synchronize the expiration dates of instances, see [Synchronize the expiration dates of instances](~~108486~~).

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='5', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The renewal period. Valid values:

*   Valid values when `PriceUnit` is set to `Month`: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values when `PriceUnit` is set to `Year`: 1, 2, 3.

Default value: 1.

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='1', position='Query'),
  priceUnit?: string(name='PriceUnit', description='The unit of the renewal period. Valid values:

*   Month
*   Year

Default value: Month.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource. When the `ResourceType` parameter is set to`  instance `, `ResourceId` is interpreted as `InstanceId`.', example='i-bp1f2o4ldh8l29zv****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to instance.

Default value: instance.', example='instance', position='Query'),
}

model DescribeRenewalPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
          originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
          resource?: string(name='Resource', description='The name of the resource that corresponds to the price.', example='instance'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description', description='The description of the pricing rule.', example='Receive a 15% discount on a 1-year subscription.'),
              ruleId?: long(name='RuleId', description='The ID of the pricing rule.', example='1234567890'),
            }
          ](name='Rule')
          }(name='SubRules', description='Details about the pricing rules.'),
          tradePrice?: float(name='TradePrice', description='The transaction price.', example='3712.8'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos', description='Details about the resource prices.'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
      tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='3712.8'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.', example='Receive a 15% discount on a 1-year subscription'),
        ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1234567890'),
      }
    ](name='Rule')
    }(name='Rules', description='Details about the promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and discount rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

/**
  * ## Description
  * *   You can call this operation to query the price for renewing a subscription instance for a specific period of time or to a synchronized expiration date.
  * *   Take note of the following items:
  *     *   If you set only the required parameters, the price for renewing a specified instance for one month is queried by default.
  *     *   The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the synchronized expiration date-related parameter (`ExpectedRenewDay`) are mutually exclusive. You cannot set these parameters together to query the prices for renewing a specified instance for a period of time and to a synchronized expiration date at the same time.
  *
 */
async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRenewalPrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReservedInstanceAutoRenewAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeReservedInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  reservedInstanceRenewAttributes?: {
    reservedInstanceRenewAttribute?: [ 
    {
      duration?: int32(name='Duration'),
      periodUnit?: string(name='PeriodUnit'),
      renewalStatus?: string(name='RenewalStatus'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
    }
  ](name='ReservedInstanceRenewAttribute')
  }(name='ReservedInstanceRenewAttributes'),
}

model DescribeReservedInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReservedInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function describeReservedInstanceAutoRenewAttribute(request: DescribeReservedInstanceAutoRenewAttributeRequest): DescribeReservedInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReservedInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeReservedInstancesRequest {
  allocationType?: string(name='AllocationType', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', position='Query'),
  lockReason?: string(name='LockReason', position='Query'),
  offeringType?: string(name='OfferingType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', position='Query'),
  reservedInstanceName?: string(name='ReservedInstanceName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  status?: [ string ](name='Status', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeReservedInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  reservedInstances?: {
    reservedInstance?: [ 
    {
      allocationStatus?: string(name='AllocationStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      offeringType?: string(name='OfferingType'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      platform?: string(name='Platform'),
      regionId?: string(name='RegionId'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      scope?: string(name='Scope'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ReservedInstance')
  }(name='ReservedInstances'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReservedInstancesResponseBody(name='body'),
}

async function describeReservedInstances(request: DescribeReservedInstancesRequest): DescribeReservedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReservedInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceByTagsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   keypair: SSH key pair
*   launchtemplate: launch template

All the preceding values must be lowercase.', example='instance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20 The tag key cannot be an empty string. It can be up to 128 characters in length.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20 The tag value can be an empty string. It can be up to 128 characters in length.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model DescribeResourceByTagsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1C1E5359-71D7-44D8-8FAA-0327B549157X'),
  resources?: {
    resource?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-bp16t2cgmiiy7t1c****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
    }
  ](name='Resource')
  }(name='Resources', description='An array consisting of Resource data.'),
  totalCount?: int32(name='TotalCount', description='The total number of resources returned.', example='8'),
}

model DescribeResourceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceByTagsResponseBody(name='body'),
}

async function describeResourceByTags(request: DescribeResourceByTagsRequest): DescribeResourceByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceByTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcesModificationRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  cores?: int32(name='Cores', description='The number of vCPU cores of the instance type. For more information, see [Instance families](~~25378~~). This parameter is valid only when DestinationResource is set to InstanceType.', example='2', position='Query'),
  destinationResource: string(name='DestinationResource', description='The type of the resource. Valid values:

*   InstanceType
*   SystemDisk', example='InstanceType', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list. This parameter is required when the DestinationResource parameter is set to SystemDisk.', example='ecs.g5.large', position='Query'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For more information, see [Instance families](~~25378~~). This parameter is valid only when DestinationResource is set to InstanceType.', example='8.0', position='Query'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', description='Specifies whether to support cross-cluster instance type upgrades. Valid values:

*   true: supports cross-cluster instance type upgrades.
*   false: does not support cross-cluster instance type upgrades.

Default value: false.

When the MigrateAcrossZone parameter is set to true and you upgrade the instance type of the Elastic Compute Service (ECS) instance based on returned information, take note of the following items:

*   Instances that reside in the classic network:

    *   For [retired instance types](~~55263~~), when a non-I/O-optimized instance is upgraded to an I/O-optimized instance, the private IP address, disk device names, and software authorization codes of the instance change. For Linux instances, basic disks (cloud) are identified by the prefix xvd. Ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified by the prefix vd.
    *   For [instance families available for purchase](~~25378~~), when the instance type of an instance is changed, the private IP address of the instance changes.

*   Instances that reside in virtual private clouds (VPCs): For [retired instance types](~~55263~~), when a non-I/O-optimized instance is upgraded to an I/O-optimized instance, the disk device names and software authorization codes of the instance change. For Linux instances, basic disks (cloud) are identified by the prefix xvd. Ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified by the prefix vd.', example='true', position='Query'),
  operationType?: string(name='OperationType', description='The operation of changing resource configurations.

*   Valid values for subscription resources:

    *   Upgrade
    *   Downgrade
    *   RenewDowngrade
    *   RenewModify

*   Valid values for pay-as-you-go resources: Upgrade

Default value: Upgrade.', example='Upgrade', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource. For example, when DestinationResource is set to InstanceType, this parameter can be interpreted as InstanceId.', example='i-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to query.', example='cn-hangzhou-e', position='Query'),
}

model DescribeResourcesModificationResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      availableResources?: {
        availableResource?: [ 
        {
          supportedResources?: {
            supportedResource?: [ 
            {
              max?: int32(name='Max', description='The maximum resource specification value. This parameter is not returned if it has no value.', example='2'),
              min?: int32(name='Min', description='The minimum resource specification value. This parameter is not returned if it has no value.', example='1'),
              status?: string(name='Status', description='The state of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
              statusCategory?: string(name='StatusCategory', description='The category of resource based on stock status. Valid values:

*   WithStock: resources that are in sufficient stock
*   ClosedWithStock: resources that are ininsufficient stock
*   WithoutStock: resources that are out of stock', example='WithStock'),
              unit?: string(name='Unit', description='The resource specification unit. This parameter is not returned if it has no value.', example='null'),
              value?: string(name='Value', description='The resource value.', example='ecs.g5.large'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources', description='Details about the resources.'),
          type?: string(name='Type', description='The type of resource. Valid values:

*   Zone
*   IoOptimized
*   InstanceType
*   SystemDisk
*   DataDisk
*   Network', example='InstanceType'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources', description='Details about the resources available in the zone.'),
      regionId?: string(name='RegionId', description='The region ID of the zone.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
      statusCategory?: string(name='StatusCategory', description='The category of resource based on stock status. Valid values:

*   WithStock: resources that are in sufficient stock
*   ClosedWithStock: resources that are in insufficient stock
*   WithoutStock: resources that are out of stock', example='WithStock'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones', description='Details about the available zones.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeResourcesModificationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcesModificationResponseBody(name='body'),
}

async function describeResourcesModification(request: DescribeResourcesModificationRequest): DescribeResourcesModificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcesModification', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteTablesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', position='Query'),
  routeTableName?: string(name='RouteTableName', position='Query'),
  routerId?: string(name='RouterId', position='Query'),
  routerType?: string(name='RouterType', position='Query'),
  vRouterId?: string(name='VRouterId', position='Query'),
}

model DescribeRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          nextHopType?: string(name='NextHopType'),
          nextHops?: {
            nextHop?: [ 
            {
              enabled?: int32(name='Enabled'),
              nextHopId?: string(name='NextHopId'),
              nextHopType?: string(name='NextHopType'),
              weight?: int32(name='Weight'),
            }
          ](name='NextHop')
          }(name='NextHops'),
          routeTableId?: string(name='RouteTableId'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys'),
      routeTableId?: string(name='RouteTableId'),
      routeTableType?: string(name='RouteTableType'),
      vRouterId?: string(name='VRouterId'),
    }
  ](name='RouteTable')
  }(name='RouteTables'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteTablesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouterInterfacesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouterInterfacesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      businessStatus?: string(name='BusinessStatus'),
      chargeType?: string(name='ChargeType'),
      connectedTime?: string(name='ConnectedTime'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      name?: string(name='Name'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      oppositeRouterId?: string(name='OppositeRouterId'),
      oppositeRouterType?: string(name='OppositeRouterType'),
      role?: string(name='Role'),
      routerId?: string(name='RouterId'),
      routerInterfaceId?: string(name='RouterInterfaceId'),
      routerType?: string(name='RouterType'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouterInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouterInterfacesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouterInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  direction?: string(name='Direction', description='The direction in which the security group rule is applied. Valid values:

*   egress: outbound
*   ingress: inbound
*   all: outbound and inbound

Default value: all.', example='all', position='Query'),
  nicType?: string(name='NicType', description='The network interface type of the security group rule.

*   Default value for rules of security groups in the classic network: internet. Valid values for rules of security groups in the classic network:

    *   internet
    *   intranet

    > You can query security group rules of only one network interface type in a single call. To query security group rules of both network interface types, call the operation twice.

*   When the security group is in a virtual private cloud (VPC), set the value to intranet. This is also the default value.

    > If you set this parameter to internet or leave this parameter empty, the intranet value is automatically used.', example='intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1gxw6bznjjvhu3****', position='Query'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  description?: string(name='Description', description='The description of the security group.', example='This is description.'),
  innerAccessPolicy?: string(name='InnerAccessPolicy', description='The access control policy of the security group. Valid values:

*   Accept: All instances in the security group can communicate with each other.
*   drop: All instances in the security group are isolated from each other.', example='Accept'),
  permissions?: {
    permission?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the security group rule was created. The time is displayed in UTC.', example='2018-12-12T07:28:38Z'),
      description?: string(name='Description', description='The description of the security group.', example='Description Sample 01'),
      destCidrIp?: string(name='DestCidrIp', description='The destination CIDR blocks for outbound access control.', example='0.0.0.0/0'),
      destGroupId?: string(name='DestGroupId', description='The ID of the destination security group for outbound access control.', example='sg-bp1czdx84jd88i7v****'),
      destGroupName?: string(name='DestGroupName', description='The name of the destination security group.', example='testDestGroupName'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group.', example='1234567890'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list for outbound access control.', example='pl-x1j1k5ykzqlixabc****'),
      destPrefixListName?: string(name='DestPrefixListName', description='The name of the destination prefix list.', example='DestPrefixListName Sample'),
      direction?: string(name='Direction', description='The direction in which the security group rule is applied.', example='ingress'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol.', example='TCP'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The type of the network.', example='intranet'),
      policy?: string(name='Policy', description='The access control policy.', example='Accept'),
      portRange?: string(name='PortRange', description='The port range.', example='80/80'),
      priority?: string(name='Priority', description='The priority of the rule.', example='1'),
      securityGroupRuleId?: string(name='SecurityGroupRuleId', description='The ID of the security group rule.', example='sgr-bp12kewq32dfwrdi****'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block for inbound access control.', example='0.0.0.0/0'),
      sourceGroupId?: string(name='SourceGroupId', description='The source security group for inbound access control.', example='sg-bp12kc4rqohaf2js****'),
      sourceGroupName?: string(name='SourceGroupName', description='The name of the source security group.', example='testSourceGroupName1'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group.', example='1234567890'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port number range.', example='80/80'),
      sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list for inbound access control.', example='pl-x1j1k5ykzqlixdcy****'),
      sourcePrefixListName?: string(name='SourcePrefixListName', description='The name of the source prefix list.', example='SourcePrefixListName Sample'),
    }
  ](name='Permission')
  }(name='Permissions', description='Details about the security group rules.'),
  regionId?: string(name='RegionId', description='The region ID of the security group.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the destination security group.', example='sg-bp1gxw6bznjjvhu3****'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the destination security group.', example='SecurityGroupName Sample'),
  vpcId?: string(name='VpcId', description='The ID of the VPC. If a VPC ID is returned, the network type of the security group is VPC. If no VPC ID is returned, the network type of the security group is classic network.', example='vpc-bp1opxu1zkhn00gzv****'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupReferencesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: [ string ](name='SecurityGroupId', position='Query'),
}

model DescribeSecurityGroupReferencesResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupReferences?: {
    securityGroupReference?: [ 
    {
      referencingSecurityGroups?: {
        referencingSecurityGroup?: [ 
        {
          aliUid?: string(name='AliUid'),
          securityGroupId?: string(name='SecurityGroupId'),
        }
      ](name='ReferencingSecurityGroup')
      }(name='ReferencingSecurityGroups'),
      securityGroupId?: string(name='SecurityGroupId'),
    }
  ](name='SecurityGroupReference')
  }(name='SecurityGroupReferences'),
}

model DescribeSecurityGroupReferencesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupReferencesResponseBody(name='body'),
}

async function describeSecurityGroupReferences(request: DescribeSecurityGroupReferencesRequest): DescribeSecurityGroupReferencesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroupReferences', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   true: performs a dry run. The system checks the AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false', position='Query'),
  fuzzyQuery?: boolean(name='FuzzyQuery', description='> This parameter is no longer used.', example='null', position='Query'),
  isQueryEcsCount?: boolean(name='IsQueryEcsCount', description='> This parameter is no longer used.', example='null', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. If you specify the MaxResults parameter, the `MaxResults` and `NextToken` parameters are used for a paged query.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the security group. Valid values:

*   vpc: virtual private cloud (VPC)
*   classic: classic network', example='vpc', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Set this parameter to the NextToken value that is returned when you called the DescribeInstanceTypes operation last time. You do not need to specify this parameter for the first request.', example='e71d8a535bd9cc11', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security groups. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security groups belong. When you use this parameter to filter resources, the number of resources in the specified resource group cannot exceed 1,000. You can call the [ListResourceGroups](~~158855~~) operation to query the most recent resource group list.

> Resources in the default resource group are displayed in the response regardless of how you specify this parameter.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  securityGroupIds?: string(name='SecurityGroupIds', description='The IDs of security groups. The value is a JSON array that consists of up to 100 security group IDs. Separate the IDs with commas (,).', example='["sg-bp67acfmxazb4p****", "sg-bp67acfmxazb4p****", "sg-bp67acfmxazb4p****",....]', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='SGTestName', position='Query'),
  securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group

> If you do not specify this parameter, basic and advanced security groups are queried.', example='normal', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the security group. You can specify up to 20 tag keys for the security group.

Up to 1,000 resources that have the specified tags can be returned in the response. To query more than 1,000 resources that have the specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The tag values of the security group. You can specify up to 20 tag values for the security group.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the security group.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the security groups belong.', example='vpc-bp67acfmxazb4p****', position='Query'),
}

model DescribeSecurityGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that can be used in the next request to retrieve a new page of results. If the return value of this parameter is empty when you specify the MaxResults and NextToken parameters for a paged query, no more results are to be returned.', example='e71d8a535bd9cc11'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the security groups.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroups?: {
    securityGroup?: [ 
    {
      availableInstanceAmount?: int32(name='AvailableInstanceAmount', description='> This parameter is in invitational preview and unavailable for general users.', example='0'),
      creationTime?: string(name='CreationTime', description='The time when the security group was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2021-08-31T03:12:29Z'),
      description?: string(name='Description', description='The description of the security group.', example='TestDescription'),
      ecsCount?: int32(name='EcsCount', description='> This parameter is in invitational preview and unavailable for general users.', example='0'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security group belongs.', example='rg-bp67acfmxazb4p****'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='SGTestName'),
      securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group', example='normal'),
      serviceID?: long(name='ServiceID', description='The ID of the distributor to which the security group belongs.', example='12345678910'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the security group is an Alibaba Cloud service or a distributor.', example='false'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag keys of the security group.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag values of the security group.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the security groups.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the security group belongs.', example='vpc-bp67acfmxazb4p****'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups', description='The information about the security groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of security groups. If you specify the `MaxResults` and `NextToken` parameters in the request, this parameter is empty.', example='20'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

/**
  * Before you call this operation, take note of the following items:
  * *   The basic information of security groups includes the IDs and descriptions. The response returns security groups in descending order based on their IDs.
  * *   We recommend that you use the NextToken and MaxResults parameters for a paged query. We recommend that you use the MaxResults parameter to specify the maximum number of entries to return in each request. The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. When you perform the next request, set the NextToken parameter to the NextToken value that is returned in the previous call and use the MaxResults parameter to specify the maximum number of entries to return in this request. If the returned value of the NextToken parameter is empty, the current page of results is the last page and no more results are to be returned.
  * *   When you use Alibaba Cloud CLI to call an API operation, you must specify request parameter values of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
 */
async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSendFileResultsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Query'),
  invokeId?: string(name='InvokeId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeSendFileResultsResponseBody = {
  invocations?: {
    invocation?: [ 
    {
      content?: string(name='Content'),
      contentType?: string(name='ContentType'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      fileGroup?: string(name='FileGroup'),
      fileMode?: string(name='FileMode'),
      fileOwner?: string(name='FileOwner'),
      invocationStatus?: string(name='InvocationStatus'),
      invokeId?: string(name='InvokeId'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime'),
          errorCode?: string(name='ErrorCode'),
          errorInfo?: string(name='ErrorInfo'),
          finishTime?: string(name='FinishTime'),
          instanceId?: string(name='InstanceId'),
          invocationStatus?: string(name='InvocationStatus'),
          startTime?: string(name='StartTime'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances'),
      name?: string(name='Name'),
      overwrite?: string(name='Overwrite'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      targetDir?: string(name='TargetDir'),
      vmCount?: int32(name='VmCount'),
    }
  ](name='Invocation')
  }(name='Invocations'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeSendFileResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSendFileResultsResponseBody(name='body'),
}

async function describeSendFileResults(request: DescribeSendFileResultsRequest): DescribeSendFileResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSendFileResults', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotGroupsRequest {
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='This parameter is unavailable.', example='hide', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-j6ca469urv8ei629****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=500, position='Query'),
  name?: string(name='Name', description='The name of the snapshot-consistent group.', example='testName', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Set the value to the NextToken value that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the snapshot-consistent group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotGroupId?: [ string ](name='SnapshotGroupId', description='The ID of snapshot-consistent group N. Valid values of N: 1 to 10.', example='ssg-j6ciyh3k52qp7ovm****', position='Query'),
  status?: [ string ](name='Status', description='The state of snapshot-consistent group N. Valid values of the second N: 1, 2, and 3. Valid values:

*   progressing: The snapshot-consistent group is being created.
*   accomplished: The snapshot-consistent group is created.
*   failed: The snapshot-consistent group fails to be created.', example='accomplished', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the snapshot-consistent group. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the snapshot-consistent group. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the snapshot-consistent group.', position='Query'),
}

model DescribeSnapshotGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If the return value is empty, no more data exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F9A4CC4-362F-469A-B9EF-B3204EF8AA3A'),
  snapshotGroups?: {
    snapshotGroup?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot-consistent group was created.', example='2021-03-23T10:58:48Z'),
      description?: string(name='Description', description='The description of the snapshot-consistent group.', example='This is description.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the snapshot-consistent group belongs. This parameter has a value only when all disk snapshots in the snapshot-consistent group belong to the same instance. If disk snapshots in the snapshot-consistent group belong to different instances, you can use parameters starting with `Snapshots.Snapshot.Tags.` in the response to view the ID of the instance to which each snapshot in the snapshot-consistent group belongs.', example='i-j6ca469urv8ei629****'),
      name?: string(name='Name', description='The name of the snapshot-consistent group.', example='testName'),
      progressStatus?: string(name='ProgressStatus', description='> This parameter is unavailable.', example='null'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****'),
      snapshotGroupId?: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group.', example='ssg-j6ciyh3k52qp7ovm****'),
      snapshots?: {
        snapshot?: [ 
        {
          instantAccess?: boolean(name='InstantAccess', description='Indicates whether the instant access feature was enabled. Valid values:

*   true: The instant access feature was enabled. This feature can be enabled only for enhanced SSDs (ESSDs).
*   false: The instant access feature was disabled. The snapshot is a normal snapshot for which the instant access feature was disabled.', example='true'),
          instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The retention period of the instant access feature. After the retention period ends, the snapshot is automatically released.', example='3'),
          progress?: string(name='Progress', description='The progress of the snapshot creation task. Unit: percent (%).', example='100%'),
          snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-j6cbzmrlbf09w72q****'),
          sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk. This parameter is retained even after the source disk is released.', example='d-j6c3ogynmvpi6wy7****'),
          sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system: system disk
*   data: data disk', example='system'),
          tags?: {
            tag?: [ 
            {
              key?: string(name='Key', description='The tag key of each snapshot in the snapshot-consistent group. The default values of Key and Value contain the details of the instance to which the snapshot belongs.', example='acs:ecs:createFrom'),
              value?: string(name='Value', description='The tag value of each snapshot in the snapshot- consistent group. The default values of Key and Value contain the details of the instance to which the snapshot belongs.', example='i-bp11qm0o3dk4iuc****'),
            }
          ](name='Tag')
          }(name='Tags', description='The tags of the snapshots in the snapshot-consistent group. The default value contains the details of the instance to which the snapshot belongs.'),
        }
      ](name='Snapshot')
      }(name='Snapshots', description='Details of the snapshots in the snapshot-consistent group.'),
      status?: string(name='Status', description='The state of the snapshot-consistent group. Valid values:

*   progressing: The snapshot-consistent group is being created.
*   accomplished: The snapshot-consistent group is created.
*   failed: The snapshot-consistent group fails to be created.', example='accomplished'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key of the snapshot-consistent group.', example='TestKey'),
          value?: string(name='Value', description='The tag value of the snapshot-consistent group.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the snapshot-consistent group.'),
    }
  ](name='SnapshotGroup')
  }(name='SnapshotGroups', description='Details of the snapshot-consistent groups.'),
}

model DescribeSnapshotGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotGroupsResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `SnapshotGroupId.N`, and `Status.N` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
 */
async function describeSnapshotGroups(request: DescribeSnapshotGroupsRequest): DescribeSnapshotGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshotGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotLinksRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  diskIds?: string(name='DiskIds', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotLinkIds?: string(name='SnapshotLinkIds', position='Query'),
}

model DescribeSnapshotLinksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshotLinks?: {
    snapshotLink?: [ 
    {
      category?: string(name='Category'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instantAccess?: boolean(name='InstantAccess'),
      regionId?: string(name='RegionId'),
      snapshotLinkId?: string(name='SnapshotLinkId'),
      sourceDiskId?: string(name='SourceDiskId'),
      sourceDiskName?: string(name='SourceDiskName'),
      sourceDiskSize?: int32(name='SourceDiskSize'),
      sourceDiskType?: string(name='SourceDiskType'),
      totalCount?: int32(name='TotalCount'),
      totalSize?: long(name='TotalSize'),
    }
  ](name='SnapshotLink')
  }(name='SnapshotLinks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSnapshotLinksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotLinksResponseBody(name='body'),
}

async function describeSnapshotLinks(request: DescribeSnapshotLinksRequest): DescribeSnapshotLinksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshotLinks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotMonitorDataRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  category?: string(name='Category', description='The type of the snapshot. Valid values:

*   Standard: normal snapshot
*   Flash: local snapshot

Default value: Standard.', example='Standard', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2019-05-10T03:00:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The interval at which to query the monitoring data of snapshot sizes. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60', example='60', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2019-05-10T00:00:00Z', position='Query'),
}

model DescribeSnapshotMonitorDataResponseBody = {
  monitorData?: {
    dataPoint?: [ 
    {
      size?: long(name='Size', description='The total size of the snapshots. Unit: bytes.', example='243036848128'),
      timeStamp?: string(name='TimeStamp', description='The timestamp that corresponds to a snapshot size.', example='2019-05-10T04:00:00Z'),
    }
  ](name='DataPoint')
  }(name='MonitorData', description='Details about the monitoring data of snapshot sizes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F8163A8-F5DE-47A2-A572-4E062D223E09'),
}

model DescribeSnapshotMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotMonitorDataResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Up to 400 entries of monitoring data can be returned at a time. If the result of the `(EndTime - StartTime)/Period` formula is greater than 400, an error is returned.
  * *   Only the monitored data within the last 30 days can be queried. If the value of `StartTime` is more than 30 days earlier than when you call this operation, an error is returned.
  *
 */
async function describeSnapshotMonitorData(request: DescribeSnapshotMonitorDataRequest): DescribeSnapshotMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshotMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotPackageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSnapshotPackageResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshotPackages?: {
    snapshotPackage?: [ 
    {
      displayName?: string(name='DisplayName'),
      endTime?: string(name='EndTime'),
      initCapacity?: long(name='InitCapacity'),
      startTime?: string(name='StartTime'),
    }
  ](name='SnapshotPackage')
  }(name='SnapshotPackages'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSnapshotPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotPackageResponseBody(name='body'),
}

async function describeSnapshotPackage(request: DescribeSnapshotPackageRequest): DescribeSnapshotPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshotPackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotsRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 used to query resources. Set the value to `CreationStartTime`. You can specify a time by setting both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of the filter that is used to query resources. If you specify this parameter, you must also specify the `Filter.1.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2019-12-13T17:00Z'),
    }
  ](name='Filter', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  category?: string(name='Category', description='The type of the snapshot. Valid values:

*   Standard: normal snapshot
*   Flash: local snapshot

The local snapshot feature is replaced by the instant access feature. When you specify this parameter, take note of the following items:

*   If you have used local snapshots before December 14, 2020, you can use this parameter.
*   If you have not used local snapshots before December 14, 2020, you cannot use this parameter.

For more information, see [Snapshot service upgrade and addition of a new billable item on December 14, 2020](https://help.aliyun.com/noticelist/articleid/1060755542.html).

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='Standard', position='Query'),
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp67acfmxazb4p****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   true: performs a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether the snapshot is encrypted. Default value: false.', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used for the data disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the query. Set the value to the NextToken value obtained from the response to the previous request.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotIds?: string(name='SnapshotIds', description='The IDs of snapshots. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate the snapshot IDs with commas (,).', example='["s-bp67acfmxazb4p****", "s-bp67acfmxazb5p****", … "s-bp67acfmxazb6p****"]', position='Query'),
  snapshotLinkId?: string(name='SnapshotLinkId', description='The ID of the snapshot chain. The value is a JSON array that consists of up to 100 snapshot chain IDs. Separate the snapshot chain IDs with commas (,).', example='["sl-bp1grgphbcc9brb5****", "sl-bp1c4izumvq0i5bs****", … "sl-bp1akk7isz866dds****"]', position='Query'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='testSnapshotName', position='Query'),
  snapshotType?: string(name='SnapshotType', description='The type of the snapshot. Valid values:

*   auto: automatic snapshot
*   user: manual snapshot
*   all: This parameter indicates all snapshot types.', example='all', position='Query'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk for which the snapshot was created. Valid values:

*   System: system disk
*   data: data disk

> The value of this parameter is case-insensitive.', example='Data', position='Query'),
  status?: string(name='Status', description='The state of the snapshot. Default value: all. Valid values:

*   progressing: The snapshot is being created.
*   accomplished: The snapshot is created.
*   failed: The snapshot fails to be created.
*   all: This parameter indicates all snapshot states.', example='all', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the snapshot. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the snapshot. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the snapshot.', position='Query'),
  usage?: string(name='Usage', description='Specifies whether the snapshot has been used to create custom images or disks. Valid values:

*   image: The snapshot has been used to create custom images.
*   disk: The snapshot is used to create disks.
*   image_disk: The snapshot has been used to create both custom images and data disks.
*   none: The snapshot has not been used to create custom images or disks.', example='none', position='Query'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshots?: {
    snapshot?: [ 
    {
      category?: string(name='Category', description='The category of the snapshot.

>  This parameter will be removed in the future. We recommend that you use the `InstantAccess` parameter to ensure future compatibility.', example='standard'),
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-08-20T14:52:28Z'),
      description?: string(name='Description', description='The description of the snapshot.', example='testDescription'),
      encrypted?: boolean(name='Encrypted', description='Indicates whether the snapshot was encrypted.', example='false'),
      instantAccess?: boolean(name='InstantAccess', description='Indicates whether the instant access feature was enabled. Valid values:

*   true: The instant access feature was enabled. This feature can be enabled only for enhanced SSDs (ESSDs).
*   false: The instant access feature was disabled. The snapshot is a normal snapshot for which the instant access feature was disabled.', example='false'),
      instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The validity period of the instant access feature. The instant access feature is automatically disabled when the specified period expires.

By default, the value of this parameter is the same as that of `RetentionDays`.', example='30'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key used for the data disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
      lastModifiedTime?: string(name='LastModifiedTime', description='The time when the snapshot was last changed. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-08-25T14:18:09Z'),
      productCode?: string(name='ProductCode', description='The product number inherited from Alibaba Cloud Marketplace.', example='jxsc000****'),
      progress?: string(name='Progress', description='The progress of the snapshot creation task. Unit: percent (%).', example='100%'),
      remainTime?: int32(name='RemainTime', description='The remaining time required to create the snapshot. Unit: seconds.', example='38'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      retentionDays?: int32(name='RetentionDays', description='The retention period of the automatic snapshot. Unit: days.', example='30'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp67acfmxazb4p****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot. This parameter is returned only if a snapshot name was specified when the snapshot was created.', example='testSnapshotName'),
      snapshotSN?: string(name='SnapshotSN', description='The serial number of the snapshot.', example='64472-116742336-61976****'),
      snapshotType?: string(name='SnapshotType', description='The type of snapshot. Valid values:

*   auto or timer: automatic snapshot
*   user: manual snapshot
*   all: all snapshot types', example='all'),
      sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk. This parameter is retained even after the source disk is released.', example='d-bp67acfmxazb4ph****'),
      sourceDiskSize?: string(name='SourceDiskSize', description='The capacity of the source disk for which the snapshot was created. Unit: GiB.', example='40'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system
*   data', example='system'),
      sourceRegionId?: string(name='SourceRegionId', description='The region ID of the source snapshot.', example='cn-hangzhou'),
      sourceSnapshotId?: string(name='SourceSnapshotId', description='The ID of the source snapshot.', example='s-bp67acfmxazb4p****'),
      sourceStorageType?: string(name='SourceStorageType', description='The type of the source disk.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='disk'),
      status?: string(name='Status', description='The state of the snapshot. Valid values:

*   progressing
*   accomplished
*   failed', example='accomplished'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the snapshot.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the snapshot.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the snapshot.'),
      usage?: string(name='Usage', description='Indicates whether the snapshot has been used to create custom images or disks. Valid values:

*   image
*   disk
*   image_disk
*   none', example='image'),
    }
  ](name='Snapshot')
  }(name='Snapshots', description='Details about the snapshots.'),
  totalCount?: int32(name='TotalCount', description='The total number of snapshots.', example='1'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

/**
  * ## Description
  * You can specify multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  * When you use Alibaba Cloud CLI to call an API operation, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
 */
async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshots', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnapshotsUsageRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the snapshot. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
}

model DescribeSnapshotsUsageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotCount?: int32(name='SnapshotCount', description='The number of snapshots stored in the current region.', example='5'),
  snapshotSize?: long(name='SnapshotSize', description='The total size of snapshots stored in the current region. Unit: byte.', example='122'),
}

model DescribeSnapshotsUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsUsageResponseBody(name='body'),
}

/**
  * If you want to view the snapshot usage information about each disk in the current region, we recommend that you call the [DescribeSnapshotLinks](~~55837~~) operation to query snapshot chain information.
  *
 */
async function describeSnapshotsUsage(request: DescribeSnapshotsUsageRequest): DescribeSnapshotsUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnapshotsUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSpotAdviceRequest {
  cores?: int32(name='Cores', description='The number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).', example='2', position='Query'),
  gpuAmount?: int32(name='GpuAmount', description='The number of GPUs that the GPU-accelerated instance has. For information about the valid values, see [GPU-accelerated compute optimized instance types](~~108496~~).', example='2', position='Query'),
  gpuSpec?: string(name='GpuSpec', description='The GPU type. Valid values:

*   NVIDIA P4
*   NVIDIA T4
*   NVIDIA P100
*   NVIDIA V100
*   NVIDIA A100

This parameter is empty by default, which indicates that all GPU types are queried. For more information, see [GPU-accelerated compute optimized instance types](~~108496~~).', example='NVIDIA T4', position='Query'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel: entry level.
*   EnterpriseLevel: enterprise level.
*   CreditEntryLevel: credit-based entry level. For more information, see [Overview](~~59977~~) of burstable instances.

This parameter is empty by default, which indicates that instance families of all levels are queried.', example='EntryLevel', position='Query'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family. For more information, see [Instance families](~~25378~~).', example='ecs.c5', position='Query'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The instance types. You can specify to 10 instance types.', example='ecs.c5.large', position='Query'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For more information, see [Instance families](~~25378~~).', example='8.0', position='Query'),
  minCores?: int32(name='MinCores', description='The minimum number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).', example='2', position='Query'),
  minMemory?: float(name='MinMemory', description='The minimum memory size of the instance type. For more information, see [Instance families](~~25378~~).', example='8.0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.

This parameter is empty by default, which indicates that all zones in the specified region are queried.', example='cn-hangzhou-i', position='Query'),
}

model DescribeSpotAdviceResponseBody = {
  availableSpotZones?: {
    availableSpotZone?: [ 
    {
      availableSpotResources?: {
        availableSpotResource?: [ 
        {
          averageSpotDiscount?: int32(name='AverageSpotDiscount', description='The percentage of the average preemptible instance relative to the pay-as-you-go instance price in the last 30 days. Unit: percentage (%). Valid values: 1 to 100.

You can calculate the average preemptible instance price based on the returned value. For example, if the pay-as-you-go instance price is 1 and the returned value of this parameter is 20, the average preemptible instance price for the last 30 days is 0.2.', example='20'),
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c5.large'),
          interruptRateDesc?: string(name='InterruptRateDesc', description='The release rate range of preemptible instances in the last 30 days, which corresponds to the ` InterruptionRate  `value. Valid values:

*   0-3%
*   3-5%
*   5-10%
*   10-100%', example='0-3%'),
          interruptionRate?: float(name='InterruptionRate', description='The average release rate of preemptible instances forn the last 30 days. Unit: percent (%).', example='0'),
        }
      ](name='AvailableSpotResource')
      }(name='AvailableSpotResources', description='Details about preemptible instances in the last 30 days, including release rates and percentages of average preemptible instance prices relative to pay-as-you-go instance prices.'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-i'),
    }
  ](name='AvailableSpotZone')
  }(name='AvailableSpotZones', description='Details about preemptible instances in the zones of the specified region.

> The returned values are sorted based on the historical percentages of average preemptible instance prices relative to pay-as-you-go instance prices for instance types.'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeSpotAdviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpotAdviceResponseBody(name='body'),
}

/**
  * *   You can call this operation to query information that is generated for preemptible instances in the last 30 days and select suitable instance types based on the returned results. The information that you can query by calling this operation includes:
  *     *   Average release rate of preemptible instances.
  *     *   The discount rate of the average preemptible instance price relative to the pay-as-you-go instance price.
  *     *   Average preemptible instance price that is calculated based on the preceding percentage.
  * *   This operation is applicable only to I/O optimized preemptible instances that are located in virtual private clouds (VPCs).
  * *   You can use one of the following methods to specify instance types:
  *     *   Set the `Cores` and `Memory` parameters or the `MinCores` and `MinMemory` parameters to query information of instance types that have the specified number of vCPUs and memory size.
  *     *   Set the `InstanceTypes.N parameter` to query information of the specified instance types.
  *     *   Set the `Cores` and `Memory` parameters or the `MinCores` and `MinMemory` parameters, and set the `InstanceTypeFamily` or `InstanceFamilyLevel` parameter to query information of the instance types that have the specified number of vCPUs and memory size within the specified instance family or at the specified instance family level.
  *
 */
async function describeSpotAdvice(request: DescribeSpotAdviceRequest): DescribeSpotAdviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSpotAdvice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSpotPriceHistoryRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  endTime?: string(name='EndTime', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ioOptimized?: string(name='IoOptimized', position='Query'),
  networkType: string(name='NetworkType', position='Query'),
  OSType?: string(name='OSType', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spotDuration?: int32(name='SpotDuration', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeSpotPriceHistoryResponseBody = {
  currency?: string(name='Currency'),
  nextOffset?: int32(name='NextOffset'),
  requestId?: string(name='RequestId'),
  spotPrices?: {
    spotPriceType?: [ 
    {
      instanceType?: string(name='InstanceType'),
      ioOptimized?: string(name='IoOptimized'),
      networkType?: string(name='NetworkType'),
      originPrice?: float(name='OriginPrice'),
      spotPrice?: float(name='SpotPrice'),
      timestamp?: string(name='Timestamp'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='SpotPriceType')
  }(name='SpotPrices'),
}

model DescribeSpotPriceHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpotPriceHistoryResponseBody(name='body'),
}

async function describeSpotPriceHistory(request: DescribeSpotPriceHistoryRequest): DescribeSpotPriceHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSpotPriceHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStorageCapacityUnitsRequest {
  allocationType?: string(name='AllocationType', position='Query'),
  capacity?: int32(name='Capacity', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: [ string ](name='Status', position='Query'),
  storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeStorageCapacityUnitsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  storageCapacityUnits?: {
    storageCapacityUnit?: [ 
    {
      allocationStatus?: string(name='AllocationStatus'),
      capacity?: int32(name='Capacity'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      storageCapacityUnitId?: string(name='StorageCapacityUnitId'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='StorageCapacityUnit')
  }(name='StorageCapacityUnits'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStorageCapacityUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageCapacityUnitsResponseBody(name='body'),
}

async function describeStorageCapacityUnits(request: DescribeStorageCapacityUnitsRequest): DescribeStorageCapacityUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorageCapacityUnits', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStorageSetDetailsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskIds?: string(name='DiskIds', description='The IDs of disks or Shared Block Storage devices. The value can be a JSON array that consists of up to 100 disk or Shared Block Storage device IDs. Separate the IDs with commas (,).', example='["d-bp1d6tsvznfghy7y****", "d-bp1ippxbaql9zet7****", … "d-bp1ib7bcz07l****"]', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='hide', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10', minimum=10, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
  storageSetId: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****', position='Query'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set.', example='3', minimum=2, position='Query'),
}

model DescribeStorageSetDetailsResponseBody = {
  disks?: {
    disk?: [ 
    {
      category?: string(name='Category', description='The category of the disk or Shared Block Storage device.', example='cloud_ssd'),
      creationTime?: string(name='CreationTime', description='The time when the disk or Shared Block Storage device was created.', example='2019-06-01T00:00:00Z'),
      diskId?: string(name='DiskId', description='The ID of the disk or Shared Block Storage device.', example='d-bp67acfmxazb4p****'),
      diskName?: string(name='DiskName', description='The name of the disk or Shared Block Storage device.', example='testDiskName'),
      regionId?: string(name='RegionId', description='The region to which the disk or Shared Block Storage device belongs.', example='cn-hangzhou'),
      storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The number of partitions in the storage set.', example='3'),
      zoneId?: string(name='ZoneId', description='The zone to which the disk or Shared Block Storage device belongs.', example='cn-hangzhou-g'),
    }
  ](name='Disk')
  }(name='Disks', description='Details about the disks or Shared Block Storage devices in the storage set.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='49765E79-0D5D-4451-B3AE-580A20831846'),
  totalCount?: int32(name='TotalCount', description='The total number of storage sets.', example='1'),
}

model DescribeStorageSetDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageSetDetailsResponseBody(name='body'),
}

async function describeStorageSetDetails(request: DescribeStorageSetDetailsRequest): DescribeStorageSetDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorageSetDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStorageSetsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='hide', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='1', minimum=10, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
  storageSetIds?: string(name='StorageSetIds', description='The IDs of storage sets. The value is a JSON array that consists of up to 100 storage set IDs. Separate the IDs with commas (,).', example='["ss-bp1d6tsvznfghy7y****", "ss-bp1ippxbaql9zet7****", … "ss-bp1ib7bcz07l****"]', position='Query'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='storageSetTest', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID of the storage set. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g', position='Query'),
}

model DescribeStorageSetsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageSets?: {
    storageSet?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the storage set was created.', example='2019-06-01T00:00:00Z'),
      description?: string(name='Description', description='The description of the storage set.', example='testDescription'),
      regionId?: string(name='RegionId', description='The ID of the region to which the storage set belongs.', example='cn-hangzhou'),
      storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp1d6tsvznfghy7y****'),
      storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='testStorageSetName'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions supported by the storage set.', example='3'),
      zoneId?: string(name='ZoneId', description='The ID of the zone to which the storage set belongs.', example='cn-hangzhou-g'),
    }
  ](name='StorageSet')
  }(name='StorageSets', description='Details about the storage sets. The value of this parameter is an array that consists of StorageSet data.'),
  totalCount?: int32(name='TotalCount', description='The total number of storage sets.', example='20'),
}

model DescribeStorageSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageSetsResponseBody(name='body'),
}

async function describeStorageSets(request: DescribeStorageSetsRequest): DescribeStorageSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStorageSets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  category?: string(name='Category', description='> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='null', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. For example, when ResourceType is set to instance, this parameter is interpreted as the ID of the instance (InstanceId).', example='s-946ntx4wr****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource to which the tag is added. Valid values:

*   instance: Elastic Compute Service (ECS) instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy

All values must be lowercase.', example='snapshot', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B04B8CF3-4489-432D-83BA-6F128E4F2295'),
  tags?: {
    tag?: [ 
    {
      resourceTypeCount?: {
        ddh?: int32(name='Ddh', description='The number of dedicated hosts to which the tag is added.', example='1'),
        disk?: int32(name='Disk', description='The number of disks to which the tag is added.', example='15'),
        eni?: int32(name='Eni', description='The number of ENIs to which the tag is added.', example='5'),
        image?: int32(name='Image', description='The number of images to which the tag is added.', example='6'),
        instance?: int32(name='Instance', description='The number of instances to which the tag is added.', example='45'),
        keyPair?: int32(name='KeyPair', description='The number of key pairs to which the tag is added.', example='17'),
        launchTemplate?: int32(name='LaunchTemplate', description='The number of launch templates to which the tag is added.', example='6'),
        reservedInstance?: int32(name='ReservedInstance', description='The number of reserved instances to which the tag is added.', example='4'),
        securitygroup?: int32(name='Securitygroup', description='The number of security groups to which the tag is added.', example='4'),
        snapshot?: int32(name='Snapshot', description='The number of snapshots to which the tag is added.', example='15'),
        snapshotPolicy?: int32(name='SnapshotPolicy', description='The number of automatic snapshot policies to which the tag is added.', example='4'),
        volume?: int32(name='Volume', description='The number of storage volumes to which the tag is added.', example='6'),
      }(name='ResourceTypeCount', description='The number of resource types.'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags that match all the filter conditions.'),
  totalCount?: int32(name='TotalCount', description='The total number of tags.', example='1'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

/**
  * If a tag key is specified and no tag values are specified, all tags that contain the tag key are returned. If a tag key-value pair is specified, only tags that exactly match the key-value pair are returned.
  *
 */
async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTaskAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  taskId: string(name='TaskId', description='The ID of the task. You can call the [DescribeTasks](~~25622~~) operation to query the list of task IDs.', example='t-ce946ntx4wr****', position='Query'),
}

model DescribeTaskAttributeResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the task was created.', example='2015-11-23T02:13Z'),
  failedCount?: int32(name='FailedCount', description='The number of failed tasks.', example='0'),
  finishedTime?: string(name='FinishedTime', description='The time when the task was complete.', example='2015-11-23T02:19Z'),
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code.', example='ParameterInvalid'),
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='The specified RegionId parameter is invalid.'),
      operationStatus?: string(name='OperationStatus', description='The status of the operation.', example='Success'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name', description='The name of the related item.', example='OSSObject'),
          value?: string(name='Value', description='The value of the related item.', example='MYOSSPRE_m-23f8tcp***_t-23ym6mv***.vhd'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet', description='An array consisting of RelatedItem data.'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet', description='An array consisting of OperationProgress data of each subtask.'),
  regionId?: string(name='RegionId', description='The region ID of the task.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  successCount?: int32(name='SuccessCount', description='The number of completed tasks.', example='1'),
  supportCancel?: string(name='SupportCancel', description='Indicates whether the task can be canceled ([CancelTask](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/canceltask)). Valid values: 

- true: The task can be canceled.
- false: The task cannot be canceled.', example='true'),
  taskAction?: string(name='TaskAction', description='The operation name of the task.', example='ExportImage'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='t-ce946ntx4wr****'),
  taskProcess?: string(name='TaskProcess', description='The progress of the task.', example='100%'),
  taskStatus?: string(name='TaskStatus', description='The status of the task.', example='Finished'),
  totalCount?: int32(name='TotalCount', description='The total number of tasks.', example='1'),
}

model DescribeTaskAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskAttributeResponseBody(name='body'),
}

async function describeTaskAttribute(request: DescribeTaskAttributeRequest): DescribeTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTaskAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  endTime?: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  taskAction?: string(name='TaskAction', position='Query'),
  taskIds?: string(name='TaskIds', position='Query'),
  taskStatus?: string(name='TaskStatus', position='Query'),
}

model DescribeTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  taskSet?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      finishedTime?: string(name='FinishedTime'),
      resourceId?: string(name='ResourceId'),
      supportCancel?: string(name='SupportCancel'),
      taskAction?: string(name='TaskAction'),
      taskId?: string(name='TaskId'),
      taskStatus?: string(name='TaskStatus'),
    }
  ](name='Task')
  }(name='TaskSet'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserBusinessBehaviorRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  statusKey: string(name='statusKey', position='Query'),
}

model DescribeUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
  statusValue?: string(name='StatusValue'),
}

model DescribeUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBusinessBehaviorResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeUserBusinessBehavior(request: DescribeUserBusinessBehaviorRequest): DescribeUserBusinessBehaviorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBusinessBehavior', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserDataRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeUserDataResponseBody = {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  userData?: string(name='UserData'),
}

model DescribeUserDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDataResponseBody(name='body'),
}

async function describeUserData(request: DescribeUserDataRequest): DescribeUserDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVRoutersRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId?: string(name='VRouterId', position='Query'),
}

model DescribeVRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vRouters?: {
    vRouter?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds'),
      vRouterId?: string(name='VRouterId'),
      vRouterName?: string(name='VRouterName'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VRouter')
  }(name='VRouters'),
}

model DescribeVRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVRoutersResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  isDefault?: boolean(name='IsDefault', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount'),
      cidrBlock?: string(name='CidrBlock'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      activationTime?: string(name='ActivationTime'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      localGatewayIp?: string(name='LocalGatewayIp'),
      name?: string(name='Name'),
      peerGatewayIp?: string(name='PeerGatewayIp'),
      peeringSubnetMask?: string(name='PeeringSubnetMask'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus'),
      recoveryTime?: string(name='RecoveryTime'),
      routeTableId?: string(name='RouteTableId'),
      status?: string(name='Status'),
      terminationTime?: string(name='TerminationTime'),
      vbrId?: string(name='VbrId'),
      vlanId?: int32(name='VlanId'),
      vlanInterfaceId?: string(name='VlanInterfaceId'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      activationTime?: string(name='ActivationTime'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      recoveryTime?: string(name='RecoveryTime'),
      terminationTime?: string(name='TerminationTime'),
      vbrId?: string(name='VbrId'),
      vbrOwnerUid?: long(name='VbrOwnerUid'),
      vlanId?: int32(name='VlanId'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRoutersForPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcsRequest {
  isDefault?: boolean(name='IsDefault', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model DescribeVpcsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vpcs?: {
    vpc?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs'),
      vRouterId?: string(name='VRouterId'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  verbose?: boolean(name='Verbose', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      availableDedicatedHostTypes?: {
        dedicatedHostType?: [ string ](name='DedicatedHostType')
      }(name='AvailableDedicatedHostTypes'),
      availableDiskCategories?: {
        diskCategories?: [ string ](name='DiskCategories')
      }(name='AvailableDiskCategories'),
      availableInstanceTypes?: {
        instanceTypes?: [ string ](name='InstanceTypes')
      }(name='AvailableInstanceTypes'),
      availableResourceCreation?: {
        resourceTypes?: [ string ](name='ResourceTypes')
      }(name='AvailableResourceCreation'),
      availableResources?: {
        resourcesInfo?: [ 
        {
          dataDiskCategories?: {
            supportedDataDiskCategory?: [ string ](name='supportedDataDiskCategory')
          }(name='DataDiskCategories'),
          instanceGenerations?: {
            supportedInstanceGeneration?: [ string ](name='supportedInstanceGeneration')
          }(name='InstanceGenerations'),
          instanceTypeFamilies?: {
            supportedInstanceTypeFamily?: [ string ](name='supportedInstanceTypeFamily')
          }(name='InstanceTypeFamilies'),
          instanceTypes?: {
            supportedInstanceType?: [ string ](name='supportedInstanceType')
          }(name='InstanceTypes'),
          ioOptimized?: boolean(name='IoOptimized'),
          networkTypes?: {
            supportedNetworkCategory?: [ string ](name='supportedNetworkCategory')
          }(name='NetworkTypes'),
          systemDiskCategories?: {
            supportedSystemDiskCategory?: [ string ](name='supportedSystemDiskCategory')
          }(name='SystemDiskCategories'),
        }
      ](name='ResourcesInfo')
      }(name='AvailableResources'),
      availableVolumeCategories?: {
        volumeCategories?: [ string ](name='VolumeCategories')
      }(name='AvailableVolumeCategories'),
      dedicatedHostGenerations?: {
        dedicatedHostGeneration?: [ string ](name='DedicatedHostGeneration')
      }(name='DedicatedHostGenerations'),
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId'),
      zoneType?: string(name='ZoneType'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachClassicLinkVpcRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the classic network-type instance.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerId?: long(name='OwnerId', example='155780923770', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the classic network-type instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC to which the instance is linked.', example='vpc-bp67acfmxazb4p****', position='Query'),
}

model DetachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClassicLinkVpcResponseBody(name='body'),
}

async function detachClassicLinkVpc(request: DetachClassicLinkVpcRequest): DetachClassicLinkVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachClassicLinkVpc', 'POST', '/', 'json', false, 'json', request);
}

model DetachDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to automatically release the system disk when the instance from which the system disk is to be detached is released. Valid values:

*   true: The system disk is released when the instance is released.
*   false: The system disk is not released when the instance is released. The system disk is retained as a pay-as-you-go data disk.

Default value: true.

Take note of the following items:

*   This parameter cannot be set for disks for which the multi-attach feature is enabled.
*   If a data disk is to be detached, the default value is `false`.', example='false', position='Query'),
  diskId: string(name='DiskId', description='The ID of the disk to be detached.', example='d-bp67acfmxazb4p****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ECS instance from which the disk is to be detached.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk you want to detach must be in the `In_Use` state.
  * *   The instance from which you want to detach a data disk must be in the `Running` or `Stopped`state.********
  * *   The instance from which you want to detach the system disk must be in the `Stopped` state.****
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.``
  * *   DetachDisk is an asynchronous operation. It takes about one minute for a disk to be detached from an instance after the operation is called.
  *
 */
async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDisk', 'POST', '/', 'json', false, 'json', request);
}

model DetachInstanceRamRoleRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds: string(name='InstanceIds', description='The IDs of instances from which you want to detach an instance RAM role. It can be a JSON array that consists of up to 100 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp67acfmxazb4p****", "i-bp67acfmxazb5p****", "i-bp67acfmxazb6p****"…]', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role to be detached. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you have created.', example='RamRoleTest', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachInstanceRamRoleResponseBody = {
  detachInstanceRamRoleResults?: {
    detachInstanceRamRoleResult?: [ 
    {
      code?: string(name='Code', description='The code that indicates whether the instance RAM role was detached. If 200 is returned, the instance RAM role was detached. If any other value is returned, the instance RAM role failed to be detached. For more information, see the "Error codes" section.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance from which you attempted to detach the instance RAM role.', example='i-bp67acfmxazb4p****'),
      instanceRamRoleSets?: {
        instanceRamRoleSet?: [ 
        {
          instanceId?: string(name='InstanceId', description='The ID of the instance from which the RAM role was detached.', example='i-bp67acfmxazb4p****'),
          ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='RamRoleTest'),
        }
      ](name='InstanceRamRoleSet')
      }(name='InstanceRamRoleSets', description='The details about the instance RAM roles of the instances.'),
      message?: string(name='Message', description='The message that indicates whether the instance RAM role was detached. If success is returned, the instance RAM role was detached. If any other value is returned, the instance RAM role failed to be detached. For more information, see the "Error codes" section.', example='Success'),
      success?: boolean(name='Success', description='Indicates whether the RAM role was detached.', example='true'),
    }
  ](name='DetachInstanceRamRoleResult')
  }(name='DetachInstanceRamRoleResults', description='Details about the results of detaching the instance RAM role from the instances.'),
  failCount?: int32(name='FailCount', description='The number of the instances from which the RAM role failed to be detached.', example='0'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='RamRoleTest'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of the instances from which you detached the RAM role.', example='1'),
}

model DetachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DetachInstanceRamRoleResponseBody(name='body'),
}

async function detachInstanceRamRole(request: DetachInstanceRamRoleRequest): DetachInstanceRamRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachInstanceRamRole', 'POST', '/', 'json', false, 'json', request);
}

model DetachKeyPairRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceIds: string(name='InstanceIds', description='The IDs of instances from which you want to unbind the SSH key pair. The value can be a JSON array that consists of up to 50 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp1d6tsvznfghy7y****", "i-bp1ippxbaql9zet7****", … "i-bp1ib7bcz07l****"]', position='Query'),
  keyPairName: string(name='KeyPairName', description='The names of SSH key pairs.', example='testKeyPairName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSH key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachKeyPairResponseBody = {
  failCount?: string(name='FailCount', description='The number of instances from which the SSH key pair failed to be unbound.', example='0'),
  keyPairName?: string(name='KeyPairName', description='The names of the key pairs.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', description='The operation status code returned. 200 indicates that the operation was successful.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1d6tsvznfghy7y****'),
      message?: string(name='Message', description='The result of the operation. For example, when the value of `Code` is 200, the value of `Message` is `successful`.', example='successful'),
      success?: string(name='Success', description='Indicates whether the operation was successful.', example='true'),
    }
  ](name='Result')
  }(name='Results', description='The result set of the unbind operation.'),
  totalCount?: string(name='TotalCount', description='The total number of instances from which you attempted to unbind the SSH key pair.', example='2'),
}

model DetachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: DetachKeyPairResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After you detach an SSH key pair from an instance, you must call the [RebootInstance](~~25502~~) operation to restart the instance for the detach operation to take effect.
  * *   The username and password authentication method is automatically selected for an instance after you unbind an SSH key pair from the instance.
  *
 */
async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model DetachNetworkInterfaceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance', example='i-bp67acfmxazb4p****', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='The ID of the trunk ENI.

>  This parameter is unavailable for use.', example='eni-f8zapqwj1v1j4ia3****', position='Query'),
}

model DetachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachNetworkInterfaceResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   Primary ENIs cannot be detached from ECS instances.
  * *   The ENI must be in the Detaching (Detaching) or InUse (InUse) state.
  * *   The instance must be in the Running (Running) or Stopped (Stopped) state.
  * *   This operation is an asynchronous operation. After this operation is called to detach an ENI, you can check the state or events of the ENI to determine whether the ENI is detached. The following figure shows the transitions between the states of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/en-US/20230223/uemr/DetachNetworkInterface.png)
  *     *   If the ENI is in the Detaching state, the ENI detachment request is sent and the ENI is being detached from its associated instance.
  *     *   If the ENI is in the Available state, the ENI is detached from its associated instance.
  *     *   If the ENI is stuck in the Detaching state, the ENI may fail to be detached from the associated instance due to specific reasons. For example, the ENI may fail to be detached because the operating system did not respond to the ENI detachment request. If this occurs, you can re-initiate the request to detach the ENI. If the problem persists, restart the instance.
  * **For information about examples on how to call this operation, see **[Detach an ENI](~~471551~~).
  *
 */
async function detachNetworkInterface(request: DetachNetworkInterfaceRequest): DetachNetworkInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachNetworkInterface', 'POST', '/', 'json', false, 'json', request);
}

model DisableActivationRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  activationId: string(name='ActivationId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DisableActivationResponseBody = {
  activation?: {
    activationId?: string(name='ActivationId'),
    creationTime?: string(name='CreationTime'),
    deregisteredCount?: int32(name='DeregisteredCount'),
    description?: string(name='Description'),
    disabled?: boolean(name='Disabled'),
    instanceCount?: int32(name='InstanceCount'),
    instanceName?: string(name='InstanceName'),
    ipAddressRange?: string(name='IpAddressRange'),
    registeredCount?: int32(name='RegisteredCount'),
    timeToLiveInHours?: long(name='TimeToLiveInHours'),
  }(name='Activation'),
  requestId?: string(name='RequestId'),
}

model DisableActivationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableActivationResponseBody(name='body'),
}

async function disableActivation(request: DisableActivationRequest): DisableActivationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableActivation', 'POST', '/', 'json', false, 'json', request);
}

model EipFillParamsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  data: string(name='data', position='Query'),
}

model EipFillParamsResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipFillParamsResponse = {
  headers: map[string]string(name='headers'),
  body: EipFillParamsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function eipFillParams(request: EipFillParamsRequest): EipFillParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EipFillParams', 'POST', '/', 'json', false, 'json', request);
}

model EipFillProductRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  data: string(name='data', position='Query'),
}

model EipFillProductResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipFillProductResponse = {
  headers: map[string]string(name='headers'),
  body: EipFillProductResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function eipFillProduct(request: EipFillProductRequest): EipFillProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EipFillProduct', 'POST', '/', 'json', false, 'json', request);
}

model EipNotifyPaidRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  data: string(name='data', position='Query'),
}

model EipNotifyPaidResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipNotifyPaidResponse = {
  headers: map[string]string(name='headers'),
  body: EipNotifyPaidResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function eipNotifyPaid(request: EipNotifyPaidRequest): EipNotifyPaidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EipNotifyPaid', 'POST', '/', 'json', false, 'json', request);
}

model EnablePhysicalConnectionRequest {
  clientToken: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnablePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnablePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnablePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model ExportImageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageFormat?: string(name='ImageFormat', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  OSSBucket: string(name='OSSBucket', position='Query'),
  OSSPrefix?: string(name='OSSPrefix', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
}

model ExportImageResponseBody = {
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ExportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ExportImageResponseBody(name='body'),
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportImage', 'POST', '/', 'json', false, 'json', request);
}

model ExportSnapshotRequest {
  ossBucket: string(name='OssBucket', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model ExportSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ExportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ExportSnapshotResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function exportSnapshot(request: ExportSnapshotRequest): ExportSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceConsoleOutputRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removeSymbols?: boolean(name='RemoveSymbols', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetInstanceConsoleOutputResponseBody = {
  consoleOutput?: string(name='ConsoleOutput'),
  instanceId?: string(name='InstanceId'),
  lastUpdateTime?: string(name='LastUpdateTime'),
  requestId?: string(name='RequestId'),
}

model GetInstanceConsoleOutputResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceConsoleOutputResponseBody(name='body'),
}

async function getInstanceConsoleOutput(request: GetInstanceConsoleOutputRequest): GetInstanceConsoleOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceConsoleOutput', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceScreenshotRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp1gbz20g229bvu5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-shenzhen', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wakeUp?: boolean(name='WakeUp', description='Specifies whether to wake up hibernating instances.

Default value: false.', example='false', position='Query'),
}

model GetInstanceScreenshotResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp1gbz20g229bvu5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  screenshot?: string(name='Screenshot', description='The JPG-formatted instance screenshot, which is encoded in Base64.', example='iVBORw0KGgoA...AAABJRU5ErkJggg=='),
}

model GetInstanceScreenshotResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceScreenshotResponseBody(name='body'),
}

/**
  * ECS returns an instance screenshot that is in the JPG format and encoded in Base64. You must manually decode the screenshot. We recommend that you call this operation for troubleshooting and diagnosis. When you call this operation, take note of the following items:
  * *   The instance must be in the Running state.
  * *   You cannot obtain screenshots of instances whose instance types have been retired. For more information, see [Retired instance types](~~55263~~).
  * *   If you want to call this operation on the same instance multiple times, you must wait at least 10 seconds between each call. Otherwise, the `Throttling` error code is returned.
  *
 */
async function getInstanceScreenshot(request: GetInstanceScreenshotRequest): GetInstanceScreenshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceScreenshot', 'POST', '/', 'json', false, 'json', request);
}

model ImportImageRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  architecture?: string(name='Architecture', position='Query'),
  bootMode?: string(name='BootMode', position='Query'),
  description?: string(name='Description', position='Query'),
  detectionStrategy?: string(name='DetectionStrategy', position='Query'),
  diskDeviceMapping?: [ 
    {
      device?: string(name='Device'),
      diskImSize?: int32(name='DiskImSize'),
      diskImageSize?: int32(name='DiskImageSize'),
      format?: string(name='Format'),
      OSSBucket?: string(name='OSSBucket'),
      OSSObject?: string(name='OSSObject'),
    }
  ](name='DiskDeviceMapping', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  licenseType?: string(name='LicenseType', position='Query'),
  OSType?: string(name='OSType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ImportImageResponseBody = {
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ImportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ImportImageResponseBody(name='body'),
}

async function importImage(request: ImportImageRequest): ImportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportImage', 'POST', '/', 'json', false, 'json', request);
}

model ImportKeyPairRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  keyPairName: string(name='KeyPairName', description='The name of the key pair. The name must be unique. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testKeyPairName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicKeyBody: string(name='PublicKeyBody', description='The public key of the key pair.', example='ABC1234567', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the key pair belongs.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the key pair. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. The tag key cannot start with `acs:` or `aliyun` or contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the key pair. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the key pair.', position='Query'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716.', example='89:f0:ba:62:ac:b8:aa:e1:61:5e:fd:81:69:86:6d:6b:f0:c0:5a:**'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: ImportKeyPairResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * * A maximum of 500 key pairs can be created in each region.
  * * The key pair that you wan to import must support one of the following encryption methods:
  *     * rsa
  *     * dsa
  *     * ssh-rsa
  *     * ssh-dss
  *     * ecdsa
  *     * ssh-rsa-cert-v00@openssh.com
  *     * ssh-dss-cert-v00@openssh.com
  *     * ssh-rsa-cert-v01@openssh.com
  *     * ssh-dss-cert-v01@openssh.com
  *     * ecdsa-sha2-nistp256-cert-v01@openssh.com
  *     * ecdsa-sha2-nistp384-cert-v01@openssh.com
  *     * ecdsa-sha2-nistp521-cert-v01@openssh.com
  *
 */
async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model ImportSnapshotRequest {
  ossBucket: string(name='OssBucket', position='Query'),
  ossObject: string(name='OssObject', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  roleName?: string(name='RoleName', position='Query'),
  snapshotName: string(name='SnapshotName', position='Query'),
}

model ImportSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
  taskId?: string(name='TaskId'),
}

model ImportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ImportSnapshotResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function importSnapshot(request: ImportSnapshotRequest): ImportSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model InstallCloudAssistantRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCloudAssistant', 'POST', '/', 'json', false, 'json', request);
}

model InvokeCommandRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandId: string(name='CommandId', position='Query'),
  containerId?: string(name='ContainerId', position='Query'),
  containerName?: string(name='ContainerName', position='Query'),
  frequency?: string(name='Frequency', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameters?: map[string]any(name='Parameters', shrink='json', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  repeatMode?: string(name='RepeatMode', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  timed?: boolean(name='Timed', position='Query'),
  timeout?: long(name='Timeout', position='Query'),
  username?: string(name='Username', position='Query'),
  windowsPasswordName?: string(name='WindowsPasswordName', position='Query'),
}

model InvokeCommandResponseBody = {
  invokeId?: string(name='InvokeId'),
  requestId?: string(name='RequestId'),
}

model InvokeCommandResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeCommandResponseBody(name='body'),
}

async function invokeCommand(request: InvokeCommandRequest): InvokeCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeCommand', 'POST', '/', 'json', false, 'json', request);
}

model JoinResourceGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the resource.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. The value of this parameter varies based on the resource type. For example, when ResourceType is set to instance, the ResourceId refers to InstanceId.', example='sg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the ECS resource. Valid values:

*   instance: instance
*   disk: Elastic Block Storage device
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   eni: ENI
*   keypair: SSH key pair
*   launchtemplate: launch template

These values are case-sensitive.', example='securitygroup', position='Query'),
}

model JoinResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model JoinResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinResourceGroupResponseBody(name='body'),
}

/**
  * A resource is a cloud service entity that you create in Alibaba Cloud, such as an ECS instance, elastic network interface (ENI), or image. A resource group is a collection of infrastructure for projects, environments, or stacks. In a resource group, you can manage resources and monitor and run tasks in a centralized manner without switching between Alibaba Cloud services.
  *
 */
async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model JoinSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinSecurityGroupResponseBody(name='body'),
}

async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model LeaveSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> If this parameter is specified, the `NetworkInterfaceId` parameter cannot be specified.', example='i-bp67acfmxazb4p****', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

> If this parameter is specified, the `InstanceId` parameter cannot be specified.', example='eni-bp13kd656hxambfe****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.

*   If you want to remove an instance from a security group, you do not need to specify a region ID.
*   If you want to remove an ENI from a security group, you must specify the ID of the region in which the ENI resides.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model LeaveSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LeaveSecurityGroupResponseBody(name='body'),
}

/**
  * > This operation is not recommended. We recommend that you call the [ModifyInstanceAttribute](~~25503~~) operation to add instances to or remove instances from a security group, and call the [ModifyNetworkInterfaceAttribute](~~58513~~) operation to add ENIs to or remove ENIs from a security group.
  * When you call this operation, take note of the following items:
  * *   Before you remove an instance from a security group, the instance must be in the **Stopped** (Stopped) or **Running** (Running) state.
  * *   An instance must belong to at least one security group. Therefore, if the instance to be removed belongs to only a single security group, the LeaveSecurityGroup request fails.
  * *   An instance and an ENI cannot be removed from a security group at the same time. The `InstanceId` and `NetworkInterfaceId` parameters cannot be specified at the same time.
  *
 */
async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListPluginStatusRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListPluginStatusResponseBody = {
  instancePluginStatusSet?: {
    instancePluginStatus?: [ 
    {
      instanceId?: string(name='InstanceId'),
      pluginStatusSet?: {
        pluginStatus?: [ 
        {
          firstHeartbeatTime?: string(name='FirstHeartbeatTime'),
          lastHeartbeatTime?: string(name='LastHeartbeatTime'),
          pluginName?: string(name='PluginName'),
          pluginStatus?: string(name='PluginStatus'),
          pluginVersion?: string(name='PluginVersion'),
        }
      ](name='PluginStatus')
      }(name='PluginStatusSet'),
    }
  ](name='InstancePluginStatus')
  }(name='InstancePluginStatusSet'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListPluginStatusResponseBody(name='body'),
}

async function listPluginStatus(request: ListPluginStatusRequest): ListPluginStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPluginStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValues?: [ string ](name='TagValues'),
    }
  ](name='TagFilter', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoProvisioningGroupRequest {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', position='Query'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', position='Query'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', position='Query'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', position='Query'),
  launchTemplateConfig?: [ 
    {
      instanceType?: string(name='InstanceType'),
      maxPrice?: double(name='MaxPrice'),
      priority?: int32(name='Priority'),
      vSwitchId?: string(name='VSwitchId'),
      weightedCapacity?: double(name='WeightedCapacity'),
    }
  ](name='LaunchTemplateConfig', position='Query'),
  maxSpotPrice?: float(name='MaxSpotPrice', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', position='Query'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', position='Query'),
  totalTargetCapacity?: string(name='TotalTargetCapacity', position='Query'),
}

model ModifyAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoProvisioningGroupResponseBody(name='body'),
}

async function modifyAutoProvisioningGroup(request: ModifyAutoProvisioningGroupRequest): ModifyAutoProvisioningGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoProvisioningGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoSnapshotPolicyRequest {
  dataDiskPolicyEnabled?: boolean(name='DataDiskPolicyEnabled', position='Query'),
  dataDiskPolicyRetentionDays?: int32(name='DataDiskPolicyRetentionDays', minimum=1, maximum=3, position='Query'),
  dataDiskPolicyRetentionLastWeek?: boolean(name='DataDiskPolicyRetentionLastWeek', position='Query'),
  dataDiskPolicyTimePeriod?: int32(name='DataDiskPolicyTimePeriod', minimum=1, maximum=4, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  systemDiskPolicyEnabled?: boolean(name='SystemDiskPolicyEnabled', position='Query'),
  systemDiskPolicyRetentionDays?: int32(name='SystemDiskPolicyRetentionDays', minimum=1, maximum=3, position='Query'),
  systemDiskPolicyRetentionLastWeek?: boolean(name='SystemDiskPolicyRetentionLastWeek', position='Query'),
  systemDiskPolicyTimePeriod?: int32(name='SystemDiskPolicyTimePeriod', minimum=1, maximum=4, position='Query'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoSnapshotPolicyExRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='The retention period of the snapshot copy in the destination region. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65535: The automatic snapshot is retained for the specified number of days.

Default value: -1.', example='30', position='Query'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='Specifies whether to enable cross-region replication for the automatic snapshot.

*   true: enables cross-region replication for the automatic snapshot.
*   false: disables cross-region replication for the automatic snapshot.', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='The destination region to which to copy the snapshot. You can specify only a single destination region.', example='["cn-hangzhou"]', position='Query'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='The ID of the automatic snapshot policy. You can call the [DescribeAutoSnapshotPolicyEx](~~25530~~) operation to query available automatic snapshot policies.', example='sp-bp12m37ccmxvbmi5****', position='Query'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='The name of the automatic snapshot policy. If this parameter is not specified, the original name of the automatic snapshot policy is retained.', example='SPTestName', position='Query'),
  regionId: string(name='regionId', description='The region ID of the automatic snapshot policy to be modified. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  repeatWeekdays?: string(name='repeatWeekdays', description='The days of the week on which to create automatic snapshots. Valid values are 1 to 7, which correspond to the days of the week. For example, a value of 1 indicates Monday.

To schedule multiple automatic snapshots to be created in a week, you can specify multiple days.

*   You can specify up to seven days over a one-week period.
*   You must set this parameter to a JSON array such as `["1", "2" ... "7"]`. Separate the values in the array with commas (,).', example='["1", "7"]', position='Query'),
  retentionDays?: int32(name='retentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The automatic snapshot is permanently retained.
*   1 to 65536: The auto snapshot is retained for the specified number of days.

Default value: -1.', example='30', position='Query'),
  timePoints?: string(name='timePoints', description='The points in time of the day at which to create automatic snapshots. The time must be in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. For example, a value of 1 indicates 01:00:00.

To schedule multiple automatic snapshots to be created in a day, you can specify multiple hours.

*   You can specify up to 24 points in time.
*   You must set this parameter to a JSON array such as `["0", "1", ... "23"]`. Separate the points in time with commas (,).', example='["0", "1"]', position='Query'),
}

model ModifyAutoSnapshotPolicyExResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyExResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyEx(request: ModifyAutoSnapshotPolicyExRequest): ModifyAutoSnapshotPolicyExResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoSnapshotPolicyEx', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBandwidthPackageSpecRequest {
  bandwidth: string(name='Bandwidth', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBandwidthPackageSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyBandwidthPackageSpec(request: ModifyBandwidthPackageSpecRequest): ModifyBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCapacityReservationRequest {
  privatePoolOptions?: {
    id: string(name='Id'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  endTimeType?: string(name='EndTimeType', position='Query'),
  instanceAmount?: int32(name='InstanceAmount', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  platform?: string(name='Platform', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model ModifyCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCapacityReservationResponseBody(name='body'),
}

async function modifyCapacityReservation(request: ModifyCapacityReservationRequest): ModifyCapacityReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCapacityReservation', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommandRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandContent?: string(name='CommandContent', position='Query'),
  commandId: string(name='CommandId', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  timeout?: long(name='Timeout', position='Query'),
  workingDir?: string(name='WorkingDir', position='Query'),
}

model ModifyCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCommandResponseBody(name='body'),
}

async function modifyCommand(request: ModifyCommandRequest): ModifyCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommand', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAttributeRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period for a UDP session between a Server Load Balancer (SLB) instance and the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
    udpTimeout?: int32(name='UdpTimeout', description='The timeout period for a UDP session between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
  }(name='NetworkAttributes', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy for migrating the instances deployed on the dedicated host when the dedicated host fails or needs to be repaired online. Valid values:

*   Migrate: The instances are migrated to another physical machine and then restarted.
*   Stop: The instances are stopped. If the dedicated host cannot be repaired, the instances are migrated to another physical machine and then restarted.

If the dedicated host has cloud disks attached, the default value is Migrate.

If the dedicated host has local disks attached, the default value is Stop.', example='Migrate', position='Query'),
  autoPlacement?: string(name='AutoPlacement', description='Specifies whether to add the dedicated host to the resource pool for automatic deployment. If you do not specify the **DedicatedHostId** parameter when you create an instance on a dedicated host, Alibaba Cloud automatically selects a dedicated host from the resource pool to host the instance. Valid values:

*   on: adds the dedicated host to the resource pool for automatic deployment.
*   off: does not add the dedicated host to the resource pool for automatic deployment.

For information about automatic deployment, see [Features](~~118938~~).', example='on', position='Query'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio. You can configure CPU overcommit ratios only for the following dedicated host types: g6s, c6s, and r6s. Valid values: 1 to 5.

The CPU overcommit ratio affects the number of available vCPUs on a dedicated host. You can use the following formula to calculate the number of available vCPUs on a dedicated host: Number of available vCPUs = Number of physical CPU cores × 2 × CPU overcommit ratio. For example, the number of physical CPU cores on each g6s dedicated host is 52. If you change the CPU overcommit ratio of a g6s dedicated host to 4, the number of available vCPUs on the dedicated host is 416. For scenarios that have minimal requirements for CPU stability or where CPU load is not heavy, such as development and test environments, you can increase the number of available vCPUs on a dedicated host by increasing the CPU overcommit ratio. This way, you can deploy more ECS instances of the same specifications on the dedicated host and reduce the unit deployment cost.', example='1', position='Query'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which the dedicated host belongs.', example='dc-bp165p6xk2tlw61e****', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****', position='Query'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. The name can contain digits, letters, colons (:), underscores (\\_), and hyphens (-).', example='testDedicatedHostName', position='Query'),
  description?: string(name='Description', description='The description of the dedicated host. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

/**
  * ## Description
  * *   All the Elastic Compute Service (ECS) instances that are hosted on a dedicated host must be in the Stopped (`Stopped`) state before you can modify the CPU overcommit ratio of the dedicated host.
  * *   Modifications to the CPU overcommit ratio of a dedicated host do not affect the operation of the dedicated host. After the CPU overcommit ratio is modified, the number of allocated vCPUs on the dedicated host cannot exceed the new total number of vCPUs. Otherwise, ECS instances that use the excess vCPUs cannot start.
  *
 */
async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAutoReleaseTimeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the dedicated host. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

*   The scheduled release time must be at least 30 minutes from the current time.
*   The scheduled release time can be at most 3 years from the current time.
*   If the value of the seconds (ss) is not 00, it is automatically set to 00.
*   If you do not specify the `AutoReleaseTime` parameter, automatic release is disabled. The dedicated host will not be released at the scheduled time.', example='2019-06-04T13:35:00Z', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ModifyDedicatedHostAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAutoReleaseTimeResponseBody(name='body'),
}

/**
  * The pay-as-you-go dedicated host is automatically released at the specified time. Make sure that the dedicated host is no longer needed and that its data is backed up.
  *
 */
async function modifyDedicatedHostAutoReleaseTime(request: ModifyDedicatedHostAutoReleaseTimeRequest): ModifyDedicatedHostAutoReleaseTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAutoReleaseTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAutoRenewAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewWithEcs?: string(name='AutoRenewWithEcs', position='Query'),
  dedicatedHostIds: string(name='DedicatedHostIds', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAutoRenewAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAutoRenewAttribute(request: ModifyDedicatedHostAutoRenewAttributeRequest): ModifyDedicatedHostAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostClusterAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostClusterId: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****', position='Query'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter. It cannot contain `http://` or `https://`.', example='newClusterName', position='Query'),
  description?: string(name='Description', description='The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='newClusterDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D02FF8'),
}

model ModifyDedicatedHostClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostClusterAttribute(request: ModifyDedicatedHostClusterAttributeRequest): ModifyDedicatedHostClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostsChargeTypeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dedicatedHostChargeType?: string(name='DedicatedHostChargeType', position='Query'),
  dedicatedHostIds: string(name='DedicatedHostIds', position='Query'),
  detailFee?: boolean(name='DetailFee', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostsChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      currency?: string(name='Currency'),
      fee?: string(name='Fee'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostsChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostsChargeTypeResponseBody(name='body'),
}

async function modifyDedicatedHostsChargeType(request: ModifyDedicatedHostsChargeTypeRequest): ModifyDedicatedHostsChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostsChargeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDemandRequest {
  amount?: int32(name='Amount', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  demandDescription?: string(name='DemandDescription', position='Query'),
  demandId: string(name='DemandId', position='Query'),
  demandName?: string(name='DemandName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model ModifyDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDemandResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDemandResponseBody(name='body'),
}

async function modifyDemand(request: ModifyDemandRequest): ModifyDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDemand', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDeploymentSetAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  deploymentSetId: string(name='DeploymentSetId', position='Query'),
  deploymentSetName?: string(name='DeploymentSetName', position='Query'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDeploymentSetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeploymentSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeploymentSetAttributeResponseBody(name='body'),
}

async function modifyDeploymentSetAttribute(request: ModifyDeploymentSetAttributeRequest): ModifyDeploymentSetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDeploymentSetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiagnosticMetricSetRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description?: string(name='Description', maxLength=255, position='Query'),
  metricIds?: [ string ](name='MetricIds', position='Query'),
  metricSetId: string(name='MetricSetId', position='Query'),
  metricSetName?: string(name='MetricSetName', maxLength=128, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
}

model ModifyDiagnosticMetricSetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDiagnosticMetricSetResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiagnosticMetricSetResponseBody(name='body'),
}

async function modifyDiagnosticMetricSet(request: ModifyDiagnosticMetricSetRequest): ModifyDiagnosticMetricSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiagnosticMetricSet', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for disk N. Valid values:

*   true: enables the performance burst feature.
*   false: disables the performance burst feature.', example='false', position='Query'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Specifies whether to delete the automatic snapshots of the disk when the disk is released. By default, this parameter is left empty, which specifies that the current value remains unchanged.', example='false', position='Query'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the disk together with the associated instance. By default, this parameter is left empty, which specifies that the current value remains unchanged.

If you set the `DeleteWithInstance` parameter to `false` in one of the following cases, an error is returned:

*   The disk is a local disk.
*   The disk is a basic disk and not removable. If the Portable attribute of a disk is set to false, the disk is not removable.', example='false', position='Query'),
  description?: string(name='Description', description='The description of the disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='TestDescription', position='Query'),
  diskId?: string(name='DiskId', description='The ID of the disk.

>  You can specify the `DiskId` parameter or the `DiskIds.N` parameter, but you cannot specify both parameters at the same time.', example='d-bp1famypsnar20bv****', position='Query'),
  diskIds?: [ string ](name='DiskIds', description='The IDs of the disks whose attributes you want to modify. Valid values of N: 0 to 100.

>  You can specify the `DiskId` parameter or the `DiskIds.N` parameter, but you cannot specify both parameters at the same time.', example='d-bp1famypsnar20bv****', position='Query'),
  diskName?: string(name='DiskName', description='The name of the disk. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='MyDiskName', position='Query'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Specifies whether to enable the automatic snapshot policy feature for the disk.

*   true: enables the automatic snapshot policy feature for the disk.
*   false: disables the automatic snapshot policy feature for the disk.

By default, this parameter is left empty, which specifies that the current value remains unchanged.

> : By default, the automatic snapshot policy feature is enabled for new disks. You need to only apply an automatic snapshot policy to a disk for the policy to take effect.', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDiskAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyDiskAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskAttributeResponseBody(name='body'),
}

/**
  * *   When you call this operation to modify the attributes of a disk, if you set the DeleteWithInstance parameter to false and the instance to which the disk is attached is locked for security reasons, the DeleteWithInstance parameter of the disk is ignored and the disk is released together with the instance. If `"LockReason" : "security"` is included in the response when you query the information about an instance, the instance is locked for security reasons.
  * *   You can use the `DiskIds.N` parameter to specify multiple disks. This way, you can modify the attributes of the disks at the same time, including names, descriptions, and whether to release the disks together with the associated instances.
  *
 */
async function modifyDiskAttribute(request: ModifyDiskAttributeRequest): ModifyDiskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskChargeTypeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  diskChargeType?: string(name='DiskChargeType', position='Query'),
  diskIds: string(name='DiskIds', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDiskChargeTypeResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyDiskChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskChargeTypeResponseBody(name='body'),
}

async function modifyDiskChargeType(request: ModifyDiskChargeTypeRequest): ModifyDiskChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskChargeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskSpecRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  diskCategory?: string(name='DiskCategory', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  performanceLevel?: string(name='PerformanceLevel', position='Query'),
  provisionedIops?: long(name='ProvisionedIops', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEipAddressAttributeRequest {
  allocationId: string(name='AllocationId', position='Query'),
  bandwidth: string(name='Bandwidth', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEipAddressAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticityAssuranceRequest {
  privatePoolOptions?: {
    id: string(name='Id'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions', position='Query'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticityAssuranceResponseBody(name='body'),
}

async function modifyElasticityAssurance(request: ModifyElasticityAssuranceRequest): ModifyElasticityAssuranceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticityAssurance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyForwardEntryRequest {
  externalIp?: string(name='ExternalIp', position='Query'),
  externalPort?: string(name='ExternalPort', position='Query'),
  forwardEntryId: string(name='ForwardEntryId', position='Query'),
  forwardTableId: string(name='ForwardTableId', position='Query'),
  internalIp?: string(name='InternalIp', position='Query'),
  internalPort?: string(name='InternalPort', position='Query'),
  ipProtocol?: string(name='IpProtocol', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHaVipAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  haVipId: string(name='HaVipId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHaVipAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHaVipAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHaVipAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHpcClusterAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  hpcClusterId: string(name='HpcClusterId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyHpcClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHpcClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHpcClusterAttributeResponseBody(name='body'),
}

async function modifyHpcClusterAttribute(request: ModifyHpcClusterAttributeRequest): ModifyHpcClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHpcClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  bootMode?: string(name='BootMode', description='The new boot mode of the custom image. Valid values:

*   BIOS
*   UEFI

>  You must know which boot modes the specified image supports. When you use this parameter to change the boot mode of the image, specify a boot mode supported by the image to ensure that instances which use this image can start normally.', example='BIOS', position='Query'),
  description?: string(name='Description', description='The new description of the custom image. The description must be 2 to 256 characters in length and cannot start with http:// or https://.

This parameter is empty by default, which indicates that the original description is retained.', example='testDescription', position='Query'),
  features?: {
    nvmeSupport?: string(name='NvmeSupport', description='Specifies whether to support the Non-Volatile Memory Express (NVMe) protocol. Valid values:

*   supported: The custom image supports the NVMe protocol. Instances created from this image also support the NVMe protocol.
*   unsupported: The custom image does not support the NVMe protocol. Instances created from this image do not support the NVMe protocol.', example='supported'),
  }(name='Features', description='The attributes of the custom image.', position='Query'),
  imageFamily?: string(name='ImageFamily', description='The new name of the image family. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='hangzhou-daily-update', position='Query'),
  imageId: string(name='ImageId', description='The ID of the custom image.', example='m-bp18ygjuqnwhechc****', position='Query'),
  imageName?: string(name='ImageName', description='The new name of the custom image. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with acs: or aliyun. It cannot contain http:// or https://. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default, which indicates that the original name is retained.', example='testImageName', position='Query'),
  licenseType?: string(name='LicenseType', description='The type of the license to use to activate the operating system after the source image is imported. Valid values:

*   Auto: ECS checks the operating system of the source image and allocates a license to the operating system. ECS first checks whether the operating system distribution specified by `Platform` has a license allocated through an official Alibaba Cloud channel. If yes, the allocated license is used. If not, the license that comes with the source operating system is used.
*   Aliyun: The license allocated through an official Alibaba Cloud channel is used for the operating system distribution specified by `Platform`.
*   BYOL: The license that comes with the source operating system is used. In this case, make sure that your license key can be used in Alibaba Cloud.

Default value: Auto.', example='Auto', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The new state of the custom image. Valid values:

*   Deprecated: puts the image into the Deprecated state. If the custom image is shared, you must unshare it before you can put it into the Deprecated state. Images in the Deprecated state cannot be shared or copied, but can be used to create instances or replace system disks.
*   Available: puts the image into the Available state. You can restore an image from the Deprecated state to the Available state.

>  If you want to roll back a custom image in the image family to a previous version, you can put the latest available custom image into the Deprecated state. An instance family cannot be used to create instances if no custom images are in the Available state within the instance family. Proceed with caution if only a single custom image is in the Available state within the image family.', example='Deprecated', position='Query'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageShareGroupPermissionRequest {
  addGroup?: [ string ](name='AddGroup', position='Query'),
  removeGroup?: [ string ](name='RemoveGroup', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  imageId: string(name='ImageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyImageShareGroupPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageShareGroupPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageShareGroupPermissionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyImageShareGroupPermission(request: ModifyImageShareGroupPermissionRequest): ModifyImageShareGroupPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageShareGroupPermission', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageSharePermissionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  addAccount?: [ string ](name='AddAccount', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  isPublic?: boolean(name='IsPublic', description='发布为社区镜像', example='true', position='Query'),
  launchPermission?: string(name='LaunchPermission', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removeAccount?: [ string ](name='RemoveAccount', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageSharePermissionResponseBody(name='body'),
}

async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttachmentAttributesRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceAttachmentAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttachmentAttributesResponseBody(name='body'),
}

async function modifyInstanceAttachmentAttributes(request: ModifyInstanceAttachmentAttributesRequest): ModifyInstanceAttachmentAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttachmentAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  creditSpecification?: string(name='CreditSpecification', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', position='Query'),
  description?: string(name='Description', position='Query'),
  enableJumboFrame?: boolean(name='EnableJumboFrame', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber', minimum=-1, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  recyclable?: boolean(name='Recyclable', position='Query'),
  remoteConnectionOptions?: {
    password?: string(name='Password'),
    type?: string(name='Type'),
  }(name='RemoteConnectionOptions', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAutoReleaseTimeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoReleaseTime?: string(name='AutoReleaseTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoReleaseTimeResponseBody(name='body'),
}

async function modifyInstanceAutoReleaseTime(request: ModifyInstanceAutoReleaseTimeRequest): ModifyInstanceAutoReleaseTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAutoReleaseTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAutoRenewAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceChargeTypeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   true: enables automatic payment. Make sure that you have a sufficient balance in your account. Otherwise, your order becomes invalid and is canceled.
*   false: An order is generated but no payment is made.

Default value: true.

>  If your account balance is insufficient, you can set the AutoPay parameter to false to generate an unpaid order. Then, you can log on to the ECS console to pay for the order.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned and the request is made.

Default value: false.', example='false', position='Query'),
  includeDataDisks?: boolean(name='IncludeDataDisks', description='Specifies whether to change the billing method of all data disks attached to the instance from pay-as-you-go to subscription.

Default value: false.', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The new billing method. Valid values:

*   PrePaid: the subscription billing method
*   PostPaid: the pay-as-you-go billing method

Default value: PrePaid.', example='PrePaid', position='Query'),
  instanceIds: string(name='InstanceIds', description='The IDs of instances. The value can be a JSON array that consists of up to 20 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp67acfmxazb4p****","i-bp67acfmxazb4d****"]', position='Query'),
  isDetailFee?: boolean(name='IsDetailFee', description='Specifies whether to return cost details of the order when the billing method is changed from subscription to pay-as-you-go.

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The renewal period of the subscription instance. If the instance is hosted on a dedicated host, the renewal period of the instance cannot exceed the subscription duration of the dedicated host. Valid values:

Valid values when the `PeriodUnit` parameter is set to Month: `1, 2, 3, 4, 5, 6, 7, 8, 9, and 12`.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period (`Period`). Valid values:

Month

Default value: Month.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance is located. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      currency?: string(name='Currency', description='The unit of currency for the bill.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      fee?: string(name='Fee', description='The cost value.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances', description='Details about the charges for the order.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model ModifyInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceChargeTypeResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you understand the billing methods and pricing schedule of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * When you call this operation, take note of the following items:
  * * The instances must be in the **Running** (`Running`) or **Stopped** (`Stopped`) state, and you have no overdue payments for them.
  * * After you change the billing method, automatic payment is enabled by default. Make sure that you have sufficient balance in your account. Otherwise, your order becomes invalid and is canceled. If your account balance is insufficient, you can set the `AutoPay` parameter to `false` to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com/) to pay for the order.
  * * **Change the billing method from subscription to pay-as-you-go**:
  *     * Your ECS usage determines whether the billing method of an instance can be changed from subscription to pay-as-you-go.
  *     * After you change the billing method of an instance from subscription to pay-as-you-go, the new billing method remains in effect for the remaining lifecycle of the instance. The price difference is refunded to the payment account that you used. Vouchers that have been redeemed are not refundable.
  *     * **Refund rule**: You have a quota for the total refund amount each month, and unused balance of this quota is not carried forward into the next month. After you use up the refund quota of the current month, you can change the billing method only when the next month arrives. The refund amount incurred when you change the billing method is calculated based on the following formula: **Number of vCPUs × (Number of remaining days × 24 ± Number of remaining or elapsed hours)**.
  * * **Change the billing method from pay-as-you-go to subscription**:
  *     * You can change the billing method of all data disks attached to an instance from pay-as-you-go to subscription.
  *     * This operation cannot be called for a pay-as-you-go instance that has an automatic release time set.
  *
 */
async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceChargeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceDeploymentRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  affinity?: string(name='Affinity', description='Specifies whether to associate the instance with a dedicated host. Valid values:

*   host: associates the instance with a dedicated host. When you start a stopped instance in economical mode, the instance remains on its original dedicated host.
*   default: does not associate the instance with a dedicated host. When you start a stopped instance in economical mode, the instance can be automatically deployed to another dedicated host in the automatic deployment resource pool if the resources of the original dedicated host are insufficient.

If you want to migrate the instance from a shared host to a dedicated host, use the default value. Default value: default.', example='host', position='Query'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp67acfmxazb4ph****', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the destination dedicated host. You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the most recent list of dedicated hosts.

When you migrate an instance from a shared host to a dedicated host or between dedicated hosts, take note of the following items:

*   To migrate the instance to a specific dedicated host, specify this parameter.
*   To migrate the instance to a dedicated host that the system automatically selects, leave this parameter empty and set `Tenancy` to host.

For information about the automatic deployment feature, see [Features of dedicated hosts](~~118938~~).', example='dh-bp67acfmxazb4ph****', position='Query'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group in which to deploy the instance in the destination deployment set. This parameter takes effect only when the destination deployment set uses the high availability group strategy (AvailabilityGroup). Valid values: 1 to 7.

> If you call this operation to deploy an instance to a deployment set that uses the high availability group strategy (`AvailablilityGroup`) and leave this parameter empty, the system evenly distributes instances among the deployment set groups in the deployment set. If you specify the current deployment set of the instance as the destination deployment set in the request, the system evenly distributes instances again among the deployment set groups in the deployment set.', example='3', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the destination deployment set.

This parameter is required when you add an instance to a deployment set or change the deployment set of an instance.

> You cannot change the deployment set when you modify dedicated host configurations, including the `Tenancy`, `Affinity`, and `DedicatedHostId` parameters.', example='ds-bp67acfmxazb4ph****', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully change the host of the instance when the deployment set of the instance is changed. Valid values:

*   true: forcefully changes the host of the instance when the deployment set of the instance is changed. Hosts can be forcefully changed only for instances in the Running or Stopped state. The instances that are in the Stopped state do not include pay-as-you-go instances that are stopped in economical mode.

    **

    **Note**If the specified instance has local disks attached, the local disks are forcefully changed when the host of the instance is forcefully changed. This may cause data loss in the local disks. Proceed with caution.

*   false: does not forcefully change the host of the instance when the deployment set of the instance is changed. You can add the instance to a deployment set only when the instance remains on the current host. When the Force parameter is set to false, the deployment set may fail to be changed.

Default value: false.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance', example='i-bp67acfmxazb4ph***', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type to which the instance is changed. You can call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent list of instance types.

You can change the instance type of an instance when you migrate the instance to a dedicated host. The new instance type must match the type of the specified dedicated host. For more information, see [Dedicated host types](~~68564~~).

*   If you specify this parameter, you must also specify the `DedicatedHostId` parameter.
*   You cannot change the instance type of an instance if you use the automatic deployment feature to migrate the instance.', example='ecs.c6.large', position='Query'),
  migrationType?: string(name='MigrationType', description='Specifies whether to stop the instance before it is migrated to the destination dedicated host. Valid values:

*   reboot: stops the instance before it is migrated.
*   live: migrates the instance without stopping it. If you set the MigrationType parameter to live, you must specify the DedicatedHostId parameter. In this case, you cannot change the instance type of the instance when the instance is migrated.

Default value: reboot.', example='live', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  removeFromDeploymentSet?: boolean(name='RemoveFromDeploymentSet', description='Specifies whether to remove the specified instance from the specified deployment set. Valid values:

*   true
*   false

Default value: false.

> If you set this parameter to true, you must specify the InstanceId and DeploymentSetId parameters and make sure that the specified instance belongs to the specified deployment set.', example='false', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tenancy?: string(name='Tenancy', description='Specifies whether to deploy the instance on a dedicated host. Set the value to host.', example='host', position='Query'),
}

model ModifyInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model ModifyInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceDeploymentResponseBody(name='body'),
}

/**
  * When you call this operation for an ECS instance, take note of the following items:
  * *   The ECS instance must be in the **Stopped** state. The instance is automatically restarted after it is migrated.
  * *   The network type of the instance must be Virtual Private Cloud (VPC).
  * *   The instance and the destination dedicated host to which to migrate the instance must belong to the same account and reside in the same region and zone.
  * *   A pay-as-you-go instance can be migrated to a subscription dedicated host. A subscription instance can be migrated only between subscription dedicated hosts. The expiration date of the subscription instance cannot be later than that of the destination dedicated host.
  * *   You can migrate only pay-as-you-go instances from a shared host to a dedicated host. You cannot migrate subscription or preemptible instances from a shared host to a dedicated host.
  * *   You can redeploy an instance to a specific dedicated host cluster.
  *
 */
async function modifyInstanceDeployment(request: ModifyInstanceDeploymentRequest): ModifyInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMaintenanceAttributesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The maintenance action. Valid values:

*   Stop: stops the instance.
*   AutoRecover: automatically recovers the instance.
*   AutoRedeploy: redeploys the instance, which may damage the data of the local disks (if any).', example='AutoRecover', position='Query'),
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N. Valid values of N: 1 to 100.', example='i-bp67acfmxazb4ph****', position='Query'),
  maintenanceWindow?: [ 
    {
      endTime?: string(name='EndTime', description='The end time of the maintenance window. The time must be on the hour at exactly 0 minute and 0 second. The StartTime and EndTime parameters must be specified at the same time. The EndTime value must be 1 to 23 hours later than the StartTime value. Specify the time in the `HH:mm:ss` format. The time must be in UTC+8. Set the value of N to 1.', example='18:00:00'),
      startTime?: string(name='StartTime', description='The start time of the maintenance window. The time must be on the hour at exactly 0 minute and 0 second. The StartTime and EndTime parameters must be specified at the same time. The EndTime value must be 1 to 23 hours later than the StartTime value. Specify the time in the `HH:mm:ss` format. The time must be in UTC+8. Set the value of N to 1.', example='02:00:00'),
    }
  ](name='MaintenanceWindow', description='The maintenance windows.', position='Query'),
  notifyOnMaintenance?: boolean(name='NotifyOnMaintenance', description='Specifies whether to send an event notification before maintenance. Valid values:

*   True: sends an event notification.
*   False: does not send an event notification.

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceMaintenanceAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintenanceAttributesResponseBody(name='body'),
}

/**
  * This operation is used to modify the maintenance policy of an instance. The maintenance policy consists of the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the action that you specify in response to instance shutdown.
  *
 */
async function modifyInstanceMaintenanceAttributes(request: ModifyInstanceMaintenanceAttributesRequest): ModifyInstanceMaintenanceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMaintenanceAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMetadataOptionsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  httpEndpoint: string(name='HttpEndpoint', position='Query'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', position='Query'),
  httpTokens?: string(name='HttpTokens', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceMetadataTags?: string(name='InstanceMetadataTags', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceMetadataOptionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMetadataOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMetadataOptionsResponseBody(name='body'),
}

async function modifyInstanceMetadataOptions(request: ModifyInstanceMetadataOptionsRequest): ModifyInstanceMetadataOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMetadataOptions', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNetworkSpecRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  allocatePublicIp?: boolean(name='AllocatePublicIp', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ISP?: string(name='ISP', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', minimum=1, maximum=200, position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  networkChargeType?: string(name='NetworkChargeType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model ModifyInstanceNetworkSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceNetworkSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNetworkSpecResponseBody(name='body'),
}

async function modifyInstanceNetworkSpec(request: ModifyInstanceNetworkSpecRequest): ModifyInstanceNetworkSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceNetworkSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceSpecRequest {
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk', position='Query'),
  temporary?: {
    endTime?: string(name='EndTime'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', minimum=1, maximum=100),
    startTime?: string(name='StartTime'),
  }(name='Temporary', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  allowMigrateAcrossZone?: boolean(name='AllowMigrateAcrossZone', position='Query'),
  async?: boolean(name='Async', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', minimum=1, maximum=200, position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceVncPasswdRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vncPassword: string(name='VncPassword', description='The new VNC password of the instance.', example='Ecs123', position='Query'),
}

model ModifyInstanceVncPasswdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVncPasswdResponseBody(name='body'),
}

/**
  * *   The password must be six characters in length and can contain only uppercase letters, lowercase letters, and digits.
  * *   After you modify the VNC password of an instance, take note of the following items:
  *     *   If the instance is I/O optimized, the new password takes effect immediately.
  *     *   If the instance is non-I/O optimized, you must [restart the instance](~~25440~~) by using the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new password to take effect.
  *
 */
async function modifyInstanceVncPasswd(request: ModifyInstanceVncPasswdRequest): ModifyInstanceVncPasswdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceVncPasswd', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceVpcAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: [ string ](name='SecurityGroupId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model ModifyInstanceVpcAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVpcAttributeResponseBody(name='body'),
}

async function modifyInstanceVpcAttribute(request: ModifyInstanceVpcAttributeRequest): ModifyInstanceVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLaunchTemplateDefaultVersionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  defaultVersionNumber: long(name='DefaultVersionNumber', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyLaunchTemplateDefaultVersionResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId'),
  requestId?: string(name='RequestId'),
}

model ModifyLaunchTemplateDefaultVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLaunchTemplateDefaultVersionResponseBody(name='body'),
}

async function modifyLaunchTemplateDefaultVersion(request: ModifyLaunchTemplateDefaultVersionRequest): ModifyLaunchTemplateDefaultVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLaunchTemplateDefaultVersion', 'POST', '/', 'json', false, 'json', request);
}

model ModifyManagedInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceName: string(name='InstanceName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyManagedInstanceResponseBody = {
  instance?: {
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
  }(name='Instance'),
  requestId?: string(name='RequestId'),
}

model ModifyManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyManagedInstanceResponseBody(name='body'),
}

async function modifyManagedInstance(request: ModifyManagedInstanceRequest): ModifyManagedInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyManagedInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkInterfaceAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description?: string(name='Description', description='The description of the ENI. The description must be 2 to 255 characters in length and cannot start with http:// or https://.

This parameter is empty by default.', example='testDescription', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****', position='Query'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='eniTestName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues per ENI. Valid values: 1 to 2048.

*   You can modify the number of queues supported only by the secondary ENI.
*   You can modify the number of queues supported by the secondary ENI only when the ENI is in the `Available` state, or the secondary ENI is bound (`InUse`) to an instance that is in the `Stopped` state.
*   The number of queues supported by the secondary ENI cannot exceed the maximum number of queues that the instance allows for each ENI. The total number of queues for all ENIs on the instance cannot exceed the queue quota that the instance allows. To obtain information about the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` values.', example='8', minimum=-1, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query thecurrent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='The list of security group IDs. You can specify up to 5 security group IDs.

- You can modify only the security groups to which the secondary ENI is added.
- After you specify a security group, the secondary ENI is added to the specified security group and removed from the existing security group.

>  After you modify the security group, the modification takes effect after a short delay.', position='Query'),
}

model ModifyNetworkInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ModifyNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkInterfaceAttributeResponseBody(name='body'),
}

async function modifyNetworkInterfaceAttribute(request: ModifyNetworkInterfaceAttributeRequest): ModifyNetworkInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPhysicalConnectionAttributeRequest {
  circuitCode?: string(name='CircuitCode', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  lineOperator?: string(name='LineOperator', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation?: string(name='PeerLocation', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  portType?: string(name='PortType', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  bandwidth?: int32(name='bandwidth', position='Query'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhysicalConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPrefixListRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  addEntry?: [ 
    {
      cidr: string(name='Cidr', description='The CIDR block of entry N to be added to the prefix list. Valid values of N: 0 to 200.

Take note of the following items when you add the entries:

*   The number of entries in the prefix list cannot be greater than the maximum number of entries allowed for the prefix list. You can call the [DescribePrefixListAttributes](~~205872~~) operation to query the maximum number of entries in a specific prefix list.
*   You cannot specify duplicate CIDR blocks.
*   The CIDR blocks cannot be the same as the `RemoveEntry.N.Cidr` values.', example='192.168.2.0/24'),
      description?: string(name='Description', description='The description in entry N. The description must be 2 to 32 characters in length and cannot start with `http://` or `https://`. Valid values of N: 0 to 200.', example='Description Sample 01'),
    }
  ](name='AddEntry', description='The entries that to be added to the prefix list.', position='Query'),
  description?: string(name='Description', description='The description of the prefix list. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://`, `https://`, `com.aliyun`, or `com.alibabacloud`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='PrefixListNameSample', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu', position='Query'),
  removeEntry?: [ 
    {
      cidr: string(name='Cidr', description='The CIDR block of entry N to be deleted from the prefix list. Valid values of N: 0 to 200.

Take note of the following items when you delete the entries:

*   You cannot specify duplicate CIDR blocks.
*   The CIDR blocks cannot be the same as the `AddEntry.N.Cidr` values.', example='192.168.1.0/24'),
    }
  ](name='RemoveEntry', description='The entries that to be deleted from the prefix list.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyPrefixListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model ModifyPrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrefixListResponseBody(name='body'),
}

/**
  * ## Description
  * *   The specified CIDR block must be valid. For example, 10.0.0.0/8 is a valid CIDR block while 10.0.0.1/8 is not. For more information, see the [What is CIDR?](https://www.alibabacloud.com/help/doc-detail/40637.htm#section-jua-0tj-q5m) section in Network FAQ.
  * *   When you add or delete an entry, you cannot specify duplicate CIDR blocks. Examples:
  *     *   For IPv4 CIDR blocks, you cannot specify the 10.0.0.0/8 CIDR block in two entries. You cannot specify the 10.0.0.1/32 CIDR block in one entry and the 10.0.0.1 CIDR block in another entry. These two CIDR blocks are the same.
  *     *   For IPv6 CIDR blocks, you cannot specify the 2001:fd01:0:0:0:0:0:0/32 CIDR block in one entry and the 2001:fd01::/32 CIDR block in another entry. These two CIDR blocks are the same.
  * *   The CIDR block in an entry to be added cannot the same as that in an entry to be deleted. For example, when you add an entry in which the 10.0.0.0/8 CIDR block is specified, the entry to be deleted cannot have the 10.0.0.0/8 CIDR block specified.
  * *   If you want to modify the description of an entry, you must specify the CIDR block (`AddEntry.N.Cidr`) and new description (`AddEntry.N.Description`) in the entry.
  *
 */
async function modifyPrefixList(request: ModifyPrefixListRequest): ModifyPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPrepayInstanceSpecRequest {
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', position='Query'),
  operatorType?: string(name='OperatorType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rebootTime?: string(name='RebootTime', position='Query'),
  rebootWhenFinished?: boolean(name='RebootWhenFinished', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReservedInstanceAttributeRequest {
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reservedInstanceId: string(name='ReservedInstanceId', position='Query'),
  reservedInstanceName?: string(name='ReservedInstanceName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyReservedInstanceAttributeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyReservedInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReservedInstanceAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAttribute(request: ModifyReservedInstanceAttributeRequest): ModifyReservedInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReservedInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReservedInstanceAutoRenewAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyReservedInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReservedInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReservedInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAutoRenewAttribute(request: ModifyReservedInstanceAutoRenewAttributeRequest): ModifyReservedInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReservedInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyReservedInstancesRequest {
  configuration?: [ 
    {
      instanceAmount?: int32(name='InstanceAmount'),
      instanceType?: string(name='InstanceType'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      scope?: string(name='Scope'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Configuration', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reservedInstanceId: [ string ](name='ReservedInstanceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyReservedInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
}

model ModifyReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReservedInstancesResponseBody(name='body'),
}

async function modifyReservedInstances(request: ModifyReservedInstancesRequest): ModifyReservedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyReservedInstances', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceAttributeRequest {
  description?: string(name='Description', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', position='Query'),
  name?: string(name='Name', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', position='Query'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceSpecRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', position='Query'),
  spec: string(name='Spec', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  spec?: string(name='Spec'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', position='Query'),
}

model ModifySecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupAttributeResponseBody(name='body'),
}

async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupEgressRuleRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destCidrIp?: string(name='DestCidrIp', position='Query'),
  destGroupId?: string(name='DestGroupId', position='Query'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', position='Query'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', position='Query'),
  destPrefixListId?: string(name='DestPrefixListId', position='Query'),
  ipProtocol?: string(name='IpProtocol', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', position='Query'),
  nicType?: string(name='NicType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policy?: string(name='Policy', position='Query'),
  portRange?: string(name='PortRange', position='Query'),
  priority?: string(name='Priority', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  securityGroupRuleId?: string(name='SecurityGroupRuleId', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', position='Query'),
}

model ModifySecurityGroupEgressRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupEgressRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupEgressRuleResponseBody(name='body'),
}

async function modifySecurityGroupEgressRule(request: ModifySecurityGroupEgressRuleRequest): ModifySecurityGroupEgressRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupEgressRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupPolicyRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  innerAccessPolicy: string(name='InnerAccessPolicy', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model ModifySecurityGroupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupPolicyResponseBody(name='body'),
}

async function modifySecurityGroupPolicy(request: ModifySecurityGroupPolicyRequest): ModifySecurityGroupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupRuleRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the security group rule. The description must be 1 to 512 characters in length.', example='This is a new security group rule.', position='Query'),
  destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is empty by default.', example='10.0.0.0/8', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of the security group rule. The values of this parameter are case-insensitive. Valid values:

*   ICMP
*   GRE
*   TCP
*   UDP
*   ALL', example='all', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

> Only the IP addresses of the VPC type are supported. You cannot specify both the Ipv6DestCidrIp parameter and the `DestCidrIp` parameter.

This parameter is empty by default.', example='2001:db8:1234:1a00::***', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block to which you want to control access. CIDR blocks and IPv6 addresses are supported.

> Only the IP addresses of the Virtual Private Cloud (VPC) type are supported. You cannot specify both the Ipv6SourceCidrIp parameter and the `SourceCidrIp` parameter.

This parameter is empty by default.', example='2001:db8:1233:1a00::***', position='Query'),
  nicType?: string(name='NicType', description='You cannot modify this parameter when you modify a security group rule by specifying its ID.\\
You can add a new rule that meets your requirements and delete the original rule.', example='intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policy?: string(name='Policy', description='The action of the security group rule that determines whether to allow access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses.

Default value: accept.', example='accept', position='Query'),
  portRange?: string(name='PortRange', description='The range of source ports that correspond to the transport layer protocol. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to icmp, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to gre, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to all, the port number range is -1/-1, which indicates all ports.', example='80/80', position='Query'),
  priority?: string(name='Priority', description='The priority of the security group rule. Valid values: 1 to 100.

Default value: 1.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  securityGroupRuleId?: string(name='SecurityGroupRuleId', description='The ID of the security group rule.\\
This parameter is required when you modify a security group rule based on the ID of the security group rule.', example='sgr-bp67acfmxa123b***', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block to which you want to control access. CIDR blocks and IPv4 addresses are supported.

By default, this parameter is left empty.', example='10.0.0.0/8', position='Query'),
  sourceGroupId?: string(name='SourceGroupId', description='The ID of the source security group. At least one of `SourceGroupId` and `SourceCidrIp` must be specified.

*   If `SourceGroupId` is specified but `SourceCidrIp` is not specified, the `NicType` parameter must be set to intranet.
*   If both `SourceGroupId` and `SourceCidrIp` are specified, `SourceCidrIp` takes precedence.', example='sg-bp67acfmxa123b****', position='Query'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group when you set a security group rule across accounts.

*   If both `SourceGroupOwnerId` and `SourceGroupOwnerAccount` are empty, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, the `SourceGroupOwnerAccount` parameter is ignored.', example='EcsforCloud@Alibaba.com', position='Query'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='The Alibaba Cloud account that manages the source security group when you set a security group rule across accounts.

*   If both `SourceGroupOwnerId` and `SourceGroupOwnerAccount` are empty, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, the `SourceGroupOwnerId` parameter is ignored.', example='12345678910', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to icmp, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to gre, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to all, the port number range is -1/-1, which indicates all ports.', example='80/80', position='Query'),
  sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list to which you want to control access. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

If you specify the `SourceCidrIp`, `Ipv6SourceCidrIp`, or `SourceGroupId` parameter, this parameter is ignored.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
}

model ModifySecurityGroupRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupRuleResponseBody(name='body'),
}

/**
  * When you modify a security group rule by specifying its ID, take note of the following items:
  * *   If the type of the authorization object (source or destination) is IP address or CIDR block, security group, or prefix list, the authorization object type cannot be changed. The type of an existing security group authorization object cannot be modified. If the original authorization object is an IP address, you can change it to another IP address or a CIDR block, but not to a security group or prefix list.
  * *   The IP address family of the authorization object cannot be changed. For example, if the original authorization object is an IPv4 CIDR block, you cannot change it to an IPv6 CIDR block. If the original authorization object is an IPv4 prefix list, you cannot change it to an IPv6 prefix list.
  * *   The modified security group rule cannot be the same as other existing rules.
  * *   If you want to delete the values of non-empty parameters for the rule, we recommend that you create a new rule and delete the original rule.
  *
 */
async function modifySecurityGroupRule(request: ModifySecurityGroupRuleRequest): ModifySecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifySnapshotAttributeRequest {
  sourceRegionId?: string(name='SourceRegionId', example='Hide', position='Host'),
  description?: string(name='Description', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with http:// or https://.', example='testDescription', position='Query'),
  disableInstantAccess?: boolean(name='DisableInstantAccess', description='Specifies whether to disable the instant access feature. Valid values:

*   true: disables the instant access feature.
*   false: enables the instant access feature.

Default value: false.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='Hide', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='Hide', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
  snapshotId: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp199lyny9bb47pa****', position='Query'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with http:// or https://.

It cannot start with auto because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName', position='Query'),
}

model ModifySnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnapshotAttributeResponseBody(name='body'),
}

async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySnapshotAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifySnapshotGroupRequest {
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotGroupId: string(name='SnapshotGroupId', position='Query'),
}

model ModifySnapshotGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnapshotGroupResponseBody(name='body'),
}

async function modifySnapshotGroup(request: ModifySnapshotGroupRequest): ModifySnapshotGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySnapshotGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStorageCapacityUnitAttributeRequest {
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageCapacityUnitId: string(name='StorageCapacityUnitId', position='Query'),
}

model ModifyStorageCapacityUnitAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStorageCapacityUnitAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStorageCapacityUnitAttributeResponseBody(name='body'),
}

async function modifyStorageCapacityUnitAttribute(request: ModifyStorageCapacityUnitAttributeRequest): ModifyStorageCapacityUnitAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStorageCapacityUnitAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStorageSetAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the storage set.', example='testStorageSetDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='hide', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
  storageSetId: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4ph****', position='Query'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='testStorageSetName', position='Query'),
}

model ModifyStorageSetAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73369'),
}

model ModifyStorageSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStorageSetAttributeResponseBody(name='body'),
}

async function modifyStorageSetAttribute(request: ModifyStorageSetAttributeRequest): ModifyStorageSetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStorageSetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserBusinessBehaviorRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  statusKey: string(name='statusKey', position='Query'),
  statusValue: string(name='statusValue', position='Query'),
}

model ModifyUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserBusinessBehaviorResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyUserBusinessBehavior(request: ModifyUserBusinessBehaviorRequest): ModifyUserBusinessBehaviorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserBusinessBehavior', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVRouterAttributeRequest {
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId: string(name='VRouterId', position='Query'),
  vRouterName?: string(name='VRouterName', position='Query'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVRouterAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  vSwitchName?: string(name='VSwitchName', position='Query'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVSwitchAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualBorderRouterAttributeRequest {
  circuitCode?: string(name='CircuitCode', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vbrId: string(name='VbrId', position='Query'),
  vlanId?: int32(name='VlanId', position='Query'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualBorderRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcAttributeRequest {
  cidrBlock?: string(name='CidrBlock', position='Query'),
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vpcName?: string(name='VpcName', position='Query'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model PurchaseReservedInstancesOfferingRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceAmount?: int32(name='InstanceAmount', minimum=1, maximum=100, position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  offeringType?: string(name='OfferingType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  platform?: string(name='Platform', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  reservedInstanceName?: string(name='ReservedInstanceName', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model PurchaseReservedInstancesOfferingResponseBody = {
  requestId?: string(name='RequestId'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
}

model PurchaseReservedInstancesOfferingResponse = {
  headers: map[string]string(name='headers'),
  body: PurchaseReservedInstancesOfferingResponseBody(name='body'),
}

async function purchaseReservedInstancesOffering(request: PurchaseReservedInstancesOfferingRequest): PurchaseReservedInstancesOfferingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurchaseReservedInstancesOffering', 'POST', '/', 'json', false, 'json', request);
}

model PurchaseStorageCapacityUnitRequest {
  amount?: int32(name='Amount', minimum=1, maximum=20, position='Query'),
  capacity: int32(name='Capacity', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  fromApp?: string(name='FromApp', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model PurchaseStorageCapacityUnitResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  storageCapacityUnitIds?: {
    storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId')
  }(name='StorageCapacityUnitIds'),
}

model PurchaseStorageCapacityUnitResponse = {
  headers: map[string]string(name='headers'),
  body: PurchaseStorageCapacityUnitResponseBody(name='body'),
}

async function purchaseStorageCapacityUnit(request: PurchaseStorageCapacityUnitRequest): PurchaseStorageCapacityUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurchaseStorageCapacityUnit', 'POST', '/', 'json', false, 'json', request);
}

model ReActivateInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to reactivate.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReActivateInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='51AB7717-6E1A-4D1D-A44D-54CB123ABC'),
}

model ReActivateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ReActivateInstancesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following points:
  * *   The instance must be in the **Expired** (`Stopped`) or **Overdue and Being Recycled** (`Stopped`) state.
  * *   To continue using instances in these states, you must reactivate the instances within 15 days of settling any overdue payments. If you do not reactivate the instance within the aforementioned time, data on the instance can no longer be recovered. This operation may fail on pay-as-you-go instance of the Virtual Private Cloud (VPC) type. To solve this problem, try again several minutes later or [submit a ticket](https://selfservice.console.aliyun.com/ticket/createIndex.htm).
  * *   After you settle all overdue payments, make sure that the total of your balance, vouchers, and coupons within your Alibaba Cloud account is 100 RMB or more. Otherwise, you may not be able to reactivate the instance. For more information, see [Reboot an instance](~~34374~~).
  * *   After the operation is called, the instance enters the `Starting` state.
  * *   You cannot call this operation on ECS instances that are locked for security reasons. An instance is locked for security reasons if `OperationLocks` in the response returned when you query information of the instance contains `"LockReason": "security"`. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
 */
async function reActivateInstances(request: ReActivateInstancesRequest): ReActivateInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReActivateInstances', 'POST', '/', 'json', false, 'json', request);
}

model ReInitDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoStartInstance?: boolean(name='AutoStartInstance', position='Query'),
  diskId: string(name='DiskId', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', position='Query'),
}

model ReInitDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReInitDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReInitDiskResponseBody(name='body'),
}

async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReInitDisk', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dryRun?: boolean(name='DryRun', position='Query'),
  forceStop?: boolean(name='ForceStop', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstance', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  batchOptimization?: string(name='BatchOptimization', description='The batch operation mode. Valid values:

*   AllTogether: In this mode, if all instances are restarted, a success message is returned. If an instance fails the verification, all instances fail to restart and an error message is returned.
*   SuccessFirst: In this mode, each instance is restarted separately. The response contains the operation results for each instance.

Default value: AllTogether.', example='AllTogether', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid Values:

*   true: performs a dry run. The system checks the required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.

> If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.

*   false: performs a dry run and sends the request. If the request passes the dry run, the operation is performed.

Default value: false.', example='false', position='Query'),
  forceReboot?: boolean(name='ForceReboot', description='Specifies whether to forcefully restart the instance. Valid values:

*   true: forcefully restarts the instance. This operation is equivalent to the power-off operation in common scenarios. Cache data that is not written to storage devices on the instance will be lost.
*   false: normally restarts the instance.

Default value: false.', example='false', position='Query'),
  instanceId: [ string ](name='InstanceId', description='The IDs of the instances. A maximum of 100 instance IDs can be specified.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RebootInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code', description='The error code returned for the instance operation. A return value of 200 indicates success. For more information, see the "Error codes" section in this topic.', example='200'),
      currentStatus?: string(name='CurrentStatus', description='The current state of the instance.', example='Stopping'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1g6zv0ce8oghu7****'),
      message?: string(name='Message', description='The error message for this instance operation. The return value Success indicates that this operation is successful. For more information, see the "Error codes" section in this topic.', example='success'),
      previousStatus?: string(name='PreviousStatus', description='The state of the instance before the operation is called.', example='Running'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses', description='Details about the responses returned for the instances, which contains the state of each instance before and after the operation is called and the operation results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstancesResponseBody(name='body'),
}

/**
  * *   The ECS instances to which you want to restart are in the **Running** (`Running`) state.
  * *   You can restart multiple instances at a time and use the `BatchOptimization` parameter to specify the batch operation mode.
  * *   Instances can be forcefully restarted. A force restart (`ForceStop`) is equivalent to powering off traditional servers to restart them. This operation may lead to data loss if data in the instance operating system is not written to block storage devices.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query the information of the instance, the instance is locked for security reasons and all operations are prohibited on it.
  *
 */
async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstances', 'POST', '/', 'json', false, 'json', request);
}

model RecoverVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vbrId: string(name='VbrId', position='Query'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoverVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model RedeployDedicatedHostRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RedeployDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model RedeployDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RedeployDedicatedHostResponseBody(name='body'),
}

async function redeployDedicatedHost(request: RedeployDedicatedHostRequest): RedeployDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RedeployDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model RedeployInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  forceStop?: boolean(name='ForceStop', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RedeployInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model RedeployInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RedeployInstanceResponseBody(name='body'),
}

async function redeployInstance(request: RedeployInstanceRequest): RedeployInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RedeployInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseCapacityReservationRequest {
  privatePoolOptions?: {
    id: string(name='Id'),
  }(name='PrivatePoolOptions', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseCapacityReservationResponseBody(name='body'),
}

async function releaseCapacityReservation(request: ReleaseCapacityReservationRequest): ReleaseCapacityReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseCapacityReservation', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseDedicatedHostRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseDedicatedHostResponseBody(name='body'),
}

async function releaseDedicatedHost(request: ReleaseDedicatedHostRequest): ReleaseDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEipAddressRequest {
  allocationId: string(name='AllocationId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePublicIpAddressRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dryRun?: boolean(name='DryRun', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  publicIpAddress: string(name='PublicIpAddress', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ReleasePublicIpAddressResponseBody = {
  remainTimes?: string(name='RemainTimes'),
  requestId?: string(name='RequestId'),
}

model ReleasePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicIpAddressResponseBody(name='body'),
}

async function releasePublicIpAddress(request: ReleasePublicIpAddressRequest): ReleasePublicIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePublicIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model RemoveBandwidthPackageIpsRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  removedIpAddresses: [ string ](name='RemovedIpAddresses', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBandwidthPackageIpsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function removeBandwidthPackageIps(request: RemoveBandwidthPackageIpsRequest): RemoveBandwidthPackageIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBandwidthPackageIps', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model RemoveTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTags', 'POST', '/', 'json', false, 'json', request);
}

model RenewDedicatedHostsRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='The IDs of dedicated hosts. You can specify the IDs of up to 100 subscription dedicated hosts. Specify dedicated host IDs as a JSON array and separate the IDs with commas (,). Example: `["dh-xxxxxxxxx", "dh-yyyyyyyyy", ... "dh-zzzzzzzzz"]`.', example='dh-bp199lyny9b3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period: int32(name='Period', description='The renewal duration of the dedicated host. Valid values:

*   Valid values when the PeriodUnit parameter is set to Week: 1, 2, 3, and 4.
*   Valid values when the PeriodUnit parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.
*   Valid values when the PeriodUnit parameter is set to Year: 1, 2, 3, 4, and 5.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration of the dedicated host. Valid values:

*   Week
*   Month
*   Year

Default value: Month.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RenewDedicatedHostsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model RenewDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDedicatedHostsResponseBody(name='body'),
}

/**
  * ## Description
  * When you renew the subscription dedicated hosts, deductible vouchers are used first by default. Make sure that your account supports credit card payments or balance payments.
  *
 */
async function renewDedicatedHosts(request: RenewDedicatedHostsRequest): RenewDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. **The token can only contain ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  expectedRenewDay?: int32(name='ExpectedRenewDay', description='The synchronized expiration date. Set the value to a synchronized expiration date that you specified. Otherwise, the call fails. If you specify this parameter, your instance is renewed to the synchronized expiration date. Valid values: 1 to 28.

For information about how to synchronize the expiration dates of instances, see [Synchronize the expiration dates of subscription instances](~~108486~~).

>  The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='5', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The renewal period of the subscription instance. If you specify the `DedicatedHostId` parameter, the value of the Period parameter must not exceed the subscription period of the specified dedicated host.

Valid values if you set the PeriodUnit parameter to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, and 12.

>  The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Valid value:

Month.

Default value: Month.', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RenewInstanceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='1234567890'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing methods and pricing schedule of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * *   You can call this operation to renew a subscription ECS instance for a period of time or to a synchronized expiration date.
  * *   You cannot renew a subscription instance for a specific period of time and to a synchronized expiration date at the same time by calling this operation. The parameter pair (`Period` and `PeriodUnit`) that is related to the renewal period and the `ExpectedRenewDay` parameter are mutually exclusive.
  * *   Your account must have sufficient credits.
  *
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewReservedInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RenewReservedInstancesResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
}

model RenewReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RenewReservedInstancesResponseBody(name='body'),
}

async function renewReservedInstances(request: RenewReservedInstancesRequest): RenewReservedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewReservedInstances', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceSystemDiskRequest {
  systemDisk?: {
    size?: int32(name='Size'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  architecture?: string(name='Architecture', position='Query'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor'),
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
    }
  ](name='Arn', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  diskId?: string(name='DiskId', position='Query'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', position='Query'),
  encrypted?: boolean(name='Encrypted', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', position='Query'),
  platform?: string(name='Platform', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', position='Query'),
  useAdditionalService?: boolean(name='UseAdditionalService', position='Query'),
}

model ReplaceSystemDiskResponseBody = {
  diskId?: string(name='DiskId'),
  requestId?: string(name='RequestId'),
}

model ReplaceSystemDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceSystemDiskResponseBody(name='body'),
}

async function replaceSystemDisk(request: ReplaceSystemDiskRequest): ReplaceSystemDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceSystemDisk', 'POST', '/', 'json', false, 'json', request);
}

model ReportInstancesStatusRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  description: string(name='Description', position='Query'),
  device?: [ string ](name='Device', position='Query'),
  diskId?: [ string ](name='DiskId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  issueCategory?: string(name='IssueCategory', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reason?: string(name='Reason', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model ReportInstancesStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReportInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportInstancesStatusResponseBody(name='body'),
}

async function reportInstancesStatus(request: ReportInstancesStatusRequest): ReportInstancesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportInstancesStatus', 'POST', '/', 'json', false, 'json', request);
}

model ResetDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  diskId: string(name='DiskId', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDisk', 'POST', '/', 'json', false, 'json', request);
}

model ResetDisksRequest {
  disk: [ 
    {
      diskId?: string(name='DiskId'),
      snapshotId?: string(name='SnapshotId'),
    }
  ](name='Disk', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetDisksResponseBody = {
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      operationStatus?: string(name='OperationStatus'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet'),
  requestId?: string(name='RequestId'),
}

model ResetDisksResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDisksResponseBody(name='body'),
}

async function resetDisks(request: ResetDisksRequest): ResetDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDisks', 'POST', '/', 'json', false, 'json', request);
}

model ResizeDiskRequest {
  sourceRegionId?: string(name='SourceRegionId', example='hide', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  diskId: string(name='DiskId', description='The ID of the disk. You can call the [DescribeDisks](~~25514~~) operation to query available disk IDs.', example='d-bp67acfmxazb4p****', position='Query'),
  newSize: int32(name='NewSize', description='The new disk capacity. Unit: GiB. Valid values:

*   System disk: 20 to 500.

*   Data disk:

    *   Ultra disk (cloud_efficiency): 20 to 32768.

    *   Standard SSD (cloud_ssd): 20 to 32768.

    *   ESSD (cloud_essd): Valid values when the NewSize parameter is set to cloud_essd depend on the `PerformanceLevel` value. You can call the [DescribeDisks](~~25514~~) operation to query disk information and check the `PerformanceLevel` parameter in the response.

        *   Valid values when the PerformanceLevel parameter is set to PL0: 40 to 32768.
        *   Valid values when the PerformanceLevel parameter is set to PL1: 20 to 32768.
        *   Valid values when the PerformanceLevel parameter is set to PL2: 461 to 32768.
        *   Valid values when the PerformanceLevel parameter is set to PL3: 1261 to 32768.

    *   Basic disk (cloud): 5 to 2000.

The new disk capacity must be greater than the original disk capacity.', example='1900', minimum=5, maximum=65536, position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com', position='Query'),
  ownerId?: long(name='OwnerId', description='RAM用户的虚拟账号ID。', example='155780923770', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='资源主账号的账号名称。', example='ECSforCloud', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源主账号的ID，亦即UID。', example='155780923770', position='Query'),
  type?: string(name='Type', description='The method to use to resize the disk. Default value: offline. Valid values:

*   offline: resizes the disk offline. After you resize a disk offline, you must restart its associated instance by using the ECS console or by calling the [RebootInstance](~~25502~~) operation to make the resizing operation take effect. For information about how to restart an ECS instance in the ECS console, see [Restart an instance](~~25440~~).
*   online: resizes the disk online. After you resize a disk online, the resizing operation takes effect immediately and you do not need to restart the instance. You can resize ultra disks, standard SSDs, and ESSDs online.', example='offline', position='Query'),
}

model ResizeDiskResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.

>  This parameter is returned only when subscription disks are resized.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F3CD6886-D8D0-4FEE-B93E-1B73239673DE'),
}

model ResizeDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDiskResponseBody(name='body'),
}

/**
  * ## Description
  * >  Before you call this operation to resize a disk, you must check the partition format of the disk. You cannot resize a master boot record (MBR) disk to greater than or equal to 2 TiB without data loss. To resize an MBR disk to greater than or equal to 2 TiB in size, we recommend that you create and attach a new data disk with the desired size. Then, you can partition and format the new data disk to GUID partition table (GPT) and copy data from the MBR disk to the new GPT data disk. For more information, see [Resize disks offline](~~44986~~).
  * *   You can resize the following categories of disks: basic disks (`cloud`), ultra disks (`cloud_efficiency`), standard SSDs (`cloud_ssd`), and enhanced SSDs (ESSDs) (`cloud_essd`).
  * *   You cannot resize a disk when a snapshot is being created for the disk.
  * *   The instance to which the disk to be resized is attached must be in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  * *   After you resize a disk, its partitions and file systems are not changed. You must manually allocate the storage space on the disk after it is resized.
  * *   Disks for which the multi-attach feature is enabled can only be resized offline. Before you resize the disks, make sure that instances to which the disks are attached are in the **Stopped** (`Stopped`) state.
  *
 */
async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDisk', 'POST', '/', 'json', false, 'json', request);
}

model RevokeSecurityGroupRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  destCidrIp?: string(name='DestCidrIp', position='Query'),
  ipProtocol?: string(name='IpProtocol', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', position='Query'),
  nicType?: string(name='NicType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: [ 
    {
      description?: string(name='Description'),
      destCidrIp?: string(name='DestCidrIp'),
      ipProtocol?: string(name='IpProtocol'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: string(name='Priority'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      sourceGroupId?: string(name='SourceGroupId'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount'),
      sourceGroupOwnerId?: long(name='SourceGroupOwnerId'),
      sourcePortRange?: string(name='SourcePortRange'),
      sourcePrefixListId?: string(name='SourcePrefixListId'),
    }
  ](name='Permissions', position='Query'),
  policy?: string(name='Policy', position='Query'),
  portRange?: string(name='PortRange', position='Query'),
  priority?: string(name='Priority', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
  securityGroupRuleId?: [ string ](name='SecurityGroupRuleId', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', position='Query'),
  sourceGroupId?: string(name='SourceGroupId', position='Query'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', position='Query'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', position='Query'),
  sourcePrefixListId?: string(name='SourcePrefixListId', position='Query'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupResponseBody(name='body'),
}

async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model RevokeSecurityGroupEgressRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E', position='Query'),
  description?: string(name='Description', description='This parameter is discontinued. Use `Permissions.N.Description` to specify the description of security group rule N.', example='This is description.', position='Query'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is discontinued. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  destGroupId?: string(name='DestGroupId', description='This parameter is discontinued. Use `Permissions.N.DestGroupId` to specify the ID of the destination security group.', example='sg-bp67acfmxa123b****', position='Query'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='This parameter is discontinued. Use `Permissions.N.DestGroupOwnerAccount` to specify the Alibaba Cloud account that manages the destination security group.', example='Test@aliyun.com', position='Query'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='This parameter is discontinued. Use `Permissions.N.DestGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the destination security group.', example='12345678910', position='Query'),
  destPrefixListId?: string(name='DestPrefixListId', description='This parameter is discontinued. Use `Permissions.N.DestPrefixListId` to specify the ID of the destination prefix list.', example='pl-x1j1k5ykzqlixdcy****', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is discontinued. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='TCP', position='Query'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is discontinued. Use `Permissions.N.Ipv6DestCidrIp` to specify the destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***', position='Query'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is discontinued. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:db8:1234:1a00::***', position='Query'),
  nicType?: string(name='NicType', description='This parameter is discontinued. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of security group rule N. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      destGroupId?: string(name='DestGroupId', description='The ID of the source security group that is referenced in security group rule N.

*   At least one of `DestGroupId`, `DestCidrIp`, `Ipv6DestCidrIp`, and `DestPrefixListId` must be specified.
*   If `DestGroupId` is specified but `DestCidrIp` is not specified, the `NicType` parameter must be set to intranet.
*   If both `DestGroupId` and `DestCidrIp` are specified, `DestCidrIp` takes precedence.

Take note of the following items:

*   For advanced security groups, security groups cannot be used as authorization objects.
*   For each basic security group, a maximum of 20 security groups can be used as authorization objects.

Valid values of N: 1 to 100.', example='sg-bp67acfmxa123b****'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group when you delete security group rules N across accounts.

*   If both `DestGroupOwnerAccount` and `DestGroupOwnerId` are not specified, the access control is revoked from another security group managed by your account.
*   If `DestCidrIp` is specified, `DestGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='Test@aliyun.com'),
      destGroupOwnerId?: string(name='DestGroupOwnerId', description='The Alibaba Cloud account that manages the destination security group when you delete security group rule N across accounts.

*   If both `DestGroupOwnerId` and `DestGroupOwnerAccount` are not specified, the access control is revoked from another security group managed by your account.
*   If `DestCidrIp` is specified, `DestGroupOwnerId` is invalid.

Valid values of N: 1 to 100.', example='12345678910'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list that is referenced in security group rule N. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

Take note of the following items:

*   If a security group is in the classic network, you cannot reference prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you specify `DestCidrIp`, `Ipv6DestCidrIp`, or `DestGroupId`, Permissions.N.DestPrefixListId is ignored.

Valid values of N: 1 to 100.', example='pl-x1j1k5ykzqlixdcy****'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of security group rule N. The value of this parameter is case-insensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='TCP'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

>  The Permissions.N.Ipv6DestCidrIp parameter is valid only when the destination is ECS instances that reside in virtual private clouds (VPCs) and that support IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

>  The Permissions.N.Ipv6SourceCidrIp parameter is valid only when the source is ECS instances that reside in VPCs and that support IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network interface controller (NIC) type of security group rule N when the security group is in the classic network. Valid values:

*   internet: public NIC
*   intranet: internal NIC

If the security group is in a VPC, this parameter is set to intranet by default and cannot be modified.

If you specify only `SourceGroupId` when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow outbound access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Specify a port range in the format of \\<Start port number>/\\<End port number>. Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

Valid values of N: 1 to 100.', example='22/22'),
      priority?: string(name='Priority', description='The priority of security group rule N. A smaller value indicates a higher priority. Valid values: 1 to 100.

Default value: 1.

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   When the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port number range is 1 to 65535. Specify a port range in the format of \\<Start port number>/\\<End port number>. Example: 1/200.
*   When the Permissions.N.IpProtocol parameter is set to ICMP, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to GRE, the port number range is -1/-1, which indicates all ports.
*   When the Permissions.N.IpProtocol parameter is set to ALL, the port number range is -1/-1, which indicates all ports.

This parameter is specified to meet quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='22/22'),
    }
  ](name='Permissions', description='Details about the security group rules.', position='Query'),
  policy?: string(name='Policy', description='This parameter is discontinued. Use `Permissions.N.Policy` to specify whether to allow outbound access.', example='accept', position='Query'),
  portRange?: string(name='PortRange', description='This parameter is discontinued. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='22/22', position='Query'),
  priority?: string(name='Priority', description='This parameter is discontinued. Use `Permissions.N.Priority` to specify the rule priority.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****', position='Query'),
  securityGroupRuleId?: [ string ](name='SecurityGroupRuleId', description='The IDs of security group rules. You can specify up to 100 rule IDs.

When you revoke security group egress by security group rule ID, the parameter is required.', position='Query'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is discontinued. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is discontinued. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='22/22', position='Query'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RevokeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupEgressResponseBody(name='body'),
}

/**
  * ## Description
  * In the security group-related API documents, outbound traffic refers to the traffic sent by the source and received by the destination.
  * When you call this operation, take note of the following items:
  * *   The `Permissions.N` prefix is added to some parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be specified together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   If the specified outbound security group rule does not exist, the call to RevokeSecurityGroupEgress is successful but no security group rule is deleted.
  * *   You can determine a security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
  *     *   Parameters used to delete an outbound security group rule that controls access to a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp, and SourceCidrIp (optional).
  *         ```
  *                 http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress
  *                 &SecurityGroupId=sg-bp67acfmxazb4ph***
  *                 &Permissions.1.IpProtocol=TCP
  *                 &Permissions.1.DestCidrIp=10.0.0.0/8
  *                 &Permissions.1.PortRange=-22/22
  *                 &Permissions.1.NicType=intranet
  *                 &Permissions.1.Policy=accept
  *                 &<Common request parameters>
  *                 
  *         ```
  *     *   Parameters used to delete an outbound security group rule that controls access to another security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestGroupId.
  *         ```
  *                 http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress
  *                 &SecurityGroupId=sg-bp67acfmxazb4ph***
  *                 &Permissions.1.DestGroupId=sg-bp67acfmxa123b****
  *                 &Permissions.1.IpProtocol=TCP
  *                 &Permissions.1.PortRange=22/22
  *                 &Permissions.1.NicType=intranet
  *                 &Permissions.1.Policy=accept
  *                 &<Common request parameters>
  *                 
  *         ```
  *     *   Parameters used to delete an outbound security group rule that controls access to a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestPrefixListId.
  *         ```
  *                 http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress
  *                 &SecurityGroupId=sg-bp67acfmxazb4ph***
  *                 &Permissions.1.IpProtocol=TCP
  *                 &Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy****
  *                 &Permissions.1.PortRange=-22/22
  *                 &Permissions.1.NicType=intranet
  *                 &Permissions.1.Policy=accept
  *                 &<Common request parameters>
  *                 
  *         ```
  *
 */
async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeSecurityGroupEgress', 'POST', '/', 'json', false, 'json', request);
}

model RunCommandRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  commandContent: string(name='CommandContent', description='The content of the command. The command content can be plaintext or Base64-encoded. Take note of the following items:

*   If you want to retain the command, make sure that the Base64-encoded command content does not exceed 18 KB in size. If you do not want to retain the command, make sure that the Base64-encoded command content does not exceed 24 KB in size. You can use the `KeepCommand` parameter to specify whether to retain the command.

*   If the command content is Base64-encoded, set the `ContentEncoding` parameter to Base64.

*   If you set the `EnableParameter` parameter to true, the custom parameter feature is enabled and you can specify custom parameters based on the following rules:

    *   Specify custom parameters in the `{{}}` format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   You can specify up to 20 custom parameters.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is not case-sensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.

*   You can specify built-in environment parameters as custom parameters. Then, Cloud Assistant automatically specifies the parameters when you run the command. You can specify the following built-in environment parameters:

    *   `{{ACS::RegionId}}`: the ID of the region.

    *   `{{ACS::AccountId}}`: the UID of the Alibaba Cloud account.

    *   `{{ACS::InstanceId}}`: the ID of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceId}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following versions:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::InstanceName}}`: the name of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceName}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following versions:

        *   Linux: 2.2.3.344
        *   Windows: 2.1.3.344

    *   `{{ACS::InvokeId}}`: the ID of the command task. If you want to specify `{{ACS::InvokeId}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following versions:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::CommandId}}`: the ID of the command. If you want to specify `{{ACS::CommandId}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following versions:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309', example='ZWNobyAxMjM=', position='Query'),
  containerId?: string(name='ContainerId', description='The ID of the container. Only 64-bit hexadecimal strings are supported. Container IDs that are prefixed with `docker://`, `containerd://`, or `cri-o://` can specify container runtimes.

Take note of the following items:

*   If you specify this parameter, Cloud Assistant runs scripts in the specified container of the instance.
*   If you specify this parameter, scripts can be run only on Linux instances on which the Cloud Assistant client of version 2.2.3.344 or later is installed.
*   If you specify this parameter, the specified `Username` and `WorkingDir` parameters do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).
*   If you specify this parameter, only shell scripts can be run in Linux containers. You cannot specify a script interpreter by adding a command in a format that is similar to `#!/usr/bin/python` at the beginning of a script. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****', position='Query'),
  containerName?: string(name='ContainerName', description='The name of the container.

Take note of the following items:

*   If you specify this parameter, Cloud Assistant runs scripts in the specified container of the instance.
*   If you specify this parameter, scripts can be run only on Linux instances on which the Cloud Assistant client of version 2.2.3.344 or later is installed.
*   If you specify this parameter, the specified `Username` and `WorkingDir` parameters do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).
*   If you specify this parameter, only shell scripts can be run in Linux containers. You cannot specify a script interpreter by adding a command in a format that is similar to `#!/usr/bin/python` at the beginning of a script. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='test-container', position='Query'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the command content that is specified by the `CommandContent` parameter. The valid values are not case-sensitive. Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is encoded in Base64.

Default value: PlainText. If an invalid value is specified for this parameter, PlainText is used.', example='Base64', position='Query'),
  description?: string(name='Description', description='The description of the command. The description supports all character sets and can be up to 512 characters in length.', example='testDescription', position='Query'),
  enableParameter?: boolean(name='EnableParameter', description='Specifies whether to include custom parameters in the command.

Default value: false', example='false', position='Query'),
  frequency?: string(name='Frequency', description='The schedule based on which the command is run. When you set the `Timed` parameter to `true`, you must specify this parameter. You can run a command at a fixed interval based on a rate expression, run the command only once at a specific time, or run the command at specific times based on a cron expression.

*   To run a command at a fixed interval, use a rate expression to specify the interval. You can specify the interval in seconds, minutes, hours, or days. This option is suitable for scenarios in which tasks need to be executed at a fixed interval. Specify the interval in the following format: `rate(<Execution interval value><Execution interval unit>)`. For example, specify `rate(5m)` to run the command every 5 minutes. When you specify an interval, take note of the following limits:

    *   The specified interval can range from 60 seconds to 7 days and must be longer than the timeout period of the scheduled task.
    *   The interval is the amount of time that elapsed between two consecutive executions. The interval is irrelevant to the amount of time that is required to run the command once. For example, you set the interval to 5 minutes, and the amount of time that is required to run the command once is 2 minutes. Each time the command is run, the system waits 3 minutes before the system reruns the command.
    *   A task is not immediately run after it is created. For example, you set the interval to 5 minutes and create a task to run the command. The task runs 5 minutes after it is created.

*   To run a command only once at a specific time, specify a point in time and a time zone. Specify the point in time in the `at(yyyy-MM-dd HH:mm:ss <Time zone>)` format, which indicates `at(Year-Month-Day Hour:Minute:Second <Time zone>)`. If you do not specify a time zone, the default time zone UTC is used. You can specify the time zone in the following formats:

    *   The name of the time zone. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not add leading zeros to the hour value.
    *   The abbreviation of the time zone. Only UTC is supported.

    For example, to specify a command that runs only once at 13:15:30 on June 6, 2022 (Shanghai time), set the time to `at(2022-06-06 13:15:30 Asia/Shanghai)`. To specify a command that runs only once at 13:15:30 on June 6, 2022 (UTC-7), set the time to `at(2022-06-06 13:15:30 GMT-7:00)`.

*   To run a command at specific times, specify a cron expression. Specify the time in the `<Cron expression> <Time zone>` format. The cron expression is in the `<seconds> <minutes> <hours> <day of the month> <month> <day of the week> <year (optional)>` format. The system calculates the execution times of the command based on the specified cron expression and time zone and runs the command as scheduled. If you do not specify a time zone, the system time zone of the instance on which you want to run the command is used. For more information about cron expressions, see [Cron expressions](~~64769~~). You can specify the time zone in the following formats:

    *   The name of the time zone. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not add leading zeros to the hour value.
    *   The abbreviation of the time zone. Only UTC is supported.

    For example, to specify a command that runs at 10:15:00 every day in 2022 (Shanghai time), set the time to `0 15 10 ? * * 2022 Asia/Shanghai`. To specify a command that runs every 30 minutes from 10:00:00 to 11:30:00 every day in 2022 (UTC+8), set the time to `0 0/30 10-11 * * ? 2022 GMT +8:00`. To specify a command to run every 5 minutes from 14:00:00 to 14:55:00 every October every two years starting from 2022 (UTC), set the time to `0 0/5 14 * 10 ? 2022/2 UTC`.

    **

    **Note**The interval must be at least 10 seconds and cannot be shorter than the timeout period of scheduled executions.', example='0 */20 * * * ?', position='Query'),
  instanceId: [ string ](name='InstanceId', description='The ID of instance N on which you want to run the command. Valid values of N: 1 to 50.

If one of the specified instances does not meet the conditions for running the command, the call fails. To ensure that the call is successful, specify only the IDs of instances that meet the conditions.', example='i-bp185dy2o3o6neg****', position='Query'),
  keepCommand?: boolean(name='KeepCommand', description='Specifies whether to retain the command after the command is run. Valid values:

*   true: retains the command. You can call the InvokeCommand operation to rerun the command. The retained command counts against the quota of Cloud Assistant commands.
*   false: does not retain the command. The command is automatically deleted after it is run and does not count against the quota of Cloud Assistant commands.

Default value: false', example='false', position='Query'),
  name?: string(name='Name', description='The name of the command. The name supports all character sets and can be up to 128 characters in length.', example='testName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The key-value pairs of the custom parameters that are passed in when the command includes custom parameters. For example, the command content is `echo {{name}}`, and you can use the `Parameter` parameter to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced by the paired Jack value to generate a new command. As a result, the `echo Jack` command is run.

You can specify up to 10 custom parameters. Take note of the following items:

*   The key cannot be an empty string. It can be up to 64 characters in length.
*   The value can be an empty string.
*   If you want to retain the command, make sure that the size of the command after Base64 encoding, including custom parameters and original command content, does not exceed 18 KB. If you do not want to retain the command, make sure that the size of the command after Base64-encoding does not exceed 24 KB. You can use the `KeepCommand` parameter to specify whether to retain the command.
*   The custom parameter names that are specified by the Parameters parameter must be included in the custom parameter names that you specify when you created the command. You can use empty strings to represent the parameters that are not passed in.

By default, this parameter is left empty. If you want to disable the custom parameter feature, you can leave this parameter empty.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  repeatMode?: string(name='RepeatMode', description='Specifies the mode in which you want to run the command. Valid values:

*   Once: immediately runs the command.
*   Period: runs the command based on a schedule. If you set this parameter to `Period`, you must set the `Timed` parameter to true and specify the `Frequency` parameter.
*   NextRebootOnly: automatically runs the command the next time the instance is started.
*   EveryReboot: automatically runs the command every time the instance is started.

Default value:

*   If you set the `Timed` parameter to false and do not specify the `Frequency` parameter, the default value of the RepeatMode parameter is `Once`.
*   If you set the `Timed` parameter to true and specify the `Frequency` parameter, `Period` is used as the value of the RepeatMode parameter regardless of whether you specify the RepeatMode parameter.

Take note of the following items:

*   If you set this parameter to `Period`, `NextRebootOnly`, or `EveryReboot`, you can call the [StopInvocation](~~64838~~) operation to stop the pending or scheduled execution of the command.
*   If you set this parameter to `Period` or `EveryReboot`, you can call the [DescribeInvocationResults](~~64845~~) operation and set the `IncludeHistory` parameter to true to view the results of previous scheduled executions.', example='Once', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the command executions. When you specify this parameter, take note of the following items:

*   The instances that are specified by the InstanceId parameter must belong to the specified resource group.
*   You can specify this parameter to call the [DescribeInvocations](~~64840~~) or [DescribeInvocationResults](~~64845~~) operation to query execution results in the specified resource group.', example='rg-bp67acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command. You can specify up to 20 tag keys for the command. The tag key cannot be an empty string.

If you specify a tag to query resources, up to 1,000 resources that have the specified tag can be displayed in the response. If you specify multiple tags to query resources, up to 1,000 resources that have all specified tags can be displayed in the response. To query more than 1,000 resources that have the specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. You can specify up to 20 tag values for the command. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the command.', position='Query'),
  timed?: boolean(name='Timed', description='Specifies whether to run the command based on a schedule. Valid values:

*   true: runs the command based on the schedule that is specified by the `Frequency` parameter. The results of a command execution do not affect the next command execution.
*   false: runs the command only once.

Default value: false.', example='true', position='Query'),
  timeout?: long(name='Timeout', description='The timeout period for the command execution. Unit: seconds.

A timeout error occurs when a command cannot be run because the command process slows down or because a specific module or the Cloud Assistant client does not exist. When an execution times out, the command process is forcibly terminated.

Default value: 60.', example='3600', position='Query'),
  type: string(name='Type', description='The language type of the command. Valid values:

*   RunBatScript: batch command, applicable to Windows instances
*   RunPowerShellScript: PowerShell command, applicable to Windows instances
*   RunShellScript: shell command, applicable to Linux instances', example='RunShellScript', position='Query'),
  username?: string(name='Username', description='The username that you use to run the command on instances.

*   For Linux instances, the root username is used.
*   For Windows instances, the System username is used.

You can also specify other usernames that already exist on the instances to run the command. For security purposes, we recommend that you run Cloud Assistant commands as a regular user. For more information, see [Run Cloud Assistant commands as a regular user](~~203771~~).', example='root', position='Query'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password that you use to run the command on Windows instances.

If you do not want to use the default username System to run the command on Windows instances, you must specify the WindowsPasswordName and `Username` parameters. The password is stored in plaintext in the parameter repository of Operation Orchestration Service (OOS) to reduce the risk of password leaks. Only the name of the password is passed in by using the WindowsPasswordName parameter. For more information, see [Encrypt parameters](~~186828~~) and [Configure a regular user to run Cloud Assistant commands](~~203771~~).

> If you use the root username for Linux instances or the System username for Windows instances to run the command, you do not need to specify the WindowsPasswordName parameter.', example='axtSecretPassword', position='Query'),
  workingDir?: string(name='WorkingDir', description='The working directory of the command on the instance.

Default values:

*   For Linux instances, the default value is `/root`, which is the home directory of the administrator (the root user).
*   For Windows instances, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32`.', example='/home/', position='Query'),
}

model RunCommandResponseBody = {
  commandId?: string(name='CommandId', description='The ID of the command.', example='c-7d2a745b412b4601b2d47f6a768d****'),
  invokeId?: string(name='InvokeId', description='The ID of the command execution.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

/**
  * Compared with the [CreateCommand](~~64844~~) and [InvokeCommand](~~64841~~) operations, you can call the RunCommand operation once to create and run a command.
  * When you call this operation, take note of the following items:
  * *   The instances on which you want to run a command must reside in a virtual private cloud (VPC).
  * *   The instances must be in the `Running` state.
  * *   The Cloud Assistant client must be installed on the instances. For more information, see [InstallCloudAssistant](~~85916~~).
  * *   Before you run a PowerShell command on a Windows instance, make sure that the PowerShell module is installed on the instance.
  * *   If you want to specify a schedule by using a cron expression, you can specify a time zone based on your business requirements. If you do not specify a time zone, the schedule is determined by the system time of the instance. Make sure that the time or time zone of the instance meets your business requirements. For information about time zones, see [Configure the NTP service for ECS instances that run CentOS 6](~~92803~~) or [Configure the NTP service for Windows instances](~~51890~~).
  * *   You can specify the `TimeOut` parameter to specify a timeout period for executions of the command on instances. If an execution times out, the Cloud Assistant client forcibly terminates the command process.
  *     *   If the one-time execution of a command times out, the execution state of the command changes to Failed. You can call the [InvokeRecordStatus](~~64845~~) operation to query the command execution state.
  *     *   For a scheduled task, the timeout period takes effect on each execution of the command. When a command execution times out, the subsequent executions of the command are not affected. If a scheduled execution of a command times out, the execution state of the command changes to Failed. You can call the [InvokeRecordStatus](~~64845~~) operation to query the command execution state.
  *     To ensure that scheduled tasks can run as expected, make sure that the version of the Cloud Assistant client is not earlier than the following versions. A scheduled task can run a command at a specific interval, only once at a specific time, or at specific times based on a cron expression that includes a specific year or time zone. If the `ClientNeedUpgrade` error code is returned, you must update the Cloud Assistant client to the latest version. For more information, see [Upgrade or disable upgrades for the Cloud Assistant client](~~134383~~).
  *           - Linux: 2.2.3.282 
  *           - Windows: 2.1.3.282 
  * *   Command executions may fail due to instance status exceptions, network exceptions, or exceptions on the Cloud Assistant client. If an execution fails, no execution information is generated.
  * *   If you set the `EnableParameter` parameter to true, the custom parameter feature is enabled. If you specify the `CommandContent` parameter, you can specify custom parameters in the `{{parameter}}` format. After the command is run, the key-value pairs of the custom parameters are passed in.
  * *   You can retain up to 500 to 10,000 Cloud Assistant commands in each region based on your ECS usage. You can call the [DescribeAccountAttribute](~~73772~~) operation to query quotas.
  *
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCommand', 'POST', '/', 'json', false, 'json', request);
}

model RunInstancesRequest {
  cpuOptions?: {
    core?: int32(name='Core'),
    numa?: string(name='Numa'),
    threadsPerCore?: int32(name='ThreadsPerCore'),
  }(name='CpuOptions', position='Query'),
  hibernationOptions?: {
    configured?: boolean(name='Configured'),
  }(name='HibernationOptions', position='Query'),
  privatePoolOptions?: {
    id?: string(name='Id'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions', position='Query'),
  schedulerOptions?: {
    dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  }(name='SchedulerOptions', position='Query'),
  securityOptions?: {
    confidentialComputingMode?: string(name='ConfidentialComputingMode'),
    trustedSystemMode?: string(name='TrustedSystemMode'),
  }(name='SecurityOptions', position='Query'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
    category?: string(name='Category'),
    description?: string(name='Description'),
    diskName?: string(name='DiskName'),
    performanceLevel?: string(name='PerformanceLevel'),
    size?: string(name='Size'),
    burstingEnabled?: boolean(name='BurstingEnabled'),
    encryptAlgorithm?: string(name='EncryptAlgorithm'),
    encrypted?: string(name='Encrypted'),
    KMSKeyId?: string(name='KMSKeyId'),
    provisionedIops?: long(name='ProvisionedIops'),
    storageClusterId?: string(name='StorageClusterId'),
  }(name='SystemDisk', position='Query'),
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  affinity?: string(name='Affinity', position='Query'),
  amount?: int32(name='Amount', minimum=1, maximum=1000, position='Query'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor'),
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
    }
  ](name='Arn', position='Query'),
  autoReleaseTime?: string(name='AutoReleaseTime', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  creditSpecification?: string(name='CreditSpecification', position='Query'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      burstingEnabled?: boolean(name='BurstingEnabled'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      encryptAlgorithm?: string(name='EncryptAlgorithm'),
      encrypted?: string(name='Encrypted'),
      KMSKeyId?: string(name='KMSKeyId'),
      performanceLevel?: string(name='PerformanceLevel'),
      provisionedIops?: long(name='ProvisionedIops'),
      size?: int32(name='Size'),
      snapshotId?: string(name='SnapshotId'),
      storageClusterId?: string(name='StorageClusterId'),
    }
  ](name='DataDisk', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', position='Query'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', position='Query'),
  deploymentSetId?: string(name='DeploymentSetId', position='Query'),
  description?: string(name='Description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  hostNames?: [ string ](name='HostNames', position='Query'),
  hpcClusterId?: string(name='HpcClusterId', position='Query'),
  httpEndpoint?: string(name='HttpEndpoint', position='Query'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', position='Query'),
  httpTokens?: string(name='HttpTokens', position='Query'),
  imageFamily?: string(name='ImageFamily', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOptions?: {
    loginAsNonRoot?: boolean(name='LoginAsNonRoot'),
  }(name='ImageOptions', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', position='Query'),
  ioOptimized?: string(name='IoOptimized', position='Query'),
  ipv6Address?: [ string ](name='Ipv6Address', position='Query'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', position='Query'),
  isp?: string(name='Isp', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  launchTemplateId?: string(name='LaunchTemplateId', position='Query'),
  launchTemplateName?: string(name='LaunchTemplateName', position='Query'),
  launchTemplateVersion?: long(name='LaunchTemplateVersion', position='Query'),
  minAmount?: int32(name='MinAmount', minimum=1, maximum=100, position='Query'),
  networkInterface?: [ 
    {
      description?: string(name='Description'),
      instanceType?: string(name='InstanceType'),
      ipv6Address?: [ string ](name='Ipv6Address'),
      ipv6AddressCount?: long(name='Ipv6AddressCount'),
      networkCardIndex?: int32(name='NetworkCardIndex'),
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      queueNumber?: int32(name='QueueNumber', minimum=1),
      queuePairNumber?: long(name='QueuePairNumber'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='NetworkInterface', position='Query'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber', minimum=1, position='Query'),
  networkOptions?: {
    enableJumboFrame?: boolean(name='EnableJumboFrame'),
  }(name='NetworkOptions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', position='Query'),
  ramRoleName?: string(name='RamRoleName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', position='Query'),
  spotDuration?: int32(name='SpotDuration', minimum=0, maximum=6, position='Query'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', position='Query'),
  spotPriceLimit?: float(name='SpotPriceLimit', minimum=0, maximum=999999, position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  storageSetId?: string(name='StorageSetId', position='Query'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', minimum=1, position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tenancy?: string(name='Tenancy', position='Query'),
  uniqueSuffix?: boolean(name='UniqueSuffix', position='Query'),
  userData?: string(name='UserData', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model RunInstancesResponseBody = {
  instanceIdSets?: {
    instanceIdSet?: [ string ](name='InstanceIdSet')
  }(name='InstanceIdSets'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  tradePrice?: float(name='TradePrice'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RunInstancesResponseBody(name='body'),
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunInstances', 'POST', '/', 'json', false, 'json', request);
}

model SendFileRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  content: string(name='Content', position='Query'),
  contentType?: string(name='ContentType', position='Query'),
  description?: string(name='Description', position='Query'),
  fileGroup?: string(name='FileGroup', position='Query'),
  fileMode?: string(name='FileMode', position='Query'),
  fileOwner?: string(name='FileOwner', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  overwrite?: boolean(name='Overwrite', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  targetDir: string(name='TargetDir', position='Query'),
  timeout?: long(name='Timeout', position='Query'),
}

model SendFileResponseBody = {
  invokeId?: string(name='InvokeId'),
  requestId?: string(name='RequestId'),
}

model SendFileResponse = {
  headers: map[string]string(name='headers'),
  body: SendFileResponseBody(name='body'),
}

async function sendFile(request: SendFileRequest): SendFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendFile', 'POST', '/', 'json', false, 'json', request);
}

model StartElasticityAssuranceRequest {
  privatePoolOptions?: {
    id: string(name='Id'),
  }(name='PrivatePoolOptions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: StartElasticityAssuranceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function startElasticityAssurance(request: StartElasticityAssuranceRequest): StartElasticityAssuranceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartElasticityAssurance', 'POST', '/', 'json', false, 'json', request);
}

model StartImagePipelineExecutionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The value of the **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  imagePipelineId: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the image creation task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='>  This parameter is deprecated.', example='null'),
      value?: string(name='Value', description='>  This parameter is deprecated.', example='null'),
    }
  ](name='TemplateTag', description='> This parameter is deprecated.', position='Query'),
}

model StartImagePipelineExecutionResponseBody = {
  executionId?: string(name='ExecutionId', description='The ID of the image creation task.', example='exec-5fb8facb8ed7427c****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: StartImagePipelineExecutionResponseBody(name='body'),
}

/**
  * * After an image template is created, you must call the StartImagePipelineExecution operation to execute an image creation task. The system creates, distributes, and shares an image based on the parameters configured in the image template.
  * * Only one image creation task can be executed at a time based on a single image template. You can call the CancelImagePipelineExecution operation multiple times to cancel multiple image creation tasks at a time. If you cancel some image creation tasks, the other tasks are not affected.
  *
 */
async function startImagePipelineExecution(request: StartImagePipelineExecutionRequest): StartImagePipelineExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartImagePipelineExecution', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   true: performs a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, the corresponding error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2XX HTTP status code is returned and the request is made.

Default value: false.', example='true', position='Query'),
  initLocalDisk?: boolean(name='InitLocalDisk', description='Specifies whether to restore the instance to its initial health state. This parameter is applicable to instances of instance families that are equipped with local disks, such as d1, i1, and i2 instances. If a local disk of a d1, i1, or i2 instance fails, you can use this parameter to specify whether to restore the instance to its initial health state on startup. Valid values:

*   true: restores the instance to its initial health state on startup. After the instance is restored to its initial health state, data stored on the local disks of the instance is lost.
*   false: does not perform operations and keeps the instance in the current state.

Default value: false.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance that you want to start.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The instances to be started must be in the **Stopped** state.``
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.[](~~25695~~)``
  *
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  batchOptimization?: string(name='BatchOptimization', description='The batch operation mode. Valid values:

*   AllTogether: In this mode, a success message is returned if all ECS instances are started. If an ECS instance fails the check when you set the DryRun parameter to false, all the specified instances cannot be started and an error message is returned.
*   SuccessFirst: In this mode, each ECS instance is separately started. The response contains the operation results of each ECS instance.

Default value: AllTogether.', example='AllTogether', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   true: performs a dry run. The system checks the required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.

> If you set the `BatchOptimization` parameter to `SuccessFirst` and the `DryRun` parameter to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.

*   false: performs a dry run and sends the request. If the request passes the dry run, the operation is performed.

Default value: false.', example='false', position='Query'),
  instanceId: [ string ](name='InstanceId', description='The IDs of the ECS instances. You can specify up to 100 ECS instance IDs.', example='i-bp67acfmxazb4p****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ECS instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code', description='The error code that is returned for the operation on the ECS instance. A return value of 200 indicates that the operation is successful. For more information, see the "Error codes" section in this topic.', example='200'),
      currentStatus?: string(name='CurrentStatus', description='The status of the ECS instance after the operation is called.', example='Starting'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-bp67acfmxazb4p****'),
      message?: string(name='Message', description='The error message that is returned for the operation on the ECS instance. A return value of success indicates that the operation is successful. For more information, see the "Error codes" section in this topic.', example='success'),
      previousStatus?: string(name='PreviousStatus', description='The status of the ECS instance before the operation is called.', example='Stopped'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses', description='The information about the ECS instance. The information contains the status of each instance before and after the operation is called and the operation results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstancesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The ECS instances that you want to start must be in the **Stopped** (`Stopped`) state.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the ECS instance is locked to ensure security. No operations are allowed on the ECS instance.
  * *   You can start multiple ECS instances at the same time and use the `BatchOptimization` parameter to specify the batch operation mode.
  *
 */
async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstances', 'POST', '/', 'json', false, 'json', request);
}

model StartTerminalSessionRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId: [ string ](name='InstanceId', description='The list of the instance ID.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portNumber?: int32(name='PortNumber', description='The port number of the ECS instance, which is used to forward data. After this parameter is specified, the Cloud Assistant client forwards data to the specified port for port forwarding. Example: 22.  

This parameter is empty by default, which indicates that no port number is configured to forward data.', example='22', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ECS instance. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StartTerminalSessionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EB5173B0-8E80-564E-AAD1-3135412*****'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='d86c2df2-d19c-4bd8-b817-a19ef123****'),
  sessionId?: string(name='SessionId', description='The ID of the session.', example='s-hz023od0x9****'),
  webSocketUrl?: string(name='WebSocketUrl', description='The URL of the WebSocket session that is used to connect to the instance. The URL includes the session ID (`SessionId`) and the authentication token (`SecurityToken`).', example='wss://cn-hangzhou.axt.aliyuncs.com/session?sessionId=s-hz023od0x9****&token=d86c2df2-d19c-4bd8-b817-a19ef123****'),
}

model StartTerminalSessionResponse = {
  headers: map[string]string(name='headers'),
  body: StartTerminalSessionResponseBody(name='body'),
}

/**
  * ## Description
  * The session management feature is in public preview. To use this feature, log on with your Alibaba Cloud account and activate this feature.  
  * When you use custom code to connect to an ECS instance that serves as a client, you can call this operation to obtain the WebSocket URL that is used to connect to the instance. Before you call this operation to create a session to an ECS instance, take note of the following items: 
  * - The ECS instance must be in the Running (Running) state.
  * - The Cloud Assistant client must be installed on the ECS instance. You can call the [DescribeCloudAssistantStatus](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/describecloudassistantstatus) operation to check whether the Cloud Assistant client is installed on the ECS instance and query the version number of the installed Cloud Assistant client.    - If the Cloud Assistant client is not installed on the ECS instance, call the [InstallCloudAssistant](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/installcloudassistant) operation to install the client.
  *   - Only the Cloud Assistant client versions that are later than the following ones support the session management feature. You can upgrade your Cloud Assistant client. For information about how to upgrade the Cloud Assistant client, see [Update or disable updates for the Cloud Assistant client](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/update-or-disable-updates-for-the-cloud-assistant-client).      - For Linux operating systems: V2.2.3.256
  *     - For Windows operating systems: V2.1.3.256
  * - Each WebSocket URL returned by the StartTerminalSession operation remains valid for 10 minutes.
  * - Up to 1,000 sessions can be created and available per region. Each ECS instance can have up to 10 sessions in the connected state.
  *
 */
async function startTerminalSession(request: StartTerminalSessionRequest): StartTerminalSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTerminalSession', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  confirmStop?: boolean(name='ConfirmStop', description='This parameter will be removed in the future and is retained only to ensure compatibility. We recommend that you ignore this parameter.', example='true', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   true: performs a dry run. The system checks the required parameters, the request format, service limits, and available ECS resources. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and the request is made if the request passes the dry run.

Default value: false.', example='true', position='Query'),
  forceStop?: boolean(name='ForceStop', description='Specifies whether to forcefully stop the instance. Valid values:

*   true: forcefully stops the instance.
*   false: normally stops the instance.

Default value: false.', example='false', position='Query'),
  hibernate?: boolean(name='Hibernate', description='>  This parameter is in invitational preview and is not available for public use.', example='hide', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  stoppedMode?: string(name='StoppedMode', description='The stop mode of the pay-as-you-go instance. Default value: Disabled. Valid values:

*   StopCharging: economical mode. For information about how `StopCharging` takes effect, see the "Prerequisites" section in [Economical mode](~~63353~~).
*   KeepCharging: standard mode. After the instance is stopped in standard mode, you continue to be charged for it.

Default value: If the prerequisites required for enabling economical mode are met and you have enabled this mode in the ECS console, the default value is `StopCharging`. For more information, see the "Enable economical mode" section in [Economical mode](~~63353#default~~). Otherwise, the default value is `KeepCharging`.', example='KeepCharging', position='Query'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1C488B66-B819-4D14-8711-C4EAAA13AC01'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

/**
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance. ``For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  * *   If economical mode is enabled, you can set `StoppedMode` to KeepCharging to switch to standard mode. This allows an instance that is stopped in standard mode to retain its instance type resources and public IP address. However, you continue to be charged for the instance.
  *
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstancesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  batchOptimization?: string(name='BatchOptimization', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  forceStop?: boolean(name='ForceStop', position='Query'),
  instanceId: [ string ](name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  stoppedMode?: string(name='StoppedMode', position='Query'),
}

model StopInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code'),
      currentStatus?: string(name='CurrentStatus'),
      instanceId?: string(name='InstanceId'),
      message?: string(name='Message'),
      previousStatus?: string(name='PreviousStatus'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses'),
  requestId?: string(name='RequestId'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstances', 'POST', '/', 'json', false, 'json', request);
}

model StopInvocationRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  instanceId?: [ string ](name='InstanceId', position='Query'),
  invokeId: string(name='InvokeId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  body: StopInvocationResponseBody(name='body'),
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInvocation', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TerminatePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: TerminatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model TerminateVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', position='Query'),
  vbrId: string(name='VbrId', position='Query'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model UnassignIpv6AddressesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ipv6Address?: [ string ](name='Ipv6Address', position='Query'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassignIpv6AddressesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignIpv6AddressesResponseBody(name='body'),
}

async function unassignIpv6Addresses(request: UnassignIpv6AddressesRequest): UnassignIpv6AddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignIpv6Addresses', 'POST', '/', 'json', false, 'json', request);
}

model UnassignPrivateIpAddressesRequest {
  sourceRegionId?: string(name='SourceRegionId', position='Host'),
  ipv4Prefix?: [ string ](name='Ipv4Prefix', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4ph****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='The secondary private IP addresses to unassign.', example='192.168.**.**', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UnassignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignPrivateIpAddressesResponseBody(name='body'),
}

/**
  * *   The ENI from which to unassign secondary private IP addresses must be in the **Available** (Available) or **InUse** (InUse) state.
  * *   If the ENI is a primary ENI, the Elastic Compute Service (ECS) instance to which the ENI is attached must be in the **Running** (Running) or **Stopped** (Stopped) state.
  *
 */
async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignPrivateIpAddresses', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateEipAddressRequest {
  allocationId: string(name='AllocationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateHaVipRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  force?: string(name='Force', position='Query'),
  haVipId: string(name='HaVipId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

