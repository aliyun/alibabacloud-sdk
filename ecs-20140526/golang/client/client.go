// This file is auto-generated, don't edit it. Thanks.
package client

import (
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	rpc "github.com/alibabacloud-go/tea-rpc/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DescribeNetworkInterfaceAttributeRequest struct {
	OwnerId              *int64                                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                        `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                        `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*DescribeNetworkInterfaceAttributeRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	NetworkInterfaceId   *string                                        `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Attribute            *string                                        `json:"Attribute" xml:"Attribute"`
}

func (s DescribeNetworkInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetOwnerId(v int64) *DescribeNetworkInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetOwnerAccount(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetRegionId(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetTag(v []*DescribeNetworkInterfaceAttributeRequestTag) *DescribeNetworkInterfaceAttributeRequest {
	s.Tag = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequest) SetAttribute(v string) *DescribeNetworkInterfaceAttributeRequest {
	s.Attribute = &v
	return s
}

type DescribeNetworkInterfaceAttributeRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeRequestTag) SetKey(v string) *DescribeNetworkInterfaceAttributeRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeRequestTag) SetValue(v string) *DescribeNetworkInterfaceAttributeRequestTag {
	s.Value = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponse struct {
	RequestId            *string                                                      `json:"RequestId" xml:"RequestId" require:"true"`
	NetworkInterfaceId   *string                                                      `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Status               *string                                                      `json:"Status" xml:"Status" require:"true"`
	Type                 *string                                                      `json:"Type" xml:"Type" require:"true"`
	VpcId                *string                                                      `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId            *string                                                      `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	ZoneId               *string                                                      `json:"ZoneId" xml:"ZoneId" require:"true"`
	PrivateIpAddress     *string                                                      `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true"`
	MacAddress           *string                                                      `json:"MacAddress" xml:"MacAddress" require:"true"`
	NetworkInterfaceName *string                                                      `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string                                                      `json:"Description" xml:"Description" require:"true"`
	InstanceId           *string                                                      `json:"InstanceId" xml:"InstanceId" require:"true"`
	CreationTime         *string                                                      `json:"CreationTime" xml:"CreationTime" require:"true"`
	ResourceGroupId      *string                                                      `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	ServiceID            *int64                                                       `json:"ServiceID" xml:"ServiceID" require:"true"`
	ServiceManaged       *bool                                                        `json:"ServiceManaged" xml:"ServiceManaged" require:"true"`
	QueueNumber          *int                                                         `json:"QueueNumber" xml:"QueueNumber" require:"true"`
	OwnerId              *string                                                      `json:"OwnerId" xml:"OwnerId" require:"true"`
	PrivateIpSets        *DescribeNetworkInterfaceAttributeResponsePrivateIpSets      `json:"PrivateIpSets" xml:"PrivateIpSets" require:"true" type:"Struct"`
	Ipv6Sets             *DescribeNetworkInterfaceAttributeResponseIpv6Sets           `json:"Ipv6Sets" xml:"Ipv6Sets" require:"true" type:"Struct"`
	Tags                 *DescribeNetworkInterfaceAttributeResponseTags               `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
	AssociatedPublicIp   *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp `json:"AssociatedPublicIp" xml:"AssociatedPublicIp" require:"true" type:"Struct"`
	Attachment           *DescribeNetworkInterfaceAttributeResponseAttachment         `json:"Attachment" xml:"Attachment" require:"true" type:"Struct"`
	SecurityGroupIds     *DescribeNetworkInterfaceAttributeResponseSecurityGroupIds   `json:"SecurityGroupIds" xml:"SecurityGroupIds" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetRequestId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetStatus(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetType(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetVpcId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetVSwitchId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetZoneId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.ZoneId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetPrivateIpAddress(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetMacAddress(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetNetworkInterfaceName(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetDescription(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetInstanceId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetCreationTime(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetResourceGroupId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetServiceID(v int64) *DescribeNetworkInterfaceAttributeResponse {
	s.ServiceID = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetServiceManaged(v bool) *DescribeNetworkInterfaceAttributeResponse {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetQueueNumber(v int) *DescribeNetworkInterfaceAttributeResponse {
	s.QueueNumber = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetOwnerId(v string) *DescribeNetworkInterfaceAttributeResponse {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetPrivateIpSets(v *DescribeNetworkInterfaceAttributeResponsePrivateIpSets) *DescribeNetworkInterfaceAttributeResponse {
	s.PrivateIpSets = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetIpv6Sets(v *DescribeNetworkInterfaceAttributeResponseIpv6Sets) *DescribeNetworkInterfaceAttributeResponse {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetTags(v *DescribeNetworkInterfaceAttributeResponseTags) *DescribeNetworkInterfaceAttributeResponse {
	s.Tags = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetAssociatedPublicIp(v *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp) *DescribeNetworkInterfaceAttributeResponse {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetAttachment(v *DescribeNetworkInterfaceAttributeResponseAttachment) *DescribeNetworkInterfaceAttributeResponse {
	s.Attachment = v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponse) SetSecurityGroupIds(v *DescribeNetworkInterfaceAttributeResponseSecurityGroupIds) *DescribeNetworkInterfaceAttributeResponse {
	s.SecurityGroupIds = v
	return s
}

type DescribeNetworkInterfaceAttributeResponsePrivateIpSets struct {
	PrivateIpSet []*DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet `json:"PrivateIpSet" xml:"PrivateIpSet" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSets) SetPrivateIpSet(v []*DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) *DescribeNetworkInterfaceAttributeResponsePrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet struct {
	PrivateIpAddress   *string                                                                               `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true"`
	Primary            *bool                                                                                 `json:"Primary" xml:"Primary" require:"true"`
	AssociatedPublicIp *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp `json:"AssociatedPublicIp" xml:"AssociatedPublicIp" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) SetPrimary(v bool) *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet) SetAssociatedPublicIp(v *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp) *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSet {
	s.AssociatedPublicIp = v
	return s
}

type DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp struct {
	PublicIpAddress *string `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true"`
	AllocationId    *string `json:"AllocationId" xml:"AllocationId" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfaceAttributeResponsePrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseIpv6Sets struct {
	Ipv6Set []*DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set `json:"Ipv6Set" xml:"Ipv6Set" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponseIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseIpv6Sets) SetIpv6Set(v []*DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set) *DescribeNetworkInterfaceAttributeResponseIpv6Sets {
	s.Ipv6Set = v
	return s
}

type DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set struct {
	Ipv6Address *string `json:"Ipv6Address" xml:"Ipv6Address" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set) SetIpv6Address(v string) *DescribeNetworkInterfaceAttributeResponseIpv6SetsIpv6Set {
	s.Ipv6Address = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseTags struct {
	Tag []*DescribeNetworkInterfaceAttributeResponseTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponseTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseTags) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseTags) SetTag(v []*DescribeNetworkInterfaceAttributeResponseTagsTag) *DescribeNetworkInterfaceAttributeResponseTags {
	s.Tag = v
	return s
}

type DescribeNetworkInterfaceAttributeResponseTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeResponseTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseTagsTag) SetTagKey(v string) *DescribeNetworkInterfaceAttributeResponseTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseTagsTag) SetTagValue(v string) *DescribeNetworkInterfaceAttributeResponseTagsTag {
	s.TagValue = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp struct {
	PublicIpAddress *string `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true"`
	AllocationId    *string `json:"AllocationId" xml:"AllocationId" require:"true"`
}

func (s DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfaceAttributeResponseAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

type DescribeNetworkInterfaceAttributeResponseAttachment struct {
	InstanceId                *string                                                                       `json:"InstanceId" xml:"InstanceId" require:"true"`
	TrunkNetworkInterfaceId   *string                                                                       `json:"TrunkNetworkInterfaceId" xml:"TrunkNetworkInterfaceId" require:"true"`
	DeviceIndex               *int                                                                          `json:"DeviceIndex" xml:"DeviceIndex" require:"true"`
	MemberNetworkInterfaceIds *DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds `json:"MemberNetworkInterfaceIds" xml:"MemberNetworkInterfaceIds" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfaceAttributeResponseAttachment) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseAttachment) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseAttachment) SetInstanceId(v string) *DescribeNetworkInterfaceAttributeResponseAttachment {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseAttachment) SetTrunkNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeResponseAttachment {
	s.TrunkNetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseAttachment) SetDeviceIndex(v int) *DescribeNetworkInterfaceAttributeResponseAttachment {
	s.DeviceIndex = &v
	return s
}

func (s *DescribeNetworkInterfaceAttributeResponseAttachment) SetMemberNetworkInterfaceIds(v *DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds) *DescribeNetworkInterfaceAttributeResponseAttachment {
	s.MemberNetworkInterfaceIds = v
	return s
}

type DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds struct {
	MemberNetworkInterfaceId []*string `json:"MemberNetworkInterfaceId" xml:"MemberNetworkInterfaceId" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds) SetMemberNetworkInterfaceId(v []*string) *DescribeNetworkInterfaceAttributeResponseAttachmentMemberNetworkInterfaceIds {
	s.MemberNetworkInterfaceId = v
	return s
}

type DescribeNetworkInterfaceAttributeResponseSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfaceAttributeResponseSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfaceAttributeResponseSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfaceAttributeResponseSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeNetworkInterfaceAttributeResponseSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type CopySnapshotRequest struct {
	OwnerId                        *int64                    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount           *string                   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                *int64                    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	Tag                            []*CopySnapshotRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	RegionId                       *string                   `json:"RegionId" xml:"RegionId" require:"true"`
	DestinationRegionId            *string                   `json:"DestinationRegionId" xml:"DestinationRegionId" require:"true"`
	SnapshotId                     *string                   `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	DestinationSnapshotName        *string                   `json:"DestinationSnapshotName" xml:"DestinationSnapshotName" require:"true"`
	DestinationSnapshotDescription *string                   `json:"DestinationSnapshotDescription" xml:"DestinationSnapshotDescription" require:"true"`
	RetentionDays                  *int                      `json:"RetentionDays" xml:"RetentionDays"`
}

func (s CopySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotRequest) GoString() string {
	return s.String()
}

func (s *CopySnapshotRequest) SetOwnerId(v int64) *CopySnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *CopySnapshotRequest) SetResourceOwnerAccount(v string) *CopySnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CopySnapshotRequest) SetResourceOwnerId(v int64) *CopySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CopySnapshotRequest) SetTag(v []*CopySnapshotRequestTag) *CopySnapshotRequest {
	s.Tag = v
	return s
}

func (s *CopySnapshotRequest) SetRegionId(v string) *CopySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationRegionId(v string) *CopySnapshotRequest {
	s.DestinationRegionId = &v
	return s
}

func (s *CopySnapshotRequest) SetSnapshotId(v string) *CopySnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotName(v string) *CopySnapshotRequest {
	s.DestinationSnapshotName = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotDescription(v string) *CopySnapshotRequest {
	s.DestinationSnapshotDescription = &v
	return s
}

func (s *CopySnapshotRequest) SetRetentionDays(v int) *CopySnapshotRequest {
	s.RetentionDays = &v
	return s
}

type CopySnapshotRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CopySnapshotRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotRequestTag) GoString() string {
	return s.String()
}

func (s *CopySnapshotRequestTag) SetKey(v string) *CopySnapshotRequestTag {
	s.Key = &v
	return s
}

func (s *CopySnapshotRequestTag) SetValue(v string) *CopySnapshotRequestTag {
	s.Value = &v
	return s
}

type CopySnapshotResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	SnapshotId *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
}

func (s CopySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponse) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponse) SetRequestId(v string) *CopySnapshotResponse {
	s.RequestId = &v
	return s
}

func (s *CopySnapshotResponse) SetSnapshotId(v string) *CopySnapshotResponse {
	s.SnapshotId = &v
	return s
}

type ModifyDedicatedHostsChargeTypeRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DedicatedHostIds        *string `json:"DedicatedHostIds" xml:"DedicatedHostIds" require:"true"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	Period                  *int    `json:"Period" xml:"Period"`
	PeriodUnit              *string `json:"PeriodUnit" xml:"PeriodUnit"`
	DryRun                  *bool   `json:"DryRun" xml:"DryRun"`
	AutoPay                 *bool   `json:"AutoPay" xml:"AutoPay"`
	DedicatedHostChargeType *string `json:"DedicatedHostChargeType" xml:"DedicatedHostChargeType"`
	ClientToken             *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DetailFee               *bool   `json:"DetailFee" xml:"DetailFee"`
}

func (s ModifyDedicatedHostsChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetOwnerId(v int64) *ModifyDedicatedHostsChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostsChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDedicatedHostIds(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetRegionId(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetPeriod(v int) *ModifyDedicatedHostsChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetPeriodUnit(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDryRun(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetAutoPay(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDedicatedHostChargeType(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.DedicatedHostChargeType = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetClientToken(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostsChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeRequest) SetDetailFee(v bool) *ModifyDedicatedHostsChargeTypeRequest {
	s.DetailFee = &v
	return s
}

type ModifyDedicatedHostsChargeTypeResponse struct {
	RequestId      *string                                               `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId        *string                                               `json:"OrderId" xml:"OrderId" require:"true"`
	FeeOfInstances *ModifyDedicatedHostsChargeTypeResponseFeeOfInstances `json:"FeeOfInstances" xml:"FeeOfInstances" require:"true" type:"Struct"`
}

func (s ModifyDedicatedHostsChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponse) SetRequestId(v string) *ModifyDedicatedHostsChargeTypeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponse) SetOrderId(v string) *ModifyDedicatedHostsChargeTypeResponse {
	s.OrderId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponse) SetFeeOfInstances(v *ModifyDedicatedHostsChargeTypeResponseFeeOfInstances) *ModifyDedicatedHostsChargeTypeResponse {
	s.FeeOfInstances = v
	return s
}

type ModifyDedicatedHostsChargeTypeResponseFeeOfInstances struct {
	FeeOfInstance []*ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance `json:"FeeOfInstance" xml:"FeeOfInstance" require:"true" type:"Repeated"`
}

func (s ModifyDedicatedHostsChargeTypeResponseFeeOfInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponseFeeOfInstances) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponseFeeOfInstances) SetFeeOfInstance(v []*ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) *ModifyDedicatedHostsChargeTypeResponseFeeOfInstances {
	s.FeeOfInstance = v
	return s
}

type ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Fee        *string `json:"Fee" xml:"Fee" require:"true"`
	Currency   *string `json:"Currency" xml:"Currency" require:"true"`
}

func (s ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) SetInstanceId(v string) *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.InstanceId = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) SetFee(v string) *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.Fee = &v
	return s
}

func (s *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance) SetCurrency(v string) *ModifyDedicatedHostsChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.Currency = &v
	return s
}

type ModifyInstanceMetadataOptionsRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId              *string `json:"InstanceId" xml:"InstanceId"`
	HttpEndpoint            *string `json:"HttpEndpoint" xml:"HttpEndpoint" require:"true"`
	HttpTokens              *string `json:"HttpTokens" xml:"HttpTokens"`
	HttpPutResponseHopLimit *int    `json:"HttpPutResponseHopLimit" xml:"HttpPutResponseHopLimit"`
}

func (s ModifyInstanceMetadataOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMetadataOptionsRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMetadataOptionsRequest) SetOwnerId(v int64) *ModifyInstanceMetadataOptionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetResourceOwnerAccount(v string) *ModifyInstanceMetadataOptionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetResourceOwnerId(v int64) *ModifyInstanceMetadataOptionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetRegionId(v string) *ModifyInstanceMetadataOptionsRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetInstanceId(v string) *ModifyInstanceMetadataOptionsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpEndpoint(v string) *ModifyInstanceMetadataOptionsRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpTokens(v string) *ModifyInstanceMetadataOptionsRequest {
	s.HttpTokens = &v
	return s
}

func (s *ModifyInstanceMetadataOptionsRequest) SetHttpPutResponseHopLimit(v int) *ModifyInstanceMetadataOptionsRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

type ModifyInstanceMetadataOptionsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceMetadataOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMetadataOptionsResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMetadataOptionsResponse) SetRequestId(v string) *ModifyInstanceMetadataOptionsResponse {
	s.RequestId = &v
	return s
}

type DescribeImageFromFamilyRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageFamily          *string `json:"ImageFamily" xml:"ImageFamily" require:"true"`
}

func (s DescribeImageFromFamilyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyRequest) SetOwnerId(v int64) *DescribeImageFromFamilyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetResourceOwnerAccount(v string) *DescribeImageFromFamilyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetResourceOwnerId(v int64) *DescribeImageFromFamilyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetOwnerAccount(v string) *DescribeImageFromFamilyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetRegionId(v string) *DescribeImageFromFamilyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageFromFamilyRequest) SetImageFamily(v string) *DescribeImageFromFamilyRequest {
	s.ImageFamily = &v
	return s
}

type DescribeImageFromFamilyResponse struct {
	RequestId *string                               `json:"RequestId" xml:"RequestId" require:"true"`
	Image     *DescribeImageFromFamilyResponseImage `json:"Image" xml:"Image" require:"true" type:"Struct"`
}

func (s DescribeImageFromFamilyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponse) SetRequestId(v string) *DescribeImageFromFamilyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeImageFromFamilyResponse) SetImage(v *DescribeImageFromFamilyResponseImage) *DescribeImageFromFamilyResponse {
	s.Image = v
	return s
}

type DescribeImageFromFamilyResponseImage struct {
	Progress             *string                                                 `json:"Progress" xml:"Progress" require:"true"`
	ImageId              *string                                                 `json:"ImageId" xml:"ImageId" require:"true"`
	ImageName            *string                                                 `json:"ImageName" xml:"ImageName" require:"true"`
	ImageFamily          *string                                                 `json:"ImageFamily" xml:"ImageFamily" require:"true"`
	ImageVersion         *string                                                 `json:"ImageVersion" xml:"ImageVersion" require:"true"`
	Description          *string                                                 `json:"Description" xml:"Description" require:"true"`
	Size                 *int                                                    `json:"Size" xml:"Size" require:"true"`
	ImageOwnerAlias      *string                                                 `json:"ImageOwnerAlias" xml:"ImageOwnerAlias" require:"true"`
	IsSupportIoOptimized *bool                                                   `json:"IsSupportIoOptimized" xml:"IsSupportIoOptimized" require:"true"`
	IsSupportCloudinit   *bool                                                   `json:"IsSupportCloudinit" xml:"IsSupportCloudinit" require:"true"`
	OSName               *string                                                 `json:"OSName" xml:"OSName" require:"true"`
	Architecture         *string                                                 `json:"Architecture" xml:"Architecture" require:"true"`
	Status               *string                                                 `json:"Status" xml:"Status" require:"true"`
	ProductCode          *string                                                 `json:"ProductCode" xml:"ProductCode" require:"true"`
	IsSubscribed         *bool                                                   `json:"IsSubscribed" xml:"IsSubscribed" require:"true"`
	CreationTime         *string                                                 `json:"CreationTime" xml:"CreationTime" require:"true"`
	IsSelfShared         *string                                                 `json:"IsSelfShared" xml:"IsSelfShared" require:"true"`
	OSType               *string                                                 `json:"OSType" xml:"OSType" require:"true"`
	Platform             *string                                                 `json:"Platform" xml:"Platform" require:"true"`
	Usage                *string                                                 `json:"Usage" xml:"Usage" require:"true"`
	IsCopied             *bool                                                   `json:"IsCopied" xml:"IsCopied" require:"true"`
	DiskDeviceMappings   *DescribeImageFromFamilyResponseImageDiskDeviceMappings `json:"DiskDeviceMappings" xml:"DiskDeviceMappings" require:"true" type:"Struct"`
	Tags                 *DescribeImageFromFamilyResponseImageTags               `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeImageFromFamilyResponseImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseImage) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseImage) SetProgress(v string) *DescribeImageFromFamilyResponseImage {
	s.Progress = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetImageId(v string) *DescribeImageFromFamilyResponseImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetImageName(v string) *DescribeImageFromFamilyResponseImage {
	s.ImageName = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetImageFamily(v string) *DescribeImageFromFamilyResponseImage {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetImageVersion(v string) *DescribeImageFromFamilyResponseImage {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetDescription(v string) *DescribeImageFromFamilyResponseImage {
	s.Description = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetSize(v int) *DescribeImageFromFamilyResponseImage {
	s.Size = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetImageOwnerAlias(v string) *DescribeImageFromFamilyResponseImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetIsSupportIoOptimized(v bool) *DescribeImageFromFamilyResponseImage {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetIsSupportCloudinit(v bool) *DescribeImageFromFamilyResponseImage {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetOSName(v string) *DescribeImageFromFamilyResponseImage {
	s.OSName = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetArchitecture(v string) *DescribeImageFromFamilyResponseImage {
	s.Architecture = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetStatus(v string) *DescribeImageFromFamilyResponseImage {
	s.Status = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetProductCode(v string) *DescribeImageFromFamilyResponseImage {
	s.ProductCode = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetIsSubscribed(v bool) *DescribeImageFromFamilyResponseImage {
	s.IsSubscribed = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetCreationTime(v string) *DescribeImageFromFamilyResponseImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetIsSelfShared(v string) *DescribeImageFromFamilyResponseImage {
	s.IsSelfShared = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetOSType(v string) *DescribeImageFromFamilyResponseImage {
	s.OSType = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetPlatform(v string) *DescribeImageFromFamilyResponseImage {
	s.Platform = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetUsage(v string) *DescribeImageFromFamilyResponseImage {
	s.Usage = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetIsCopied(v bool) *DescribeImageFromFamilyResponseImage {
	s.IsCopied = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetDiskDeviceMappings(v *DescribeImageFromFamilyResponseImageDiskDeviceMappings) *DescribeImageFromFamilyResponseImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImageFromFamilyResponseImage) SetTags(v *DescribeImageFromFamilyResponseImageTags) *DescribeImageFromFamilyResponseImage {
	s.Tags = v
	return s
}

type DescribeImageFromFamilyResponseImageDiskDeviceMappings struct {
	DiskDeviceMapping []*DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping `json:"DiskDeviceMapping" xml:"DiskDeviceMapping" require:"true" type:"Repeated"`
}

func (s DescribeImageFromFamilyResponseImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappings) SetDiskDeviceMapping(v []*DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) *DescribeImageFromFamilyResponseImageDiskDeviceMappings {
	s.DiskDeviceMapping = v
	return s
}

type DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping struct {
	SnapshotId      *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Size            *string `json:"Size" xml:"Size" require:"true"`
	Device          *string `json:"Device" xml:"Device" require:"true"`
	Type            *string `json:"Type" xml:"Type" require:"true"`
	Format          *string `json:"Format" xml:"Format" require:"true"`
	ImportOSSBucket *string `json:"ImportOSSBucket" xml:"ImportOSSBucket" require:"true"`
	ImportOSSObject *string `json:"ImportOSSObject" xml:"ImportOSSObject" require:"true"`
}

func (s DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetSnapshotId(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetSize(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetDevice(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.Device = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetType(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.Type = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetFormat(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetImportOSSBucket(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImportOSSBucket = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping) SetImportOSSObject(v string) *DescribeImageFromFamilyResponseImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImportOSSObject = &v
	return s
}

type DescribeImageFromFamilyResponseImageTags struct {
	Tag []*DescribeImageFromFamilyResponseImageTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeImageFromFamilyResponseImageTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseImageTags) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseImageTags) SetTag(v []*DescribeImageFromFamilyResponseImageTagsTag) *DescribeImageFromFamilyResponseImageTags {
	s.Tag = v
	return s
}

type DescribeImageFromFamilyResponseImageTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeImageFromFamilyResponseImageTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFromFamilyResponseImageTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeImageFromFamilyResponseImageTagsTag) SetTagKey(v string) *DescribeImageFromFamilyResponseImageTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeImageFromFamilyResponseImageTagsTag) SetTagValue(v string) *DescribeImageFromFamilyResponseImageTagsTag {
	s.TagValue = &v
	return s
}

type StopInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	DryRun               *bool     `json:"DryRun" xml:"DryRun"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ForceStop            *bool     `json:"ForceStop" xml:"ForceStop"`
	StoppedMode          *string   `json:"StoppedMode" xml:"StoppedMode"`
	BatchOptimization    *string   `json:"BatchOptimization" xml:"BatchOptimization"`
}

func (s StopInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopInstancesRequest) SetOwnerId(v int64) *StopInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInstancesRequest) SetResourceOwnerAccount(v string) *StopInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInstancesRequest) SetResourceOwnerId(v int64) *StopInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInstancesRequest) SetOwnerAccount(v string) *StopInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInstancesRequest) SetDryRun(v bool) *StopInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *StopInstancesRequest) SetInstanceId(v []*string) *StopInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *StopInstancesRequest) SetRegionId(v string) *StopInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StopInstancesRequest) SetForceStop(v bool) *StopInstancesRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstancesRequest) SetStoppedMode(v string) *StopInstancesRequest {
	s.StoppedMode = &v
	return s
}

func (s *StopInstancesRequest) SetBatchOptimization(v string) *StopInstancesRequest {
	s.BatchOptimization = &v
	return s
}

type StopInstancesResponse struct {
	RequestId         *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceResponses *StopInstancesResponseInstanceResponses `json:"InstanceResponses" xml:"InstanceResponses" require:"true" type:"Struct"`
}

func (s StopInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopInstancesResponse) SetRequestId(v string) *StopInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *StopInstancesResponse) SetInstanceResponses(v *StopInstancesResponseInstanceResponses) *StopInstancesResponse {
	s.InstanceResponses = v
	return s
}

type StopInstancesResponseInstanceResponses struct {
	InstanceResponse []*StopInstancesResponseInstanceResponsesInstanceResponse `json:"InstanceResponse" xml:"InstanceResponse" require:"true" type:"Repeated"`
}

func (s StopInstancesResponseInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponseInstanceResponses) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseInstanceResponses) SetInstanceResponse(v []*StopInstancesResponseInstanceResponsesInstanceResponse) *StopInstancesResponseInstanceResponses {
	s.InstanceResponse = v
	return s
}

type StopInstancesResponseInstanceResponsesInstanceResponse struct {
	InstanceId     *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	PreviousStatus *string `json:"PreviousStatus" xml:"PreviousStatus" require:"true"`
	CurrentStatus  *string `json:"CurrentStatus" xml:"CurrentStatus" require:"true"`
	Code           *string `json:"Code" xml:"Code" require:"true"`
	Message        *string `json:"Message" xml:"Message" require:"true"`
}

func (s StopInstancesResponseInstanceResponsesInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponseInstanceResponsesInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseInstanceResponsesInstanceResponse) SetInstanceId(v string) *StopInstancesResponseInstanceResponsesInstanceResponse {
	s.InstanceId = &v
	return s
}

func (s *StopInstancesResponseInstanceResponsesInstanceResponse) SetPreviousStatus(v string) *StopInstancesResponseInstanceResponsesInstanceResponse {
	s.PreviousStatus = &v
	return s
}

func (s *StopInstancesResponseInstanceResponsesInstanceResponse) SetCurrentStatus(v string) *StopInstancesResponseInstanceResponsesInstanceResponse {
	s.CurrentStatus = &v
	return s
}

func (s *StopInstancesResponseInstanceResponsesInstanceResponse) SetCode(v string) *StopInstancesResponseInstanceResponsesInstanceResponse {
	s.Code = &v
	return s
}

func (s *StopInstancesResponseInstanceResponsesInstanceResponse) SetMessage(v string) *StopInstancesResponseInstanceResponsesInstanceResponse {
	s.Message = &v
	return s
}

type StartInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	DryRun               *bool     `json:"DryRun" xml:"DryRun"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	BatchOptimization    *string   `json:"BatchOptimization" xml:"BatchOptimization"`
}

func (s StartInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesRequest) GoString() string {
	return s.String()
}

func (s *StartInstancesRequest) SetOwnerId(v int64) *StartInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *StartInstancesRequest) SetResourceOwnerAccount(v string) *StartInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartInstancesRequest) SetResourceOwnerId(v int64) *StartInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartInstancesRequest) SetOwnerAccount(v string) *StartInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StartInstancesRequest) SetDryRun(v bool) *StartInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *StartInstancesRequest) SetInstanceId(v []*string) *StartInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *StartInstancesRequest) SetRegionId(v string) *StartInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *StartInstancesRequest) SetBatchOptimization(v string) *StartInstancesRequest {
	s.BatchOptimization = &v
	return s
}

type StartInstancesResponse struct {
	RequestId         *string                                  `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceResponses *StartInstancesResponseInstanceResponses `json:"InstanceResponses" xml:"InstanceResponses" require:"true" type:"Struct"`
}

func (s StartInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponse) GoString() string {
	return s.String()
}

func (s *StartInstancesResponse) SetRequestId(v string) *StartInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *StartInstancesResponse) SetInstanceResponses(v *StartInstancesResponseInstanceResponses) *StartInstancesResponse {
	s.InstanceResponses = v
	return s
}

type StartInstancesResponseInstanceResponses struct {
	InstanceResponse []*StartInstancesResponseInstanceResponsesInstanceResponse `json:"InstanceResponse" xml:"InstanceResponse" require:"true" type:"Repeated"`
}

func (s StartInstancesResponseInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponseInstanceResponses) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseInstanceResponses) SetInstanceResponse(v []*StartInstancesResponseInstanceResponsesInstanceResponse) *StartInstancesResponseInstanceResponses {
	s.InstanceResponse = v
	return s
}

type StartInstancesResponseInstanceResponsesInstanceResponse struct {
	InstanceId     *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	PreviousStatus *string `json:"PreviousStatus" xml:"PreviousStatus" require:"true"`
	CurrentStatus  *string `json:"CurrentStatus" xml:"CurrentStatus" require:"true"`
	Code           *string `json:"Code" xml:"Code" require:"true"`
	Message        *string `json:"Message" xml:"Message" require:"true"`
}

func (s StartInstancesResponseInstanceResponsesInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponseInstanceResponsesInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseInstanceResponsesInstanceResponse) SetInstanceId(v string) *StartInstancesResponseInstanceResponsesInstanceResponse {
	s.InstanceId = &v
	return s
}

func (s *StartInstancesResponseInstanceResponsesInstanceResponse) SetPreviousStatus(v string) *StartInstancesResponseInstanceResponsesInstanceResponse {
	s.PreviousStatus = &v
	return s
}

func (s *StartInstancesResponseInstanceResponsesInstanceResponse) SetCurrentStatus(v string) *StartInstancesResponseInstanceResponsesInstanceResponse {
	s.CurrentStatus = &v
	return s
}

func (s *StartInstancesResponseInstanceResponsesInstanceResponse) SetCode(v string) *StartInstancesResponseInstanceResponsesInstanceResponse {
	s.Code = &v
	return s
}

func (s *StartInstancesResponseInstanceResponsesInstanceResponse) SetMessage(v string) *StartInstancesResponseInstanceResponsesInstanceResponse {
	s.Message = &v
	return s
}

type RebootInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	DryRun               *bool     `json:"DryRun" xml:"DryRun"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ForceReboot          *bool     `json:"ForceReboot" xml:"ForceReboot"`
	BatchOptimization    *string   `json:"BatchOptimization" xml:"BatchOptimization"`
}

func (s RebootInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesRequest) GoString() string {
	return s.String()
}

func (s *RebootInstancesRequest) SetOwnerId(v int64) *RebootInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *RebootInstancesRequest) SetResourceOwnerAccount(v string) *RebootInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebootInstancesRequest) SetResourceOwnerId(v int64) *RebootInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebootInstancesRequest) SetOwnerAccount(v string) *RebootInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RebootInstancesRequest) SetDryRun(v bool) *RebootInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *RebootInstancesRequest) SetInstanceId(v []*string) *RebootInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *RebootInstancesRequest) SetRegionId(v string) *RebootInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *RebootInstancesRequest) SetForceReboot(v bool) *RebootInstancesRequest {
	s.ForceReboot = &v
	return s
}

func (s *RebootInstancesRequest) SetBatchOptimization(v string) *RebootInstancesRequest {
	s.BatchOptimization = &v
	return s
}

type RebootInstancesResponse struct {
	RequestId         *string                                   `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceResponses *RebootInstancesResponseInstanceResponses `json:"InstanceResponses" xml:"InstanceResponses" require:"true" type:"Struct"`
}

func (s RebootInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponse) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponse) SetRequestId(v string) *RebootInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *RebootInstancesResponse) SetInstanceResponses(v *RebootInstancesResponseInstanceResponses) *RebootInstancesResponse {
	s.InstanceResponses = v
	return s
}

type RebootInstancesResponseInstanceResponses struct {
	InstanceResponse []*RebootInstancesResponseInstanceResponsesInstanceResponse `json:"InstanceResponse" xml:"InstanceResponse" require:"true" type:"Repeated"`
}

func (s RebootInstancesResponseInstanceResponses) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponseInstanceResponses) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseInstanceResponses) SetInstanceResponse(v []*RebootInstancesResponseInstanceResponsesInstanceResponse) *RebootInstancesResponseInstanceResponses {
	s.InstanceResponse = v
	return s
}

type RebootInstancesResponseInstanceResponsesInstanceResponse struct {
	InstanceId     *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	PreviousStatus *string `json:"PreviousStatus" xml:"PreviousStatus" require:"true"`
	CurrentStatus  *string `json:"CurrentStatus" xml:"CurrentStatus" require:"true"`
	Code           *string `json:"Code" xml:"Code" require:"true"`
	Message        *string `json:"Message" xml:"Message" require:"true"`
}

func (s RebootInstancesResponseInstanceResponsesInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponseInstanceResponsesInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseInstanceResponsesInstanceResponse) SetInstanceId(v string) *RebootInstancesResponseInstanceResponsesInstanceResponse {
	s.InstanceId = &v
	return s
}

func (s *RebootInstancesResponseInstanceResponsesInstanceResponse) SetPreviousStatus(v string) *RebootInstancesResponseInstanceResponsesInstanceResponse {
	s.PreviousStatus = &v
	return s
}

func (s *RebootInstancesResponseInstanceResponsesInstanceResponse) SetCurrentStatus(v string) *RebootInstancesResponseInstanceResponsesInstanceResponse {
	s.CurrentStatus = &v
	return s
}

func (s *RebootInstancesResponseInstanceResponsesInstanceResponse) SetCode(v string) *RebootInstancesResponseInstanceResponsesInstanceResponse {
	s.Code = &v
	return s
}

func (s *RebootInstancesResponseInstanceResponsesInstanceResponse) SetMessage(v string) *RebootInstancesResponseInstanceResponsesInstanceResponse {
	s.Message = &v
	return s
}

type RedeployDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
}

func (s RedeployDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s RedeployDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *RedeployDedicatedHostRequest) SetOwnerId(v int64) *RedeployDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetResourceOwnerAccount(v string) *RedeployDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetResourceOwnerId(v int64) *RedeployDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetOwnerAccount(v string) *RedeployDedicatedHostRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetRegionId(v string) *RedeployDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *RedeployDedicatedHostRequest) SetDedicatedHostId(v string) *RedeployDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

type RedeployDedicatedHostResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RedeployDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s RedeployDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *RedeployDedicatedHostResponse) SetRequestId(v string) *RedeployDedicatedHostResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceMaintenanceAttributesRequest struct {
	OwnerId              *int64                                                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                                        `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                                        `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string                                                      `json:"InstanceId" xml:"InstanceId" type:"Repeated"`
	MaintenanceWindow    []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow `json:"MaintenanceWindow" xml:"MaintenanceWindow" type:"Repeated"`
	ActionOnMaintenance  *string                                                        `json:"ActionOnMaintenance" xml:"ActionOnMaintenance"`
}

func (s ModifyInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetRegionId(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *ModifyInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetMaintenanceWindow(v []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) *ModifyInstanceMaintenanceAttributesRequest {
	s.MaintenanceWindow = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetActionOnMaintenance(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ActionOnMaintenance = &v
	return s
}

type ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow struct {
	StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime   *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetStartTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.StartTime = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetEndTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.EndTime = &v
	return s
}

type ModifyInstanceMaintenanceAttributesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetRequestId(v string) *ModifyInstanceMaintenanceAttributesResponse {
	s.RequestId = &v
	return s
}

type DescribeInstanceMaintenanceAttributesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" type:"Repeated"`
	PageNumber           *int64    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int64    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetRegionId(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *DescribeInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageNumber(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageSize(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageSize = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponse struct {
	RequestId             *string                                                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount            *int                                                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber            *int                                                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize              *int                                                                `json:"PageSize" xml:"PageSize" require:"true"`
	MaintenanceAttributes *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes `json:"MaintenanceAttributes" xml:"MaintenanceAttributes" require:"true" type:"Struct"`
}

func (s DescribeInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetRequestId(v string) *DescribeInstanceMaintenanceAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetTotalCount(v int) *DescribeInstanceMaintenanceAttributesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetPageNumber(v int) *DescribeInstanceMaintenanceAttributesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetPageSize(v int) *DescribeInstanceMaintenanceAttributesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetMaintenanceAttributes(v *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes) *DescribeInstanceMaintenanceAttributesResponse {
	s.MaintenanceAttributes = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes struct {
	MaintenanceAttribute []*DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute `json:"MaintenanceAttribute" xml:"MaintenanceAttribute" require:"true" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes) SetMaintenanceAttribute(v []*DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributes {
	s.MaintenanceAttribute = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute struct {
	InstanceId          *string                                                                                                    `json:"InstanceId" xml:"InstanceId" require:"true"`
	MaintenanceWindows  *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows  `json:"MaintenanceWindows" xml:"MaintenanceWindows" require:"true" type:"Struct"`
	ActionOnMaintenance *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance `json:"ActionOnMaintenance" xml:"ActionOnMaintenance" require:"true" type:"Struct"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) SetInstanceId(v string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) SetMaintenanceWindows(v *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute {
	s.MaintenanceWindows = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute) SetActionOnMaintenance(v *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttribute {
	s.ActionOnMaintenance = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows struct {
	MaintenanceWindow []*DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow `json:"MaintenanceWindow" xml:"MaintenanceWindow" require:"true" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) SetMaintenanceWindow(v []*DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindows {
	s.MaintenanceWindow = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow struct {
	StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime   *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) SetStartTime(v string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow {
	s.StartTime = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) SetEndTime(v string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow {
	s.EndTime = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance struct {
	Value           *string                                                                                                                   `json:"Value" xml:"Value" require:"true"`
	DefaultValue    *string                                                                                                                   `json:"DefaultValue" xml:"DefaultValue" require:"true"`
	SupportedValues *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues `json:"SupportedValues" xml:"SupportedValues" require:"true" type:"Struct"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetValue(v string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.Value = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetDefaultValue(v string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.DefaultValue = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetSupportedValues(v *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.SupportedValues = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues struct {
	SupportedValue []*string `json:"SupportedValue" xml:"SupportedValue" require:"true" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) SetSupportedValue(v []*string) *DescribeInstanceMaintenanceAttributesResponseMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues {
	s.SupportedValue = v
	return s
}

type ModifyDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId"`
	DemandId             *string `json:"DemandId" xml:"DemandId" require:"true"`
	DemandName           *string `json:"DemandName" xml:"DemandName"`
	DemandDescription    *string `json:"DemandDescription" xml:"DemandDescription"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType"`
	Amount               *int    `json:"Amount" xml:"Amount"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	Period               *int    `json:"Period" xml:"Period"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	StartTime            *string `json:"StartTime" xml:"StartTime"`
	EndTime              *string `json:"EndTime" xml:"EndTime"`
}

func (s ModifyDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDemandRequest) GoString() string {
	return s.String()
}

func (s *ModifyDemandRequest) SetOwnerId(v int64) *ModifyDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDemandRequest) SetResourceOwnerAccount(v string) *ModifyDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDemandRequest) SetResourceOwnerId(v int64) *ModifyDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDemandRequest) SetOwnerAccount(v string) *ModifyDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDemandRequest) SetClientToken(v string) *ModifyDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDemandRequest) SetRegionId(v string) *ModifyDemandRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDemandRequest) SetZoneId(v string) *ModifyDemandRequest {
	s.ZoneId = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandId(v string) *ModifyDemandRequest {
	s.DemandId = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandName(v string) *ModifyDemandRequest {
	s.DemandName = &v
	return s
}

func (s *ModifyDemandRequest) SetDemandDescription(v string) *ModifyDemandRequest {
	s.DemandDescription = &v
	return s
}

func (s *ModifyDemandRequest) SetInstanceType(v string) *ModifyDemandRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyDemandRequest) SetAmount(v int) *ModifyDemandRequest {
	s.Amount = &v
	return s
}

func (s *ModifyDemandRequest) SetInstanceChargeType(v string) *ModifyDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyDemandRequest) SetPeriod(v int) *ModifyDemandRequest {
	s.Period = &v
	return s
}

func (s *ModifyDemandRequest) SetPeriodUnit(v string) *ModifyDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDemandRequest) SetStartTime(v string) *ModifyDemandRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyDemandRequest) SetEndTime(v string) *ModifyDemandRequest {
	s.EndTime = &v
	return s
}

type ModifyDemandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDemandResponse) GoString() string {
	return s.String()
}

func (s *ModifyDemandResponse) SetRequestId(v string) *ModifyDemandResponse {
	s.RequestId = &v
	return s
}

type DeleteDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DemandId             *string `json:"DemandId" xml:"DemandId" require:"true"`
	Reason               *string `json:"Reason" xml:"Reason"`
}

func (s DeleteDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDemandRequest) GoString() string {
	return s.String()
}

func (s *DeleteDemandRequest) SetOwnerId(v int64) *DeleteDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDemandRequest) SetResourceOwnerAccount(v string) *DeleteDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDemandRequest) SetResourceOwnerId(v int64) *DeleteDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDemandRequest) SetOwnerAccount(v string) *DeleteDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDemandRequest) SetClientToken(v string) *DeleteDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteDemandRequest) SetRegionId(v string) *DeleteDemandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDemandRequest) SetDemandId(v string) *DeleteDemandRequest {
	s.DemandId = &v
	return s
}

func (s *DeleteDemandRequest) SetReason(v string) *DeleteDemandRequest {
	s.Reason = &v
	return s
}

type DeleteDemandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDemandResponse) GoString() string {
	return s.String()
}

func (s *DeleteDemandResponse) SetRequestId(v string) *DeleteDemandResponse {
	s.RequestId = &v
	return s
}

type CreateDemandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	DemandName           *string `json:"DemandName" xml:"DemandName"`
	DemandDescription    *string `json:"DemandDescription" xml:"DemandDescription"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	Amount               *int    `json:"Amount" xml:"Amount" require:"true"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	Period               *int    `json:"Period" xml:"Period" require:"true"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s CreateDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDemandRequest) GoString() string {
	return s.String()
}

func (s *CreateDemandRequest) SetOwnerId(v int64) *CreateDemandRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDemandRequest) SetResourceOwnerAccount(v string) *CreateDemandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDemandRequest) SetResourceOwnerId(v int64) *CreateDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDemandRequest) SetOwnerAccount(v string) *CreateDemandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDemandRequest) SetClientToken(v string) *CreateDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDemandRequest) SetRegionId(v string) *CreateDemandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDemandRequest) SetZoneId(v string) *CreateDemandRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDemandRequest) SetDemandName(v string) *CreateDemandRequest {
	s.DemandName = &v
	return s
}

func (s *CreateDemandRequest) SetDemandDescription(v string) *CreateDemandRequest {
	s.DemandDescription = &v
	return s
}

func (s *CreateDemandRequest) SetInstanceType(v string) *CreateDemandRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateDemandRequest) SetAmount(v int) *CreateDemandRequest {
	s.Amount = &v
	return s
}

func (s *CreateDemandRequest) SetInstanceChargeType(v string) *CreateDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateDemandRequest) SetPeriod(v int) *CreateDemandRequest {
	s.Period = &v
	return s
}

func (s *CreateDemandRequest) SetPeriodUnit(v string) *CreateDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDemandRequest) SetStartTime(v string) *CreateDemandRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDemandRequest) SetEndTime(v string) *CreateDemandRequest {
	s.EndTime = &v
	return s
}

type CreateDemandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	DemandId  *string `json:"DemandId" xml:"DemandId" require:"true"`
}

func (s CreateDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDemandResponse) GoString() string {
	return s.String()
}

func (s *CreateDemandResponse) SetRequestId(v string) *CreateDemandResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDemandResponse) SetDemandId(v string) *CreateDemandResponse {
	s.DemandId = &v
	return s
}

type PurchaseStorageCapacityUnitRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Name                 *string `json:"Name" xml:"Name"`
	Capacity             *int    `json:"Capacity" xml:"Capacity" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	StartTime            *string `json:"StartTime" xml:"StartTime"`
	Period               *int    `json:"Period" xml:"Period"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	FromApp              *string `json:"FromApp" xml:"FromApp"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	Amount               *int    `json:"Amount" xml:"Amount"`
}

func (s PurchaseStorageCapacityUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitRequest) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetRegionId(v string) *PurchaseStorageCapacityUnitRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetName(v string) *PurchaseStorageCapacityUnitRequest {
	s.Name = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetCapacity(v int) *PurchaseStorageCapacityUnitRequest {
	s.Capacity = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetDescription(v string) *PurchaseStorageCapacityUnitRequest {
	s.Description = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetStartTime(v string) *PurchaseStorageCapacityUnitRequest {
	s.StartTime = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriod(v int) *PurchaseStorageCapacityUnitRequest {
	s.Period = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriodUnit(v string) *PurchaseStorageCapacityUnitRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetFromApp(v string) *PurchaseStorageCapacityUnitRequest {
	s.FromApp = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetClientToken(v string) *PurchaseStorageCapacityUnitRequest {
	s.ClientToken = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetAmount(v int) *PurchaseStorageCapacityUnitRequest {
	s.Amount = &v
	return s
}

type PurchaseStorageCapacityUnitResponse struct {
	RequestId              *string                                                    `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId                *string                                                    `json:"OrderId" xml:"OrderId" require:"true"`
	StorageCapacityUnitIds *PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds `json:"StorageCapacityUnitIds" xml:"StorageCapacityUnitIds" require:"true" type:"Struct"`
}

func (s PurchaseStorageCapacityUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponse) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponse) SetRequestId(v string) *PurchaseStorageCapacityUnitResponse {
	s.RequestId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponse) SetOrderId(v string) *PurchaseStorageCapacityUnitResponse {
	s.OrderId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponse) SetStorageCapacityUnitIds(v *PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds) *PurchaseStorageCapacityUnitResponse {
	s.StorageCapacityUnitIds = v
	return s
}

type PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds struct {
	StorageCapacityUnitId []*string `json:"StorageCapacityUnitId" xml:"StorageCapacityUnitId" require:"true" type:"Repeated"`
}

func (s PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds) SetStorageCapacityUnitId(v []*string) *PurchaseStorageCapacityUnitResponseStorageCapacityUnitIds {
	s.StorageCapacityUnitId = v
	return s
}

type ModifyStorageCapacityUnitAttributeRequest struct {
	OwnerId               *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId" xml:"StorageCapacityUnitId" require:"true"`
	Name                  *string `json:"Name" xml:"Name"`
	Description           *string `json:"Description" xml:"Description"`
}

func (s ModifyStorageCapacityUnitAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageCapacityUnitAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetOwnerId(v int64) *ModifyStorageCapacityUnitAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetResourceOwnerAccount(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetResourceOwnerId(v int64) *ModifyStorageCapacityUnitAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetOwnerAccount(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetRegionId(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetStorageCapacityUnitId(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.StorageCapacityUnitId = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetName(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyStorageCapacityUnitAttributeRequest) SetDescription(v string) *ModifyStorageCapacityUnitAttributeRequest {
	s.Description = &v
	return s
}

type ModifyStorageCapacityUnitAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyStorageCapacityUnitAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageCapacityUnitAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyStorageCapacityUnitAttributeResponse) SetRequestId(v string) *ModifyStorageCapacityUnitAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeStorageCapacityUnitsRequest struct {
	OwnerId               *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string   `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber            *int      `json:"PageNumber" xml:"PageNumber"`
	PageSize              *int      `json:"PageSize" xml:"PageSize"`
	Name                  *string   `json:"Name" xml:"Name"`
	Capacity              *int      `json:"Capacity" xml:"Capacity"`
	StorageCapacityUnitId []*string `json:"StorageCapacityUnitId" xml:"StorageCapacityUnitId" type:"Repeated"`
	Status                []*string `json:"Status" xml:"Status" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsRequest) SetOwnerId(v int64) *DescribeStorageCapacityUnitsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetResourceOwnerAccount(v string) *DescribeStorageCapacityUnitsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetResourceOwnerId(v int64) *DescribeStorageCapacityUnitsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetOwnerAccount(v string) *DescribeStorageCapacityUnitsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetRegionId(v string) *DescribeStorageCapacityUnitsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetPageNumber(v int) *DescribeStorageCapacityUnitsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetPageSize(v int) *DescribeStorageCapacityUnitsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetName(v string) *DescribeStorageCapacityUnitsRequest {
	s.Name = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetCapacity(v int) *DescribeStorageCapacityUnitsRequest {
	s.Capacity = &v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetStorageCapacityUnitId(v []*string) *DescribeStorageCapacityUnitsRequest {
	s.StorageCapacityUnitId = v
	return s
}

func (s *DescribeStorageCapacityUnitsRequest) SetStatus(v []*string) *DescribeStorageCapacityUnitsRequest {
	s.Status = v
	return s
}

type DescribeStorageCapacityUnitsResponse struct {
	RequestId            *string                                                   `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount           *int                                                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber           *int                                                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize             *int                                                      `json:"PageSize" xml:"PageSize" require:"true"`
	StorageCapacityUnits *DescribeStorageCapacityUnitsResponseStorageCapacityUnits `json:"StorageCapacityUnits" xml:"StorageCapacityUnits" require:"true" type:"Struct"`
}

func (s DescribeStorageCapacityUnitsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponse) SetRequestId(v string) *DescribeStorageCapacityUnitsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponse) SetTotalCount(v int) *DescribeStorageCapacityUnitsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponse) SetPageNumber(v int) *DescribeStorageCapacityUnitsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponse) SetPageSize(v int) *DescribeStorageCapacityUnitsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponse) SetStorageCapacityUnits(v *DescribeStorageCapacityUnitsResponseStorageCapacityUnits) *DescribeStorageCapacityUnitsResponse {
	s.StorageCapacityUnits = v
	return s
}

type DescribeStorageCapacityUnitsResponseStorageCapacityUnits struct {
	StorageCapacityUnit []*DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit `json:"StorageCapacityUnit" xml:"StorageCapacityUnit" require:"true" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitsResponseStorageCapacityUnits) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponseStorageCapacityUnits) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnits) SetStorageCapacityUnit(v []*DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) *DescribeStorageCapacityUnitsResponseStorageCapacityUnits {
	s.StorageCapacityUnit = v
	return s
}

type DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit struct {
	RegionId              *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId" xml:"StorageCapacityUnitId" require:"true"`
	Name                  *string `json:"Name" xml:"Name" require:"true"`
	Capacity              *int    `json:"Capacity" xml:"Capacity" require:"true"`
	Status                *string `json:"Status" xml:"Status" require:"true"`
	CreationTime          *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	ExpiredTime           *string `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	StartTime             *string `json:"StartTime" xml:"StartTime" require:"true"`
	Description           *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetRegionId(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetStorageCapacityUnitId(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.StorageCapacityUnitId = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetName(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.Name = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetCapacity(v int) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.Capacity = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetStatus(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.Status = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetCreationTime(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetExpiredTime(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetStartTime(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.StartTime = &v
	return s
}

func (s *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit) SetDescription(v string) *DescribeStorageCapacityUnitsResponseStorageCapacityUnitsStorageCapacityUnit {
	s.Description = &v
	return s
}

type RunCommandRequest struct {
	OwnerId              *int64                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                `json:"RegionId" xml:"RegionId" require:"true"`
	Name                 *string                `json:"Name" xml:"Name"`
	Description          *string                `json:"Description" xml:"Description"`
	Type                 *string                `json:"Type" xml:"Type" require:"true"`
	CommandContent       *string                `json:"CommandContent" xml:"CommandContent" require:"true"`
	WorkingDir           *string                `json:"WorkingDir" xml:"WorkingDir"`
	Timeout              *int64                 `json:"Timeout" xml:"Timeout"`
	EnableParameter      *bool                  `json:"EnableParameter" xml:"EnableParameter"`
	Timed                *bool                  `json:"Timed" xml:"Timed"`
	Frequency            *string                `json:"Frequency" xml:"Frequency"`
	InstanceId           []*string              `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	Parameters           map[string]interface{} `json:"Parameters" xml:"Parameters"`
	KeepCommand          *bool                  `json:"KeepCommand" xml:"KeepCommand"`
	ContentEncoding      *string                `json:"ContentEncoding" xml:"ContentEncoding"`
}

func (s RunCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommandRequest) GoString() string {
	return s.String()
}

func (s *RunCommandRequest) SetOwnerId(v int64) *RunCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RunCommandRequest) SetResourceOwnerAccount(v string) *RunCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RunCommandRequest) SetResourceOwnerId(v int64) *RunCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunCommandRequest) SetOwnerAccount(v string) *RunCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RunCommandRequest) SetRegionId(v string) *RunCommandRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandRequest) SetName(v string) *RunCommandRequest {
	s.Name = &v
	return s
}

func (s *RunCommandRequest) SetDescription(v string) *RunCommandRequest {
	s.Description = &v
	return s
}

func (s *RunCommandRequest) SetType(v string) *RunCommandRequest {
	s.Type = &v
	return s
}

func (s *RunCommandRequest) SetCommandContent(v string) *RunCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandRequest) SetWorkingDir(v string) *RunCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *RunCommandRequest) SetTimeout(v int64) *RunCommandRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandRequest) SetEnableParameter(v bool) *RunCommandRequest {
	s.EnableParameter = &v
	return s
}

func (s *RunCommandRequest) SetTimed(v bool) *RunCommandRequest {
	s.Timed = &v
	return s
}

func (s *RunCommandRequest) SetFrequency(v string) *RunCommandRequest {
	s.Frequency = &v
	return s
}

func (s *RunCommandRequest) SetInstanceId(v []*string) *RunCommandRequest {
	s.InstanceId = v
	return s
}

func (s *RunCommandRequest) SetParameters(v map[string]interface{}) *RunCommandRequest {
	s.Parameters = v
	return s
}

func (s *RunCommandRequest) SetKeepCommand(v bool) *RunCommandRequest {
	s.KeepCommand = &v
	return s
}

func (s *RunCommandRequest) SetContentEncoding(v string) *RunCommandRequest {
	s.ContentEncoding = &v
	return s
}

type RunCommandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	CommandId *string `json:"CommandId" xml:"CommandId" require:"true"`
	InvokeId  *string `json:"InvokeId" xml:"InvokeId" require:"true"`
}

func (s RunCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponse) GoString() string {
	return s.String()
}

func (s *RunCommandResponse) SetRequestId(v string) *RunCommandResponse {
	s.RequestId = &v
	return s
}

func (s *RunCommandResponse) SetCommandId(v string) *RunCommandResponse {
	s.CommandId = &v
	return s
}

func (s *RunCommandResponse) SetInvokeId(v string) *RunCommandResponse {
	s.InvokeId = &v
	return s
}

type DeleteInstancesRequest struct {
	OwnerId               *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId            []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	DryRun                *bool     `json:"DryRun" xml:"DryRun"`
	OwnerAccount          *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	Force                 *bool     `json:"Force" xml:"Force"`
	TerminateSubscription *bool     `json:"TerminateSubscription" xml:"TerminateSubscription"`
	ClientToken           *string   `json:"ClientToken" xml:"ClientToken"`
	RegionId              *string   `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s DeleteInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstancesRequest) SetOwnerId(v int64) *DeleteInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteInstancesRequest) SetResourceOwnerAccount(v string) *DeleteInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteInstancesRequest) SetResourceOwnerId(v int64) *DeleteInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteInstancesRequest) SetInstanceId(v []*string) *DeleteInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *DeleteInstancesRequest) SetDryRun(v bool) *DeleteInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *DeleteInstancesRequest) SetOwnerAccount(v string) *DeleteInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteInstancesRequest) SetForce(v bool) *DeleteInstancesRequest {
	s.Force = &v
	return s
}

func (s *DeleteInstancesRequest) SetTerminateSubscription(v bool) *DeleteInstancesRequest {
	s.TerminateSubscription = &v
	return s
}

func (s *DeleteInstancesRequest) SetClientToken(v string) *DeleteInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteInstancesRequest) SetRegionId(v string) *DeleteInstancesRequest {
	s.RegionId = &v
	return s
}

type DeleteInstancesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstancesResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstancesResponse) SetRequestId(v string) *DeleteInstancesResponse {
	s.RequestId = &v
	return s
}

type ModifyStorageSetAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageSetId         *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
	StorageSetName       *string `json:"StorageSetName" xml:"StorageSetName"`
	Description          *string `json:"Description" xml:"Description"`
}

func (s ModifyStorageSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetClientToken(v string) *ModifyStorageSetAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetRegionId(v string) *ModifyStorageSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetId(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetName(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetName = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetDescription(v string) *ModifyStorageSetAttributeRequest {
	s.Description = &v
	return s
}

type ModifyStorageSetAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyStorageSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeResponse) SetRequestId(v string) *ModifyStorageSetAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeStorageSetsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageSetIds        *string `json:"StorageSetIds" xml:"StorageSetIds"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId"`
	StorageSetName       *string `json:"StorageSetName" xml:"StorageSetName"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeStorageSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsRequest) SetOwnerId(v int64) *DescribeStorageSetsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetClientToken(v string) *DescribeStorageSetsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetRegionId(v string) *DescribeStorageSetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetIds(v string) *DescribeStorageSetsRequest {
	s.StorageSetIds = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetZoneId(v string) *DescribeStorageSetsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetName(v string) *DescribeStorageSetsRequest {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageNumber(v int) *DescribeStorageSetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageSize(v int) *DescribeStorageSetsRequest {
	s.PageSize = &v
	return s
}

type DescribeStorageSetsResponse struct {
	RequestId   *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int                                    `json:"PageSize" xml:"PageSize" require:"true"`
	StorageSets *DescribeStorageSetsResponseStorageSets `json:"StorageSets" xml:"StorageSets" require:"true" type:"Struct"`
}

func (s DescribeStorageSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponse) SetRequestId(v string) *DescribeStorageSetsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetsResponse) SetTotalCount(v int) *DescribeStorageSetsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageSetsResponse) SetPageNumber(v int) *DescribeStorageSetsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsResponse) SetPageSize(v int) *DescribeStorageSetsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetsResponse) SetStorageSets(v *DescribeStorageSetsResponseStorageSets) *DescribeStorageSetsResponse {
	s.StorageSets = v
	return s
}

type DescribeStorageSetsResponseStorageSets struct {
	StorageSet []*DescribeStorageSetsResponseStorageSetsStorageSet `json:"StorageSet" xml:"StorageSet" require:"true" type:"Repeated"`
}

func (s DescribeStorageSetsResponseStorageSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseStorageSets) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseStorageSets) SetStorageSet(v []*DescribeStorageSetsResponseStorageSetsStorageSet) *DescribeStorageSetsResponseStorageSets {
	s.StorageSet = v
	return s
}

type DescribeStorageSetsResponseStorageSetsStorageSet struct {
	StorageSetId              *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
	CreationTime              *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	StorageSetName            *string `json:"StorageSetName" xml:"StorageSetName" require:"true"`
	Description               *string `json:"Description" xml:"Description" require:"true"`
	StorageSetPartitionNumber *int    `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber" require:"true"`
	RegionId                  *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                    *string `json:"ZoneId" xml:"ZoneId" require:"true"`
}

func (s DescribeStorageSetsResponseStorageSetsStorageSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseStorageSetsStorageSet) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetStorageSetId(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetCreationTime(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetStorageSetName(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetDescription(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.Description = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetStorageSetPartitionNumber(v int) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetRegionId(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetsResponseStorageSetsStorageSet) SetZoneId(v string) *DescribeStorageSetsResponseStorageSetsStorageSet {
	s.ZoneId = &v
	return s
}

type DescribeStorageSetDetailsRequest struct {
	OwnerId                   *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount      *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId           *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount              *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken               *string `json:"ClientToken" xml:"ClientToken"`
	RegionId                  *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageSetId              *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
	StorageSetPartitionNumber *int    `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber"`
	DiskIds                   *string `json:"DiskIds" xml:"DiskIds"`
	PageNumber                *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize                  *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeStorageSetDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetClientToken(v string) *DescribeStorageSetDetailsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetRegionId(v string) *DescribeStorageSetDetailsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetId(v string) *DescribeStorageSetDetailsRequest {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetPartitionNumber(v int) *DescribeStorageSetDetailsRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetDiskIds(v string) *DescribeStorageSetDetailsRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageNumber(v int) *DescribeStorageSetDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageSize(v int) *DescribeStorageSetDetailsRequest {
	s.PageSize = &v
	return s
}

type DescribeStorageSetDetailsResponse struct {
	RequestId  *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                    `json:"PageSize" xml:"PageSize" require:"true"`
	Disks      *DescribeStorageSetDetailsResponseDisks `json:"Disks" xml:"Disks" require:"true" type:"Struct"`
}

func (s DescribeStorageSetDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponse) SetRequestId(v string) *DescribeStorageSetDetailsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetTotalCount(v int) *DescribeStorageSetDetailsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetPageNumber(v int) *DescribeStorageSetDetailsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetPageSize(v int) *DescribeStorageSetDetailsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetDisks(v *DescribeStorageSetDetailsResponseDisks) *DescribeStorageSetDetailsResponse {
	s.Disks = v
	return s
}

type DescribeStorageSetDetailsResponseDisks struct {
	Disk []*DescribeStorageSetDetailsResponseDisksDisk `json:"Disk" xml:"Disk" require:"true" type:"Repeated"`
}

func (s DescribeStorageSetDetailsResponseDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseDisks) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseDisks) SetDisk(v []*DescribeStorageSetDetailsResponseDisksDisk) *DescribeStorageSetDetailsResponseDisks {
	s.Disk = v
	return s
}

type DescribeStorageSetDetailsResponseDisksDisk struct {
	DiskId                    *string `json:"DiskId" xml:"DiskId" require:"true"`
	DiskName                  *string `json:"DiskName" xml:"DiskName" require:"true"`
	Category                  *string `json:"Category" xml:"Category" require:"true"`
	StorageSetId              *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
	CreationTime              *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	StorageSetPartitionNumber *int    `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber" require:"true"`
	RegionId                  *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                    *string `json:"ZoneId" xml:"ZoneId" require:"true"`
}

func (s DescribeStorageSetDetailsResponseDisksDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseDisksDisk) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetDiskId(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetDiskName(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetCategory(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.Category = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetStorageSetId(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetCreationTime(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetStorageSetPartitionNumber(v int) *DescribeStorageSetDetailsResponseDisksDisk {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetRegionId(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseDisksDisk) SetZoneId(v string) *DescribeStorageSetDetailsResponseDisksDisk {
	s.ZoneId = &v
	return s
}

type DeleteStorageSetRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	StorageSetId         *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
}

func (s DeleteStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetRequest) SetOwnerId(v int64) *DeleteStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerAccount(v string) *DeleteStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerId(v int64) *DeleteStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetOwnerAccount(v string) *DeleteStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetClientToken(v string) *DeleteStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteStorageSetRequest) SetRegionId(v string) *DeleteStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetStorageSetId(v string) *DeleteStorageSetRequest {
	s.StorageSetId = &v
	return s
}

type DeleteStorageSetResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetResponse) SetRequestId(v string) *DeleteStorageSetResponse {
	s.RequestId = &v
	return s
}

type CreateStorageSetRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	StorageSetName       *string `json:"StorageSetName" xml:"StorageSetName"`
	Description          *string `json:"Description" xml:"Description"`
	MaxPartitionNumber   *int    `json:"MaxPartitionNumber" xml:"MaxPartitionNumber"`
}

func (s CreateStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageSetRequest) SetOwnerId(v int64) *CreateStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerAccount(v string) *CreateStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerId(v int64) *CreateStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetOwnerAccount(v string) *CreateStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetClientToken(v string) *CreateStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateStorageSetRequest) SetRegionId(v string) *CreateStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStorageSetRequest) SetZoneId(v string) *CreateStorageSetRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateStorageSetRequest) SetStorageSetName(v string) *CreateStorageSetRequest {
	s.StorageSetName = &v
	return s
}

func (s *CreateStorageSetRequest) SetDescription(v string) *CreateStorageSetRequest {
	s.Description = &v
	return s
}

func (s *CreateStorageSetRequest) SetMaxPartitionNumber(v int) *CreateStorageSetRequest {
	s.MaxPartitionNumber = &v
	return s
}

type CreateStorageSetResponse struct {
	RequestId    *string `json:"RequestId" xml:"RequestId" require:"true"`
	StorageSetId *string `json:"StorageSetId" xml:"StorageSetId" require:"true"`
}

func (s CreateStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageSetResponse) SetRequestId(v string) *CreateStorageSetResponse {
	s.RequestId = &v
	return s
}

func (s *CreateStorageSetResponse) SetStorageSetId(v string) *CreateStorageSetResponse {
	s.StorageSetId = &v
	return s
}

type ModifyDiskSpecRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	PerformanceLevel     *string `json:"PerformanceLevel" xml:"PerformanceLevel"`
	DiskCategory         *string `json:"DiskCategory" xml:"DiskCategory"`
	DryRun               *bool   `json:"DryRun" xml:"DryRun"`
}

func (s ModifyDiskSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecRequest) SetOwnerId(v int64) *ModifyDiskSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerId(v int64) *ModifyDiskSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskId(v string) *ModifyDiskSpecRequest {
	s.DiskId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetPerformanceLevel(v string) *ModifyDiskSpecRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskCategory(v string) *ModifyDiskSpecRequest {
	s.DiskCategory = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDryRun(v bool) *ModifyDiskSpecRequest {
	s.DryRun = &v
	return s
}

type ModifyDiskSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId    *string `json:"TaskId" xml:"TaskId" require:"true"`
}

func (s ModifyDiskSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponse) SetRequestId(v string) *ModifyDiskSpecResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyDiskSpecResponse) SetTaskId(v string) *ModifyDiskSpecResponse {
	s.TaskId = &v
	return s
}

type ModifyAutoProvisioningGroupRequest struct {
	OwnerId                          *int64   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount             *string  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                  *int64   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                     *string  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                         *string  `json:"RegionId" xml:"RegionId" require:"true"`
	AutoProvisioningGroupId          *string  `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId"`
	ExcessCapacityTerminationPolicy  *string  `json:"ExcessCapacityTerminationPolicy" xml:"ExcessCapacityTerminationPolicy"`
	DefaultTargetCapacityType        *string  `json:"DefaultTargetCapacityType" xml:"DefaultTargetCapacityType"`
	TerminateInstancesWithExpiration *bool    `json:"TerminateInstancesWithExpiration" xml:"TerminateInstancesWithExpiration"`
	MaxSpotPrice                     *float32 `json:"MaxSpotPrice" xml:"MaxSpotPrice"`
	TotalTargetCapacity              *string  `json:"TotalTargetCapacity" xml:"TotalTargetCapacity"`
	PayAsYouGoTargetCapacity         *string  `json:"PayAsYouGoTargetCapacity" xml:"PayAsYouGoTargetCapacity"`
	SpotTargetCapacity               *string  `json:"SpotTargetCapacity" xml:"SpotTargetCapacity"`
	AutoProvisioningGroupName        *string  `json:"AutoProvisioningGroupName" xml:"AutoProvisioningGroupName"`
}

func (s ModifyAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoProvisioningGroupRequest) SetOwnerId(v int64) *ModifyAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *ModifyAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *ModifyAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetOwnerAccount(v string) *ModifyAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetRegionId(v string) *ModifyAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetAutoProvisioningGroupId(v string) *ModifyAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetExcessCapacityTerminationPolicy(v string) *ModifyAutoProvisioningGroupRequest {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetDefaultTargetCapacityType(v string) *ModifyAutoProvisioningGroupRequest {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetTerminateInstancesWithExpiration(v bool) *ModifyAutoProvisioningGroupRequest {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetMaxSpotPrice(v float32) *ModifyAutoProvisioningGroupRequest {
	s.MaxSpotPrice = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetTotalTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.TotalTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetPayAsYouGoTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetSpotTargetCapacity(v string) *ModifyAutoProvisioningGroupRequest {
	s.SpotTargetCapacity = &v
	return s
}

func (s *ModifyAutoProvisioningGroupRequest) SetAutoProvisioningGroupName(v string) *ModifyAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

type ModifyAutoProvisioningGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoProvisioningGroupResponse) SetRequestId(v string) *ModifyAutoProvisioningGroupResponse {
	s.RequestId = &v
	return s
}

type DescribeAutoProvisioningGroupsRequest struct {
	OwnerId                     *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                    *string   `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber                  *int      `json:"PageNumber" xml:"PageNumber"`
	PageSize                    *int      `json:"PageSize" xml:"PageSize"`
	AutoProvisioningGroupName   *string   `json:"AutoProvisioningGroupName" xml:"AutoProvisioningGroupName"`
	AutoProvisioningGroupId     []*string `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" type:"Repeated"`
	AutoProvisioningGroupStatus []*string `json:"AutoProvisioningGroupStatus" xml:"AutoProvisioningGroupStatus" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetPageNumber(v int) *DescribeAutoProvisioningGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetPageSize(v int) *DescribeAutoProvisioningGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupName(v string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupId(v []*string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupId = v
	return s
}

func (s *DescribeAutoProvisioningGroupsRequest) SetAutoProvisioningGroupStatus(v []*string) *DescribeAutoProvisioningGroupsRequest {
	s.AutoProvisioningGroupStatus = v
	return s
}

type DescribeAutoProvisioningGroupsResponse struct {
	RequestId              *string                                                       `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount             *int                                                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber             *int                                                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize               *int                                                          `json:"PageSize" xml:"PageSize" require:"true"`
	AutoProvisioningGroups *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups `json:"AutoProvisioningGroups" xml:"AutoProvisioningGroups" require:"true" type:"Struct"`
}

func (s DescribeAutoProvisioningGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponse) SetRequestId(v string) *DescribeAutoProvisioningGroupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponse) SetTotalCount(v int) *DescribeAutoProvisioningGroupsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponse) SetPageNumber(v int) *DescribeAutoProvisioningGroupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponse) SetPageSize(v int) *DescribeAutoProvisioningGroupsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponse) SetAutoProvisioningGroups(v *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups) *DescribeAutoProvisioningGroupsResponse {
	s.AutoProvisioningGroups = v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups struct {
	AutoProvisioningGroup []*DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup `json:"AutoProvisioningGroup" xml:"AutoProvisioningGroup" require:"true" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups) SetAutoProvisioningGroup(v []*DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroups {
	s.AutoProvisioningGroup = v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup struct {
	AutoProvisioningGroupId          *string                                                                                                       `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" require:"true"`
	AutoProvisioningGroupName        *string                                                                                                       `json:"AutoProvisioningGroupName" xml:"AutoProvisioningGroupName" require:"true"`
	AutoProvisioningGroupType        *string                                                                                                       `json:"AutoProvisioningGroupType" xml:"AutoProvisioningGroupType" require:"true"`
	Status                           *string                                                                                                       `json:"Status" xml:"Status" require:"true"`
	State                            *string                                                                                                       `json:"State" xml:"State" require:"true"`
	RegionId                         *string                                                                                                       `json:"RegionId" xml:"RegionId" require:"true"`
	ValidFrom                        *string                                                                                                       `json:"ValidFrom" xml:"ValidFrom" require:"true"`
	ValidUntil                       *string                                                                                                       `json:"ValidUntil" xml:"ValidUntil" require:"true"`
	ExcessCapacityTerminationPolicy  *string                                                                                                       `json:"ExcessCapacityTerminationPolicy" xml:"ExcessCapacityTerminationPolicy" require:"true"`
	MaxSpotPrice                     *float32                                                                                                      `json:"MaxSpotPrice" xml:"MaxSpotPrice" require:"true"`
	LaunchTemplateId                 *string                                                                                                       `json:"LaunchTemplateId" xml:"LaunchTemplateId" require:"true"`
	LaunchTemplateVersion            *string                                                                                                       `json:"LaunchTemplateVersion" xml:"LaunchTemplateVersion" require:"true"`
	TerminateInstances               *bool                                                                                                         `json:"TerminateInstances" xml:"TerminateInstances" require:"true"`
	TerminateInstancesWithExpiration *bool                                                                                                         `json:"TerminateInstancesWithExpiration" xml:"TerminateInstancesWithExpiration" require:"true"`
	CreationTime                     *string                                                                                                       `json:"CreationTime" xml:"CreationTime" require:"true"`
	LaunchTemplateConfigs            *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs       `json:"LaunchTemplateConfigs" xml:"LaunchTemplateConfigs" require:"true" type:"Struct"`
	SpotOptions                      *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions                 `json:"SpotOptions" xml:"SpotOptions" require:"true" type:"Struct"`
	PayAsYouGoOptions                *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions           `json:"PayAsYouGoOptions" xml:"PayAsYouGoOptions" require:"true" type:"Struct"`
	TargetCapacitySpecification      *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification `json:"TargetCapacitySpecification" xml:"TargetCapacitySpecification" require:"true" type:"Struct"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetAutoProvisioningGroupName(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetAutoProvisioningGroupType(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.AutoProvisioningGroupType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetStatus(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetState(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.State = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetRegionId(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetValidFrom(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.ValidFrom = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetValidUntil(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.ValidUntil = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetExcessCapacityTerminationPolicy(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetMaxSpotPrice(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.MaxSpotPrice = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetLaunchTemplateId(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetLaunchTemplateVersion(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetTerminateInstances(v bool) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.TerminateInstances = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetTerminateInstancesWithExpiration(v bool) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetCreationTime(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetLaunchTemplateConfigs(v *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.LaunchTemplateConfigs = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetSpotOptions(v *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.SpotOptions = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetPayAsYouGoOptions(v *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.PayAsYouGoOptions = v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup) SetTargetCapacitySpecification(v *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroup {
	s.TargetCapacitySpecification = v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs struct {
	LaunchTemplateConfig []*DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig `json:"LaunchTemplateConfig" xml:"LaunchTemplateConfig" require:"true" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs) SetLaunchTemplateConfig(v []*DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigs {
	s.LaunchTemplateConfig = v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig struct {
	InstanceType     *string  `json:"InstanceType" xml:"InstanceType" require:"true"`
	MaxPrice         *float32 `json:"MaxPrice" xml:"MaxPrice" require:"true"`
	VSwitchId        *string  `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	WeightedCapacity *float32 `json:"WeightedCapacity" xml:"WeightedCapacity" require:"true"`
	Priority         *float32 `json:"Priority" xml:"Priority" require:"true"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) SetInstanceType(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig {
	s.InstanceType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) SetMaxPrice(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig {
	s.MaxPrice = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) SetVSwitchId(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig {
	s.VSwitchId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) SetWeightedCapacity(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig {
	s.WeightedCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig) SetPriority(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupLaunchTemplateConfigsLaunchTemplateConfig {
	s.Priority = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions struct {
	AllocationStrategy           *string `json:"AllocationStrategy" xml:"AllocationStrategy" require:"true"`
	InstanceInterruptionBehavior *string `json:"InstanceInterruptionBehavior" xml:"InstanceInterruptionBehavior" require:"true"`
	InstancePoolsToUseCount      *int    `json:"InstancePoolsToUseCount" xml:"InstancePoolsToUseCount" require:"true"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) SetAllocationStrategy(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions {
	s.AllocationStrategy = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) SetInstanceInterruptionBehavior(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions {
	s.InstanceInterruptionBehavior = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions) SetInstancePoolsToUseCount(v int) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupSpotOptions {
	s.InstancePoolsToUseCount = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions struct {
	AllocationStrategy *string `json:"AllocationStrategy" xml:"AllocationStrategy" require:"true"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions) SetAllocationStrategy(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupPayAsYouGoOptions {
	s.AllocationStrategy = &v
	return s
}

type DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification struct {
	TotalTargetCapacity       *float32 `json:"TotalTargetCapacity" xml:"TotalTargetCapacity" require:"true"`
	PayAsYouGoTargetCapacity  *float32 `json:"PayAsYouGoTargetCapacity" xml:"PayAsYouGoTargetCapacity" require:"true"`
	SpotTargetCapacity        *float32 `json:"SpotTargetCapacity" xml:"SpotTargetCapacity" require:"true"`
	DefaultTargetCapacityType *string  `json:"DefaultTargetCapacityType" xml:"DefaultTargetCapacityType" require:"true"`
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) SetTotalTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification {
	s.TotalTargetCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) SetPayAsYouGoTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) SetSpotTargetCapacity(v float32) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification {
	s.SpotTargetCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification) SetDefaultTargetCapacityType(v string) *DescribeAutoProvisioningGroupsResponseAutoProvisioningGroupsAutoProvisioningGroupTargetCapacitySpecification {
	s.DefaultTargetCapacityType = &v
	return s
}

type DescribeAutoProvisioningGroupInstancesRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber              *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize                *int    `json:"PageSize" xml:"PageSize"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" require:"true"`
}

func (s DescribeAutoProvisioningGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetPageNumber(v int) *DescribeAutoProvisioningGroupInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetPageSize(v int) *DescribeAutoProvisioningGroupInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesRequest) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupInstancesRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponse struct {
	RequestId  *string                                                  `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                                     `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                                     `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                                     `json:"PageSize" xml:"PageSize" require:"true"`
	Instances  *DescribeAutoProvisioningGroupInstancesResponseInstances `json:"Instances" xml:"Instances" require:"true" type:"Struct"`
}

func (s DescribeAutoProvisioningGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetRequestId(v string) *DescribeAutoProvisioningGroupInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetTotalCount(v int) *DescribeAutoProvisioningGroupInstancesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetPageNumber(v int) *DescribeAutoProvisioningGroupInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetPageSize(v int) *DescribeAutoProvisioningGroupInstancesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponse) SetInstances(v *DescribeAutoProvisioningGroupInstancesResponseInstances) *DescribeAutoProvisioningGroupInstancesResponse {
	s.Instances = v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponseInstances struct {
	Instance []*DescribeAutoProvisioningGroupInstancesResponseInstancesInstance `json:"Instance" xml:"Instance" require:"true" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupInstancesResponseInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponseInstances) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstances) SetInstance(v []*DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) *DescribeAutoProvisioningGroupInstancesResponseInstances {
	s.Instance = v
	return s
}

type DescribeAutoProvisioningGroupInstancesResponseInstancesInstance struct {
	InstanceId   *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Status       *string `json:"Status" xml:"Status" require:"true"`
	RegionId     *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId       *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	CPU          *int    `json:"CPU" xml:"CPU" require:"true"`
	Memory       *int    `json:"Memory" xml:"Memory" require:"true"`
	InstanceType *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	IsSpot       *bool   `json:"IsSpot" xml:"IsSpot" require:"true"`
	IoOptimized  *bool   `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	NetworkType  *string `json:"NetworkType" xml:"NetworkType" require:"true"`
	OsType       *string `json:"OsType" xml:"OsType" require:"true"`
	CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
}

func (s DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetInstanceId(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetStatus(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetRegionId(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetZoneId(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetCPU(v int) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.CPU = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetMemory(v int) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.Memory = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetInstanceType(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.InstanceType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetIsSpot(v bool) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.IsSpot = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetIoOptimized(v bool) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.IoOptimized = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetNetworkType(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.NetworkType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetOsType(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.OsType = &v
	return s
}

func (s *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance) SetCreationTime(v string) *DescribeAutoProvisioningGroupInstancesResponseInstancesInstance {
	s.CreationTime = &v
	return s
}

type DeleteAutoProvisioningGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" require:"true"`
	TerminateInstances      *bool   `json:"TerminateInstances" xml:"TerminateInstances" require:"true"`
}

func (s DeleteAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAutoProvisioningGroupRequest) SetOwnerId(v int64) *DeleteAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *DeleteAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *DeleteAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetOwnerAccount(v string) *DeleteAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetRegionId(v string) *DeleteAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetAutoProvisioningGroupId(v string) *DeleteAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DeleteAutoProvisioningGroupRequest) SetTerminateInstances(v bool) *DeleteAutoProvisioningGroupRequest {
	s.TerminateInstances = &v
	return s
}

type DeleteAutoProvisioningGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAutoProvisioningGroupResponse) SetRequestId(v string) *DeleteAutoProvisioningGroupResponse {
	s.RequestId = &v
	return s
}

type CreateAutoProvisioningGroupRequest struct {
	OwnerId                          *int64                                                    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount             *string                                                   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                  *int64                                                    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                     *string                                                   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                         *string                                                   `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceGroupId                  *string                                                   `json:"ResourceGroupId" xml:"ResourceGroupId"`
	AutoProvisioningGroupName        *string                                                   `json:"AutoProvisioningGroupName" xml:"AutoProvisioningGroupName"`
	AutoProvisioningGroupType        *string                                                   `json:"AutoProvisioningGroupType" xml:"AutoProvisioningGroupType"`
	SpotAllocationStrategy           *string                                                   `json:"SpotAllocationStrategy" xml:"SpotAllocationStrategy"`
	SpotInstanceInterruptionBehavior *string                                                   `json:"SpotInstanceInterruptionBehavior" xml:"SpotInstanceInterruptionBehavior"`
	SpotInstancePoolsToUseCount      *int                                                      `json:"SpotInstancePoolsToUseCount" xml:"SpotInstancePoolsToUseCount"`
	PayAsYouGoAllocationStrategy     *string                                                   `json:"PayAsYouGoAllocationStrategy" xml:"PayAsYouGoAllocationStrategy"`
	ExcessCapacityTerminationPolicy  *string                                                   `json:"ExcessCapacityTerminationPolicy" xml:"ExcessCapacityTerminationPolicy"`
	ValidFrom                        *string                                                   `json:"ValidFrom" xml:"ValidFrom"`
	ValidUntil                       *string                                                   `json:"ValidUntil" xml:"ValidUntil"`
	TerminateInstancesWithExpiration *bool                                                     `json:"TerminateInstancesWithExpiration" xml:"TerminateInstancesWithExpiration"`
	TerminateInstances               *bool                                                     `json:"TerminateInstances" xml:"TerminateInstances"`
	MaxSpotPrice                     *float32                                                  `json:"MaxSpotPrice" xml:"MaxSpotPrice"`
	TotalTargetCapacity              *string                                                   `json:"TotalTargetCapacity" xml:"TotalTargetCapacity" require:"true"`
	PayAsYouGoTargetCapacity         *string                                                   `json:"PayAsYouGoTargetCapacity" xml:"PayAsYouGoTargetCapacity"`
	SpotTargetCapacity               *string                                                   `json:"SpotTargetCapacity" xml:"SpotTargetCapacity"`
	DefaultTargetCapacityType        *string                                                   `json:"DefaultTargetCapacityType" xml:"DefaultTargetCapacityType"`
	LaunchTemplateId                 *string                                                   `json:"LaunchTemplateId" xml:"LaunchTemplateId" require:"true"`
	LaunchTemplateVersion            *string                                                   `json:"LaunchTemplateVersion" xml:"LaunchTemplateVersion"`
	LaunchTemplateConfig             []*CreateAutoProvisioningGroupRequestLaunchTemplateConfig `json:"LaunchTemplateConfig" xml:"LaunchTemplateConfig" type:"Repeated"`
	Description                      *string                                                   `json:"Description" xml:"Description"`
}

func (s CreateAutoProvisioningGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequest) SetOwnerId(v int64) *CreateAutoProvisioningGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceOwnerAccount(v string) *CreateAutoProvisioningGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceOwnerId(v int64) *CreateAutoProvisioningGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetOwnerAccount(v string) *CreateAutoProvisioningGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetRegionId(v string) *CreateAutoProvisioningGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetResourceGroupId(v string) *CreateAutoProvisioningGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetAutoProvisioningGroupName(v string) *CreateAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupName = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetAutoProvisioningGroupType(v string) *CreateAutoProvisioningGroupRequest {
	s.AutoProvisioningGroupType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotAllocationStrategy(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotAllocationStrategy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotInstanceInterruptionBehavior(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotInstanceInterruptionBehavior = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotInstancePoolsToUseCount(v int) *CreateAutoProvisioningGroupRequest {
	s.SpotInstancePoolsToUseCount = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetPayAsYouGoAllocationStrategy(v string) *CreateAutoProvisioningGroupRequest {
	s.PayAsYouGoAllocationStrategy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetExcessCapacityTerminationPolicy(v string) *CreateAutoProvisioningGroupRequest {
	s.ExcessCapacityTerminationPolicy = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetValidFrom(v string) *CreateAutoProvisioningGroupRequest {
	s.ValidFrom = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetValidUntil(v string) *CreateAutoProvisioningGroupRequest {
	s.ValidUntil = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTerminateInstancesWithExpiration(v bool) *CreateAutoProvisioningGroupRequest {
	s.TerminateInstancesWithExpiration = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTerminateInstances(v bool) *CreateAutoProvisioningGroupRequest {
	s.TerminateInstances = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetMaxSpotPrice(v float32) *CreateAutoProvisioningGroupRequest {
	s.MaxSpotPrice = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetTotalTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.TotalTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetPayAsYouGoTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.PayAsYouGoTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetSpotTargetCapacity(v string) *CreateAutoProvisioningGroupRequest {
	s.SpotTargetCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetDefaultTargetCapacityType(v string) *CreateAutoProvisioningGroupRequest {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateId(v string) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateVersion(v string) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetLaunchTemplateConfig(v []*CreateAutoProvisioningGroupRequestLaunchTemplateConfig) *CreateAutoProvisioningGroupRequest {
	s.LaunchTemplateConfig = v
	return s
}

func (s *CreateAutoProvisioningGroupRequest) SetDescription(v string) *CreateAutoProvisioningGroupRequest {
	s.Description = &v
	return s
}

type CreateAutoProvisioningGroupRequestLaunchTemplateConfig struct {
	InstanceType     *string  `json:"InstanceType" xml:"InstanceType" require:"true"`
	MaxPrice         *float64 `json:"MaxPrice" xml:"MaxPrice" require:"true"`
	VSwitchId        *string  `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	WeightedCapacity *float64 `json:"WeightedCapacity" xml:"WeightedCapacity" require:"true"`
	Priority         *int     `json:"Priority" xml:"Priority" require:"true"`
}

func (s CreateAutoProvisioningGroupRequestLaunchTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupRequestLaunchTemplateConfig) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetInstanceType(v string) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.InstanceType = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetMaxPrice(v float64) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.MaxPrice = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetVSwitchId(v string) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.VSwitchId = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetWeightedCapacity(v float64) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.WeightedCapacity = &v
	return s
}

func (s *CreateAutoProvisioningGroupRequestLaunchTemplateConfig) SetPriority(v int) *CreateAutoProvisioningGroupRequestLaunchTemplateConfig {
	s.Priority = &v
	return s
}

type CreateAutoProvisioningGroupResponse struct {
	RequestId               *string `json:"RequestId" xml:"RequestId" require:"true"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" require:"true"`
}

func (s CreateAutoProvisioningGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoProvisioningGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAutoProvisioningGroupResponse) SetRequestId(v string) *CreateAutoProvisioningGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateAutoProvisioningGroupResponse) SetAutoProvisioningGroupId(v string) *CreateAutoProvisioningGroupResponse {
	s.AutoProvisioningGroupId = &v
	return s
}

type DescribeAutoProvisioningGroupHistoryRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber              *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize                *int    `json:"PageSize" xml:"PageSize"`
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId" xml:"AutoProvisioningGroupId" require:"true"`
	StartTime               *string `json:"StartTime" xml:"StartTime"`
	EndTime                 *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeAutoProvisioningGroupHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetPageNumber(v int) *DescribeAutoProvisioningGroupHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetPageSize(v int) *DescribeAutoProvisioningGroupHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetStartTime(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryRequest) SetEndTime(v string) *DescribeAutoProvisioningGroupHistoryRequest {
	s.EndTime = &v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponse struct {
	RequestId                      *string                                                                     `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount                     *int                                                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber                     *int                                                                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize                       *int                                                                        `json:"PageSize" xml:"PageSize" require:"true"`
	AutoProvisioningGroupHistories *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories `json:"AutoProvisioningGroupHistories" xml:"AutoProvisioningGroupHistories" require:"true" type:"Struct"`
}

func (s DescribeAutoProvisioningGroupHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetRequestId(v string) *DescribeAutoProvisioningGroupHistoryResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetTotalCount(v int) *DescribeAutoProvisioningGroupHistoryResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetPageNumber(v int) *DescribeAutoProvisioningGroupHistoryResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetPageSize(v int) *DescribeAutoProvisioningGroupHistoryResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponse) SetAutoProvisioningGroupHistories(v *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories) *DescribeAutoProvisioningGroupHistoryResponse {
	s.AutoProvisioningGroupHistories = v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories struct {
	AutoProvisioningGroupHistory []*DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory `json:"AutoProvisioningGroupHistory" xml:"AutoProvisioningGroupHistory" require:"true" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories) SetAutoProvisioningGroupHistory(v []*DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistories {
	s.AutoProvisioningGroupHistory = v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory struct {
	TaskId          *string                                                                                                                `json:"TaskId" xml:"TaskId" require:"true"`
	Status          *string                                                                                                                `json:"Status" xml:"Status" require:"true"`
	LastEventTime   *string                                                                                                                `json:"LastEventTime" xml:"LastEventTime" require:"true"`
	StartTime       *string                                                                                                                `json:"StartTime" xml:"StartTime" require:"true"`
	ActivityDetails *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails `json:"ActivityDetails" xml:"ActivityDetails" require:"true" type:"Struct"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) SetTaskId(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory {
	s.TaskId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) SetStatus(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory {
	s.Status = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) SetLastEventTime(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory {
	s.LastEventTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) SetStartTime(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory {
	s.StartTime = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory) SetActivityDetails(v *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistory {
	s.ActivityDetails = v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails struct {
	ActivityDetail []*DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail `json:"ActivityDetail" xml:"ActivityDetail" require:"true" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails) SetActivityDetail(v []*DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetails {
	s.ActivityDetail = v
	return s
}

type DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail struct {
	Detail *string `json:"Detail" xml:"Detail" require:"true"`
	Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail) SetDetail(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail {
	s.Detail = &v
	return s
}

func (s *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail) SetStatus(v string) *DescribeAutoProvisioningGroupHistoryResponseAutoProvisioningGroupHistoriesAutoProvisioningGroupHistoryActivityDetailsActivityDetail {
	s.Status = &v
	return s
}

type ReportInstancesStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	DiskId               []*string `json:"DiskId" xml:"DiskId" type:"Repeated"`
	Device               []*string `json:"Device" xml:"Device" type:"Repeated"`
	Reason               *string   `json:"Reason" xml:"Reason" require:"true"`
	Description          *string   `json:"Description" xml:"Description" require:"true"`
	StartTime            *string   `json:"StartTime" xml:"StartTime"`
	EndTime              *string   `json:"EndTime" xml:"EndTime"`
}

func (s ReportInstancesStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportInstancesStatusRequest) GoString() string {
	return s.String()
}

func (s *ReportInstancesStatusRequest) SetOwnerId(v int64) *ReportInstancesStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetResourceOwnerAccount(v string) *ReportInstancesStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetResourceOwnerId(v int64) *ReportInstancesStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetOwnerAccount(v string) *ReportInstancesStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetRegionId(v string) *ReportInstancesStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetInstanceId(v []*string) *ReportInstancesStatusRequest {
	s.InstanceId = v
	return s
}

func (s *ReportInstancesStatusRequest) SetDiskId(v []*string) *ReportInstancesStatusRequest {
	s.DiskId = v
	return s
}

func (s *ReportInstancesStatusRequest) SetDevice(v []*string) *ReportInstancesStatusRequest {
	s.Device = v
	return s
}

func (s *ReportInstancesStatusRequest) SetReason(v string) *ReportInstancesStatusRequest {
	s.Reason = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetDescription(v string) *ReportInstancesStatusRequest {
	s.Description = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetStartTime(v string) *ReportInstancesStatusRequest {
	s.StartTime = &v
	return s
}

func (s *ReportInstancesStatusRequest) SetEndTime(v string) *ReportInstancesStatusRequest {
	s.EndTime = &v
	return s
}

type ReportInstancesStatusResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReportInstancesStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportInstancesStatusResponse) GoString() string {
	return s.String()
}

func (s *ReportInstancesStatusResponse) SetRequestId(v string) *ReportInstancesStatusResponse {
	s.RequestId = &v
	return s
}

type ModifyReservedInstanceAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ReservedInstanceId   *string `json:"ReservedInstanceId" xml:"ReservedInstanceId" require:"true"`
	ReservedInstanceName *string `json:"ReservedInstanceName" xml:"ReservedInstanceName"`
	Description          *string `json:"Description" xml:"Description"`
}

func (s ModifyReservedInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetRegionId(v string) *ModifyReservedInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceId(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceName(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetDescription(v string) *ModifyReservedInstanceAttributeRequest {
	s.Description = &v
	return s
}

type ModifyReservedInstanceAttributeResponse struct {
	RequestId      *string `json:"RequestId" xml:"RequestId" require:"true"`
	Code           *string `json:"Code" xml:"Code" require:"true"`
	Message        *string `json:"Message" xml:"Message" require:"true"`
	HttpStatusCode *int    `json:"HttpStatusCode" xml:"HttpStatusCode" require:"true"`
}

func (s ModifyReservedInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeResponse) SetRequestId(v string) *ModifyReservedInstanceAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetCode(v string) *ModifyReservedInstanceAttributeResponse {
	s.Code = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetMessage(v string) *ModifyReservedInstanceAttributeResponse {
	s.Message = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetHttpStatusCode(v int) *ModifyReservedInstanceAttributeResponse {
	s.HttpStatusCode = &v
	return s
}

type PurchaseReservedInstancesOfferingRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceGroupId      *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId"`
	ReservedInstanceName *string `json:"ReservedInstanceName" xml:"ReservedInstanceName"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	Scope                *string `json:"Scope" xml:"Scope"`
	InstanceAmount       *int    `json:"InstanceAmount" xml:"InstanceAmount"`
	OfferingType         *string `json:"OfferingType" xml:"OfferingType"`
	Description          *string `json:"Description" xml:"Description"`
	Platform             *string `json:"Platform" xml:"Platform"`
	Period               *int    `json:"Period" xml:"Period"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
}

func (s PurchaseReservedInstancesOfferingRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingRequest) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetRegionId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceGroupId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetZoneId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ZoneId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetReservedInstanceName(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetScope(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Scope = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceAmount(v int) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceAmount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOfferingType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OfferingType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetDescription(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Description = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPlatform(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Platform = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriod(v int) *PurchaseReservedInstancesOfferingRequest {
	s.Period = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriodUnit(v string) *PurchaseReservedInstancesOfferingRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetClientToken(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ClientToken = &v
	return s
}

type PurchaseReservedInstancesOfferingResponse struct {
	RequestId              *string                                                          `json:"RequestId" xml:"RequestId" require:"true"`
	ReservedInstanceIdSets *PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets `json:"ReservedInstanceIdSets" xml:"ReservedInstanceIdSets" require:"true" type:"Struct"`
}

func (s PurchaseReservedInstancesOfferingResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponse) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponse) SetRequestId(v string) *PurchaseReservedInstancesOfferingResponse {
	s.RequestId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponse) SetReservedInstanceIdSets(v *PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets) *PurchaseReservedInstancesOfferingResponse {
	s.ReservedInstanceIdSets = v
	return s
}

type PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets struct {
	ReservedInstanceId []*string `json:"ReservedInstanceId" xml:"ReservedInstanceId" require:"true" type:"Repeated"`
}

func (s PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets) SetReservedInstanceId(v []*string) *PurchaseReservedInstancesOfferingResponseReservedInstanceIdSets {
	s.ReservedInstanceId = v
	return s
}

type ModifyReservedInstancesRequest struct {
	OwnerId              *int64                                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                        `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                        `json:"RegionId" xml:"RegionId" require:"true"`
	ReservedInstanceId   []*string                                      `json:"ReservedInstanceId" xml:"ReservedInstanceId" require:"true" type:"Repeated"`
	Configuration        []*ModifyReservedInstancesRequestConfiguration `json:"Configuration" xml:"Configuration" type:"Repeated"`
}

func (s ModifyReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequest) SetOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetRegionId(v string) *ModifyReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetReservedInstanceId(v []*string) *ModifyReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *ModifyReservedInstancesRequest) SetConfiguration(v []*ModifyReservedInstancesRequestConfiguration) *ModifyReservedInstancesRequest {
	s.Configuration = v
	return s
}

type ModifyReservedInstancesRequestConfiguration struct {
	ZoneId               *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	ReservedInstanceName *string `json:"ReservedInstanceName" xml:"ReservedInstanceName" require:"true"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	Scope                *string `json:"Scope" xml:"Scope" require:"true"`
	InstanceAmount       *int    `json:"InstanceAmount" xml:"InstanceAmount" require:"true"`
}

func (s ModifyReservedInstancesRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequestConfiguration) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequestConfiguration) SetZoneId(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ZoneId = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetReservedInstanceName(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceType(v string) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceType = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetScope(v string) *ModifyReservedInstancesRequestConfiguration {
	s.Scope = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceAmount(v int) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceAmount = &v
	return s
}

type ModifyReservedInstancesResponse struct {
	RequestId              *string                                                `json:"RequestId" xml:"RequestId" require:"true"`
	ReservedInstanceIdSets *ModifyReservedInstancesResponseReservedInstanceIdSets `json:"ReservedInstanceIdSets" xml:"ReservedInstanceIdSets" require:"true" type:"Struct"`
}

func (s ModifyReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponse) SetRequestId(v string) *ModifyReservedInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyReservedInstancesResponse) SetReservedInstanceIdSets(v *ModifyReservedInstancesResponseReservedInstanceIdSets) *ModifyReservedInstancesResponse {
	s.ReservedInstanceIdSets = v
	return s
}

type ModifyReservedInstancesResponseReservedInstanceIdSets struct {
	ReservedInstanceId []*string `json:"ReservedInstanceId" xml:"ReservedInstanceId" require:"true" type:"Repeated"`
}

func (s ModifyReservedInstancesResponseReservedInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponseReservedInstanceIdSets) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponseReservedInstanceIdSets) SetReservedInstanceId(v []*string) *ModifyReservedInstancesResponseReservedInstanceIdSets {
	s.ReservedInstanceId = v
	return s
}

type DescribeReservedInstancesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int      `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int      `json:"PageSize" xml:"PageSize"`
	ZoneId               *string   `json:"ZoneId" xml:"ZoneId"`
	ReservedInstanceId   []*string `json:"ReservedInstanceId" xml:"ReservedInstanceId" type:"Repeated"`
	ReservedInstanceName *string   `json:"ReservedInstanceName" xml:"ReservedInstanceName"`
	Status               []*string `json:"Status" xml:"Status" type:"Repeated"`
	LockReason           *string   `json:"LockReason" xml:"LockReason"`
	InstanceType         *string   `json:"InstanceType" xml:"InstanceType"`
	InstanceTypeFamily   *string   `json:"InstanceTypeFamily" xml:"InstanceTypeFamily"`
	Scope                *string   `json:"Scope" xml:"Scope"`
	OfferingType         *string   `json:"OfferingType" xml:"OfferingType"`
	AllocationType       *string   `json:"AllocationType" xml:"AllocationType"`
}

func (s DescribeReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesRequest) SetOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetRegionId(v string) *DescribeReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageNumber(v int) *DescribeReservedInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageSize(v int) *DescribeReservedInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetZoneId(v string) *DescribeReservedInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceId(v []*string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceName(v string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetStatus(v []*string) *DescribeReservedInstancesRequest {
	s.Status = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetLockReason(v string) *DescribeReservedInstancesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceType(v string) *DescribeReservedInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceTypeFamily(v string) *DescribeReservedInstancesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetScope(v string) *DescribeReservedInstancesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOfferingType(v string) *DescribeReservedInstancesRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetAllocationType(v string) *DescribeReservedInstancesRequest {
	s.AllocationType = &v
	return s
}

type DescribeReservedInstancesResponse struct {
	RequestId         *string                                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount        *int                                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber        *int                                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize          *int                                                `json:"PageSize" xml:"PageSize" require:"true"`
	ReservedInstances *DescribeReservedInstancesResponseReservedInstances `json:"ReservedInstances" xml:"ReservedInstances" require:"true" type:"Struct"`
}

func (s DescribeReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponse) SetRequestId(v string) *DescribeReservedInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedInstancesResponse) SetTotalCount(v int) *DescribeReservedInstancesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeReservedInstancesResponse) SetPageNumber(v int) *DescribeReservedInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesResponse) SetPageSize(v int) *DescribeReservedInstancesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesResponse) SetReservedInstances(v *DescribeReservedInstancesResponseReservedInstances) *DescribeReservedInstancesResponse {
	s.ReservedInstances = v
	return s
}

type DescribeReservedInstancesResponseReservedInstances struct {
	ReservedInstance []*DescribeReservedInstancesResponseReservedInstancesReservedInstance `json:"ReservedInstance" xml:"ReservedInstance" require:"true" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseReservedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseReservedInstances) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseReservedInstances) SetReservedInstance(v []*DescribeReservedInstancesResponseReservedInstancesReservedInstance) *DescribeReservedInstancesResponseReservedInstances {
	s.ReservedInstance = v
	return s
}

type DescribeReservedInstancesResponseReservedInstancesReservedInstance struct {
	ReservedInstanceId   *string                                                                           `json:"ReservedInstanceId" xml:"ReservedInstanceId" require:"true"`
	RegionId             *string                                                                           `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string                                                                           `json:"ZoneId" xml:"ZoneId" require:"true"`
	ReservedInstanceName *string                                                                           `json:"ReservedInstanceName" xml:"ReservedInstanceName" require:"true"`
	Description          *string                                                                           `json:"Description" xml:"Description" require:"true"`
	InstanceType         *string                                                                           `json:"InstanceType" xml:"InstanceType" require:"true"`
	Scope                *string                                                                           `json:"Scope" xml:"Scope" require:"true"`
	OfferingType         *string                                                                           `json:"OfferingType" xml:"OfferingType" require:"true"`
	Platform             *string                                                                           `json:"Platform" xml:"Platform" require:"true"`
	InstanceAmount       *int                                                                              `json:"InstanceAmount" xml:"InstanceAmount" require:"true"`
	Status               *string                                                                           `json:"Status" xml:"Status" require:"true"`
	CreationTime         *string                                                                           `json:"CreationTime" xml:"CreationTime" require:"true"`
	ExpiredTime          *string                                                                           `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	StartTime            *string                                                                           `json:"StartTime" xml:"StartTime" require:"true"`
	ResourceGroupId      *string                                                                           `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	AllocationStatus     *string                                                                           `json:"AllocationStatus" xml:"AllocationStatus" require:"true"`
	OperationLocks       *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstance) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetReservedInstanceId(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetRegionId(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetZoneId(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetReservedInstanceName(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetDescription(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.Description = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetInstanceType(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetScope(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetOfferingType(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetPlatform(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.Platform = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetInstanceAmount(v int) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetStatus(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.Status = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetCreationTime(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetExpiredTime(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetStartTime(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetResourceGroupId(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetAllocationStatus(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstance) SetOperationLocks(v *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks) *DescribeReservedInstancesResponseReservedInstancesReservedInstance {
	s.OperationLocks = v
	return s
}

type DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks struct {
	OperationLock []*DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock `json:"OperationLock" xml:"OperationLock" require:"true" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks) SetOperationLock(v []*DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock) *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocks {
	s.OperationLock = v
	return s
}

type DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock) SetLockReason(v string) *DescribeReservedInstancesResponseReservedInstancesReservedInstanceOperationLocksOperationLock {
	s.LockReason = &v
	return s
}

type DescribeDemandsRequest struct {
	OwnerId              *int64                       `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                      `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                       `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                      `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                      `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*DescribeDemandsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	PageNumber           *int                         `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                         `json:"PageSize" xml:"PageSize"`
	DryRun               *bool                        `json:"DryRun" xml:"DryRun"`
	ZoneId               *string                      `json:"ZoneId" xml:"ZoneId"`
	DemandId             *string                      `json:"DemandId" xml:"DemandId"`
	InstanceTypeFamily   *string                      `json:"InstanceTypeFamily" xml:"InstanceTypeFamily"`
	InstanceType         *string                      `json:"InstanceType" xml:"InstanceType"`
	InstanceChargeType   *string                      `json:"InstanceChargeType" xml:"InstanceChargeType"`
	DemandType           *string                      `json:"DemandType" xml:"DemandType"`
	DemandStatus         []*string                    `json:"DemandStatus" xml:"DemandStatus" type:"Repeated"`
}

func (s DescribeDemandsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDemandsRequest) SetOwnerId(v int64) *DescribeDemandsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDemandsRequest) SetResourceOwnerAccount(v string) *DescribeDemandsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDemandsRequest) SetResourceOwnerId(v int64) *DescribeDemandsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDemandsRequest) SetOwnerAccount(v string) *DescribeDemandsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDemandsRequest) SetRegionId(v string) *DescribeDemandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDemandsRequest) SetTag(v []*DescribeDemandsRequestTag) *DescribeDemandsRequest {
	s.Tag = v
	return s
}

func (s *DescribeDemandsRequest) SetPageNumber(v int) *DescribeDemandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDemandsRequest) SetPageSize(v int) *DescribeDemandsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDemandsRequest) SetDryRun(v bool) *DescribeDemandsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeDemandsRequest) SetZoneId(v string) *DescribeDemandsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandId(v string) *DescribeDemandsRequest {
	s.DemandId = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceTypeFamily(v string) *DescribeDemandsRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceType(v string) *DescribeDemandsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeDemandsRequest) SetInstanceChargeType(v string) *DescribeDemandsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandType(v string) *DescribeDemandsRequest {
	s.DemandType = &v
	return s
}

func (s *DescribeDemandsRequest) SetDemandStatus(v []*string) *DescribeDemandsRequest {
	s.DemandStatus = v
	return s
}

type DescribeDemandsRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeDemandsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDemandsRequestTag) SetKey(v string) *DescribeDemandsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDemandsRequestTag) SetValue(v string) *DescribeDemandsRequestTag {
	s.Value = &v
	return s
}

type DescribeDemandsResponse struct {
	RequestId  *string                         `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                            `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                            `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                            `json:"PageSize" xml:"PageSize" require:"true"`
	RegionId   *string                         `json:"RegionId" xml:"RegionId" require:"true"`
	Demands    *DescribeDemandsResponseDemands `json:"Demands" xml:"Demands" require:"true" type:"Struct"`
}

func (s DescribeDemandsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponse) SetRequestId(v string) *DescribeDemandsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDemandsResponse) SetTotalCount(v int) *DescribeDemandsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDemandsResponse) SetPageNumber(v int) *DescribeDemandsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDemandsResponse) SetPageSize(v int) *DescribeDemandsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeDemandsResponse) SetRegionId(v string) *DescribeDemandsResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeDemandsResponse) SetDemands(v *DescribeDemandsResponseDemands) *DescribeDemandsResponse {
	s.Demands = v
	return s
}

type DescribeDemandsResponseDemands struct {
	Demand []*DescribeDemandsResponseDemandsDemand `json:"Demand" xml:"Demand" require:"true" type:"Repeated"`
}

func (s DescribeDemandsResponseDemands) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseDemands) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseDemands) SetDemand(v []*DescribeDemandsResponseDemandsDemand) *DescribeDemandsResponseDemands {
	s.Demand = v
	return s
}

type DescribeDemandsResponseDemandsDemand struct {
	ZoneId             *string                                          `json:"ZoneId" xml:"ZoneId" require:"true"`
	DemandTime         *string                                          `json:"DemandTime" xml:"DemandTime" require:"true"`
	InstanceTypeFamily *string                                          `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true"`
	DemandId           *string                                          `json:"DemandId" xml:"DemandId" require:"true"`
	DemandName         *string                                          `json:"DemandName" xml:"DemandName" require:"true"`
	Comment            *string                                          `json:"Comment" xml:"Comment" require:"true"`
	DemandDescription  *string                                          `json:"DemandDescription" xml:"DemandDescription" require:"true"`
	InstanceType       *string                                          `json:"InstanceType" xml:"InstanceType" require:"true"`
	InstanceChargeType *string                                          `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	Period             *int                                             `json:"Period" xml:"Period" require:"true"`
	PeriodUnit         *string                                          `json:"PeriodUnit" xml:"PeriodUnit" require:"true"`
	StartTime          *string                                          `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime            *string                                          `json:"EndTime" xml:"EndTime" require:"true"`
	DemandStatus       *string                                          `json:"DemandStatus" xml:"DemandStatus" require:"true"`
	TotalAmount        *int                                             `json:"TotalAmount" xml:"TotalAmount" require:"true"`
	AvailableAmount    *int                                             `json:"AvailableAmount" xml:"AvailableAmount" require:"true"`
	UsedAmount         *int                                             `json:"UsedAmount" xml:"UsedAmount" require:"true"`
	DeliveringAmount   *int                                             `json:"DeliveringAmount" xml:"DeliveringAmount" require:"true"`
	SupplyInfos        *DescribeDemandsResponseDemandsDemandSupplyInfos `json:"SupplyInfos" xml:"SupplyInfos" require:"true" type:"Struct"`
}

func (s DescribeDemandsResponseDemandsDemand) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseDemandsDemand) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseDemandsDemand) SetZoneId(v string) *DescribeDemandsResponseDemandsDemand {
	s.ZoneId = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDemandTime(v string) *DescribeDemandsResponseDemandsDemand {
	s.DemandTime = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetInstanceTypeFamily(v string) *DescribeDemandsResponseDemandsDemand {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDemandId(v string) *DescribeDemandsResponseDemandsDemand {
	s.DemandId = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDemandName(v string) *DescribeDemandsResponseDemandsDemand {
	s.DemandName = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetComment(v string) *DescribeDemandsResponseDemandsDemand {
	s.Comment = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDemandDescription(v string) *DescribeDemandsResponseDemandsDemand {
	s.DemandDescription = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetInstanceType(v string) *DescribeDemandsResponseDemandsDemand {
	s.InstanceType = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetInstanceChargeType(v string) *DescribeDemandsResponseDemandsDemand {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetPeriod(v int) *DescribeDemandsResponseDemandsDemand {
	s.Period = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetPeriodUnit(v string) *DescribeDemandsResponseDemandsDemand {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetStartTime(v string) *DescribeDemandsResponseDemandsDemand {
	s.StartTime = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetEndTime(v string) *DescribeDemandsResponseDemandsDemand {
	s.EndTime = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDemandStatus(v string) *DescribeDemandsResponseDemandsDemand {
	s.DemandStatus = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetTotalAmount(v int) *DescribeDemandsResponseDemandsDemand {
	s.TotalAmount = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetAvailableAmount(v int) *DescribeDemandsResponseDemandsDemand {
	s.AvailableAmount = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetUsedAmount(v int) *DescribeDemandsResponseDemandsDemand {
	s.UsedAmount = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetDeliveringAmount(v int) *DescribeDemandsResponseDemandsDemand {
	s.DeliveringAmount = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemand) SetSupplyInfos(v *DescribeDemandsResponseDemandsDemandSupplyInfos) *DescribeDemandsResponseDemandsDemand {
	s.SupplyInfos = v
	return s
}

type DescribeDemandsResponseDemandsDemandSupplyInfos struct {
	SupplyInfo []*DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo `json:"SupplyInfo" xml:"SupplyInfo" require:"true" type:"Repeated"`
}

func (s DescribeDemandsResponseDemandsDemandSupplyInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseDemandsDemandSupplyInfos) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseDemandsDemandSupplyInfos) SetSupplyInfo(v []*DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) *DescribeDemandsResponseDemandsDemandSupplyInfos {
	s.SupplyInfo = v
	return s
}

type DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo struct {
	Amount          *int    `json:"Amount" xml:"Amount" require:"true"`
	SupplyStatus    *string `json:"SupplyStatus" xml:"SupplyStatus" require:"true"`
	SupplyStartTime *string `json:"SupplyStartTime" xml:"SupplyStartTime" require:"true"`
	SupplyEndTime   *string `json:"SupplyEndTime" xml:"SupplyEndTime" require:"true"`
}

func (s DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) GoString() string {
	return s.String()
}

func (s *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) SetAmount(v int) *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo {
	s.Amount = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) SetSupplyStatus(v string) *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo {
	s.SupplyStatus = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) SetSupplyStartTime(v string) *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo {
	s.SupplyStartTime = &v
	return s
}

func (s *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo) SetSupplyEndTime(v string) *DescribeDemandsResponseDemandsDemandSupplyInfosSupplyInfo {
	s.SupplyEndTime = &v
	return s
}

type ImportSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SnapshotName         *string `json:"SnapshotName" xml:"SnapshotName" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OssBucket            *string `json:"OssBucket" xml:"OssBucket" require:"true"`
	OssObject            *string `json:"OssObject" xml:"OssObject" require:"true"`
	RoleName             *string `json:"RoleName" xml:"RoleName"`
}

func (s ImportSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSnapshotRequest) GoString() string {
	return s.String()
}

func (s *ImportSnapshotRequest) SetOwnerId(v int64) *ImportSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportSnapshotRequest) SetResourceOwnerAccount(v string) *ImportSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportSnapshotRequest) SetResourceOwnerId(v int64) *ImportSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportSnapshotRequest) SetSnapshotName(v string) *ImportSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *ImportSnapshotRequest) SetRegionId(v string) *ImportSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ImportSnapshotRequest) SetOssBucket(v string) *ImportSnapshotRequest {
	s.OssBucket = &v
	return s
}

func (s *ImportSnapshotRequest) SetOssObject(v string) *ImportSnapshotRequest {
	s.OssObject = &v
	return s
}

func (s *ImportSnapshotRequest) SetRoleName(v string) *ImportSnapshotRequest {
	s.RoleName = &v
	return s
}

type ImportSnapshotResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId     *string `json:"TaskId" xml:"TaskId" require:"true"`
	SnapshotId *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
}

func (s ImportSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportSnapshotResponse) GoString() string {
	return s.String()
}

func (s *ImportSnapshotResponse) SetRequestId(v string) *ImportSnapshotResponse {
	s.RequestId = &v
	return s
}

func (s *ImportSnapshotResponse) SetTaskId(v string) *ImportSnapshotResponse {
	s.TaskId = &v
	return s
}

func (s *ImportSnapshotResponse) SetSnapshotId(v string) *ImportSnapshotResponse {
	s.SnapshotId = &v
	return s
}

type ExportSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SnapshotId           *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OssBucket            *string `json:"OssBucket" xml:"OssBucket" require:"true"`
	RoleName             *string `json:"RoleName" xml:"RoleName"`
}

func (s ExportSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportSnapshotRequest) GoString() string {
	return s.String()
}

func (s *ExportSnapshotRequest) SetOwnerId(v int64) *ExportSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *ExportSnapshotRequest) SetResourceOwnerAccount(v string) *ExportSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ExportSnapshotRequest) SetResourceOwnerId(v int64) *ExportSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ExportSnapshotRequest) SetSnapshotId(v string) *ExportSnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *ExportSnapshotRequest) SetRegionId(v string) *ExportSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ExportSnapshotRequest) SetOssBucket(v string) *ExportSnapshotRequest {
	s.OssBucket = &v
	return s
}

func (s *ExportSnapshotRequest) SetRoleName(v string) *ExportSnapshotRequest {
	s.RoleName = &v
	return s
}

type ExportSnapshotResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId    *string `json:"TaskId" xml:"TaskId" require:"true"`
}

func (s ExportSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportSnapshotResponse) GoString() string {
	return s.String()
}

func (s *ExportSnapshotResponse) SetRequestId(v string) *ExportSnapshotResponse {
	s.RequestId = &v
	return s
}

func (s *ExportSnapshotResponse) SetTaskId(v string) *ExportSnapshotResponse {
	s.TaskId = &v
	return s
}

type UntagResourcesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceId           []*string `json:"ResourceId" xml:"ResourceId" require:"true" type:"Repeated"`
	ResourceType         *string   `json:"ResourceType" xml:"ResourceType" require:"true"`
	TagKey               []*string `json:"TagKey" xml:"TagKey" type:"Repeated"`
	All                  *bool     `json:"All" xml:"All"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerAccount(v string) *UntagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

type UntagResourcesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetRequestId(v string) *UntagResourcesResponse {
	s.RequestId = &v
	return s
}

type TagResourcesRequest struct {
	OwnerId              *int64                    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	OwnerAccount         *string                   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                   `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceType         *string                   `json:"ResourceType" xml:"ResourceType" require:"true"`
	ResourceId           []*string                 `json:"ResourceId" xml:"ResourceId" require:"true" type:"Repeated"`
	Tag                  []*TagResourcesRequestTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetOwnerAccount(v string) *TagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetRequestId(v string) *TagResourcesResponse {
	s.RequestId = &v
	return s
}

type ListTagResourcesRequest struct {
	OwnerId              *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                             `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                             `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceId           []*string                           `json:"ResourceId" xml:"ResourceId" type:"Repeated"`
	Tag                  []*ListTagResourcesRequestTag       `json:"Tag" xml:"Tag" type:"Repeated"`
	TagFilter            []*ListTagResourcesRequestTagFilter `json:"TagFilter" xml:"TagFilter" type:"Repeated"`
	NextToken            *string                             `json:"NextToken" xml:"NextToken"`
	ResourceType         *string                             `json:"ResourceType" xml:"ResourceType" require:"true"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerAccount(v string) *ListTagResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) SetTagFilter(v []*ListTagResourcesRequestTagFilter) *ListTagResourcesRequest {
	s.TagFilter = v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesRequestTagFilter struct {
	TagKey    *string   `json:"TagKey" xml:"TagKey" require:"true"`
	TagValues []*string `json:"TagValues" xml:"TagValues" type:"Repeated"`
}

func (s ListTagResourcesRequestTagFilter) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTagFilter) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTagFilter) SetTagKey(v string) *ListTagResourcesRequestTagFilter {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesRequestTagFilter) SetTagValues(v []*string) *ListTagResourcesRequestTagFilter {
	s.TagValues = v
	return s
}

type ListTagResourcesResponse struct {
	RequestId    *string                               `json:"RequestId" xml:"RequestId" require:"true"`
	NextToken    *string                               `json:"NextToken" xml:"NextToken" require:"true"`
	TagResources *ListTagResourcesResponseTagResources `json:"TagResources" xml:"TagResources" require:"true" type:"Struct"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetRequestId(v string) *ListTagResourcesResponse {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponse) SetNextToken(v string) *ListTagResourcesResponse {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponse) SetTagResources(v *ListTagResourcesResponseTagResources) *ListTagResourcesResponse {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseTagResources struct {
	TagResource []*ListTagResourcesResponseTagResourcesTagResource `json:"TagResource" xml:"TagResource" require:"true" type:"Repeated"`
}

func (s ListTagResourcesResponseTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResources) SetTagResource(v []*ListTagResourcesResponseTagResourcesTagResource) *ListTagResourcesResponseTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseTagResourcesTagResource struct {
	ResourceType *string `json:"ResourceType" xml:"ResourceType" require:"true"`
	ResourceId   *string `json:"ResourceId" xml:"ResourceId" require:"true"`
	TagKey       *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue     *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s ListTagResourcesResponseTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type AcceptInquiredSystemEventRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	EventId              *string `json:"EventId" xml:"EventId" require:"true"`
}

func (s AcceptInquiredSystemEventRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptInquiredSystemEventRequest) GoString() string {
	return s.String()
}

func (s *AcceptInquiredSystemEventRequest) SetOwnerId(v int64) *AcceptInquiredSystemEventRequest {
	s.OwnerId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetResourceOwnerAccount(v string) *AcceptInquiredSystemEventRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetResourceOwnerId(v int64) *AcceptInquiredSystemEventRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetOwnerAccount(v string) *AcceptInquiredSystemEventRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetRegionId(v string) *AcceptInquiredSystemEventRequest {
	s.RegionId = &v
	return s
}

func (s *AcceptInquiredSystemEventRequest) SetEventId(v string) *AcceptInquiredSystemEventRequest {
	s.EventId = &v
	return s
}

type AcceptInquiredSystemEventResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AcceptInquiredSystemEventResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptInquiredSystemEventResponse) GoString() string {
	return s.String()
}

func (s *AcceptInquiredSystemEventResponse) SetRequestId(v string) *AcceptInquiredSystemEventResponse {
	s.RequestId = &v
	return s
}

type RedeployInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	ForceStop            *bool   `json:"ForceStop" xml:"ForceStop"`
}

func (s RedeployInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RedeployInstanceRequest) GoString() string {
	return s.String()
}

func (s *RedeployInstanceRequest) SetOwnerId(v int64) *RedeployInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RedeployInstanceRequest) SetResourceOwnerAccount(v string) *RedeployInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RedeployInstanceRequest) SetResourceOwnerId(v int64) *RedeployInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RedeployInstanceRequest) SetOwnerAccount(v string) *RedeployInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RedeployInstanceRequest) SetInstanceId(v string) *RedeployInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RedeployInstanceRequest) SetForceStop(v bool) *RedeployInstanceRequest {
	s.ForceStop = &v
	return s
}

type RedeployInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId    *string `json:"TaskId" xml:"TaskId" require:"true"`
}

func (s RedeployInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RedeployInstanceResponse) GoString() string {
	return s.String()
}

func (s *RedeployInstanceResponse) SetRequestId(v string) *RedeployInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *RedeployInstanceResponse) SetTaskId(v string) *RedeployInstanceResponse {
	s.TaskId = &v
	return s
}

type UnassignIpv6AddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Ipv6Address          []*string `json:"Ipv6Address" xml:"Ipv6Address" require:"true" type:"Repeated"`
}

func (s UnassignIpv6AddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignIpv6AddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignIpv6AddressesRequest) SetOwnerId(v int64) *UnassignIpv6AddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetResourceOwnerAccount(v string) *UnassignIpv6AddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetResourceOwnerId(v int64) *UnassignIpv6AddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetOwnerAccount(v string) *UnassignIpv6AddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetRegionId(v string) *UnassignIpv6AddressesRequest {
	s.RegionId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetNetworkInterfaceId(v string) *UnassignIpv6AddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignIpv6AddressesRequest) SetIpv6Address(v []*string) *UnassignIpv6AddressesRequest {
	s.Ipv6Address = v
	return s
}

type UnassignIpv6AddressesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UnassignIpv6AddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignIpv6AddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignIpv6AddressesResponse) SetRequestId(v string) *UnassignIpv6AddressesResponse {
	s.RequestId = &v
	return s
}

type AssignIpv6AddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Ipv6Address          []*string `json:"Ipv6Address" xml:"Ipv6Address" type:"Repeated"`
	Ipv6AddressCount     *int      `json:"Ipv6AddressCount" xml:"Ipv6AddressCount"`
}

func (s AssignIpv6AddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignIpv6AddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignIpv6AddressesRequest) SetOwnerId(v int64) *AssignIpv6AddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetResourceOwnerAccount(v string) *AssignIpv6AddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetResourceOwnerId(v int64) *AssignIpv6AddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetOwnerAccount(v string) *AssignIpv6AddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetRegionId(v string) *AssignIpv6AddressesRequest {
	s.RegionId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetNetworkInterfaceId(v string) *AssignIpv6AddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignIpv6AddressesRequest) SetIpv6Address(v []*string) *AssignIpv6AddressesRequest {
	s.Ipv6Address = v
	return s
}

func (s *AssignIpv6AddressesRequest) SetIpv6AddressCount(v int) *AssignIpv6AddressesRequest {
	s.Ipv6AddressCount = &v
	return s
}

type AssignIpv6AddressesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AssignIpv6AddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignIpv6AddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignIpv6AddressesResponse) SetRequestId(v string) *AssignIpv6AddressesResponse {
	s.RequestId = &v
	return s
}

type DescribeInstanceTopologyRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds"`
}

func (s DescribeInstanceTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyRequest) SetOwnerId(v int64) *DescribeInstanceTopologyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTopologyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetResourceOwnerId(v int64) *DescribeInstanceTopologyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetRegionId(v string) *DescribeInstanceTopologyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTopologyRequest) SetInstanceIds(v string) *DescribeInstanceTopologyRequest {
	s.InstanceIds = &v
	return s
}

type DescribeInstanceTopologyResponse struct {
	RequestId *string                                    `json:"RequestId" xml:"RequestId" require:"true"`
	Topologys *DescribeInstanceTopologyResponseTopologys `json:"Topologys" xml:"Topologys" require:"true" type:"Struct"`
}

func (s DescribeInstanceTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponse) SetRequestId(v string) *DescribeInstanceTopologyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTopologyResponse) SetTopologys(v *DescribeInstanceTopologyResponseTopologys) *DescribeInstanceTopologyResponse {
	s.Topologys = v
	return s
}

type DescribeInstanceTopologyResponseTopologys struct {
	Topology []*DescribeInstanceTopologyResponseTopologysTopology `json:"Topology" xml:"Topology" require:"true" type:"Repeated"`
}

func (s DescribeInstanceTopologyResponseTopologys) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseTopologys) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseTopologys) SetTopology(v []*DescribeInstanceTopologyResponseTopologysTopology) *DescribeInstanceTopologyResponseTopologys {
	s.Topology = v
	return s
}

type DescribeInstanceTopologyResponseTopologysTopology struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	HostId     *string `json:"HostId" xml:"HostId" require:"true"`
}

func (s DescribeInstanceTopologyResponseTopologysTopology) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTopologyResponseTopologysTopology) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTopologyResponseTopologysTopology) SetInstanceId(v string) *DescribeInstanceTopologyResponseTopologysTopology {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceTopologyResponseTopologysTopology) SetHostId(v string) *DescribeInstanceTopologyResponseTopologysTopology {
	s.HostId = &v
	return s
}

type RenewDedicatedHostsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DedicatedHostIds     *string `json:"DedicatedHostIds" xml:"DedicatedHostIds" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Period               *int    `json:"Period" xml:"Period" require:"true"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
}

func (s RenewDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsRequest) SetOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetDedicatedHostIds(v string) *RenewDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetRegionId(v string) *RenewDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriod(v int) *RenewDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriodUnit(v string) *RenewDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetClientToken(v string) *RenewDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

type RenewDedicatedHostsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RenewDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponse) SetRequestId(v string) *RenewDedicatedHostsResponse {
	s.RequestId = &v
	return s
}

type ReleaseDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
}

func (s ReleaseDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostRequest) SetOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetRegionId(v string) *ReleaseDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetDedicatedHostId(v string) *ReleaseDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

type ReleaseDedicatedHostResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReleaseDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostResponse) SetRequestId(v string) *ReleaseDedicatedHostResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceDeploymentRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId" xml:"DedicatedHostId"`
	DeploymentSetId      *string `json:"DeploymentSetId" xml:"DeploymentSetId"`
	Force                *bool   `json:"Force" xml:"Force"`
	Affinity             *string `json:"Affinity" xml:"Affinity"`
	Tenancy              *string `json:"Tenancy" xml:"Tenancy"`
	MigrationType        *string `json:"MigrationType" xml:"MigrationType"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType"`
}

func (s ModifyInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetRegionId(v string) *ModifyInstanceDeploymentRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetInstanceId(v string) *ModifyInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDedicatedHostId(v string) *ModifyInstanceDeploymentRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDeploymentSetId(v string) *ModifyInstanceDeploymentRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetForce(v bool) *ModifyInstanceDeploymentRequest {
	s.Force = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetAffinity(v string) *ModifyInstanceDeploymentRequest {
	s.Affinity = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetTenancy(v string) *ModifyInstanceDeploymentRequest {
	s.Tenancy = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetMigrationType(v string) *ModifyInstanceDeploymentRequest {
	s.MigrationType = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetInstanceType(v string) *ModifyInstanceDeploymentRequest {
	s.InstanceType = &v
	return s
}

type ModifyInstanceDeploymentResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentResponse) SetRequestId(v string) *ModifyInstanceDeploymentResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DedicatedHostIds     *string `json:"DedicatedHostIds" xml:"DedicatedHostIds" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Duration             *int    `json:"Duration" xml:"Duration"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	AutoRenew            *bool   `json:"AutoRenew" xml:"AutoRenew"`
	RenewalStatus        *string `json:"RenewalStatus" xml:"RenewalStatus"`
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetDedicatedHostIds(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetDuration(v int) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetPeriodUnit(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetAutoRenew(v bool) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetRequestId(v string) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	AutoReleaseTime      *string `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetRequestId(v string) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAttributeRequest struct {
	OwnerId              *int64                                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                               `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                               `json:"RegionId" xml:"RegionId" require:"true"`
	DedicatedHostId      *string                                               `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	DedicatedHostName    *string                                               `json:"DedicatedHostName" xml:"DedicatedHostName"`
	Description          *string                                               `json:"Description" xml:"Description"`
	ActionOnMaintenance  *string                                               `json:"ActionOnMaintenance" xml:"ActionOnMaintenance"`
	NetworkAttributes    *ModifyDedicatedHostAttributeRequestNetworkAttributes `json:"NetworkAttributes" xml:"NetworkAttributes" require:"true" type:"Struct"`
	AutoPlacement        *string                                               `json:"AutoPlacement" xml:"AutoPlacement"`
}

func (s ModifyDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostName(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDescription(v string) *ModifyDedicatedHostAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetActionOnMaintenance(v string) *ModifyDedicatedHostAttributeRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetNetworkAttributes(v *ModifyDedicatedHostAttributeRequestNetworkAttributes) *ModifyDedicatedHostAttributeRequest {
	s.NetworkAttributes = v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetAutoPlacement(v string) *ModifyDedicatedHostAttributeRequest {
	s.AutoPlacement = &v
	return s
}

type ModifyDedicatedHostAttributeRequestNetworkAttributes struct {
	SlbUdpTimeout *int `json:"SlbUdpTimeout" xml:"SlbUdpTimeout"`
	UdpTimeout    *int `json:"UdpTimeout" xml:"UdpTimeout"`
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetSlbUdpTimeout(v int) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetUdpTimeout(v int) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type ModifyDedicatedHostAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponse) SetRequestId(v string) *ModifyDedicatedHostAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeDedicatedHostsRequest struct {
	OwnerId              *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                             `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string                             `json:"ZoneId" xml:"ZoneId"`
	DedicatedHostIds     *string                             `json:"DedicatedHostIds" xml:"DedicatedHostIds"`
	DedicatedHostName    *string                             `json:"DedicatedHostName" xml:"DedicatedHostName"`
	Status               *string                             `json:"Status" xml:"Status"`
	DedicatedHostType    *string                             `json:"DedicatedHostType" xml:"DedicatedHostType"`
	LockReason           *string                             `json:"LockReason" xml:"LockReason"`
	PageNumber           *int                                `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string                             `json:"OwnerAccount" xml:"OwnerAccount"`
	Tag                  []*DescribeDedicatedHostsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                             `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s DescribeDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequest) SetOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetRegionId(v string) *DescribeDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetZoneId(v string) *DescribeDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostIds(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostName(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetStatus(v string) *DescribeDedicatedHostsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetLockReason(v string) *DescribeDedicatedHostsRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageNumber(v int) *DescribeDedicatedHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageSize(v int) *DescribeDedicatedHostsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetTag(v []*DescribeDedicatedHostsRequestTag) *DescribeDedicatedHostsRequest {
	s.Tag = v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceGroupId(v string) *DescribeDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDedicatedHostsRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequestTag) SetKey(v string) *DescribeDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDedicatedHostsRequestTag) SetValue(v string) *DescribeDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type DescribeDedicatedHostsResponse struct {
	RequestId      *string                                       `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount     *int                                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber     *int                                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize       *int                                          `json:"PageSize" xml:"PageSize" require:"true"`
	DedicatedHosts *DescribeDedicatedHostsResponseDedicatedHosts `json:"DedicatedHosts" xml:"DedicatedHosts" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponse) SetRequestId(v string) *DescribeDedicatedHostsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetTotalCount(v int) *DescribeDedicatedHostsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetPageNumber(v int) *DescribeDedicatedHostsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetPageSize(v int) *DescribeDedicatedHostsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetDedicatedHosts(v *DescribeDedicatedHostsResponseDedicatedHosts) *DescribeDedicatedHostsResponse {
	s.DedicatedHosts = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHosts struct {
	DedicatedHost []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost `json:"DedicatedHost" xml:"DedicatedHost" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHosts) SetDedicatedHost(v []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) *DescribeDedicatedHostsResponseDedicatedHosts {
	s.DedicatedHost = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost struct {
	DedicatedHostId                     *string                                                                                       `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	AutoPlacement                       *string                                                                                       `json:"AutoPlacement" xml:"AutoPlacement" require:"true"`
	RegionId                            *string                                                                                       `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                              *string                                                                                       `json:"ZoneId" xml:"ZoneId" require:"true"`
	DedicatedHostName                   *string                                                                                       `json:"DedicatedHostName" xml:"DedicatedHostName" require:"true"`
	MachineId                           *string                                                                                       `json:"MachineId" xml:"MachineId" require:"true"`
	Description                         *string                                                                                       `json:"Description" xml:"Description" require:"true"`
	DedicatedHostType                   *string                                                                                       `json:"DedicatedHostType" xml:"DedicatedHostType" require:"true"`
	Sockets                             *int                                                                                          `json:"Sockets" xml:"Sockets" require:"true"`
	Cores                               *int                                                                                          `json:"Cores" xml:"Cores" require:"true"`
	PhysicalGpus                        *int                                                                                          `json:"PhysicalGpus" xml:"PhysicalGpus" require:"true"`
	GPUSpec                             *string                                                                                       `json:"GPUSpec" xml:"GPUSpec" require:"true"`
	ActionOnMaintenance                 *string                                                                                       `json:"ActionOnMaintenance" xml:"ActionOnMaintenance" require:"true"`
	Status                              *string                                                                                       `json:"Status" xml:"Status" require:"true"`
	CreationTime                        *string                                                                                       `json:"CreationTime" xml:"CreationTime" require:"true"`
	ChargeType                          *string                                                                                       `json:"ChargeType" xml:"ChargeType" require:"true"`
	SaleCycle                           *string                                                                                       `json:"SaleCycle" xml:"SaleCycle" require:"true"`
	ExpiredTime                         *string                                                                                       `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	AutoReleaseTime                     *string                                                                                       `json:"AutoReleaseTime" xml:"AutoReleaseTime" require:"true"`
	ResourceGroupId                     *string                                                                                       `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	Instances                           *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances                           `json:"Instances" xml:"Instances" require:"true" type:"Struct"`
	OperationLocks                      *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks                      `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
	Tags                                *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags                                `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
	Capacity                            *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity                            `json:"Capacity" xml:"Capacity" require:"true" type:"Struct"`
	NetworkAttributes                   *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes                   `json:"NetworkAttributes" xml:"NetworkAttributes" require:"true" type:"Struct"`
	SupportedInstanceTypeFamilies       *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies       `json:"SupportedInstanceTypeFamilies" xml:"SupportedInstanceTypeFamilies" require:"true" type:"Struct"`
	SupportedCustomInstanceTypeFamilies *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies `json:"SupportedCustomInstanceTypeFamilies" xml:"SupportedCustomInstanceTypeFamilies" require:"true" type:"Struct"`
	SupportedInstanceTypesList          *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList          `json:"SupportedInstanceTypesList" xml:"SupportedInstanceTypesList" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetDedicatedHostId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetAutoPlacement(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.AutoPlacement = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetRegionId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetZoneId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetDedicatedHostName(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetMachineId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.MachineId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetDescription(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Description = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetDedicatedHostType(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetSockets(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Sockets = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetCores(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Cores = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetPhysicalGpus(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetGPUSpec(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetActionOnMaintenance(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.ActionOnMaintenance = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetStatus(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetCreationTime(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.CreationTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetChargeType(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.ChargeType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetSaleCycle(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.SaleCycle = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetExpiredTime(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetAutoReleaseTime(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetResourceGroupId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetInstances(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Instances = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetOperationLocks(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.OperationLocks = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetTags(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Tags = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetCapacity(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.Capacity = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetNetworkAttributes(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetSupportedInstanceTypeFamilies(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.SupportedInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetSupportedCustomInstanceTypeFamilies(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.SupportedCustomInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost) SetSupportedInstanceTypesList(v *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHost {
	s.SupportedInstanceTypesList = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances struct {
	Instance []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance `json:"Instance" xml:"Instance" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances) SetInstance(v []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstances {
	s.Instance = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance struct {
	InstanceId   *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	InstanceType *string `json:"InstanceType" xml:"InstanceType" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance) SetInstanceId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance) SetInstanceType(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostInstancesInstance {
	s.InstanceType = &v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks struct {
	OperationLock []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock `json:"OperationLock" xml:"OperationLock" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks) SetOperationLock(v []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocks {
	s.OperationLock = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock) SetLockReason(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostOperationLocksOperationLock {
	s.LockReason = &v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags struct {
	Tag []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags) SetTag(v []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTags {
	s.Tag = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag) SetTagKey(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag) SetTagValue(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostTagsTag {
	s.TagValue = &v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity struct {
	TotalVcpus            *int     `json:"TotalVcpus" xml:"TotalVcpus" require:"true"`
	AvailableVcpus        *int     `json:"AvailableVcpus" xml:"AvailableVcpus" require:"true"`
	TotalVgpus            *int     `json:"TotalVgpus" xml:"TotalVgpus" require:"true"`
	AvailableVgpus        *int     `json:"AvailableVgpus" xml:"AvailableVgpus" require:"true"`
	TotalMemory           *float32 `json:"TotalMemory" xml:"TotalMemory" require:"true"`
	AvailableMemory       *float32 `json:"AvailableMemory" xml:"AvailableMemory" require:"true"`
	TotalLocalStorage     *int     `json:"TotalLocalStorage" xml:"TotalLocalStorage" require:"true"`
	AvailableLocalStorage *int     `json:"AvailableLocalStorage" xml:"AvailableLocalStorage" require:"true"`
	LocalStorageCategory  *string  `json:"LocalStorageCategory" xml:"LocalStorageCategory" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetTotalVcpus(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetAvailableVcpus(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.AvailableVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetTotalVgpus(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.TotalVgpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetAvailableVgpus(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.AvailableVgpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetTotalMemory(v float32) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.TotalMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetAvailableMemory(v float32) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.AvailableMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetTotalLocalStorage(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.TotalLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetAvailableLocalStorage(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.AvailableLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity) SetLocalStorageCategory(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostCapacity {
	s.LocalStorageCategory = &v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes struct {
	SlbUdpTimeout *int `json:"SlbUdpTimeout" xml:"SlbUdpTimeout" require:"true"`
	UdpTimeout    *int `json:"UdpTimeout" xml:"UdpTimeout" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes) SetSlbUdpTimeout(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes) SetUdpTimeout(v int) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies struct {
	SupportedInstanceTypeFamily []*string `json:"SupportedInstanceTypeFamily" xml:"SupportedInstanceTypeFamily" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies) SetSupportedInstanceTypeFamily(v []*string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypeFamilies {
	s.SupportedInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies struct {
	SupportedCustomInstanceTypeFamily []*string `json:"SupportedCustomInstanceTypeFamily" xml:"SupportedCustomInstanceTypeFamily" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) SetSupportedCustomInstanceTypeFamily(v []*string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies {
	s.SupportedCustomInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList struct {
	SupportedInstanceTypesList []*string `json:"SupportedInstanceTypesList" xml:"SupportedInstanceTypesList" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList) SetSupportedInstanceTypesList(v []*string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHostSupportedInstanceTypesList {
	s.SupportedInstanceTypesList = v
	return s
}

type DescribeDedicatedHostTypesRequest struct {
	OwnerId                     *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                    *string `json:"RegionId" xml:"RegionId" require:"true"`
	DedicatedHostType           *string `json:"DedicatedHostType" xml:"DedicatedHostType"`
	SupportedInstanceTypeFamily *string `json:"SupportedInstanceTypeFamily" xml:"SupportedInstanceTypeFamily"`
}

func (s DescribeDedicatedHostTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetRegionId(v string) *DescribeDedicatedHostTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetSupportedInstanceTypeFamily(v string) *DescribeDedicatedHostTypesRequest {
	s.SupportedInstanceTypeFamily = &v
	return s
}

type DescribeDedicatedHostTypesResponse struct {
	RequestId          *string                                               `json:"RequestId" xml:"RequestId" require:"true"`
	DedicatedHostTypes *DescribeDedicatedHostTypesResponseDedicatedHostTypes `json:"DedicatedHostTypes" xml:"DedicatedHostTypes" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponse) SetRequestId(v string) *DescribeDedicatedHostTypesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponse) SetDedicatedHostTypes(v *DescribeDedicatedHostTypesResponseDedicatedHostTypes) *DescribeDedicatedHostTypesResponse {
	s.DedicatedHostTypes = v
	return s
}

type DescribeDedicatedHostTypesResponseDedicatedHostTypes struct {
	DedicatedHostType []*DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType `json:"DedicatedHostType" xml:"DedicatedHostType" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypes) SetDedicatedHostType(v []*DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) *DescribeDedicatedHostTypesResponseDedicatedHostTypes {
	s.DedicatedHostType = v
	return s
}

type DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType struct {
	DedicatedHostType             *string                                                                                             `json:"DedicatedHostType" xml:"DedicatedHostType" require:"true"`
	Sockets                       *int                                                                                                `json:"Sockets" xml:"Sockets" require:"true"`
	TotalVcpus                    *int                                                                                                `json:"TotalVcpus" xml:"TotalVcpus" require:"true"`
	TotalVgpus                    *int                                                                                                `json:"TotalVgpus" xml:"TotalVgpus" require:"true"`
	Cores                         *int                                                                                                `json:"Cores" xml:"Cores" require:"true"`
	PhysicalGpus                  *int                                                                                                `json:"PhysicalGpus" xml:"PhysicalGpus" require:"true"`
	MemorySize                    *float32                                                                                            `json:"MemorySize" xml:"MemorySize" require:"true"`
	LocalStorageCapacity          *int64                                                                                              `json:"LocalStorageCapacity" xml:"LocalStorageCapacity" require:"true"`
	LocalStorageAmount            *int                                                                                                `json:"LocalStorageAmount" xml:"LocalStorageAmount" require:"true"`
	LocalStorageCategory          *string                                                                                             `json:"LocalStorageCategory" xml:"LocalStorageCategory" require:"true"`
	GPUSpec                       *string                                                                                             `json:"GPUSpec" xml:"GPUSpec" require:"true"`
	SupportedInstanceTypeFamilies *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies `json:"SupportedInstanceTypeFamilies" xml:"SupportedInstanceTypeFamilies" require:"true" type:"Struct"`
	SupportedInstanceTypesList    *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList    `json:"SupportedInstanceTypesList" xml:"SupportedInstanceTypesList" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetSockets(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.Sockets = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetTotalVcpus(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetTotalVgpus(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.TotalVgpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetCores(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.Cores = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetPhysicalGpus(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetMemorySize(v float32) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.MemorySize = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetLocalStorageCapacity(v int64) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetLocalStorageAmount(v int) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetLocalStorageCategory(v string) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetGPUSpec(v string) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetSupportedInstanceTypeFamilies(v *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.SupportedInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType) SetSupportedInstanceTypesList(v *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostType {
	s.SupportedInstanceTypesList = v
	return s
}

type DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies struct {
	SupportedInstanceTypeFamily []*string `json:"SupportedInstanceTypeFamily" xml:"SupportedInstanceTypeFamily" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies) SetSupportedInstanceTypeFamily(v []*string) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypeFamilies {
	s.SupportedInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList struct {
	SupportedInstanceTypesList []*string `json:"SupportedInstanceTypesList" xml:"SupportedInstanceTypesList" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList) SetSupportedInstanceTypesList(v []*string) *DescribeDedicatedHostTypesResponseDedicatedHostTypesDedicatedHostTypeSupportedInstanceTypesList {
	s.SupportedInstanceTypesList = v
	return s
}

type DescribeDedicatedHostAutoRenewRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DedicatedHostIds     *string `json:"DedicatedHostIds" xml:"DedicatedHostIds" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s DescribeDedicatedHostAutoRenewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetDedicatedHostIds(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetRegionId(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.RegionId = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponse struct {
	RequestId                    *string                                                             `json:"RequestId" xml:"RequestId" require:"true"`
	DedicatedHostRenewAttributes *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes `json:"DedicatedHostRenewAttributes" xml:"DedicatedHostRenewAttributes" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostAutoRenewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetRequestId(v string) *DescribeDedicatedHostAutoRenewResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetDedicatedHostRenewAttributes(v *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes) *DescribeDedicatedHostAutoRenewResponse {
	s.DedicatedHostRenewAttributes = v
	return s
}

type DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes struct {
	DedicatedHostRenewAttribute []*DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute `json:"DedicatedHostRenewAttribute" xml:"DedicatedHostRenewAttribute" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes) SetDedicatedHostRenewAttribute(v []*DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributes {
	s.DedicatedHostRenewAttribute = v
	return s
}

type DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute struct {
	DedicatedHostId  *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	AutoRenewEnabled *bool   `json:"AutoRenewEnabled" xml:"AutoRenewEnabled" require:"true"`
	Duration         *int    `json:"Duration" xml:"Duration" require:"true"`
	PeriodUnit       *string `json:"PeriodUnit" xml:"PeriodUnit" require:"true"`
	RenewalStatus    *string `json:"RenewalStatus" xml:"RenewalStatus" require:"true"`
}

func (s DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) SetDedicatedHostId(v string) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) SetAutoRenewEnabled(v bool) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute {
	s.AutoRenewEnabled = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) SetDuration(v int) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) SetPeriodUnit(v string) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute) SetRenewalStatus(v string) *DescribeDedicatedHostAutoRenewResponseDedicatedHostRenewAttributesDedicatedHostRenewAttribute {
	s.RenewalStatus = &v
	return s
}

type AllocateDedicatedHostsRequest struct {
	OwnerId              *int64                                          `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                         `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                          `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                         `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                         `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*AllocateDedicatedHostsRequestTag             `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                                         `json:"ResourceGroupId" xml:"ResourceGroupId"`
	ZoneId               *string                                         `json:"ZoneId" xml:"ZoneId"`
	DedicatedHostName    *string                                         `json:"DedicatedHostName" xml:"DedicatedHostName"`
	DedicatedHostType    *string                                         `json:"DedicatedHostType" xml:"DedicatedHostType" require:"true"`
	ActionOnMaintenance  *string                                         `json:"ActionOnMaintenance" xml:"ActionOnMaintenance"`
	NetworkAttributes    *AllocateDedicatedHostsRequestNetworkAttributes `json:"NetworkAttributes" xml:"NetworkAttributes" require:"true" type:"Struct"`
	Description          *string                                         `json:"Description" xml:"Description"`
	AutoPlacement        *string                                         `json:"AutoPlacement" xml:"AutoPlacement"`
	ChargeType           *string                                         `json:"ChargeType" xml:"ChargeType"`
	Quantity             *int                                            `json:"Quantity" xml:"Quantity"`
	Period               *int                                            `json:"Period" xml:"Period"`
	PeriodUnit           *string                                         `json:"PeriodUnit" xml:"PeriodUnit"`
	AutoRenew            *bool                                           `json:"AutoRenew" xml:"AutoRenew"`
	AutoRenewPeriod      *int                                            `json:"AutoRenewPeriod" xml:"AutoRenewPeriod"`
	AutoReleaseTime      *string                                         `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	ClientToken          *string                                         `json:"ClientToken" xml:"ClientToken"`
}

func (s AllocateDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequest) SetOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetRegionId(v string) *AllocateDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetTag(v []*AllocateDedicatedHostsRequestTag) *AllocateDedicatedHostsRequest {
	s.Tag = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceGroupId(v string) *AllocateDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetZoneId(v string) *AllocateDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostName(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostType(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetActionOnMaintenance(v string) *AllocateDedicatedHostsRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetNetworkAttributes(v *AllocateDedicatedHostsRequestNetworkAttributes) *AllocateDedicatedHostsRequest {
	s.NetworkAttributes = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDescription(v string) *AllocateDedicatedHostsRequest {
	s.Description = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoPlacement(v string) *AllocateDedicatedHostsRequest {
	s.AutoPlacement = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetChargeType(v string) *AllocateDedicatedHostsRequest {
	s.ChargeType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetQuantity(v int) *AllocateDedicatedHostsRequest {
	s.Quantity = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriod(v int) *AllocateDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriodUnit(v string) *AllocateDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenew(v bool) *AllocateDedicatedHostsRequest {
	s.AutoRenew = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenewPeriod(v int) *AllocateDedicatedHostsRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoReleaseTime(v string) *AllocateDedicatedHostsRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetClientToken(v string) *AllocateDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

type AllocateDedicatedHostsRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s AllocateDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestTag) SetKey(v string) *AllocateDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *AllocateDedicatedHostsRequestTag) SetValue(v string) *AllocateDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type AllocateDedicatedHostsRequestNetworkAttributes struct {
	SlbUdpTimeout *int `json:"SlbUdpTimeout" xml:"SlbUdpTimeout"`
	UdpTimeout    *int `json:"UdpTimeout" xml:"UdpTimeout"`
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetSlbUdpTimeout(v int) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetUdpTimeout(v int) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type AllocateDedicatedHostsResponse struct {
	RequestId           *string                                            `json:"RequestId" xml:"RequestId" require:"true"`
	DedicatedHostIdSets *AllocateDedicatedHostsResponseDedicatedHostIdSets `json:"DedicatedHostIdSets" xml:"DedicatedHostIdSets" require:"true" type:"Struct"`
}

func (s AllocateDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponse) SetRequestId(v string) *AllocateDedicatedHostsResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateDedicatedHostsResponse) SetDedicatedHostIdSets(v *AllocateDedicatedHostsResponseDedicatedHostIdSets) *AllocateDedicatedHostsResponse {
	s.DedicatedHostIdSets = v
	return s
}

type AllocateDedicatedHostsResponseDedicatedHostIdSets struct {
	DedicatedHostId []*string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true" type:"Repeated"`
}

func (s AllocateDedicatedHostsResponseDedicatedHostIdSets) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponseDedicatedHostIdSets) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponseDedicatedHostIdSets) SetDedicatedHostId(v []*string) *AllocateDedicatedHostsResponseDedicatedHostIdSets {
	s.DedicatedHostId = v
	return s
}

type CreateSimulatedSystemEventsRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	EventType            *string   `json:"EventType" xml:"EventType" require:"true"`
	NotBefore            *string   `json:"NotBefore" xml:"NotBefore" require:"true"`
}

func (s CreateSimulatedSystemEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsRequest) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsRequest) SetOwnerId(v int64) *CreateSimulatedSystemEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetResourceOwnerAccount(v string) *CreateSimulatedSystemEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetResourceOwnerId(v int64) *CreateSimulatedSystemEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetOwnerAccount(v string) *CreateSimulatedSystemEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetRegionId(v string) *CreateSimulatedSystemEventsRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetInstanceId(v []*string) *CreateSimulatedSystemEventsRequest {
	s.InstanceId = v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetEventType(v string) *CreateSimulatedSystemEventsRequest {
	s.EventType = &v
	return s
}

func (s *CreateSimulatedSystemEventsRequest) SetNotBefore(v string) *CreateSimulatedSystemEventsRequest {
	s.NotBefore = &v
	return s
}

type CreateSimulatedSystemEventsResponse struct {
	RequestId  *string                                        `json:"RequestId" xml:"RequestId" require:"true"`
	EventIdSet *CreateSimulatedSystemEventsResponseEventIdSet `json:"EventIdSet" xml:"EventIdSet" require:"true" type:"Struct"`
}

func (s CreateSimulatedSystemEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsResponse) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsResponse) SetRequestId(v string) *CreateSimulatedSystemEventsResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSimulatedSystemEventsResponse) SetEventIdSet(v *CreateSimulatedSystemEventsResponseEventIdSet) *CreateSimulatedSystemEventsResponse {
	s.EventIdSet = v
	return s
}

type CreateSimulatedSystemEventsResponseEventIdSet struct {
	EventId []*string `json:"EventId" xml:"EventId" require:"true" type:"Repeated"`
}

func (s CreateSimulatedSystemEventsResponseEventIdSet) String() string {
	return tea.Prettify(s)
}

func (s CreateSimulatedSystemEventsResponseEventIdSet) GoString() string {
	return s.String()
}

func (s *CreateSimulatedSystemEventsResponseEventIdSet) SetEventId(v []*string) *CreateSimulatedSystemEventsResponseEventIdSet {
	s.EventId = v
	return s
}

type CancelSimulatedSystemEventsRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	EventId              []*string `json:"EventId" xml:"EventId" require:"true" type:"Repeated"`
}

func (s CancelSimulatedSystemEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSimulatedSystemEventsRequest) GoString() string {
	return s.String()
}

func (s *CancelSimulatedSystemEventsRequest) SetOwnerId(v int64) *CancelSimulatedSystemEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetResourceOwnerAccount(v string) *CancelSimulatedSystemEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetResourceOwnerId(v int64) *CancelSimulatedSystemEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetOwnerAccount(v string) *CancelSimulatedSystemEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetRegionId(v string) *CancelSimulatedSystemEventsRequest {
	s.RegionId = &v
	return s
}

func (s *CancelSimulatedSystemEventsRequest) SetEventId(v []*string) *CancelSimulatedSystemEventsRequest {
	s.EventId = v
	return s
}

type CancelSimulatedSystemEventsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CancelSimulatedSystemEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSimulatedSystemEventsResponse) GoString() string {
	return s.String()
}

func (s *CancelSimulatedSystemEventsResponse) SetRequestId(v string) *CancelSimulatedSystemEventsResponse {
	s.RequestId = &v
	return s
}

type DescribeEniMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	EniId                *string `json:"EniId" xml:"EniId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
}

func (s DescribeEniMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataRequest) SetOwnerId(v int64) *DescribeEniMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeEniMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeEniMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetOwnerAccount(v string) *DescribeEniMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetEniId(v string) *DescribeEniMonitorDataRequest {
	s.EniId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetRegionId(v string) *DescribeEniMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetInstanceId(v string) *DescribeEniMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetStartTime(v string) *DescribeEniMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetEndTime(v string) *DescribeEniMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEniMonitorDataRequest) SetPeriod(v int) *DescribeEniMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeEniMonitorDataResponse struct {
	RequestId   *string                                    `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	MonitorData *DescribeEniMonitorDataResponseMonitorData `json:"MonitorData" xml:"MonitorData" require:"true" type:"Struct"`
}

func (s DescribeEniMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponse) SetRequestId(v string) *DescribeEniMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEniMonitorDataResponse) SetTotalCount(v int) *DescribeEniMonitorDataResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeEniMonitorDataResponse) SetMonitorData(v *DescribeEniMonitorDataResponseMonitorData) *DescribeEniMonitorDataResponse {
	s.MonitorData = v
	return s
}

type DescribeEniMonitorDataResponseMonitorData struct {
	EniMonitorData []*DescribeEniMonitorDataResponseMonitorDataEniMonitorData `json:"EniMonitorData" xml:"EniMonitorData" require:"true" type:"Repeated"`
}

func (s DescribeEniMonitorDataResponseMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponseMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponseMonitorData) SetEniMonitorData(v []*DescribeEniMonitorDataResponseMonitorDataEniMonitorData) *DescribeEniMonitorDataResponseMonitorData {
	s.EniMonitorData = v
	return s
}

type DescribeEniMonitorDataResponseMonitorDataEniMonitorData struct {
	EniId        *string `json:"EniId" xml:"EniId" require:"true"`
	TimeStamp    *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
	PacketTx     *string `json:"PacketTx" xml:"PacketTx" require:"true"`
	PacketRx     *string `json:"PacketRx" xml:"PacketRx" require:"true"`
	IntranetTx   *string `json:"IntranetTx" xml:"IntranetTx" require:"true"`
	IntranetRx   *string `json:"IntranetRx" xml:"IntranetRx" require:"true"`
	DropPacketTx *string `json:"DropPacketTx" xml:"DropPacketTx" require:"true"`
	DropPacketRx *string `json:"DropPacketRx" xml:"DropPacketRx" require:"true"`
}

func (s DescribeEniMonitorDataResponseMonitorDataEniMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniMonitorDataResponseMonitorDataEniMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetEniId(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.EniId = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetTimeStamp(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetPacketTx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.PacketTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetPacketRx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.PacketRx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetIntranetTx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.IntranetTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetIntranetRx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.IntranetRx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetDropPacketTx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.DropPacketTx = &v
	return s
}

func (s *DescribeEniMonitorDataResponseMonitorDataEniMonitorData) SetDropPacketRx(v string) *DescribeEniMonitorDataResponseMonitorDataEniMonitorData {
	s.DropPacketRx = &v
	return s
}

type DescribeAccountAttributesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string   `json:"ZoneId" xml:"ZoneId"`
	AttributeName        []*string `json:"AttributeName" xml:"AttributeName" type:"Repeated"`
}

func (s DescribeAccountAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesRequest) SetOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerAccount(v string) *DescribeAccountAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetRegionId(v string) *DescribeAccountAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetZoneId(v string) *DescribeAccountAttributesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetAttributeName(v []*string) *DescribeAccountAttributesRequest {
	s.AttributeName = v
	return s
}

type DescribeAccountAttributesResponse struct {
	RequestId             *string                                                 `json:"RequestId" xml:"RequestId" require:"true"`
	AccountAttributeItems *DescribeAccountAttributesResponseAccountAttributeItems `json:"AccountAttributeItems" xml:"AccountAttributeItems" require:"true" type:"Struct"`
}

func (s DescribeAccountAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponse) SetRequestId(v string) *DescribeAccountAttributesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountAttributesResponse) SetAccountAttributeItems(v *DescribeAccountAttributesResponseAccountAttributeItems) *DescribeAccountAttributesResponse {
	s.AccountAttributeItems = v
	return s
}

type DescribeAccountAttributesResponseAccountAttributeItems struct {
	AccountAttributeItem []*DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem `json:"AccountAttributeItem" xml:"AccountAttributeItem" require:"true" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseAccountAttributeItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseAccountAttributeItems) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseAccountAttributeItems) SetAccountAttributeItem(v []*DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem) *DescribeAccountAttributesResponseAccountAttributeItems {
	s.AccountAttributeItem = v
	return s
}

type DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem struct {
	AttributeName   *string                                                                                    `json:"AttributeName" xml:"AttributeName" require:"true"`
	AttributeValues *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues `json:"AttributeValues" xml:"AttributeValues" require:"true" type:"Struct"`
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem) SetAttributeName(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem {
	s.AttributeName = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem) SetAttributeValues(v *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItem {
	s.AttributeValues = v
	return s
}

type DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues struct {
	ValueItem []*DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem `json:"ValueItem" xml:"ValueItem" require:"true" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues) SetValueItem(v []*DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValues {
	s.ValueItem = v
	return s
}

type DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem struct {
	Value              *string `json:"Value" xml:"Value" require:"true"`
	ExpiredTime        *string `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	ZoneId             *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	InstanceChargeType *string `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	InstanceType       *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	Count              *int    `json:"Count" xml:"Count" require:"true"`
	DiskCategory       *string `json:"DiskCategory" xml:"DiskCategory" require:"true"`
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetValue(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.Value = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetExpiredTime(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetZoneId(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.ZoneId = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetInstanceChargeType(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetInstanceType(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.InstanceType = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetCount(v int) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.Count = &v
	return s
}

func (s *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetDiskCategory(v string) *DescribeAccountAttributesResponseAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.DiskCategory = &v
	return s
}

type ModifyLaunchTemplateDefaultVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	LaunchTemplateId     *string `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName   *string `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
	DefaultVersionNumber *int64  `json:"DefaultVersionNumber" xml:"DefaultVersionNumber" require:"true"`
}

func (s ModifyLaunchTemplateDefaultVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLaunchTemplateDefaultVersionRequest) GoString() string {
	return s.String()
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetOwnerId(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetResourceOwnerAccount(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetResourceOwnerId(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetOwnerAccount(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetRegionId(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetLaunchTemplateId(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetLaunchTemplateName(v string) *ModifyLaunchTemplateDefaultVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *ModifyLaunchTemplateDefaultVersionRequest) SetDefaultVersionNumber(v int64) *ModifyLaunchTemplateDefaultVersionRequest {
	s.DefaultVersionNumber = &v
	return s
}

type ModifyLaunchTemplateDefaultVersionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyLaunchTemplateDefaultVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLaunchTemplateDefaultVersionResponse) GoString() string {
	return s.String()
}

func (s *ModifyLaunchTemplateDefaultVersionResponse) SetRequestId(v string) *ModifyLaunchTemplateDefaultVersionResponse {
	s.RequestId = &v
	return s
}

type DescribeLaunchTemplatesRequest struct {
	OwnerId                 *int64                                       `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string                                      `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64                                       `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string                                      `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string                                      `json:"RegionId" xml:"RegionId" require:"true"`
	TemplateTag             []*DescribeLaunchTemplatesRequestTemplateTag `json:"TemplateTag" xml:"TemplateTag" type:"Repeated"`
	LaunchTemplateId        []*string                                    `json:"LaunchTemplateId" xml:"LaunchTemplateId" type:"Repeated"`
	LaunchTemplateName      []*string                                    `json:"LaunchTemplateName" xml:"LaunchTemplateName" type:"Repeated"`
	PageNumber              *int                                         `json:"PageNumber" xml:"PageNumber"`
	PageSize                *int                                         `json:"PageSize" xml:"PageSize"`
	TemplateResourceGroupId *string                                      `json:"TemplateResourceGroupId" xml:"TemplateResourceGroupId"`
}

func (s DescribeLaunchTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesRequest) SetOwnerId(v int64) *DescribeLaunchTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetResourceOwnerAccount(v string) *DescribeLaunchTemplatesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetResourceOwnerId(v int64) *DescribeLaunchTemplatesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetOwnerAccount(v string) *DescribeLaunchTemplatesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetRegionId(v string) *DescribeLaunchTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetTemplateTag(v []*DescribeLaunchTemplatesRequestTemplateTag) *DescribeLaunchTemplatesRequest {
	s.TemplateTag = v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetLaunchTemplateId(v []*string) *DescribeLaunchTemplatesRequest {
	s.LaunchTemplateId = v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetLaunchTemplateName(v []*string) *DescribeLaunchTemplatesRequest {
	s.LaunchTemplateName = v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetPageNumber(v int) *DescribeLaunchTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetPageSize(v int) *DescribeLaunchTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplatesRequest) SetTemplateResourceGroupId(v string) *DescribeLaunchTemplatesRequest {
	s.TemplateResourceGroupId = &v
	return s
}

type DescribeLaunchTemplatesRequestTemplateTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeLaunchTemplatesRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesRequestTemplateTag) SetKey(v string) *DescribeLaunchTemplatesRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeLaunchTemplatesRequestTemplateTag) SetValue(v string) *DescribeLaunchTemplatesRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeLaunchTemplatesResponse struct {
	RequestId          *string                                            `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount         *int                                               `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber         *int                                               `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize           *int                                               `json:"PageSize" xml:"PageSize" require:"true"`
	LaunchTemplateSets *DescribeLaunchTemplatesResponseLaunchTemplateSets `json:"LaunchTemplateSets" xml:"LaunchTemplateSets" require:"true" type:"Struct"`
}

func (s DescribeLaunchTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponse) SetRequestId(v string) *DescribeLaunchTemplatesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponse) SetTotalCount(v int) *DescribeLaunchTemplatesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeLaunchTemplatesResponse) SetPageNumber(v int) *DescribeLaunchTemplatesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesResponse) SetPageSize(v int) *DescribeLaunchTemplatesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplatesResponse) SetLaunchTemplateSets(v *DescribeLaunchTemplatesResponseLaunchTemplateSets) *DescribeLaunchTemplatesResponse {
	s.LaunchTemplateSets = v
	return s
}

type DescribeLaunchTemplatesResponseLaunchTemplateSets struct {
	LaunchTemplateSet []*DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet `json:"LaunchTemplateSet" xml:"LaunchTemplateSet" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSets) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSets) SetLaunchTemplateSet(v []*DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) *DescribeLaunchTemplatesResponseLaunchTemplateSets {
	s.LaunchTemplateSet = v
	return s
}

type DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet struct {
	CreateTime           *string                                                                 `json:"CreateTime" xml:"CreateTime" require:"true"`
	ModifiedTime         *string                                                                 `json:"ModifiedTime" xml:"ModifiedTime" require:"true"`
	LaunchTemplateId     *string                                                                 `json:"LaunchTemplateId" xml:"LaunchTemplateId" require:"true"`
	LaunchTemplateName   *string                                                                 `json:"LaunchTemplateName" xml:"LaunchTemplateName" require:"true"`
	DefaultVersionNumber *int64                                                                  `json:"DefaultVersionNumber" xml:"DefaultVersionNumber" require:"true"`
	LatestVersionNumber  *int64                                                                  `json:"LatestVersionNumber" xml:"LatestVersionNumber" require:"true"`
	CreatedBy            *string                                                                 `json:"CreatedBy" xml:"CreatedBy" require:"true"`
	ResourceGroupId      *string                                                                 `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	Tags                 *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetCreateTime(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.CreateTime = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetModifiedTime(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetLaunchTemplateId(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetLaunchTemplateName(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetDefaultVersionNumber(v int64) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.DefaultVersionNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetLatestVersionNumber(v int64) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.LatestVersionNumber = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetCreatedBy(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.CreatedBy = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetResourceGroupId(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet) SetTags(v *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSet {
	s.Tags = v
	return s
}

type DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags struct {
	Tag []*DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags) SetTag(v []*DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTags {
	s.Tag = v
	return s
}

type DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag) SetTagKey(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag) SetTagValue(v string) *DescribeLaunchTemplatesResponseLaunchTemplateSetsLaunchTemplateSetTagsTag {
	s.TagValue = &v
	return s
}

type DescribeLaunchTemplateVersionsRequest struct {
	OwnerId               *int64   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string  `json:"RegionId" xml:"RegionId" require:"true"`
	LaunchTemplateId      *string  `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName    *string  `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
	LaunchTemplateVersion []*int64 `json:"LaunchTemplateVersion" xml:"LaunchTemplateVersion" type:"Repeated"`
	MinVersion            *int64   `json:"MinVersion" xml:"MinVersion"`
	MaxVersion            *int64   `json:"MaxVersion" xml:"MaxVersion"`
	DefaultVersion        *bool    `json:"DefaultVersion" xml:"DefaultVersion"`
	DetailFlag            *bool    `json:"DetailFlag" xml:"DetailFlag"`
	PageNumber            *int     `json:"PageNumber" xml:"PageNumber"`
	PageSize              *int     `json:"PageSize" xml:"PageSize"`
}

func (s DescribeLaunchTemplateVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsRequest) SetOwnerId(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetResourceOwnerAccount(v string) *DescribeLaunchTemplateVersionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetResourceOwnerId(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetOwnerAccount(v string) *DescribeLaunchTemplateVersionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetRegionId(v string) *DescribeLaunchTemplateVersionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateId(v string) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateName(v string) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetLaunchTemplateVersion(v []*int64) *DescribeLaunchTemplateVersionsRequest {
	s.LaunchTemplateVersion = v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetMinVersion(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.MinVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetMaxVersion(v int64) *DescribeLaunchTemplateVersionsRequest {
	s.MaxVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetDefaultVersion(v bool) *DescribeLaunchTemplateVersionsRequest {
	s.DefaultVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetDetailFlag(v bool) *DescribeLaunchTemplateVersionsRequest {
	s.DetailFlag = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetPageNumber(v int) *DescribeLaunchTemplateVersionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsRequest) SetPageSize(v int) *DescribeLaunchTemplateVersionsRequest {
	s.PageSize = &v
	return s
}

type DescribeLaunchTemplateVersionsResponse struct {
	RequestId                 *string                                                          `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount                *int                                                             `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber                *int                                                             `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize                  *int                                                             `json:"PageSize" xml:"PageSize" require:"true"`
	LaunchTemplateVersionSets *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets `json:"LaunchTemplateVersionSets" xml:"LaunchTemplateVersionSets" require:"true" type:"Struct"`
}

func (s DescribeLaunchTemplateVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponse) SetRequestId(v string) *DescribeLaunchTemplateVersionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponse) SetTotalCount(v int) *DescribeLaunchTemplateVersionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponse) SetPageNumber(v int) *DescribeLaunchTemplateVersionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponse) SetPageSize(v int) *DescribeLaunchTemplateVersionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponse) SetLaunchTemplateVersionSets(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets) *DescribeLaunchTemplateVersionsResponse {
	s.LaunchTemplateVersionSets = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets struct {
	LaunchTemplateVersionSet []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet `json:"LaunchTemplateVersionSet" xml:"LaunchTemplateVersionSet" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets) SetLaunchTemplateVersionSet(v []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSets {
	s.LaunchTemplateVersionSet = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet struct {
	CreateTime         *string                                                                                                    `json:"CreateTime" xml:"CreateTime" require:"true"`
	ModifiedTime       *string                                                                                                    `json:"ModifiedTime" xml:"ModifiedTime" require:"true"`
	LaunchTemplateId   *string                                                                                                    `json:"LaunchTemplateId" xml:"LaunchTemplateId" require:"true"`
	LaunchTemplateName *string                                                                                                    `json:"LaunchTemplateName" xml:"LaunchTemplateName" require:"true"`
	DefaultVersion     *bool                                                                                                      `json:"DefaultVersion" xml:"DefaultVersion" require:"true"`
	VersionNumber      *int64                                                                                                     `json:"VersionNumber" xml:"VersionNumber" require:"true"`
	VersionDescription *string                                                                                                    `json:"VersionDescription" xml:"VersionDescription" require:"true"`
	CreatedBy          *string                                                                                                    `json:"CreatedBy" xml:"CreatedBy" require:"true"`
	LaunchTemplateData *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData `json:"LaunchTemplateData" xml:"LaunchTemplateData" require:"true" type:"Struct"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetCreateTime(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.CreateTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetModifiedTime(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetLaunchTemplateId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.LaunchTemplateId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetLaunchTemplateName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.LaunchTemplateName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetDefaultVersion(v bool) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.DefaultVersion = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetVersionNumber(v int64) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.VersionNumber = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetVersionDescription(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.VersionDescription = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetCreatedBy(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.CreatedBy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet) SetLaunchTemplateData(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSet {
	s.LaunchTemplateData = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData struct {
	ImageId                     *string                                                                                                                     `json:"ImageId" xml:"ImageId" require:"true"`
	ImageOwnerAlias             *string                                                                                                                     `json:"ImageOwnerAlias" xml:"ImageOwnerAlias" require:"true"`
	PasswordInherit             *bool                                                                                                                       `json:"PasswordInherit" xml:"PasswordInherit" require:"true"`
	InstanceType                *string                                                                                                                     `json:"InstanceType" xml:"InstanceType" require:"true"`
	SecurityGroupId             *string                                                                                                                     `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	VpcId                       *string                                                                                                                     `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId                   *string                                                                                                                     `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	InstanceName                *string                                                                                                                     `json:"InstanceName" xml:"InstanceName" require:"true"`
	Description                 *string                                                                                                                     `json:"Description" xml:"Description" require:"true"`
	InternetMaxBandwidthIn      *int                                                                                                                        `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn" require:"true"`
	InternetMaxBandwidthOut     *int                                                                                                                        `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut" require:"true"`
	HostName                    *string                                                                                                                     `json:"HostName" xml:"HostName" require:"true"`
	ZoneId                      *string                                                                                                                     `json:"ZoneId" xml:"ZoneId" require:"true"`
	IoOptimized                 *string                                                                                                                     `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	InstanceChargeType          *string                                                                                                                     `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	Period                      *int                                                                                                                        `json:"Period" xml:"Period" require:"true"`
	InternetChargeType          *string                                                                                                                     `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	EnableVmOsConfig            *bool                                                                                                                       `json:"EnableVmOsConfig" xml:"EnableVmOsConfig" require:"true"`
	NetworkType                 *string                                                                                                                     `json:"NetworkType" xml:"NetworkType" require:"true"`
	UserData                    *string                                                                                                                     `json:"UserData" xml:"UserData" require:"true"`
	KeyPairName                 *string                                                                                                                     `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	RamRoleName                 *string                                                                                                                     `json:"RamRoleName" xml:"RamRoleName" require:"true"`
	AutoReleaseTime             *string                                                                                                                     `json:"AutoReleaseTime" xml:"AutoReleaseTime" require:"true"`
	SpotStrategy                *string                                                                                                                     `json:"SpotStrategy" xml:"SpotStrategy" require:"true"`
	SpotPriceLimit              *float32                                                                                                                    `json:"SpotPriceLimit" xml:"SpotPriceLimit" require:"true"`
	SpotDuration                *int                                                                                                                        `json:"SpotDuration" xml:"SpotDuration" require:"true"`
	ResourceGroupId             *string                                                                                                                     `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	SecurityEnhancementStrategy *string                                                                                                                     `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy" require:"true"`
	SystemDisk                  *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk        `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisks                   *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks         `json:"DataDisks" xml:"DataDisks" require:"true" type:"Struct"`
	NetworkInterfaces           *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces `json:"NetworkInterfaces" xml:"NetworkInterfaces" require:"true" type:"Struct"`
	Tags                        *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags              `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetImageId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.ImageId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetImageOwnerAlias(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetPasswordInherit(v bool) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.PasswordInherit = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInstanceType(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InstanceType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSecurityGroupId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetVpcId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.VpcId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetVSwitchId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.VSwitchId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInstanceName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InstanceName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInternetMaxBandwidthIn(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInternetMaxBandwidthOut(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetHostName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.HostName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetZoneId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.ZoneId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetIoOptimized(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.IoOptimized = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInstanceChargeType(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetPeriod(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.Period = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetInternetChargeType(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetEnableVmOsConfig(v bool) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.EnableVmOsConfig = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetNetworkType(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.NetworkType = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetUserData(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.UserData = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetKeyPairName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.KeyPairName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetRamRoleName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.RamRoleName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetAutoReleaseTime(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSpotStrategy(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSpotPriceLimit(v float32) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SpotPriceLimit = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSpotDuration(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SpotDuration = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetResourceGroupId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSecurityEnhancementStrategy(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetSystemDisk(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.SystemDisk = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetDataDisks(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.DataDisks = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetNetworkInterfaces(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.NetworkInterfaces = v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData) SetTags(v *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateData {
	s.Tags = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk struct {
	Size        *int    `json:"Size" xml:"Size" require:"true"`
	Category    *string `json:"Category" xml:"Category" require:"true"`
	DiskName    *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description *string `json:"Description" xml:"Description" require:"true"`
	Iops        *int    `json:"Iops" xml:"Iops" require:"true"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) SetSize(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) SetCategory(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) SetDiskName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk) SetIops(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataSystemDisk {
	s.Iops = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks struct {
	DataDisk []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk `json:"DataDisk" xml:"DataDisk" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks) SetDataDisk(v []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisks {
	s.DataDisk = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk struct {
	Size               *int    `json:"Size" xml:"Size" require:"true"`
	SnapshotId         *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Category           *string `json:"Category" xml:"Category" require:"true"`
	Encrypted          *string `json:"Encrypted" xml:"Encrypted" require:"true"`
	DiskName           *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description        *string `json:"Description" xml:"Description" require:"true"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	Device             *string `json:"Device" xml:"Device" require:"true"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetSize(v int) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.Size = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetSnapshotId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetCategory(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.Category = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetEncrypted(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.Encrypted = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetDiskName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.Description = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetDeleteWithInstance(v bool) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk) SetDevice(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataDataDisksDataDisk {
	s.Device = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces struct {
	NetworkInterface []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface `json:"NetworkInterface" xml:"NetworkInterface" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces) SetNetworkInterface(v []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfaces {
	s.NetworkInterface = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface struct {
	PrimaryIpAddress     *string `json:"PrimaryIpAddress" xml:"PrimaryIpAddress" require:"true"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	NetworkInterfaceName *string `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) SetPrimaryIpAddress(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) SetVSwitchId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) SetSecurityGroupId(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) SetNetworkInterfaceName(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface) SetDescription(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.Description = &v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags struct {
	InstanceTag []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag `json:"InstanceTag" xml:"InstanceTag" require:"true" type:"Repeated"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags) SetInstanceTag(v []*DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTags {
	s.InstanceTag = v
	return s
}

type DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag) GoString() string {
	return s.String()
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag) SetKey(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag {
	s.Key = &v
	return s
}

func (s *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag) SetValue(v string) *DescribeLaunchTemplateVersionsResponseLaunchTemplateVersionSetsLaunchTemplateVersionSetLaunchTemplateDataTagsInstanceTag {
	s.Value = &v
	return s
}

type DeleteLaunchTemplateVersionRequest struct {
	OwnerId              *int64   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string  `json:"RegionId" xml:"RegionId" require:"true"`
	LaunchTemplateId     *string  `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName   *string  `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
	DeleteVersion        []*int64 `json:"DeleteVersion" xml:"DeleteVersion" require:"true" type:"Repeated"`
}

func (s DeleteLaunchTemplateVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateVersionRequest) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateVersionRequest) SetOwnerId(v int64) *DeleteLaunchTemplateVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetResourceOwnerAccount(v string) *DeleteLaunchTemplateVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetResourceOwnerId(v int64) *DeleteLaunchTemplateVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetOwnerAccount(v string) *DeleteLaunchTemplateVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetRegionId(v string) *DeleteLaunchTemplateVersionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetLaunchTemplateId(v string) *DeleteLaunchTemplateVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetLaunchTemplateName(v string) *DeleteLaunchTemplateVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *DeleteLaunchTemplateVersionRequest) SetDeleteVersion(v []*int64) *DeleteLaunchTemplateVersionRequest {
	s.DeleteVersion = v
	return s
}

type DeleteLaunchTemplateVersionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteLaunchTemplateVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateVersionResponse) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateVersionResponse) SetRequestId(v string) *DeleteLaunchTemplateVersionResponse {
	s.RequestId = &v
	return s
}

type DeleteLaunchTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	LaunchTemplateId     *string `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName   *string `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
}

func (s DeleteLaunchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateRequest) SetOwnerId(v int64) *DeleteLaunchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetResourceOwnerAccount(v string) *DeleteLaunchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetResourceOwnerId(v int64) *DeleteLaunchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetOwnerAccount(v string) *DeleteLaunchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetRegionId(v string) *DeleteLaunchTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetLaunchTemplateId(v string) *DeleteLaunchTemplateRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *DeleteLaunchTemplateRequest) SetLaunchTemplateName(v string) *DeleteLaunchTemplateRequest {
	s.LaunchTemplateName = &v
	return s
}

type DeleteLaunchTemplateResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteLaunchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLaunchTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLaunchTemplateResponse) SetRequestId(v string) *DeleteLaunchTemplateResponse {
	s.RequestId = &v
	return s
}

type CreateLaunchTemplateVersionRequest struct {
	OwnerId                     *int64                                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string                                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64                                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                *string                                               `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                    *string                                               `json:"RegionId" xml:"RegionId" require:"true"`
	LaunchTemplateId            *string                                               `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName          *string                                               `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
	VersionDescription          *string                                               `json:"VersionDescription" xml:"VersionDescription"`
	ImageId                     *string                                               `json:"ImageId" xml:"ImageId"`
	ImageOwnerAlias             *string                                               `json:"ImageOwnerAlias" xml:"ImageOwnerAlias"`
	PasswordInherit             *bool                                                 `json:"PasswordInherit" xml:"PasswordInherit"`
	InstanceType                *string                                               `json:"InstanceType" xml:"InstanceType"`
	SecurityGroupId             *string                                               `json:"SecurityGroupId" xml:"SecurityGroupId"`
	VpcId                       *string                                               `json:"VpcId" xml:"VpcId"`
	VSwitchId                   *string                                               `json:"VSwitchId" xml:"VSwitchId"`
	InstanceName                *string                                               `json:"InstanceName" xml:"InstanceName"`
	Description                 *string                                               `json:"Description" xml:"Description"`
	InternetMaxBandwidthIn      *int                                                  `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	InternetMaxBandwidthOut     *int                                                  `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	HostName                    *string                                               `json:"HostName" xml:"HostName"`
	ZoneId                      *string                                               `json:"ZoneId" xml:"ZoneId"`
	SystemDisk                  *CreateLaunchTemplateVersionRequestSystemDisk         `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisk                    []*CreateLaunchTemplateVersionRequestDataDisk         `json:"DataDisk" xml:"DataDisk" type:"Repeated"`
	IoOptimized                 *string                                               `json:"IoOptimized" xml:"IoOptimized"`
	NetworkInterface            []*CreateLaunchTemplateVersionRequestNetworkInterface `json:"NetworkInterface" xml:"NetworkInterface" type:"Repeated"`
	InstanceChargeType          *string                                               `json:"InstanceChargeType" xml:"InstanceChargeType"`
	Period                      *int                                                  `json:"Period" xml:"Period"`
	InternetChargeType          *string                                               `json:"InternetChargeType" xml:"InternetChargeType"`
	EnableVmOsConfig            *bool                                                 `json:"EnableVmOsConfig" xml:"EnableVmOsConfig"`
	NetworkType                 *string                                               `json:"NetworkType" xml:"NetworkType"`
	UserData                    *string                                               `json:"UserData" xml:"UserData"`
	KeyPairName                 *string                                               `json:"KeyPairName" xml:"KeyPairName"`
	RamRoleName                 *string                                               `json:"RamRoleName" xml:"RamRoleName"`
	AutoReleaseTime             *string                                               `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	SpotStrategy                *string                                               `json:"SpotStrategy" xml:"SpotStrategy"`
	SpotPriceLimit              *float32                                              `json:"SpotPriceLimit" xml:"SpotPriceLimit"`
	SpotDuration                *int                                                  `json:"SpotDuration" xml:"SpotDuration"`
	ResourceGroupId             *string                                               `json:"ResourceGroupId" xml:"ResourceGroupId"`
	SecurityEnhancementStrategy *string                                               `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
	Tag                         []*CreateLaunchTemplateVersionRequestTag              `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s CreateLaunchTemplateVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequest) SetOwnerId(v int64) *CreateLaunchTemplateVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceOwnerAccount(v string) *CreateLaunchTemplateVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceOwnerId(v int64) *CreateLaunchTemplateVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetOwnerAccount(v string) *CreateLaunchTemplateVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetRegionId(v string) *CreateLaunchTemplateVersionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetLaunchTemplateId(v string) *CreateLaunchTemplateVersionRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetLaunchTemplateName(v string) *CreateLaunchTemplateVersionRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVersionDescription(v string) *CreateLaunchTemplateVersionRequest {
	s.VersionDescription = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetImageId(v string) *CreateLaunchTemplateVersionRequest {
	s.ImageId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetImageOwnerAlias(v string) *CreateLaunchTemplateVersionRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetPasswordInherit(v bool) *CreateLaunchTemplateVersionRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceType(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSecurityGroupId(v string) *CreateLaunchTemplateVersionRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVpcId(v string) *CreateLaunchTemplateVersionRequest {
	s.VpcId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetVSwitchId(v string) *CreateLaunchTemplateVersionRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceName(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetDescription(v string) *CreateLaunchTemplateVersionRequest {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetMaxBandwidthIn(v int) *CreateLaunchTemplateVersionRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetMaxBandwidthOut(v int) *CreateLaunchTemplateVersionRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetHostName(v string) *CreateLaunchTemplateVersionRequest {
	s.HostName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetZoneId(v string) *CreateLaunchTemplateVersionRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSystemDisk(v *CreateLaunchTemplateVersionRequestSystemDisk) *CreateLaunchTemplateVersionRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetDataDisk(v []*CreateLaunchTemplateVersionRequestDataDisk) *CreateLaunchTemplateVersionRequest {
	s.DataDisk = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetIoOptimized(v string) *CreateLaunchTemplateVersionRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetNetworkInterface(v []*CreateLaunchTemplateVersionRequestNetworkInterface) *CreateLaunchTemplateVersionRequest {
	s.NetworkInterface = v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInstanceChargeType(v string) *CreateLaunchTemplateVersionRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetPeriod(v int) *CreateLaunchTemplateVersionRequest {
	s.Period = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetInternetChargeType(v string) *CreateLaunchTemplateVersionRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetEnableVmOsConfig(v bool) *CreateLaunchTemplateVersionRequest {
	s.EnableVmOsConfig = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetNetworkType(v string) *CreateLaunchTemplateVersionRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetUserData(v string) *CreateLaunchTemplateVersionRequest {
	s.UserData = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetKeyPairName(v string) *CreateLaunchTemplateVersionRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetRamRoleName(v string) *CreateLaunchTemplateVersionRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetAutoReleaseTime(v string) *CreateLaunchTemplateVersionRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotStrategy(v string) *CreateLaunchTemplateVersionRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotPriceLimit(v float32) *CreateLaunchTemplateVersionRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSpotDuration(v int) *CreateLaunchTemplateVersionRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetResourceGroupId(v string) *CreateLaunchTemplateVersionRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetSecurityEnhancementStrategy(v string) *CreateLaunchTemplateVersionRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequest) SetTag(v []*CreateLaunchTemplateVersionRequestTag) *CreateLaunchTemplateVersionRequest {
	s.Tag = v
	return s
}

type CreateLaunchTemplateVersionRequestSystemDisk struct {
	Category    *string `json:"Category" xml:"Category"`
	Size        *int    `json:"Size" xml:"Size"`
	DiskName    *string `json:"DiskName" xml:"DiskName"`
	Description *string `json:"Description" xml:"Description"`
	Iops        *int    `json:"Iops" xml:"Iops"`
}

func (s CreateLaunchTemplateVersionRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetCategory(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetSize(v int) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetDiskName(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetDescription(v string) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestSystemDisk) SetIops(v int) *CreateLaunchTemplateVersionRequestSystemDisk {
	s.Iops = &v
	return s
}

type CreateLaunchTemplateVersionRequestDataDisk struct {
	Size               *int    `json:"Size" xml:"Size" require:"true"`
	SnapshotId         *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Category           *string `json:"Category" xml:"Category" require:"true"`
	Encrypted          *string `json:"Encrypted" xml:"Encrypted" require:"true"`
	DiskName           *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description        *string `json:"Description" xml:"Description" require:"true"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	Device             *string `json:"Device" xml:"Device" require:"true"`
}

func (s CreateLaunchTemplateVersionRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetSize(v int) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetSnapshotId(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetCategory(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetEncrypted(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDiskName(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDescription(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDeleteWithInstance(v bool) *CreateLaunchTemplateVersionRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestDataDisk) SetDevice(v string) *CreateLaunchTemplateVersionRequestDataDisk {
	s.Device = &v
	return s
}

type CreateLaunchTemplateVersionRequestNetworkInterface struct {
	PrimaryIpAddress     *string `json:"PrimaryIpAddress" xml:"PrimaryIpAddress" require:"true"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	NetworkInterfaceName *string `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string `json:"Description" xml:"Description" require:"true"`
}

func (s CreateLaunchTemplateVersionRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetPrimaryIpAddress(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetVSwitchId(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetSecurityGroupId(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetNetworkInterfaceName(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestNetworkInterface) SetDescription(v string) *CreateLaunchTemplateVersionRequestNetworkInterface {
	s.Description = &v
	return s
}

type CreateLaunchTemplateVersionRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateLaunchTemplateVersionRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionRequestTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionRequestTag) SetKey(v string) *CreateLaunchTemplateVersionRequestTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateVersionRequestTag) SetValue(v string) *CreateLaunchTemplateVersionRequestTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateVersionResponse struct {
	RequestId                   *string `json:"RequestId" xml:"RequestId" require:"true"`
	LaunchTemplateVersionNumber *int64  `json:"LaunchTemplateVersionNumber" xml:"LaunchTemplateVersionNumber" require:"true"`
}

func (s CreateLaunchTemplateVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateVersionResponse) SetRequestId(v string) *CreateLaunchTemplateVersionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateLaunchTemplateVersionResponse) SetLaunchTemplateVersionNumber(v int64) *CreateLaunchTemplateVersionResponse {
	s.LaunchTemplateVersionNumber = &v
	return s
}

type CreateLaunchTemplateRequest struct {
	OwnerId                     *int64                                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string                                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64                                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                *string                                        `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                    *string                                        `json:"RegionId" xml:"RegionId" require:"true"`
	TemplateTag                 []*CreateLaunchTemplateRequestTemplateTag      `json:"TemplateTag" xml:"TemplateTag" type:"Repeated"`
	LaunchTemplateName          *string                                        `json:"LaunchTemplateName" xml:"LaunchTemplateName" require:"true"`
	VersionDescription          *string                                        `json:"VersionDescription" xml:"VersionDescription"`
	ImageId                     *string                                        `json:"ImageId" xml:"ImageId"`
	ImageOwnerAlias             *string                                        `json:"ImageOwnerAlias" xml:"ImageOwnerAlias"`
	PasswordInherit             *bool                                          `json:"PasswordInherit" xml:"PasswordInherit"`
	InstanceType                *string                                        `json:"InstanceType" xml:"InstanceType"`
	SecurityGroupId             *string                                        `json:"SecurityGroupId" xml:"SecurityGroupId"`
	VpcId                       *string                                        `json:"VpcId" xml:"VpcId"`
	VSwitchId                   *string                                        `json:"VSwitchId" xml:"VSwitchId"`
	InstanceName                *string                                        `json:"InstanceName" xml:"InstanceName"`
	Description                 *string                                        `json:"Description" xml:"Description"`
	InternetMaxBandwidthIn      *int                                           `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	InternetMaxBandwidthOut     *int                                           `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	HostName                    *string                                        `json:"HostName" xml:"HostName"`
	ZoneId                      *string                                        `json:"ZoneId" xml:"ZoneId"`
	SystemDisk                  *CreateLaunchTemplateRequestSystemDisk         `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisk                    []*CreateLaunchTemplateRequestDataDisk         `json:"DataDisk" xml:"DataDisk" type:"Repeated"`
	IoOptimized                 *string                                        `json:"IoOptimized" xml:"IoOptimized"`
	NetworkInterface            []*CreateLaunchTemplateRequestNetworkInterface `json:"NetworkInterface" xml:"NetworkInterface" type:"Repeated"`
	InstanceChargeType          *string                                        `json:"InstanceChargeType" xml:"InstanceChargeType"`
	Period                      *int                                           `json:"Period" xml:"Period"`
	InternetChargeType          *string                                        `json:"InternetChargeType" xml:"InternetChargeType"`
	EnableVmOsConfig            *bool                                          `json:"EnableVmOsConfig" xml:"EnableVmOsConfig"`
	NetworkType                 *string                                        `json:"NetworkType" xml:"NetworkType"`
	UserData                    *string                                        `json:"UserData" xml:"UserData"`
	KeyPairName                 *string                                        `json:"KeyPairName" xml:"KeyPairName"`
	RamRoleName                 *string                                        `json:"RamRoleName" xml:"RamRoleName"`
	AutoReleaseTime             *string                                        `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	SpotStrategy                *string                                        `json:"SpotStrategy" xml:"SpotStrategy"`
	SpotPriceLimit              *float32                                       `json:"SpotPriceLimit" xml:"SpotPriceLimit"`
	SpotDuration                *int                                           `json:"SpotDuration" xml:"SpotDuration"`
	ResourceGroupId             *string                                        `json:"ResourceGroupId" xml:"ResourceGroupId"`
	TemplateResourceGroupId     *string                                        `json:"TemplateResourceGroupId" xml:"TemplateResourceGroupId"`
	SecurityEnhancementStrategy *string                                        `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
	Tag                         []*CreateLaunchTemplateRequestTag              `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s CreateLaunchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequest) SetOwnerId(v int64) *CreateLaunchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceOwnerAccount(v string) *CreateLaunchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceOwnerId(v int64) *CreateLaunchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetOwnerAccount(v string) *CreateLaunchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetRegionId(v string) *CreateLaunchTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTemplateTag(v []*CreateLaunchTemplateRequestTemplateTag) *CreateLaunchTemplateRequest {
	s.TemplateTag = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetLaunchTemplateName(v string) *CreateLaunchTemplateRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVersionDescription(v string) *CreateLaunchTemplateRequest {
	s.VersionDescription = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetImageId(v string) *CreateLaunchTemplateRequest {
	s.ImageId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetImageOwnerAlias(v string) *CreateLaunchTemplateRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetPasswordInherit(v bool) *CreateLaunchTemplateRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceType(v string) *CreateLaunchTemplateRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSecurityGroupId(v string) *CreateLaunchTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVpcId(v string) *CreateLaunchTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetVSwitchId(v string) *CreateLaunchTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceName(v string) *CreateLaunchTemplateRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetDescription(v string) *CreateLaunchTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetMaxBandwidthIn(v int) *CreateLaunchTemplateRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetMaxBandwidthOut(v int) *CreateLaunchTemplateRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetHostName(v string) *CreateLaunchTemplateRequest {
	s.HostName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetZoneId(v string) *CreateLaunchTemplateRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSystemDisk(v *CreateLaunchTemplateRequestSystemDisk) *CreateLaunchTemplateRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetDataDisk(v []*CreateLaunchTemplateRequestDataDisk) *CreateLaunchTemplateRequest {
	s.DataDisk = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetIoOptimized(v string) *CreateLaunchTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetNetworkInterface(v []*CreateLaunchTemplateRequestNetworkInterface) *CreateLaunchTemplateRequest {
	s.NetworkInterface = v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInstanceChargeType(v string) *CreateLaunchTemplateRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetPeriod(v int) *CreateLaunchTemplateRequest {
	s.Period = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetInternetChargeType(v string) *CreateLaunchTemplateRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetEnableVmOsConfig(v bool) *CreateLaunchTemplateRequest {
	s.EnableVmOsConfig = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetNetworkType(v string) *CreateLaunchTemplateRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetUserData(v string) *CreateLaunchTemplateRequest {
	s.UserData = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetKeyPairName(v string) *CreateLaunchTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetRamRoleName(v string) *CreateLaunchTemplateRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetAutoReleaseTime(v string) *CreateLaunchTemplateRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotStrategy(v string) *CreateLaunchTemplateRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotPriceLimit(v float32) *CreateLaunchTemplateRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSpotDuration(v int) *CreateLaunchTemplateRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetResourceGroupId(v string) *CreateLaunchTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTemplateResourceGroupId(v string) *CreateLaunchTemplateRequest {
	s.TemplateResourceGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetSecurityEnhancementStrategy(v string) *CreateLaunchTemplateRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateLaunchTemplateRequest) SetTag(v []*CreateLaunchTemplateRequestTag) *CreateLaunchTemplateRequest {
	s.Tag = v
	return s
}

type CreateLaunchTemplateRequestTemplateTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateLaunchTemplateRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestTemplateTag) SetKey(v string) *CreateLaunchTemplateRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateRequestTemplateTag) SetValue(v string) *CreateLaunchTemplateRequestTemplateTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateRequestSystemDisk struct {
	Category    *string `json:"Category" xml:"Category"`
	Size        *int    `json:"Size" xml:"Size"`
	DiskName    *string `json:"DiskName" xml:"DiskName"`
	Description *string `json:"Description" xml:"Description"`
	Iops        *int    `json:"Iops" xml:"Iops"`
}

func (s CreateLaunchTemplateRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetCategory(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetSize(v int) *CreateLaunchTemplateRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetDiskName(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetDescription(v string) *CreateLaunchTemplateRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequestSystemDisk) SetIops(v int) *CreateLaunchTemplateRequestSystemDisk {
	s.Iops = &v
	return s
}

type CreateLaunchTemplateRequestDataDisk struct {
	Size               *int    `json:"Size" xml:"Size" require:"true"`
	SnapshotId         *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Category           *string `json:"Category" xml:"Category" require:"true"`
	Encrypted          *string `json:"Encrypted" xml:"Encrypted" require:"true"`
	DiskName           *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description        *string `json:"Description" xml:"Description" require:"true"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	Device             *string `json:"Device" xml:"Device" require:"true"`
}

func (s CreateLaunchTemplateRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestDataDisk) SetSize(v int) *CreateLaunchTemplateRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetSnapshotId(v string) *CreateLaunchTemplateRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetCategory(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetEncrypted(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDiskName(v string) *CreateLaunchTemplateRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDescription(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDeleteWithInstance(v bool) *CreateLaunchTemplateRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateLaunchTemplateRequestDataDisk) SetDevice(v string) *CreateLaunchTemplateRequestDataDisk {
	s.Device = &v
	return s
}

type CreateLaunchTemplateRequestNetworkInterface struct {
	PrimaryIpAddress     *string `json:"PrimaryIpAddress" xml:"PrimaryIpAddress" require:"true"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	NetworkInterfaceName *string `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string `json:"Description" xml:"Description" require:"true"`
}

func (s CreateLaunchTemplateRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetPrimaryIpAddress(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetVSwitchId(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetSecurityGroupId(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetNetworkInterfaceName(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateLaunchTemplateRequestNetworkInterface) SetDescription(v string) *CreateLaunchTemplateRequestNetworkInterface {
	s.Description = &v
	return s
}

type CreateLaunchTemplateRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateLaunchTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateRequestTag) SetKey(v string) *CreateLaunchTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *CreateLaunchTemplateRequestTag) SetValue(v string) *CreateLaunchTemplateRequestTag {
	s.Value = &v
	return s
}

type CreateLaunchTemplateResponse struct {
	RequestId        *string `json:"RequestId" xml:"RequestId" require:"true"`
	LaunchTemplateId *string `json:"LaunchTemplateId" xml:"LaunchTemplateId" require:"true"`
}

func (s CreateLaunchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLaunchTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLaunchTemplateResponse) SetRequestId(v string) *CreateLaunchTemplateResponse {
	s.RequestId = &v
	return s
}

func (s *CreateLaunchTemplateResponse) SetLaunchTemplateId(v string) *CreateLaunchTemplateResponse {
	s.LaunchTemplateId = &v
	return s
}

type InstallCloudAssistantRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
}

func (s InstallCloudAssistantRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAssistantRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantRequest) SetOwnerId(v int64) *InstallCloudAssistantRequest {
	s.OwnerId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetResourceOwnerAccount(v string) *InstallCloudAssistantRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetResourceOwnerId(v int64) *InstallCloudAssistantRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetOwnerAccount(v string) *InstallCloudAssistantRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetRegionId(v string) *InstallCloudAssistantRequest {
	s.RegionId = &v
	return s
}

func (s *InstallCloudAssistantRequest) SetInstanceId(v []*string) *InstallCloudAssistantRequest {
	s.InstanceId = v
	return s
}

type InstallCloudAssistantResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s InstallCloudAssistantResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudAssistantResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudAssistantResponse) SetRequestId(v string) *InstallCloudAssistantResponse {
	s.RequestId = &v
	return s
}

type DescribeCloudAssistantStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
}

func (s DescribeCloudAssistantStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusRequest) SetOwnerId(v int64) *DescribeCloudAssistantStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetResourceOwnerAccount(v string) *DescribeCloudAssistantStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetResourceOwnerId(v int64) *DescribeCloudAssistantStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetOwnerAccount(v string) *DescribeCloudAssistantStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetRegionId(v string) *DescribeCloudAssistantStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudAssistantStatusRequest) SetInstanceId(v []*string) *DescribeCloudAssistantStatusRequest {
	s.InstanceId = v
	return s
}

type DescribeCloudAssistantStatusResponse struct {
	RequestId                       *string                                                              `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceCloudAssistantStatusSet *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet `json:"InstanceCloudAssistantStatusSet" xml:"InstanceCloudAssistantStatusSet" require:"true" type:"Struct"`
}

func (s DescribeCloudAssistantStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponse) SetRequestId(v string) *DescribeCloudAssistantStatusResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponse) SetInstanceCloudAssistantStatusSet(v *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet) *DescribeCloudAssistantStatusResponse {
	s.InstanceCloudAssistantStatusSet = v
	return s
}

type DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet struct {
	InstanceCloudAssistantStatus []*DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus `json:"InstanceCloudAssistantStatus" xml:"InstanceCloudAssistantStatus" require:"true" type:"Repeated"`
}

func (s DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet) SetInstanceCloudAssistantStatus(v []*DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSet {
	s.InstanceCloudAssistantStatus = v
	return s
}

type DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus struct {
	InstanceId            *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	CloudAssistantStatus  *string `json:"CloudAssistantStatus" xml:"CloudAssistantStatus" require:"true"`
	CloudAssistantVersion *string `json:"CloudAssistantVersion" xml:"CloudAssistantVersion" require:"true"`
}

func (s DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) GoString() string {
	return s.String()
}

func (s *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) SetInstanceId(v string) *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) SetCloudAssistantStatus(v string) *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus {
	s.CloudAssistantStatus = &v
	return s
}

func (s *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus) SetCloudAssistantVersion(v string) *DescribeCloudAssistantStatusResponseInstanceCloudAssistantStatusSetInstanceCloudAssistantStatus {
	s.CloudAssistantVersion = &v
	return s
}

type UnassignPrivateIpAddressesRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	PrivateIpAddress     []*string `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true" type:"Repeated"`
}

func (s UnassignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesRequest) SetOwnerId(v int64) *UnassignPrivateIpAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetResourceOwnerAccount(v string) *UnassignPrivateIpAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetResourceOwnerId(v int64) *UnassignPrivateIpAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetOwnerAccount(v string) *UnassignPrivateIpAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetRegionId(v string) *UnassignPrivateIpAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *UnassignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *UnassignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

type UnassignPrivateIpAddressesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UnassignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponse) SetRequestId(v string) *UnassignPrivateIpAddressesResponse {
	s.RequestId = &v
	return s
}

type AssignPrivateIpAddressesRequest struct {
	OwnerId                        *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount           *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                   *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                       *string   `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId             *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	PrivateIpAddress               []*string `json:"PrivateIpAddress" xml:"PrivateIpAddress" type:"Repeated"`
	SecondaryPrivateIpAddressCount *int      `json:"SecondaryPrivateIpAddressCount" xml:"SecondaryPrivateIpAddressCount"`
}

func (s AssignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesRequest) SetOwnerId(v int64) *AssignPrivateIpAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetResourceOwnerAccount(v string) *AssignPrivateIpAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetResourceOwnerId(v int64) *AssignPrivateIpAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetOwnerAccount(v string) *AssignPrivateIpAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetRegionId(v string) *AssignPrivateIpAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *AssignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetSecondaryPrivateIpAddressCount(v int) *AssignPrivateIpAddressesRequest {
	s.SecondaryPrivateIpAddressCount = &v
	return s
}

type AssignPrivateIpAddressesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AssignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponse) SetRequestId(v string) *AssignPrivateIpAddressesResponse {
	s.RequestId = &v
	return s
}

type DescribeNetworkInterfacePermissionsRequest struct {
	OwnerId                      *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount         *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId              *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                 *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                     *string   `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId           *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId"`
	NetworkInterfacePermissionId []*string `json:"NetworkInterfacePermissionId" xml:"NetworkInterfacePermissionId" type:"Repeated"`
	PageNumber                   *int      `json:"PageNumber" xml:"PageNumber"`
	PageSize                     *int      `json:"PageSize" xml:"PageSize"`
}

func (s DescribeNetworkInterfacePermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetOwnerId(v int64) *DescribeNetworkInterfacePermissionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfacePermissionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetOwnerAccount(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetRegionId(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacePermissionsRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetNetworkInterfacePermissionId(v []*string) *DescribeNetworkInterfacePermissionsRequest {
	s.NetworkInterfacePermissionId = v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetPageNumber(v int) *DescribeNetworkInterfacePermissionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsRequest) SetPageSize(v int) *DescribeNetworkInterfacePermissionsRequest {
	s.PageSize = &v
	return s
}

type DescribeNetworkInterfacePermissionsResponse struct {
	RequestId                   *string                                                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount                  *int                                                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber                  *int                                                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize                    *int                                                                    `json:"PageSize" xml:"PageSize" require:"true"`
	NetworkInterfacePermissions *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions `json:"NetworkInterfacePermissions" xml:"NetworkInterfacePermissions" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfacePermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetRequestId(v string) *DescribeNetworkInterfacePermissionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetTotalCount(v int) *DescribeNetworkInterfacePermissionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetPageNumber(v int) *DescribeNetworkInterfacePermissionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetPageSize(v int) *DescribeNetworkInterfacePermissionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponse) SetNetworkInterfacePermissions(v *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions) *DescribeNetworkInterfacePermissionsResponse {
	s.NetworkInterfacePermissions = v
	return s
}

type DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions struct {
	NetworkInterfacePermission []*DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission `json:"NetworkInterfacePermission" xml:"NetworkInterfacePermission" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions) SetNetworkInterfacePermission(v []*DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissions {
	s.NetworkInterfacePermission = v
	return s
}

type DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission struct {
	AccountId                    *int64  `json:"AccountId" xml:"AccountId" require:"true"`
	ServiceName                  *string `json:"ServiceName" xml:"ServiceName" require:"true"`
	NetworkInterfaceId           *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId" xml:"NetworkInterfacePermissionId" require:"true"`
	Permission                   *string `json:"Permission" xml:"Permission" require:"true"`
	PermissionState              *string `json:"PermissionState" xml:"PermissionState" require:"true"`
}

func (s DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetAccountId(v int64) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.AccountId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetServiceName(v string) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.ServiceName = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetNetworkInterfacePermissionId(v string) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetPermission(v string) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.Permission = &v
	return s
}

func (s *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission) SetPermissionState(v string) *DescribeNetworkInterfacePermissionsResponseNetworkInterfacePermissionsNetworkInterfacePermission {
	s.PermissionState = &v
	return s
}

type DeleteNetworkInterfacePermissionRequest struct {
	OwnerId                      *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount         *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId              *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                 *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                     *string `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId" xml:"NetworkInterfacePermissionId" require:"true"`
	Force                        *bool   `json:"Force" xml:"Force"`
}

func (s DeleteNetworkInterfacePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacePermissionRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacePermissionRequest) SetOwnerId(v int64) *DeleteNetworkInterfacePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetResourceOwnerAccount(v string) *DeleteNetworkInterfacePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetResourceOwnerId(v int64) *DeleteNetworkInterfacePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetOwnerAccount(v string) *DeleteNetworkInterfacePermissionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetRegionId(v string) *DeleteNetworkInterfacePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetNetworkInterfacePermissionId(v string) *DeleteNetworkInterfacePermissionRequest {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *DeleteNetworkInterfacePermissionRequest) SetForce(v bool) *DeleteNetworkInterfacePermissionRequest {
	s.Force = &v
	return s
}

type DeleteNetworkInterfacePermissionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteNetworkInterfacePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacePermissionResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacePermissionResponse) SetRequestId(v string) *DeleteNetworkInterfacePermissionResponse {
	s.RequestId = &v
	return s
}

type CreateNetworkInterfacePermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	AccountId            *int64  `json:"AccountId" xml:"AccountId" require:"true"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Permission           *string `json:"Permission" xml:"Permission" require:"true"`
}

func (s CreateNetworkInterfacePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionRequest) SetOwnerId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetResourceOwnerAccount(v string) *CreateNetworkInterfacePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetResourceOwnerId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetOwnerAccount(v string) *CreateNetworkInterfacePermissionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetRegionId(v string) *CreateNetworkInterfacePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetAccountId(v int64) *CreateNetworkInterfacePermissionRequest {
	s.AccountId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetNetworkInterfaceId(v string) *CreateNetworkInterfacePermissionRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionRequest) SetPermission(v string) *CreateNetworkInterfacePermissionRequest {
	s.Permission = &v
	return s
}

type CreateNetworkInterfacePermissionResponse struct {
	RequestId                  *string                                                             `json:"RequestId" xml:"RequestId" require:"true"`
	NetworkInterfacePermission *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission `json:"NetworkInterfacePermission" xml:"NetworkInterfacePermission" require:"true" type:"Struct"`
}

func (s CreateNetworkInterfacePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionResponse) SetRequestId(v string) *CreateNetworkInterfacePermissionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponse) SetNetworkInterfacePermission(v *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) *CreateNetworkInterfacePermissionResponse {
	s.NetworkInterfacePermission = v
	return s
}

type CreateNetworkInterfacePermissionResponseNetworkInterfacePermission struct {
	AccountId                    *int64  `json:"AccountId" xml:"AccountId" require:"true"`
	ServiceName                  *string `json:"ServiceName" xml:"ServiceName" require:"true"`
	NetworkInterfaceId           *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	NetworkInterfacePermissionId *string `json:"NetworkInterfacePermissionId" xml:"NetworkInterfacePermissionId" require:"true"`
	Permission                   *string `json:"Permission" xml:"Permission" require:"true"`
	PermissionState              *string `json:"PermissionState" xml:"PermissionState" require:"true"`
}

func (s CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetAccountId(v int64) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.AccountId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetServiceName(v string) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.ServiceName = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetNetworkInterfaceId(v string) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.NetworkInterfaceId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetNetworkInterfacePermissionId(v string) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.NetworkInterfacePermissionId = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetPermission(v string) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.Permission = &v
	return s
}

func (s *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission) SetPermissionState(v string) *CreateNetworkInterfacePermissionResponseNetworkInterfacePermission {
	s.PermissionState = &v
	return s
}

type GetInstanceScreenshotRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	WakeUp               *bool   `json:"WakeUp" xml:"WakeUp"`
}

func (s GetInstanceScreenshotRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceScreenshotRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceScreenshotRequest) SetOwnerId(v int64) *GetInstanceScreenshotRequest {
	s.OwnerId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetResourceOwnerAccount(v string) *GetInstanceScreenshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetResourceOwnerId(v int64) *GetInstanceScreenshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetOwnerAccount(v string) *GetInstanceScreenshotRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetRegionId(v string) *GetInstanceScreenshotRequest {
	s.RegionId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetInstanceId(v string) *GetInstanceScreenshotRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceScreenshotRequest) SetWakeUp(v bool) *GetInstanceScreenshotRequest {
	s.WakeUp = &v
	return s
}

type GetInstanceScreenshotResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Screenshot *string `json:"Screenshot" xml:"Screenshot" require:"true"`
}

func (s GetInstanceScreenshotResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceScreenshotResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceScreenshotResponse) SetRequestId(v string) *GetInstanceScreenshotResponse {
	s.RequestId = &v
	return s
}

func (s *GetInstanceScreenshotResponse) SetInstanceId(v string) *GetInstanceScreenshotResponse {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceScreenshotResponse) SetScreenshot(v string) *GetInstanceScreenshotResponse {
	s.Screenshot = &v
	return s
}

type GetInstanceConsoleOutputRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RemoveSymbols        *bool   `json:"RemoveSymbols" xml:"RemoveSymbols"`
}

func (s GetInstanceConsoleOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsoleOutputRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceConsoleOutputRequest) SetOwnerId(v int64) *GetInstanceConsoleOutputRequest {
	s.OwnerId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetResourceOwnerAccount(v string) *GetInstanceConsoleOutputRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetResourceOwnerId(v int64) *GetInstanceConsoleOutputRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetOwnerAccount(v string) *GetInstanceConsoleOutputRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetRegionId(v string) *GetInstanceConsoleOutputRequest {
	s.RegionId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetInstanceId(v string) *GetInstanceConsoleOutputRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceConsoleOutputRequest) SetRemoveSymbols(v bool) *GetInstanceConsoleOutputRequest {
	s.RemoveSymbols = &v
	return s
}

type GetInstanceConsoleOutputResponse struct {
	RequestId      *string `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceId     *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	ConsoleOutput  *string `json:"ConsoleOutput" xml:"ConsoleOutput" require:"true"`
	LastUpdateTime *string `json:"LastUpdateTime" xml:"LastUpdateTime" require:"true"`
}

func (s GetInstanceConsoleOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsoleOutputResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceConsoleOutputResponse) SetRequestId(v string) *GetInstanceConsoleOutputResponse {
	s.RequestId = &v
	return s
}

func (s *GetInstanceConsoleOutputResponse) SetInstanceId(v string) *GetInstanceConsoleOutputResponse {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceConsoleOutputResponse) SetConsoleOutput(v string) *GetInstanceConsoleOutputResponse {
	s.ConsoleOutput = &v
	return s
}

func (s *GetInstanceConsoleOutputResponse) SetLastUpdateTime(v string) *GetInstanceConsoleOutputResponse {
	s.LastUpdateTime = &v
	return s
}

type DescribeResourcesModificationRequest struct {
	OwnerId              *int64   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string  `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceId           *string  `json:"ResourceId" xml:"ResourceId" require:"true"`
	MigrateAcrossZone    *bool    `json:"MigrateAcrossZone" xml:"MigrateAcrossZone"`
	DestinationResource  *string  `json:"DestinationResource" xml:"DestinationResource" require:"true"`
	OperationType        *string  `json:"OperationType" xml:"OperationType"`
	InstanceType         *string  `json:"InstanceType" xml:"InstanceType"`
	Cores                *int     `json:"Cores" xml:"Cores"`
	Memory               *float32 `json:"Memory" xml:"Memory"`
}

func (s DescribeResourcesModificationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationRequest) SetOwnerId(v int64) *DescribeResourcesModificationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceOwnerAccount(v string) *DescribeResourcesModificationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceOwnerId(v int64) *DescribeResourcesModificationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetOwnerAccount(v string) *DescribeResourcesModificationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetRegionId(v string) *DescribeResourcesModificationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetResourceId(v string) *DescribeResourcesModificationRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetMigrateAcrossZone(v bool) *DescribeResourcesModificationRequest {
	s.MigrateAcrossZone = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetDestinationResource(v string) *DescribeResourcesModificationRequest {
	s.DestinationResource = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetOperationType(v string) *DescribeResourcesModificationRequest {
	s.OperationType = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetInstanceType(v string) *DescribeResourcesModificationRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetCores(v int) *DescribeResourcesModificationRequest {
	s.Cores = &v
	return s
}

func (s *DescribeResourcesModificationRequest) SetMemory(v float32) *DescribeResourcesModificationRequest {
	s.Memory = &v
	return s
}

type DescribeResourcesModificationResponse struct {
	RequestId      *string                                              `json:"RequestId" xml:"RequestId" require:"true"`
	AvailableZones *DescribeResourcesModificationResponseAvailableZones `json:"AvailableZones" xml:"AvailableZones" require:"true" type:"Struct"`
}

func (s DescribeResourcesModificationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponse) SetRequestId(v string) *DescribeResourcesModificationResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeResourcesModificationResponse) SetAvailableZones(v *DescribeResourcesModificationResponseAvailableZones) *DescribeResourcesModificationResponse {
	s.AvailableZones = v
	return s
}

type DescribeResourcesModificationResponseAvailableZones struct {
	AvailableZone []*DescribeResourcesModificationResponseAvailableZonesAvailableZone `json:"AvailableZone" xml:"AvailableZone" require:"true" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZones) SetAvailableZone(v []*DescribeResourcesModificationResponseAvailableZonesAvailableZone) *DescribeResourcesModificationResponseAvailableZones {
	s.AvailableZone = v
	return s
}

type DescribeResourcesModificationResponseAvailableZonesAvailableZone struct {
	RegionId           *string                                                                             `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId             *string                                                                             `json:"ZoneId" xml:"ZoneId" require:"true"`
	Status             *string                                                                             `json:"Status" xml:"Status" require:"true"`
	StatusCategory     *string                                                                             `json:"StatusCategory" xml:"StatusCategory" require:"true"`
	AvailableResources *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources `json:"AvailableResources" xml:"AvailableResources" require:"true" type:"Struct"`
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZone) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZone) SetRegionId(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZone {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZone) SetZoneId(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZone) SetStatus(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZone {
	s.Status = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZone) SetStatusCategory(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZone {
	s.StatusCategory = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZone) SetAvailableResources(v *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources) *DescribeResourcesModificationResponseAvailableZonesAvailableZone {
	s.AvailableResources = v
	return s
}

type DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources struct {
	AvailableResource []*DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource `json:"AvailableResource" xml:"AvailableResource" require:"true" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources) SetAvailableResource(v []*DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResources {
	s.AvailableResource = v
	return s
}

type DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource struct {
	Type               *string                                                                                                                `json:"Type" xml:"Type" require:"true"`
	SupportedResources *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources `json:"SupportedResources" xml:"SupportedResources" require:"true" type:"Struct"`
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) SetType(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource {
	s.Type = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) SetSupportedResources(v *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource {
	s.SupportedResources = v
	return s
}

type DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources struct {
	SupportedResource []*DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource `json:"SupportedResource" xml:"SupportedResource" require:"true" type:"Repeated"`
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) SetSupportedResource(v []*DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources {
	s.SupportedResource = v
	return s
}

type DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource struct {
	Value          *string `json:"Value" xml:"Value" require:"true"`
	Status         *string `json:"Status" xml:"Status" require:"true"`
	StatusCategory *string `json:"StatusCategory" xml:"StatusCategory" require:"true"`
	Min            *int    `json:"Min" xml:"Min" require:"true"`
	Max            *int    `json:"Max" xml:"Max" require:"true"`
	Unit           *string `json:"Unit" xml:"Unit" require:"true"`
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) GoString() string {
	return s.String()
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetValue(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Value = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetStatus(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Status = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetStatusCategory(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.StatusCategory = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetMin(v int) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Min = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetMax(v int) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Max = &v
	return s
}

func (s *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetUnit(v string) *DescribeResourcesModificationResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Unit = &v
	return s
}

type DescribeBandwidthLimitationRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	SpotStrategy         *string `json:"SpotStrategy" xml:"SpotStrategy"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType"`
	ResourceId           *string `json:"ResourceId" xml:"ResourceId"`
	OperationType        *string `json:"OperationType" xml:"OperationType"`
}

func (s DescribeBandwidthLimitationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationRequest) SetOwnerId(v int64) *DescribeBandwidthLimitationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceOwnerAccount(v string) *DescribeBandwidthLimitationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceOwnerId(v int64) *DescribeBandwidthLimitationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetOwnerAccount(v string) *DescribeBandwidthLimitationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetRegionId(v string) *DescribeBandwidthLimitationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetInstanceChargeType(v string) *DescribeBandwidthLimitationRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetSpotStrategy(v string) *DescribeBandwidthLimitationRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetInstanceType(v string) *DescribeBandwidthLimitationRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetResourceId(v string) *DescribeBandwidthLimitationRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeBandwidthLimitationRequest) SetOperationType(v string) *DescribeBandwidthLimitationRequest {
	s.OperationType = &v
	return s
}

type DescribeBandwidthLimitationResponse struct {
	RequestId  *string                                        `json:"RequestId" xml:"RequestId" require:"true"`
	Bandwidths *DescribeBandwidthLimitationResponseBandwidths `json:"Bandwidths" xml:"Bandwidths" require:"true" type:"Struct"`
}

func (s DescribeBandwidthLimitationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponse) SetRequestId(v string) *DescribeBandwidthLimitationResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwidthLimitationResponse) SetBandwidths(v *DescribeBandwidthLimitationResponseBandwidths) *DescribeBandwidthLimitationResponse {
	s.Bandwidths = v
	return s
}

type DescribeBandwidthLimitationResponseBandwidths struct {
	Bandwidth []*DescribeBandwidthLimitationResponseBandwidthsBandwidth `json:"Bandwidth" xml:"Bandwidth" require:"true" type:"Repeated"`
}

func (s DescribeBandwidthLimitationResponseBandwidths) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponseBandwidths) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponseBandwidths) SetBandwidth(v []*DescribeBandwidthLimitationResponseBandwidthsBandwidth) *DescribeBandwidthLimitationResponseBandwidths {
	s.Bandwidth = v
	return s
}

type DescribeBandwidthLimitationResponseBandwidthsBandwidth struct {
	InternetChargeType *string `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	Min                *int    `json:"Min" xml:"Min" require:"true"`
	Max                *int    `json:"Max" xml:"Max" require:"true"`
	Unit               *string `json:"Unit" xml:"Unit" require:"true"`
}

func (s DescribeBandwidthLimitationResponseBandwidthsBandwidth) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthLimitationResponseBandwidthsBandwidth) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthLimitationResponseBandwidthsBandwidth) SetInternetChargeType(v string) *DescribeBandwidthLimitationResponseBandwidthsBandwidth {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBandwidthsBandwidth) SetMin(v int) *DescribeBandwidthLimitationResponseBandwidthsBandwidth {
	s.Min = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBandwidthsBandwidth) SetMax(v int) *DescribeBandwidthLimitationResponseBandwidthsBandwidth {
	s.Max = &v
	return s
}

func (s *DescribeBandwidthLimitationResponseBandwidthsBandwidth) SetUnit(v string) *DescribeBandwidthLimitationResponseBandwidthsBandwidth {
	s.Unit = &v
	return s
}

type DescribeAvailableResourceRequest struct {
	OwnerId              *int64   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string  `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceChargeType   *string  `json:"InstanceChargeType" xml:"InstanceChargeType"`
	SpotStrategy         *string  `json:"SpotStrategy" xml:"SpotStrategy"`
	SpotDuration         *int     `json:"SpotDuration" xml:"SpotDuration"`
	DestinationResource  *string  `json:"DestinationResource" xml:"DestinationResource" require:"true"`
	ZoneId               *string  `json:"ZoneId" xml:"ZoneId"`
	IoOptimized          *string  `json:"IoOptimized" xml:"IoOptimized"`
	DedicatedHostId      *string  `json:"DedicatedHostId" xml:"DedicatedHostId"`
	InstanceType         *string  `json:"InstanceType" xml:"InstanceType"`
	SystemDiskCategory   *string  `json:"SystemDiskCategory" xml:"SystemDiskCategory"`
	DataDiskCategory     *string  `json:"DataDiskCategory" xml:"DataDiskCategory"`
	NetworkCategory      *string  `json:"NetworkCategory" xml:"NetworkCategory"`
	Cores                *int     `json:"Cores" xml:"Cores"`
	Memory               *float32 `json:"Memory" xml:"Memory"`
	ResourceType         *string  `json:"ResourceType" xml:"ResourceType"`
	Scope                *string  `json:"Scope" xml:"Scope"`
}

func (s DescribeAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceRequest) SetOwnerId(v int64) *DescribeAvailableResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceOwnerAccount(v string) *DescribeAvailableResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceOwnerId(v int64) *DescribeAvailableResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetOwnerAccount(v string) *DescribeAvailableResourceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetRegionId(v string) *DescribeAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceChargeType(v string) *DescribeAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSpotStrategy(v string) *DescribeAvailableResourceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSpotDuration(v int) *DescribeAvailableResourceRequest {
	s.SpotDuration = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDestinationResource(v string) *DescribeAvailableResourceRequest {
	s.DestinationResource = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetZoneId(v string) *DescribeAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetIoOptimized(v string) *DescribeAvailableResourceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDedicatedHostId(v string) *DescribeAvailableResourceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceType(v string) *DescribeAvailableResourceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetSystemDiskCategory(v string) *DescribeAvailableResourceRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDataDiskCategory(v string) *DescribeAvailableResourceRequest {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetNetworkCategory(v string) *DescribeAvailableResourceRequest {
	s.NetworkCategory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetCores(v int) *DescribeAvailableResourceRequest {
	s.Cores = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetMemory(v float32) *DescribeAvailableResourceRequest {
	s.Memory = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetResourceType(v string) *DescribeAvailableResourceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetScope(v string) *DescribeAvailableResourceRequest {
	s.Scope = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	RequestId      *string                                          `json:"RequestId" xml:"RequestId" require:"true"`
	AvailableZones *DescribeAvailableResourceResponseAvailableZones `json:"AvailableZones" xml:"AvailableZones" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetRequestId(v string) *DescribeAvailableResourceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponse) SetAvailableZones(v *DescribeAvailableResourceResponseAvailableZones) *DescribeAvailableResourceResponse {
	s.AvailableZones = v
	return s
}

type DescribeAvailableResourceResponseAvailableZones struct {
	AvailableZone []*DescribeAvailableResourceResponseAvailableZonesAvailableZone `json:"AvailableZone" xml:"AvailableZone" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZones) SetAvailableZone(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZone) *DescribeAvailableResourceResponseAvailableZones {
	s.AvailableZone = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZone struct {
	RegionId           *string                                                                         `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId             *string                                                                         `json:"ZoneId" xml:"ZoneId" require:"true"`
	Status             *string                                                                         `json:"Status" xml:"Status" require:"true"`
	StatusCategory     *string                                                                         `json:"StatusCategory" xml:"StatusCategory" require:"true"`
	AvailableResources *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources `json:"AvailableResources" xml:"AvailableResources" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZone) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetRegionId(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetZoneId(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetStatus(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetStatusCategory(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.StatusCategory = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetAvailableResources(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.AvailableResources = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources struct {
	AvailableResource []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource `json:"AvailableResource" xml:"AvailableResource" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources) SetAvailableResource(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResources {
	s.AvailableResource = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource struct {
	Type               *string                                                                                                            `json:"Type" xml:"Type" require:"true"`
	SupportedResources *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources `json:"SupportedResources" xml:"SupportedResources" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) SetType(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource {
	s.Type = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource) SetSupportedResources(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResource {
	s.SupportedResources = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources struct {
	SupportedResource []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource `json:"SupportedResource" xml:"SupportedResource" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources) SetSupportedResource(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResources {
	s.SupportedResource = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource struct {
	Value          *string `json:"Value" xml:"Value" require:"true"`
	Status         *string `json:"Status" xml:"Status" require:"true"`
	StatusCategory *string `json:"StatusCategory" xml:"StatusCategory" require:"true"`
	Min            *int    `json:"Min" xml:"Min" require:"true"`
	Max            *int    `json:"Max" xml:"Max" require:"true"`
	Unit           *string `json:"Unit" xml:"Unit" require:"true"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetValue(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Value = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetStatus(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetStatusCategory(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.StatusCategory = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetMin(v int) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Min = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetMax(v int) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Max = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource) SetUnit(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneAvailableResourcesAvailableResourceSupportedResourcesSupportedResource {
	s.Unit = &v
	return s
}

type ReActivateInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ReActivateInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ReActivateInstancesRequest) GoString() string {
	return s.String()
}

func (s *ReActivateInstancesRequest) SetOwnerId(v int64) *ReActivateInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetResourceOwnerAccount(v string) *ReActivateInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReActivateInstancesRequest) SetResourceOwnerId(v int64) *ReActivateInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetRegionId(v string) *ReActivateInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetInstanceId(v string) *ReActivateInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *ReActivateInstancesRequest) SetOwnerAccount(v string) *ReActivateInstancesRequest {
	s.OwnerAccount = &v
	return s
}

type ReActivateInstancesResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReActivateInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ReActivateInstancesResponse) GoString() string {
	return s.String()
}

func (s *ReActivateInstancesResponse) SetRequestId(v string) *ReActivateInstancesResponse {
	s.RequestId = &v
	return s
}

type DescribeInstancesFullStatusRequest struct {
	OwnerId              *int64                                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                             `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                             `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           []*string                                           `json:"InstanceId" xml:"InstanceId" type:"Repeated"`
	EventId              []*string                                           `json:"EventId" xml:"EventId" type:"Repeated"`
	Status               *string                                             `json:"Status" xml:"Status"`
	HealthStatus         *string                                             `json:"HealthStatus" xml:"HealthStatus"`
	InstanceEventType    []*string                                           `json:"InstanceEventType" xml:"InstanceEventType" type:"Repeated"`
	EventType            *string                                             `json:"EventType" xml:"EventType"`
	NotBefore            *DescribeInstancesFullStatusRequestNotBefore        `json:"NotBefore" xml:"NotBefore" require:"true" type:"Struct"`
	EventPublishTime     *DescribeInstancesFullStatusRequestEventPublishTime `json:"EventPublishTime" xml:"EventPublishTime" require:"true" type:"Struct"`
	PageNumber           *int                                                `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                                `json:"PageSize" xml:"PageSize"`
}

func (s DescribeInstancesFullStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequest) SetOwnerId(v int64) *DescribeInstancesFullStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetResourceOwnerAccount(v string) *DescribeInstancesFullStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetResourceOwnerId(v int64) *DescribeInstancesFullStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetOwnerAccount(v string) *DescribeInstancesFullStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetRegionId(v string) *DescribeInstancesFullStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetInstanceId(v []*string) *DescribeInstancesFullStatusRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventId(v []*string) *DescribeInstancesFullStatusRequest {
	s.EventId = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetStatus(v string) *DescribeInstancesFullStatusRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetHealthStatus(v string) *DescribeInstancesFullStatusRequest {
	s.HealthStatus = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetInstanceEventType(v []*string) *DescribeInstancesFullStatusRequest {
	s.InstanceEventType = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventType(v string) *DescribeInstancesFullStatusRequest {
	s.EventType = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetNotBefore(v *DescribeInstancesFullStatusRequestNotBefore) *DescribeInstancesFullStatusRequest {
	s.NotBefore = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetEventPublishTime(v *DescribeInstancesFullStatusRequestEventPublishTime) *DescribeInstancesFullStatusRequest {
	s.EventPublishTime = v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetPageNumber(v int) *DescribeInstancesFullStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesFullStatusRequest) SetPageSize(v int) *DescribeInstancesFullStatusRequest {
	s.PageSize = &v
	return s
}

type DescribeInstancesFullStatusRequestNotBefore struct {
	Start *string `json:"Start" xml:"Start"`
	End   *string `json:"End" xml:"End"`
}

func (s DescribeInstancesFullStatusRequestNotBefore) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequestNotBefore) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequestNotBefore) SetStart(v string) *DescribeInstancesFullStatusRequestNotBefore {
	s.Start = &v
	return s
}

func (s *DescribeInstancesFullStatusRequestNotBefore) SetEnd(v string) *DescribeInstancesFullStatusRequestNotBefore {
	s.End = &v
	return s
}

type DescribeInstancesFullStatusRequestEventPublishTime struct {
	Start *string `json:"Start" xml:"Start"`
	End   *string `json:"End" xml:"End"`
}

func (s DescribeInstancesFullStatusRequestEventPublishTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusRequestEventPublishTime) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusRequestEventPublishTime) SetStart(v string) *DescribeInstancesFullStatusRequestEventPublishTime {
	s.Start = &v
	return s
}

func (s *DescribeInstancesFullStatusRequestEventPublishTime) SetEnd(v string) *DescribeInstancesFullStatusRequestEventPublishTime {
	s.End = &v
	return s
}

type DescribeInstancesFullStatusResponse struct {
	RequestId             *string                                                   `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount            *int                                                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber            *int                                                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize              *int                                                      `json:"PageSize" xml:"PageSize" require:"true"`
	InstanceFullStatusSet *DescribeInstancesFullStatusResponseInstanceFullStatusSet `json:"InstanceFullStatusSet" xml:"InstanceFullStatusSet" require:"true" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponse) SetRequestId(v string) *DescribeInstancesFullStatusResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponse) SetTotalCount(v int) *DescribeInstancesFullStatusResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstancesFullStatusResponse) SetPageNumber(v int) *DescribeInstancesFullStatusResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesFullStatusResponse) SetPageSize(v int) *DescribeInstancesFullStatusResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesFullStatusResponse) SetInstanceFullStatusSet(v *DescribeInstancesFullStatusResponseInstanceFullStatusSet) *DescribeInstancesFullStatusResponse {
	s.InstanceFullStatusSet = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSet struct {
	InstanceFullStatusType []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType `json:"InstanceFullStatusType" xml:"InstanceFullStatusType" require:"true" type:"Repeated"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSet) SetInstanceFullStatusType(v []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) *DescribeInstancesFullStatusResponseInstanceFullStatusSet {
	s.InstanceFullStatusType = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType struct {
	InstanceId              *string                                                                                                `json:"InstanceId" xml:"InstanceId" require:"true"`
	ScheduledSystemEventSet *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet `json:"ScheduledSystemEventSet" xml:"ScheduledSystemEventSet" require:"true" type:"Struct"`
	Status                  *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus                  `json:"Status" xml:"Status" require:"true" type:"Struct"`
	HealthStatus            *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus            `json:"HealthStatus" xml:"HealthStatus" require:"true" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) SetInstanceId(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) SetScheduledSystemEventSet(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType {
	s.ScheduledSystemEventSet = v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) SetStatus(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType {
	s.Status = v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType) SetHealthStatus(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusType {
	s.HealthStatus = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet struct {
	ScheduledSystemEventType []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType `json:"ScheduledSystemEventType" xml:"ScheduledSystemEventType" require:"true" type:"Repeated"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet) SetScheduledSystemEventType(v []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSet {
	s.ScheduledSystemEventType = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType struct {
	EventId           *string                                                                                                                                         `json:"EventId" xml:"EventId" require:"true"`
	EventPublishTime  *string                                                                                                                                         `json:"EventPublishTime" xml:"EventPublishTime" require:"true"`
	NotBefore         *string                                                                                                                                         `json:"NotBefore" xml:"NotBefore" require:"true"`
	Reason            *string                                                                                                                                         `json:"Reason" xml:"Reason" require:"true"`
	ImpactLevel       *string                                                                                                                                         `json:"ImpactLevel" xml:"ImpactLevel" require:"true"`
	EventCycleStatus  *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus  `json:"EventCycleStatus" xml:"EventCycleStatus" require:"true" type:"Struct"`
	EventType         *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType         `json:"EventType" xml:"EventType" require:"true" type:"Struct"`
	ExtendedAttribute *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute `json:"ExtendedAttribute" xml:"ExtendedAttribute" require:"true" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetEventId(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.EventId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetEventPublishTime(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.EventPublishTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetNotBefore(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.NotBefore = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetReason(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.Reason = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetImpactLevel(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetEventCycleStatus(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.EventCycleStatus = v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetEventType(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.EventType = v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType) SetExtendedAttribute(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventType {
	s.ExtendedAttribute = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus) SetCode(v int) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus) SetName(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventCycleStatus {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType) SetCode(v int) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType) SetName(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeEventType {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute struct {
	DiskId        *string                                                                                                                                                      `json:"DiskId" xml:"DiskId" require:"true"`
	Device        *string                                                                                                                                                      `json:"Device" xml:"Device" require:"true"`
	InactiveDisks *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks `json:"InactiveDisks" xml:"InactiveDisks" require:"true" type:"Struct"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) SetDiskId(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) SetDevice(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute {
	s.Device = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute) SetInactiveDisks(v *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttribute {
	s.InactiveDisks = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks struct {
	InactiveDisk []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk `json:"InactiveDisk" xml:"InactiveDisk" require:"true" type:"Repeated"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks) SetInactiveDisk(v []*DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisks {
	s.InactiveDisk = v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk struct {
	CreationTime   *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	ReleaseTime    *string `json:"ReleaseTime" xml:"ReleaseTime" require:"true"`
	DeviceType     *string `json:"DeviceType" xml:"DeviceType" require:"true"`
	DeviceCategory *string `json:"DeviceCategory" xml:"DeviceCategory" require:"true"`
	DeviceSize     *string `json:"DeviceSize" xml:"DeviceSize" require:"true"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetCreationTime(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetReleaseTime(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceType(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceCategory(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceCategory = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceSize(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeScheduledSystemEventSetScheduledSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceSize = &v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus) SetCode(v int) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus) SetName(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeStatus {
	s.Name = &v
	return s
}

type DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus) SetCode(v int) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus) SetName(v string) *DescribeInstancesFullStatusResponseInstanceFullStatusSetInstanceFullStatusTypeHealthStatus {
	s.Name = &v
	return s
}

type DescribeInstanceHistoryEventsRequest struct {
	OwnerId                  *int64                                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount     *string                                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId          *int64                                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount             *string                                               `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                 *string                                               `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId               *string                                               `json:"InstanceId" xml:"InstanceId"`
	EventId                  []*string                                             `json:"EventId" xml:"EventId" type:"Repeated"`
	InstanceEventCycleStatus []*string                                             `json:"InstanceEventCycleStatus" xml:"InstanceEventCycleStatus" type:"Repeated"`
	EventCycleStatus         *string                                               `json:"EventCycleStatus" xml:"EventCycleStatus"`
	InstanceEventType        []*string                                             `json:"InstanceEventType" xml:"InstanceEventType" type:"Repeated"`
	EventType                *string                                               `json:"EventType" xml:"EventType"`
	NotBefore                *DescribeInstanceHistoryEventsRequestNotBefore        `json:"NotBefore" xml:"NotBefore" require:"true" type:"Struct"`
	EventPublishTime         *DescribeInstanceHistoryEventsRequestEventPublishTime `json:"EventPublishTime" xml:"EventPublishTime" require:"true" type:"Struct"`
	ImpactLevel              *string                                               `json:"ImpactLevel" xml:"ImpactLevel"`
	PageNumber               *int                                                  `json:"PageNumber" xml:"PageNumber"`
	PageSize                 *int                                                  `json:"PageSize" xml:"PageSize"`
}

func (s DescribeInstanceHistoryEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequest) SetOwnerId(v int64) *DescribeInstanceHistoryEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetResourceOwnerAccount(v string) *DescribeInstanceHistoryEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetResourceOwnerId(v int64) *DescribeInstanceHistoryEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetOwnerAccount(v string) *DescribeInstanceHistoryEventsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetRegionId(v string) *DescribeInstanceHistoryEventsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceId(v string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventId(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.EventId = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceEventCycleStatus(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceEventCycleStatus = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventCycleStatus(v string) *DescribeInstanceHistoryEventsRequest {
	s.EventCycleStatus = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetInstanceEventType(v []*string) *DescribeInstanceHistoryEventsRequest {
	s.InstanceEventType = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventType(v string) *DescribeInstanceHistoryEventsRequest {
	s.EventType = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetNotBefore(v *DescribeInstanceHistoryEventsRequestNotBefore) *DescribeInstanceHistoryEventsRequest {
	s.NotBefore = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetEventPublishTime(v *DescribeInstanceHistoryEventsRequestEventPublishTime) *DescribeInstanceHistoryEventsRequest {
	s.EventPublishTime = v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetImpactLevel(v string) *DescribeInstanceHistoryEventsRequest {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetPageNumber(v int) *DescribeInstanceHistoryEventsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequest) SetPageSize(v int) *DescribeInstanceHistoryEventsRequest {
	s.PageSize = &v
	return s
}

type DescribeInstanceHistoryEventsRequestNotBefore struct {
	Start *string `json:"Start" xml:"Start"`
	End   *string `json:"End" xml:"End"`
}

func (s DescribeInstanceHistoryEventsRequestNotBefore) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequestNotBefore) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequestNotBefore) SetStart(v string) *DescribeInstanceHistoryEventsRequestNotBefore {
	s.Start = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequestNotBefore) SetEnd(v string) *DescribeInstanceHistoryEventsRequestNotBefore {
	s.End = &v
	return s
}

type DescribeInstanceHistoryEventsRequestEventPublishTime struct {
	Start *string `json:"Start" xml:"Start"`
	End   *string `json:"End" xml:"End"`
}

func (s DescribeInstanceHistoryEventsRequestEventPublishTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsRequestEventPublishTime) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsRequestEventPublishTime) SetStart(v string) *DescribeInstanceHistoryEventsRequestEventPublishTime {
	s.Start = &v
	return s
}

func (s *DescribeInstanceHistoryEventsRequestEventPublishTime) SetEnd(v string) *DescribeInstanceHistoryEventsRequestEventPublishTime {
	s.End = &v
	return s
}

type DescribeInstanceHistoryEventsResponse struct {
	RequestId              *string                                                      `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount             *int                                                         `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber             *int                                                         `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize               *int                                                         `json:"PageSize" xml:"PageSize" require:"true"`
	InstanceSystemEventSet *DescribeInstanceHistoryEventsResponseInstanceSystemEventSet `json:"InstanceSystemEventSet" xml:"InstanceSystemEventSet" require:"true" type:"Struct"`
}

func (s DescribeInstanceHistoryEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponse) SetRequestId(v string) *DescribeInstanceHistoryEventsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponse) SetTotalCount(v int) *DescribeInstanceHistoryEventsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponse) SetPageNumber(v int) *DescribeInstanceHistoryEventsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponse) SetPageSize(v int) *DescribeInstanceHistoryEventsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponse) SetInstanceSystemEventSet(v *DescribeInstanceHistoryEventsResponseInstanceSystemEventSet) *DescribeInstanceHistoryEventsResponse {
	s.InstanceSystemEventSet = v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSet struct {
	InstanceSystemEventType []*DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType `json:"InstanceSystemEventType" xml:"InstanceSystemEventType" require:"true" type:"Repeated"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSet) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSet) SetInstanceSystemEventType(v []*DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSet {
	s.InstanceSystemEventType = v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType struct {
	InstanceId        *string                                                                                              `json:"InstanceId" xml:"InstanceId" require:"true"`
	EventId           *string                                                                                              `json:"EventId" xml:"EventId" require:"true"`
	EventPublishTime  *string                                                                                              `json:"EventPublishTime" xml:"EventPublishTime" require:"true"`
	NotBefore         *string                                                                                              `json:"NotBefore" xml:"NotBefore" require:"true"`
	EventFinishTime   *string                                                                                              `json:"EventFinishTime" xml:"EventFinishTime" require:"true"`
	Reason            *string                                                                                              `json:"Reason" xml:"Reason" require:"true"`
	ImpactLevel       *string                                                                                              `json:"ImpactLevel" xml:"ImpactLevel" require:"true"`
	EventType         *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType         `json:"EventType" xml:"EventType" require:"true" type:"Struct"`
	EventCycleStatus  *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus  `json:"EventCycleStatus" xml:"EventCycleStatus" require:"true" type:"Struct"`
	ExtendedAttribute *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute `json:"ExtendedAttribute" xml:"ExtendedAttribute" require:"true" type:"Struct"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetInstanceId(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetEventId(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.EventId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetEventPublishTime(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.EventPublishTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetNotBefore(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.NotBefore = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetEventFinishTime(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.EventFinishTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetReason(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.Reason = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetImpactLevel(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetEventType(v *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.EventType = v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetEventCycleStatus(v *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.EventCycleStatus = v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType) SetExtendedAttribute(v *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventType {
	s.ExtendedAttribute = v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType) SetCode(v int) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType {
	s.Code = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType) SetName(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventType {
	s.Name = &v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus) SetCode(v int) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus) SetName(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeEventCycleStatus {
	s.Name = &v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute struct {
	DiskId        *string                                                                                                           `json:"DiskId" xml:"DiskId" require:"true"`
	Device        *string                                                                                                           `json:"Device" xml:"Device" require:"true"`
	InactiveDisks *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks `json:"InactiveDisks" xml:"InactiveDisks" require:"true" type:"Struct"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) SetDiskId(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute {
	s.DiskId = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) SetDevice(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute {
	s.Device = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute) SetInactiveDisks(v *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttribute {
	s.InactiveDisks = v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks struct {
	InactiveDisk []*DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk `json:"InactiveDisk" xml:"InactiveDisk" require:"true" type:"Repeated"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks) SetInactiveDisk(v []*DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisks {
	s.InactiveDisk = v
	return s
}

type DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk struct {
	CreationTime   *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	ReleaseTime    *string `json:"ReleaseTime" xml:"ReleaseTime" require:"true"`
	DeviceType     *string `json:"DeviceType" xml:"DeviceType" require:"true"`
	DeviceCategory *string `json:"DeviceCategory" xml:"DeviceCategory" require:"true"`
	DeviceSize     *string `json:"DeviceSize" xml:"DeviceSize" require:"true"`
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetCreationTime(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetReleaseTime(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceType(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceCategory(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceCategory = &v
	return s
}

func (s *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk) SetDeviceSize(v string) *DescribeInstanceHistoryEventsResponseInstanceSystemEventSetInstanceSystemEventTypeExtendedAttributeInactiveDisksInactiveDisk {
	s.DeviceSize = &v
	return s
}

type DescribeDisksFullStatusRequest struct {
	OwnerId              *int64                                   `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                  `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                  `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                  `json:"RegionId" xml:"RegionId" require:"true"`
	DiskId               []*string                                `json:"DiskId" xml:"DiskId" type:"Repeated"`
	EventId              []*string                                `json:"EventId" xml:"EventId" type:"Repeated"`
	Status               *string                                  `json:"Status" xml:"Status"`
	HealthStatus         *string                                  `json:"HealthStatus" xml:"HealthStatus"`
	EventType            *string                                  `json:"EventType" xml:"EventType"`
	EventTime            *DescribeDisksFullStatusRequestEventTime `json:"EventTime" xml:"EventTime" require:"true" type:"Struct"`
	PageNumber           *int                                     `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                     `json:"PageSize" xml:"PageSize"`
}

func (s DescribeDisksFullStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusRequest) SetOwnerId(v int64) *DescribeDisksFullStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetResourceOwnerAccount(v string) *DescribeDisksFullStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetResourceOwnerId(v int64) *DescribeDisksFullStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetOwnerAccount(v string) *DescribeDisksFullStatusRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetRegionId(v string) *DescribeDisksFullStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetDiskId(v []*string) *DescribeDisksFullStatusRequest {
	s.DiskId = v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetEventId(v []*string) *DescribeDisksFullStatusRequest {
	s.EventId = v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetStatus(v string) *DescribeDisksFullStatusRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetHealthStatus(v string) *DescribeDisksFullStatusRequest {
	s.HealthStatus = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetEventType(v string) *DescribeDisksFullStatusRequest {
	s.EventType = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetEventTime(v *DescribeDisksFullStatusRequestEventTime) *DescribeDisksFullStatusRequest {
	s.EventTime = v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetPageNumber(v int) *DescribeDisksFullStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksFullStatusRequest) SetPageSize(v int) *DescribeDisksFullStatusRequest {
	s.PageSize = &v
	return s
}

type DescribeDisksFullStatusRequestEventTime struct {
	Start *string `json:"Start" xml:"Start"`
	End   *string `json:"End" xml:"End"`
}

func (s DescribeDisksFullStatusRequestEventTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusRequestEventTime) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusRequestEventTime) SetStart(v string) *DescribeDisksFullStatusRequestEventTime {
	s.Start = &v
	return s
}

func (s *DescribeDisksFullStatusRequestEventTime) SetEnd(v string) *DescribeDisksFullStatusRequestEventTime {
	s.End = &v
	return s
}

type DescribeDisksFullStatusResponse struct {
	RequestId         *string                                           `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount        *int                                              `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber        *int                                              `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize          *int                                              `json:"PageSize" xml:"PageSize" require:"true"`
	DiskFullStatusSet *DescribeDisksFullStatusResponseDiskFullStatusSet `json:"DiskFullStatusSet" xml:"DiskFullStatusSet" require:"true" type:"Struct"`
}

func (s DescribeDisksFullStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponse) SetRequestId(v string) *DescribeDisksFullStatusResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksFullStatusResponse) SetTotalCount(v int) *DescribeDisksFullStatusResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDisksFullStatusResponse) SetPageNumber(v int) *DescribeDisksFullStatusResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksFullStatusResponse) SetPageSize(v int) *DescribeDisksFullStatusResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksFullStatusResponse) SetDiskFullStatusSet(v *DescribeDisksFullStatusResponseDiskFullStatusSet) *DescribeDisksFullStatusResponse {
	s.DiskFullStatusSet = v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSet struct {
	DiskFullStatusType []*DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType `json:"DiskFullStatusType" xml:"DiskFullStatusType" require:"true" type:"Repeated"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSet) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSet) SetDiskFullStatusType(v []*DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) *DescribeDisksFullStatusResponseDiskFullStatusSet {
	s.DiskFullStatusType = v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType struct {
	DiskId       *string                                                                         `json:"DiskId" xml:"DiskId" require:"true"`
	InstanceId   *string                                                                         `json:"InstanceId" xml:"InstanceId" require:"true"`
	Device       *string                                                                         `json:"Device" xml:"Device" require:"true"`
	DiskEventSet *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet `json:"DiskEventSet" xml:"DiskEventSet" require:"true" type:"Struct"`
	Status       *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus       `json:"Status" xml:"Status" require:"true" type:"Struct"`
	HealthStatus *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus `json:"HealthStatus" xml:"HealthStatus" require:"true" type:"Struct"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetDiskId(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetInstanceId(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetDevice(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.Device = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetDiskEventSet(v *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.DiskEventSet = v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetStatus(v *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.Status = v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType) SetHealthStatus(v *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusType {
	s.HealthStatus = v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet struct {
	DiskEventType []*DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType `json:"DiskEventType" xml:"DiskEventType" require:"true" type:"Repeated"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet) SetDiskEventType(v []*DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSet {
	s.DiskEventType = v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType struct {
	EventId      *string                                                                                               `json:"EventId" xml:"EventId" require:"true"`
	EventTime    *string                                                                                               `json:"EventTime" xml:"EventTime" require:"true"`
	EventEndTime *string                                                                                               `json:"EventEndTime" xml:"EventEndTime" require:"true"`
	ImpactLevel  *string                                                                                               `json:"ImpactLevel" xml:"ImpactLevel" require:"true"`
	EventType    *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType `json:"EventType" xml:"EventType" require:"true" type:"Struct"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) SetEventId(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType {
	s.EventId = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) SetEventTime(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType {
	s.EventTime = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) SetEventEndTime(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType {
	s.EventEndTime = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) SetImpactLevel(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType {
	s.ImpactLevel = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType) SetEventType(v *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventType {
	s.EventType = v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType) SetCode(v int) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType) SetName(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeDiskEventSetDiskEventTypeEventType {
	s.Name = &v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus) SetCode(v int) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus) SetName(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeStatus {
	s.Name = &v
	return s
}

type DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus struct {
	Code *int    `json:"Code" xml:"Code" require:"true"`
	Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus) GoString() string {
	return s.String()
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus) SetCode(v int) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus {
	s.Code = &v
	return s
}

func (s *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus) SetName(v string) *DescribeDisksFullStatusResponseDiskFullStatusSetDiskFullStatusTypeHealthStatus {
	s.Name = &v
	return s
}

type ModifyUserBusinessBehaviorRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	StatusKey            *string `json:"statusKey" xml:"statusKey" require:"true"`
	StatusValue          *string `json:"statusValue" xml:"statusValue" require:"true"`
}

func (s ModifyUserBusinessBehaviorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserBusinessBehaviorRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserBusinessBehaviorRequest) SetOwnerId(v int64) *ModifyUserBusinessBehaviorRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetResourceOwnerAccount(v string) *ModifyUserBusinessBehaviorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetResourceOwnerId(v int64) *ModifyUserBusinessBehaviorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetOwnerAccount(v string) *ModifyUserBusinessBehaviorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetRegionId(v string) *ModifyUserBusinessBehaviorRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetStatusKey(v string) *ModifyUserBusinessBehaviorRequest {
	s.StatusKey = &v
	return s
}

func (s *ModifyUserBusinessBehaviorRequest) SetStatusValue(v string) *ModifyUserBusinessBehaviorRequest {
	s.StatusValue = &v
	return s
}

type ModifyUserBusinessBehaviorResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyUserBusinessBehaviorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserBusinessBehaviorResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserBusinessBehaviorResponse) SetRequestId(v string) *ModifyUserBusinessBehaviorResponse {
	s.RequestId = &v
	return s
}

type DescribeUserBusinessBehaviorRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	StatusKey            *string `json:"statusKey" xml:"statusKey" require:"true"`
}

func (s DescribeUserBusinessBehaviorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBusinessBehaviorRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserBusinessBehaviorRequest) SetOwnerId(v int64) *DescribeUserBusinessBehaviorRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetResourceOwnerAccount(v string) *DescribeUserBusinessBehaviorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetResourceOwnerId(v int64) *DescribeUserBusinessBehaviorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetOwnerAccount(v string) *DescribeUserBusinessBehaviorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetRegionId(v string) *DescribeUserBusinessBehaviorRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorRequest) SetStatusKey(v string) *DescribeUserBusinessBehaviorRequest {
	s.StatusKey = &v
	return s
}

type DescribeUserBusinessBehaviorResponse struct {
	RequestId   *string `json:"RequestId" xml:"RequestId" require:"true"`
	StatusValue *string `json:"StatusValue" xml:"StatusValue" require:"true"`
}

func (s DescribeUserBusinessBehaviorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBusinessBehaviorResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBusinessBehaviorResponse) SetRequestId(v string) *DescribeUserBusinessBehaviorResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeUserBusinessBehaviorResponse) SetStatusValue(v string) *DescribeUserBusinessBehaviorResponse {
	s.StatusValue = &v
	return s
}

type RunInstancesRequest struct {
	OwnerId                     *int64                                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string                                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64                                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                *string                                `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                    *string                                `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId                     *string                                `json:"ImageId" xml:"ImageId"`
	ImageFamily                 *string                                `json:"ImageFamily" xml:"ImageFamily"`
	InstanceType                *string                                `json:"InstanceType" xml:"InstanceType"`
	SecurityGroupId             *string                                `json:"SecurityGroupId" xml:"SecurityGroupId"`
	SecurityGroupIds            []*string                              `json:"SecurityGroupIds" xml:"SecurityGroupIds" type:"Repeated"`
	VSwitchId                   *string                                `json:"VSwitchId" xml:"VSwitchId"`
	InstanceName                *string                                `json:"InstanceName" xml:"InstanceName"`
	Description                 *string                                `json:"Description" xml:"Description"`
	InternetMaxBandwidthIn      *int                                   `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	InternetMaxBandwidthOut     *int                                   `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	HostName                    *string                                `json:"HostName" xml:"HostName"`
	UniqueSuffix                *bool                                  `json:"UniqueSuffix" xml:"UniqueSuffix"`
	Password                    *string                                `json:"Password" xml:"Password"`
	PasswordInherit             *bool                                  `json:"PasswordInherit" xml:"PasswordInherit"`
	ZoneId                      *string                                `json:"ZoneId" xml:"ZoneId"`
	InternetChargeType          *string                                `json:"InternetChargeType" xml:"InternetChargeType"`
	SystemDisk                  *RunInstancesRequestSystemDisk         `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisk                    []*RunInstancesRequestDataDisk         `json:"DataDisk" xml:"DataDisk" type:"Repeated"`
	IoOptimized                 *string                                `json:"IoOptimized" xml:"IoOptimized"`
	NetworkInterface            []*RunInstancesRequestNetworkInterface `json:"NetworkInterface" xml:"NetworkInterface" type:"Repeated"`
	UserData                    *string                                `json:"UserData" xml:"UserData"`
	KeyPairName                 *string                                `json:"KeyPairName" xml:"KeyPairName"`
	RamRoleName                 *string                                `json:"RamRoleName" xml:"RamRoleName"`
	Amount                      *int                                   `json:"Amount" xml:"Amount"`
	MinAmount                   *int                                   `json:"MinAmount" xml:"MinAmount"`
	AutoReleaseTime             *string                                `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	SpotStrategy                *string                                `json:"SpotStrategy" xml:"SpotStrategy"`
	SpotDuration                *int                                   `json:"SpotDuration" xml:"SpotDuration"`
	SpotPriceLimit              *float32                               `json:"SpotPriceLimit" xml:"SpotPriceLimit"`
	SpotInterruptionBehavior    *string                                `json:"SpotInterruptionBehavior" xml:"SpotInterruptionBehavior"`
	SecurityEnhancementStrategy *string                                `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
	ClientToken                 *string                                `json:"ClientToken" xml:"ClientToken"`
	Tag                         []*RunInstancesRequestTag              `json:"Tag" xml:"Tag" type:"Repeated"`
	HpcClusterId                *string                                `json:"HpcClusterId" xml:"HpcClusterId"`
	DryRun                      *bool                                  `json:"DryRun" xml:"DryRun"`
	DedicatedHostId             *string                                `json:"DedicatedHostId" xml:"DedicatedHostId"`
	LaunchTemplateId            *string                                `json:"LaunchTemplateId" xml:"LaunchTemplateId"`
	LaunchTemplateName          *string                                `json:"LaunchTemplateName" xml:"LaunchTemplateName"`
	LaunchTemplateVersion       *int64                                 `json:"LaunchTemplateVersion" xml:"LaunchTemplateVersion"`
	ResourceGroupId             *string                                `json:"ResourceGroupId" xml:"ResourceGroupId"`
	Period                      *int                                   `json:"Period" xml:"Period"`
	PeriodUnit                  *string                                `json:"PeriodUnit" xml:"PeriodUnit"`
	AutoRenew                   *bool                                  `json:"AutoRenew" xml:"AutoRenew"`
	AutoRenewPeriod             *int                                   `json:"AutoRenewPeriod" xml:"AutoRenewPeriod"`
	InstanceChargeType          *string                                `json:"InstanceChargeType" xml:"InstanceChargeType"`
	DeploymentSetId             *string                                `json:"DeploymentSetId" xml:"DeploymentSetId"`
	PrivateIpAddress            *string                                `json:"PrivateIpAddress" xml:"PrivateIpAddress"`
	CreditSpecification         *string                                `json:"CreditSpecification" xml:"CreditSpecification"`
	Ipv6Address                 []*string                              `json:"Ipv6Address" xml:"Ipv6Address" type:"Repeated"`
	Ipv6AddressCount            *int                                   `json:"Ipv6AddressCount" xml:"Ipv6AddressCount"`
	DeletionProtection          *bool                                  `json:"DeletionProtection" xml:"DeletionProtection"`
	Affinity                    *string                                `json:"Affinity" xml:"Affinity"`
	Tenancy                     *string                                `json:"Tenancy" xml:"Tenancy"`
	StorageSetId                *string                                `json:"StorageSetId" xml:"StorageSetId"`
	StorageSetPartitionNumber   *int                                   `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber"`
	CpuOptions                  *RunInstancesRequestCpuOptions         `json:"CpuOptions" xml:"CpuOptions" require:"true" type:"Struct"`
	HttpEndpoint                *string                                `json:"HttpEndpoint" xml:"HttpEndpoint"`
	HttpTokens                  *string                                `json:"HttpTokens" xml:"HttpTokens"`
	HttpPutResponseHopLimit     *int                                   `json:"HttpPutResponseHopLimit" xml:"HttpPutResponseHopLimit"`
}

func (s RunInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesRequest) SetOwnerId(v int64) *RunInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *RunInstancesRequest) SetResourceOwnerAccount(v string) *RunInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RunInstancesRequest) SetResourceOwnerId(v int64) *RunInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunInstancesRequest) SetOwnerAccount(v string) *RunInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RunInstancesRequest) SetRegionId(v string) *RunInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *RunInstancesRequest) SetImageId(v string) *RunInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesRequest) SetImageFamily(v string) *RunInstancesRequest {
	s.ImageFamily = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceType(v string) *RunInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityGroupId(v string) *RunInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityGroupIds(v []*string) *RunInstancesRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *RunInstancesRequest) SetVSwitchId(v string) *RunInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceName(v string) *RunInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesRequest) SetDescription(v string) *RunInstancesRequest {
	s.Description = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthIn(v int) *RunInstancesRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthOut(v int) *RunInstancesRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesRequest) SetHostName(v string) *RunInstancesRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesRequest) SetUniqueSuffix(v bool) *RunInstancesRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesRequest) SetPassword(v string) *RunInstancesRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesRequest) SetPasswordInherit(v bool) *RunInstancesRequest {
	s.PasswordInherit = &v
	return s
}

func (s *RunInstancesRequest) SetZoneId(v string) *RunInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *RunInstancesRequest) SetInternetChargeType(v string) *RunInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetSystemDisk(v *RunInstancesRequestSystemDisk) *RunInstancesRequest {
	s.SystemDisk = v
	return s
}

func (s *RunInstancesRequest) SetDataDisk(v []*RunInstancesRequestDataDisk) *RunInstancesRequest {
	s.DataDisk = v
	return s
}

func (s *RunInstancesRequest) SetIoOptimized(v string) *RunInstancesRequest {
	s.IoOptimized = &v
	return s
}

func (s *RunInstancesRequest) SetNetworkInterface(v []*RunInstancesRequestNetworkInterface) *RunInstancesRequest {
	s.NetworkInterface = v
	return s
}

func (s *RunInstancesRequest) SetUserData(v string) *RunInstancesRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesRequest) SetKeyPairName(v string) *RunInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesRequest) SetRamRoleName(v string) *RunInstancesRequest {
	s.RamRoleName = &v
	return s
}

func (s *RunInstancesRequest) SetAmount(v int) *RunInstancesRequest {
	s.Amount = &v
	return s
}

func (s *RunInstancesRequest) SetMinAmount(v int) *RunInstancesRequest {
	s.MinAmount = &v
	return s
}

func (s *RunInstancesRequest) SetAutoReleaseTime(v string) *RunInstancesRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *RunInstancesRequest) SetSpotStrategy(v string) *RunInstancesRequest {
	s.SpotStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSpotDuration(v int) *RunInstancesRequest {
	s.SpotDuration = &v
	return s
}

func (s *RunInstancesRequest) SetSpotPriceLimit(v float32) *RunInstancesRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *RunInstancesRequest) SetSpotInterruptionBehavior(v string) *RunInstancesRequest {
	s.SpotInterruptionBehavior = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityEnhancementStrategy(v string) *RunInstancesRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetClientToken(v string) *RunInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *RunInstancesRequest) SetTag(v []*RunInstancesRequestTag) *RunInstancesRequest {
	s.Tag = v
	return s
}

func (s *RunInstancesRequest) SetHpcClusterId(v string) *RunInstancesRequest {
	s.HpcClusterId = &v
	return s
}

func (s *RunInstancesRequest) SetDryRun(v bool) *RunInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *RunInstancesRequest) SetDedicatedHostId(v string) *RunInstancesRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RunInstancesRequest) SetLaunchTemplateId(v string) *RunInstancesRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *RunInstancesRequest) SetLaunchTemplateName(v string) *RunInstancesRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *RunInstancesRequest) SetLaunchTemplateVersion(v int64) *RunInstancesRequest {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *RunInstancesRequest) SetResourceGroupId(v string) *RunInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *RunInstancesRequest) SetPeriod(v int) *RunInstancesRequest {
	s.Period = &v
	return s
}

func (s *RunInstancesRequest) SetPeriodUnit(v string) *RunInstancesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RunInstancesRequest) SetAutoRenew(v bool) *RunInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *RunInstancesRequest) SetAutoRenewPeriod(v int) *RunInstancesRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceChargeType(v string) *RunInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetDeploymentSetId(v string) *RunInstancesRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *RunInstancesRequest) SetPrivateIpAddress(v string) *RunInstancesRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesRequest) SetCreditSpecification(v string) *RunInstancesRequest {
	s.CreditSpecification = &v
	return s
}

func (s *RunInstancesRequest) SetIpv6Address(v []*string) *RunInstancesRequest {
	s.Ipv6Address = v
	return s
}

func (s *RunInstancesRequest) SetIpv6AddressCount(v int) *RunInstancesRequest {
	s.Ipv6AddressCount = &v
	return s
}

func (s *RunInstancesRequest) SetDeletionProtection(v bool) *RunInstancesRequest {
	s.DeletionProtection = &v
	return s
}

func (s *RunInstancesRequest) SetAffinity(v string) *RunInstancesRequest {
	s.Affinity = &v
	return s
}

func (s *RunInstancesRequest) SetTenancy(v string) *RunInstancesRequest {
	s.Tenancy = &v
	return s
}

func (s *RunInstancesRequest) SetStorageSetId(v string) *RunInstancesRequest {
	s.StorageSetId = &v
	return s
}

func (s *RunInstancesRequest) SetStorageSetPartitionNumber(v int) *RunInstancesRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *RunInstancesRequest) SetCpuOptions(v *RunInstancesRequestCpuOptions) *RunInstancesRequest {
	s.CpuOptions = v
	return s
}

func (s *RunInstancesRequest) SetHttpEndpoint(v string) *RunInstancesRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *RunInstancesRequest) SetHttpTokens(v string) *RunInstancesRequest {
	s.HttpTokens = &v
	return s
}

func (s *RunInstancesRequest) SetHttpPutResponseHopLimit(v int) *RunInstancesRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

type RunInstancesRequestSystemDisk struct {
	Size                 *string `json:"Size" xml:"Size"`
	Category             *string `json:"Category" xml:"Category"`
	DiskName             *string `json:"DiskName" xml:"DiskName"`
	Description          *string `json:"Description" xml:"Description"`
	PerformanceLevel     *string `json:"PerformanceLevel" xml:"PerformanceLevel"`
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId"`
}

func (s RunInstancesRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSystemDisk) SetSize(v string) *RunInstancesRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetCategory(v string) *RunInstancesRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetDiskName(v string) *RunInstancesRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetDescription(v string) *RunInstancesRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetPerformanceLevel(v string) *RunInstancesRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetAutoSnapshotPolicyId(v string) *RunInstancesRequestSystemDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

type RunInstancesRequestDataDisk struct {
	Size                 *int    `json:"Size" xml:"Size" require:"true"`
	SnapshotId           *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Category             *string `json:"Category" xml:"Category" require:"true"`
	Encrypted            *string `json:"Encrypted" xml:"Encrypted" require:"true"`
	KMSKeyId             *string `json:"KMSKeyId" xml:"KMSKeyId" require:"true"`
	DiskName             *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description          *string `json:"Description" xml:"Description" require:"true"`
	Device               *string `json:"Device" xml:"Device" require:"true"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	PerformanceLevel     *string `json:"PerformanceLevel" xml:"PerformanceLevel" require:"true"`
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId" require:"true"`
	EncryptAlgorithm     *string `json:"EncryptAlgorithm" xml:"EncryptAlgorithm" require:"true"`
}

func (s RunInstancesRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestDataDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestDataDisk) SetSize(v int) *RunInstancesRequestDataDisk {
	s.Size = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetSnapshotId(v string) *RunInstancesRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetCategory(v string) *RunInstancesRequestDataDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetEncrypted(v string) *RunInstancesRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetKMSKeyId(v string) *RunInstancesRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDiskName(v string) *RunInstancesRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDescription(v string) *RunInstancesRequestDataDisk {
	s.Description = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDevice(v string) *RunInstancesRequestDataDisk {
	s.Device = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDeleteWithInstance(v bool) *RunInstancesRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetPerformanceLevel(v string) *RunInstancesRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetAutoSnapshotPolicyId(v string) *RunInstancesRequestDataDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetEncryptAlgorithm(v string) *RunInstancesRequestDataDisk {
	s.EncryptAlgorithm = &v
	return s
}

type RunInstancesRequestNetworkInterface struct {
	PrimaryIpAddress     *string   `json:"PrimaryIpAddress" xml:"PrimaryIpAddress" require:"true"`
	VSwitchId            *string   `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	SecurityGroupId      *string   `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	SecurityGroupIds     []*string `json:"SecurityGroupIds" xml:"SecurityGroupIds" type:"Repeated"`
	NetworkInterfaceName *string   `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string   `json:"Description" xml:"Description" require:"true"`
}

func (s RunInstancesRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestNetworkInterface) SetPrimaryIpAddress(v string) *RunInstancesRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetVSwitchId(v string) *RunInstancesRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetSecurityGroupId(v string) *RunInstancesRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetSecurityGroupIds(v []*string) *RunInstancesRequestNetworkInterface {
	s.SecurityGroupIds = v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetNetworkInterfaceName(v string) *RunInstancesRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetDescription(v string) *RunInstancesRequestNetworkInterface {
	s.Description = &v
	return s
}

type RunInstancesRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s RunInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestTag) SetKey(v string) *RunInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *RunInstancesRequestTag) SetValue(v string) *RunInstancesRequestTag {
	s.Value = &v
	return s
}

type RunInstancesRequestCpuOptions struct {
	Core           *int    `json:"Core" xml:"Core"`
	ThreadsPerCore *int    `json:"ThreadsPerCore" xml:"ThreadsPerCore"`
	Numa           *string `json:"Numa" xml:"Numa"`
}

func (s RunInstancesRequestCpuOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestCpuOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestCpuOptions) SetCore(v int) *RunInstancesRequestCpuOptions {
	s.Core = &v
	return s
}

func (s *RunInstancesRequestCpuOptions) SetThreadsPerCore(v int) *RunInstancesRequestCpuOptions {
	s.ThreadsPerCore = &v
	return s
}

func (s *RunInstancesRequestCpuOptions) SetNuma(v string) *RunInstancesRequestCpuOptions {
	s.Numa = &v
	return s
}

type RunInstancesResponse struct {
	RequestId      *string                             `json:"RequestId" xml:"RequestId" require:"true"`
	TradePrice     *float32                            `json:"TradePrice" xml:"TradePrice" require:"true"`
	InstanceIdSets *RunInstancesResponseInstanceIdSets `json:"InstanceIdSets" xml:"InstanceIdSets" require:"true" type:"Struct"`
}

func (s RunInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponse) GoString() string {
	return s.String()
}

func (s *RunInstancesResponse) SetRequestId(v string) *RunInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *RunInstancesResponse) SetTradePrice(v float32) *RunInstancesResponse {
	s.TradePrice = &v
	return s
}

func (s *RunInstancesResponse) SetInstanceIdSets(v *RunInstancesResponseInstanceIdSets) *RunInstancesResponse {
	s.InstanceIdSets = v
	return s
}

type RunInstancesResponseInstanceIdSets struct {
	InstanceIdSet []*string `json:"InstanceIdSet" xml:"InstanceIdSet" require:"true" type:"Repeated"`
}

func (s RunInstancesResponseInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponseInstanceIdSets) GoString() string {
	return s.String()
}

func (s *RunInstancesResponseInstanceIdSets) SetInstanceIdSet(v []*string) *RunInstancesResponseInstanceIdSets {
	s.InstanceIdSet = v
	return s
}

type ConvertNatPublicIpToEipRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s ConvertNatPublicIpToEipRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertNatPublicIpToEipRequest) GoString() string {
	return s.String()
}

func (s *ConvertNatPublicIpToEipRequest) SetOwnerId(v int64) *ConvertNatPublicIpToEipRequest {
	s.OwnerId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetResourceOwnerAccount(v string) *ConvertNatPublicIpToEipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetResourceOwnerId(v int64) *ConvertNatPublicIpToEipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetInstanceId(v string) *ConvertNatPublicIpToEipRequest {
	s.InstanceId = &v
	return s
}

func (s *ConvertNatPublicIpToEipRequest) SetRegionId(v string) *ConvertNatPublicIpToEipRequest {
	s.RegionId = &v
	return s
}

type ConvertNatPublicIpToEipResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ConvertNatPublicIpToEipResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertNatPublicIpToEipResponse) GoString() string {
	return s.String()
}

func (s *ConvertNatPublicIpToEipResponse) SetRequestId(v string) *ConvertNatPublicIpToEipResponse {
	s.RequestId = &v
	return s
}

type ModifyHpcClusterAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	HpcClusterId         *string `json:"HpcClusterId" xml:"HpcClusterId" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	Name                 *string `json:"Name" xml:"Name"`
}

func (s ModifyHpcClusterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHpcClusterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHpcClusterAttributeRequest) SetOwnerId(v int64) *ModifyHpcClusterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyHpcClusterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetResourceOwnerId(v int64) *ModifyHpcClusterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetRegionId(v string) *ModifyHpcClusterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetClientToken(v string) *ModifyHpcClusterAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetOwnerAccount(v string) *ModifyHpcClusterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetHpcClusterId(v string) *ModifyHpcClusterAttributeRequest {
	s.HpcClusterId = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetDescription(v string) *ModifyHpcClusterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyHpcClusterAttributeRequest) SetName(v string) *ModifyHpcClusterAttributeRequest {
	s.Name = &v
	return s
}

type ModifyHpcClusterAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyHpcClusterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHpcClusterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHpcClusterAttributeResponse) SetRequestId(v string) *ModifyHpcClusterAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeHpcClustersRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	HpcClusterIds        *string `json:"HpcClusterIds" xml:"HpcClusterIds"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeHpcClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersRequest) SetOwnerId(v int64) *DescribeHpcClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetResourceOwnerAccount(v string) *DescribeHpcClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetResourceOwnerId(v int64) *DescribeHpcClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetRegionId(v string) *DescribeHpcClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetClientToken(v string) *DescribeHpcClustersRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetOwnerAccount(v string) *DescribeHpcClustersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetHpcClusterIds(v string) *DescribeHpcClustersRequest {
	s.HpcClusterIds = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetPageNumber(v int) *DescribeHpcClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHpcClustersRequest) SetPageSize(v int) *DescribeHpcClustersRequest {
	s.PageSize = &v
	return s
}

type DescribeHpcClustersResponse struct {
	RequestId   *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int                                    `json:"PageSize" xml:"PageSize" require:"true"`
	HpcClusters *DescribeHpcClustersResponseHpcClusters `json:"HpcClusters" xml:"HpcClusters" require:"true" type:"Struct"`
}

func (s DescribeHpcClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponse) SetRequestId(v string) *DescribeHpcClustersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHpcClustersResponse) SetTotalCount(v int) *DescribeHpcClustersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeHpcClustersResponse) SetPageNumber(v int) *DescribeHpcClustersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeHpcClustersResponse) SetPageSize(v int) *DescribeHpcClustersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeHpcClustersResponse) SetHpcClusters(v *DescribeHpcClustersResponseHpcClusters) *DescribeHpcClustersResponse {
	s.HpcClusters = v
	return s
}

type DescribeHpcClustersResponseHpcClusters struct {
	HpcCluster []*DescribeHpcClustersResponseHpcClustersHpcCluster `json:"HpcCluster" xml:"HpcCluster" require:"true" type:"Repeated"`
}

func (s DescribeHpcClustersResponseHpcClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponseHpcClusters) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponseHpcClusters) SetHpcCluster(v []*DescribeHpcClustersResponseHpcClustersHpcCluster) *DescribeHpcClustersResponseHpcClusters {
	s.HpcCluster = v
	return s
}

type DescribeHpcClustersResponseHpcClustersHpcCluster struct {
	HpcClusterId *string `json:"HpcClusterId" xml:"HpcClusterId" require:"true"`
	Name         *string `json:"Name" xml:"Name" require:"true"`
	Description  *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeHpcClustersResponseHpcClustersHpcCluster) String() string {
	return tea.Prettify(s)
}

func (s DescribeHpcClustersResponseHpcClustersHpcCluster) GoString() string {
	return s.String()
}

func (s *DescribeHpcClustersResponseHpcClustersHpcCluster) SetHpcClusterId(v string) *DescribeHpcClustersResponseHpcClustersHpcCluster {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeHpcClustersResponseHpcClustersHpcCluster) SetName(v string) *DescribeHpcClustersResponseHpcClustersHpcCluster {
	s.Name = &v
	return s
}

func (s *DescribeHpcClustersResponseHpcClustersHpcCluster) SetDescription(v string) *DescribeHpcClustersResponseHpcClustersHpcCluster {
	s.Description = &v
	return s
}

type DeleteHpcClusterRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	HpcClusterId         *string `json:"HpcClusterId" xml:"HpcClusterId" require:"true"`
}

func (s DeleteHpcClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHpcClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteHpcClusterRequest) SetOwnerId(v int64) *DeleteHpcClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetResourceOwnerAccount(v string) *DeleteHpcClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetResourceOwnerId(v int64) *DeleteHpcClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetRegionId(v string) *DeleteHpcClusterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetClientToken(v string) *DeleteHpcClusterRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetOwnerAccount(v string) *DeleteHpcClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteHpcClusterRequest) SetHpcClusterId(v string) *DeleteHpcClusterRequest {
	s.HpcClusterId = &v
	return s
}

type DeleteHpcClusterResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteHpcClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHpcClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteHpcClusterResponse) SetRequestId(v string) *DeleteHpcClusterResponse {
	s.RequestId = &v
	return s
}

type CreateHpcClusterRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Description          *string `json:"Description" xml:"Description"`
	Name                 *string `json:"Name" xml:"Name" require:"true"`
}

func (s CreateHpcClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHpcClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateHpcClusterRequest) SetOwnerId(v int64) *CreateHpcClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetResourceOwnerAccount(v string) *CreateHpcClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateHpcClusterRequest) SetResourceOwnerId(v int64) *CreateHpcClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetRegionId(v string) *CreateHpcClusterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHpcClusterRequest) SetClientToken(v string) *CreateHpcClusterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHpcClusterRequest) SetOwnerAccount(v string) *CreateHpcClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateHpcClusterRequest) SetDescription(v string) *CreateHpcClusterRequest {
	s.Description = &v
	return s
}

func (s *CreateHpcClusterRequest) SetName(v string) *CreateHpcClusterRequest {
	s.Name = &v
	return s
}

type CreateHpcClusterResponse struct {
	RequestId    *string `json:"RequestId" xml:"RequestId" require:"true"`
	HpcClusterId *string `json:"HpcClusterId" xml:"HpcClusterId" require:"true"`
}

func (s CreateHpcClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHpcClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateHpcClusterResponse) SetRequestId(v string) *CreateHpcClusterResponse {
	s.RequestId = &v
	return s
}

func (s *CreateHpcClusterResponse) SetHpcClusterId(v string) *CreateHpcClusterResponse {
	s.HpcClusterId = &v
	return s
}

type DescribeSnapshotsUsageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s DescribeSnapshotsUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsUsageRequest) SetOwnerId(v int64) *DescribeSnapshotsUsageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotsUsageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetResourceOwnerId(v int64) *DescribeSnapshotsUsageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetOwnerAccount(v string) *DescribeSnapshotsUsageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsUsageRequest) SetRegionId(v string) *DescribeSnapshotsUsageRequest {
	s.RegionId = &v
	return s
}

type DescribeSnapshotsUsageResponse struct {
	RequestId     *string `json:"RequestId" xml:"RequestId" require:"true"`
	SnapshotCount *int    `json:"SnapshotCount" xml:"SnapshotCount" require:"true"`
	SnapshotSize  *int64  `json:"SnapshotSize" xml:"SnapshotSize" require:"true"`
}

func (s DescribeSnapshotsUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsUsageResponse) SetRequestId(v string) *DescribeSnapshotsUsageResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsUsageResponse) SetSnapshotCount(v int) *DescribeSnapshotsUsageResponse {
	s.SnapshotCount = &v
	return s
}

func (s *DescribeSnapshotsUsageResponse) SetSnapshotSize(v int64) *DescribeSnapshotsUsageResponse {
	s.SnapshotSize = &v
	return s
}

type DescribeSpotPriceHistoryRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId"`
	NetworkType          *string `json:"NetworkType" xml:"NetworkType" require:"true"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	SpotDuration         *int    `json:"SpotDuration" xml:"SpotDuration"`
	IoOptimized          *string `json:"IoOptimized" xml:"IoOptimized"`
	StartTime            *string `json:"StartTime" xml:"StartTime"`
	EndTime              *string `json:"EndTime" xml:"EndTime"`
	OSType               *string `json:"OSType" xml:"OSType"`
	Offset               *int    `json:"Offset" xml:"Offset"`
}

func (s DescribeSpotPriceHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryRequest) SetOwnerId(v int64) *DescribeSpotPriceHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetResourceOwnerAccount(v string) *DescribeSpotPriceHistoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetResourceOwnerId(v int64) *DescribeSpotPriceHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOwnerAccount(v string) *DescribeSpotPriceHistoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetRegionId(v string) *DescribeSpotPriceHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetZoneId(v string) *DescribeSpotPriceHistoryRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetNetworkType(v string) *DescribeSpotPriceHistoryRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetInstanceType(v string) *DescribeSpotPriceHistoryRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetSpotDuration(v int) *DescribeSpotPriceHistoryRequest {
	s.SpotDuration = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetIoOptimized(v string) *DescribeSpotPriceHistoryRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetStartTime(v string) *DescribeSpotPriceHistoryRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetEndTime(v string) *DescribeSpotPriceHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOSType(v string) *DescribeSpotPriceHistoryRequest {
	s.OSType = &v
	return s
}

func (s *DescribeSpotPriceHistoryRequest) SetOffset(v int) *DescribeSpotPriceHistoryRequest {
	s.Offset = &v
	return s
}

type DescribeSpotPriceHistoryResponse struct {
	RequestId  *string                                     `json:"RequestId" xml:"RequestId" require:"true"`
	NextOffset *int                                        `json:"NextOffset" xml:"NextOffset" require:"true"`
	Currency   *string                                     `json:"Currency" xml:"Currency" require:"true"`
	SpotPrices *DescribeSpotPriceHistoryResponseSpotPrices `json:"SpotPrices" xml:"SpotPrices" require:"true" type:"Struct"`
}

func (s DescribeSpotPriceHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponse) SetRequestId(v string) *DescribeSpotPriceHistoryResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponse) SetNextOffset(v int) *DescribeSpotPriceHistoryResponse {
	s.NextOffset = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponse) SetCurrency(v string) *DescribeSpotPriceHistoryResponse {
	s.Currency = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponse) SetSpotPrices(v *DescribeSpotPriceHistoryResponseSpotPrices) *DescribeSpotPriceHistoryResponse {
	s.SpotPrices = v
	return s
}

type DescribeSpotPriceHistoryResponseSpotPrices struct {
	SpotPriceType []*DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType `json:"SpotPriceType" xml:"SpotPriceType" require:"true" type:"Repeated"`
}

func (s DescribeSpotPriceHistoryResponseSpotPrices) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponseSpotPrices) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponseSpotPrices) SetSpotPriceType(v []*DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) *DescribeSpotPriceHistoryResponseSpotPrices {
	s.SpotPriceType = v
	return s
}

type DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType struct {
	ZoneId       *string  `json:"ZoneId" xml:"ZoneId" require:"true"`
	InstanceType *string  `json:"InstanceType" xml:"InstanceType" require:"true"`
	IoOptimized  *string  `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	Timestamp    *string  `json:"Timestamp" xml:"Timestamp" require:"true"`
	NetworkType  *string  `json:"NetworkType" xml:"NetworkType" require:"true"`
	SpotPrice    *float32 `json:"SpotPrice" xml:"SpotPrice" require:"true"`
	OriginPrice  *float32 `json:"OriginPrice" xml:"OriginPrice" require:"true"`
}

func (s DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) GoString() string {
	return s.String()
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetZoneId(v string) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.ZoneId = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetInstanceType(v string) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.InstanceType = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetIoOptimized(v string) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetTimestamp(v string) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.Timestamp = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetNetworkType(v string) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetSpotPrice(v float32) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.SpotPrice = &v
	return s
}

func (s *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType) SetOriginPrice(v float32) *DescribeSpotPriceHistoryResponseSpotPricesSpotPriceType {
	s.OriginPrice = &v
	return s
}

type StopInvocationRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	InvokeId             *string   `json:"InvokeId" xml:"InvokeId" require:"true"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" type:"Repeated"`
}

func (s StopInvocationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationRequest) GoString() string {
	return s.String()
}

func (s *StopInvocationRequest) SetOwnerId(v int64) *StopInvocationRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInvocationRequest) SetResourceOwnerAccount(v string) *StopInvocationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInvocationRequest) SetResourceOwnerId(v int64) *StopInvocationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInvocationRequest) SetOwnerAccount(v string) *StopInvocationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInvocationRequest) SetRegionId(v string) *StopInvocationRequest {
	s.RegionId = &v
	return s
}

func (s *StopInvocationRequest) SetInvokeId(v string) *StopInvocationRequest {
	s.InvokeId = &v
	return s
}

func (s *StopInvocationRequest) SetInstanceId(v []*string) *StopInvocationRequest {
	s.InstanceId = v
	return s
}

type StopInvocationResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s StopInvocationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationResponse) GoString() string {
	return s.String()
}

func (s *StopInvocationResponse) SetRequestId(v string) *StopInvocationResponse {
	s.RequestId = &v
	return s
}

type ModifyCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	CommandId            *string `json:"CommandId" xml:"CommandId" require:"true"`
	Name                 *string `json:"Name" xml:"Name"`
	Description          *string `json:"Description" xml:"Description"`
	CommandContent       *string `json:"CommandContent" xml:"CommandContent"`
	WorkingDir           *string `json:"WorkingDir" xml:"WorkingDir"`
	Timeout              *int64  `json:"Timeout" xml:"Timeout"`
}

func (s ModifyCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommandRequest) GoString() string {
	return s.String()
}

func (s *ModifyCommandRequest) SetOwnerId(v int64) *ModifyCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCommandRequest) SetResourceOwnerAccount(v string) *ModifyCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyCommandRequest) SetResourceOwnerId(v int64) *ModifyCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyCommandRequest) SetOwnerAccount(v string) *ModifyCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyCommandRequest) SetRegionId(v string) *ModifyCommandRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCommandRequest) SetCommandId(v string) *ModifyCommandRequest {
	s.CommandId = &v
	return s
}

func (s *ModifyCommandRequest) SetName(v string) *ModifyCommandRequest {
	s.Name = &v
	return s
}

func (s *ModifyCommandRequest) SetDescription(v string) *ModifyCommandRequest {
	s.Description = &v
	return s
}

func (s *ModifyCommandRequest) SetCommandContent(v string) *ModifyCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *ModifyCommandRequest) SetWorkingDir(v string) *ModifyCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *ModifyCommandRequest) SetTimeout(v int64) *ModifyCommandRequest {
	s.Timeout = &v
	return s
}

type ModifyCommandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCommandResponse) GoString() string {
	return s.String()
}

func (s *ModifyCommandResponse) SetRequestId(v string) *ModifyCommandResponse {
	s.RequestId = &v
	return s
}

type InvokeCommandRequest struct {
	OwnerId              *int64                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                `json:"RegionId" xml:"RegionId" require:"true"`
	CommandId            *string                `json:"CommandId" xml:"CommandId" require:"true"`
	Timed                *bool                  `json:"Timed" xml:"Timed"`
	Frequency            *string                `json:"Frequency" xml:"Frequency"`
	InstanceId           []*string              `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
	Parameters           map[string]interface{} `json:"Parameters" xml:"Parameters"`
}

func (s InvokeCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandRequest) GoString() string {
	return s.String()
}

func (s *InvokeCommandRequest) SetOwnerId(v int64) *InvokeCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *InvokeCommandRequest) SetResourceOwnerAccount(v string) *InvokeCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InvokeCommandRequest) SetResourceOwnerId(v int64) *InvokeCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InvokeCommandRequest) SetOwnerAccount(v string) *InvokeCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InvokeCommandRequest) SetRegionId(v string) *InvokeCommandRequest {
	s.RegionId = &v
	return s
}

func (s *InvokeCommandRequest) SetCommandId(v string) *InvokeCommandRequest {
	s.CommandId = &v
	return s
}

func (s *InvokeCommandRequest) SetTimed(v bool) *InvokeCommandRequest {
	s.Timed = &v
	return s
}

func (s *InvokeCommandRequest) SetFrequency(v string) *InvokeCommandRequest {
	s.Frequency = &v
	return s
}

func (s *InvokeCommandRequest) SetInstanceId(v []*string) *InvokeCommandRequest {
	s.InstanceId = v
	return s
}

func (s *InvokeCommandRequest) SetParameters(v map[string]interface{}) *InvokeCommandRequest {
	s.Parameters = v
	return s
}

type InvokeCommandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	InvokeId  *string `json:"InvokeId" xml:"InvokeId" require:"true"`
}

func (s InvokeCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeCommandResponse) GoString() string {
	return s.String()
}

func (s *InvokeCommandResponse) SetRequestId(v string) *InvokeCommandResponse {
	s.RequestId = &v
	return s
}

func (s *InvokeCommandResponse) SetInvokeId(v string) *InvokeCommandResponse {
	s.InvokeId = &v
	return s
}

type DescribeInvocationsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InvokeId             *string `json:"InvokeId" xml:"InvokeId"`
	CommandId            *string `json:"CommandId" xml:"CommandId"`
	CommandName          *string `json:"CommandName" xml:"CommandName"`
	CommandType          *string `json:"CommandType" xml:"CommandType"`
	Timed                *bool   `json:"Timed" xml:"Timed"`
	InvokeStatus         *string `json:"InvokeStatus" xml:"InvokeStatus"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	ContentEncoding      *string `json:"ContentEncoding" xml:"ContentEncoding"`
	IncludeOutput        *bool   `json:"IncludeOutput" xml:"IncludeOutput"`
	PageNumber           *int64  `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int64  `json:"PageSize" xml:"PageSize"`
}

func (s DescribeInvocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsRequest) SetOwnerId(v int64) *DescribeInvocationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetResourceOwnerAccount(v string) *DescribeInvocationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInvocationsRequest) SetResourceOwnerId(v int64) *DescribeInvocationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetOwnerAccount(v string) *DescribeInvocationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInvocationsRequest) SetRegionId(v string) *DescribeInvocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeId(v string) *DescribeInvocationsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandId(v string) *DescribeInvocationsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandName(v string) *DescribeInvocationsRequest {
	s.CommandName = &v
	return s
}

func (s *DescribeInvocationsRequest) SetCommandType(v string) *DescribeInvocationsRequest {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsRequest) SetTimed(v bool) *DescribeInvocationsRequest {
	s.Timed = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeStatus(v string) *DescribeInvocationsRequest {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInstanceId(v string) *DescribeInvocationsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetContentEncoding(v string) *DescribeInvocationsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeInvocationsRequest) SetIncludeOutput(v bool) *DescribeInvocationsRequest {
	s.IncludeOutput = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageNumber(v int64) *DescribeInvocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsRequest) SetPageSize(v int64) *DescribeInvocationsRequest {
	s.PageSize = &v
	return s
}

type DescribeInvocationsResponse struct {
	RequestId   *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int64                                  `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int64                                  `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int64                                  `json:"PageSize" xml:"PageSize" require:"true"`
	Invocations *DescribeInvocationsResponseInvocations `json:"Invocations" xml:"Invocations" require:"true" type:"Struct"`
}

func (s DescribeInvocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponse) SetRequestId(v string) *DescribeInvocationsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationsResponse) SetTotalCount(v int64) *DescribeInvocationsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInvocationsResponse) SetPageNumber(v int64) *DescribeInvocationsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationsResponse) SetPageSize(v int64) *DescribeInvocationsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationsResponse) SetInvocations(v *DescribeInvocationsResponseInvocations) *DescribeInvocationsResponse {
	s.Invocations = v
	return s
}

type DescribeInvocationsResponseInvocations struct {
	Invocation []*DescribeInvocationsResponseInvocationsInvocation `json:"Invocation" xml:"Invocation" require:"true" type:"Repeated"`
}

func (s DescribeInvocationsResponseInvocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseInvocations) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseInvocations) SetInvocation(v []*DescribeInvocationsResponseInvocationsInvocation) *DescribeInvocationsResponseInvocations {
	s.Invocation = v
	return s
}

type DescribeInvocationsResponseInvocationsInvocation struct {
	InvokeId         *string                                                          `json:"InvokeId" xml:"InvokeId" require:"true"`
	CreationTime     *string                                                          `json:"CreationTime" xml:"CreationTime" require:"true"`
	CommandId        *string                                                          `json:"CommandId" xml:"CommandId" require:"true"`
	CommandType      *string                                                          `json:"CommandType" xml:"CommandType" require:"true"`
	CommandName      *string                                                          `json:"CommandName" xml:"CommandName" require:"true"`
	CommandContent   *string                                                          `json:"CommandContent" xml:"CommandContent" require:"true"`
	Frequency        *string                                                          `json:"Frequency" xml:"Frequency" require:"true"`
	Timed            *bool                                                            `json:"Timed" xml:"Timed" require:"true"`
	InvokeStatus     *string                                                          `json:"InvokeStatus" xml:"InvokeStatus" require:"true"`
	InvocationStatus *string                                                          `json:"InvocationStatus" xml:"InvocationStatus" require:"true"`
	Parameters       *string                                                          `json:"Parameters" xml:"Parameters" require:"true"`
	InvokeInstances  *DescribeInvocationsResponseInvocationsInvocationInvokeInstances `json:"InvokeInstances" xml:"InvokeInstances" require:"true" type:"Struct"`
}

func (s DescribeInvocationsResponseInvocationsInvocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseInvocationsInvocation) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetInvokeId(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetCreationTime(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetCommandId(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetCommandType(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetCommandName(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.CommandName = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetCommandContent(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.CommandContent = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetFrequency(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.Frequency = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetTimed(v bool) *DescribeInvocationsResponseInvocationsInvocation {
	s.Timed = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetInvokeStatus(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetInvocationStatus(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetParameters(v string) *DescribeInvocationsResponseInvocationsInvocation {
	s.Parameters = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocation) SetInvokeInstances(v *DescribeInvocationsResponseInvocationsInvocationInvokeInstances) *DescribeInvocationsResponseInvocationsInvocation {
	s.InvokeInstances = v
	return s
}

type DescribeInvocationsResponseInvocationsInvocationInvokeInstances struct {
	InvokeInstance []*DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance `json:"InvokeInstance" xml:"InvokeInstance" require:"true" type:"Repeated"`
}

func (s DescribeInvocationsResponseInvocationsInvocationInvokeInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseInvocationsInvocationInvokeInstances) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstances) SetInvokeInstance(v []*DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) *DescribeInvocationsResponseInvocationsInvocationInvokeInstances {
	s.InvokeInstance = v
	return s
}

type DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance struct {
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Repeats              *int    `json:"Repeats" xml:"Repeats" require:"true"`
	InstanceInvokeStatus *string `json:"InstanceInvokeStatus" xml:"InstanceInvokeStatus" require:"true"`
	InvocationStatus     *string `json:"InvocationStatus" xml:"InvocationStatus" require:"true"`
	Output               *string `json:"Output" xml:"Output" require:"true"`
	ExitCode             *int64  `json:"ExitCode" xml:"ExitCode" require:"true"`
	Dropped              *int    `json:"Dropped" xml:"Dropped" require:"true"`
	ErrorCode            *string `json:"ErrorCode" xml:"ErrorCode" require:"true"`
	ErrorInfo            *string `json:"ErrorInfo" xml:"ErrorInfo" require:"true"`
	CreationTime         *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	StopTime             *string `json:"StopTime" xml:"StopTime" require:"true"`
	FinishTime           *string `json:"FinishTime" xml:"FinishTime" require:"true"`
	UpdateTime           *string `json:"UpdateTime" xml:"UpdateTime" require:"true"`
}

func (s DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetInstanceId(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetRepeats(v int) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.Repeats = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetInstanceInvokeStatus(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.InstanceInvokeStatus = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetInvocationStatus(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetOutput(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.Output = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetExitCode(v int64) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetDropped(v int) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.Dropped = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetErrorCode(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetErrorInfo(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetCreationTime(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetStartTime(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetStopTime(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.StopTime = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetFinishTime(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.FinishTime = &v
	return s
}

func (s *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance) SetUpdateTime(v string) *DescribeInvocationsResponseInvocationsInvocationInvokeInstancesInvokeInstance {
	s.UpdateTime = &v
	return s
}

type DescribeInvocationResultsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InvokeId             *string `json:"InvokeId" xml:"InvokeId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	CommandId            *string `json:"CommandId" xml:"CommandId"`
	InvokeRecordStatus   *string `json:"InvokeRecordStatus" xml:"InvokeRecordStatus"`
	IncludeHistory       *bool   `json:"IncludeHistory" xml:"IncludeHistory"`
	ContentEncoding      *string `json:"ContentEncoding" xml:"ContentEncoding"`
	PageNumber           *int64  `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int64  `json:"PageSize" xml:"PageSize"`
}

func (s DescribeInvocationResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsRequest) SetOwnerId(v int64) *DescribeInvocationResultsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetResourceOwnerAccount(v string) *DescribeInvocationResultsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetResourceOwnerId(v int64) *DescribeInvocationResultsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetOwnerAccount(v string) *DescribeInvocationResultsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetRegionId(v string) *DescribeInvocationResultsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInvokeId(v string) *DescribeInvocationResultsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInstanceId(v string) *DescribeInvocationResultsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetCommandId(v string) *DescribeInvocationResultsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInvokeRecordStatus(v string) *DescribeInvocationResultsRequest {
	s.InvokeRecordStatus = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetIncludeHistory(v bool) *DescribeInvocationResultsRequest {
	s.IncludeHistory = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetContentEncoding(v string) *DescribeInvocationResultsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetPageNumber(v int64) *DescribeInvocationResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetPageSize(v int64) *DescribeInvocationResultsRequest {
	s.PageSize = &v
	return s
}

type DescribeInvocationResultsResponse struct {
	RequestId  *string                                      `json:"RequestId" xml:"RequestId" require:"true"`
	Invocation *DescribeInvocationResultsResponseInvocation `json:"Invocation" xml:"Invocation" require:"true" type:"Struct"`
}

func (s DescribeInvocationResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponse) SetRequestId(v string) *DescribeInvocationResultsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationResultsResponse) SetInvocation(v *DescribeInvocationResultsResponseInvocation) *DescribeInvocationResultsResponse {
	s.Invocation = v
	return s
}

type DescribeInvocationResultsResponseInvocation struct {
	PageSize          *int64                                                        `json:"PageSize" xml:"PageSize" require:"true"`
	PageNumber        *int64                                                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	TotalCount        *int64                                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	InvocationResults *DescribeInvocationResultsResponseInvocationInvocationResults `json:"InvocationResults" xml:"InvocationResults" require:"true" type:"Struct"`
}

func (s DescribeInvocationResultsResponseInvocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseInvocation) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseInvocation) SetPageSize(v int64) *DescribeInvocationResultsResponseInvocation {
	s.PageSize = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocation) SetPageNumber(v int64) *DescribeInvocationResultsResponseInvocation {
	s.PageNumber = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocation) SetTotalCount(v int64) *DescribeInvocationResultsResponseInvocation {
	s.TotalCount = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocation) SetInvocationResults(v *DescribeInvocationResultsResponseInvocationInvocationResults) *DescribeInvocationResultsResponseInvocation {
	s.InvocationResults = v
	return s
}

type DescribeInvocationResultsResponseInvocationInvocationResults struct {
	InvocationResult []*DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult `json:"InvocationResult" xml:"InvocationResult" require:"true" type:"Repeated"`
}

func (s DescribeInvocationResultsResponseInvocationInvocationResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseInvocationInvocationResults) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResults) SetInvocationResult(v []*DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) *DescribeInvocationResultsResponseInvocationInvocationResults {
	s.InvocationResult = v
	return s
}

type DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult struct {
	CommandId          *string `json:"CommandId" xml:"CommandId" require:"true"`
	InvokeId           *string `json:"InvokeId" xml:"InvokeId" require:"true"`
	InstanceId         *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	StartTime          *string `json:"StartTime" xml:"StartTime" require:"true"`
	StopTime           *string `json:"StopTime" xml:"StopTime" require:"true"`
	FinishedTime       *string `json:"FinishedTime" xml:"FinishedTime" require:"true"`
	Repeats            *int    `json:"Repeats" xml:"Repeats" require:"true"`
	Output             *string `json:"Output" xml:"Output" require:"true"`
	Dropped            *int    `json:"Dropped" xml:"Dropped" require:"true"`
	InvokeRecordStatus *string `json:"InvokeRecordStatus" xml:"InvokeRecordStatus" require:"true"`
	InvocationStatus   *string `json:"InvocationStatus" xml:"InvocationStatus" require:"true"`
	ExitCode           *int64  `json:"ExitCode" xml:"ExitCode" require:"true"`
	ErrorCode          *string `json:"ErrorCode" xml:"ErrorCode" require:"true"`
	ErrorInfo          *string `json:"ErrorInfo" xml:"ErrorInfo" require:"true"`
}

func (s DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetCommandId(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetInvokeId(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetInstanceId(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetStartTime(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetStopTime(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.StopTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetFinishedTime(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.FinishedTime = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetRepeats(v int) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.Repeats = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetOutput(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.Output = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetDropped(v int) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.Dropped = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetInvokeRecordStatus(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.InvokeRecordStatus = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetInvocationStatus(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetExitCode(v int64) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetErrorCode(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult) SetErrorInfo(v string) *DescribeInvocationResultsResponseInvocationInvocationResultsInvocationResult {
	s.ErrorInfo = &v
	return s
}

type DescribeCommandsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	CommandId            *string `json:"CommandId" xml:"CommandId"`
	Name                 *string `json:"Name" xml:"Name"`
	Description          *string `json:"Description" xml:"Description"`
	Type                 *string `json:"Type" xml:"Type"`
	ContentEncoding      *string `json:"ContentEncoding" xml:"ContentEncoding"`
	PageNumber           *int64  `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int64  `json:"PageSize" xml:"PageSize"`
}

func (s DescribeCommandsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommandsRequest) SetOwnerId(v int64) *DescribeCommandsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCommandsRequest) SetResourceOwnerAccount(v string) *DescribeCommandsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCommandsRequest) SetResourceOwnerId(v int64) *DescribeCommandsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCommandsRequest) SetOwnerAccount(v string) *DescribeCommandsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCommandsRequest) SetRegionId(v string) *DescribeCommandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCommandsRequest) SetCommandId(v string) *DescribeCommandsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsRequest) SetName(v string) *DescribeCommandsRequest {
	s.Name = &v
	return s
}

func (s *DescribeCommandsRequest) SetDescription(v string) *DescribeCommandsRequest {
	s.Description = &v
	return s
}

func (s *DescribeCommandsRequest) SetType(v string) *DescribeCommandsRequest {
	s.Type = &v
	return s
}

func (s *DescribeCommandsRequest) SetContentEncoding(v string) *DescribeCommandsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageNumber(v int64) *DescribeCommandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsRequest) SetPageSize(v int64) *DescribeCommandsRequest {
	s.PageSize = &v
	return s
}

type DescribeCommandsResponse struct {
	RequestId  *string                           `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int64                            `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int64                            `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int64                            `json:"PageSize" xml:"PageSize" require:"true"`
	Commands   *DescribeCommandsResponseCommands `json:"Commands" xml:"Commands" require:"true" type:"Struct"`
}

func (s DescribeCommandsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponse) SetRequestId(v string) *DescribeCommandsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCommandsResponse) SetTotalCount(v int64) *DescribeCommandsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommandsResponse) SetPageNumber(v int64) *DescribeCommandsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCommandsResponse) SetPageSize(v int64) *DescribeCommandsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeCommandsResponse) SetCommands(v *DescribeCommandsResponseCommands) *DescribeCommandsResponse {
	s.Commands = v
	return s
}

type DescribeCommandsResponseCommands struct {
	Command []*DescribeCommandsResponseCommandsCommand `json:"Command" xml:"Command" require:"true" type:"Repeated"`
}

func (s DescribeCommandsResponseCommands) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponseCommands) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseCommands) SetCommand(v []*DescribeCommandsResponseCommandsCommand) *DescribeCommandsResponseCommands {
	s.Command = v
	return s
}

type DescribeCommandsResponseCommandsCommand struct {
	CommandId       *string                                                `json:"CommandId" xml:"CommandId" require:"true"`
	Name            *string                                                `json:"Name" xml:"Name" require:"true"`
	Type            *string                                                `json:"Type" xml:"Type" require:"true"`
	Description     *string                                                `json:"Description" xml:"Description" require:"true"`
	CommandContent  *string                                                `json:"CommandContent" xml:"CommandContent" require:"true"`
	WorkingDir      *string                                                `json:"WorkingDir" xml:"WorkingDir" require:"true"`
	Timeout         *int64                                                 `json:"Timeout" xml:"Timeout" require:"true"`
	InvokeTimes     *int                                                   `json:"InvokeTimes" xml:"InvokeTimes" require:"true"`
	CreationTime    *string                                                `json:"CreationTime" xml:"CreationTime" require:"true"`
	EnableParameter *bool                                                  `json:"EnableParameter" xml:"EnableParameter" require:"true"`
	ParameterNames  *DescribeCommandsResponseCommandsCommandParameterNames `json:"ParameterNames" xml:"ParameterNames" require:"true" type:"Struct"`
}

func (s DescribeCommandsResponseCommandsCommand) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponseCommandsCommand) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseCommandsCommand) SetCommandId(v string) *DescribeCommandsResponseCommandsCommand {
	s.CommandId = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetName(v string) *DescribeCommandsResponseCommandsCommand {
	s.Name = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetType(v string) *DescribeCommandsResponseCommandsCommand {
	s.Type = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetDescription(v string) *DescribeCommandsResponseCommandsCommand {
	s.Description = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetCommandContent(v string) *DescribeCommandsResponseCommandsCommand {
	s.CommandContent = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetWorkingDir(v string) *DescribeCommandsResponseCommandsCommand {
	s.WorkingDir = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetTimeout(v int64) *DescribeCommandsResponseCommandsCommand {
	s.Timeout = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetInvokeTimes(v int) *DescribeCommandsResponseCommandsCommand {
	s.InvokeTimes = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetCreationTime(v string) *DescribeCommandsResponseCommandsCommand {
	s.CreationTime = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetEnableParameter(v bool) *DescribeCommandsResponseCommandsCommand {
	s.EnableParameter = &v
	return s
}

func (s *DescribeCommandsResponseCommandsCommand) SetParameterNames(v *DescribeCommandsResponseCommandsCommandParameterNames) *DescribeCommandsResponseCommandsCommand {
	s.ParameterNames = v
	return s
}

type DescribeCommandsResponseCommandsCommandParameterNames struct {
	ParameterName []*string `json:"ParameterName" xml:"ParameterName" require:"true" type:"Repeated"`
}

func (s DescribeCommandsResponseCommandsCommandParameterNames) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommandsResponseCommandsCommandParameterNames) GoString() string {
	return s.String()
}

func (s *DescribeCommandsResponseCommandsCommandParameterNames) SetParameterName(v []*string) *DescribeCommandsResponseCommandsCommandParameterNames {
	s.ParameterName = v
	return s
}

type DeleteCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	CommandId            *string `json:"CommandId" xml:"CommandId" require:"true"`
}

func (s DeleteCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommandRequest) GoString() string {
	return s.String()
}

func (s *DeleteCommandRequest) SetOwnerId(v int64) *DeleteCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCommandRequest) SetResourceOwnerAccount(v string) *DeleteCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCommandRequest) SetResourceOwnerId(v int64) *DeleteCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteCommandRequest) SetOwnerAccount(v string) *DeleteCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteCommandRequest) SetRegionId(v string) *DeleteCommandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCommandRequest) SetCommandId(v string) *DeleteCommandRequest {
	s.CommandId = &v
	return s
}

type DeleteCommandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCommandResponse) GoString() string {
	return s.String()
}

func (s *DeleteCommandResponse) SetRequestId(v string) *DeleteCommandResponse {
	s.RequestId = &v
	return s
}

type CreateCommandRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Name                 *string `json:"Name" xml:"Name" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	Type                 *string `json:"Type" xml:"Type" require:"true"`
	CommandContent       *string `json:"CommandContent" xml:"CommandContent" require:"true"`
	WorkingDir           *string `json:"WorkingDir" xml:"WorkingDir"`
	Timeout              *int64  `json:"Timeout" xml:"Timeout"`
	EnableParameter      *bool   `json:"EnableParameter" xml:"EnableParameter"`
}

func (s CreateCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateCommandRequest) SetOwnerId(v int64) *CreateCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCommandRequest) SetResourceOwnerAccount(v string) *CreateCommandRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCommandRequest) SetResourceOwnerId(v int64) *CreateCommandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCommandRequest) SetOwnerAccount(v string) *CreateCommandRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateCommandRequest) SetRegionId(v string) *CreateCommandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCommandRequest) SetName(v string) *CreateCommandRequest {
	s.Name = &v
	return s
}

func (s *CreateCommandRequest) SetDescription(v string) *CreateCommandRequest {
	s.Description = &v
	return s
}

func (s *CreateCommandRequest) SetType(v string) *CreateCommandRequest {
	s.Type = &v
	return s
}

func (s *CreateCommandRequest) SetCommandContent(v string) *CreateCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *CreateCommandRequest) SetWorkingDir(v string) *CreateCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *CreateCommandRequest) SetTimeout(v int64) *CreateCommandRequest {
	s.Timeout = &v
	return s
}

func (s *CreateCommandRequest) SetEnableParameter(v bool) *CreateCommandRequest {
	s.EnableParameter = &v
	return s
}

type CreateCommandResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	CommandId *string `json:"CommandId" xml:"CommandId" require:"true"`
}

func (s CreateCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateCommandResponse) SetRequestId(v string) *CreateCommandResponse {
	s.RequestId = &v
	return s
}

func (s *CreateCommandResponse) SetCommandId(v string) *CreateCommandResponse {
	s.CommandId = &v
	return s
}

type ModifySecurityGroupEgressRuleRequest struct {
	OwnerId               *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId       *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	IpProtocol            *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange             *string `json:"PortRange" xml:"PortRange" require:"true"`
	DestGroupId           *string `json:"DestGroupId" xml:"DestGroupId"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId" xml:"DestGroupOwnerId"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount" xml:"DestGroupOwnerAccount"`
	DestCidrIp            *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	SourceCidrIp          *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange       *string `json:"SourcePortRange" xml:"SourcePortRange"`
	Policy                *string `json:"Policy" xml:"Policy"`
	Priority              *string `json:"Priority" xml:"Priority"`
	NicType               *string `json:"NicType" xml:"NicType"`
	ClientToken           *string `json:"ClientToken" xml:"ClientToken"`
	Description           *string `json:"Description" xml:"Description"`
}

func (s ModifySecurityGroupEgressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupEgressRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupEgressRuleRequest) SetOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetRegionId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSecurityGroupId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpProtocol(v string) *ModifySecurityGroupEgressRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPortRange(v string) *ModifySecurityGroupEgressRuleRequest {
	s.PortRange = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupId(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupOwnerId(v int64) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestGroupOwnerAccount(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDestCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpv6DestCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSourceCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetIpv6SourceCidrIp(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetSourcePortRange(v string) *ModifySecurityGroupEgressRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPolicy(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Policy = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetPriority(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Priority = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetNicType(v string) *ModifySecurityGroupEgressRuleRequest {
	s.NicType = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetClientToken(v string) *ModifySecurityGroupEgressRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupEgressRuleRequest) SetDescription(v string) *ModifySecurityGroupEgressRuleRequest {
	s.Description = &v
	return s
}

type ModifySecurityGroupEgressRuleResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifySecurityGroupEgressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupEgressRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupEgressRuleResponse) SetRequestId(v string) *ModifySecurityGroupEgressRuleResponse {
	s.RequestId = &v
	return s
}

type ModifyDiskChargeTypeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DiskIds              *string `json:"DiskIds" xml:"DiskIds" require:"true"`
	AutoPay              *bool   `json:"AutoPay" xml:"AutoPay"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DiskChargeType       *string `json:"DiskChargeType" xml:"DiskChargeType"`
}

func (s ModifyDiskChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskChargeTypeRequest) SetOwnerId(v int64) *ModifyDiskChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyDiskChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyDiskChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetInstanceId(v string) *ModifyDiskChargeTypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetRegionId(v string) *ModifyDiskChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetDiskIds(v string) *ModifyDiskChargeTypeRequest {
	s.DiskIds = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetAutoPay(v bool) *ModifyDiskChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetClientToken(v string) *ModifyDiskChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetOwnerAccount(v string) *ModifyDiskChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskChargeTypeRequest) SetDiskChargeType(v string) *ModifyDiskChargeTypeRequest {
	s.DiskChargeType = &v
	return s
}

type ModifyDiskChargeTypeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId   *string `json:"OrderId" xml:"OrderId" require:"true"`
}

func (s ModifyDiskChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskChargeTypeResponse) SetRequestId(v string) *ModifyDiskChargeTypeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyDiskChargeTypeResponse) SetOrderId(v string) *ModifyDiskChargeTypeResponse {
	s.OrderId = &v
	return s
}

type ModifyNetworkInterfaceAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId      []*string `json:"SecurityGroupId" xml:"SecurityGroupId" type:"Repeated"`
	NetworkInterfaceName *string   `json:"NetworkInterfaceName" xml:"NetworkInterfaceName"`
	NetworkInterfaceId   *string   `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	QueueNumber          *int      `json:"QueueNumber" xml:"QueueNumber"`
	Description          *string   `json:"Description" xml:"Description"`
}

func (s ModifyNetworkInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetOwnerId(v int64) *ModifyNetworkInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetResourceOwnerId(v int64) *ModifyNetworkInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetOwnerAccount(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetRegionId(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetSecurityGroupId(v []*string) *ModifyNetworkInterfaceAttributeRequest {
	s.SecurityGroupId = v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceName(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceId(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetQueueNumber(v int) *ModifyNetworkInterfaceAttributeRequest {
	s.QueueNumber = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetDescription(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.Description = &v
	return s
}

type ModifyNetworkInterfaceAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyNetworkInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetRequestId(v string) *ModifyNetworkInterfaceAttributeResponse {
	s.RequestId = &v
	return s
}

type DetachNetworkInterfaceRequest struct {
	OwnerId                *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount           *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId               *string `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId     *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	InstanceId             *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	TrunkNetworkInstanceId *string `json:"TrunkNetworkInstanceId" xml:"TrunkNetworkInstanceId"`
}

func (s DetachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceRequest) SetOwnerId(v int64) *DetachNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *DetachNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetResourceOwnerId(v int64) *DetachNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetOwnerAccount(v string) *DetachNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetRegionId(v string) *DetachNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *DetachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetInstanceId(v string) *DetachNetworkInterfaceRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachNetworkInterfaceRequest) SetTrunkNetworkInstanceId(v string) *DetachNetworkInterfaceRequest {
	s.TrunkNetworkInstanceId = &v
	return s
}

type DetachNetworkInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DetachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceResponse) SetRequestId(v string) *DetachNetworkInterfaceResponse {
	s.RequestId = &v
	return s
}

type DescribeNetworkInterfacesRequest struct {
	OwnerId              *int64                                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*DescribeNetworkInterfacesRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                                `json:"ResourceGroupId" xml:"ResourceGroupId"`
	VSwitchId            *string                                `json:"VSwitchId" xml:"VSwitchId"`
	VpcId                *string                                `json:"VpcId" xml:"VpcId"`
	PrimaryIpAddress     *string                                `json:"PrimaryIpAddress" xml:"PrimaryIpAddress"`
	PrivateIpAddress     []*string                              `json:"PrivateIpAddress" xml:"PrivateIpAddress" type:"Repeated"`
	SecurityGroupId      *string                                `json:"SecurityGroupId" xml:"SecurityGroupId"`
	NetworkInterfaceName *string                                `json:"NetworkInterfaceName" xml:"NetworkInterfaceName"`
	Type                 *string                                `json:"Type" xml:"Type"`
	InstanceId           *string                                `json:"InstanceId" xml:"InstanceId"`
	NetworkInterfaceId   []*string                              `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" type:"Repeated"`
	ServiceManaged       *bool                                  `json:"ServiceManaged" xml:"ServiceManaged"`
	Status               *string                                `json:"Status" xml:"Status"`
	PageNumber           *int                                   `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                   `json:"PageSize" xml:"PageSize"`
	NextToken            *string                                `json:"NextToken" xml:"NextToken"`
	MaxResults           *int                                   `json:"MaxResults" xml:"MaxResults"`
}

func (s DescribeNetworkInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequest) SetOwnerId(v int64) *DescribeNetworkInterfacesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceOwnerAccount(v string) *DescribeNetworkInterfacesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceOwnerId(v int64) *DescribeNetworkInterfacesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetOwnerAccount(v string) *DescribeNetworkInterfacesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetRegionId(v string) *DescribeNetworkInterfacesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetTag(v []*DescribeNetworkInterfacesRequestTag) *DescribeNetworkInterfacesRequest {
	s.Tag = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetResourceGroupId(v string) *DescribeNetworkInterfacesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVSwitchId(v string) *DescribeNetworkInterfacesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVpcId(v string) *DescribeNetworkInterfacesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrimaryIpAddress(v string) *DescribeNetworkInterfacesRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrivateIpAddress(v []*string) *DescribeNetworkInterfacesRequest {
	s.PrivateIpAddress = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetSecurityGroupId(v string) *DescribeNetworkInterfacesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetType(v string) *DescribeNetworkInterfacesRequest {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetInstanceId(v string) *DescribeNetworkInterfacesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceId(v []*string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceId = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetServiceManaged(v bool) *DescribeNetworkInterfacesRequest {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetStatus(v string) *DescribeNetworkInterfacesRequest {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageNumber(v int) *DescribeNetworkInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageSize(v int) *DescribeNetworkInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNextToken(v string) *DescribeNetworkInterfacesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetMaxResults(v int) *DescribeNetworkInterfacesRequest {
	s.MaxResults = &v
	return s
}

type DescribeNetworkInterfacesRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeNetworkInterfacesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequestTag) SetKey(v string) *DescribeNetworkInterfacesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeNetworkInterfacesRequestTag) SetValue(v string) *DescribeNetworkInterfacesRequestTag {
	s.Value = &v
	return s
}

type DescribeNetworkInterfacesResponse struct {
	RequestId            *string                                                `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount           *int                                                   `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber           *int                                                   `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize             *int                                                   `json:"PageSize" xml:"PageSize" require:"true"`
	NextToken            *string                                                `json:"NextToken" xml:"NextToken" require:"true"`
	NetworkInterfaceSets *DescribeNetworkInterfacesResponseNetworkInterfaceSets `json:"NetworkInterfaceSets" xml:"NetworkInterfaceSets" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponse) SetRequestId(v string) *DescribeNetworkInterfacesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetTotalCount(v int) *DescribeNetworkInterfacesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetPageNumber(v int) *DescribeNetworkInterfacesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetPageSize(v int) *DescribeNetworkInterfacesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetNextToken(v string) *DescribeNetworkInterfacesResponse {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetNetworkInterfaceSets(v *DescribeNetworkInterfacesResponseNetworkInterfaceSets) *DescribeNetworkInterfacesResponse {
	s.NetworkInterfaceSets = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSets struct {
	NetworkInterfaceSet []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet `json:"NetworkInterfaceSet" xml:"NetworkInterfaceSet" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSets) SetNetworkInterfaceSet(v []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) *DescribeNetworkInterfacesResponseNetworkInterfaceSets {
	s.NetworkInterfaceSet = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet struct {
	NetworkInterfaceId   *string                                                                                     `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	Status               *string                                                                                     `json:"Status" xml:"Status" require:"true"`
	Type                 *string                                                                                     `json:"Type" xml:"Type" require:"true"`
	VpcId                *string                                                                                     `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId            *string                                                                                     `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	ZoneId               *string                                                                                     `json:"ZoneId" xml:"ZoneId" require:"true"`
	PrivateIpAddress     *string                                                                                     `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true"`
	MacAddress           *string                                                                                     `json:"MacAddress" xml:"MacAddress" require:"true"`
	NetworkInterfaceName *string                                                                                     `json:"NetworkInterfaceName" xml:"NetworkInterfaceName" require:"true"`
	Description          *string                                                                                     `json:"Description" xml:"Description" require:"true"`
	InstanceId           *string                                                                                     `json:"InstanceId" xml:"InstanceId" require:"true"`
	CreationTime         *string                                                                                     `json:"CreationTime" xml:"CreationTime" require:"true"`
	ResourceGroupId      *string                                                                                     `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	ServiceID            *int64                                                                                      `json:"ServiceID" xml:"ServiceID" require:"true"`
	ServiceManaged       *bool                                                                                       `json:"ServiceManaged" xml:"ServiceManaged" require:"true"`
	QueueNumber          *int                                                                                        `json:"QueueNumber" xml:"QueueNumber" require:"true"`
	OwnerId              *string                                                                                     `json:"OwnerId" xml:"OwnerId" require:"true"`
	PrivateIpSets        *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets      `json:"PrivateIpSets" xml:"PrivateIpSets" require:"true" type:"Struct"`
	Ipv6Sets             *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets           `json:"Ipv6Sets" xml:"Ipv6Sets" require:"true" type:"Struct"`
	Tags                 *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags               `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
	AssociatedPublicIp   *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp `json:"AssociatedPublicIp" xml:"AssociatedPublicIp" require:"true" type:"Struct"`
	Attachment           *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment         `json:"Attachment" xml:"Attachment" require:"true" type:"Struct"`
	SecurityGroupIds     *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds   `json:"SecurityGroupIds" xml:"SecurityGroupIds" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetStatus(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetType(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetVpcId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.VpcId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetVSwitchId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.VSwitchId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetZoneId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.ZoneId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetMacAddress(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetDescription(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetInstanceId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetCreationTime(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetResourceGroupId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetServiceID(v int64) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.ServiceID = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetServiceManaged(v bool) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetQueueNumber(v int) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.QueueNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetOwnerId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.OwnerId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpSets(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpSets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetIpv6Sets(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetTags(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Tags = v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetAssociatedPublicIp(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.AssociatedPublicIp = v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetAttachment(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.Attachment = v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet) SetSecurityGroupIds(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSet {
	s.SecurityGroupIds = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets struct {
	PrivateIpSet []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet `json:"PrivateIpSet" xml:"PrivateIpSet" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) SetPrivateIpSet(v []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet struct {
	PrivateIpAddress   *string                                                                                                              `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true"`
	Primary            *bool                                                                                                                `json:"Primary" xml:"Primary" require:"true"`
	AssociatedPublicIp *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp `json:"AssociatedPublicIp" xml:"AssociatedPublicIp" require:"true" type:"Struct"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrimary(v bool) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetAssociatedPublicIp(v *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.AssociatedPublicIp = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp struct {
	PublicIpAddress *string `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true"`
	AllocationId    *string `json:"AllocationId" xml:"AllocationId" require:"true"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets struct {
	Ipv6Set []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set `json:"Ipv6Set" xml:"Ipv6Set" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) SetIpv6Set(v []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets {
	s.Ipv6Set = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set struct {
	Ipv6Address *string `json:"Ipv6Address" xml:"Ipv6Address" require:"true"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) SetIpv6Address(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set {
	s.Ipv6Address = &v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags struct {
	Tag []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags) SetTag(v []*DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTags {
	s.Tag = v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag) SetTagKey(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag) SetTagValue(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetTagsTag {
	s.TagValue = &v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp struct {
	PublicIpAddress *string `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true"`
	AllocationId    *string `json:"AllocationId" xml:"AllocationId" require:"true"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) SetPublicIpAddress(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) SetAllocationId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment struct {
	InstanceId              *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	TrunkNetworkInterfaceId *string `json:"TrunkNetworkInterfaceId" xml:"TrunkNetworkInterfaceId" require:"true"`
	DeviceIndex             *int    `json:"DeviceIndex" xml:"DeviceIndex" require:"true"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetInstanceId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetTrunkNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.TrunkNetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetDeviceIndex(v int) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.DeviceIndex = &v
	return s
}

type DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeNetworkInterfacesResponseNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type DeleteNetworkInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId   *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
}

func (s DeleteNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfaceRequest) SetOwnerId(v int64) *DeleteNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *DeleteNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetResourceOwnerId(v int64) *DeleteNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetOwnerAccount(v string) *DeleteNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetRegionId(v string) *DeleteNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *DeleteNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

type DeleteNetworkInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfaceResponse) SetRequestId(v string) *DeleteNetworkInterfaceResponse {
	s.RequestId = &v
	return s
}

type CreateNetworkInterfaceRequest struct {
	OwnerId                        *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount           *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                   *string                             `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                       *string                             `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                            []*CreateNetworkInterfaceRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId                *string                             `json:"ResourceGroupId" xml:"ResourceGroupId"`
	VSwitchId                      *string                             `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	PrimaryIpAddress               *string                             `json:"PrimaryIpAddress" xml:"PrimaryIpAddress"`
	SecurityGroupId                *string                             `json:"SecurityGroupId" xml:"SecurityGroupId"`
	SecurityGroupIds               []*string                           `json:"SecurityGroupIds" xml:"SecurityGroupIds" type:"Repeated"`
	NetworkInterfaceName           *string                             `json:"NetworkInterfaceName" xml:"NetworkInterfaceName"`
	Description                    *string                             `json:"Description" xml:"Description"`
	Visible                        *bool                               `json:"Visible" xml:"Visible"`
	InstanceType                   *string                             `json:"InstanceType" xml:"InstanceType"`
	BusinessType                   *string                             `json:"BusinessType" xml:"BusinessType"`
	PrivateIpAddress               []*string                           `json:"PrivateIpAddress" xml:"PrivateIpAddress" type:"Repeated"`
	SecondaryPrivateIpAddressCount *int                                `json:"SecondaryPrivateIpAddressCount" xml:"SecondaryPrivateIpAddressCount"`
	ClientToken                    *string                             `json:"ClientToken" xml:"ClientToken"`
}

func (s CreateNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceRequest) SetOwnerId(v int64) *CreateNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *CreateNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceOwnerId(v int64) *CreateNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetOwnerAccount(v string) *CreateNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetRegionId(v string) *CreateNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetTag(v []*CreateNetworkInterfaceRequestTag) *CreateNetworkInterfaceRequest {
	s.Tag = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetResourceGroupId(v string) *CreateNetworkInterfaceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetVSwitchId(v string) *CreateNetworkInterfaceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetPrimaryIpAddress(v string) *CreateNetworkInterfaceRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecurityGroupId(v string) *CreateNetworkInterfaceRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecurityGroupIds(v []*string) *CreateNetworkInterfaceRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetNetworkInterfaceName(v string) *CreateNetworkInterfaceRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetDescription(v string) *CreateNetworkInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetVisible(v bool) *CreateNetworkInterfaceRequest {
	s.Visible = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetInstanceType(v string) *CreateNetworkInterfaceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetBusinessType(v string) *CreateNetworkInterfaceRequest {
	s.BusinessType = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetPrivateIpAddress(v []*string) *CreateNetworkInterfaceRequest {
	s.PrivateIpAddress = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecondaryPrivateIpAddressCount(v int) *CreateNetworkInterfaceRequest {
	s.SecondaryPrivateIpAddressCount = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetClientToken(v string) *CreateNetworkInterfaceRequest {
	s.ClientToken = &v
	return s
}

type CreateNetworkInterfaceRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateNetworkInterfaceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceRequestTag) SetKey(v string) *CreateNetworkInterfaceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateNetworkInterfaceRequestTag) SetValue(v string) *CreateNetworkInterfaceRequestTag {
	s.Value = &v
	return s
}

type CreateNetworkInterfaceResponse struct {
	RequestId          *string `json:"RequestId" xml:"RequestId" require:"true"`
	NetworkInterfaceId *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
}

func (s CreateNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponse) SetRequestId(v string) *CreateNetworkInterfaceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkInterfaceResponse) SetNetworkInterfaceId(v string) *CreateNetworkInterfaceResponse {
	s.NetworkInterfaceId = &v
	return s
}

type AttachNetworkInterfaceRequest struct {
	OwnerId                *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount           *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId               *string `json:"RegionId" xml:"RegionId" require:"true"`
	NetworkInterfaceId     *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	InstanceId             *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	TrunkNetworkInstanceId *string `json:"TrunkNetworkInstanceId" xml:"TrunkNetworkInstanceId"`
}

func (s AttachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceRequest) SetOwnerId(v int64) *AttachNetworkInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetResourceOwnerAccount(v string) *AttachNetworkInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetResourceOwnerId(v int64) *AttachNetworkInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetOwnerAccount(v string) *AttachNetworkInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetRegionId(v string) *AttachNetworkInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *AttachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetInstanceId(v string) *AttachNetworkInterfaceRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetTrunkNetworkInstanceId(v string) *AttachNetworkInterfaceRequest {
	s.TrunkNetworkInstanceId = &v
	return s
}

type AttachNetworkInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AttachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceResponse) SetRequestId(v string) *AttachNetworkInterfaceResponse {
	s.RequestId = &v
	return s
}

type DescribeRecommendInstanceTypeRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	Cores                *int      `json:"Cores" xml:"Cores"`
	Memory               *float32  `json:"Memory" xml:"Memory"`
	InstanceFamilyLevel  *string   `json:"InstanceFamilyLevel" xml:"InstanceFamilyLevel"`
	InstanceType         *string   `json:"InstanceType" xml:"InstanceType"`
	NetworkType          *string   `json:"NetworkType" xml:"NetworkType" require:"true"`
	InstanceChargeType   *string   `json:"InstanceChargeType" xml:"InstanceChargeType"`
	SpotStrategy         *string   `json:"SpotStrategy" xml:"SpotStrategy"`
	IoOptimized          *string   `json:"IoOptimized" xml:"IoOptimized"`
	InstanceTypeFamily   []*string `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" type:"Repeated"`
	PriorityStrategy     *string   `json:"PriorityStrategy" xml:"PriorityStrategy"`
	MaxPrice             *float32  `json:"MaxPrice" xml:"MaxPrice"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string   `json:"ZoneId" xml:"ZoneId"`
	SystemDiskCategory   *string   `json:"SystemDiskCategory" xml:"SystemDiskCategory"`
	Scene                *string   `json:"Scene" xml:"Scene"`
}

func (s DescribeRecommendInstanceTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeRequest) SetOwnerId(v int64) *DescribeRecommendInstanceTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetOwnerAccount(v string) *DescribeRecommendInstanceTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetResourceOwnerAccount(v string) *DescribeRecommendInstanceTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetResourceOwnerId(v int64) *DescribeRecommendInstanceTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetCores(v int) *DescribeRecommendInstanceTypeRequest {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetMemory(v float32) *DescribeRecommendInstanceTypeRequest {
	s.Memory = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceFamilyLevel(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceType(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetNetworkType(v string) *DescribeRecommendInstanceTypeRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceChargeType(v string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetSpotStrategy(v string) *DescribeRecommendInstanceTypeRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetIoOptimized(v string) *DescribeRecommendInstanceTypeRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetInstanceTypeFamily(v []*string) *DescribeRecommendInstanceTypeRequest {
	s.InstanceTypeFamily = v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetPriorityStrategy(v string) *DescribeRecommendInstanceTypeRequest {
	s.PriorityStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetMaxPrice(v float32) *DescribeRecommendInstanceTypeRequest {
	s.MaxPrice = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetRegionId(v string) *DescribeRecommendInstanceTypeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetZoneId(v string) *DescribeRecommendInstanceTypeRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetSystemDiskCategory(v string) *DescribeRecommendInstanceTypeRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeRecommendInstanceTypeRequest) SetScene(v string) *DescribeRecommendInstanceTypeRequest {
	s.Scene = &v
	return s
}

type DescribeRecommendInstanceTypeResponse struct {
	RequestId *string                                    `json:"RequestId" xml:"RequestId" require:"true"`
	Data      *DescribeRecommendInstanceTypeResponseData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s DescribeRecommendInstanceTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponse) SetRequestId(v string) *DescribeRecommendInstanceTypeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponse) SetData(v *DescribeRecommendInstanceTypeResponseData) *DescribeRecommendInstanceTypeResponse {
	s.Data = v
	return s
}

type DescribeRecommendInstanceTypeResponseData struct {
	RecommendInstanceType []*DescribeRecommendInstanceTypeResponseDataRecommendInstanceType `json:"RecommendInstanceType" xml:"RecommendInstanceType" require:"true" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeResponseData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseData) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseData) SetRecommendInstanceType(v []*DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) *DescribeRecommendInstanceTypeResponseData {
	s.RecommendInstanceType = v
	return s
}

type DescribeRecommendInstanceTypeResponseDataRecommendInstanceType struct {
	RegionId           *string                                                                     `json:"RegionId" xml:"RegionId" require:"true"`
	CommodityCode      *string                                                                     `json:"CommodityCode" xml:"CommodityCode" require:"true"`
	Scene              *string                                                                     `json:"Scene" xml:"Scene" require:"true"`
	InstanceChargeType *string                                                                     `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	SpotStrategy       *string                                                                     `json:"SpotStrategy" xml:"SpotStrategy" require:"true"`
	Priority           *int                                                                        `json:"Priority" xml:"Priority" require:"true"`
	Zones              *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones        `json:"Zones" xml:"Zones" require:"true" type:"Struct"`
	InstanceType       *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType `json:"InstanceType" xml:"InstanceType" require:"true" type:"Struct"`
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetRegionId(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.RegionId = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetCommodityCode(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.CommodityCode = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetScene(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.Scene = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetInstanceChargeType(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetSpotStrategy(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetPriority(v int) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.Priority = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetZones(v *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.Zones = v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType) SetInstanceType(v *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceType {
	s.InstanceType = v
	return s
}

type DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones struct {
	Zone []*DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone `json:"zone" xml:"zone" require:"true" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones) SetZone(v []*DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZones {
	s.Zone = v
	return s
}

type DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone struct {
	ZoneNo       *string                                                                              `json:"ZoneNo" xml:"ZoneNo" require:"true"`
	NetworkTypes *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes `json:"NetworkTypes" xml:"NetworkTypes" require:"true" type:"Struct"`
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone) SetZoneNo(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone {
	s.ZoneNo = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone) SetNetworkTypes(v *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZone {
	s.NetworkTypes = v
	return s
}

type DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes struct {
	NetworkType []*string `json:"NetworkType" xml:"NetworkType" require:"true" type:"Repeated"`
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes) SetNetworkType(v []*string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeZonesZoneNetworkTypes {
	s.NetworkType = v
	return s
}

type DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType struct {
	Generation         *string `json:"Generation" xml:"Generation" require:"true"`
	InstanceTypeFamily *string `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true"`
	InstanceType       *string `json:"InstanceType" xml:"InstanceType" require:"true"`
	SupportIoOptimized *string `json:"SupportIoOptimized" xml:"SupportIoOptimized" require:"true"`
	Cores              *int    `json:"Cores" xml:"Cores" require:"true"`
	Memory             *int    `json:"Memory" xml:"Memory" require:"true"`
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetGeneration(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.Generation = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetInstanceTypeFamily(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetInstanceType(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetSupportIoOptimized(v string) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.SupportIoOptimized = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetCores(v int) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType) SetMemory(v int) *DescribeRecommendInstanceTypeResponseDataRecommendInstanceTypeInstanceType {
	s.Memory = &v
	return s
}

type ModifyPrepayInstanceSpecRequest struct {
	OwnerId              *int64                                     `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string                                    `json:"InstanceId" xml:"InstanceId" require:"true"`
	RegionId             *string                                    `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceType         *string                                    `json:"InstanceType" xml:"InstanceType" require:"true"`
	OperatorType         *string                                    `json:"OperatorType" xml:"OperatorType"`
	ClientToken          *string                                    `json:"ClientToken" xml:"ClientToken"`
	AutoPay              *bool                                      `json:"AutoPay" xml:"AutoPay"`
	MigrateAcrossZone    *bool                                      `json:"MigrateAcrossZone" xml:"MigrateAcrossZone"`
	SystemDisk           *ModifyPrepayInstanceSpecRequestSystemDisk `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	OwnerAccount         *string                                    `json:"OwnerAccount" xml:"OwnerAccount"`
	RebootTime           *string                                    `json:"RebootTime" xml:"RebootTime"`
	EndTime              *string                                    `json:"EndTime" xml:"EndTime"`
	RebootWhenFinished   *bool                                      `json:"RebootWhenFinished" xml:"RebootWhenFinished"`
}

func (s ModifyPrepayInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequest) SetOwnerId(v int64) *ModifyPrepayInstanceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetResourceOwnerAccount(v string) *ModifyPrepayInstanceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetResourceOwnerId(v int64) *ModifyPrepayInstanceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceId(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRegionId(v string) *ModifyPrepayInstanceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceType(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetOperatorType(v string) *ModifyPrepayInstanceSpecRequest {
	s.OperatorType = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetClientToken(v string) *ModifyPrepayInstanceSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetAutoPay(v bool) *ModifyPrepayInstanceSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetMigrateAcrossZone(v bool) *ModifyPrepayInstanceSpecRequest {
	s.MigrateAcrossZone = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetSystemDisk(v *ModifyPrepayInstanceSpecRequestSystemDisk) *ModifyPrepayInstanceSpecRequest {
	s.SystemDisk = v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetOwnerAccount(v string) *ModifyPrepayInstanceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRebootTime(v string) *ModifyPrepayInstanceSpecRequest {
	s.RebootTime = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetEndTime(v string) *ModifyPrepayInstanceSpecRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetRebootWhenFinished(v bool) *ModifyPrepayInstanceSpecRequest {
	s.RebootWhenFinished = &v
	return s
}

type ModifyPrepayInstanceSpecRequestSystemDisk struct {
	Category *string `json:"Category" xml:"Category"`
}

func (s ModifyPrepayInstanceSpecRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequestSystemDisk) SetCategory(v string) *ModifyPrepayInstanceSpecRequestSystemDisk {
	s.Category = &v
	return s
}

type ModifyPrepayInstanceSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId   *string `json:"OrderId" xml:"OrderId" require:"true"`
}

func (s ModifyPrepayInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponse) SetRequestId(v string) *ModifyPrepayInstanceSpecResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetOrderId(v string) *ModifyPrepayInstanceSpecResponse {
	s.OrderId = &v
	return s
}

type ModifyInstanceChargeTypeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
	IncludeDataDisks     *bool   `json:"IncludeDataDisks" xml:"IncludeDataDisks"`
	DryRun               *bool   `json:"DryRun" xml:"DryRun"`
	AutoPay              *bool   `json:"AutoPay" xml:"AutoPay"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	IsDetailFee          *bool   `json:"IsDetailFee" xml:"IsDetailFee"`
}

func (s ModifyInstanceChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceIds(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetRegionId(v string) *ModifyInstanceChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriod(v int) *ModifyInstanceChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriodUnit(v string) *ModifyInstanceChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIncludeDataDisks(v bool) *ModifyInstanceChargeTypeRequest {
	s.IncludeDataDisks = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetDryRun(v bool) *ModifyInstanceChargeTypeRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetAutoPay(v bool) *ModifyInstanceChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetClientToken(v string) *ModifyInstanceChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIsDetailFee(v bool) *ModifyInstanceChargeTypeRequest {
	s.IsDetailFee = &v
	return s
}

type ModifyInstanceChargeTypeResponse struct {
	RequestId      *string                                         `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId        *string                                         `json:"OrderId" xml:"OrderId" require:"true"`
	FeeOfInstances *ModifyInstanceChargeTypeResponseFeeOfInstances `json:"FeeOfInstances" xml:"FeeOfInstances" require:"true" type:"Struct"`
}

func (s ModifyInstanceChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponse) SetRequestId(v string) *ModifyInstanceChargeTypeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetOrderId(v string) *ModifyInstanceChargeTypeResponse {
	s.OrderId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetFeeOfInstances(v *ModifyInstanceChargeTypeResponseFeeOfInstances) *ModifyInstanceChargeTypeResponse {
	s.FeeOfInstances = v
	return s
}

type ModifyInstanceChargeTypeResponseFeeOfInstances struct {
	FeeOfInstance []*ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance `json:"FeeOfInstance" xml:"FeeOfInstance" require:"true" type:"Repeated"`
}

func (s ModifyInstanceChargeTypeResponseFeeOfInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseFeeOfInstances) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseFeeOfInstances) SetFeeOfInstance(v []*ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) *ModifyInstanceChargeTypeResponseFeeOfInstances {
	s.FeeOfInstance = v
	return s
}

type ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Fee        *string `json:"Fee" xml:"Fee" require:"true"`
	Currency   *string `json:"Currency" xml:"Currency" require:"true"`
}

func (s ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) SetInstanceId(v string) *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) SetFee(v string) *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.Fee = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance) SetCurrency(v string) *ModifyInstanceChargeTypeResponseFeeOfInstancesFeeOfInstance {
	s.Currency = &v
	return s
}

type JoinResourceGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ResourceType         *string `json:"ResourceType" xml:"ResourceType"`
	ResourceId           *string `json:"ResourceId" xml:"ResourceId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	ResourceGroupId      *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s JoinResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupRequest) SetOwnerId(v int64) *JoinResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceOwnerAccount(v string) *JoinResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceOwnerId(v int64) *JoinResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetOwnerAccount(v string) *JoinResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceType(v string) *JoinResourceGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceId(v string) *JoinResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetRegionId(v string) *JoinResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceGroupId(v string) *JoinResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type JoinResourceGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s JoinResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponse) SetRequestId(v string) *JoinResourceGroupResponse {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupPolicyRequest struct {
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InnerAccessPolicy    *string `json:"InnerAccessPolicy" xml:"InnerAccessPolicy" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
}

func (s ModifySecurityGroupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupPolicyRequest) SetSecurityGroupId(v string) *ModifySecurityGroupPolicyRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetRegionId(v string) *ModifySecurityGroupPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetInnerAccessPolicy(v string) *ModifySecurityGroupPolicyRequest {
	s.InnerAccessPolicy = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetClientToken(v string) *ModifySecurityGroupPolicyRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetOwnerAccount(v string) *ModifySecurityGroupPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupPolicyRequest) SetOwnerId(v int64) *ModifySecurityGroupPolicyRequest {
	s.OwnerId = &v
	return s
}

type ModifySecurityGroupPolicyResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifySecurityGroupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupPolicyResponse) SetRequestId(v string) *ModifySecurityGroupPolicyResponse {
	s.RequestId = &v
	return s
}

type DescribeSecurityGroupReferencesRequest struct {
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId      []*string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
}

func (s DescribeSecurityGroupReferencesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesRequest) SetRegionId(v string) *DescribeSecurityGroupReferencesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetSecurityGroupId(v []*string) *DescribeSecurityGroupReferencesRequest {
	s.SecurityGroupId = v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupReferencesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupReferencesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetOwnerAccount(v string) *DescribeSecurityGroupReferencesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupReferencesRequest) SetOwnerId(v int64) *DescribeSecurityGroupReferencesRequest {
	s.OwnerId = &v
	return s
}

type DescribeSecurityGroupReferencesResponse struct {
	RequestId               *string                                                         `json:"RequestId" xml:"RequestId" require:"true"`
	SecurityGroupReferences *DescribeSecurityGroupReferencesResponseSecurityGroupReferences `json:"SecurityGroupReferences" xml:"SecurityGroupReferences" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupReferencesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponse) SetRequestId(v string) *DescribeSecurityGroupReferencesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponse) SetSecurityGroupReferences(v *DescribeSecurityGroupReferencesResponseSecurityGroupReferences) *DescribeSecurityGroupReferencesResponse {
	s.SecurityGroupReferences = v
	return s
}

type DescribeSecurityGroupReferencesResponseSecurityGroupReferences struct {
	SecurityGroupReference []*DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference `json:"SecurityGroupReference" xml:"SecurityGroupReference" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferences) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferences) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferences) SetSecurityGroupReference(v []*DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference) *DescribeSecurityGroupReferencesResponseSecurityGroupReferences {
	s.SecurityGroupReference = v
	return s
}

type DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference struct {
	SecurityGroupId           *string                                                                                                        `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	ReferencingSecurityGroups *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups `json:"ReferencingSecurityGroups" xml:"ReferencingSecurityGroups" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference) SetSecurityGroupId(v string) *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference) SetReferencingSecurityGroups(v *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups) *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReference {
	s.ReferencingSecurityGroups = v
	return s
}

type DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups struct {
	ReferencingSecurityGroup []*DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup `json:"ReferencingSecurityGroup" xml:"ReferencingSecurityGroup" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups) SetReferencingSecurityGroup(v []*DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup) *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroups {
	s.ReferencingSecurityGroup = v
	return s
}

type DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup struct {
	AliUid          *string `json:"AliUid" xml:"AliUid" require:"true"`
	SecurityGroupId *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup) SetAliUid(v string) *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup {
	s.AliUid = &v
	return s
}

func (s *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup) SetSecurityGroupId(v string) *DescribeSecurityGroupReferencesResponseSecurityGroupReferencesSecurityGroupReferenceReferencingSecurityGroupsReferencingSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

type DetachClassicLinkVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	VpcId                *string `json:"VpcId" xml:"VpcId" require:"true"`
}

func (s DetachClassicLinkVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachClassicLinkVpcRequest) GoString() string {
	return s.String()
}

func (s *DetachClassicLinkVpcRequest) SetOwnerId(v int64) *DetachClassicLinkVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetResourceOwnerAccount(v string) *DetachClassicLinkVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetResourceOwnerId(v int64) *DetachClassicLinkVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetRegionId(v string) *DetachClassicLinkVpcRequest {
	s.RegionId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetInstanceId(v string) *DetachClassicLinkVpcRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachClassicLinkVpcRequest) SetVpcId(v string) *DetachClassicLinkVpcRequest {
	s.VpcId = &v
	return s
}

type DetachClassicLinkVpcResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DetachClassicLinkVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachClassicLinkVpcResponse) GoString() string {
	return s.String()
}

func (s *DetachClassicLinkVpcResponse) SetRequestId(v string) *DetachClassicLinkVpcResponse {
	s.RequestId = &v
	return s
}

type DescribeClassicLinkInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId                *string `json:"VpcId" xml:"VpcId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	PageNumber           *string `json:"PageNumber" xml:"PageNumber"`
	PageSize             *string `json:"PageSize" xml:"PageSize"`
}

func (s DescribeClassicLinkInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesRequest) SetOwnerId(v int64) *DescribeClassicLinkInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetResourceOwnerAccount(v string) *DescribeClassicLinkInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetResourceOwnerId(v int64) *DescribeClassicLinkInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetRegionId(v string) *DescribeClassicLinkInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetVpcId(v string) *DescribeClassicLinkInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetInstanceId(v string) *DescribeClassicLinkInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetPageNumber(v string) *DescribeClassicLinkInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeClassicLinkInstancesRequest) SetPageSize(v string) *DescribeClassicLinkInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeClassicLinkInstancesResponse struct {
	RequestId  *string                                    `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                       `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                       `json:"PageSize" xml:"PageSize" require:"true"`
	Links      *DescribeClassicLinkInstancesResponseLinks `json:"Links" xml:"Links" require:"true" type:"Struct"`
}

func (s DescribeClassicLinkInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponse) SetRequestId(v string) *DescribeClassicLinkInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponse) SetTotalCount(v int) *DescribeClassicLinkInstancesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponse) SetPageNumber(v int) *DescribeClassicLinkInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponse) SetPageSize(v int) *DescribeClassicLinkInstancesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponse) SetLinks(v *DescribeClassicLinkInstancesResponseLinks) *DescribeClassicLinkInstancesResponse {
	s.Links = v
	return s
}

type DescribeClassicLinkInstancesResponseLinks struct {
	Link []*DescribeClassicLinkInstancesResponseLinksLink `json:"Link" xml:"Link" require:"true" type:"Repeated"`
}

func (s DescribeClassicLinkInstancesResponseLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponseLinks) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponseLinks) SetLink(v []*DescribeClassicLinkInstancesResponseLinksLink) *DescribeClassicLinkInstancesResponseLinks {
	s.Link = v
	return s
}

type DescribeClassicLinkInstancesResponseLinksLink struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	VpcId      *string `json:"VpcId" xml:"VpcId" require:"true"`
}

func (s DescribeClassicLinkInstancesResponseLinksLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeClassicLinkInstancesResponseLinksLink) GoString() string {
	return s.String()
}

func (s *DescribeClassicLinkInstancesResponseLinksLink) SetInstanceId(v string) *DescribeClassicLinkInstancesResponseLinksLink {
	s.InstanceId = &v
	return s
}

func (s *DescribeClassicLinkInstancesResponseLinksLink) SetVpcId(v string) *DescribeClassicLinkInstancesResponseLinksLink {
	s.VpcId = &v
	return s
}

type AttachClassicLinkVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	VpcId                *string `json:"VpcId" xml:"VpcId" require:"true"`
}

func (s AttachClassicLinkVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachClassicLinkVpcRequest) GoString() string {
	return s.String()
}

func (s *AttachClassicLinkVpcRequest) SetOwnerId(v int64) *AttachClassicLinkVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetResourceOwnerAccount(v string) *AttachClassicLinkVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetResourceOwnerId(v int64) *AttachClassicLinkVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetRegionId(v string) *AttachClassicLinkVpcRequest {
	s.RegionId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetInstanceId(v string) *AttachClassicLinkVpcRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachClassicLinkVpcRequest) SetVpcId(v string) *AttachClassicLinkVpcRequest {
	s.VpcId = &v
	return s
}

type AttachClassicLinkVpcResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AttachClassicLinkVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachClassicLinkVpcResponse) GoString() string {
	return s.String()
}

func (s *AttachClassicLinkVpcResponse) SetRequestId(v string) *AttachClassicLinkVpcResponse {
	s.RequestId = &v
	return s
}

type DetachInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RamRoleName          *string `json:"RamRoleName" xml:"RamRoleName"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds" require:"true"`
}

func (s DetachInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleRequest) SetOwnerId(v int64) *DetachInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *DetachInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetResourceOwnerId(v int64) *DetachInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetRegionId(v string) *DetachInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetRamRoleName(v string) *DetachInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

func (s *DetachInstanceRamRoleRequest) SetInstanceIds(v string) *DetachInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

type DetachInstanceRamRoleResponse struct {
	RequestId                    *string                                                    `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount                   *int                                                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	FailCount                    *int                                                       `json:"FailCount" xml:"FailCount" require:"true"`
	RamRoleName                  *string                                                    `json:"RamRoleName" xml:"RamRoleName" require:"true"`
	DetachInstanceRamRoleResults *DetachInstanceRamRoleResponseDetachInstanceRamRoleResults `json:"DetachInstanceRamRoleResults" xml:"DetachInstanceRamRoleResults" require:"true" type:"Struct"`
}

func (s DetachInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponse) SetRequestId(v string) *DetachInstanceRamRoleResponse {
	s.RequestId = &v
	return s
}

func (s *DetachInstanceRamRoleResponse) SetTotalCount(v int) *DetachInstanceRamRoleResponse {
	s.TotalCount = &v
	return s
}

func (s *DetachInstanceRamRoleResponse) SetFailCount(v int) *DetachInstanceRamRoleResponse {
	s.FailCount = &v
	return s
}

func (s *DetachInstanceRamRoleResponse) SetRamRoleName(v string) *DetachInstanceRamRoleResponse {
	s.RamRoleName = &v
	return s
}

func (s *DetachInstanceRamRoleResponse) SetDetachInstanceRamRoleResults(v *DetachInstanceRamRoleResponseDetachInstanceRamRoleResults) *DetachInstanceRamRoleResponse {
	s.DetachInstanceRamRoleResults = v
	return s
}

type DetachInstanceRamRoleResponseDetachInstanceRamRoleResults struct {
	DetachInstanceRamRoleResult []*DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult `json:"DetachInstanceRamRoleResult" xml:"DetachInstanceRamRoleResult" require:"true" type:"Repeated"`
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResults) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResults) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResults) SetDetachInstanceRamRoleResult(v []*DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResults {
	s.DetachInstanceRamRoleResult = v
	return s
}

type DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult struct {
	InstanceId          *string                                                                                                  `json:"InstanceId" xml:"InstanceId" require:"true"`
	Success             *bool                                                                                                    `json:"Success" xml:"Success" require:"true"`
	Code                *string                                                                                                  `json:"Code" xml:"Code" require:"true"`
	Message             *string                                                                                                  `json:"Message" xml:"Message" require:"true"`
	InstanceRamRoleSets *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets `json:"InstanceRamRoleSets" xml:"InstanceRamRoleSets" require:"true" type:"Struct"`
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) SetInstanceId(v string) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult {
	s.InstanceId = &v
	return s
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) SetSuccess(v bool) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult {
	s.Success = &v
	return s
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) SetCode(v string) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult {
	s.Code = &v
	return s
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) SetMessage(v string) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult {
	s.Message = &v
	return s
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult) SetInstanceRamRoleSets(v *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResult {
	s.InstanceRamRoleSets = v
	return s
}

type DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets struct {
	InstanceRamRoleSet []*DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet `json:"InstanceRamRoleSet" xml:"InstanceRamRoleSet" require:"true" type:"Repeated"`
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets) SetInstanceRamRoleSet(v []*DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSets {
	s.InstanceRamRoleSet = v
	return s
}

type DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet struct {
	InstanceId  *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RamRoleName *string `json:"RamRoleName" xml:"RamRoleName" require:"true"`
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet) GoString() string {
	return s.String()
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet) SetInstanceId(v string) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet {
	s.InstanceId = &v
	return s
}

func (s *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet) SetRamRoleName(v string) *DetachInstanceRamRoleResponseDetachInstanceRamRoleResultsDetachInstanceRamRoleResultInstanceRamRoleSetsInstanceRamRoleSet {
	s.RamRoleName = &v
	return s
}

type DescribeInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds"`
	RamRoleName          *string `json:"RamRoleName" xml:"RamRoleName"`
}

func (s DescribeInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleRequest) SetOwnerId(v int64) *DescribeInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *DescribeInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetResourceOwnerId(v int64) *DescribeInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetPageNumber(v int) *DescribeInstanceRamRoleRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetPageSize(v int) *DescribeInstanceRamRoleRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetRegionId(v string) *DescribeInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetInstanceIds(v string) *DescribeInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceRamRoleRequest) SetRamRoleName(v string) *DescribeInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

type DescribeInstanceRamRoleResponse struct {
	RequestId           *string                                             `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId            *string                                             `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount          *int                                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	InstanceRamRoleSets *DescribeInstanceRamRoleResponseInstanceRamRoleSets `json:"InstanceRamRoleSets" xml:"InstanceRamRoleSets" require:"true" type:"Struct"`
}

func (s DescribeInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponse) SetRequestId(v string) *DescribeInstanceRamRoleResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceRamRoleResponse) SetRegionId(v string) *DescribeInstanceRamRoleResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceRamRoleResponse) SetTotalCount(v int) *DescribeInstanceRamRoleResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceRamRoleResponse) SetInstanceRamRoleSets(v *DescribeInstanceRamRoleResponseInstanceRamRoleSets) *DescribeInstanceRamRoleResponse {
	s.InstanceRamRoleSets = v
	return s
}

type DescribeInstanceRamRoleResponseInstanceRamRoleSets struct {
	InstanceRamRoleSet []*DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet `json:"InstanceRamRoleSet" xml:"InstanceRamRoleSet" require:"true" type:"Repeated"`
}

func (s DescribeInstanceRamRoleResponseInstanceRamRoleSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponseInstanceRamRoleSets) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponseInstanceRamRoleSets) SetInstanceRamRoleSet(v []*DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet) *DescribeInstanceRamRoleResponseInstanceRamRoleSets {
	s.InstanceRamRoleSet = v
	return s
}

type DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet struct {
	InstanceId  *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RamRoleName *string `json:"RamRoleName" xml:"RamRoleName" require:"true"`
}

func (s DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet) SetInstanceId(v string) *DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet) SetRamRoleName(v string) *DescribeInstanceRamRoleResponseInstanceRamRoleSetsInstanceRamRoleSet {
	s.RamRoleName = &v
	return s
}

type AttachInstanceRamRoleRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RamRoleName          *string `json:"RamRoleName" xml:"RamRoleName" require:"true"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds" require:"true"`
}

func (s AttachInstanceRamRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleRequest) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleRequest) SetOwnerId(v int64) *AttachInstanceRamRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetResourceOwnerAccount(v string) *AttachInstanceRamRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetResourceOwnerId(v int64) *AttachInstanceRamRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetRegionId(v string) *AttachInstanceRamRoleRequest {
	s.RegionId = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetRamRoleName(v string) *AttachInstanceRamRoleRequest {
	s.RamRoleName = &v
	return s
}

func (s *AttachInstanceRamRoleRequest) SetInstanceIds(v string) *AttachInstanceRamRoleRequest {
	s.InstanceIds = &v
	return s
}

type AttachInstanceRamRoleResponse struct {
	RequestId                    *string                                                    `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount                   *int                                                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	FailCount                    *int                                                       `json:"FailCount" xml:"FailCount" require:"true"`
	RamRoleName                  *string                                                    `json:"RamRoleName" xml:"RamRoleName" require:"true"`
	AttachInstanceRamRoleResults *AttachInstanceRamRoleResponseAttachInstanceRamRoleResults `json:"AttachInstanceRamRoleResults" xml:"AttachInstanceRamRoleResults" require:"true" type:"Struct"`
}

func (s AttachInstanceRamRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponse) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponse) SetRequestId(v string) *AttachInstanceRamRoleResponse {
	s.RequestId = &v
	return s
}

func (s *AttachInstanceRamRoleResponse) SetTotalCount(v int) *AttachInstanceRamRoleResponse {
	s.TotalCount = &v
	return s
}

func (s *AttachInstanceRamRoleResponse) SetFailCount(v int) *AttachInstanceRamRoleResponse {
	s.FailCount = &v
	return s
}

func (s *AttachInstanceRamRoleResponse) SetRamRoleName(v string) *AttachInstanceRamRoleResponse {
	s.RamRoleName = &v
	return s
}

func (s *AttachInstanceRamRoleResponse) SetAttachInstanceRamRoleResults(v *AttachInstanceRamRoleResponseAttachInstanceRamRoleResults) *AttachInstanceRamRoleResponse {
	s.AttachInstanceRamRoleResults = v
	return s
}

type AttachInstanceRamRoleResponseAttachInstanceRamRoleResults struct {
	AttachInstanceRamRoleResult []*AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult `json:"AttachInstanceRamRoleResult" xml:"AttachInstanceRamRoleResult" require:"true" type:"Repeated"`
}

func (s AttachInstanceRamRoleResponseAttachInstanceRamRoleResults) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponseAttachInstanceRamRoleResults) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponseAttachInstanceRamRoleResults) SetAttachInstanceRamRoleResult(v []*AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) *AttachInstanceRamRoleResponseAttachInstanceRamRoleResults {
	s.AttachInstanceRamRoleResult = v
	return s
}

type AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Success    *bool   `json:"Success" xml:"Success" require:"true"`
	Code       *string `json:"Code" xml:"Code" require:"true"`
	Message    *string `json:"Message" xml:"Message" require:"true"`
}

func (s AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) GoString() string {
	return s.String()
}

func (s *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) SetInstanceId(v string) *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult {
	s.InstanceId = &v
	return s
}

func (s *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) SetSuccess(v bool) *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult {
	s.Success = &v
	return s
}

func (s *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) SetCode(v string) *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult {
	s.Code = &v
	return s
}

func (s *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult) SetMessage(v string) *AttachInstanceRamRoleResponseAttachInstanceRamRoleResultsAttachInstanceRamRoleResult {
	s.Message = &v
	return s
}

type DescribeSnapshotPackageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeSnapshotPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageRequest) SetOwnerId(v int64) *DescribeSnapshotPackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotPackageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetResourceOwnerId(v int64) *DescribeSnapshotPackageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetPageNumber(v int) *DescribeSnapshotPackageRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetPageSize(v int) *DescribeSnapshotPackageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetRegionId(v string) *DescribeSnapshotPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotPackageRequest) SetOwnerAccount(v string) *DescribeSnapshotPackageRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSnapshotPackageResponse struct {
	RequestId        *string                                          `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount       *int                                             `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber       *int                                             `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize         *int                                             `json:"PageSize" xml:"PageSize" require:"true"`
	SnapshotPackages *DescribeSnapshotPackageResponseSnapshotPackages `json:"SnapshotPackages" xml:"SnapshotPackages" require:"true" type:"Struct"`
}

func (s DescribeSnapshotPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponse) SetRequestId(v string) *DescribeSnapshotPackageResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotPackageResponse) SetTotalCount(v int) *DescribeSnapshotPackageResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotPackageResponse) SetPageNumber(v int) *DescribeSnapshotPackageResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotPackageResponse) SetPageSize(v int) *DescribeSnapshotPackageResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotPackageResponse) SetSnapshotPackages(v *DescribeSnapshotPackageResponseSnapshotPackages) *DescribeSnapshotPackageResponse {
	s.SnapshotPackages = v
	return s
}

type DescribeSnapshotPackageResponseSnapshotPackages struct {
	SnapshotPackage []*DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage `json:"SnapshotPackage" xml:"SnapshotPackage" require:"true" type:"Repeated"`
}

func (s DescribeSnapshotPackageResponseSnapshotPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponseSnapshotPackages) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponseSnapshotPackages) SetSnapshotPackage(v []*DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) *DescribeSnapshotPackageResponseSnapshotPackages {
	s.SnapshotPackage = v
	return s
}

type DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage struct {
	StartTime    *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime      *string `json:"EndTime" xml:"EndTime" require:"true"`
	InitCapacity *int64  `json:"InitCapacity" xml:"InitCapacity" require:"true"`
	DisplayName  *string `json:"DisplayName" xml:"DisplayName" require:"true"`
}

func (s DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) SetStartTime(v string) *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage {
	s.StartTime = &v
	return s
}

func (s *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) SetEndTime(v string) *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage {
	s.EndTime = &v
	return s
}

func (s *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) SetInitCapacity(v int64) *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage {
	s.InitCapacity = &v
	return s
}

func (s *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage) SetDisplayName(v string) *DescribeSnapshotPackageResponseSnapshotPackagesSnapshotPackage {
	s.DisplayName = &v
	return s
}

type ModifySecurityGroupRuleRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId         *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	IpProtocol              *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange               *string `json:"PortRange" xml:"PortRange" require:"true"`
	SourceGroupId           *string `json:"SourceGroupId" xml:"SourceGroupId"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId" xml:"SourceGroupOwnerId"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount" xml:"SourceGroupOwnerAccount"`
	SourceCidrIp            *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange         *string `json:"SourcePortRange" xml:"SourcePortRange"`
	DestCidrIp              *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	Policy                  *string `json:"Policy" xml:"Policy"`
	Priority                *string `json:"Priority" xml:"Priority"`
	NicType                 *string `json:"NicType" xml:"NicType"`
	ClientToken             *string `json:"ClientToken" xml:"ClientToken"`
	Description             *string `json:"Description" xml:"Description"`
}

func (s ModifySecurityGroupRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupRuleRequest) SetOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetRegionId(v string) *ModifySecurityGroupRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSecurityGroupId(v string) *ModifySecurityGroupRuleRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpProtocol(v string) *ModifySecurityGroupRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPortRange(v string) *ModifySecurityGroupRuleRequest {
	s.PortRange = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupId(v string) *ModifySecurityGroupRuleRequest {
	s.SourceGroupId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupOwnerId(v int64) *ModifySecurityGroupRuleRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceGroupOwnerAccount(v string) *ModifySecurityGroupRuleRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourceCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpv6SourceCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetSourcePortRange(v string) *ModifySecurityGroupRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetDestCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetIpv6DestCidrIp(v string) *ModifySecurityGroupRuleRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPolicy(v string) *ModifySecurityGroupRuleRequest {
	s.Policy = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetPriority(v string) *ModifySecurityGroupRuleRequest {
	s.Priority = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetNicType(v string) *ModifySecurityGroupRuleRequest {
	s.NicType = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetClientToken(v string) *ModifySecurityGroupRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifySecurityGroupRuleRequest) SetDescription(v string) *ModifySecurityGroupRuleRequest {
	s.Description = &v
	return s
}

type ModifySecurityGroupRuleResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifySecurityGroupRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupRuleResponse) SetRequestId(v string) *ModifySecurityGroupRuleResponse {
	s.RequestId = &v
	return s
}

type DescribeSnapshotMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
	Category             *string `json:"Category" xml:"Category"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeSnapshotMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataRequest) SetOwnerId(v int64) *DescribeSnapshotMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeSnapshotMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetRegionId(v string) *DescribeSnapshotMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetStartTime(v string) *DescribeSnapshotMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetEndTime(v string) *DescribeSnapshotMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetPeriod(v int) *DescribeSnapshotMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetCategory(v string) *DescribeSnapshotMonitorDataRequest {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotMonitorDataRequest) SetOwnerAccount(v string) *DescribeSnapshotMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSnapshotMonitorDataResponse struct {
	RequestId   *string                                         `json:"RequestId" xml:"RequestId" require:"true"`
	MonitorData *DescribeSnapshotMonitorDataResponseMonitorData `json:"MonitorData" xml:"MonitorData" require:"true" type:"Struct"`
}

func (s DescribeSnapshotMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponse) SetRequestId(v string) *DescribeSnapshotMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotMonitorDataResponse) SetMonitorData(v *DescribeSnapshotMonitorDataResponseMonitorData) *DescribeSnapshotMonitorDataResponse {
	s.MonitorData = v
	return s
}

type DescribeSnapshotMonitorDataResponseMonitorData struct {
	DataPoint []*DescribeSnapshotMonitorDataResponseMonitorDataDataPoint `json:"DataPoint" xml:"DataPoint" require:"true" type:"Repeated"`
}

func (s DescribeSnapshotMonitorDataResponseMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponseMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponseMonitorData) SetDataPoint(v []*DescribeSnapshotMonitorDataResponseMonitorDataDataPoint) *DescribeSnapshotMonitorDataResponseMonitorData {
	s.DataPoint = v
	return s
}

type DescribeSnapshotMonitorDataResponseMonitorDataDataPoint struct {
	TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
	Size      *int64  `json:"Size" xml:"Size" require:"true"`
}

func (s DescribeSnapshotMonitorDataResponseMonitorDataDataPoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotMonitorDataResponseMonitorDataDataPoint) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotMonitorDataResponseMonitorDataDataPoint) SetTimeStamp(v string) *DescribeSnapshotMonitorDataResponseMonitorDataDataPoint {
	s.TimeStamp = &v
	return s
}

func (s *DescribeSnapshotMonitorDataResponseMonitorDataDataPoint) SetSize(v int64) *DescribeSnapshotMonitorDataResponseMonitorDataDataPoint {
	s.Size = &v
	return s
}

type DescribeRenewalPriceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceType         *string `json:"ResourceType" xml:"ResourceType"`
	ResourceId           *string `json:"ResourceId" xml:"ResourceId" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
	PriceUnit            *string `json:"PriceUnit" xml:"PriceUnit"`
}

func (s DescribeRenewalPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceRequest) SetOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetRegionId(v string) *DescribeRenewalPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceType(v string) *DescribeRenewalPriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceId(v string) *DescribeRenewalPriceRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPeriod(v int) *DescribeRenewalPriceRequest {
	s.Period = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPriceUnit(v string) *DescribeRenewalPriceRequest {
	s.PriceUnit = &v
	return s
}

type DescribeRenewalPriceResponse struct {
	RequestId *string                                `json:"RequestId" xml:"RequestId" require:"true"`
	PriceInfo *DescribeRenewalPriceResponsePriceInfo `json:"PriceInfo" xml:"PriceInfo" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponse) SetRequestId(v string) *DescribeRenewalPriceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRenewalPriceResponse) SetPriceInfo(v *DescribeRenewalPriceResponsePriceInfo) *DescribeRenewalPriceResponse {
	s.PriceInfo = v
	return s
}

type DescribeRenewalPriceResponsePriceInfo struct {
	Rules *DescribeRenewalPriceResponsePriceInfoRules `json:"Rules" xml:"Rules" require:"true" type:"Struct"`
	Price *DescribeRenewalPriceResponsePriceInfoPrice `json:"Price" xml:"Price" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponsePriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetRules(v *DescribeRenewalPriceResponsePriceInfoRules) *DescribeRenewalPriceResponsePriceInfo {
	s.Rules = v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetPrice(v *DescribeRenewalPriceResponsePriceInfoPrice) *DescribeRenewalPriceResponsePriceInfo {
	s.Price = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoRules struct {
	Rule []*DescribeRenewalPriceResponsePriceInfoRulesRule `json:"Rule" xml:"Rule" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponsePriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoRules) SetRule(v []*DescribeRenewalPriceResponsePriceInfoRulesRule) *DescribeRenewalPriceResponsePriceInfoRules {
	s.Rule = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoRulesRule struct {
	RuleId      *int64  `json:"RuleId" xml:"RuleId" require:"true"`
	Description *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeRenewalPriceResponsePriceInfoRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoRulesRule) SetRuleId(v int64) *DescribeRenewalPriceResponsePriceInfoRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoRulesRule) SetDescription(v string) *DescribeRenewalPriceResponsePriceInfoRulesRule {
	s.Description = &v
	return s
}

type DescribeRenewalPriceResponsePriceInfoPrice struct {
	OriginalPrice *float32                                               `json:"OriginalPrice" xml:"OriginalPrice" require:"true"`
	DiscountPrice *float32                                               `json:"DiscountPrice" xml:"DiscountPrice" require:"true"`
	TradePrice    *float32                                               `json:"TradePrice" xml:"TradePrice" require:"true"`
	Currency      *string                                                `json:"Currency" xml:"Currency" require:"true"`
	DetailInfos   *DescribeRenewalPriceResponsePriceInfoPriceDetailInfos `json:"DetailInfos" xml:"DetailInfos" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponsePriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoPrice) SetOriginalPrice(v float32) *DescribeRenewalPriceResponsePriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPrice) SetDiscountPrice(v float32) *DescribeRenewalPriceResponsePriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPrice) SetTradePrice(v float32) *DescribeRenewalPriceResponsePriceInfoPrice {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPrice) SetCurrency(v string) *DescribeRenewalPriceResponsePriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPrice) SetDetailInfos(v *DescribeRenewalPriceResponsePriceInfoPriceDetailInfos) *DescribeRenewalPriceResponsePriceInfoPrice {
	s.DetailInfos = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoPriceDetailInfos struct {
	ResourcePriceModel []*DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel `json:"ResourcePriceModel" xml:"ResourcePriceModel" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfos) SetResourcePriceModel(v []*DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfos {
	s.ResourcePriceModel = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel struct {
	Resource      *string                                                                          `json:"Resource" xml:"Resource" require:"true"`
	OriginalPrice *float32                                                                         `json:"OriginalPrice" xml:"OriginalPrice" require:"true"`
	DiscountPrice *float32                                                                         `json:"DiscountPrice" xml:"DiscountPrice" require:"true"`
	TradePrice    *float32                                                                         `json:"TradePrice" xml:"TradePrice" require:"true"`
	SubRules      *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules `json:"SubRules" xml:"SubRules" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetResource(v string) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.Resource = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetOriginalPrice(v float32) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetDiscountPrice(v float32) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetTradePrice(v float32) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetSubRules(v *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.SubRules = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules struct {
	Rule []*DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule `json:"Rule" xml:"Rule" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) SetRule(v []*DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules {
	s.Rule = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule struct {
	RuleId      *int64  `json:"RuleId" xml:"RuleId" require:"true"`
	Description *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) SetRuleId(v int64) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) SetDescription(v string) *DescribeRenewalPriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule {
	s.Description = &v
	return s
}

type DescribePriceRequest struct {
	OwnerId                 *int64                          `json:"OwnerId" xml:"OwnerId"`
	OwnerAccount            *string                         `json:"OwnerAccount" xml:"OwnerAccount"`
	ResourceOwnerAccount    *string                         `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64                          `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                *string                         `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceType            *string                         `json:"ResourceType" xml:"ResourceType"`
	ImageId                 *string                         `json:"ImageId" xml:"ImageId"`
	InstanceType            *string                         `json:"InstanceType" xml:"InstanceType"`
	IoOptimized             *string                         `json:"IoOptimized" xml:"IoOptimized"`
	InstanceNetworkType     *string                         `json:"InstanceNetworkType" xml:"InstanceNetworkType"`
	InternetChargeType      *string                         `json:"InternetChargeType" xml:"InternetChargeType"`
	InternetMaxBandwidthOut *int                            `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	SystemDisk              *DescribePriceRequestSystemDisk `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisk                []*DescribePriceRequestDataDisk `json:"DataDisk" xml:"DataDisk" require:"true" type:"Repeated"`
	Period                  *int                            `json:"Period" xml:"Period"`
	PriceUnit               *string                         `json:"PriceUnit" xml:"PriceUnit"`
	Amount                  *int                            `json:"Amount" xml:"Amount"`
	OfferingType            *string                         `json:"OfferingType" xml:"OfferingType"`
	InstanceAmount          *int                            `json:"InstanceAmount" xml:"InstanceAmount"`
	Scope                   *string                         `json:"Scope" xml:"Scope"`
	Platform                *string                         `json:"Platform" xml:"Platform"`
	Capacity                *int                            `json:"Capacity" xml:"Capacity"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetOwnerId(v int64) *DescribePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetOwnerAccount(v string) *DescribePriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerAccount(v string) *DescribePriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerId(v int64) *DescribePriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetResourceType(v string) *DescribePriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribePriceRequest) SetImageId(v string) *DescribePriceRequest {
	s.ImageId = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceType(v string) *DescribePriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceRequest) SetIoOptimized(v string) *DescribePriceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceNetworkType(v string) *DescribePriceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetChargeType(v string) *DescribePriceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetMaxBandwidthOut(v int) *DescribePriceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribePriceRequest) SetSystemDisk(v *DescribePriceRequestSystemDisk) *DescribePriceRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceRequest) SetDataDisk(v []*DescribePriceRequestDataDisk) *DescribePriceRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceRequest) SetPeriod(v int) *DescribePriceRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceRequest) SetPriceUnit(v string) *DescribePriceRequest {
	s.PriceUnit = &v
	return s
}

func (s *DescribePriceRequest) SetAmount(v int) *DescribePriceRequest {
	s.Amount = &v
	return s
}

func (s *DescribePriceRequest) SetOfferingType(v string) *DescribePriceRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceAmount(v int) *DescribePriceRequest {
	s.InstanceAmount = &v
	return s
}

func (s *DescribePriceRequest) SetScope(v string) *DescribePriceRequest {
	s.Scope = &v
	return s
}

func (s *DescribePriceRequest) SetPlatform(v string) *DescribePriceRequest {
	s.Platform = &v
	return s
}

func (s *DescribePriceRequest) SetCapacity(v int) *DescribePriceRequest {
	s.Capacity = &v
	return s
}

type DescribePriceRequestSystemDisk struct {
	Category         *string `json:"Category" xml:"Category"`
	Size             *int    `json:"Size" xml:"Size"`
	PerformanceLevel *string `json:"PerformanceLevel" xml:"PerformanceLevel"`
}

func (s DescribePriceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestSystemDisk) SetCategory(v string) *DescribePriceRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestSystemDisk) SetSize(v int) *DescribePriceRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribePriceRequestSystemDisk) SetPerformanceLevel(v string) *DescribePriceRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

type DescribePriceRequestDataDisk struct {
	Size             *int    `json:"Size" xml:"Size"`
	Category         *string `json:"Category" xml:"Category"`
	PerformanceLevel *string `json:"PerformanceLevel" xml:"PerformanceLevel"`
}

func (s DescribePriceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisk) SetSize(v int) *DescribePriceRequestDataDisk {
	s.Size = &v
	return s
}

func (s *DescribePriceRequestDataDisk) SetCategory(v string) *DescribePriceRequestDataDisk {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestDataDisk) SetPerformanceLevel(v string) *DescribePriceRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

type DescribePriceResponse struct {
	RequestId *string                         `json:"RequestId" xml:"RequestId" require:"true"`
	PriceInfo *DescribePriceResponsePriceInfo `json:"PriceInfo" xml:"PriceInfo" require:"true" type:"Struct"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetRequestId(v string) *DescribePriceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribePriceResponse) SetPriceInfo(v *DescribePriceResponsePriceInfo) *DescribePriceResponse {
	s.PriceInfo = v
	return s
}

type DescribePriceResponsePriceInfo struct {
	Rules *DescribePriceResponsePriceInfoRules `json:"Rules" xml:"Rules" require:"true" type:"Struct"`
	Price *DescribePriceResponsePriceInfoPrice `json:"Price" xml:"Price" require:"true" type:"Struct"`
}

func (s DescribePriceResponsePriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfo) SetRules(v *DescribePriceResponsePriceInfoRules) *DescribePriceResponsePriceInfo {
	s.Rules = v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetPrice(v *DescribePriceResponsePriceInfoPrice) *DescribePriceResponsePriceInfo {
	s.Price = v
	return s
}

type DescribePriceResponsePriceInfoRules struct {
	Rule []*DescribePriceResponsePriceInfoRulesRule `json:"Rule" xml:"Rule" require:"true" type:"Repeated"`
}

func (s DescribePriceResponsePriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoRules) SetRule(v []*DescribePriceResponsePriceInfoRulesRule) *DescribePriceResponsePriceInfoRules {
	s.Rule = v
	return s
}

type DescribePriceResponsePriceInfoRulesRule struct {
	RuleId      *int64  `json:"RuleId" xml:"RuleId" require:"true"`
	Description *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribePriceResponsePriceInfoRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoRulesRule) SetRuleId(v int64) *DescribePriceResponsePriceInfoRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribePriceResponsePriceInfoRulesRule) SetDescription(v string) *DescribePriceResponsePriceInfoRulesRule {
	s.Description = &v
	return s
}

type DescribePriceResponsePriceInfoPrice struct {
	OriginalPrice             *float32                                        `json:"OriginalPrice" xml:"OriginalPrice" require:"true"`
	DiscountPrice             *float32                                        `json:"DiscountPrice" xml:"DiscountPrice" require:"true"`
	TradePrice                *float32                                        `json:"TradePrice" xml:"TradePrice" require:"true"`
	ReservedInstanceHourPrice *float32                                        `json:"ReservedInstanceHourPrice" xml:"ReservedInstanceHourPrice" require:"true"`
	Currency                  *string                                         `json:"Currency" xml:"Currency" require:"true"`
	DetailInfos               *DescribePriceResponsePriceInfoPriceDetailInfos `json:"DetailInfos" xml:"DetailInfos" require:"true" type:"Struct"`
}

func (s DescribePriceResponsePriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoPrice) SetOriginalPrice(v float32) *DescribePriceResponsePriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPrice) SetDiscountPrice(v float32) *DescribePriceResponsePriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPrice) SetTradePrice(v float32) *DescribePriceResponsePriceInfoPrice {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPrice) SetReservedInstanceHourPrice(v float32) *DescribePriceResponsePriceInfoPrice {
	s.ReservedInstanceHourPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPrice) SetCurrency(v string) *DescribePriceResponsePriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPrice) SetDetailInfos(v *DescribePriceResponsePriceInfoPriceDetailInfos) *DescribePriceResponsePriceInfoPrice {
	s.DetailInfos = v
	return s
}

type DescribePriceResponsePriceInfoPriceDetailInfos struct {
	ResourcePriceModel []*DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel `json:"ResourcePriceModel" xml:"ResourcePriceModel" require:"true" type:"Repeated"`
}

func (s DescribePriceResponsePriceInfoPriceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoPriceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfos) SetResourcePriceModel(v []*DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) *DescribePriceResponsePriceInfoPriceDetailInfos {
	s.ResourcePriceModel = v
	return s
}

type DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel struct {
	Resource      *string                                                                   `json:"Resource" xml:"Resource" require:"true"`
	OriginalPrice *float32                                                                  `json:"OriginalPrice" xml:"OriginalPrice" require:"true"`
	DiscountPrice *float32                                                                  `json:"DiscountPrice" xml:"DiscountPrice" require:"true"`
	TradePrice    *float32                                                                  `json:"TradePrice" xml:"TradePrice" require:"true"`
	SubRules      *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules `json:"SubRules" xml:"SubRules" require:"true" type:"Struct"`
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetResource(v string) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.Resource = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetOriginalPrice(v float32) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetDiscountPrice(v float32) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetTradePrice(v float32) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel) SetSubRules(v *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModel {
	s.SubRules = v
	return s
}

type DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules struct {
	Rule []*DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule `json:"Rule" xml:"Rule" require:"true" type:"Repeated"`
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules) SetRule(v []*DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRules {
	s.Rule = v
	return s
}

type DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule struct {
	RuleId      *int64  `json:"RuleId" xml:"RuleId" require:"true"`
	Description *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) SetRuleId(v int64) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule) SetDescription(v string) *DescribePriceResponsePriceInfoPriceDetailInfosResourcePriceModelSubRulesRule {
	s.Description = &v
	return s
}

type ModifyDeploymentSetAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DeploymentSetId      *string `json:"DeploymentSetId" xml:"DeploymentSetId" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	DeploymentSetName    *string `json:"DeploymentSetName" xml:"DeploymentSetName"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyDeploymentSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeploymentSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeploymentSetAttributeRequest) SetOwnerId(v int64) *ModifyDeploymentSetAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDeploymentSetAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetResourceOwnerId(v int64) *ModifyDeploymentSetAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDeploymentSetId(v string) *ModifyDeploymentSetAttributeRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDescription(v string) *ModifyDeploymentSetAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetDeploymentSetName(v string) *ModifyDeploymentSetAttributeRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetRegionId(v string) *ModifyDeploymentSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDeploymentSetAttributeRequest) SetOwnerAccount(v string) *ModifyDeploymentSetAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDeploymentSetAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDeploymentSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeploymentSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeploymentSetAttributeResponse) SetRequestId(v string) *ModifyDeploymentSetAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeDeploymentSetsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DeploymentSetIds     *string `json:"DeploymentSetIds" xml:"DeploymentSetIds"`
	NetworkType          *string `json:"NetworkType" xml:"NetworkType"`
	Strategy             *string `json:"Strategy" xml:"Strategy"`
	DeploymentSetName    *string `json:"DeploymentSetName" xml:"DeploymentSetName"`
	Granularity          *string `json:"Granularity" xml:"Granularity"`
	Domain               *string `json:"Domain" xml:"Domain"`
}

func (s DescribeDeploymentSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsRequest) SetOwnerId(v int64) *DescribeDeploymentSetsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetResourceOwnerAccount(v string) *DescribeDeploymentSetsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetResourceOwnerId(v int64) *DescribeDeploymentSetsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetRegionId(v string) *DescribeDeploymentSetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetPageNumber(v int) *DescribeDeploymentSetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetPageSize(v int) *DescribeDeploymentSetsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetOwnerAccount(v string) *DescribeDeploymentSetsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDeploymentSetIds(v string) *DescribeDeploymentSetsRequest {
	s.DeploymentSetIds = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetNetworkType(v string) *DescribeDeploymentSetsRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetStrategy(v string) *DescribeDeploymentSetsRequest {
	s.Strategy = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDeploymentSetName(v string) *DescribeDeploymentSetsRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetGranularity(v string) *DescribeDeploymentSetsRequest {
	s.Granularity = &v
	return s
}

func (s *DescribeDeploymentSetsRequest) SetDomain(v string) *DescribeDeploymentSetsRequest {
	s.Domain = &v
	return s
}

type DescribeDeploymentSetsResponse struct {
	RequestId      *string                                       `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId       *string                                       `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount     *int                                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber     *int                                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize       *int                                          `json:"PageSize" xml:"PageSize" require:"true"`
	DeploymentSets *DescribeDeploymentSetsResponseDeploymentSets `json:"DeploymentSets" xml:"DeploymentSets" require:"true" type:"Struct"`
}

func (s DescribeDeploymentSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponse) SetRequestId(v string) *DescribeDeploymentSetsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetRegionId(v string) *DescribeDeploymentSetsResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetTotalCount(v int) *DescribeDeploymentSetsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetPageNumber(v int) *DescribeDeploymentSetsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetPageSize(v int) *DescribeDeploymentSetsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeDeploymentSetsResponse) SetDeploymentSets(v *DescribeDeploymentSetsResponseDeploymentSets) *DescribeDeploymentSetsResponse {
	s.DeploymentSets = v
	return s
}

type DescribeDeploymentSetsResponseDeploymentSets struct {
	DeploymentSet []*DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet `json:"DeploymentSet" xml:"DeploymentSet" require:"true" type:"Repeated"`
}

func (s DescribeDeploymentSetsResponseDeploymentSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponseDeploymentSets) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponseDeploymentSets) SetDeploymentSet(v []*DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) *DescribeDeploymentSetsResponseDeploymentSets {
	s.DeploymentSet = v
	return s
}

type DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet struct {
	DeploymentSetId          *string                                                               `json:"DeploymentSetId" xml:"DeploymentSetId" require:"true"`
	DeploymentSetDescription *string                                                               `json:"DeploymentSetDescription" xml:"DeploymentSetDescription" require:"true"`
	DeploymentSetName        *string                                                               `json:"DeploymentSetName" xml:"DeploymentSetName" require:"true"`
	Strategy                 *string                                                               `json:"Strategy" xml:"Strategy" require:"true"`
	DeploymentStrategy       *string                                                               `json:"DeploymentStrategy" xml:"DeploymentStrategy" require:"true"`
	Domain                   *string                                                               `json:"Domain" xml:"Domain" require:"true"`
	Granularity              *string                                                               `json:"Granularity" xml:"Granularity" require:"true"`
	InstanceAmount           *int                                                                  `json:"InstanceAmount" xml:"InstanceAmount" require:"true"`
	CreationTime             *string                                                               `json:"CreationTime" xml:"CreationTime" require:"true"`
	InstanceIds              *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds `json:"InstanceIds" xml:"InstanceIds" require:"true" type:"Struct"`
}

func (s DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetDeploymentSetId(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.DeploymentSetId = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetDeploymentSetDescription(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.DeploymentSetDescription = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetDeploymentSetName(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.DeploymentSetName = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetStrategy(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.Strategy = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetDeploymentStrategy(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.DeploymentStrategy = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetDomain(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.Domain = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetGranularity(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.Granularity = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetInstanceAmount(v int) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetCreationTime(v string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet) SetInstanceIds(v *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSet {
	s.InstanceIds = v
	return s
}

type DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds struct {
	InstanceId []*string `json:"InstanceId" xml:"InstanceId" require:"true" type:"Repeated"`
}

func (s DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds) SetInstanceId(v []*string) *DescribeDeploymentSetsResponseDeploymentSetsDeploymentSetInstanceIds {
	s.InstanceId = v
	return s
}

type DeleteDeploymentSetRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	DeploymentSetId      *string `json:"DeploymentSetId" xml:"DeploymentSetId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteDeploymentSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentSetRequest) SetOwnerId(v int64) *DeleteDeploymentSetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetResourceOwnerAccount(v string) *DeleteDeploymentSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetResourceOwnerId(v int64) *DeleteDeploymentSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetRegionId(v string) *DeleteDeploymentSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetDeploymentSetId(v string) *DeleteDeploymentSetRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *DeleteDeploymentSetRequest) SetOwnerAccount(v string) *DeleteDeploymentSetRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteDeploymentSetResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteDeploymentSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeploymentSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeploymentSetResponse) SetRequestId(v string) *DeleteDeploymentSetResponse {
	s.RequestId = &v
	return s
}

type CreateDeploymentSetRequest struct {
	OwnerId                          *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                         *string `json:"RegionId" xml:"RegionId" require:"true"`
	OnUnableToRedeployFailedInstance *string `json:"OnUnableToRedeployFailedInstance" xml:"OnUnableToRedeployFailedInstance"`
	Description                      *string `json:"Description" xml:"Description"`
	ClientToken                      *string `json:"ClientToken" xml:"ClientToken"`
	DeploymentSetName                *string `json:"DeploymentSetName" xml:"DeploymentSetName"`
	Domain                           *string `json:"Domain" xml:"Domain"`
	Granularity                      *string `json:"Granularity" xml:"Granularity"`
	Strategy                         *string `json:"Strategy" xml:"Strategy"`
	OwnerAccount                     *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s CreateDeploymentSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentSetRequest) GoString() string {
	return s.String()
}

func (s *CreateDeploymentSetRequest) SetOwnerId(v int64) *CreateDeploymentSetRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetResourceOwnerAccount(v string) *CreateDeploymentSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetResourceOwnerId(v int64) *CreateDeploymentSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetRegionId(v string) *CreateDeploymentSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetOnUnableToRedeployFailedInstance(v string) *CreateDeploymentSetRequest {
	s.OnUnableToRedeployFailedInstance = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDescription(v string) *CreateDeploymentSetRequest {
	s.Description = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetClientToken(v string) *CreateDeploymentSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDeploymentSetName(v string) *CreateDeploymentSetRequest {
	s.DeploymentSetName = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetDomain(v string) *CreateDeploymentSetRequest {
	s.Domain = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetGranularity(v string) *CreateDeploymentSetRequest {
	s.Granularity = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetStrategy(v string) *CreateDeploymentSetRequest {
	s.Strategy = &v
	return s
}

func (s *CreateDeploymentSetRequest) SetOwnerAccount(v string) *CreateDeploymentSetRequest {
	s.OwnerAccount = &v
	return s
}

type CreateDeploymentSetResponse struct {
	RequestId       *string `json:"RequestId" xml:"RequestId" require:"true"`
	DeploymentSetId *string `json:"DeploymentSetId" xml:"DeploymentSetId" require:"true"`
}

func (s CreateDeploymentSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeploymentSetResponse) GoString() string {
	return s.String()
}

func (s *CreateDeploymentSetResponse) SetRequestId(v string) *CreateDeploymentSetResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDeploymentSetResponse) SetDeploymentSetId(v string) *CreateDeploymentSetResponse {
	s.DeploymentSetId = &v
	return s
}

type ImportKeyPairRequest struct {
	OwnerId              *int64                     `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                    `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                     `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                    `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairName          *string                    `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	PublicKeyBody        *string                    `json:"PublicKeyBody" xml:"PublicKeyBody" require:"true"`
	Tag                  []*ImportKeyPairRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                    `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s ImportKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequest) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequest) SetOwnerId(v int64) *ImportKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportKeyPairRequest) SetResourceOwnerAccount(v string) *ImportKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportKeyPairRequest) SetResourceOwnerId(v int64) *ImportKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportKeyPairRequest) SetRegionId(v string) *ImportKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *ImportKeyPairRequest) SetKeyPairName(v string) *ImportKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairRequest) SetPublicKeyBody(v string) *ImportKeyPairRequest {
	s.PublicKeyBody = &v
	return s
}

func (s *ImportKeyPairRequest) SetTag(v []*ImportKeyPairRequestTag) *ImportKeyPairRequest {
	s.Tag = v
	return s
}

func (s *ImportKeyPairRequest) SetResourceGroupId(v string) *ImportKeyPairRequest {
	s.ResourceGroupId = &v
	return s
}

type ImportKeyPairRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s ImportKeyPairRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequestTag) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequestTag) SetKey(v string) *ImportKeyPairRequestTag {
	s.Key = &v
	return s
}

func (s *ImportKeyPairRequestTag) SetValue(v string) *ImportKeyPairRequestTag {
	s.Value = &v
	return s
}

type ImportKeyPairResponse struct {
	RequestId          *string `json:"RequestId" xml:"RequestId" require:"true"`
	KeyPairName        *string `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint" xml:"KeyPairFingerPrint" require:"true"`
}

func (s ImportKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponse) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponse) SetRequestId(v string) *ImportKeyPairResponse {
	s.RequestId = &v
	return s
}

func (s *ImportKeyPairResponse) SetKeyPairName(v string) *ImportKeyPairResponse {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairResponse) SetKeyPairFingerPrint(v string) *ImportKeyPairResponse {
	s.KeyPairFingerPrint = &v
	return s
}

type DetachKeyPairRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairName          *string `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds" require:"true"`
}

func (s DetachKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *DetachKeyPairRequest) SetOwnerId(v int64) *DetachKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachKeyPairRequest) SetResourceOwnerAccount(v string) *DetachKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachKeyPairRequest) SetResourceOwnerId(v int64) *DetachKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachKeyPairRequest) SetRegionId(v string) *DetachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *DetachKeyPairRequest) SetKeyPairName(v string) *DetachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *DetachKeyPairRequest) SetInstanceIds(v string) *DetachKeyPairRequest {
	s.InstanceIds = &v
	return s
}

type DetachKeyPairResponse struct {
	RequestId   *string                       `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *string                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	FailCount   *string                       `json:"FailCount" xml:"FailCount" require:"true"`
	KeyPairName *string                       `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	Results     *DetachKeyPairResponseResults `json:"Results" xml:"Results" require:"true" type:"Struct"`
}

func (s DetachKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponse) SetRequestId(v string) *DetachKeyPairResponse {
	s.RequestId = &v
	return s
}

func (s *DetachKeyPairResponse) SetTotalCount(v string) *DetachKeyPairResponse {
	s.TotalCount = &v
	return s
}

func (s *DetachKeyPairResponse) SetFailCount(v string) *DetachKeyPairResponse {
	s.FailCount = &v
	return s
}

func (s *DetachKeyPairResponse) SetKeyPairName(v string) *DetachKeyPairResponse {
	s.KeyPairName = &v
	return s
}

func (s *DetachKeyPairResponse) SetResults(v *DetachKeyPairResponseResults) *DetachKeyPairResponse {
	s.Results = v
	return s
}

type DetachKeyPairResponseResults struct {
	Result []*DetachKeyPairResponseResultsResult `json:"Result" xml:"Result" require:"true" type:"Repeated"`
}

func (s DetachKeyPairResponseResults) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponseResults) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseResults) SetResult(v []*DetachKeyPairResponseResultsResult) *DetachKeyPairResponseResults {
	s.Result = v
	return s
}

type DetachKeyPairResponseResultsResult struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Success    *string `json:"Success" xml:"Success" require:"true"`
	Code       *string `json:"Code" xml:"Code" require:"true"`
	Message    *string `json:"Message" xml:"Message" require:"true"`
}

func (s DetachKeyPairResponseResultsResult) String() string {
	return tea.Prettify(s)
}

func (s DetachKeyPairResponseResultsResult) GoString() string {
	return s.String()
}

func (s *DetachKeyPairResponseResultsResult) SetInstanceId(v string) *DetachKeyPairResponseResultsResult {
	s.InstanceId = &v
	return s
}

func (s *DetachKeyPairResponseResultsResult) SetSuccess(v string) *DetachKeyPairResponseResultsResult {
	s.Success = &v
	return s
}

func (s *DetachKeyPairResponseResultsResult) SetCode(v string) *DetachKeyPairResponseResultsResult {
	s.Code = &v
	return s
}

func (s *DetachKeyPairResponseResultsResult) SetMessage(v string) *DetachKeyPairResponseResultsResult {
	s.Message = &v
	return s
}

type DescribeKeyPairsRequest struct {
	OwnerId              *int64                        `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                       `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                        `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                       `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairName          *string                       `json:"KeyPairName" xml:"KeyPairName"`
	KeyPairFingerPrint   *string                       `json:"KeyPairFingerPrint" xml:"KeyPairFingerPrint"`
	PageNumber           *int                          `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                          `json:"PageSize" xml:"PageSize"`
	Tag                  []*DescribeKeyPairsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                       `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s DescribeKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequest) SetOwnerId(v int64) *DescribeKeyPairsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceOwnerAccount(v string) *DescribeKeyPairsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceOwnerId(v int64) *DescribeKeyPairsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetRegionId(v string) *DescribeKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetKeyPairName(v string) *DescribeKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetKeyPairFingerPrint(v string) *DescribeKeyPairsRequest {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageNumber(v int) *DescribeKeyPairsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageSize(v int) *DescribeKeyPairsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetTag(v []*DescribeKeyPairsRequestTag) *DescribeKeyPairsRequest {
	s.Tag = v
	return s
}

func (s *DescribeKeyPairsRequest) SetResourceGroupId(v string) *DescribeKeyPairsRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeKeyPairsRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeKeyPairsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequestTag) SetKey(v string) *DescribeKeyPairsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeKeyPairsRequestTag) SetValue(v string) *DescribeKeyPairsRequestTag {
	s.Value = &v
	return s
}

type DescribeKeyPairsResponse struct {
	RequestId  *string                           `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                              `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                              `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                              `json:"PageSize" xml:"PageSize" require:"true"`
	KeyPairs   *DescribeKeyPairsResponseKeyPairs `json:"KeyPairs" xml:"KeyPairs" require:"true" type:"Struct"`
}

func (s DescribeKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponse) SetRequestId(v string) *DescribeKeyPairsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetTotalCount(v int) *DescribeKeyPairsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetPageNumber(v int) *DescribeKeyPairsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetPageSize(v int) *DescribeKeyPairsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetKeyPairs(v *DescribeKeyPairsResponseKeyPairs) *DescribeKeyPairsResponse {
	s.KeyPairs = v
	return s
}

type DescribeKeyPairsResponseKeyPairs struct {
	KeyPair []*DescribeKeyPairsResponseKeyPairsKeyPair `json:"KeyPair" xml:"KeyPair" require:"true" type:"Repeated"`
}

func (s DescribeKeyPairsResponseKeyPairs) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseKeyPairs) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseKeyPairs) SetKeyPair(v []*DescribeKeyPairsResponseKeyPairsKeyPair) *DescribeKeyPairsResponseKeyPairs {
	s.KeyPair = v
	return s
}

type DescribeKeyPairsResponseKeyPairsKeyPair struct {
	KeyPairName        *string                                      `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	KeyPairFingerPrint *string                                      `json:"KeyPairFingerPrint" xml:"KeyPairFingerPrint" require:"true"`
	CreationTime       *string                                      `json:"CreationTime" xml:"CreationTime" require:"true"`
	ResourceGroupId    *string                                      `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	Tags               *DescribeKeyPairsResponseKeyPairsKeyPairTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeKeyPairsResponseKeyPairsKeyPair) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseKeyPairsKeyPair) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPair) SetKeyPairName(v string) *DescribeKeyPairsResponseKeyPairsKeyPair {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPair) SetKeyPairFingerPrint(v string) *DescribeKeyPairsResponseKeyPairsKeyPair {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPair) SetCreationTime(v string) *DescribeKeyPairsResponseKeyPairsKeyPair {
	s.CreationTime = &v
	return s
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPair) SetResourceGroupId(v string) *DescribeKeyPairsResponseKeyPairsKeyPair {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPair) SetTags(v *DescribeKeyPairsResponseKeyPairsKeyPairTags) *DescribeKeyPairsResponseKeyPairsKeyPair {
	s.Tags = v
	return s
}

type DescribeKeyPairsResponseKeyPairsKeyPairTags struct {
	Tag []*DescribeKeyPairsResponseKeyPairsKeyPairTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeKeyPairsResponseKeyPairsKeyPairTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseKeyPairsKeyPairTags) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPairTags) SetTag(v []*DescribeKeyPairsResponseKeyPairsKeyPairTagsTag) *DescribeKeyPairsResponseKeyPairsKeyPairTags {
	s.Tag = v
	return s
}

type DescribeKeyPairsResponseKeyPairsKeyPairTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeKeyPairsResponseKeyPairsKeyPairTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseKeyPairsKeyPairTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPairTagsTag) SetTagKey(v string) *DescribeKeyPairsResponseKeyPairsKeyPairTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeKeyPairsResponseKeyPairsKeyPairTagsTag) SetTagValue(v string) *DescribeKeyPairsResponseKeyPairsKeyPairTagsTag {
	s.TagValue = &v
	return s
}

type DeleteKeyPairsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairNames         *string `json:"KeyPairNames" xml:"KeyPairNames" require:"true"`
}

func (s DeleteKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsRequest) SetOwnerId(v int64) *DeleteKeyPairsRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetResourceOwnerAccount(v string) *DeleteKeyPairsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetResourceOwnerId(v int64) *DeleteKeyPairsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetRegionId(v string) *DeleteKeyPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetKeyPairNames(v string) *DeleteKeyPairsRequest {
	s.KeyPairNames = &v
	return s
}

type DeleteKeyPairsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponse) SetRequestId(v string) *DeleteKeyPairsResponse {
	s.RequestId = &v
	return s
}

type CreateKeyPairRequest struct {
	OwnerId              *int64                     `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                    `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                     `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                    `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairName          *string                    `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	Tag                  []*CreateKeyPairRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                    `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s CreateKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequest) SetOwnerId(v int64) *CreateKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateKeyPairRequest) SetResourceOwnerAccount(v string) *CreateKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateKeyPairRequest) SetResourceOwnerId(v int64) *CreateKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateKeyPairRequest) SetRegionId(v string) *CreateKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *CreateKeyPairRequest) SetKeyPairName(v string) *CreateKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairRequest) SetTag(v []*CreateKeyPairRequestTag) *CreateKeyPairRequest {
	s.Tag = v
	return s
}

func (s *CreateKeyPairRequest) SetResourceGroupId(v string) *CreateKeyPairRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateKeyPairRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateKeyPairRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequestTag) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequestTag) SetKey(v string) *CreateKeyPairRequestTag {
	s.Key = &v
	return s
}

func (s *CreateKeyPairRequestTag) SetValue(v string) *CreateKeyPairRequestTag {
	s.Value = &v
	return s
}

type CreateKeyPairResponse struct {
	RequestId          *string `json:"RequestId" xml:"RequestId" require:"true"`
	KeyPairId          *string `json:"KeyPairId" xml:"KeyPairId" require:"true"`
	KeyPairName        *string `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint" xml:"KeyPairFingerPrint" require:"true"`
	PrivateKeyBody     *string `json:"PrivateKeyBody" xml:"PrivateKeyBody" require:"true"`
}

func (s CreateKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponse) SetRequestId(v string) *CreateKeyPairResponse {
	s.RequestId = &v
	return s
}

func (s *CreateKeyPairResponse) SetKeyPairId(v string) *CreateKeyPairResponse {
	s.KeyPairId = &v
	return s
}

func (s *CreateKeyPairResponse) SetKeyPairName(v string) *CreateKeyPairResponse {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairResponse) SetKeyPairFingerPrint(v string) *CreateKeyPairResponse {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *CreateKeyPairResponse) SetPrivateKeyBody(v string) *CreateKeyPairResponse {
	s.PrivateKeyBody = &v
	return s
}

type AttachKeyPairRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	KeyPairName          *string `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	InstanceIds          *string `json:"InstanceIds" xml:"InstanceIds" require:"true"`
}

func (s AttachKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairRequest) GoString() string {
	return s.String()
}

func (s *AttachKeyPairRequest) SetOwnerId(v int64) *AttachKeyPairRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachKeyPairRequest) SetResourceOwnerAccount(v string) *AttachKeyPairRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachKeyPairRequest) SetResourceOwnerId(v int64) *AttachKeyPairRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachKeyPairRequest) SetRegionId(v string) *AttachKeyPairRequest {
	s.RegionId = &v
	return s
}

func (s *AttachKeyPairRequest) SetKeyPairName(v string) *AttachKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *AttachKeyPairRequest) SetInstanceIds(v string) *AttachKeyPairRequest {
	s.InstanceIds = &v
	return s
}

type AttachKeyPairResponse struct {
	RequestId   *string                       `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *string                       `json:"TotalCount" xml:"TotalCount" require:"true"`
	FailCount   *string                       `json:"FailCount" xml:"FailCount" require:"true"`
	KeyPairName *string                       `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	Results     *AttachKeyPairResponseResults `json:"Results" xml:"Results" require:"true" type:"Struct"`
}

func (s AttachKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponse) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponse) SetRequestId(v string) *AttachKeyPairResponse {
	s.RequestId = &v
	return s
}

func (s *AttachKeyPairResponse) SetTotalCount(v string) *AttachKeyPairResponse {
	s.TotalCount = &v
	return s
}

func (s *AttachKeyPairResponse) SetFailCount(v string) *AttachKeyPairResponse {
	s.FailCount = &v
	return s
}

func (s *AttachKeyPairResponse) SetKeyPairName(v string) *AttachKeyPairResponse {
	s.KeyPairName = &v
	return s
}

func (s *AttachKeyPairResponse) SetResults(v *AttachKeyPairResponseResults) *AttachKeyPairResponse {
	s.Results = v
	return s
}

type AttachKeyPairResponseResults struct {
	Result []*AttachKeyPairResponseResultsResult `json:"Result" xml:"Result" require:"true" type:"Repeated"`
}

func (s AttachKeyPairResponseResults) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponseResults) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseResults) SetResult(v []*AttachKeyPairResponseResultsResult) *AttachKeyPairResponseResults {
	s.Result = v
	return s
}

type AttachKeyPairResponseResultsResult struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Success    *string `json:"Success" xml:"Success" require:"true"`
	Code       *string `json:"Code" xml:"Code" require:"true"`
	Message    *string `json:"Message" xml:"Message" require:"true"`
}

func (s AttachKeyPairResponseResultsResult) String() string {
	return tea.Prettify(s)
}

func (s AttachKeyPairResponseResultsResult) GoString() string {
	return s.String()
}

func (s *AttachKeyPairResponseResultsResult) SetInstanceId(v string) *AttachKeyPairResponseResultsResult {
	s.InstanceId = &v
	return s
}

func (s *AttachKeyPairResponseResultsResult) SetSuccess(v string) *AttachKeyPairResponseResultsResult {
	s.Success = &v
	return s
}

func (s *AttachKeyPairResponseResultsResult) SetCode(v string) *AttachKeyPairResponseResultsResult {
	s.Code = &v
	return s
}

func (s *AttachKeyPairResponseResultsResult) SetMessage(v string) *AttachKeyPairResponseResultsResult {
	s.Message = &v
	return s
}

type ModifyInstanceAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Duration             *int    `json:"Duration" xml:"Duration"`
	AutoRenew            *bool   `json:"AutoRenew" xml:"AutoRenew"`
	RenewalStatus        *string `json:"RenewalStatus" xml:"RenewalStatus"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
}

func (s ModifyInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetInstanceId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRegionId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetDuration(v int) *ModifyInstanceAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetAutoRenew(v bool) *ModifyInstanceAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetPeriodUnit(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetRequestId(v string) *ModifyInstanceAutoRenewAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RenewalStatus        *string `json:"RenewalStatus" xml:"RenewalStatus"`
	PageSize             *string `json:"PageSize" xml:"PageSize"`
	PageNumber           *string `json:"PageNumber" xml:"PageNumber"`
}

func (s DescribeInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerAccount(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRegionId(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageSize(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetPageNumber(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponse struct {
	RequestId               *string                                                            `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber              *int                                                               `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize                *int                                                               `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount              *int                                                               `json:"TotalCount" xml:"TotalCount" require:"true"`
	InstanceRenewAttributes *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes `json:"InstanceRenewAttributes" xml:"InstanceRenewAttributes" require:"true" type:"Struct"`
}

func (s DescribeInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetRequestId(v string) *DescribeInstanceAutoRenewAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetPageNumber(v int) *DescribeInstanceAutoRenewAttributeResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetPageSize(v int) *DescribeInstanceAutoRenewAttributeResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetTotalCount(v int) *DescribeInstanceAutoRenewAttributeResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetInstanceRenewAttributes(v *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) *DescribeInstanceAutoRenewAttributeResponse {
	s.InstanceRenewAttributes = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes struct {
	InstanceRenewAttribute []*DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute `json:"InstanceRenewAttribute" xml:"InstanceRenewAttribute" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes) SetInstanceRenewAttribute(v []*DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributes {
	s.InstanceRenewAttribute = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute struct {
	InstanceId       *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	AutoRenewEnabled *bool   `json:"AutoRenewEnabled" xml:"AutoRenewEnabled" require:"true"`
	Duration         *int    `json:"Duration" xml:"Duration" require:"true"`
	PeriodUnit       *string `json:"PeriodUnit" xml:"PeriodUnit" require:"true"`
	RenewalStatus    *string `json:"RenewalStatus" xml:"RenewalStatus" require:"true"`
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetAutoRenewEnabled(v bool) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.AutoRenewEnabled = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetDuration(v int) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetPeriodUnit(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute) SetRenewalStatus(v string) *DescribeInstanceAutoRenewAttributeResponseInstanceRenewAttributesInstanceRenewAttribute {
	s.RenewalStatus = &v
	return s
}

type DescribeSnapshotLinksRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	DiskIds              *string `json:"DiskIds" xml:"DiskIds"`
	SnapshotLinkIds      *string `json:"SnapshotLinkIds" xml:"SnapshotLinkIds"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeSnapshotLinksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksRequest) SetOwnerId(v int64) *DescribeSnapshotLinksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotLinksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetResourceOwnerId(v int64) *DescribeSnapshotLinksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetOwnerAccount(v string) *DescribeSnapshotLinksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetRegionId(v string) *DescribeSnapshotLinksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetInstanceId(v string) *DescribeSnapshotLinksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetDiskIds(v string) *DescribeSnapshotLinksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetSnapshotLinkIds(v string) *DescribeSnapshotLinksRequest {
	s.SnapshotLinkIds = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetPageNumber(v int) *DescribeSnapshotLinksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotLinksRequest) SetPageSize(v int) *DescribeSnapshotLinksRequest {
	s.PageSize = &v
	return s
}

type DescribeSnapshotLinksResponse struct {
	RequestId     *string                                     `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount    *int                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber    *int                                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize      *int                                        `json:"PageSize" xml:"PageSize" require:"true"`
	SnapshotLinks *DescribeSnapshotLinksResponseSnapshotLinks `json:"SnapshotLinks" xml:"SnapshotLinks" require:"true" type:"Struct"`
}

func (s DescribeSnapshotLinksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponse) SetRequestId(v string) *DescribeSnapshotLinksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotLinksResponse) SetTotalCount(v int) *DescribeSnapshotLinksResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotLinksResponse) SetPageNumber(v int) *DescribeSnapshotLinksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotLinksResponse) SetPageSize(v int) *DescribeSnapshotLinksResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponse) SetSnapshotLinks(v *DescribeSnapshotLinksResponseSnapshotLinks) *DescribeSnapshotLinksResponse {
	s.SnapshotLinks = v
	return s
}

type DescribeSnapshotLinksResponseSnapshotLinks struct {
	SnapshotLink []*DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink `json:"SnapshotLink" xml:"SnapshotLink" require:"true" type:"Repeated"`
}

func (s DescribeSnapshotLinksResponseSnapshotLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponseSnapshotLinks) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponseSnapshotLinks) SetSnapshotLink(v []*DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) *DescribeSnapshotLinksResponseSnapshotLinks {
	s.SnapshotLink = v
	return s
}

type DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink struct {
	SnapshotLinkId *string `json:"SnapshotLinkId" xml:"SnapshotLinkId" require:"true"`
	RegionId       *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId     *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	InstanceName   *string `json:"InstanceName" xml:"InstanceName" require:"true"`
	SourceDiskId   *string `json:"SourceDiskId" xml:"SourceDiskId" require:"true"`
	SourceDiskName *string `json:"SourceDiskName" xml:"SourceDiskName" require:"true"`
	SourceDiskSize *int    `json:"SourceDiskSize" xml:"SourceDiskSize" require:"true"`
	SourceDiskType *string `json:"SourceDiskType" xml:"SourceDiskType" require:"true"`
	Category       *string `json:"Category" xml:"Category" require:"true"`
	TotalSize      *int64  `json:"TotalSize" xml:"TotalSize" require:"true"`
	TotalCount     *int    `json:"TotalCount" xml:"TotalCount" require:"true"`
}

func (s DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetSnapshotLinkId(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.SnapshotLinkId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetRegionId(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetInstanceId(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetInstanceName(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.InstanceName = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetSourceDiskId(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetSourceDiskName(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.SourceDiskName = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetSourceDiskSize(v int) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.SourceDiskSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetSourceDiskType(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetCategory(v string) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetTotalSize(v int64) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.TotalSize = &v
	return s
}

func (s *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink) SetTotalCount(v int) *DescribeSnapshotLinksResponseSnapshotLinksSnapshotLink {
	s.TotalCount = &v
	return s
}

type ModifyInstanceAutoReleaseTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	AutoReleaseTime      *string `json:"AutoReleaseTime" xml:"AutoReleaseTime"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyInstanceAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetOwnerId(v int64) *ModifyInstanceAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetRegionId(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetInstanceId(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *ModifyInstanceAutoReleaseTimeRequest) SetOwnerAccount(v string) *ModifyInstanceAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceAutoReleaseTimeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoReleaseTimeResponse) SetRequestId(v string) *ModifyInstanceAutoReleaseTimeResponse {
	s.RequestId = &v
	return s
}

type DescribeNewProjectEipMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeNewProjectEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetOwnerId(v int64) *DescribeNewProjectEipMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeNewProjectEipMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetRegionId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetAllocationId(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetStartTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetEndTime(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetPeriod(v int) *DescribeNewProjectEipMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataRequest) SetOwnerAccount(v string) *DescribeNewProjectEipMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeNewProjectEipMonitorDataResponse struct {
	RequestId       *string                                                  `json:"RequestId" xml:"RequestId" require:"true"`
	EipMonitorDatas *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas `json:"EipMonitorDatas" xml:"EipMonitorDatas" require:"true" type:"Struct"`
}

func (s DescribeNewProjectEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetRequestId(v string) *DescribeNewProjectEipMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponse) SetEipMonitorDatas(v *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) *DescribeNewProjectEipMonitorDataResponse {
	s.EipMonitorDatas = v
	return s
}

type DescribeNewProjectEipMonitorDataResponseEipMonitorDatas struct {
	EipMonitorData []*DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData `json:"EipMonitorData" xml:"EipMonitorData" require:"true" type:"Repeated"`
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas) SetEipMonitorData(v []*DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatas {
	s.EipMonitorData = v
	return s
}

type DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData struct {
	EipRX        *int    `json:"EipRX" xml:"EipRX" require:"true"`
	EipTX        *int    `json:"EipTX" xml:"EipTX" require:"true"`
	EipFlow      *int    `json:"EipFlow" xml:"EipFlow" require:"true"`
	EipBandwidth *int    `json:"EipBandwidth" xml:"EipBandwidth" require:"true"`
	EipPackets   *int    `json:"EipPackets" xml:"EipPackets" require:"true"`
	TimeStamp    *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipRX(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipRX = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipTX(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipTX = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipFlow(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipFlow = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipBandwidth(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipPackets(v int) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipPackets = &v
	return s
}

func (s *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetTimeStamp(v string) *DescribeNewProjectEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeUserDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
}

func (s DescribeUserDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserDataRequest) SetOwnerId(v int64) *DescribeUserDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserDataRequest) SetResourceOwnerAccount(v string) *DescribeUserDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserDataRequest) SetResourceOwnerId(v int64) *DescribeUserDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserDataRequest) SetRegionId(v string) *DescribeUserDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserDataRequest) SetInstanceId(v string) *DescribeUserDataRequest {
	s.InstanceId = &v
	return s
}

type DescribeUserDataResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId   *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	UserData   *string `json:"UserData" xml:"UserData" require:"true"`
}

func (s DescribeUserDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserDataResponse) SetRequestId(v string) *DescribeUserDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeUserDataResponse) SetRegionId(v string) *DescribeUserDataResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeUserDataResponse) SetInstanceId(v string) *DescribeUserDataResponse {
	s.InstanceId = &v
	return s
}

func (s *DescribeUserDataResponse) SetUserData(v string) *DescribeUserDataResponse {
	s.UserData = &v
	return s
}

type RemoveBandwidthPackageIpsRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	BandwidthPackageId   *string   `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true"`
	ClientToken          *string   `json:"ClientToken" xml:"ClientToken"`
	RemovedIpAddresses   []*string `json:"RemovedIpAddresses" xml:"RemovedIpAddresses" require:"true" type:"Repeated"`
}

func (s RemoveBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsRequest) SetOwnerId(v int64) *RemoveBandwidthPackageIpsRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetResourceOwnerAccount(v string) *RemoveBandwidthPackageIpsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetResourceOwnerId(v int64) *RemoveBandwidthPackageIpsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetOwnerAccount(v string) *RemoveBandwidthPackageIpsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetRegionId(v string) *RemoveBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *RemoveBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetClientToken(v string) *RemoveBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveBandwidthPackageIpsRequest) SetRemovedIpAddresses(v []*string) *RemoveBandwidthPackageIpsRequest {
	s.RemovedIpAddresses = v
	return s
}

type RemoveBandwidthPackageIpsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RemoveBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *RemoveBandwidthPackageIpsResponse) SetRequestId(v string) *RemoveBandwidthPackageIpsResponse {
	s.RequestId = &v
	return s
}

type ModifyForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ForwardTableId       *string `json:"ForwardTableId" xml:"ForwardTableId" require:"true"`
	ForwardEntryId       *string `json:"ForwardEntryId" xml:"ForwardEntryId" require:"true"`
	ExternalIp           *string `json:"ExternalIp" xml:"ExternalIp"`
	ExternalPort         *string `json:"ExternalPort" xml:"ExternalPort"`
	InternalIp           *string `json:"InternalIp" xml:"InternalIp"`
	InternalPort         *string `json:"InternalPort" xml:"InternalPort"`
	IpProtocol           *string `json:"IpProtocol" xml:"IpProtocol"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s ModifyForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryRequest) SetOwnerId(v int64) *ModifyForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetResourceOwnerAccount(v string) *ModifyForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetResourceOwnerId(v int64) *ModifyForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetOwnerAccount(v string) *ModifyForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardTableId(v string) *ModifyForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryId(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalIp(v string) *ModifyForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalPort(v string) *ModifyForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalIp(v string) *ModifyForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalPort(v string) *ModifyForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetIpProtocol(v string) *ModifyForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetRegionId(v string) *ModifyForwardEntryRequest {
	s.RegionId = &v
	return s
}

type ModifyForwardEntryResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponse) SetRequestId(v string) *ModifyForwardEntryResponse {
	s.RequestId = &v
	return s
}

type ModifyBandwidthPackageSpecRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	BandwidthPackageId   *string `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true"`
	Bandwidth            *string `json:"Bandwidth" xml:"Bandwidth" require:"true"`
}

func (s ModifyBandwidthPackageSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecRequest) SetOwnerId(v int64) *ModifyBandwidthPackageSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetResourceOwnerAccount(v string) *ModifyBandwidthPackageSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetResourceOwnerId(v int64) *ModifyBandwidthPackageSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetOwnerAccount(v string) *ModifyBandwidthPackageSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetRegionId(v string) *ModifyBandwidthPackageSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidthPackageId(v string) *ModifyBandwidthPackageSpecRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *ModifyBandwidthPackageSpecRequest) SetBandwidth(v string) *ModifyBandwidthPackageSpecRequest {
	s.Bandwidth = &v
	return s
}

type ModifyBandwidthPackageSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyBandwidthPackageSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBandwidthPackageSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyBandwidthPackageSpecResponse) SetRequestId(v string) *ModifyBandwidthPackageSpecResponse {
	s.RequestId = &v
	return s
}

type DescribeNatGatewaysRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	NatGatewayId         *string `json:"NatGatewayId" xml:"NatGatewayId"`
	VpcId                *string `json:"VpcId" xml:"VpcId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeNatGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysRequest) SetOwnerId(v int64) *DescribeNatGatewaysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetResourceOwnerAccount(v string) *DescribeNatGatewaysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetResourceOwnerId(v int64) *DescribeNatGatewaysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetOwnerAccount(v string) *DescribeNatGatewaysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetRegionId(v string) *DescribeNatGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayId(v string) *DescribeNatGatewaysRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetVpcId(v string) *DescribeNatGatewaysRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageNumber(v int) *DescribeNatGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageSize(v int) *DescribeNatGatewaysRequest {
	s.PageSize = &v
	return s
}

type DescribeNatGatewaysResponse struct {
	RequestId   *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int                                    `json:"PageSize" xml:"PageSize" require:"true"`
	NatGateways *DescribeNatGatewaysResponseNatGateways `json:"NatGateways" xml:"NatGateways" require:"true" type:"Struct"`
}

func (s DescribeNatGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponse) SetRequestId(v string) *DescribeNatGatewaysResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetTotalCount(v int) *DescribeNatGatewaysResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetPageNumber(v int) *DescribeNatGatewaysResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetPageSize(v int) *DescribeNatGatewaysResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetNatGateways(v *DescribeNatGatewaysResponseNatGateways) *DescribeNatGatewaysResponse {
	s.NatGateways = v
	return s
}

type DescribeNatGatewaysResponseNatGateways struct {
	NatGateway []*DescribeNatGatewaysResponseNatGatewaysNatGateway `json:"NatGateway" xml:"NatGateway" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGateways) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGateways) SetNatGateway(v []*DescribeNatGatewaysResponseNatGatewaysNatGateway) *DescribeNatGatewaysResponseNatGateways {
	s.NatGateway = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGateway struct {
	NatGatewayId        *string                                                              `json:"NatGatewayId" xml:"NatGatewayId" require:"true"`
	RegionId            *string                                                              `json:"RegionId" xml:"RegionId" require:"true"`
	Name                *string                                                              `json:"Name" xml:"Name" require:"true"`
	Description         *string                                                              `json:"Description" xml:"Description" require:"true"`
	VpcId               *string                                                              `json:"VpcId" xml:"VpcId" require:"true"`
	Spec                *string                                                              `json:"Spec" xml:"Spec" require:"true"`
	InstanceChargeType  *string                                                              `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	BusinessStatus      *string                                                              `json:"BusinessStatus" xml:"BusinessStatus" require:"true"`
	CreationTime        *string                                                              `json:"CreationTime" xml:"CreationTime" require:"true"`
	Status              *string                                                              `json:"Status" xml:"Status" require:"true"`
	ForwardTableIds     *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds     `json:"ForwardTableIds" xml:"ForwardTableIds" require:"true" type:"Struct"`
	BandwidthPackageIds *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds `json:"BandwidthPackageIds" xml:"BandwidthPackageIds" require:"true" type:"Struct"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGateway) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetNatGatewayId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetRegionId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.RegionId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetName(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetDescription(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Description = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetVpcId(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.VpcId = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetSpec(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetInstanceChargeType(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetBusinessStatus(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetCreationTime(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.CreationTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetStatus(v string) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.Status = &v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetForwardTableIds(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.ForwardTableIds = v
	return s
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGateway) SetBandwidthPackageIds(v *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) *DescribeNatGatewaysResponseNatGatewaysNatGateway {
	s.BandwidthPackageIds = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds struct {
	ForwardTableId []*string `json:"ForwardTableId" xml:"ForwardTableId" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds) SetForwardTableId(v []*string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayForwardTableIds {
	s.ForwardTableId = v
	return s
}

type DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds struct {
	BandwidthPackageId []*string `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true" type:"Repeated"`
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds) SetBandwidthPackageId(v []*string) *DescribeNatGatewaysResponseNatGatewaysNatGatewayBandwidthPackageIds {
	s.BandwidthPackageId = v
	return s
}

type DescribeForwardTableEntriesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ForwardTableId       *string `json:"ForwardTableId" xml:"ForwardTableId" require:"true"`
	ForwardEntryId       *string `json:"ForwardEntryId" xml:"ForwardEntryId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeForwardTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesRequest) SetOwnerId(v int64) *DescribeForwardTableEntriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetResourceOwnerAccount(v string) *DescribeForwardTableEntriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetResourceOwnerId(v int64) *DescribeForwardTableEntriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetOwnerAccount(v string) *DescribeForwardTableEntriesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetRegionId(v string) *DescribeForwardTableEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardTableId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageNumber(v int) *DescribeForwardTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageSize(v int) *DescribeForwardTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeForwardTableEntriesResponse struct {
	RequestId           *string                                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount          *int                                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber          *int                                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize            *int                                                    `json:"PageSize" xml:"PageSize" require:"true"`
	ForwardTableEntries *DescribeForwardTableEntriesResponseForwardTableEntries `json:"ForwardTableEntries" xml:"ForwardTableEntries" require:"true" type:"Struct"`
}

func (s DescribeForwardTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponse) SetRequestId(v string) *DescribeForwardTableEntriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetTotalCount(v int) *DescribeForwardTableEntriesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetPageNumber(v int) *DescribeForwardTableEntriesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetPageSize(v int) *DescribeForwardTableEntriesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetForwardTableEntries(v *DescribeForwardTableEntriesResponseForwardTableEntries) *DescribeForwardTableEntriesResponse {
	s.ForwardTableEntries = v
	return s
}

type DescribeForwardTableEntriesResponseForwardTableEntries struct {
	ForwardTableEntry []*DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry `json:"ForwardTableEntry" xml:"ForwardTableEntry" require:"true" type:"Repeated"`
}

func (s DescribeForwardTableEntriesResponseForwardTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseForwardTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntries) SetForwardTableEntry(v []*DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) *DescribeForwardTableEntriesResponseForwardTableEntries {
	s.ForwardTableEntry = v
	return s
}

type DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry struct {
	ForwardTableId *string `json:"ForwardTableId" xml:"ForwardTableId" require:"true"`
	ForwardEntryId *string `json:"ForwardEntryId" xml:"ForwardEntryId" require:"true"`
	ExternalIp     *string `json:"ExternalIp" xml:"ExternalIp" require:"true"`
	ExternalPort   *string `json:"ExternalPort" xml:"ExternalPort" require:"true"`
	IpProtocol     *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	InternalIp     *string `json:"InternalIp" xml:"InternalIp" require:"true"`
	InternalPort   *string `json:"InternalPort" xml:"InternalPort" require:"true"`
	Status         *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetForwardTableId(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ForwardTableId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetForwardEntryId(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetExternalIp(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetExternalPort(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetIpProtocol(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetInternalIp(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetInternalPort(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry) SetStatus(v string) *DescribeForwardTableEntriesResponseForwardTableEntriesForwardTableEntry {
	s.Status = &v
	return s
}

type DescribeBandwidthPackagesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	BandwidthPackageId   *string `json:"BandwidthPackageId" xml:"BandwidthPackageId"`
	NatGatewayId         *string `json:"NatGatewayId" xml:"NatGatewayId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeBandwidthPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesRequest) SetOwnerId(v int64) *DescribeBandwidthPackagesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetResourceOwnerAccount(v string) *DescribeBandwidthPackagesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetResourceOwnerId(v int64) *DescribeBandwidthPackagesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetOwnerAccount(v string) *DescribeBandwidthPackagesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetRegionId(v string) *DescribeBandwidthPackagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetNatGatewayId(v string) *DescribeBandwidthPackagesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageNumber(v int) *DescribeBandwidthPackagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesRequest) SetPageSize(v int) *DescribeBandwidthPackagesRequest {
	s.PageSize = &v
	return s
}

type DescribeBandwidthPackagesResponse struct {
	RequestId         *string                                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount        *int                                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber        *int                                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize          *int                                                `json:"PageSize" xml:"PageSize" require:"true"`
	BandwidthPackages *DescribeBandwidthPackagesResponseBandwidthPackages `json:"BandwidthPackages" xml:"BandwidthPackages" require:"true" type:"Struct"`
}

func (s DescribeBandwidthPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponse) SetRequestId(v string) *DescribeBandwidthPackagesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetTotalCount(v int) *DescribeBandwidthPackagesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetPageNumber(v int) *DescribeBandwidthPackagesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetPageSize(v int) *DescribeBandwidthPackagesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeBandwidthPackagesResponse) SetBandwidthPackages(v *DescribeBandwidthPackagesResponseBandwidthPackages) *DescribeBandwidthPackagesResponse {
	s.BandwidthPackages = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackages struct {
	BandwidthPackage []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage `json:"BandwidthPackage" xml:"BandwidthPackage" require:"true" type:"Repeated"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackages) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackages) SetBandwidthPackage(v []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) *DescribeBandwidthPackagesResponseBandwidthPackages {
	s.BandwidthPackage = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage struct {
	BandwidthPackageId *string                                                                              `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true"`
	RegionId           *string                                                                              `json:"RegionId" xml:"RegionId" require:"true"`
	Name               *string                                                                              `json:"Name" xml:"Name" require:"true"`
	Description        *string                                                                              `json:"Description" xml:"Description" require:"true"`
	ZoneId             *string                                                                              `json:"ZoneId" xml:"ZoneId" require:"true"`
	NatGatewayId       *string                                                                              `json:"NatGatewayId" xml:"NatGatewayId" require:"true"`
	Bandwidth          *string                                                                              `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	InstanceChargeType *string                                                                              `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	InternetChargeType *string                                                                              `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	BusinessStatus     *string                                                                              `json:"BusinessStatus" xml:"BusinessStatus" require:"true"`
	IpCount            *string                                                                              `json:"IpCount" xml:"IpCount" require:"true"`
	ISP                *string                                                                              `json:"ISP" xml:"ISP" require:"true"`
	CreationTime       *string                                                                              `json:"CreationTime" xml:"CreationTime" require:"true"`
	Status             *string                                                                              `json:"Status" xml:"Status" require:"true"`
	PublicIpAddresses  *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses `json:"PublicIpAddresses" xml:"PublicIpAddresses" require:"true" type:"Struct"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBandwidthPackageId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.BandwidthPackageId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetRegionId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetName(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Name = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetDescription(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Description = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetZoneId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.ZoneId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetNatGatewayId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBandwidth(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetInstanceChargeType(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetInternetChargeType(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetBusinessStatus(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetIpCount(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.IpCount = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetISP(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.ISP = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetCreationTime(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.CreationTime = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetStatus(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.Status = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage) SetPublicIpAddresses(v *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackage {
	s.PublicIpAddresses = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses struct {
	PublicIpAddresse []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse `json:"PublicIpAddresse" xml:"PublicIpAddresse" require:"true" type:"Repeated"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses) SetPublicIpAddresse(v []*DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddresses {
	s.PublicIpAddresse = v
	return s
}

type DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse struct {
	AllocationId *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	IpAddress    *string `json:"IpAddress" xml:"IpAddress" require:"true"`
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetAllocationId(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.AllocationId = &v
	return s
}

func (s *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse) SetIpAddress(v string) *DescribeBandwidthPackagesResponseBandwidthPackagesBandwidthPackagePublicIpAddressesPublicIpAddresse {
	s.IpAddress = &v
	return s
}

type DeleteNatGatewayRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	NatGatewayId         *string `json:"NatGatewayId" xml:"NatGatewayId" require:"true"`
}

func (s DeleteNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayRequest) SetOwnerId(v int64) *DeleteNatGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetResourceOwnerAccount(v string) *DeleteNatGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetResourceOwnerId(v int64) *DeleteNatGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetOwnerAccount(v string) *DeleteNatGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetRegionId(v string) *DeleteNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetNatGatewayId(v string) *DeleteNatGatewayRequest {
	s.NatGatewayId = &v
	return s
}

type DeleteNatGatewayResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponse) SetRequestId(v string) *DeleteNatGatewayResponse {
	s.RequestId = &v
	return s
}

type DeleteForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ForwardTableId       *string `json:"ForwardTableId" xml:"ForwardTableId" require:"true"`
	ForwardEntryId       *string `json:"ForwardEntryId" xml:"ForwardEntryId" require:"true"`
}

func (s DeleteForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryRequest) SetOwnerId(v int64) *DeleteForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetResourceOwnerAccount(v string) *DeleteForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetResourceOwnerId(v int64) *DeleteForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetOwnerAccount(v string) *DeleteForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetRegionId(v string) *DeleteForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardTableId(v string) *DeleteForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *DeleteForwardEntryRequest) SetForwardEntryId(v string) *DeleteForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

type DeleteForwardEntryResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponse) SetRequestId(v string) *DeleteForwardEntryResponse {
	s.RequestId = &v
	return s
}

type DeleteBandwidthPackageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	BandwidthPackageId   *string `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true"`
}

func (s DeleteBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageRequest) SetOwnerId(v int64) *DeleteBandwidthPackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetResourceOwnerAccount(v string) *DeleteBandwidthPackageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetResourceOwnerId(v int64) *DeleteBandwidthPackageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetOwnerAccount(v string) *DeleteBandwidthPackageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetRegionId(v string) *DeleteBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBandwidthPackageRequest) SetBandwidthPackageId(v string) *DeleteBandwidthPackageRequest {
	s.BandwidthPackageId = &v
	return s
}

type DeleteBandwidthPackageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *DeleteBandwidthPackageResponse) SetRequestId(v string) *DeleteBandwidthPackageResponse {
	s.RequestId = &v
	return s
}

type CreateNatGatewayRequest struct {
	OwnerId              *int64                                     `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                    `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                    `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId                *string                                    `json:"VpcId" xml:"VpcId" require:"true"`
	Name                 *string                                    `json:"Name" xml:"Name"`
	Description          *string                                    `json:"Description" xml:"Description"`
	ClientToken          *string                                    `json:"ClientToken" xml:"ClientToken"`
	BandwidthPackage     []*CreateNatGatewayRequestBandwidthPackage `json:"BandwidthPackage" xml:"BandwidthPackage" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequest) SetOwnerId(v int64) *CreateNatGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetResourceOwnerAccount(v string) *CreateNatGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateNatGatewayRequest) SetResourceOwnerId(v int64) *CreateNatGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetOwnerAccount(v string) *CreateNatGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateNatGatewayRequest) SetRegionId(v string) *CreateNatGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetVpcId(v string) *CreateNatGatewayRequest {
	s.VpcId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetName(v string) *CreateNatGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateNatGatewayRequest) SetDescription(v string) *CreateNatGatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateNatGatewayRequest) SetClientToken(v string) *CreateNatGatewayRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNatGatewayRequest) SetBandwidthPackage(v []*CreateNatGatewayRequestBandwidthPackage) *CreateNatGatewayRequest {
	s.BandwidthPackage = v
	return s
}

type CreateNatGatewayRequestBandwidthPackage struct {
	IpCount   *int    `json:"IpCount" xml:"IpCount" require:"true"`
	Bandwidth *int    `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	Zone      *string `json:"Zone" xml:"Zone" require:"true"`
}

func (s CreateNatGatewayRequestBandwidthPackage) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequestBandwidthPackage) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetIpCount(v int) *CreateNatGatewayRequestBandwidthPackage {
	s.IpCount = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetBandwidth(v int) *CreateNatGatewayRequestBandwidthPackage {
	s.Bandwidth = &v
	return s
}

func (s *CreateNatGatewayRequestBandwidthPackage) SetZone(v string) *CreateNatGatewayRequestBandwidthPackage {
	s.Zone = &v
	return s
}

type CreateNatGatewayResponse struct {
	RequestId           *string                                      `json:"RequestId" xml:"RequestId" require:"true"`
	NatGatewayId        *string                                      `json:"NatGatewayId" xml:"NatGatewayId" require:"true"`
	ForwardTableIds     *CreateNatGatewayResponseForwardTableIds     `json:"ForwardTableIds" xml:"ForwardTableIds" require:"true" type:"Struct"`
	BandwidthPackageIds *CreateNatGatewayResponseBandwidthPackageIds `json:"BandwidthPackageIds" xml:"BandwidthPackageIds" require:"true" type:"Struct"`
}

func (s CreateNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponse) SetRequestId(v string) *CreateNatGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *CreateNatGatewayResponse) SetNatGatewayId(v string) *CreateNatGatewayResponse {
	s.NatGatewayId = &v
	return s
}

func (s *CreateNatGatewayResponse) SetForwardTableIds(v *CreateNatGatewayResponseForwardTableIds) *CreateNatGatewayResponse {
	s.ForwardTableIds = v
	return s
}

func (s *CreateNatGatewayResponse) SetBandwidthPackageIds(v *CreateNatGatewayResponseBandwidthPackageIds) *CreateNatGatewayResponse {
	s.BandwidthPackageIds = v
	return s
}

type CreateNatGatewayResponseForwardTableIds struct {
	ForwardTableId []*string `json:"ForwardTableId" xml:"ForwardTableId" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayResponseForwardTableIds) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseForwardTableIds) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseForwardTableIds) SetForwardTableId(v []*string) *CreateNatGatewayResponseForwardTableIds {
	s.ForwardTableId = v
	return s
}

type CreateNatGatewayResponseBandwidthPackageIds struct {
	BandwidthPackageId []*string `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true" type:"Repeated"`
}

func (s CreateNatGatewayResponseBandwidthPackageIds) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseBandwidthPackageIds) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseBandwidthPackageIds) SetBandwidthPackageId(v []*string) *CreateNatGatewayResponseBandwidthPackageIds {
	s.BandwidthPackageId = v
	return s
}

type CreateForwardEntryRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ForwardTableId       *string `json:"ForwardTableId" xml:"ForwardTableId" require:"true"`
	ExternalIp           *string `json:"ExternalIp" xml:"ExternalIp" require:"true"`
	ExternalPort         *string `json:"ExternalPort" xml:"ExternalPort" require:"true"`
	InternalIp           *string `json:"InternalIp" xml:"InternalIp" require:"true"`
	InternalPort         *string `json:"InternalPort" xml:"InternalPort" require:"true"`
	IpProtocol           *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
}

func (s CreateForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryRequest) SetOwnerId(v int64) *CreateForwardEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetResourceOwnerAccount(v string) *CreateForwardEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateForwardEntryRequest) SetResourceOwnerId(v int64) *CreateForwardEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetOwnerAccount(v string) *CreateForwardEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateForwardEntryRequest) SetRegionId(v string) *CreateForwardEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardTableId(v string) *CreateForwardEntryRequest {
	s.ForwardTableId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalIp(v string) *CreateForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalPort(v string) *CreateForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalIp(v string) *CreateForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalPort(v string) *CreateForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetIpProtocol(v string) *CreateForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

type CreateForwardEntryResponse struct {
	RequestId      *string `json:"RequestId" xml:"RequestId" require:"true"`
	ForwardEntryId *string `json:"ForwardEntryId" xml:"ForwardEntryId" require:"true"`
}

func (s CreateForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponse) SetRequestId(v string) *CreateForwardEntryResponse {
	s.RequestId = &v
	return s
}

func (s *CreateForwardEntryResponse) SetForwardEntryId(v string) *CreateForwardEntryResponse {
	s.ForwardEntryId = &v
	return s
}

type AddBandwidthPackageIpsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	BandwidthPackageId   *string `json:"BandwidthPackageId" xml:"BandwidthPackageId" require:"true"`
	IpCount              *string `json:"IpCount" xml:"IpCount" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
}

func (s AddBandwidthPackageIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsRequest) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsRequest) SetOwnerId(v int64) *AddBandwidthPackageIpsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetResourceOwnerAccount(v string) *AddBandwidthPackageIpsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetResourceOwnerId(v int64) *AddBandwidthPackageIpsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetOwnerAccount(v string) *AddBandwidthPackageIpsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetRegionId(v string) *AddBandwidthPackageIpsRequest {
	s.RegionId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetBandwidthPackageId(v string) *AddBandwidthPackageIpsRequest {
	s.BandwidthPackageId = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetIpCount(v string) *AddBandwidthPackageIpsRequest {
	s.IpCount = &v
	return s
}

func (s *AddBandwidthPackageIpsRequest) SetClientToken(v string) *AddBandwidthPackageIpsRequest {
	s.ClientToken = &v
	return s
}

type AddBandwidthPackageIpsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddBandwidthPackageIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBandwidthPackageIpsResponse) GoString() string {
	return s.String()
}

func (s *AddBandwidthPackageIpsResponse) SetRequestId(v string) *AddBandwidthPackageIpsResponse {
	s.RequestId = &v
	return s
}

type EipFillProductRequest struct {
	Data                 *string `json:"data" xml:"data" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s EipFillProductRequest) String() string {
	return tea.Prettify(s)
}

func (s EipFillProductRequest) GoString() string {
	return s.String()
}

func (s *EipFillProductRequest) SetData(v string) *EipFillProductRequest {
	s.Data = &v
	return s
}

func (s *EipFillProductRequest) SetOwnerId(v int64) *EipFillProductRequest {
	s.OwnerId = &v
	return s
}

func (s *EipFillProductRequest) SetResourceOwnerAccount(v string) *EipFillProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipFillProductRequest) SetResourceOwnerId(v int64) *EipFillProductRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipFillProductRequest) SetClientToken(v string) *EipFillProductRequest {
	s.ClientToken = &v
	return s
}

func (s *EipFillProductRequest) SetOwnerAccount(v string) *EipFillProductRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipFillProductRequest) SetUserCidr(v string) *EipFillProductRequest {
	s.UserCidr = &v
	return s
}

type EipFillProductResponse struct {
	RequestId *string `json:"requestId" xml:"requestId" require:"true"`
	Data      *string `json:"data" xml:"data" require:"true"`
	Code      *string `json:"code" xml:"code" require:"true"`
	Success   *bool   `json:"success" xml:"success" require:"true"`
	Message   *string `json:"message" xml:"message" require:"true"`
}

func (s EipFillProductResponse) String() string {
	return tea.Prettify(s)
}

func (s EipFillProductResponse) GoString() string {
	return s.String()
}

func (s *EipFillProductResponse) SetRequestId(v string) *EipFillProductResponse {
	s.RequestId = &v
	return s
}

func (s *EipFillProductResponse) SetData(v string) *EipFillProductResponse {
	s.Data = &v
	return s
}

func (s *EipFillProductResponse) SetCode(v string) *EipFillProductResponse {
	s.Code = &v
	return s
}

func (s *EipFillProductResponse) SetSuccess(v bool) *EipFillProductResponse {
	s.Success = &v
	return s
}

func (s *EipFillProductResponse) SetMessage(v string) *EipFillProductResponse {
	s.Message = &v
	return s
}

type EipNotifyPaidRequest struct {
	Data                 *string `json:"data" xml:"data" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s EipNotifyPaidRequest) String() string {
	return tea.Prettify(s)
}

func (s EipNotifyPaidRequest) GoString() string {
	return s.String()
}

func (s *EipNotifyPaidRequest) SetData(v string) *EipNotifyPaidRequest {
	s.Data = &v
	return s
}

func (s *EipNotifyPaidRequest) SetOwnerId(v int64) *EipNotifyPaidRequest {
	s.OwnerId = &v
	return s
}

func (s *EipNotifyPaidRequest) SetResourceOwnerAccount(v string) *EipNotifyPaidRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipNotifyPaidRequest) SetResourceOwnerId(v int64) *EipNotifyPaidRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipNotifyPaidRequest) SetClientToken(v string) *EipNotifyPaidRequest {
	s.ClientToken = &v
	return s
}

func (s *EipNotifyPaidRequest) SetOwnerAccount(v string) *EipNotifyPaidRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipNotifyPaidRequest) SetUserCidr(v string) *EipNotifyPaidRequest {
	s.UserCidr = &v
	return s
}

type EipNotifyPaidResponse struct {
	RequestId *string `json:"requestId" xml:"requestId" require:"true"`
	Data      *string `json:"data" xml:"data" require:"true"`
	Code      *string `json:"code" xml:"code" require:"true"`
	Message   *string `json:"message" xml:"message" require:"true"`
	Success   *bool   `json:"success" xml:"success" require:"true"`
}

func (s EipNotifyPaidResponse) String() string {
	return tea.Prettify(s)
}

func (s EipNotifyPaidResponse) GoString() string {
	return s.String()
}

func (s *EipNotifyPaidResponse) SetRequestId(v string) *EipNotifyPaidResponse {
	s.RequestId = &v
	return s
}

func (s *EipNotifyPaidResponse) SetData(v string) *EipNotifyPaidResponse {
	s.Data = &v
	return s
}

func (s *EipNotifyPaidResponse) SetCode(v string) *EipNotifyPaidResponse {
	s.Code = &v
	return s
}

func (s *EipNotifyPaidResponse) SetMessage(v string) *EipNotifyPaidResponse {
	s.Message = &v
	return s
}

func (s *EipNotifyPaidResponse) SetSuccess(v bool) *EipNotifyPaidResponse {
	s.Success = &v
	return s
}

type EipFillParamsRequest struct {
	Data                 *string `json:"data" xml:"data" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s EipFillParamsRequest) String() string {
	return tea.Prettify(s)
}

func (s EipFillParamsRequest) GoString() string {
	return s.String()
}

func (s *EipFillParamsRequest) SetData(v string) *EipFillParamsRequest {
	s.Data = &v
	return s
}

func (s *EipFillParamsRequest) SetOwnerId(v int64) *EipFillParamsRequest {
	s.OwnerId = &v
	return s
}

func (s *EipFillParamsRequest) SetResourceOwnerAccount(v string) *EipFillParamsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EipFillParamsRequest) SetResourceOwnerId(v int64) *EipFillParamsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EipFillParamsRequest) SetClientToken(v string) *EipFillParamsRequest {
	s.ClientToken = &v
	return s
}

func (s *EipFillParamsRequest) SetOwnerAccount(v string) *EipFillParamsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EipFillParamsRequest) SetUserCidr(v string) *EipFillParamsRequest {
	s.UserCidr = &v
	return s
}

type EipFillParamsResponse struct {
	RequestId *string `json:"requestId" xml:"requestId" require:"true"`
	Data      *string `json:"data" xml:"data" require:"true"`
	Code      *string `json:"code" xml:"code" require:"true"`
	Success   *bool   `json:"success" xml:"success" require:"true"`
	Message   *string `json:"message" xml:"message" require:"true"`
}

func (s EipFillParamsResponse) String() string {
	return tea.Prettify(s)
}

func (s EipFillParamsResponse) GoString() string {
	return s.String()
}

func (s *EipFillParamsResponse) SetRequestId(v string) *EipFillParamsResponse {
	s.RequestId = &v
	return s
}

func (s *EipFillParamsResponse) SetData(v string) *EipFillParamsResponse {
	s.Data = &v
	return s
}

func (s *EipFillParamsResponse) SetCode(v string) *EipFillParamsResponse {
	s.Code = &v
	return s
}

func (s *EipFillParamsResponse) SetSuccess(v bool) *EipFillParamsResponse {
	s.Success = &v
	return s
}

func (s *EipFillParamsResponse) SetMessage(v string) *EipFillParamsResponse {
	s.Message = &v
	return s
}

type ModifyAutoSnapshotPolicyExRequest struct {
	OwnerId                      *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount         *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId              *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                     *string `json:"regionId" xml:"regionId" require:"true"`
	AutoSnapshotPolicyId         *string `json:"autoSnapshotPolicyId" xml:"autoSnapshotPolicyId" require:"true"`
	AutoSnapshotPolicyName       *string `json:"autoSnapshotPolicyName" xml:"autoSnapshotPolicyName"`
	TimePoints                   *string `json:"timePoints" xml:"timePoints"`
	RepeatWeekdays               *string `json:"repeatWeekdays" xml:"repeatWeekdays"`
	RetentionDays                *int    `json:"retentionDays" xml:"retentionDays"`
	EnableCrossRegionCopy        *bool   `json:"EnableCrossRegionCopy" xml:"EnableCrossRegionCopy"`
	TargetCopyRegions            *string `json:"TargetCopyRegions" xml:"TargetCopyRegions"`
	CopiedSnapshotsRetentionDays *int    `json:"CopiedSnapshotsRetentionDays" xml:"CopiedSnapshotsRetentionDays"`
}

func (s ModifyAutoSnapshotPolicyExRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyExRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetOwnerId(v int64) *ModifyAutoSnapshotPolicyExRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetResourceOwnerAccount(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetResourceOwnerId(v int64) *ModifyAutoSnapshotPolicyExRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRegionId(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyId(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyName(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetTimePoints(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.TimePoints = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRepeatWeekdays(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.RepeatWeekdays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetRetentionDays(v int) *ModifyAutoSnapshotPolicyExRequest {
	s.RetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetEnableCrossRegionCopy(v bool) *ModifyAutoSnapshotPolicyExRequest {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetTargetCopyRegions(v string) *ModifyAutoSnapshotPolicyExRequest {
	s.TargetCopyRegions = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyExRequest) SetCopiedSnapshotsRetentionDays(v int) *ModifyAutoSnapshotPolicyExRequest {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

type ModifyAutoSnapshotPolicyExResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyAutoSnapshotPolicyExResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyExResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyExResponse) SetRequestId(v string) *ModifyAutoSnapshotPolicyExResponse {
	s.RequestId = &v
	return s
}

type DescribeAutoSnapshotPolicyExRequest struct {
	OwnerId              *int64                                    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string                                   `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string                                   `json:"RegionId" xml:"RegionId" require:"true"`
	AutoSnapshotPolicyId *string                                   `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId"`
	PageNumber           *int                                      `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                      `json:"PageSize" xml:"PageSize"`
	Tag                  []*DescribeAutoSnapshotPolicyExRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s DescribeAutoSnapshotPolicyExRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetOwnerId(v int64) *DescribeAutoSnapshotPolicyExRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetResourceOwnerAccount(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetResourceOwnerId(v int64) *DescribeAutoSnapshotPolicyExRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetOwnerAccount(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetRegionId(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetAutoSnapshotPolicyId(v string) *DescribeAutoSnapshotPolicyExRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetPageNumber(v int) *DescribeAutoSnapshotPolicyExRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetPageSize(v int) *DescribeAutoSnapshotPolicyExRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequest) SetTag(v []*DescribeAutoSnapshotPolicyExRequestTag) *DescribeAutoSnapshotPolicyExRequest {
	s.Tag = v
	return s
}

type DescribeAutoSnapshotPolicyExRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeAutoSnapshotPolicyExRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExRequestTag) SetKey(v string) *DescribeAutoSnapshotPolicyExRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExRequestTag) SetValue(v string) *DescribeAutoSnapshotPolicyExRequestTag {
	s.Value = &v
	return s
}

type DescribeAutoSnapshotPolicyExResponse struct {
	RequestId            *string                                                   `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount           *int                                                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber           *int                                                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize             *int                                                      `json:"PageSize" xml:"PageSize" require:"true"`
	AutoSnapshotPolicies *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies `json:"AutoSnapshotPolicies" xml:"AutoSnapshotPolicies" require:"true" type:"Struct"`
}

func (s DescribeAutoSnapshotPolicyExResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetRequestId(v string) *DescribeAutoSnapshotPolicyExResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetTotalCount(v int) *DescribeAutoSnapshotPolicyExResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetPageNumber(v int) *DescribeAutoSnapshotPolicyExResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetPageSize(v int) *DescribeAutoSnapshotPolicyExResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponse) SetAutoSnapshotPolicies(v *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies) *DescribeAutoSnapshotPolicyExResponse {
	s.AutoSnapshotPolicies = v
	return s
}

type DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies struct {
	AutoSnapshotPolicy []*DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy `json:"AutoSnapshotPolicy" xml:"AutoSnapshotPolicy" require:"true" type:"Repeated"`
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies) SetAutoSnapshotPolicy(v []*DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPolicies {
	s.AutoSnapshotPolicy = v
	return s
}

type DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy struct {
	AutoSnapshotPolicyId         *string                                                                         `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId" require:"true"`
	RegionId                     *string                                                                         `json:"RegionId" xml:"RegionId" require:"true"`
	AutoSnapshotPolicyName       *string                                                                         `json:"AutoSnapshotPolicyName" xml:"AutoSnapshotPolicyName" require:"true"`
	TimePoints                   *string                                                                         `json:"TimePoints" xml:"TimePoints" require:"true"`
	RepeatWeekdays               *string                                                                         `json:"RepeatWeekdays" xml:"RepeatWeekdays" require:"true"`
	RetentionDays                *int                                                                            `json:"RetentionDays" xml:"RetentionDays" require:"true"`
	DiskNums                     *int                                                                            `json:"DiskNums" xml:"DiskNums" require:"true"`
	VolumeNums                   *int                                                                            `json:"VolumeNums" xml:"VolumeNums" require:"true"`
	CreationTime                 *string                                                                         `json:"CreationTime" xml:"CreationTime" require:"true"`
	Status                       *string                                                                         `json:"Status" xml:"Status" require:"true"`
	EnableCrossRegionCopy        *bool                                                                           `json:"EnableCrossRegionCopy" xml:"EnableCrossRegionCopy" require:"true"`
	TargetCopyRegions            *string                                                                         `json:"TargetCopyRegions" xml:"TargetCopyRegions" require:"true"`
	CopiedSnapshotsRetentionDays *int                                                                            `json:"CopiedSnapshotsRetentionDays" xml:"CopiedSnapshotsRetentionDays" require:"true"`
	Tags                         *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetAutoSnapshotPolicyId(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetRegionId(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetAutoSnapshotPolicyName(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetTimePoints(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.TimePoints = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetRepeatWeekdays(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.RepeatWeekdays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetRetentionDays(v int) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.RetentionDays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetDiskNums(v int) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.DiskNums = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetVolumeNums(v int) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.VolumeNums = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetCreationTime(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetStatus(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.Status = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetEnableCrossRegionCopy(v bool) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetTargetCopyRegions(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.TargetCopyRegions = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetCopiedSnapshotsRetentionDays(v int) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy) SetTags(v *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicy {
	s.Tags = v
	return s
}

type DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags struct {
	Tag []*DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags) SetTag(v []*DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTags {
	s.Tag = v
	return s
}

type DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag) SetTagKey(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag) SetTagValue(v string) *DescribeAutoSnapshotPolicyExResponseAutoSnapshotPoliciesAutoSnapshotPolicyTagsTag {
	s.TagValue = &v
	return s
}

type DeleteAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"regionId" xml:"regionId" require:"true"`
	AutoSnapshotPolicyId *string `json:"autoSnapshotPolicyId" xml:"autoSnapshotPolicyId" require:"true"`
}

func (s DeleteAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyRequest) SetOwnerId(v int64) *DeleteAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *DeleteAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *DeleteAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetRegionId(v string) *DeleteAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyId(v string) *DeleteAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

type DeleteAutoSnapshotPolicyResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyResponse) SetRequestId(v string) *DeleteAutoSnapshotPolicyResponse {
	s.RequestId = &v
	return s
}

type CreateAutoSnapshotPolicyRequest struct {
	OwnerId                      *int64                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount         *string                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId              *int64                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                     *string                               `json:"regionId" xml:"regionId" require:"true"`
	AutoSnapshotPolicyName       *string                               `json:"autoSnapshotPolicyName" xml:"autoSnapshotPolicyName"`
	TimePoints                   *string                               `json:"timePoints" xml:"timePoints" require:"true"`
	RepeatWeekdays               *string                               `json:"repeatWeekdays" xml:"repeatWeekdays" require:"true"`
	RetentionDays                *int                                  `json:"retentionDays" xml:"retentionDays" require:"true"`
	EnableCrossRegionCopy        *bool                                 `json:"EnableCrossRegionCopy" xml:"EnableCrossRegionCopy"`
	TargetCopyRegions            *string                               `json:"TargetCopyRegions" xml:"TargetCopyRegions"`
	CopiedSnapshotsRetentionDays *int                                  `json:"CopiedSnapshotsRetentionDays" xml:"CopiedSnapshotsRetentionDays"`
	Tag                          []*CreateAutoSnapshotPolicyRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s CreateAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyRequest) SetOwnerId(v int64) *CreateAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *CreateAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *CreateAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRegionId(v string) *CreateAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyName(v string) *CreateAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTimePoints(v string) *CreateAutoSnapshotPolicyRequest {
	s.TimePoints = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRepeatWeekdays(v string) *CreateAutoSnapshotPolicyRequest {
	s.RepeatWeekdays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRetentionDays(v int) *CreateAutoSnapshotPolicyRequest {
	s.RetentionDays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetEnableCrossRegionCopy(v bool) *CreateAutoSnapshotPolicyRequest {
	s.EnableCrossRegionCopy = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTargetCopyRegions(v string) *CreateAutoSnapshotPolicyRequest {
	s.TargetCopyRegions = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetCopiedSnapshotsRetentionDays(v int) *CreateAutoSnapshotPolicyRequest {
	s.CopiedSnapshotsRetentionDays = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetTag(v []*CreateAutoSnapshotPolicyRequestTag) *CreateAutoSnapshotPolicyRequest {
	s.Tag = v
	return s
}

type CreateAutoSnapshotPolicyRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CreateAutoSnapshotPolicyRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyRequestTag) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyRequestTag) SetKey(v string) *CreateAutoSnapshotPolicyRequestTag {
	s.Key = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequestTag) SetValue(v string) *CreateAutoSnapshotPolicyRequestTag {
	s.Value = &v
	return s
}

type CreateAutoSnapshotPolicyResponse struct {
	RequestId            *string `json:"RequestId" xml:"RequestId" require:"true"`
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId" require:"true"`
}

func (s CreateAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyResponse) SetRequestId(v string) *CreateAutoSnapshotPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyResponse) SetAutoSnapshotPolicyId(v string) *CreateAutoSnapshotPolicyResponse {
	s.AutoSnapshotPolicyId = &v
	return s
}

type CancelAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"regionId" xml:"regionId" require:"true"`
	DiskIds              *string `json:"diskIds" xml:"diskIds" require:"true"`
}

func (s CancelAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyRequest) SetOwnerId(v int64) *CancelAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *CancelAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *CancelAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetRegionId(v string) *CancelAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetDiskIds(v string) *CancelAutoSnapshotPolicyRequest {
	s.DiskIds = &v
	return s
}

type CancelAutoSnapshotPolicyResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CancelAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyResponse) SetRequestId(v string) *CancelAutoSnapshotPolicyResponse {
	s.RequestId = &v
	return s
}

type ApplyAutoSnapshotPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"regionId" xml:"regionId" require:"true"`
	AutoSnapshotPolicyId *string `json:"autoSnapshotPolicyId" xml:"autoSnapshotPolicyId" require:"true"`
	DiskIds              *string `json:"diskIds" xml:"diskIds" require:"true"`
}

func (s ApplyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyRequest) SetOwnerId(v int64) *ApplyAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *ApplyAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *ApplyAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetRegionId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetAutoSnapshotPolicyId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetDiskIds(v string) *ApplyAutoSnapshotPolicyRequest {
	s.DiskIds = &v
	return s
}

type ApplyAutoSnapshotPolicyResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ApplyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyResponse) SetRequestId(v string) *ApplyAutoSnapshotPolicyResponse {
	s.RequestId = &v
	return s
}

type DescribeImageSupportInstanceTypesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId"`
	ActionType           *string `json:"ActionType" xml:"ActionType"`
}

func (s DescribeImageSupportInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesRequest) SetOwnerId(v int64) *DescribeImageSupportInstanceTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetResourceOwnerAccount(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetResourceOwnerId(v int64) *DescribeImageSupportInstanceTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetRegionId(v string) *DescribeImageSupportInstanceTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetImageId(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesRequest) SetActionType(v string) *DescribeImageSupportInstanceTypesRequest {
	s.ActionType = &v
	return s
}

type DescribeImageSupportInstanceTypesResponse struct {
	RequestId     *string                                                 `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId      *string                                                 `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId       *string                                                 `json:"ImageId" xml:"ImageId" require:"true"`
	InstanceTypes *DescribeImageSupportInstanceTypesResponseInstanceTypes `json:"InstanceTypes" xml:"InstanceTypes" require:"true" type:"Struct"`
}

func (s DescribeImageSupportInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponse) SetRequestId(v string) *DescribeImageSupportInstanceTypesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponse) SetRegionId(v string) *DescribeImageSupportInstanceTypesResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponse) SetImageId(v string) *DescribeImageSupportInstanceTypesResponse {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponse) SetInstanceTypes(v *DescribeImageSupportInstanceTypesResponseInstanceTypes) *DescribeImageSupportInstanceTypesResponse {
	s.InstanceTypes = v
	return s
}

type DescribeImageSupportInstanceTypesResponseInstanceTypes struct {
	InstanceType []*DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType `json:"InstanceType" xml:"InstanceType" require:"true" type:"Repeated"`
}

func (s DescribeImageSupportInstanceTypesResponseInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponseInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponseInstanceTypes) SetInstanceType(v []*DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) *DescribeImageSupportInstanceTypesResponseInstanceTypes {
	s.InstanceType = v
	return s
}

type DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType struct {
	InstanceTypeId     *string  `json:"InstanceTypeId" xml:"InstanceTypeId" require:"true"`
	CpuCoreCount       *int     `json:"CpuCoreCount" xml:"CpuCoreCount" require:"true"`
	MemorySize         *float32 `json:"MemorySize" xml:"MemorySize" require:"true"`
	InstanceTypeFamily *string  `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true"`
}

func (s DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) SetInstanceTypeId(v string) *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) SetCpuCoreCount(v int) *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) SetMemorySize(v float32) *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType {
	s.MemorySize = &v
	return s
}

func (s *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType) SetInstanceTypeFamily(v string) *DescribeImageSupportInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

type TerminateVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VbrId                *string `json:"VbrId" xml:"VbrId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s TerminateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterRequest) SetRegionId(v string) *TerminateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetVbrId(v string) *TerminateVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetOwnerId(v int64) *TerminateVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *TerminateVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *TerminateVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetClientToken(v string) *TerminateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetOwnerAccount(v string) *TerminateVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TerminateVirtualBorderRouterRequest) SetUserCidr(v string) *TerminateVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type TerminateVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s TerminateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *TerminateVirtualBorderRouterResponse) SetRequestId(v string) *TerminateVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type TerminatePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s TerminatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionRequest) SetRegionId(v string) *TerminatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *TerminatePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetOwnerId(v int64) *TerminatePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *TerminatePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetResourceOwnerId(v int64) *TerminatePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetClientToken(v string) *TerminatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetOwnerAccount(v string) *TerminatePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TerminatePhysicalConnectionRequest) SetUserCidr(v string) *TerminatePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type TerminatePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s TerminatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *TerminatePhysicalConnectionResponse) SetRequestId(v string) *TerminatePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type RecoverVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VbrId                *string `json:"VbrId" xml:"VbrId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s RecoverVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterRequest) SetRegionId(v string) *RecoverVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetVbrId(v string) *RecoverVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetOwnerId(v int64) *RecoverVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *RecoverVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *RecoverVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetClientToken(v string) *RecoverVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetOwnerAccount(v string) *RecoverVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RecoverVirtualBorderRouterRequest) SetUserCidr(v string) *RecoverVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type RecoverVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RecoverVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoverVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *RecoverVirtualBorderRouterResponse) SetRequestId(v string) *RecoverVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type ModifyVirtualBorderRouterAttributeRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VbrId                *string `json:"VbrId" xml:"VbrId" require:"true"`
	VlanId               *int    `json:"VlanId" xml:"VlanId"`
	CircuitCode          *string `json:"CircuitCode" xml:"CircuitCode"`
	LocalGatewayIp       *string `json:"LocalGatewayIp" xml:"LocalGatewayIp"`
	PeerGatewayIp        *string `json:"PeerGatewayIp" xml:"PeerGatewayIp"`
	PeeringSubnetMask    *string `json:"PeeringSubnetMask" xml:"PeeringSubnetMask"`
	Description          *string `json:"Description" xml:"Description"`
	Name                 *string `json:"Name" xml:"Name"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s ModifyVirtualBorderRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetRegionId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVbrId(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.VbrId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetVlanId(v int) *ModifyVirtualBorderRouterAttributeRequest {
	s.VlanId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetCircuitCode(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.CircuitCode = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetLocalGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeerGatewayIp(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetPeeringSubnetMask(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetDescription(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetName(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetOwnerId(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetResourceOwnerId(v int64) *ModifyVirtualBorderRouterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetClientToken(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetOwnerAccount(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyVirtualBorderRouterAttributeRequest) SetUserCidr(v string) *ModifyVirtualBorderRouterAttributeRequest {
	s.UserCidr = &v
	return s
}

type ModifyVirtualBorderRouterAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyVirtualBorderRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVirtualBorderRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVirtualBorderRouterAttributeResponse) SetRequestId(v string) *ModifyVirtualBorderRouterAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyPhysicalConnectionAttributeRequest struct {
	RegionId                      *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId          *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	LineOperator                  *string `json:"LineOperator" xml:"LineOperator"`
	Bandwidth                     *int    `json:"bandwidth" xml:"bandwidth"`
	PeerLocation                  *string `json:"PeerLocation" xml:"PeerLocation"`
	PortType                      *string `json:"PortType" xml:"PortType"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId" xml:"RedundantPhysicalConnectionId"`
	Description                   *string `json:"Description" xml:"Description"`
	Name                          *string `json:"Name" xml:"Name"`
	ClientToken                   *string `json:"ClientToken" xml:"ClientToken"`
	OwnerId                       *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                  *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr                      *string `json:"UserCidr" xml:"UserCidr"`
	CircuitCode                   *string `json:"CircuitCode" xml:"CircuitCode"`
}

func (s ModifyPhysicalConnectionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhysicalConnectionAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetRegionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPhysicalConnectionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetLineOperator(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.LineOperator = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetBandwidth(v int) *ModifyPhysicalConnectionAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPeerLocation(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PeerLocation = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetPortType(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.PortType = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetRedundantPhysicalConnectionId(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetDescription(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetName(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetClientToken(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetOwnerId(v int64) *ModifyPhysicalConnectionAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetResourceOwnerAccount(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetResourceOwnerId(v int64) *ModifyPhysicalConnectionAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetOwnerAccount(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetUserCidr(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.UserCidr = &v
	return s
}

func (s *ModifyPhysicalConnectionAttributeRequest) SetCircuitCode(v string) *ModifyPhysicalConnectionAttributeRequest {
	s.CircuitCode = &v
	return s
}

type ModifyPhysicalConnectionAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyPhysicalConnectionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhysicalConnectionAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyPhysicalConnectionAttributeResponse) SetRequestId(v string) *ModifyPhysicalConnectionAttributeResponse {
	s.RequestId = &v
	return s
}

type EnablePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s EnablePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionRequest) SetRegionId(v string) *EnablePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *EnablePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetOwnerId(v int64) *EnablePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *EnablePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetResourceOwnerId(v int64) *EnablePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetClientToken(v string) *EnablePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetOwnerAccount(v string) *EnablePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EnablePhysicalConnectionRequest) SetUserCidr(v string) *EnablePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type EnablePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s EnablePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s EnablePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *EnablePhysicalConnectionResponse) SetRequestId(v string) *EnablePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetOwnerId(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetResourceOwnerAccount(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetResourceOwnerId(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageNumber(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) SetPageSize(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
	s.PageSize = &v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponse struct {
	RequestId                                   *string                                                                                               `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber                                  *int                                                                                                  `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize                                    *int                                                                                                  `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount                                  *int                                                                                                  `json:"TotalCount" xml:"TotalCount" require:"true"`
	VirtualBorderRouterForPhysicalConnectionSet *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet `json:"VirtualBorderRouterForPhysicalConnectionSet" xml:"VirtualBorderRouterForPhysicalConnectionSet" require:"true" type:"Struct"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetRequestId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetPageNumber(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetPageSize(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetTotalCount(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponse) SetVirtualBorderRouterForPhysicalConnectionSet(v *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) *DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
	s.VirtualBorderRouterForPhysicalConnectionSet = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet struct {
	VirtualBorderRouterForPhysicalConnectionType []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType `json:"VirtualBorderRouterForPhysicalConnectionType" xml:"VirtualBorderRouterForPhysicalConnectionType" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet) SetVirtualBorderRouterForPhysicalConnectionType(v []*DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSet {
	s.VirtualBorderRouterForPhysicalConnectionType = v
	return s
}

type DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType struct {
	VbrId           *string `json:"VbrId" xml:"VbrId" require:"true"`
	VbrOwnerUid     *int64  `json:"VbrOwnerUid" xml:"VbrOwnerUid" require:"true"`
	CreationTime    *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	ActivationTime  *string `json:"ActivationTime" xml:"ActivationTime" require:"true"`
	TerminationTime *string `json:"TerminationTime" xml:"TerminationTime" require:"true"`
	RecoveryTime    *string `json:"RecoveryTime" xml:"RecoveryTime" require:"true"`
	VlanId          *int    `json:"VlanId" xml:"VlanId" require:"true"`
	CircuitCode     *string `json:"CircuitCode" xml:"CircuitCode" require:"true"`
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVbrId(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVbrOwnerUid(v int64) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VbrOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetCreationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetActivationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetTerminationTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetVlanId(v int) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.VlanId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType) SetCircuitCode(v string) *DescribeVirtualBorderRoutersForPhysicalConnectionResponseVirtualBorderRouterForPhysicalConnectionSetVirtualBorderRouterForPhysicalConnectionType {
	s.CircuitCode = &v
	return s
}

type DescribeVirtualBorderRoutersRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeVirtualBorderRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersRequest) SetOwnerId(v int64) *DescribeVirtualBorderRoutersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetResourceOwnerAccount(v string) *DescribeVirtualBorderRoutersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetResourceOwnerId(v int64) *DescribeVirtualBorderRoutersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetRegionId(v string) *DescribeVirtualBorderRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageNumber(v int) *DescribeVirtualBorderRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersRequest) SetPageSize(v int) *DescribeVirtualBorderRoutersRequest {
	s.PageSize = &v
	return s
}

type DescribeVirtualBorderRoutersResponse struct {
	RequestId              *string                                                     `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber             *int                                                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize               *int                                                        `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount             *int                                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	VirtualBorderRouterSet *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet `json:"VirtualBorderRouterSet" xml:"VirtualBorderRouterSet" require:"true" type:"Struct"`
}

func (s DescribeVirtualBorderRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponse) SetRequestId(v string) *DescribeVirtualBorderRoutersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetPageNumber(v int) *DescribeVirtualBorderRoutersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetPageSize(v int) *DescribeVirtualBorderRoutersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetTotalCount(v int) *DescribeVirtualBorderRoutersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponse) SetVirtualBorderRouterSet(v *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) *DescribeVirtualBorderRoutersResponse {
	s.VirtualBorderRouterSet = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet struct {
	VirtualBorderRouterType []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType `json:"VirtualBorderRouterType" xml:"VirtualBorderRouterType" require:"true" type:"Repeated"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet) SetVirtualBorderRouterType(v []*DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSet {
	s.VirtualBorderRouterType = v
	return s
}

type DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType struct {
	VbrId                            *string `json:"VbrId" xml:"VbrId" require:"true"`
	CreationTime                     *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	ActivationTime                   *string `json:"ActivationTime" xml:"ActivationTime" require:"true"`
	TerminationTime                  *string `json:"TerminationTime" xml:"TerminationTime" require:"true"`
	RecoveryTime                     *string `json:"RecoveryTime" xml:"RecoveryTime" require:"true"`
	Status                           *string `json:"Status" xml:"Status" require:"true"`
	VlanId                           *int    `json:"VlanId" xml:"VlanId" require:"true"`
	CircuitCode                      *string `json:"CircuitCode" xml:"CircuitCode" require:"true"`
	RouteTableId                     *string `json:"RouteTableId" xml:"RouteTableId" require:"true"`
	VlanInterfaceId                  *string `json:"VlanInterfaceId" xml:"VlanInterfaceId" require:"true"`
	LocalGatewayIp                   *string `json:"LocalGatewayIp" xml:"LocalGatewayIp" require:"true"`
	PeerGatewayIp                    *string `json:"PeerGatewayIp" xml:"PeerGatewayIp" require:"true"`
	PeeringSubnetMask                *string `json:"PeeringSubnetMask" xml:"PeeringSubnetMask" require:"true"`
	PhysicalConnectionId             *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	PhysicalConnectionStatus         *string `json:"PhysicalConnectionStatus" xml:"PhysicalConnectionStatus" require:"true"`
	PhysicalConnectionBusinessStatus *string `json:"PhysicalConnectionBusinessStatus" xml:"PhysicalConnectionBusinessStatus" require:"true"`
	PhysicalConnectionOwnerUid       *string `json:"PhysicalConnectionOwnerUid" xml:"PhysicalConnectionOwnerUid" require:"true"`
	AccessPointId                    *string `json:"AccessPointId" xml:"AccessPointId" require:"true"`
	Name                             *string `json:"Name" xml:"Name" require:"true"`
	Description                      *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) GoString() string {
	return s.String()
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVbrId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VbrId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetCreationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.CreationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetActivationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.ActivationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetTerminationTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.TerminationTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetRecoveryTime(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.RecoveryTime = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Status = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVlanId(v int) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VlanId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetCircuitCode(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.CircuitCode = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetRouteTableId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.RouteTableId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetVlanInterfaceId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.VlanInterfaceId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetLocalGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.LocalGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeerGatewayIp(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeerGatewayIp = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPeeringSubnetMask(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PeeringSubnetMask = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionBusinessStatus(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionBusinessStatus = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetPhysicalConnectionOwnerUid(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.PhysicalConnectionOwnerUid = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetAccessPointId(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetName(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Name = &v
	return s
}

func (s *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType) SetDescription(v string) *DescribeVirtualBorderRoutersResponseVirtualBorderRouterSetVirtualBorderRouterType {
	s.Description = &v
	return s
}

type DescribePhysicalConnectionsRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s DescribePhysicalConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsRequest) SetRegionId(v string) *DescribePhysicalConnectionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageNumber(v int) *DescribePhysicalConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetPageSize(v int) *DescribePhysicalConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetOwnerId(v int64) *DescribePhysicalConnectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetResourceOwnerAccount(v string) *DescribePhysicalConnectionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetResourceOwnerId(v int64) *DescribePhysicalConnectionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetClientToken(v string) *DescribePhysicalConnectionsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetOwnerAccount(v string) *DescribePhysicalConnectionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePhysicalConnectionsRequest) SetUserCidr(v string) *DescribePhysicalConnectionsRequest {
	s.UserCidr = &v
	return s
}

type DescribePhysicalConnectionsResponse struct {
	RequestId             *string                                                   `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber            *int                                                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize              *int                                                      `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount            *int                                                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PhysicalConnectionSet *DescribePhysicalConnectionsResponsePhysicalConnectionSet `json:"PhysicalConnectionSet" xml:"PhysicalConnectionSet" require:"true" type:"Struct"`
}

func (s DescribePhysicalConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponse) SetRequestId(v string) *DescribePhysicalConnectionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPageNumber(v int) *DescribePhysicalConnectionsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPageSize(v int) *DescribePhysicalConnectionsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetTotalCount(v int) *DescribePhysicalConnectionsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribePhysicalConnectionsResponse) SetPhysicalConnectionSet(v *DescribePhysicalConnectionsResponsePhysicalConnectionSet) *DescribePhysicalConnectionsResponse {
	s.PhysicalConnectionSet = v
	return s
}

type DescribePhysicalConnectionsResponsePhysicalConnectionSet struct {
	PhysicalConnectionType []*DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType `json:"PhysicalConnectionType" xml:"PhysicalConnectionType" require:"true" type:"Repeated"`
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSet) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSet) SetPhysicalConnectionType(v []*DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) *DescribePhysicalConnectionsResponsePhysicalConnectionSet {
	s.PhysicalConnectionType = v
	return s
}

type DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType struct {
	PhysicalConnectionId          *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	AccessPointId                 *string `json:"AccessPointId" xml:"AccessPointId" require:"true"`
	Type                          *string `json:"Type" xml:"Type" require:"true"`
	Status                        *string `json:"Status" xml:"Status" require:"true"`
	BusinessStatus                *string `json:"BusinessStatus" xml:"BusinessStatus" require:"true"`
	CreationTime                  *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	EnabledTime                   *string `json:"EnabledTime" xml:"EnabledTime" require:"true"`
	LineOperator                  *string `json:"LineOperator" xml:"LineOperator" require:"true"`
	Spec                          *string `json:"Spec" xml:"Spec" require:"true"`
	PeerLocation                  *string `json:"PeerLocation" xml:"PeerLocation" require:"true"`
	PortType                      *string `json:"PortType" xml:"PortType" require:"true"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId" xml:"RedundantPhysicalConnectionId" require:"true"`
	Name                          *string `json:"Name" xml:"Name" require:"true"`
	Description                   *string `json:"Description" xml:"Description" require:"true"`
	AdLocation                    *string `json:"AdLocation" xml:"AdLocation" require:"true"`
	PortNumber                    *string `json:"PortNumber" xml:"PortNumber" require:"true"`
	CircuitCode                   *string `json:"CircuitCode" xml:"CircuitCode" require:"true"`
	Bandwidth                     *int64  `json:"Bandwidth" xml:"Bandwidth" require:"true"`
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) String() string {
	return tea.Prettify(s)
}

func (s DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) GoString() string {
	return s.String()
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetAccessPointId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.AccessPointId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Type = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetStatus(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Status = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetBusinessStatus(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.BusinessStatus = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetCreationTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.CreationTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetEnabledTime(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.EnabledTime = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetLineOperator(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.LineOperator = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetSpec(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Spec = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPeerLocation(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PeerLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPortType(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PortType = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetRedundantPhysicalConnectionId(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetName(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Name = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetDescription(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Description = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetAdLocation(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.AdLocation = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetPortNumber(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.PortNumber = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetCircuitCode(v string) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.CircuitCode = &v
	return s
}

func (s *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType) SetBandwidth(v int64) *DescribePhysicalConnectionsResponsePhysicalConnectionSetPhysicalConnectionType {
	s.Bandwidth = &v
	return s
}

type DescribeAccessPointsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Type                 *string `json:"Type" xml:"Type"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeAccessPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsRequest) SetOwnerId(v int64) *DescribeAccessPointsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetResourceOwnerAccount(v string) *DescribeAccessPointsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetResourceOwnerId(v int64) *DescribeAccessPointsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetRegionId(v string) *DescribeAccessPointsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetType(v string) *DescribeAccessPointsRequest {
	s.Type = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageNumber(v int) *DescribeAccessPointsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessPointsRequest) SetPageSize(v int) *DescribeAccessPointsRequest {
	s.PageSize = &v
	return s
}

type DescribeAccessPointsResponse struct {
	RequestId      *string                                     `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber     *int                                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize       *int                                        `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount     *int                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	AccessPointSet *DescribeAccessPointsResponseAccessPointSet `json:"AccessPointSet" xml:"AccessPointSet" require:"true" type:"Struct"`
}

func (s DescribeAccessPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponse) SetRequestId(v string) *DescribeAccessPointsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetPageNumber(v int) *DescribeAccessPointsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetPageSize(v int) *DescribeAccessPointsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetTotalCount(v int) *DescribeAccessPointsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeAccessPointsResponse) SetAccessPointSet(v *DescribeAccessPointsResponseAccessPointSet) *DescribeAccessPointsResponse {
	s.AccessPointSet = v
	return s
}

type DescribeAccessPointsResponseAccessPointSet struct {
	AccessPointType []*DescribeAccessPointsResponseAccessPointSetAccessPointType `json:"AccessPointType" xml:"AccessPointType" require:"true" type:"Repeated"`
}

func (s DescribeAccessPointsResponseAccessPointSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSet) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSet) SetAccessPointType(v []*DescribeAccessPointsResponseAccessPointSetAccessPointType) *DescribeAccessPointsResponseAccessPointSet {
	s.AccessPointType = v
	return s
}

type DescribeAccessPointsResponseAccessPointSetAccessPointType struct {
	AccessPointId    *string `json:"AccessPointId" xml:"AccessPointId" require:"true"`
	Status           *string `json:"Status" xml:"Status" require:"true"`
	Type             *string `json:"Type" xml:"Type" require:"true"`
	AttachedRegionNo *string `json:"AttachedRegionNo" xml:"AttachedRegionNo" require:"true"`
	Location         *string `json:"Location" xml:"Location" require:"true"`
	HostOperator     *string `json:"HostOperator" xml:"HostOperator" require:"true"`
	Name             *string `json:"Name" xml:"Name" require:"true"`
	Description      *string `json:"Description" xml:"Description" require:"true"`
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointType) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessPointsResponseAccessPointSetAccessPointType) GoString() string {
	return s.String()
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetAccessPointId(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetStatus(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Status = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetType(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Type = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetAttachedRegionNo(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.AttachedRegionNo = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetLocation(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Location = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetHostOperator(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.HostOperator = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetName(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Name = &v
	return s
}

func (s *DescribeAccessPointsResponseAccessPointSetAccessPointType) SetDescription(v string) *DescribeAccessPointsResponseAccessPointSetAccessPointType {
	s.Description = &v
	return s
}

type DeleteVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VbrId                *string `json:"VbrId" xml:"VbrId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s DeleteVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterRequest) SetRegionId(v string) *DeleteVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetVbrId(v string) *DeleteVirtualBorderRouterRequest {
	s.VbrId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetOwnerId(v int64) *DeleteVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *DeleteVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *DeleteVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetClientToken(v string) *DeleteVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetOwnerAccount(v string) *DeleteVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteVirtualBorderRouterRequest) SetUserCidr(v string) *DeleteVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type DeleteVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *DeleteVirtualBorderRouterResponse) SetRequestId(v string) *DeleteVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

type DeletePhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeletePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionRequest) SetRegionId(v string) *DeletePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetPhysicalConnectionId(v string) *DeletePhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetOwnerId(v int64) *DeletePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *DeletePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetResourceOwnerId(v int64) *DeletePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetClientToken(v string) *DeletePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *DeletePhysicalConnectionRequest) SetOwnerAccount(v string) *DeletePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

type DeletePhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeletePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeletePhysicalConnectionResponse) SetRequestId(v string) *DeletePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type CreateVirtualBorderRouterRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	VbrOwnerId           *int64  `json:"VbrOwnerId" xml:"VbrOwnerId"`
	VlanId               *int    `json:"VlanId" xml:"VlanId" require:"true"`
	CircuitCode          *string `json:"CircuitCode" xml:"CircuitCode"`
	LocalGatewayIp       *string `json:"LocalGatewayIp" xml:"LocalGatewayIp"`
	PeerGatewayIp        *string `json:"PeerGatewayIp" xml:"PeerGatewayIp"`
	PeeringSubnetMask    *string `json:"PeeringSubnetMask" xml:"PeeringSubnetMask"`
	Description          *string `json:"Description" xml:"Description"`
	Name                 *string `json:"Name" xml:"Name"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s CreateVirtualBorderRouterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterRequest) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterRequest) SetRegionId(v string) *CreateVirtualBorderRouterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPhysicalConnectionId(v string) *CreateVirtualBorderRouterRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVbrOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.VbrOwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetVlanId(v int) *CreateVirtualBorderRouterRequest {
	s.VlanId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetCircuitCode(v string) *CreateVirtualBorderRouterRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetLocalGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.LocalGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeerGatewayIp(v string) *CreateVirtualBorderRouterRequest {
	s.PeerGatewayIp = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetPeeringSubnetMask(v string) *CreateVirtualBorderRouterRequest {
	s.PeeringSubnetMask = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetDescription(v string) *CreateVirtualBorderRouterRequest {
	s.Description = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetName(v string) *CreateVirtualBorderRouterRequest {
	s.Name = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetClientToken(v string) *CreateVirtualBorderRouterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetResourceOwnerAccount(v string) *CreateVirtualBorderRouterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetResourceOwnerId(v int64) *CreateVirtualBorderRouterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetOwnerAccount(v string) *CreateVirtualBorderRouterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateVirtualBorderRouterRequest) SetUserCidr(v string) *CreateVirtualBorderRouterRequest {
	s.UserCidr = &v
	return s
}

type CreateVirtualBorderRouterResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	VbrId     *string `json:"VbrId" xml:"VbrId" require:"true"`
}

func (s CreateVirtualBorderRouterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVirtualBorderRouterResponse) GoString() string {
	return s.String()
}

func (s *CreateVirtualBorderRouterResponse) SetRequestId(v string) *CreateVirtualBorderRouterResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVirtualBorderRouterResponse) SetVbrId(v string) *CreateVirtualBorderRouterResponse {
	s.VbrId = &v
	return s
}

type CreatePhysicalConnectionRequest struct {
	RegionId                      *string `json:"RegionId" xml:"RegionId" require:"true"`
	AccessPointId                 *string `json:"AccessPointId" xml:"AccessPointId" require:"true"`
	Type                          *string `json:"Type" xml:"Type"`
	LineOperator                  *string `json:"LineOperator" xml:"LineOperator" require:"true"`
	Bandwidth                     *int    `json:"bandwidth" xml:"bandwidth"`
	PeerLocation                  *string `json:"PeerLocation" xml:"PeerLocation" require:"true"`
	PortType                      *string `json:"PortType" xml:"PortType"`
	RedundantPhysicalConnectionId *string `json:"RedundantPhysicalConnectionId" xml:"RedundantPhysicalConnectionId"`
	Description                   *string `json:"Description" xml:"Description"`
	Name                          *string `json:"Name" xml:"Name"`
	CircuitCode                   *string `json:"CircuitCode" xml:"CircuitCode"`
	ClientToken                   *string `json:"ClientToken" xml:"ClientToken"`
	OwnerId                       *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount                  *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr                      *string `json:"UserCidr" xml:"UserCidr"`
}

func (s CreatePhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionRequest) SetRegionId(v string) *CreatePhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetAccessPointId(v string) *CreatePhysicalConnectionRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetType(v string) *CreatePhysicalConnectionRequest {
	s.Type = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetLineOperator(v string) *CreatePhysicalConnectionRequest {
	s.LineOperator = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetBandwidth(v int) *CreatePhysicalConnectionRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPeerLocation(v string) *CreatePhysicalConnectionRequest {
	s.PeerLocation = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetPortType(v string) *CreatePhysicalConnectionRequest {
	s.PortType = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetRedundantPhysicalConnectionId(v string) *CreatePhysicalConnectionRequest {
	s.RedundantPhysicalConnectionId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetDescription(v string) *CreatePhysicalConnectionRequest {
	s.Description = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetName(v string) *CreatePhysicalConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetCircuitCode(v string) *CreatePhysicalConnectionRequest {
	s.CircuitCode = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetClientToken(v string) *CreatePhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetOwnerId(v int64) *CreatePhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetResourceOwnerAccount(v string) *CreatePhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetResourceOwnerId(v int64) *CreatePhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetOwnerAccount(v string) *CreatePhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreatePhysicalConnectionRequest) SetUserCidr(v string) *CreatePhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type CreatePhysicalConnectionResponse struct {
	RequestId            *string `json:"RequestId" xml:"RequestId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
}

func (s CreatePhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreatePhysicalConnectionResponse) SetRequestId(v string) *CreatePhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

func (s *CreatePhysicalConnectionResponse) SetPhysicalConnectionId(v string) *CreatePhysicalConnectionResponse {
	s.PhysicalConnectionId = &v
	return s
}

type CancelPhysicalConnectionRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PhysicalConnectionId *string `json:"PhysicalConnectionId" xml:"PhysicalConnectionId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s CancelPhysicalConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionRequest) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionRequest) SetRegionId(v string) *CancelPhysicalConnectionRequest {
	s.RegionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetPhysicalConnectionId(v string) *CancelPhysicalConnectionRequest {
	s.PhysicalConnectionId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetOwnerId(v int64) *CancelPhysicalConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetResourceOwnerAccount(v string) *CancelPhysicalConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetResourceOwnerId(v int64) *CancelPhysicalConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetClientToken(v string) *CancelPhysicalConnectionRequest {
	s.ClientToken = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetOwnerAccount(v string) *CancelPhysicalConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelPhysicalConnectionRequest) SetUserCidr(v string) *CancelPhysicalConnectionRequest {
	s.UserCidr = &v
	return s
}

type CancelPhysicalConnectionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CancelPhysicalConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelPhysicalConnectionResponse) GoString() string {
	return s.String()
}

func (s *CancelPhysicalConnectionResponse) SetRequestId(v string) *CancelPhysicalConnectionResponse {
	s.RequestId = &v
	return s
}

type ImportImageRequest struct {
	DiskDeviceMapping    []*ImportImageRequestDiskDeviceMapping `json:"DiskDeviceMapping" xml:"DiskDeviceMapping" type:"Repeated"`
	OwnerId              *int64                                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                                `json:"RegionId" xml:"RegionId" require:"true"`
	ImageName            *string                                `json:"ImageName" xml:"ImageName"`
	Description          *string                                `json:"Description" xml:"Description"`
	Architecture         *string                                `json:"Architecture" xml:"Architecture"`
	OSType               *string                                `json:"OSType" xml:"OSType"`
	Platform             *string                                `json:"Platform" xml:"Platform"`
	RoleName             *string                                `json:"RoleName" xml:"RoleName"`
	LicenseType          *string                                `json:"LicenseType" xml:"LicenseType"`
	Tag                  []*ImportImageRequestTag               `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                                `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s ImportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequest) GoString() string {
	return s.String()
}

func (s *ImportImageRequest) SetDiskDeviceMapping(v []*ImportImageRequestDiskDeviceMapping) *ImportImageRequest {
	s.DiskDeviceMapping = v
	return s
}

func (s *ImportImageRequest) SetOwnerId(v int64) *ImportImageRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportImageRequest) SetResourceOwnerAccount(v string) *ImportImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportImageRequest) SetResourceOwnerId(v int64) *ImportImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportImageRequest) SetRegionId(v string) *ImportImageRequest {
	s.RegionId = &v
	return s
}

func (s *ImportImageRequest) SetImageName(v string) *ImportImageRequest {
	s.ImageName = &v
	return s
}

func (s *ImportImageRequest) SetDescription(v string) *ImportImageRequest {
	s.Description = &v
	return s
}

func (s *ImportImageRequest) SetArchitecture(v string) *ImportImageRequest {
	s.Architecture = &v
	return s
}

func (s *ImportImageRequest) SetOSType(v string) *ImportImageRequest {
	s.OSType = &v
	return s
}

func (s *ImportImageRequest) SetPlatform(v string) *ImportImageRequest {
	s.Platform = &v
	return s
}

func (s *ImportImageRequest) SetRoleName(v string) *ImportImageRequest {
	s.RoleName = &v
	return s
}

func (s *ImportImageRequest) SetLicenseType(v string) *ImportImageRequest {
	s.LicenseType = &v
	return s
}

func (s *ImportImageRequest) SetTag(v []*ImportImageRequestTag) *ImportImageRequest {
	s.Tag = v
	return s
}

func (s *ImportImageRequest) SetResourceGroupId(v string) *ImportImageRequest {
	s.ResourceGroupId = &v
	return s
}

type ImportImageRequestDiskDeviceMapping struct {
	Format        *string `json:"Format" xml:"Format"`
	OSSBucket     *string `json:"OSSBucket" xml:"OSSBucket"`
	OSSObject     *string `json:"OSSObject" xml:"OSSObject"`
	DiskImSize    *int    `json:"DiskImSize" xml:"DiskImSize"`
	DiskImageSize *int    `json:"DiskImageSize" xml:"DiskImageSize"`
	Device        *string `json:"Device" xml:"Device"`
}

func (s ImportImageRequestDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequestDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *ImportImageRequestDiskDeviceMapping) SetFormat(v string) *ImportImageRequestDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSBucket(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSBucket = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSObject(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSObject = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetDiskImSize(v int) *ImportImageRequestDiskDeviceMapping {
	s.DiskImSize = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetDiskImageSize(v int) *ImportImageRequestDiskDeviceMapping {
	s.DiskImageSize = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetDevice(v string) *ImportImageRequestDiskDeviceMapping {
	s.Device = &v
	return s
}

type ImportImageRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s ImportImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequestTag) GoString() string {
	return s.String()
}

func (s *ImportImageRequestTag) SetKey(v string) *ImportImageRequestTag {
	s.Key = &v
	return s
}

func (s *ImportImageRequestTag) SetValue(v string) *ImportImageRequestTag {
	s.Value = &v
	return s
}

type ImportImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId    *string `json:"TaskId" xml:"TaskId" require:"true"`
	RegionId  *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId   *string `json:"ImageId" xml:"ImageId" require:"true"`
}

func (s ImportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportImageResponse) GoString() string {
	return s.String()
}

func (s *ImportImageResponse) SetRequestId(v string) *ImportImageResponse {
	s.RequestId = &v
	return s
}

func (s *ImportImageResponse) SetTaskId(v string) *ImportImageResponse {
	s.TaskId = &v
	return s
}

func (s *ImportImageResponse) SetRegionId(v string) *ImportImageResponse {
	s.RegionId = &v
	return s
}

func (s *ImportImageResponse) SetImageId(v string) *ImportImageResponse {
	s.ImageId = &v
	return s
}

type ExportImageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId" require:"true"`
	OSSBucket            *string `json:"OSSBucket" xml:"OSSBucket" require:"true"`
	OSSPrefix            *string `json:"OSSPrefix" xml:"OSSPrefix"`
	ImageFormat          *string `json:"ImageFormat" xml:"ImageFormat"`
	RoleName             *string `json:"RoleName" xml:"RoleName"`
}

func (s ExportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportImageRequest) GoString() string {
	return s.String()
}

func (s *ExportImageRequest) SetOwnerId(v int64) *ExportImageRequest {
	s.OwnerId = &v
	return s
}

func (s *ExportImageRequest) SetResourceOwnerAccount(v string) *ExportImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ExportImageRequest) SetResourceOwnerId(v int64) *ExportImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ExportImageRequest) SetRegionId(v string) *ExportImageRequest {
	s.RegionId = &v
	return s
}

func (s *ExportImageRequest) SetImageId(v string) *ExportImageRequest {
	s.ImageId = &v
	return s
}

func (s *ExportImageRequest) SetOSSBucket(v string) *ExportImageRequest {
	s.OSSBucket = &v
	return s
}

func (s *ExportImageRequest) SetOSSPrefix(v string) *ExportImageRequest {
	s.OSSPrefix = &v
	return s
}

func (s *ExportImageRequest) SetImageFormat(v string) *ExportImageRequest {
	s.ImageFormat = &v
	return s
}

func (s *ExportImageRequest) SetRoleName(v string) *ExportImageRequest {
	s.RoleName = &v
	return s
}

type ExportImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId    *string `json:"TaskId" xml:"TaskId" require:"true"`
	RegionId  *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s ExportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponse) GoString() string {
	return s.String()
}

func (s *ExportImageResponse) SetRequestId(v string) *ExportImageResponse {
	s.RequestId = &v
	return s
}

func (s *ExportImageResponse) SetTaskId(v string) *ExportImageResponse {
	s.TaskId = &v
	return s
}

func (s *ExportImageResponse) SetRegionId(v string) *ExportImageResponse {
	s.RegionId = &v
	return s
}

type DescribeTasksRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	TaskIds              *string `json:"TaskIds" xml:"TaskIds"`
	TaskAction           *string `json:"TaskAction" xml:"TaskAction"`
	TaskStatus           *string `json:"TaskStatus" xml:"TaskStatus"`
	StartTime            *string `json:"StartTime" xml:"StartTime"`
	EndTime              *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeTasksRequest) SetOwnerId(v int64) *DescribeTasksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerAccount(v string) *DescribeTasksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerId(v int64) *DescribeTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetPageNumber(v int) *DescribeTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksRequest) SetPageSize(v int) *DescribeTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksRequest) SetOwnerAccount(v string) *DescribeTasksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTasksRequest) SetRegionId(v string) *DescribeTasksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskIds(v string) *DescribeTasksRequest {
	s.TaskIds = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskAction(v string) *DescribeTasksRequest {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskStatus(v string) *DescribeTasksRequest {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTasksRequest) SetStartTime(v string) *DescribeTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTasksRequest) SetEndTime(v string) *DescribeTasksRequest {
	s.EndTime = &v
	return s
}

type DescribeTasksResponse struct {
	RequestId  *string                       `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId   *string                       `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount *int                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                          `json:"PageSize" xml:"PageSize" require:"true"`
	TaskSet    *DescribeTasksResponseTaskSet `json:"TaskSet" xml:"TaskSet" require:"true" type:"Struct"`
}

func (s DescribeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponse) SetRequestId(v string) *DescribeTasksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeTasksResponse) SetRegionId(v string) *DescribeTasksResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeTasksResponse) SetTotalCount(v int) *DescribeTasksResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeTasksResponse) SetPageNumber(v int) *DescribeTasksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksResponse) SetPageSize(v int) *DescribeTasksResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksResponse) SetTaskSet(v *DescribeTasksResponseTaskSet) *DescribeTasksResponse {
	s.TaskSet = v
	return s
}

type DescribeTasksResponseTaskSet struct {
	Task []*DescribeTasksResponseTaskSetTask `json:"Task" xml:"Task" require:"true" type:"Repeated"`
}

func (s DescribeTasksResponseTaskSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseTaskSet) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseTaskSet) SetTask(v []*DescribeTasksResponseTaskSetTask) *DescribeTasksResponseTaskSet {
	s.Task = v
	return s
}

type DescribeTasksResponseTaskSetTask struct {
	TaskId        *string `json:"TaskId" xml:"TaskId" require:"true"`
	TaskAction    *string `json:"TaskAction" xml:"TaskAction" require:"true"`
	TaskStatus    *string `json:"TaskStatus" xml:"TaskStatus" require:"true"`
	SupportCancel *string `json:"SupportCancel" xml:"SupportCancel" require:"true"`
	CreationTime  *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	FinishedTime  *string `json:"FinishedTime" xml:"FinishedTime" require:"true"`
}

func (s DescribeTasksResponseTaskSetTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseTaskSetTask) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseTaskSetTask) SetTaskId(v string) *DescribeTasksResponseTaskSetTask {
	s.TaskId = &v
	return s
}

func (s *DescribeTasksResponseTaskSetTask) SetTaskAction(v string) *DescribeTasksResponseTaskSetTask {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksResponseTaskSetTask) SetTaskStatus(v string) *DescribeTasksResponseTaskSetTask {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTasksResponseTaskSetTask) SetSupportCancel(v string) *DescribeTasksResponseTaskSetTask {
	s.SupportCancel = &v
	return s
}

func (s *DescribeTasksResponseTaskSetTask) SetCreationTime(v string) *DescribeTasksResponseTaskSetTask {
	s.CreationTime = &v
	return s
}

func (s *DescribeTasksResponseTaskSetTask) SetFinishedTime(v string) *DescribeTasksResponseTaskSetTask {
	s.FinishedTime = &v
	return s
}

type DescribeTaskAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	TaskId               *string `json:"TaskId" xml:"TaskId" require:"true"`
}

func (s DescribeTaskAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeRequest) SetOwnerId(v int64) *DescribeTaskAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetResourceOwnerAccount(v string) *DescribeTaskAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetResourceOwnerId(v int64) *DescribeTaskAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetRegionId(v string) *DescribeTaskAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTaskAttributeRequest) SetTaskId(v string) *DescribeTaskAttributeRequest {
	s.TaskId = &v
	return s
}

type DescribeTaskAttributeResponse struct {
	RequestId            *string                                            `json:"RequestId" xml:"RequestId" require:"true"`
	TaskId               *string                                            `json:"TaskId" xml:"TaskId" require:"true"`
	RegionId             *string                                            `json:"RegionId" xml:"RegionId" require:"true"`
	TaskAction           *string                                            `json:"TaskAction" xml:"TaskAction" require:"true"`
	TaskStatus           *string                                            `json:"TaskStatus" xml:"TaskStatus" require:"true"`
	TaskProcess          *string                                            `json:"TaskProcess" xml:"TaskProcess" require:"true"`
	SupportCancel        *string                                            `json:"SupportCancel" xml:"SupportCancel" require:"true"`
	TotalCount           *int                                               `json:"TotalCount" xml:"TotalCount" require:"true"`
	SuccessCount         *int                                               `json:"SuccessCount" xml:"SuccessCount" require:"true"`
	FailedCount          *int                                               `json:"FailedCount" xml:"FailedCount" require:"true"`
	CreationTime         *string                                            `json:"CreationTime" xml:"CreationTime" require:"true"`
	FinishedTime         *string                                            `json:"FinishedTime" xml:"FinishedTime" require:"true"`
	OperationProgressSet *DescribeTaskAttributeResponseOperationProgressSet `json:"OperationProgressSet" xml:"OperationProgressSet" require:"true" type:"Struct"`
}

func (s DescribeTaskAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponse) SetRequestId(v string) *DescribeTaskAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetTaskId(v string) *DescribeTaskAttributeResponse {
	s.TaskId = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetRegionId(v string) *DescribeTaskAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetTaskAction(v string) *DescribeTaskAttributeResponse {
	s.TaskAction = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetTaskStatus(v string) *DescribeTaskAttributeResponse {
	s.TaskStatus = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetTaskProcess(v string) *DescribeTaskAttributeResponse {
	s.TaskProcess = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetSupportCancel(v string) *DescribeTaskAttributeResponse {
	s.SupportCancel = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetTotalCount(v int) *DescribeTaskAttributeResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetSuccessCount(v int) *DescribeTaskAttributeResponse {
	s.SuccessCount = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetFailedCount(v int) *DescribeTaskAttributeResponse {
	s.FailedCount = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetCreationTime(v string) *DescribeTaskAttributeResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetFinishedTime(v string) *DescribeTaskAttributeResponse {
	s.FinishedTime = &v
	return s
}

func (s *DescribeTaskAttributeResponse) SetOperationProgressSet(v *DescribeTaskAttributeResponseOperationProgressSet) *DescribeTaskAttributeResponse {
	s.OperationProgressSet = v
	return s
}

type DescribeTaskAttributeResponseOperationProgressSet struct {
	OperationProgress []*DescribeTaskAttributeResponseOperationProgressSetOperationProgress `json:"OperationProgress" xml:"OperationProgress" require:"true" type:"Repeated"`
}

func (s DescribeTaskAttributeResponseOperationProgressSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseOperationProgressSet) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseOperationProgressSet) SetOperationProgress(v []*DescribeTaskAttributeResponseOperationProgressSetOperationProgress) *DescribeTaskAttributeResponseOperationProgressSet {
	s.OperationProgress = v
	return s
}

type DescribeTaskAttributeResponseOperationProgressSetOperationProgress struct {
	OperationStatus *string                                                                           `json:"OperationStatus" xml:"OperationStatus" require:"true"`
	ErrorCode       *string                                                                           `json:"ErrorCode" xml:"ErrorCode" require:"true"`
	ErrorMsg        *string                                                                           `json:"ErrorMsg" xml:"ErrorMsg" require:"true"`
	RelatedItemSet  *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet `json:"RelatedItemSet" xml:"RelatedItemSet" require:"true" type:"Struct"`
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgress) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgress) SetOperationStatus(v string) *DescribeTaskAttributeResponseOperationProgressSetOperationProgress {
	s.OperationStatus = &v
	return s
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgress) SetErrorCode(v string) *DescribeTaskAttributeResponseOperationProgressSetOperationProgress {
	s.ErrorCode = &v
	return s
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgress) SetErrorMsg(v string) *DescribeTaskAttributeResponseOperationProgressSetOperationProgress {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgress) SetRelatedItemSet(v *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet) *DescribeTaskAttributeResponseOperationProgressSetOperationProgress {
	s.RelatedItemSet = v
	return s
}

type DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet struct {
	RelatedItem []*DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem `json:"RelatedItem" xml:"RelatedItem" require:"true" type:"Repeated"`
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet) SetRelatedItem(v []*DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem) *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSet {
	s.RelatedItem = v
	return s
}

type DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem struct {
	Name  *string `json:"Name" xml:"Name" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem) GoString() string {
	return s.String()
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem) SetName(v string) *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem {
	s.Name = &v
	return s
}

func (s *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem) SetValue(v string) *DescribeTaskAttributeResponseOperationProgressSetOperationProgressRelatedItemSetRelatedItem {
	s.Value = &v
	return s
}

type CancelTaskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	TaskId               *string `json:"TaskId" xml:"TaskId" require:"true"`
}

func (s CancelTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelTaskRequest) GoString() string {
	return s.String()
}

func (s *CancelTaskRequest) SetOwnerId(v int64) *CancelTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelTaskRequest) SetResourceOwnerAccount(v string) *CancelTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelTaskRequest) SetResourceOwnerId(v int64) *CancelTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelTaskRequest) SetRegionId(v string) *CancelTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CancelTaskRequest) SetTaskId(v string) *CancelTaskRequest {
	s.TaskId = &v
	return s
}

type CancelTaskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CancelTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelTaskResponse) GoString() string {
	return s.String()
}

func (s *CancelTaskResponse) SetRequestId(v string) *CancelTaskResponse {
	s.RequestId = &v
	return s
}

type DescribeInstanceTypeFamiliesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Generation           *string `json:"Generation" xml:"Generation"`
}

func (s DescribeInstanceTypeFamiliesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesRequest) SetOwnerId(v int64) *DescribeInstanceTypeFamiliesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTypeFamiliesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetResourceOwnerId(v int64) *DescribeInstanceTypeFamiliesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetOwnerAccount(v string) *DescribeInstanceTypeFamiliesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetRegionId(v string) *DescribeInstanceTypeFamiliesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesRequest) SetGeneration(v string) *DescribeInstanceTypeFamiliesRequest {
	s.Generation = &v
	return s
}

type DescribeInstanceTypeFamiliesResponse struct {
	RequestId            *string                                                   `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceTypeFamilies *DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies `json:"InstanceTypeFamilies" xml:"InstanceTypeFamilies" require:"true" type:"Struct"`
}

func (s DescribeInstanceTypeFamiliesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponse) SetRequestId(v string) *DescribeInstanceTypeFamiliesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesResponse) SetInstanceTypeFamilies(v *DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies) *DescribeInstanceTypeFamiliesResponse {
	s.InstanceTypeFamilies = v
	return s
}

type DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies struct {
	InstanceTypeFamily []*DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true" type:"Repeated"`
}

func (s DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies) SetInstanceTypeFamily(v []*DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily) *DescribeInstanceTypeFamiliesResponseInstanceTypeFamilies {
	s.InstanceTypeFamily = v
	return s
}

type DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily struct {
	InstanceTypeFamilyId *string `json:"InstanceTypeFamilyId" xml:"InstanceTypeFamilyId" require:"true"`
	Generation           *string `json:"Generation" xml:"Generation" require:"true"`
}

func (s DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily) SetInstanceTypeFamilyId(v string) *DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily {
	s.InstanceTypeFamilyId = &v
	return s
}

func (s *DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily) SetGeneration(v string) *DescribeInstanceTypeFamiliesResponseInstanceTypeFamiliesInstanceTypeFamily {
	s.Generation = &v
	return s
}

type ModifyRouterInterfaceSpecRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId    *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
	Spec                 *string `json:"Spec" xml:"Spec" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s ModifyRouterInterfaceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecRequest) SetRegionId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceSpecRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetSpec(v string) *ModifyRouterInterfaceSpecRequest {
	s.Spec = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetOwnerId(v int64) *ModifyRouterInterfaceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetResourceOwnerAccount(v string) *ModifyRouterInterfaceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetResourceOwnerId(v int64) *ModifyRouterInterfaceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetClientToken(v string) *ModifyRouterInterfaceSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetOwnerAccount(v string) *ModifyRouterInterfaceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceSpecRequest) SetUserCidr(v string) *ModifyRouterInterfaceSpecRequest {
	s.UserCidr = &v
	return s
}

type ModifyRouterInterfaceSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	Spec      *string `json:"Spec" xml:"Spec" require:"true"`
}

func (s ModifyRouterInterfaceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceSpecResponse) SetRequestId(v string) *ModifyRouterInterfaceSpecResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyRouterInterfaceSpecResponse) SetSpec(v string) *ModifyRouterInterfaceSpecResponse {
	s.Spec = &v
	return s
}

type ModifyRouterInterfaceAttributeRequest struct {
	OwnerId                  *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                 *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId        *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
	Name                     *string `json:"Name" xml:"Name"`
	Description              *string `json:"Description" xml:"Description"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId" xml:"OppositeInterfaceId"`
	OppositeRouterId         *string `json:"OppositeRouterId" xml:"OppositeRouterId"`
	OppositeRouterType       *string `json:"OppositeRouterType" xml:"OppositeRouterType"`
	OppositeInterfaceOwnerId *int64  `json:"OppositeInterfaceOwnerId" xml:"OppositeInterfaceOwnerId"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp" xml:"HealthCheckSourceIp"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp" xml:"HealthCheckTargetIp"`
}

func (s ModifyRouterInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyRouterInterfaceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetResourceOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRegionId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetRouterInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetName(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetDescription(v string) *ModifyRouterInterfaceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterId(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeRouterType(v string) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetOppositeInterfaceOwnerId(v int64) *ModifyRouterInterfaceAttributeRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckSourceIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *ModifyRouterInterfaceAttributeRequest) SetHealthCheckTargetIp(v string) *ModifyRouterInterfaceAttributeRequest {
	s.HealthCheckTargetIp = &v
	return s
}

type ModifyRouterInterfaceAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyRouterInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouterInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouterInterfaceAttributeResponse) SetRequestId(v string) *ModifyRouterInterfaceAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeRouterInterfacesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeRouterInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesRequest) SetOwnerId(v int64) *DescribeRouterInterfacesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetResourceOwnerAccount(v string) *DescribeRouterInterfacesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetResourceOwnerId(v int64) *DescribeRouterInterfacesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetRegionId(v string) *DescribeRouterInterfacesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageNumber(v int) *DescribeRouterInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesRequest) SetPageSize(v int) *DescribeRouterInterfacesRequest {
	s.PageSize = &v
	return s
}

type DescribeRouterInterfacesResponse struct {
	RequestId          *string                                             `json:"RequestId" xml:"RequestId" require:"true"`
	PageNumber         *int                                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize           *int                                                `json:"PageSize" xml:"PageSize" require:"true"`
	TotalCount         *int                                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	RouterInterfaceSet *DescribeRouterInterfacesResponseRouterInterfaceSet `json:"RouterInterfaceSet" xml:"RouterInterfaceSet" require:"true" type:"Struct"`
}

func (s DescribeRouterInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponse) SetRequestId(v string) *DescribeRouterInterfacesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetPageNumber(v int) *DescribeRouterInterfacesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetPageSize(v int) *DescribeRouterInterfacesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetTotalCount(v int) *DescribeRouterInterfacesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouterInterfacesResponse) SetRouterInterfaceSet(v *DescribeRouterInterfacesResponseRouterInterfaceSet) *DescribeRouterInterfacesResponse {
	s.RouterInterfaceSet = v
	return s
}

type DescribeRouterInterfacesResponseRouterInterfaceSet struct {
	RouterInterfaceType []*DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType `json:"RouterInterfaceType" xml:"RouterInterfaceType" require:"true" type:"Repeated"`
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSet) SetRouterInterfaceType(v []*DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) *DescribeRouterInterfacesResponseRouterInterfaceSet {
	s.RouterInterfaceType = v
	return s
}

type DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType struct {
	RouterInterfaceId               *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
	OppositeRegionId                *string `json:"OppositeRegionId" xml:"OppositeRegionId" require:"true"`
	Role                            *string `json:"Role" xml:"Role" require:"true"`
	Spec                            *string `json:"Spec" xml:"Spec" require:"true"`
	Name                            *string `json:"Name" xml:"Name" require:"true"`
	Description                     *string `json:"Description" xml:"Description" require:"true"`
	RouterId                        *string `json:"RouterId" xml:"RouterId" require:"true"`
	RouterType                      *string `json:"RouterType" xml:"RouterType" require:"true"`
	CreationTime                    *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	EndTime                         *string `json:"EndTime" xml:"EndTime" require:"true"`
	ChargeType                      *string `json:"ChargeType" xml:"ChargeType" require:"true"`
	Status                          *string `json:"Status" xml:"Status" require:"true"`
	BusinessStatus                  *string `json:"BusinessStatus" xml:"BusinessStatus" require:"true"`
	ConnectedTime                   *string `json:"ConnectedTime" xml:"ConnectedTime" require:"true"`
	OppositeInterfaceId             *string `json:"OppositeInterfaceId" xml:"OppositeInterfaceId" require:"true"`
	OppositeInterfaceSpec           *string `json:"OppositeInterfaceSpec" xml:"OppositeInterfaceSpec" require:"true"`
	OppositeInterfaceStatus         *string `json:"OppositeInterfaceStatus" xml:"OppositeInterfaceStatus" require:"true"`
	OppositeInterfaceBusinessStatus *string `json:"OppositeInterfaceBusinessStatus" xml:"OppositeInterfaceBusinessStatus" require:"true"`
	OppositeRouterId                *string `json:"OppositeRouterId" xml:"OppositeRouterId" require:"true"`
	OppositeRouterType              *string `json:"OppositeRouterType" xml:"OppositeRouterType" require:"true"`
	OppositeInterfaceOwnerId        *string `json:"OppositeInterfaceOwnerId" xml:"OppositeInterfaceOwnerId" require:"true"`
	AccessPointId                   *string `json:"AccessPointId" xml:"AccessPointId" require:"true"`
	OppositeAccessPointId           *string `json:"OppositeAccessPointId" xml:"OppositeAccessPointId" require:"true"`
	HealthCheckSourceIp             *string `json:"HealthCheckSourceIp" xml:"HealthCheckSourceIp" require:"true"`
	HealthCheckTargetIp             *string `json:"HealthCheckTargetIp" xml:"HealthCheckTargetIp" require:"true"`
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) GoString() string {
	return s.String()
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterInterfaceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRegionId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRegionId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRole(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Role = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetSpec(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Spec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetName(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Name = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetDescription(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Description = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetRouterType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.RouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetCreationTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetEndTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.EndTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetChargeType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ChargeType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.Status = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetBusinessStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetConnectedTime(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.ConnectedTime = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceSpec(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceSpec = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceBusinessStatus(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceBusinessStatus = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRouterId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRouterId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeRouterType(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeRouterType = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeInterfaceOwnerId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetAccessPointId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.AccessPointId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetOppositeAccessPointId(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.OppositeAccessPointId = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHealthCheckSourceIp(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType) SetHealthCheckTargetIp(v string) *DescribeRouterInterfacesResponseRouterInterfaceSetRouterInterfaceType {
	s.HealthCheckTargetIp = &v
	return s
}

type DeleteRouterInterfaceRequest struct {
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId    *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s DeleteRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceRequest) SetRegionId(v string) *DeleteRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeleteRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetOwnerId(v int64) *DeleteRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetResourceOwnerAccount(v string) *DeleteRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetResourceOwnerId(v int64) *DeleteRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetClientToken(v string) *DeleteRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetOwnerAccount(v string) *DeleteRouterInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRouterInterfaceRequest) SetUserCidr(v string) *DeleteRouterInterfaceRequest {
	s.UserCidr = &v
	return s
}

type DeleteRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouterInterfaceResponse) SetRequestId(v string) *DeleteRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type DeactivateRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId    *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
}

func (s DeactivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceRequest) SetOwnerId(v int64) *DeactivateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *DeactivateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetResourceOwnerId(v int64) *DeactivateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetRegionId(v string) *DeactivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeactivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *DeactivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type DeactivateRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeactivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeactivateRouterInterfaceResponse) SetRequestId(v string) *DeactivateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type CreateRouterInterfaceRequest struct {
	RegionId                 *string `json:"RegionId" xml:"RegionId" require:"true"`
	Role                     *string `json:"Role" xml:"Role" require:"true"`
	OppositeRegionId         *string `json:"OppositeRegionId" xml:"OppositeRegionId" require:"true"`
	Spec                     *string `json:"Spec" xml:"Spec" require:"true"`
	RouterType               *string `json:"RouterType" xml:"RouterType" require:"true"`
	RouterId                 *string `json:"RouterId" xml:"RouterId" require:"true"`
	OppositeInterfaceId      *string `json:"OppositeInterfaceId" xml:"OppositeInterfaceId"`
	OppositeRouterId         *string `json:"OppositeRouterId" xml:"OppositeRouterId"`
	OppositeRouterType       *string `json:"OppositeRouterType" xml:"OppositeRouterType"`
	OppositeInterfaceOwnerId *string `json:"OppositeInterfaceOwnerId" xml:"OppositeInterfaceOwnerId"`
	HealthCheckSourceIp      *string `json:"HealthCheckSourceIp" xml:"HealthCheckSourceIp"`
	HealthCheckTargetIp      *string `json:"HealthCheckTargetIp" xml:"HealthCheckTargetIp"`
	AccessPointId            *string `json:"AccessPointId" xml:"AccessPointId"`
	OppositeAccessPointId    *string `json:"OppositeAccessPointId" xml:"OppositeAccessPointId"`
	Description              *string `json:"Description" xml:"Description"`
	Name                     *string `json:"Name" xml:"Name"`
	Period                   *int    `json:"Period" xml:"Period"`
	InstanceChargeType       *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	AutoPay                  *bool   `json:"AutoPay" xml:"AutoPay"`
	PricingCycle             *string `json:"PricingCycle" xml:"PricingCycle"`
	ClientToken              *string `json:"ClientToken" xml:"ClientToken"`
	OwnerId                  *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount             *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr                 *string `json:"UserCidr" xml:"UserCidr"`
}

func (s CreateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceRequest) SetRegionId(v string) *CreateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRole(v string) *CreateRouterInterfaceRequest {
	s.Role = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRegionId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRegionId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetSpec(v string) *CreateRouterInterfaceRequest {
	s.Spec = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterType(v string) *CreateRouterInterfaceRequest {
	s.RouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetRouterId(v string) *CreateRouterInterfaceRequest {
	s.RouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterId(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeRouterType(v string) *CreateRouterInterfaceRequest {
	s.OppositeRouterType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeInterfaceOwnerId(v string) *CreateRouterInterfaceRequest {
	s.OppositeInterfaceOwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckSourceIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckSourceIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetHealthCheckTargetIp(v string) *CreateRouterInterfaceRequest {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.AccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOppositeAccessPointId(v string) *CreateRouterInterfaceRequest {
	s.OppositeAccessPointId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetDescription(v string) *CreateRouterInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetName(v string) *CreateRouterInterfaceRequest {
	s.Name = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPeriod(v int) *CreateRouterInterfaceRequest {
	s.Period = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetInstanceChargeType(v string) *CreateRouterInterfaceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetAutoPay(v bool) *CreateRouterInterfaceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetPricingCycle(v string) *CreateRouterInterfaceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetClientToken(v string) *CreateRouterInterfaceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOwnerId(v int64) *CreateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *CreateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetResourceOwnerId(v int64) *CreateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetOwnerAccount(v string) *CreateRouterInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRouterInterfaceRequest) SetUserCidr(v string) *CreateRouterInterfaceRequest {
	s.UserCidr = &v
	return s
}

type CreateRouterInterfaceResponse struct {
	RequestId         *string `json:"RequestId" xml:"RequestId" require:"true"`
	RouterInterfaceId *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
	OrderId           *int64  `json:"OrderId" xml:"OrderId" require:"true"`
}

func (s CreateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateRouterInterfaceResponse) SetRequestId(v string) *CreateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRouterInterfaceResponse) SetRouterInterfaceId(v string) *CreateRouterInterfaceResponse {
	s.RouterInterfaceId = &v
	return s
}

func (s *CreateRouterInterfaceResponse) SetOrderId(v int64) *CreateRouterInterfaceResponse {
	s.OrderId = &v
	return s
}

type ConnectRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId    *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
}

func (s ConnectRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceRequest) SetOwnerId(v int64) *ConnectRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetResourceOwnerAccount(v string) *ConnectRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetResourceOwnerId(v int64) *ConnectRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetRegionId(v string) *ConnectRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ConnectRouterInterfaceRequest) SetRouterInterfaceId(v string) *ConnectRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ConnectRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ConnectRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConnectRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ConnectRouterInterfaceResponse) SetRequestId(v string) *ConnectRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type ActivateRouterInterfaceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	RouterInterfaceId    *string `json:"RouterInterfaceId" xml:"RouterInterfaceId" require:"true"`
}

func (s ActivateRouterInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceRequest) SetOwnerId(v int64) *ActivateRouterInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetResourceOwnerAccount(v string) *ActivateRouterInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetResourceOwnerId(v int64) *ActivateRouterInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetRegionId(v string) *ActivateRouterInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ActivateRouterInterfaceRequest) SetRouterInterfaceId(v string) *ActivateRouterInterfaceRequest {
	s.RouterInterfaceId = &v
	return s
}

type ActivateRouterInterfaceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ActivateRouterInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateRouterInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ActivateRouterInterfaceResponse) SetRequestId(v string) *ActivateRouterInterfaceResponse {
	s.RequestId = &v
	return s
}

type UnassociateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	HaVipId              *string `json:"HaVipId" xml:"HaVipId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Force                *string `json:"Force" xml:"Force"`
}

func (s UnassociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipRequest) SetOwnerId(v int64) *UnassociateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetResourceOwnerAccount(v string) *UnassociateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassociateHaVipRequest) SetResourceOwnerId(v int64) *UnassociateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetOwnerAccount(v string) *UnassociateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassociateHaVipRequest) SetClientToken(v string) *UnassociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *UnassociateHaVipRequest) SetRegionId(v string) *UnassociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetHaVipId(v string) *UnassociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetInstanceId(v string) *UnassociateHaVipRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetForce(v string) *UnassociateHaVipRequest {
	s.Force = &v
	return s
}

type UnassociateHaVipResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UnassociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponse) SetRequestId(v string) *UnassociateHaVipResponse {
	s.RequestId = &v
	return s
}

type ModifyHaVipAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	HaVipId              *string `json:"HaVipId" xml:"HaVipId" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
}

func (s ModifyHaVipAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeRequest) SetOwnerId(v int64) *ModifyHaVipAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetResourceOwnerAccount(v string) *ModifyHaVipAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetResourceOwnerId(v int64) *ModifyHaVipAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetOwnerAccount(v string) *ModifyHaVipAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetClientToken(v string) *ModifyHaVipAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetRegionId(v string) *ModifyHaVipAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetHaVipId(v string) *ModifyHaVipAttributeRequest {
	s.HaVipId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetDescription(v string) *ModifyHaVipAttributeRequest {
	s.Description = &v
	return s
}

type ModifyHaVipAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyHaVipAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponse) SetRequestId(v string) *ModifyHaVipAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeHaVipsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
}

func (s DescribeHaVipsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequest) SetOwnerId(v int64) *DescribeHaVipsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetResourceOwnerAccount(v string) *DescribeHaVipsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHaVipsRequest) SetResourceOwnerId(v int64) *DescribeHaVipsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetOwnerAccount(v string) *DescribeHaVipsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHaVipsRequest) SetRegionId(v string) *DescribeHaVipsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageNumber(v int) *DescribeHaVipsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageSize(v int) *DescribeHaVipsRequest {
	s.PageSize = &v
	return s
}

type DescribeHaVipsResponse struct {
	RequestId  *string                       `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                          `json:"PageSize" xml:"PageSize" require:"true"`
	HaVips     *DescribeHaVipsResponseHaVips `json:"HaVips" xml:"HaVips" require:"true" type:"Struct"`
}

func (s DescribeHaVipsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponse) SetRequestId(v string) *DescribeHaVipsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHaVipsResponse) SetTotalCount(v int) *DescribeHaVipsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeHaVipsResponse) SetPageNumber(v int) *DescribeHaVipsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsResponse) SetPageSize(v int) *DescribeHaVipsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsResponse) SetHaVips(v *DescribeHaVipsResponseHaVips) *DescribeHaVipsResponse {
	s.HaVips = v
	return s
}

type DescribeHaVipsResponseHaVips struct {
	HaVip []*DescribeHaVipsResponseHaVipsHaVip `json:"HaVip" xml:"HaVip" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVips) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVips) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVips) SetHaVip(v []*DescribeHaVipsResponseHaVipsHaVip) *DescribeHaVipsResponseHaVips {
	s.HaVip = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVip struct {
	HaVipId                *string                                                  `json:"HaVipId" xml:"HaVipId" require:"true"`
	RegionId               *string                                                  `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId                  *string                                                  `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId              *string                                                  `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	IpAddress              *string                                                  `json:"IpAddress" xml:"IpAddress" require:"true"`
	Status                 *string                                                  `json:"Status" xml:"Status" require:"true"`
	MasterInstanceId       *string                                                  `json:"MasterInstanceId" xml:"MasterInstanceId" require:"true"`
	Description            *string                                                  `json:"Description" xml:"Description" require:"true"`
	CreateTime             *string                                                  `json:"CreateTime" xml:"CreateTime" require:"true"`
	AssociatedInstances    *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances    `json:"AssociatedInstances" xml:"AssociatedInstances" require:"true" type:"Struct"`
	AssociatedEipAddresses *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses `json:"AssociatedEipAddresses" xml:"AssociatedEipAddresses" require:"true" type:"Struct"`
}

func (s DescribeHaVipsResponseHaVipsHaVip) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVip) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetHaVipId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.HaVipId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetRegionId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.RegionId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetVpcId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.VpcId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetVSwitchId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.VSwitchId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetIpAddress(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.IpAddress = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetStatus(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.Status = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetMasterInstanceId(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetDescription(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.Description = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetCreateTime(v string) *DescribeHaVipsResponseHaVipsHaVip {
	s.CreateTime = &v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetAssociatedInstances(v *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) *DescribeHaVipsResponseHaVipsHaVip {
	s.AssociatedInstances = v
	return s
}

func (s *DescribeHaVipsResponseHaVipsHaVip) SetAssociatedEipAddresses(v *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) *DescribeHaVipsResponseHaVipsHaVip {
	s.AssociatedEipAddresses = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVipAssociatedInstances struct {
	AssociatedInstance []*string `json:"associatedInstance" xml:"associatedInstance" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances) SetAssociatedInstance(v []*string) *DescribeHaVipsResponseHaVipsHaVipAssociatedInstances {
	s.AssociatedInstance = v
	return s
}

type DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses struct {
	AssociatedEipAddresse []*string `json:"associatedEipAddresse" xml:"associatedEipAddresse" require:"true" type:"Repeated"`
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses) SetAssociatedEipAddresse(v []*string) *DescribeHaVipsResponseHaVipsHaVipAssociatedEipAddresses {
	s.AssociatedEipAddresse = v
	return s
}

type DeleteHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	HaVipId              *string `json:"HaVipId" xml:"HaVipId" require:"true"`
}

func (s DeleteHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipRequest) GoString() string {
	return s.String()
}

func (s *DeleteHaVipRequest) SetOwnerId(v int64) *DeleteHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHaVipRequest) SetResourceOwnerAccount(v string) *DeleteHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteHaVipRequest) SetResourceOwnerId(v int64) *DeleteHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteHaVipRequest) SetOwnerAccount(v string) *DeleteHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteHaVipRequest) SetClientToken(v string) *DeleteHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHaVipRequest) SetRegionId(v string) *DeleteHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHaVipRequest) SetHaVipId(v string) *DeleteHaVipRequest {
	s.HaVipId = &v
	return s
}

type DeleteHaVipResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipResponse) GoString() string {
	return s.String()
}

func (s *DeleteHaVipResponse) SetRequestId(v string) *DeleteHaVipResponse {
	s.RequestId = &v
	return s
}

type CreateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	IpAddress            *string `json:"IpAddress" xml:"IpAddress"`
	Description          *string `json:"Description" xml:"Description"`
}

func (s CreateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipRequest) GoString() string {
	return s.String()
}

func (s *CreateHaVipRequest) SetOwnerId(v int64) *CreateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateHaVipRequest) SetResourceOwnerAccount(v string) *CreateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateHaVipRequest) SetResourceOwnerId(v int64) *CreateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateHaVipRequest) SetOwnerAccount(v string) *CreateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateHaVipRequest) SetClientToken(v string) *CreateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHaVipRequest) SetRegionId(v string) *CreateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHaVipRequest) SetVSwitchId(v string) *CreateHaVipRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateHaVipRequest) SetIpAddress(v string) *CreateHaVipRequest {
	s.IpAddress = &v
	return s
}

func (s *CreateHaVipRequest) SetDescription(v string) *CreateHaVipRequest {
	s.Description = &v
	return s
}

type CreateHaVipResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	HaVipId   *string `json:"HaVipId" xml:"HaVipId" require:"true"`
}

func (s CreateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponse) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponse) SetRequestId(v string) *CreateHaVipResponse {
	s.RequestId = &v
	return s
}

func (s *CreateHaVipResponse) SetHaVipId(v string) *CreateHaVipResponse {
	s.HaVipId = &v
	return s
}

type AssociateHaVipRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	HaVipId              *string `json:"HaVipId" xml:"HaVipId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
}

func (s AssociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *AssociateHaVipRequest) SetOwnerId(v int64) *AssociateHaVipRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateHaVipRequest) SetResourceOwnerAccount(v string) *AssociateHaVipRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateHaVipRequest) SetResourceOwnerId(v int64) *AssociateHaVipRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateHaVipRequest) SetOwnerAccount(v string) *AssociateHaVipRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateHaVipRequest) SetClientToken(v string) *AssociateHaVipRequest {
	s.ClientToken = &v
	return s
}

func (s *AssociateHaVipRequest) SetRegionId(v string) *AssociateHaVipRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateHaVipRequest) SetHaVipId(v string) *AssociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *AssociateHaVipRequest) SetInstanceId(v string) *AssociateHaVipRequest {
	s.InstanceId = &v
	return s
}

type AssociateHaVipResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AssociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponse) SetRequestId(v string) *AssociateHaVipResponse {
	s.RequestId = &v
	return s
}

type RenewInstanceRequest struct {
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Period               *int    `json:"Period" xml:"Period" require:"true"`
	PeriodUnit           *string `json:"PeriodUnit" xml:"PeriodUnit"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetOwnerId(v int64) *RenewInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerAccount(v string) *RenewInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerId(v int64) *RenewInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetOwnerAccount(v string) *RenewInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriodUnit(v string) *RenewInstanceRequest {
	s.PeriodUnit = &v
	return s
}

type RenewInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetRequestId(v string) *RenewInstanceResponse {
	s.RequestId = &v
	return s
}

type RemoveTagsRequest struct {
	OwnerId              *int64                  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                 `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                 `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceType         *string                 `json:"ResourceType" xml:"ResourceType" require:"true"`
	ResourceId           *string                 `json:"ResourceId" xml:"ResourceId" require:"true"`
	Tag                  []*RemoveTagsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s RemoveTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequest) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequest) SetOwnerId(v int64) *RemoveTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceOwnerAccount(v string) *RemoveTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceOwnerId(v int64) *RemoveTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveTagsRequest) SetRegionId(v string) *RemoveTagsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceType(v string) *RemoveTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *RemoveTagsRequest) SetResourceId(v string) *RemoveTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *RemoveTagsRequest) SetTag(v []*RemoveTagsRequestTag) *RemoveTagsRequest {
	s.Tag = v
	return s
}

type RemoveTagsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s RemoveTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequestTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequestTag) SetValue(v string) *RemoveTagsRequestTag {
	s.Value = &v
	return s
}

func (s *RemoveTagsRequestTag) SetKey(v string) *RemoveTagsRequestTag {
	s.Key = &v
	return s
}

type RemoveTagsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RemoveTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponse) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponse) SetRequestId(v string) *RemoveTagsResponse {
	s.RequestId = &v
	return s
}

type DescribeTagsRequest struct {
	OwnerId              *int64                    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	PageSize             *int                      `json:"PageSize" xml:"PageSize"`
	PageNumber           *int                      `json:"PageNumber" xml:"PageNumber"`
	ResourceType         *string                   `json:"ResourceType" xml:"ResourceType"`
	ResourceId           *string                   `json:"ResourceId" xml:"ResourceId"`
	RegionId             *string                   `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*DescribeTagsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	Category             *string                   `json:"Category" xml:"Category"`
}

func (s DescribeTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) SetOwnerId(v int64) *DescribeTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerAccount(v string) *DescribeTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerId(v int64) *DescribeTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetPageSize(v int) *DescribeTagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagsRequest) SetPageNumber(v int) *DescribeTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceType(v string) *DescribeTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceId(v string) *DescribeTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetTag(v []*DescribeTagsRequestTag) *DescribeTagsRequest {
	s.Tag = v
	return s
}

func (s *DescribeTagsRequest) SetCategory(v string) *DescribeTagsRequest {
	s.Category = &v
	return s
}

type DescribeTagsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequestTag) SetValue(v string) *DescribeTagsRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeTagsRequestTag) SetKey(v string) *DescribeTagsRequestTag {
	s.Key = &v
	return s
}

type DescribeTagsResponse struct {
	RequestId  *string                   `json:"RequestId" xml:"RequestId" require:"true"`
	PageSize   *int                      `json:"PageSize" xml:"PageSize" require:"true"`
	PageNumber *int                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	TotalCount *int                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	Tags       *DescribeTagsResponseTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) SetRequestId(v string) *DescribeTagsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponse) SetPageSize(v int) *DescribeTagsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeTagsResponse) SetPageNumber(v int) *DescribeTagsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagsResponse) SetTotalCount(v int) *DescribeTagsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeTagsResponse) SetTags(v *DescribeTagsResponseTags) *DescribeTagsResponse {
	s.Tags = v
	return s
}

type DescribeTagsResponseTags struct {
	Tag []*DescribeTagsResponseTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeTagsResponseTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseTags) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseTags) SetTag(v []*DescribeTagsResponseTagsTag) *DescribeTagsResponseTags {
	s.Tag = v
	return s
}

type DescribeTagsResponseTagsTag struct {
	TagKey            *string                                       `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue          *string                                       `json:"TagValue" xml:"TagValue" require:"true"`
	ResourceTypeCount *DescribeTagsResponseTagsTagResourceTypeCount `json:"ResourceTypeCount" xml:"ResourceTypeCount" require:"true" type:"Struct"`
}

func (s DescribeTagsResponseTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseTagsTag) SetTagKey(v string) *DescribeTagsResponseTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeTagsResponseTagsTag) SetTagValue(v string) *DescribeTagsResponseTagsTag {
	s.TagValue = &v
	return s
}

func (s *DescribeTagsResponseTagsTag) SetResourceTypeCount(v *DescribeTagsResponseTagsTagResourceTypeCount) *DescribeTagsResponseTagsTag {
	s.ResourceTypeCount = v
	return s
}

type DescribeTagsResponseTagsTagResourceTypeCount struct {
	Instance       *int `json:"Instance" xml:"Instance" require:"true"`
	Disk           *int `json:"Disk" xml:"Disk" require:"true"`
	Volume         *int `json:"Volume" xml:"Volume" require:"true"`
	Image          *int `json:"Image" xml:"Image" require:"true"`
	Snapshot       *int `json:"Snapshot" xml:"Snapshot" require:"true"`
	Securitygroup  *int `json:"Securitygroup" xml:"Securitygroup" require:"true"`
	LaunchTemplate *int `json:"LaunchTemplate" xml:"LaunchTemplate" require:"true"`
	Eni            *int `json:"Eni" xml:"Eni" require:"true"`
	Ddh            *int `json:"Ddh" xml:"Ddh" require:"true"`
	KeyPair        *int `json:"KeyPair" xml:"KeyPair" require:"true"`
}

func (s DescribeTagsResponseTagsTagResourceTypeCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseTagsTagResourceTypeCount) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetInstance(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Instance = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetDisk(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Disk = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetVolume(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Volume = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetImage(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Image = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetSnapshot(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Snapshot = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetSecuritygroup(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Securitygroup = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetLaunchTemplate(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.LaunchTemplate = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetEni(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Eni = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetDdh(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.Ddh = &v
	return s
}

func (s *DescribeTagsResponseTagsTagResourceTypeCount) SetKeyPair(v int) *DescribeTagsResponseTagsTagResourceTypeCount {
	s.KeyPair = &v
	return s
}

type DescribeResourceByTagsRequest struct {
	OwnerId              *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	PageSize             *int                                `json:"PageSize" xml:"PageSize"`
	PageNumber           *int                                `json:"PageNumber" xml:"PageNumber"`
	ResourceType         *string                             `json:"ResourceType" xml:"ResourceType"`
	RegionId             *string                             `json:"RegionId" xml:"RegionId" require:"true"`
	Tag                  []*DescribeResourceByTagsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s DescribeResourceByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsRequest) SetOwnerId(v int64) *DescribeResourceByTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceOwnerAccount(v string) *DescribeResourceByTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceOwnerId(v int64) *DescribeResourceByTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetPageSize(v int) *DescribeResourceByTagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetPageNumber(v int) *DescribeResourceByTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetResourceType(v string) *DescribeResourceByTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetRegionId(v string) *DescribeResourceByTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceByTagsRequest) SetTag(v []*DescribeResourceByTagsRequestTag) *DescribeResourceByTagsRequest {
	s.Tag = v
	return s
}

type DescribeResourceByTagsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeResourceByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsRequestTag) SetValue(v string) *DescribeResourceByTagsRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeResourceByTagsRequestTag) SetKey(v string) *DescribeResourceByTagsRequestTag {
	s.Key = &v
	return s
}

type DescribeResourceByTagsResponse struct {
	RequestId  *string                                  `json:"RequestId" xml:"RequestId" require:"true"`
	PageSize   *int                                     `json:"PageSize" xml:"PageSize" require:"true"`
	PageNumber *int                                     `json:"PageNumber" xml:"PageNumber" require:"true"`
	TotalCount *int                                     `json:"TotalCount" xml:"TotalCount" require:"true"`
	Resources  *DescribeResourceByTagsResponseResources `json:"Resources" xml:"Resources" require:"true" type:"Struct"`
}

func (s DescribeResourceByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponse) SetRequestId(v string) *DescribeResourceByTagsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceByTagsResponse) SetPageSize(v int) *DescribeResourceByTagsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeResourceByTagsResponse) SetPageNumber(v int) *DescribeResourceByTagsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeResourceByTagsResponse) SetTotalCount(v int) *DescribeResourceByTagsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeResourceByTagsResponse) SetResources(v *DescribeResourceByTagsResponseResources) *DescribeResourceByTagsResponse {
	s.Resources = v
	return s
}

type DescribeResourceByTagsResponseResources struct {
	Resource []*DescribeResourceByTagsResponseResourcesResource `json:"Resource" xml:"Resource" require:"true" type:"Repeated"`
}

func (s DescribeResourceByTagsResponseResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponseResources) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponseResources) SetResource(v []*DescribeResourceByTagsResponseResourcesResource) *DescribeResourceByTagsResponseResources {
	s.Resource = v
	return s
}

type DescribeResourceByTagsResponseResourcesResource struct {
	ResourceId   *string `json:"ResourceId" xml:"ResourceId" require:"true"`
	ResourceType *string `json:"ResourceType" xml:"ResourceType" require:"true"`
	RegionId     *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s DescribeResourceByTagsResponseResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceByTagsResponseResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeResourceByTagsResponseResourcesResource) SetResourceId(v string) *DescribeResourceByTagsResponseResourcesResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeResourceByTagsResponseResourcesResource) SetResourceType(v string) *DescribeResourceByTagsResponseResourcesResource {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceByTagsResponseResourcesResource) SetRegionId(v string) *DescribeResourceByTagsResponseResourcesResource {
	s.RegionId = &v
	return s
}

type AddTagsRequest struct {
	OwnerId              *int64               `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string              `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64               `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string              `json:"RegionId" xml:"RegionId" require:"true"`
	ResourceType         *string              `json:"ResourceType" xml:"ResourceType" require:"true"`
	ResourceId           *string              `json:"ResourceId" xml:"ResourceId" require:"true"`
	Tag                  []*AddTagsRequestTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s AddTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequest) GoString() string {
	return s.String()
}

func (s *AddTagsRequest) SetOwnerId(v int64) *AddTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTagsRequest) SetResourceOwnerAccount(v string) *AddTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTagsRequest) SetResourceOwnerId(v int64) *AddTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTagsRequest) SetRegionId(v string) *AddTagsRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagsRequest) SetResourceType(v string) *AddTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *AddTagsRequest) SetResourceId(v string) *AddTagsRequest {
	s.ResourceId = &v
	return s
}

func (s *AddTagsRequest) SetTag(v []*AddTagsRequestTag) *AddTagsRequest {
	s.Tag = v
	return s
}

type AddTagsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s AddTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequestTag) GoString() string {
	return s.String()
}

func (s *AddTagsRequestTag) SetValue(v string) *AddTagsRequestTag {
	s.Value = &v
	return s
}

func (s *AddTagsRequestTag) SetKey(v string) *AddTagsRequestTag {
	s.Key = &v
	return s
}

type AddTagsResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagsResponse) GoString() string {
	return s.String()
}

func (s *AddTagsResponse) SetRequestId(v string) *AddTagsResponse {
	s.RequestId = &v
	return s
}

type UnassociateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType"`
}

func (s UnassociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressRequest) SetOwnerId(v int64) *UnassociateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetResourceOwnerAccount(v string) *UnassociateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetResourceOwnerId(v int64) *UnassociateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetRegionId(v string) *UnassociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetAllocationId(v string) *UnassociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceId(v string) *UnassociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetOwnerAccount(v string) *UnassociateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnassociateEipAddressRequest) SetInstanceType(v string) *UnassociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

type UnassociateEipAddressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UnassociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *UnassociateEipAddressResponse) SetRequestId(v string) *UnassociateEipAddressResponse {
	s.RequestId = &v
	return s
}

type StopInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	ConfirmStop          *bool   `json:"ConfirmStop" xml:"ConfirmStop"`
	ForceStop            *bool   `json:"ForceStop" xml:"ForceStop"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	StoppedMode          *string `json:"StoppedMode" xml:"StoppedMode"`
	DryRun               *bool   `json:"DryRun" xml:"DryRun"`
}

func (s StopInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) SetOwnerId(v int64) *StopInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StopInstanceRequest) SetResourceOwnerAccount(v string) *StopInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopInstanceRequest) SetResourceOwnerId(v int64) *StopInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopInstanceRequest) SetInstanceId(v string) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StopInstanceRequest) SetConfirmStop(v bool) *StopInstanceRequest {
	s.ConfirmStop = &v
	return s
}

func (s *StopInstanceRequest) SetForceStop(v bool) *StopInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstanceRequest) SetOwnerAccount(v string) *StopInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StopInstanceRequest) SetStoppedMode(v string) *StopInstanceRequest {
	s.StoppedMode = &v
	return s
}

func (s *StopInstanceRequest) SetDryRun(v bool) *StopInstanceRequest {
	s.DryRun = &v
	return s
}

type StopInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s StopInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) SetRequestId(v string) *StopInstanceResponse {
	s.RequestId = &v
	return s
}

type StartInstanceRequest struct {
	SourceRegionId       *string `json:"SourceRegionId" xml:"SourceRegionId"`
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	InitLocalDisk        *bool   `json:"InitLocalDisk" xml:"InitLocalDisk"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DryRun               *bool   `json:"DryRun" xml:"DryRun"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetSourceRegionId(v string) *StartInstanceRequest {
	s.SourceRegionId = &v
	return s
}

func (s *StartInstanceRequest) SetOwnerId(v int64) *StartInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StartInstanceRequest) SetResourceOwnerAccount(v string) *StartInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartInstanceRequest) SetResourceOwnerId(v int64) *StartInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StartInstanceRequest) SetInitLocalDisk(v bool) *StartInstanceRequest {
	s.InitLocalDisk = &v
	return s
}

func (s *StartInstanceRequest) SetOwnerAccount(v string) *StartInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *StartInstanceRequest) SetDryRun(v bool) *StartInstanceRequest {
	s.DryRun = &v
	return s
}

type StartInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetRequestId(v string) *StartInstanceResponse {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupEgressRequest struct {
	OwnerId               *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId       *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	IpProtocol            *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange             *string `json:"PortRange" xml:"PortRange" require:"true"`
	DestGroupId           *string `json:"DestGroupId" xml:"DestGroupId"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId" xml:"DestGroupOwnerId"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount" xml:"DestGroupOwnerAccount"`
	DestCidrIp            *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	SourceCidrIp          *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange       *string `json:"SourcePortRange" xml:"SourcePortRange"`
	Policy                *string `json:"Policy" xml:"Policy"`
	Priority              *string `json:"Priority" xml:"Priority"`
	NicType               *string `json:"NicType" xml:"NicType"`
	ClientToken           *string `json:"ClientToken" xml:"ClientToken"`
	Description           *string `json:"Description" xml:"Description"`
}

func (s RevokeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressRequest) SetOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetResourceOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetResourceOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetRegionId(v string) *RevokeSecurityGroupEgressRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpProtocol(v string) *RevokeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.DestGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupOwnerId(v int64) *RevokeSecurityGroupEgressRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestGroupOwnerAccount(v string) *RevokeSecurityGroupEgressRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpv6DestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpv6SourceCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourcePortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPolicy(v string) *RevokeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPriority(v string) *RevokeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetNicType(v string) *RevokeSecurityGroupEgressRequest {
	s.NicType = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetClientToken(v string) *RevokeSecurityGroupEgressRequest {
	s.ClientToken = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetDescription(v string) *RevokeSecurityGroupEgressRequest {
	s.Description = &v
	return s
}

type RevokeSecurityGroupEgressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RevokeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponse) SetRequestId(v string) *RevokeSecurityGroupEgressResponse {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId         *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	DestCidrIp              *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	PortRange               *string `json:"PortRange" xml:"PortRange" require:"true"`
	IpProtocol              *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	SourceGroupId           *string `json:"SourceGroupId" xml:"SourceGroupId"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId" xml:"SourceGroupOwnerId"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount" xml:"SourceGroupOwnerAccount"`
	SourceCidrIp            *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange         *string `json:"SourcePortRange" xml:"SourcePortRange"`
	Policy                  *string `json:"Policy" xml:"Policy"`
	Priority                *string `json:"Priority" xml:"Priority"`
	NicType                 *string `json:"NicType" xml:"NicType"`
	ClientToken             *string `json:"ClientToken" xml:"ClientToken"`
	Description             *string `json:"Description" xml:"Description"`
}

func (s RevokeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupRequest) SetOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetResourceOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetResourceOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetRegionId(v string) *RevokeSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetDestCidrIp(v string) *RevokeSecurityGroupRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpv6DestCidrIp(v string) *RevokeSecurityGroupRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPortRange(v string) *RevokeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpProtocol(v string) *RevokeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupId(v string) *RevokeSecurityGroupRequest {
	s.SourceGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupOwnerId(v int64) *RevokeSecurityGroupRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceGroupOwnerAccount(v string) *RevokeSecurityGroupRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetIpv6SourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourcePortRange(v string) *RevokeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPolicy(v string) *RevokeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPriority(v string) *RevokeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetNicType(v string) *RevokeSecurityGroupRequest {
	s.NicType = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetClientToken(v string) *RevokeSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetDescription(v string) *RevokeSecurityGroupRequest {
	s.Description = &v
	return s
}

type RevokeSecurityGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RevokeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponse) SetRequestId(v string) *RevokeSecurityGroupResponse {
	s.RequestId = &v
	return s
}

type ResizeDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	Type                 *string `json:"Type" xml:"Type"`
	NewSize              *int    `json:"NewSize" xml:"NewSize" require:"true"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ResizeDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskRequest) GoString() string {
	return s.String()
}

func (s *ResizeDiskRequest) SetOwnerId(v int64) *ResizeDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ResizeDiskRequest) SetResourceOwnerAccount(v string) *ResizeDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResizeDiskRequest) SetResourceOwnerId(v int64) *ResizeDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResizeDiskRequest) SetDiskId(v string) *ResizeDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResizeDiskRequest) SetType(v string) *ResizeDiskRequest {
	s.Type = &v
	return s
}

func (s *ResizeDiskRequest) SetNewSize(v int) *ResizeDiskRequest {
	s.NewSize = &v
	return s
}

func (s *ResizeDiskRequest) SetClientToken(v string) *ResizeDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *ResizeDiskRequest) SetOwnerAccount(v string) *ResizeDiskRequest {
	s.OwnerAccount = &v
	return s
}

type ResizeDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ResizeDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponse) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponse) SetRequestId(v string) *ResizeDiskResponse {
	s.RequestId = &v
	return s
}

type ResetDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	SnapshotId           *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ResetDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskRequest) GoString() string {
	return s.String()
}

func (s *ResetDiskRequest) SetOwnerId(v int64) *ResetDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetDiskRequest) SetResourceOwnerAccount(v string) *ResetDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResetDiskRequest) SetResourceOwnerId(v int64) *ResetDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResetDiskRequest) SetDiskId(v string) *ResetDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResetDiskRequest) SetSnapshotId(v string) *ResetDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *ResetDiskRequest) SetOwnerAccount(v string) *ResetDiskRequest {
	s.OwnerAccount = &v
	return s
}

type ResetDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ResetDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskResponse) GoString() string {
	return s.String()
}

func (s *ResetDiskResponse) SetRequestId(v string) *ResetDiskResponse {
	s.RequestId = &v
	return s
}

type ReplaceSystemDiskRequest struct {
	OwnerId                     *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId                  *string                             `json:"InstanceId" xml:"InstanceId" require:"true"`
	ImageId                     *string                             `json:"ImageId" xml:"ImageId"`
	SystemDisk                  *ReplaceSystemDiskRequestSystemDisk `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	ClientToken                 *string                             `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount                *string                             `json:"OwnerAccount" xml:"OwnerAccount"`
	UseAdditionalService        *bool                               `json:"UseAdditionalService" xml:"UseAdditionalService"`
	Password                    *string                             `json:"Password" xml:"Password"`
	PasswordInherit             *bool                               `json:"PasswordInherit" xml:"PasswordInherit"`
	KeyPairName                 *string                             `json:"KeyPairName" xml:"KeyPairName"`
	DiskId                      *string                             `json:"DiskId" xml:"DiskId"`
	Platform                    *string                             `json:"Platform" xml:"Platform"`
	Architecture                *string                             `json:"Architecture" xml:"Architecture"`
	SecurityEnhancementStrategy *string                             `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
}

func (s ReplaceSystemDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskRequest) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskRequest) SetOwnerId(v int64) *ReplaceSystemDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetResourceOwnerAccount(v string) *ReplaceSystemDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetResourceOwnerId(v int64) *ReplaceSystemDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetInstanceId(v string) *ReplaceSystemDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetImageId(v string) *ReplaceSystemDiskRequest {
	s.ImageId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetSystemDisk(v *ReplaceSystemDiskRequestSystemDisk) *ReplaceSystemDiskRequest {
	s.SystemDisk = v
	return s
}

func (s *ReplaceSystemDiskRequest) SetClientToken(v string) *ReplaceSystemDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetOwnerAccount(v string) *ReplaceSystemDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetUseAdditionalService(v bool) *ReplaceSystemDiskRequest {
	s.UseAdditionalService = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPassword(v string) *ReplaceSystemDiskRequest {
	s.Password = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPasswordInherit(v bool) *ReplaceSystemDiskRequest {
	s.PasswordInherit = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetKeyPairName(v string) *ReplaceSystemDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetDiskId(v string) *ReplaceSystemDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetPlatform(v string) *ReplaceSystemDiskRequest {
	s.Platform = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetArchitecture(v string) *ReplaceSystemDiskRequest {
	s.Architecture = &v
	return s
}

func (s *ReplaceSystemDiskRequest) SetSecurityEnhancementStrategy(v string) *ReplaceSystemDiskRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

type ReplaceSystemDiskRequestSystemDisk struct {
	Size *int `json:"Size" xml:"Size"`
}

func (s ReplaceSystemDiskRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskRequestSystemDisk) SetSize(v int) *ReplaceSystemDiskRequestSystemDisk {
	s.Size = &v
	return s
}

type ReplaceSystemDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	DiskId    *string `json:"DiskId" xml:"DiskId" require:"true"`
}

func (s ReplaceSystemDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceSystemDiskResponse) GoString() string {
	return s.String()
}

func (s *ReplaceSystemDiskResponse) SetRequestId(v string) *ReplaceSystemDiskResponse {
	s.RequestId = &v
	return s
}

func (s *ReplaceSystemDiskResponse) SetDiskId(v string) *ReplaceSystemDiskResponse {
	s.DiskId = &v
	return s
}

type ReleasePublicIpAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId"`
	PublicIpAddress      *string `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ReleasePublicIpAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePublicIpAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleasePublicIpAddressRequest) SetOwnerId(v int64) *ReleasePublicIpAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetResourceOwnerAccount(v string) *ReleasePublicIpAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetResourceOwnerId(v int64) *ReleasePublicIpAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetInstanceId(v string) *ReleasePublicIpAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetPublicIpAddress(v string) *ReleasePublicIpAddressRequest {
	s.PublicIpAddress = &v
	return s
}

func (s *ReleasePublicIpAddressRequest) SetOwnerAccount(v string) *ReleasePublicIpAddressRequest {
	s.OwnerAccount = &v
	return s
}

type ReleasePublicIpAddressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReleasePublicIpAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePublicIpAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleasePublicIpAddressResponse) SetRequestId(v string) *ReleasePublicIpAddressResponse {
	s.RequestId = &v
	return s
}

type ReleaseEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ReleaseEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressRequest) SetOwnerId(v int64) *ReleaseEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetResourceOwnerAccount(v string) *ReleaseEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetResourceOwnerId(v int64) *ReleaseEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetRegionId(v string) *ReleaseEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetAllocationId(v string) *ReleaseEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *ReleaseEipAddressRequest) SetOwnerAccount(v string) *ReleaseEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

type ReleaseEipAddressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReleaseEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEipAddressResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEipAddressResponse) SetRequestId(v string) *ReleaseEipAddressResponse {
	s.RequestId = &v
	return s
}

type ReInitDiskRequest struct {
	OwnerId                     *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId                      *string `json:"DiskId" xml:"DiskId" require:"true"`
	OwnerAccount                *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Password                    *string `json:"Password" xml:"Password"`
	KeyPairName                 *string `json:"KeyPairName" xml:"KeyPairName"`
	AutoStartInstance           *bool   `json:"AutoStartInstance" xml:"AutoStartInstance"`
	SecurityEnhancementStrategy *string `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
}

func (s ReInitDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskRequest) GoString() string {
	return s.String()
}

func (s *ReInitDiskRequest) SetOwnerId(v int64) *ReInitDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *ReInitDiskRequest) SetResourceOwnerAccount(v string) *ReInitDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReInitDiskRequest) SetResourceOwnerId(v int64) *ReInitDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReInitDiskRequest) SetDiskId(v string) *ReInitDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReInitDiskRequest) SetOwnerAccount(v string) *ReInitDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReInitDiskRequest) SetPassword(v string) *ReInitDiskRequest {
	s.Password = &v
	return s
}

func (s *ReInitDiskRequest) SetKeyPairName(v string) *ReInitDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *ReInitDiskRequest) SetAutoStartInstance(v bool) *ReInitDiskRequest {
	s.AutoStartInstance = &v
	return s
}

func (s *ReInitDiskRequest) SetSecurityEnhancementStrategy(v string) *ReInitDiskRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

type ReInitDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ReInitDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponse) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponse) SetRequestId(v string) *ReInitDiskResponse {
	s.RequestId = &v
	return s
}

type RebootInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	ForceStop            *bool   `json:"ForceStop" xml:"ForceStop"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DryRun               *bool   `json:"DryRun" xml:"DryRun"`
}

func (s RebootInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootInstanceRequest) SetOwnerId(v int64) *RebootInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RebootInstanceRequest) SetResourceOwnerAccount(v string) *RebootInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebootInstanceRequest) SetResourceOwnerId(v int64) *RebootInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebootInstanceRequest) SetInstanceId(v string) *RebootInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootInstanceRequest) SetForceStop(v bool) *RebootInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *RebootInstanceRequest) SetOwnerAccount(v string) *RebootInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RebootInstanceRequest) SetDryRun(v bool) *RebootInstanceRequest {
	s.DryRun = &v
	return s
}

type RebootInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s RebootInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponse) SetRequestId(v string) *RebootInstanceResponse {
	s.RequestId = &v
	return s
}

type ModifyVSwitchAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	VSwitchName          *string `json:"VSwitchName" xml:"VSwitchName"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	Description          *string `json:"Description" xml:"Description"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyVSwitchAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeRequest) SetOwnerId(v int64) *ModifyVSwitchAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVSwitchAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetResourceOwnerId(v int64) *ModifyVSwitchAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchId(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchName(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchName = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetRegionId(v string) *ModifyVSwitchAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetDescription(v string) *ModifyVSwitchAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetOwnerAccount(v string) *ModifyVSwitchAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyVSwitchAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyVSwitchAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponse) SetRequestId(v string) *ModifyVSwitchAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyVRouterAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	VRouterId            *string `json:"VRouterId" xml:"VRouterId" require:"true"`
	VRouterName          *string `json:"VRouterName" xml:"VRouterName"`
	Description          *string `json:"Description" xml:"Description"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyVRouterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeRequest) SetOwnerId(v int64) *ModifyVRouterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVRouterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetResourceOwnerId(v int64) *ModifyVRouterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetRegionId(v string) *ModifyVRouterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterId(v string) *ModifyVRouterAttributeRequest {
	s.VRouterId = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetVRouterName(v string) *ModifyVRouterAttributeRequest {
	s.VRouterName = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetDescription(v string) *ModifyVRouterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVRouterAttributeRequest) SetOwnerAccount(v string) *ModifyVRouterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyVRouterAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyVRouterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVRouterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVRouterAttributeResponse) SetRequestId(v string) *ModifyVRouterAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyVpcAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VpcId                *string `json:"VpcId" xml:"VpcId" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	VpcName              *string `json:"VpcName" xml:"VpcName"`
	CidrBlock            *string `json:"CidrBlock" xml:"CidrBlock"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s ModifyVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeRequest) SetOwnerId(v int64) *ModifyVpcAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetResourceOwnerAccount(v string) *ModifyVpcAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetResourceOwnerId(v int64) *ModifyVpcAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetVpcId(v string) *ModifyVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetDescription(v string) *ModifyVpcAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetVpcName(v string) *ModifyVpcAttributeRequest {
	s.VpcName = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetCidrBlock(v string) *ModifyVpcAttributeRequest {
	s.CidrBlock = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetRegionId(v string) *ModifyVpcAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetOwnerAccount(v string) *ModifyVpcAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyVpcAttributeRequest) SetUserCidr(v string) *ModifyVpcAttributeRequest {
	s.UserCidr = &v
	return s
}

type ModifyVpcAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcAttributeResponse) SetRequestId(v string) *ModifyVpcAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifySnapshotAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	SnapshotId           *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	SnapshotName         *string `json:"SnapshotName" xml:"SnapshotName"`
	Description          *string `json:"Description" xml:"Description"`
}

func (s ModifySnapshotAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeRequest) SetOwnerId(v int64) *ModifySnapshotAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetResourceOwnerAccount(v string) *ModifySnapshotAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetResourceOwnerId(v int64) *ModifySnapshotAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetOwnerAccount(v string) *ModifySnapshotAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotId(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotName(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotName = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetDescription(v string) *ModifySnapshotAttributeRequest {
	s.Description = &v
	return s
}

type ModifySnapshotAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifySnapshotAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeResponse) SetRequestId(v string) *ModifySnapshotAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	Description          *string `json:"Description" xml:"Description"`
	SecurityGroupName    *string `json:"SecurityGroupName" xml:"SecurityGroupName"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifySecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeRequest) SetOwnerId(v int64) *ModifySecurityGroupAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupId(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetDescription(v string) *ModifySecurityGroupAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupName(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetRegionId(v string) *ModifySecurityGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetOwnerAccount(v string) *ModifySecurityGroupAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifySecurityGroupAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifySecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponse) SetRequestId(v string) *ModifySecurityGroupAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceVpcAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string   `json:"InstanceId" xml:"InstanceId" require:"true"`
	VSwitchId            *string   `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	PrivateIpAddress     *string   `json:"PrivateIpAddress" xml:"PrivateIpAddress"`
	VpcId                *string   `json:"VpcId" xml:"VpcId"`
	SecurityGroupId      []*string `json:"SecurityGroupId" xml:"SecurityGroupId" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyInstanceVpcAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVpcAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVpcAttributeRequest) SetOwnerId(v int64) *ModifyInstanceVpcAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceVpcAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceVpcAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetInstanceId(v string) *ModifyInstanceVpcAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetVSwitchId(v string) *ModifyInstanceVpcAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetPrivateIpAddress(v string) *ModifyInstanceVpcAttributeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetVpcId(v string) *ModifyInstanceVpcAttributeRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetSecurityGroupId(v []*string) *ModifyInstanceVpcAttributeRequest {
	s.SecurityGroupId = v
	return s
}

func (s *ModifyInstanceVpcAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceVpcAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceVpcAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceVpcAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVpcAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVpcAttributeResponse) SetRequestId(v string) *ModifyInstanceVpcAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceVncPasswdRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	VncPassword          *string `json:"VncPassword" xml:"VncPassword" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyInstanceVncPasswdRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVncPasswdRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswdRequest) SetOwnerId(v int64) *ModifyInstanceVncPasswdRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetResourceOwnerAccount(v string) *ModifyInstanceVncPasswdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetResourceOwnerId(v int64) *ModifyInstanceVncPasswdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetInstanceId(v string) *ModifyInstanceVncPasswdRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetRegionId(v string) *ModifyInstanceVncPasswdRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetVncPassword(v string) *ModifyInstanceVncPasswdRequest {
	s.VncPassword = &v
	return s
}

func (s *ModifyInstanceVncPasswdRequest) SetOwnerAccount(v string) *ModifyInstanceVncPasswdRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceVncPasswdResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceVncPasswdResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceVncPasswdResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceVncPasswdResponse) SetRequestId(v string) *ModifyInstanceVncPasswdResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceSpecRequest struct {
	OwnerId                 *int64                               `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string                              `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64                               `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId              *string                              `json:"InstanceId" xml:"InstanceId" require:"true"`
	InstanceType            *string                              `json:"InstanceType" xml:"InstanceType"`
	InternetMaxBandwidthOut *int                                 `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	InternetMaxBandwidthIn  *int                                 `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	OwnerAccount            *string                              `json:"OwnerAccount" xml:"OwnerAccount"`
	Temporary               *ModifyInstanceSpecRequestTemporary  `json:"Temporary" xml:"Temporary" require:"true" type:"Struct"`
	Async                   *bool                                `json:"Async" xml:"Async"`
	AllowMigrateAcrossZone  *bool                                `json:"AllowMigrateAcrossZone" xml:"AllowMigrateAcrossZone"`
	SystemDisk              *ModifyInstanceSpecRequestSystemDisk `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	ClientToken             *string                              `json:"ClientToken" xml:"ClientToken"`
}

func (s ModifyInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequest) SetOwnerId(v int64) *ModifyInstanceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetResourceOwnerAccount(v string) *ModifyInstanceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetResourceOwnerId(v int64) *ModifyInstanceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceId(v string) *ModifyInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceType(v string) *ModifyInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInternetMaxBandwidthOut(v int) *ModifyInstanceSpecRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInternetMaxBandwidthIn(v int) *ModifyInstanceSpecRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetOwnerAccount(v string) *ModifyInstanceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetTemporary(v *ModifyInstanceSpecRequestTemporary) *ModifyInstanceSpecRequest {
	s.Temporary = v
	return s
}

func (s *ModifyInstanceSpecRequest) SetAsync(v bool) *ModifyInstanceSpecRequest {
	s.Async = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetAllowMigrateAcrossZone(v bool) *ModifyInstanceSpecRequest {
	s.AllowMigrateAcrossZone = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetSystemDisk(v *ModifyInstanceSpecRequestSystemDisk) *ModifyInstanceSpecRequest {
	s.SystemDisk = v
	return s
}

func (s *ModifyInstanceSpecRequest) SetClientToken(v string) *ModifyInstanceSpecRequest {
	s.ClientToken = &v
	return s
}

type ModifyInstanceSpecRequestTemporary struct {
	StartTime               *string `json:"StartTime" xml:"StartTime"`
	EndTime                 *string `json:"EndTime" xml:"EndTime"`
	InternetMaxBandwidthOut *int    `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
}

func (s ModifyInstanceSpecRequestTemporary) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequestTemporary) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequestTemporary) SetStartTime(v string) *ModifyInstanceSpecRequestTemporary {
	s.StartTime = &v
	return s
}

func (s *ModifyInstanceSpecRequestTemporary) SetEndTime(v string) *ModifyInstanceSpecRequestTemporary {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceSpecRequestTemporary) SetInternetMaxBandwidthOut(v int) *ModifyInstanceSpecRequestTemporary {
	s.InternetMaxBandwidthOut = &v
	return s
}

type ModifyInstanceSpecRequestSystemDisk struct {
	Category *string `json:"Category" xml:"Category"`
}

func (s ModifyInstanceSpecRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequestSystemDisk) SetCategory(v string) *ModifyInstanceSpecRequestSystemDisk {
	s.Category = &v
	return s
}

type ModifyInstanceSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponse) SetRequestId(v string) *ModifyInstanceSpecResponse {
	s.RequestId = &v
	return s
}

type ModifyInstanceNetworkSpecRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId              *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	InternetMaxBandwidthOut *int    `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	InternetMaxBandwidthIn  *int    `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	NetworkChargeType       *string `json:"NetworkChargeType" xml:"NetworkChargeType"`
	AllocatePublicIp        *bool   `json:"AllocatePublicIp" xml:"AllocatePublicIp"`
	StartTime               *string `json:"StartTime" xml:"StartTime"`
	EndTime                 *string `json:"EndTime" xml:"EndTime"`
	AutoPay                 *bool   `json:"AutoPay" xml:"AutoPay"`
	ClientToken             *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyInstanceNetworkSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNetworkSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNetworkSpecRequest) SetOwnerId(v int64) *ModifyInstanceNetworkSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetResourceOwnerAccount(v string) *ModifyInstanceNetworkSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetResourceOwnerId(v int64) *ModifyInstanceNetworkSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInstanceId(v string) *ModifyInstanceNetworkSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInternetMaxBandwidthOut(v int) *ModifyInstanceNetworkSpecRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetInternetMaxBandwidthIn(v int) *ModifyInstanceNetworkSpecRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetNetworkChargeType(v string) *ModifyInstanceNetworkSpecRequest {
	s.NetworkChargeType = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetAllocatePublicIp(v bool) *ModifyInstanceNetworkSpecRequest {
	s.AllocatePublicIp = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetStartTime(v string) *ModifyInstanceNetworkSpecRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetEndTime(v string) *ModifyInstanceNetworkSpecRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetAutoPay(v bool) *ModifyInstanceNetworkSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetClientToken(v string) *ModifyInstanceNetworkSpecRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceNetworkSpecRequest) SetOwnerAccount(v string) *ModifyInstanceNetworkSpecRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyInstanceNetworkSpecResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	OrderId   *string `json:"OrderId" xml:"OrderId" require:"true"`
}

func (s ModifyInstanceNetworkSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceNetworkSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceNetworkSpecResponse) SetRequestId(v string) *ModifyInstanceNetworkSpecResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceNetworkSpecResponse) SetOrderId(v string) *ModifyInstanceNetworkSpecResponse {
	s.OrderId = &v
	return s
}

type ModifyInstanceAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string   `json:"InstanceId" xml:"InstanceId" require:"true"`
	Password             *string   `json:"Password" xml:"Password"`
	HostName             *string   `json:"HostName" xml:"HostName"`
	InstanceName         *string   `json:"InstanceName" xml:"InstanceName"`
	Description          *string   `json:"Description" xml:"Description"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
	UserData             *string   `json:"UserData" xml:"UserData"`
	Recyclable           *bool     `json:"Recyclable" xml:"Recyclable"`
	CreditSpecification  *string   `json:"CreditSpecification" xml:"CreditSpecification"`
	DeletionProtection   *bool     `json:"DeletionProtection" xml:"DeletionProtection"`
	SecurityGroupIds     []*string `json:"SecurityGroupIds" xml:"SecurityGroupIds" type:"Repeated"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetOwnerId(v int64) *ModifyInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetPassword(v string) *ModifyInstanceAttributeRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetHostName(v string) *ModifyInstanceAttributeRequest {
	s.HostName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceName(v string) *ModifyInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetDescription(v string) *ModifyInstanceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetUserData(v string) *ModifyInstanceAttributeRequest {
	s.UserData = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetRecyclable(v bool) *ModifyInstanceAttributeRequest {
	s.Recyclable = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetCreditSpecification(v string) *ModifyInstanceAttributeRequest {
	s.CreditSpecification = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetDeletionProtection(v bool) *ModifyInstanceAttributeRequest {
	s.DeletionProtection = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetSecurityGroupIds(v []*string) *ModifyInstanceAttributeRequest {
	s.SecurityGroupIds = v
	return s
}

type ModifyInstanceAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetRequestId(v string) *ModifyInstanceAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyImageSharePermissionRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string   `json:"ImageId" xml:"ImageId" require:"true"`
	AddAccount           []*string `json:"AddAccount" xml:"AddAccount" type:"Repeated"`
	RemoveAccount        []*string `json:"RemoveAccount" xml:"RemoveAccount" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionRequest) SetOwnerId(v int64) *ModifyImageSharePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetResourceOwnerAccount(v string) *ModifyImageSharePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetResourceOwnerId(v int64) *ModifyImageSharePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRegionId(v string) *ModifyImageSharePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetImageId(v string) *ModifyImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetAddAccount(v []*string) *ModifyImageSharePermissionRequest {
	s.AddAccount = v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRemoveAccount(v []*string) *ModifyImageSharePermissionRequest {
	s.RemoveAccount = v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetOwnerAccount(v string) *ModifyImageSharePermissionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyImageSharePermissionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponse) SetRequestId(v string) *ModifyImageSharePermissionResponse {
	s.RequestId = &v
	return s
}

type ModifyImageShareGroupPermissionRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string   `json:"ImageId" xml:"ImageId" require:"true"`
	AddGroup             []*string `json:"AddGroup" xml:"AddGroup" type:"Repeated"`
	RemoveGroup          []*string `json:"RemoveGroup" xml:"RemoveGroup" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyImageShareGroupPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageShareGroupPermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageShareGroupPermissionRequest) SetOwnerId(v int64) *ModifyImageShareGroupPermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetResourceOwnerAccount(v string) *ModifyImageShareGroupPermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetResourceOwnerId(v int64) *ModifyImageShareGroupPermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetRegionId(v string) *ModifyImageShareGroupPermissionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetImageId(v string) *ModifyImageShareGroupPermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetAddGroup(v []*string) *ModifyImageShareGroupPermissionRequest {
	s.AddGroup = v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetRemoveGroup(v []*string) *ModifyImageShareGroupPermissionRequest {
	s.RemoveGroup = v
	return s
}

func (s *ModifyImageShareGroupPermissionRequest) SetOwnerAccount(v string) *ModifyImageShareGroupPermissionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyImageShareGroupPermissionResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyImageShareGroupPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageShareGroupPermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageShareGroupPermissionResponse) SetRequestId(v string) *ModifyImageShareGroupPermissionResponse {
	s.RequestId = &v
	return s
}

type ModifyImageAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId" require:"true"`
	ImageName            *string `json:"ImageName" xml:"ImageName"`
	Status               *string `json:"Status" xml:"Status"`
	ImageFamily          *string `json:"ImageFamily" xml:"ImageFamily"`
	BootMode             *string `json:"BootMode" xml:"BootMode"`
	Description          *string `json:"Description" xml:"Description"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyImageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeRequest) SetOwnerId(v int64) *ModifyImageAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetResourceOwnerAccount(v string) *ModifyImageAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetResourceOwnerId(v int64) *ModifyImageAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetRegionId(v string) *ModifyImageAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageId(v string) *ModifyImageAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageName(v string) *ModifyImageAttributeRequest {
	s.ImageName = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetStatus(v string) *ModifyImageAttributeRequest {
	s.Status = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageFamily(v string) *ModifyImageAttributeRequest {
	s.ImageFamily = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetBootMode(v string) *ModifyImageAttributeRequest {
	s.BootMode = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetDescription(v string) *ModifyImageAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetOwnerAccount(v string) *ModifyImageAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyImageAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyImageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponse) SetRequestId(v string) *ModifyImageAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyEipAddressAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	Bandwidth            *string `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyEipAddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeRequest) SetOwnerId(v int64) *ModifyEipAddressAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetResourceOwnerAccount(v string) *ModifyEipAddressAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetResourceOwnerId(v int64) *ModifyEipAddressAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetRegionId(v string) *ModifyEipAddressAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetAllocationId(v string) *ModifyEipAddressAttributeRequest {
	s.AllocationId = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetBandwidth(v string) *ModifyEipAddressAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyEipAddressAttributeRequest) SetOwnerAccount(v string) *ModifyEipAddressAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyEipAddressAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyEipAddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEipAddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyEipAddressAttributeResponse) SetRequestId(v string) *ModifyEipAddressAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyDiskAttributeRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId               *string   `json:"DiskId" xml:"DiskId"`
	DiskIds              []*string `json:"DiskIds" xml:"DiskIds" type:"Repeated"`
	DiskName             *string   `json:"DiskName" xml:"DiskName"`
	Description          *string   `json:"Description" xml:"Description"`
	DeleteWithInstance   *bool     `json:"DeleteWithInstance" xml:"DeleteWithInstance"`
	DeleteAutoSnapshot   *bool     `json:"DeleteAutoSnapshot" xml:"DeleteAutoSnapshot"`
	EnableAutoSnapshot   *bool     `json:"EnableAutoSnapshot" xml:"EnableAutoSnapshot"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyDiskAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskAttributeRequest) SetOwnerId(v int64) *ModifyDiskAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDiskAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetResourceOwnerId(v int64) *ModifyDiskAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskId(v string) *ModifyDiskAttributeRequest {
	s.DiskId = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskIds(v []*string) *ModifyDiskAttributeRequest {
	s.DiskIds = v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDiskName(v string) *ModifyDiskAttributeRequest {
	s.DiskName = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDescription(v string) *ModifyDiskAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDeleteWithInstance(v bool) *ModifyDiskAttributeRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetDeleteAutoSnapshot(v bool) *ModifyDiskAttributeRequest {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetEnableAutoSnapshot(v bool) *ModifyDiskAttributeRequest {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *ModifyDiskAttributeRequest) SetOwnerAccount(v string) *ModifyDiskAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDiskAttributeResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyDiskAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskAttributeResponse) SetRequestId(v string) *ModifyDiskAttributeResponse {
	s.RequestId = &v
	return s
}

type ModifyAutoSnapshotPolicyRequest struct {
	OwnerId                           *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount              *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId                   *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SystemDiskPolicyEnabled           *bool   `json:"SystemDiskPolicyEnabled" xml:"SystemDiskPolicyEnabled"`
	SystemDiskPolicyTimePeriod        *int    `json:"SystemDiskPolicyTimePeriod" xml:"SystemDiskPolicyTimePeriod"`
	SystemDiskPolicyRetentionDays     *int    `json:"SystemDiskPolicyRetentionDays" xml:"SystemDiskPolicyRetentionDays"`
	SystemDiskPolicyRetentionLastWeek *bool   `json:"SystemDiskPolicyRetentionLastWeek" xml:"SystemDiskPolicyRetentionLastWeek"`
	DataDiskPolicyEnabled             *bool   `json:"DataDiskPolicyEnabled" xml:"DataDiskPolicyEnabled"`
	DataDiskPolicyTimePeriod          *int    `json:"DataDiskPolicyTimePeriod" xml:"DataDiskPolicyTimePeriod"`
	DataDiskPolicyRetentionDays       *int    `json:"DataDiskPolicyRetentionDays" xml:"DataDiskPolicyRetentionDays"`
	DataDiskPolicyRetentionLastWeek   *bool   `json:"DataDiskPolicyRetentionLastWeek" xml:"DataDiskPolicyRetentionLastWeek"`
	OwnerAccount                      *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ModifyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyRequest) SetOwnerId(v int64) *ModifyAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *ModifyAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *ModifyAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyEnabled(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyEnabled = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyTimePeriod(v int) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyTimePeriod = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyRetentionDays(v int) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyRetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetSystemDiskPolicyRetentionLastWeek(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.SystemDiskPolicyRetentionLastWeek = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyEnabled(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyEnabled = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyTimePeriod(v int) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyTimePeriod = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyRetentionDays(v int) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyRetentionDays = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetDataDiskPolicyRetentionLastWeek(v bool) *ModifyAutoSnapshotPolicyRequest {
	s.DataDiskPolicyRetentionLastWeek = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetOwnerAccount(v string) *ModifyAutoSnapshotPolicyRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyAutoSnapshotPolicyResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s ModifyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyResponse) SetRequestId(v string) *ModifyAutoSnapshotPolicyResponse {
	s.RequestId = &v
	return s
}

type LeaveSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s LeaveSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupRequest) SetOwnerId(v int64) *LeaveSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetResourceOwnerAccount(v string) *LeaveSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetResourceOwnerId(v int64) *LeaveSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetSecurityGroupId(v string) *LeaveSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetInstanceId(v string) *LeaveSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetOwnerAccount(v string) *LeaveSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type LeaveSecurityGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s LeaveSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponse) SetRequestId(v string) *LeaveSecurityGroupResponse {
	s.RequestId = &v
	return s
}

type JoinSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s JoinSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupRequest) SetOwnerId(v int64) *JoinSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetResourceOwnerAccount(v string) *JoinSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetResourceOwnerId(v int64) *JoinSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetSecurityGroupId(v string) *JoinSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetInstanceId(v string) *JoinSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetOwnerAccount(v string) *JoinSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type JoinSecurityGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s JoinSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponse) SetRequestId(v string) *JoinSecurityGroupResponse {
	s.RequestId = &v
	return s
}

type DetachDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DetachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskRequest) GoString() string {
	return s.String()
}

func (s *DetachDiskRequest) SetOwnerId(v int64) *DetachDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *DetachDiskRequest) SetResourceOwnerAccount(v string) *DetachDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DetachDiskRequest) SetResourceOwnerId(v int64) *DetachDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachDiskRequest) SetInstanceId(v string) *DetachDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *DetachDiskRequest) SetDiskId(v string) *DetachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DetachDiskRequest) SetDeleteWithInstance(v bool) *DetachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *DetachDiskRequest) SetOwnerAccount(v string) *DetachDiskRequest {
	s.OwnerAccount = &v
	return s
}

type DetachDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DetachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponse) GoString() string {
	return s.String()
}

func (s *DetachDiskResponse) SetRequestId(v string) *DetachDiskResponse {
	s.RequestId = &v
	return s
}

type DescribeZonesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Verbose              *bool   `json:"Verbose" xml:"Verbose"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	SpotStrategy         *string `json:"SpotStrategy" xml:"SpotStrategy"`
	AcceptLanguage       *string `json:"AcceptLanguage" xml:"AcceptLanguage"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetOwnerId(v int64) *DescribeZonesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeZonesRequest) SetResourceOwnerAccount(v string) *DescribeZonesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeZonesRequest) SetResourceOwnerId(v int64) *DescribeZonesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeZonesRequest) SetRegionId(v string) *DescribeZonesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeZonesRequest) SetOwnerAccount(v string) *DescribeZonesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeZonesRequest) SetVerbose(v bool) *DescribeZonesRequest {
	s.Verbose = &v
	return s
}

func (s *DescribeZonesRequest) SetInstanceChargeType(v string) *DescribeZonesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeZonesRequest) SetSpotStrategy(v string) *DescribeZonesRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeZonesRequest) SetAcceptLanguage(v string) *DescribeZonesRequest {
	s.AcceptLanguage = &v
	return s
}

type DescribeZonesResponse struct {
	RequestId *string                     `json:"RequestId" xml:"RequestId" require:"true"`
	Zones     *DescribeZonesResponseZones `json:"Zones" xml:"Zones" require:"true" type:"Struct"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetRequestId(v string) *DescribeZonesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponse) SetZones(v *DescribeZonesResponseZones) *DescribeZonesResponse {
	s.Zones = v
	return s
}

type DescribeZonesResponseZones struct {
	Zone []*DescribeZonesResponseZonesZone `json:"Zone" xml:"Zone" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZones) SetZone(v []*DescribeZonesResponseZonesZone) *DescribeZonesResponseZones {
	s.Zone = v
	return s
}

type DescribeZonesResponseZonesZone struct {
	ZoneId                      *string                                                    `json:"ZoneId" xml:"ZoneId" require:"true"`
	LocalName                   *string                                                    `json:"LocalName" xml:"LocalName" require:"true"`
	AvailableResources          *DescribeZonesResponseZonesZoneAvailableResources          `json:"AvailableResources" xml:"AvailableResources" require:"true" type:"Struct"`
	AvailableResourceCreation   *DescribeZonesResponseZonesZoneAvailableResourceCreation   `json:"AvailableResourceCreation" xml:"AvailableResourceCreation" require:"true" type:"Struct"`
	AvailableDiskCategories     *DescribeZonesResponseZonesZoneAvailableDiskCategories     `json:"AvailableDiskCategories" xml:"AvailableDiskCategories" require:"true" type:"Struct"`
	AvailableInstanceTypes      *DescribeZonesResponseZonesZoneAvailableInstanceTypes      `json:"AvailableInstanceTypes" xml:"AvailableInstanceTypes" require:"true" type:"Struct"`
	AvailableVolumeCategories   *DescribeZonesResponseZonesZoneAvailableVolumeCategories   `json:"AvailableVolumeCategories" xml:"AvailableVolumeCategories" require:"true" type:"Struct"`
	AvailableDedicatedHostTypes *DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes `json:"AvailableDedicatedHostTypes" xml:"AvailableDedicatedHostTypes" require:"true" type:"Struct"`
	DedicatedHostGenerations    *DescribeZonesResponseZonesZoneDedicatedHostGenerations    `json:"DedicatedHostGenerations" xml:"DedicatedHostGenerations" require:"true" type:"Struct"`
}

func (s DescribeZonesResponseZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZone) SetZoneId(v string) *DescribeZonesResponseZonesZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetLocalName(v string) *DescribeZonesResponseZonesZone {
	s.LocalName = &v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableResources(v *DescribeZonesResponseZonesZoneAvailableResources) *DescribeZonesResponseZonesZone {
	s.AvailableResources = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableResourceCreation(v *DescribeZonesResponseZonesZoneAvailableResourceCreation) *DescribeZonesResponseZonesZone {
	s.AvailableResourceCreation = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableDiskCategories(v *DescribeZonesResponseZonesZoneAvailableDiskCategories) *DescribeZonesResponseZonesZone {
	s.AvailableDiskCategories = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableInstanceTypes(v *DescribeZonesResponseZonesZoneAvailableInstanceTypes) *DescribeZonesResponseZonesZone {
	s.AvailableInstanceTypes = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableVolumeCategories(v *DescribeZonesResponseZonesZoneAvailableVolumeCategories) *DescribeZonesResponseZonesZone {
	s.AvailableVolumeCategories = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetAvailableDedicatedHostTypes(v *DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes) *DescribeZonesResponseZonesZone {
	s.AvailableDedicatedHostTypes = v
	return s
}

func (s *DescribeZonesResponseZonesZone) SetDedicatedHostGenerations(v *DescribeZonesResponseZonesZoneDedicatedHostGenerations) *DescribeZonesResponseZonesZone {
	s.DedicatedHostGenerations = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResources struct {
	ResourcesInfo []*DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo `json:"ResourcesInfo" xml:"ResourcesInfo" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResources) SetResourcesInfo(v []*DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) *DescribeZonesResponseZonesZoneAvailableResources {
	s.ResourcesInfo = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo struct {
	IoOptimized          *bool                                                                              `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	SystemDiskCategories *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories `json:"SystemDiskCategories" xml:"SystemDiskCategories" require:"true" type:"Struct"`
	DataDiskCategories   *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories   `json:"DataDiskCategories" xml:"DataDiskCategories" require:"true" type:"Struct"`
	NetworkTypes         *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes         `json:"NetworkTypes" xml:"NetworkTypes" require:"true" type:"Struct"`
	InstanceTypes        *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes        `json:"InstanceTypes" xml:"InstanceTypes" require:"true" type:"Struct"`
	InstanceTypeFamilies *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies `json:"InstanceTypeFamilies" xml:"InstanceTypeFamilies" require:"true" type:"Struct"`
	InstanceGenerations  *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations  `json:"InstanceGenerations" xml:"InstanceGenerations" require:"true" type:"Struct"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetIoOptimized(v bool) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetSystemDiskCategories(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.SystemDiskCategories = v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetDataDiskCategories(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.DataDiskCategories = v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetNetworkTypes(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.NetworkTypes = v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetInstanceTypes(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.InstanceTypes = v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetInstanceTypeFamilies(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.InstanceTypeFamilies = v
	return s
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo) SetInstanceGenerations(v *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfo {
	s.InstanceGenerations = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories struct {
	SupportedSystemDiskCategory []*string `json:"supportedSystemDiskCategory" xml:"supportedSystemDiskCategory" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories) SetSupportedSystemDiskCategory(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoSystemDiskCategories {
	s.SupportedSystemDiskCategory = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories struct {
	SupportedDataDiskCategory []*string `json:"supportedDataDiskCategory" xml:"supportedDataDiskCategory" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories) SetSupportedDataDiskCategory(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoDataDiskCategories {
	s.SupportedDataDiskCategory = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes struct {
	SupportedNetworkCategory []*string `json:"supportedNetworkCategory" xml:"supportedNetworkCategory" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes) SetSupportedNetworkCategory(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoNetworkTypes {
	s.SupportedNetworkCategory = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes struct {
	SupportedInstanceType []*string `json:"supportedInstanceType" xml:"supportedInstanceType" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes) SetSupportedInstanceType(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypes {
	s.SupportedInstanceType = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies struct {
	SupportedInstanceTypeFamily []*string `json:"supportedInstanceTypeFamily" xml:"supportedInstanceTypeFamily" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies) SetSupportedInstanceTypeFamily(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceTypeFamilies {
	s.SupportedInstanceTypeFamily = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations struct {
	SupportedInstanceGeneration []*string `json:"supportedInstanceGeneration" xml:"supportedInstanceGeneration" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations) SetSupportedInstanceGeneration(v []*string) *DescribeZonesResponseZonesZoneAvailableResourcesResourcesInfoInstanceGenerations {
	s.SupportedInstanceGeneration = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableResourceCreation struct {
	ResourceTypes []*string `json:"ResourceTypes" xml:"ResourceTypes" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableResourceCreation) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableResourceCreation) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableResourceCreation) SetResourceTypes(v []*string) *DescribeZonesResponseZonesZoneAvailableResourceCreation {
	s.ResourceTypes = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableDiskCategories struct {
	DiskCategories []*string `json:"DiskCategories" xml:"DiskCategories" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableDiskCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableDiskCategories) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableDiskCategories) SetDiskCategories(v []*string) *DescribeZonesResponseZonesZoneAvailableDiskCategories {
	s.DiskCategories = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableInstanceTypes struct {
	InstanceTypes []*string `json:"InstanceTypes" xml:"InstanceTypes" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableInstanceTypes) SetInstanceTypes(v []*string) *DescribeZonesResponseZonesZoneAvailableInstanceTypes {
	s.InstanceTypes = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableVolumeCategories struct {
	VolumeCategories []*string `json:"VolumeCategories" xml:"VolumeCategories" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableVolumeCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableVolumeCategories) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableVolumeCategories) SetVolumeCategories(v []*string) *DescribeZonesResponseZonesZoneAvailableVolumeCategories {
	s.VolumeCategories = v
	return s
}

type DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes struct {
	DedicatedHostType []*string `json:"DedicatedHostType" xml:"DedicatedHostType" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes) SetDedicatedHostType(v []*string) *DescribeZonesResponseZonesZoneAvailableDedicatedHostTypes {
	s.DedicatedHostType = v
	return s
}

type DescribeZonesResponseZonesZoneDedicatedHostGenerations struct {
	DedicatedHostGeneration []*string `json:"DedicatedHostGeneration" xml:"DedicatedHostGeneration" require:"true" type:"Repeated"`
}

func (s DescribeZonesResponseZonesZoneDedicatedHostGenerations) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseZonesZoneDedicatedHostGenerations) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseZonesZoneDedicatedHostGenerations) SetDedicatedHostGeneration(v []*string) *DescribeZonesResponseZonesZoneDedicatedHostGenerations {
	s.DedicatedHostGeneration = v
	return s
}

type DescribeVSwitchesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VpcId                *string `json:"VpcId" xml:"VpcId"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	IsDefault            *bool   `json:"IsDefault" xml:"IsDefault"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesRequest) SetOwnerId(v int64) *DescribeVSwitchesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetResourceOwnerAccount(v string) *DescribeVSwitchesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetResourceOwnerId(v int64) *DescribeVSwitchesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVpcId(v string) *DescribeVSwitchesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchId(v string) *DescribeVSwitchesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetZoneId(v string) *DescribeVSwitchesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetRegionId(v string) *DescribeVSwitchesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetIsDefault(v bool) *DescribeVSwitchesRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageNumber(v int) *DescribeVSwitchesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageSize(v int) *DescribeVSwitchesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetOwnerAccount(v string) *DescribeVSwitchesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVSwitchesResponse struct {
	RequestId  *string                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                `json:"PageSize" xml:"PageSize" require:"true"`
	VSwitches  *DescribeVSwitchesResponseVSwitches `json:"VSwitches" xml:"VSwitches" require:"true" type:"Struct"`
}

func (s DescribeVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponse) SetRequestId(v string) *DescribeVSwitchesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetTotalCount(v int) *DescribeVSwitchesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetPageNumber(v int) *DescribeVSwitchesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetPageSize(v int) *DescribeVSwitchesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetVSwitches(v *DescribeVSwitchesResponseVSwitches) *DescribeVSwitchesResponse {
	s.VSwitches = v
	return s
}

type DescribeVSwitchesResponseVSwitches struct {
	VSwitch []*DescribeVSwitchesResponseVSwitchesVSwitch `json:"VSwitch" xml:"VSwitch" require:"true" type:"Repeated"`
}

func (s DescribeVSwitchesResponseVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitches) SetVSwitch(v []*DescribeVSwitchesResponseVSwitchesVSwitch) *DescribeVSwitchesResponseVSwitches {
	s.VSwitch = v
	return s
}

type DescribeVSwitchesResponseVSwitchesVSwitch struct {
	VSwitchId               *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	VpcId                   *string `json:"VpcId" xml:"VpcId" require:"true"`
	Status                  *string `json:"Status" xml:"Status" require:"true"`
	CidrBlock               *string `json:"CidrBlock" xml:"CidrBlock" require:"true"`
	ZoneId                  *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	AvailableIpAddressCount *int64  `json:"AvailableIpAddressCount" xml:"AvailableIpAddressCount" require:"true"`
	Description             *string `json:"Description" xml:"Description" require:"true"`
	VSwitchName             *string `json:"VSwitchName" xml:"VSwitchName" require:"true"`
	CreationTime            *string `json:"CreationTime" xml:"CreationTime" require:"true"`
	IsDefault               *bool   `json:"IsDefault" xml:"IsDefault" require:"true"`
	ResourceGroupId         *string `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
}

func (s DescribeVSwitchesResponseVSwitchesVSwitch) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVSwitchId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVpcId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VpcId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetStatus(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetCidrBlock(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetZoneId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.ZoneId = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetAvailableIpAddressCount(v int64) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetDescription(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetVSwitchName(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetCreationTime(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.CreationTime = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetIsDefault(v bool) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.IsDefault = &v
	return s
}

func (s *DescribeVSwitchesResponseVSwitchesVSwitch) SetResourceGroupId(v string) *DescribeVSwitchesResponseVSwitchesVSwitch {
	s.ResourceGroupId = &v
	return s
}

type DescribeVRoutersRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VRouterId            *string `json:"VRouterId" xml:"VRouterId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeVRoutersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersRequest) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersRequest) SetOwnerId(v int64) *DescribeVRoutersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetResourceOwnerAccount(v string) *DescribeVRoutersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVRoutersRequest) SetResourceOwnerId(v int64) *DescribeVRoutersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetVRouterId(v string) *DescribeVRoutersRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetRegionId(v string) *DescribeVRoutersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageNumber(v int) *DescribeVRoutersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVRoutersRequest) SetPageSize(v int) *DescribeVRoutersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVRoutersRequest) SetOwnerAccount(v string) *DescribeVRoutersRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVRoutersResponse struct {
	RequestId  *string                           `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                              `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                              `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                              `json:"PageSize" xml:"PageSize" require:"true"`
	VRouters   *DescribeVRoutersResponseVRouters `json:"VRouters" xml:"VRouters" require:"true" type:"Struct"`
}

func (s DescribeVRoutersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponse) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponse) SetRequestId(v string) *DescribeVRoutersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVRoutersResponse) SetTotalCount(v int) *DescribeVRoutersResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVRoutersResponse) SetPageNumber(v int) *DescribeVRoutersResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVRoutersResponse) SetPageSize(v int) *DescribeVRoutersResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVRoutersResponse) SetVRouters(v *DescribeVRoutersResponseVRouters) *DescribeVRoutersResponse {
	s.VRouters = v
	return s
}

type DescribeVRoutersResponseVRouters struct {
	VRouter []*DescribeVRoutersResponseVRoutersVRouter `json:"VRouter" xml:"VRouter" require:"true" type:"Repeated"`
}

func (s DescribeVRoutersResponseVRouters) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRouters) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRouters) SetVRouter(v []*DescribeVRoutersResponseVRoutersVRouter) *DescribeVRoutersResponseVRouters {
	s.VRouter = v
	return s
}

type DescribeVRoutersResponseVRoutersVRouter struct {
	RegionId      *string                                               `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId         *string                                               `json:"VpcId" xml:"VpcId" require:"true"`
	VRouterName   *string                                               `json:"VRouterName" xml:"VRouterName" require:"true"`
	Description   *string                                               `json:"Description" xml:"Description" require:"true"`
	VRouterId     *string                                               `json:"VRouterId" xml:"VRouterId" require:"true"`
	CreationTime  *string                                               `json:"CreationTime" xml:"CreationTime" require:"true"`
	RouteTableIds *DescribeVRoutersResponseVRoutersVRouterRouteTableIds `json:"RouteTableIds" xml:"RouteTableIds" require:"true" type:"Struct"`
}

func (s DescribeVRoutersResponseVRoutersVRouter) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRoutersVRouter) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetRegionId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.RegionId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVpcId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VpcId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVRouterName(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VRouterName = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetDescription(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.Description = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetVRouterId(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.VRouterId = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetCreationTime(v string) *DescribeVRoutersResponseVRoutersVRouter {
	s.CreationTime = &v
	return s
}

func (s *DescribeVRoutersResponseVRoutersVRouter) SetRouteTableIds(v *DescribeVRoutersResponseVRoutersVRouterRouteTableIds) *DescribeVRoutersResponseVRoutersVRouter {
	s.RouteTableIds = v
	return s
}

type DescribeVRoutersResponseVRoutersVRouterRouteTableIds struct {
	RouteTableId []*string `json:"RouteTableId" xml:"RouteTableId" require:"true" type:"Repeated"`
}

func (s DescribeVRoutersResponseVRoutersVRouterRouteTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVRoutersResponseVRoutersVRouterRouteTableIds) GoString() string {
	return s.String()
}

func (s *DescribeVRoutersResponseVRoutersVRouterRouteTableIds) SetRouteTableId(v []*string) *DescribeVRoutersResponseVRoutersVRouterRouteTableIds {
	s.RouteTableId = v
	return s
}

type DescribeVpcsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VpcId                *string `json:"VpcId" xml:"VpcId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	IsDefault            *bool   `json:"IsDefault" xml:"IsDefault"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeVpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcsRequest) SetOwnerId(v int64) *DescribeVpcsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVpcsRequest) SetResourceOwnerAccount(v string) *DescribeVpcsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVpcsRequest) SetResourceOwnerId(v int64) *DescribeVpcsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVpcsRequest) SetVpcId(v string) *DescribeVpcsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsRequest) SetRegionId(v string) *DescribeVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcsRequest) SetIsDefault(v bool) *DescribeVpcsRequest {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageNumber(v int) *DescribeVpcsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcsRequest) SetPageSize(v int) *DescribeVpcsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsRequest) SetOwnerAccount(v string) *DescribeVpcsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeVpcsResponse struct {
	RequestId  *string                   `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                      `json:"PageSize" xml:"PageSize" require:"true"`
	Vpcs       *DescribeVpcsResponseVpcs `json:"Vpcs" xml:"Vpcs" require:"true" type:"Struct"`
}

func (s DescribeVpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponse) SetRequestId(v string) *DescribeVpcsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcsResponse) SetTotalCount(v int) *DescribeVpcsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpcsResponse) SetPageNumber(v int) *DescribeVpcsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcsResponse) SetPageSize(v int) *DescribeVpcsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcsResponse) SetVpcs(v *DescribeVpcsResponseVpcs) *DescribeVpcsResponse {
	s.Vpcs = v
	return s
}

type DescribeVpcsResponseVpcs struct {
	Vpc []*DescribeVpcsResponseVpcsVpc `json:"Vpc" xml:"Vpc" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcs) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcs) SetVpc(v []*DescribeVpcsResponseVpcsVpc) *DescribeVpcsResponseVpcs {
	s.Vpc = v
	return s
}

type DescribeVpcsResponseVpcsVpc struct {
	VpcId        *string                                `json:"VpcId" xml:"VpcId" require:"true"`
	RegionId     *string                                `json:"RegionId" xml:"RegionId" require:"true"`
	Status       *string                                `json:"Status" xml:"Status" require:"true"`
	VpcName      *string                                `json:"VpcName" xml:"VpcName" require:"true"`
	CreationTime *string                                `json:"CreationTime" xml:"CreationTime" require:"true"`
	CidrBlock    *string                                `json:"CidrBlock" xml:"CidrBlock" require:"true"`
	VRouterId    *string                                `json:"VRouterId" xml:"VRouterId" require:"true"`
	Description  *string                                `json:"Description" xml:"Description" require:"true"`
	IsDefault    *bool                                  `json:"IsDefault" xml:"IsDefault" require:"true"`
	VSwitchIds   *DescribeVpcsResponseVpcsVpcVSwitchIds `json:"VSwitchIds" xml:"VSwitchIds" require:"true" type:"Struct"`
	UserCidrs    *DescribeVpcsResponseVpcsVpcUserCidrs  `json:"UserCidrs" xml:"UserCidrs" require:"true" type:"Struct"`
}

func (s DescribeVpcsResponseVpcsVpc) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpc) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpc) SetVpcId(v string) *DescribeVpcsResponseVpcsVpc {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetRegionId(v string) *DescribeVpcsResponseVpcsVpc {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetStatus(v string) *DescribeVpcsResponseVpcsVpc {
	s.Status = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVpcName(v string) *DescribeVpcsResponseVpcsVpc {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetCreationTime(v string) *DescribeVpcsResponseVpcsVpc {
	s.CreationTime = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetCidrBlock(v string) *DescribeVpcsResponseVpcsVpc {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVRouterId(v string) *DescribeVpcsResponseVpcsVpc {
	s.VRouterId = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetDescription(v string) *DescribeVpcsResponseVpcsVpc {
	s.Description = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetIsDefault(v bool) *DescribeVpcsResponseVpcsVpc {
	s.IsDefault = &v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetVSwitchIds(v *DescribeVpcsResponseVpcsVpcVSwitchIds) *DescribeVpcsResponseVpcsVpc {
	s.VSwitchIds = v
	return s
}

func (s *DescribeVpcsResponseVpcsVpc) SetUserCidrs(v *DescribeVpcsResponseVpcsVpcUserCidrs) *DescribeVpcsResponseVpcsVpc {
	s.UserCidrs = v
	return s
}

type DescribeVpcsResponseVpcsVpcVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId" xml:"VSwitchId" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcVSwitchIds) SetVSwitchId(v []*string) *DescribeVpcsResponseVpcsVpcVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeVpcsResponseVpcsVpcUserCidrs struct {
	UserCidr []*string `json:"UserCidr" xml:"UserCidr" require:"true" type:"Repeated"`
}

func (s DescribeVpcsResponseVpcsVpcUserCidrs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcsResponseVpcsVpcUserCidrs) GoString() string {
	return s.String()
}

func (s *DescribeVpcsResponseVpcsVpcUserCidrs) SetUserCidr(v []*string) *DescribeVpcsResponseVpcsVpcUserCidrs {
	s.UserCidr = v
	return s
}

type DescribeSnapshotsRequest struct {
	OwnerId              *int64                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string                        `json:"InstanceId" xml:"InstanceId"`
	DiskId               *string                        `json:"DiskId" xml:"DiskId"`
	SnapshotLinkId       *string                        `json:"SnapshotLinkId" xml:"SnapshotLinkId"`
	RegionId             *string                        `json:"RegionId" xml:"RegionId" require:"true"`
	SnapshotIds          *string                        `json:"SnapshotIds" xml:"SnapshotIds"`
	PageNumber           *int                           `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                           `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string                        `json:"OwnerAccount" xml:"OwnerAccount"`
	SnapshotName         *string                        `json:"SnapshotName" xml:"SnapshotName"`
	Status               *string                        `json:"Status" xml:"Status"`
	SnapshotType         *string                        `json:"SnapshotType" xml:"SnapshotType"`
	Usage                *string                        `json:"Usage" xml:"Usage"`
	SourceDiskType       *string                        `json:"SourceDiskType" xml:"SourceDiskType"`
	Tag                  []*DescribeSnapshotsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	Encrypted            *bool                          `json:"Encrypted" xml:"Encrypted"`
	ResourceGroupId      *string                        `json:"ResourceGroupId" xml:"ResourceGroupId"`
	DryRun               *bool                          `json:"DryRun" xml:"DryRun"`
	KMSKeyId             *string                        `json:"KMSKeyId" xml:"KMSKeyId"`
	Category             *string                        `json:"Category" xml:"Category"`
}

func (s DescribeSnapshotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequest) SetOwnerId(v int64) *DescribeSnapshotsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceOwnerAccount(v string) *DescribeSnapshotsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceOwnerId(v int64) *DescribeSnapshotsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetInstanceId(v string) *DescribeSnapshotsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDiskId(v string) *DescribeSnapshotsRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotLinkId(v string) *DescribeSnapshotsRequest {
	s.SnapshotLinkId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetRegionId(v string) *DescribeSnapshotsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotIds(v string) *DescribeSnapshotsRequest {
	s.SnapshotIds = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageNumber(v int) *DescribeSnapshotsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageSize(v int) *DescribeSnapshotsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetOwnerAccount(v string) *DescribeSnapshotsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotName(v string) *DescribeSnapshotsRequest {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetStatus(v string) *DescribeSnapshotsRequest {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotType(v string) *DescribeSnapshotsRequest {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetUsage(v string) *DescribeSnapshotsRequest {
	s.Usage = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSourceDiskType(v string) *DescribeSnapshotsRequest {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetTag(v []*DescribeSnapshotsRequestTag) *DescribeSnapshotsRequest {
	s.Tag = v
	return s
}

func (s *DescribeSnapshotsRequest) SetEncrypted(v bool) *DescribeSnapshotsRequest {
	s.Encrypted = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetResourceGroupId(v string) *DescribeSnapshotsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDryRun(v bool) *DescribeSnapshotsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetKMSKeyId(v string) *DescribeSnapshotsRequest {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetCategory(v string) *DescribeSnapshotsRequest {
	s.Category = &v
	return s
}

type DescribeSnapshotsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeSnapshotsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequestTag) SetValue(v string) *DescribeSnapshotsRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeSnapshotsRequestTag) SetKey(v string) *DescribeSnapshotsRequestTag {
	s.Key = &v
	return s
}

type DescribeSnapshotsResponse struct {
	RequestId  *string                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                `json:"PageSize" xml:"PageSize" require:"true"`
	Snapshots  *DescribeSnapshotsResponseSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s DescribeSnapshotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponse) SetRequestId(v string) *DescribeSnapshotsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetTotalCount(v int) *DescribeSnapshotsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetPageNumber(v int) *DescribeSnapshotsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetPageSize(v int) *DescribeSnapshotsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetSnapshots(v *DescribeSnapshotsResponseSnapshots) *DescribeSnapshotsResponse {
	s.Snapshots = v
	return s
}

type DescribeSnapshotsResponseSnapshots struct {
	Snapshot []*DescribeSnapshotsResponseSnapshotsSnapshot `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s DescribeSnapshotsResponseSnapshots) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseSnapshots) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseSnapshots) SetSnapshot(v []*DescribeSnapshotsResponseSnapshotsSnapshot) *DescribeSnapshotsResponseSnapshots {
	s.Snapshot = v
	return s
}

type DescribeSnapshotsResponseSnapshotsSnapshot struct {
	SnapshotId        *string                                         `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	SnapshotSN        *string                                         `json:"SnapshotSN" xml:"SnapshotSN" require:"true"`
	SnapshotName      *string                                         `json:"SnapshotName" xml:"SnapshotName" require:"true"`
	Progress          *string                                         `json:"Progress" xml:"Progress" require:"true"`
	ProductCode       *string                                         `json:"ProductCode" xml:"ProductCode" require:"true"`
	SourceDiskId      *string                                         `json:"SourceDiskId" xml:"SourceDiskId" require:"true"`
	SourceDiskType    *string                                         `json:"SourceDiskType" xml:"SourceDiskType" require:"true"`
	RetentionDays     *int                                            `json:"RetentionDays" xml:"RetentionDays" require:"true"`
	Encrypted         *bool                                           `json:"Encrypted" xml:"Encrypted" require:"true"`
	SourceDiskSize    *string                                         `json:"SourceDiskSize" xml:"SourceDiskSize" require:"true"`
	Description       *string                                         `json:"Description" xml:"Description" require:"true"`
	CreationTime      *string                                         `json:"CreationTime" xml:"CreationTime" require:"true"`
	LastModifiedTime  *string                                         `json:"LastModifiedTime" xml:"LastModifiedTime" require:"true"`
	Status            *string                                         `json:"Status" xml:"Status" require:"true"`
	Usage             *string                                         `json:"Usage" xml:"Usage" require:"true"`
	SourceStorageType *string                                         `json:"SourceStorageType" xml:"SourceStorageType" require:"true"`
	RemainTime        *int                                            `json:"RemainTime" xml:"RemainTime" require:"true"`
	ResourceGroupId   *string                                         `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	KMSKeyId          *string                                         `json:"KMSKeyId" xml:"KMSKeyId" require:"true"`
	Category          *string                                         `json:"Category" xml:"Category" require:"true"`
	SnapshotType      *string                                         `json:"SnapshotType" xml:"SnapshotType" require:"true"`
	Tags              *DescribeSnapshotsResponseSnapshotsSnapshotTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeSnapshotsResponseSnapshotsSnapshot) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseSnapshotsSnapshot) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSnapshotId(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSnapshotSN(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SnapshotSN = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSnapshotName(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetProgress(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Progress = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetProductCode(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.ProductCode = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSourceDiskId(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSourceDiskType(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetRetentionDays(v int) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.RetentionDays = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetEncrypted(v bool) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Encrypted = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSourceDiskSize(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SourceDiskSize = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetDescription(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Description = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetCreationTime(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetLastModifiedTime(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.LastModifiedTime = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetStatus(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetUsage(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Usage = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSourceStorageType(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SourceStorageType = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetRemainTime(v int) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.RemainTime = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetResourceGroupId(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetKMSKeyId(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetCategory(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Category = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetSnapshotType(v string) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshot) SetTags(v *DescribeSnapshotsResponseSnapshotsSnapshotTags) *DescribeSnapshotsResponseSnapshotsSnapshot {
	s.Tags = v
	return s
}

type DescribeSnapshotsResponseSnapshotsSnapshotTags struct {
	Tag []*DescribeSnapshotsResponseSnapshotsSnapshotTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeSnapshotsResponseSnapshotsSnapshotTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseSnapshotsSnapshotTags) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshotTags) SetTag(v []*DescribeSnapshotsResponseSnapshotsSnapshotTagsTag) *DescribeSnapshotsResponseSnapshotsSnapshotTags {
	s.Tag = v
	return s
}

type DescribeSnapshotsResponseSnapshotsSnapshotTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeSnapshotsResponseSnapshotsSnapshotTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseSnapshotsSnapshotTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshotTagsTag) SetTagKey(v string) *DescribeSnapshotsResponseSnapshotsSnapshotTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeSnapshotsResponseSnapshotsSnapshotTagsTag) SetTagValue(v string) *DescribeSnapshotsResponseSnapshotsSnapshotTagsTag {
	s.TagValue = &v
	return s
}

type DescribeSecurityGroupsRequest struct {
	OwnerId              *int64                              `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                             `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId                *string                             `json:"VpcId" xml:"VpcId"`
	PageNumber           *int                                `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                                `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string                             `json:"OwnerAccount" xml:"OwnerAccount"`
	SecurityGroupIds     *string                             `json:"SecurityGroupIds" xml:"SecurityGroupIds"`
	Tag                  []*DescribeSecurityGroupsRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                             `json:"ResourceGroupId" xml:"ResourceGroupId"`
	NetworkType          *string                             `json:"NetworkType" xml:"NetworkType"`
	SecurityGroupId      *string                             `json:"SecurityGroupId" xml:"SecurityGroupId"`
	SecurityGroupName    *string                             `json:"SecurityGroupName" xml:"SecurityGroupName"`
	IsQueryEcsCount      *bool                               `json:"IsQueryEcsCount" xml:"IsQueryEcsCount"`
	FuzzyQuery           *bool                               `json:"FuzzyQuery" xml:"FuzzyQuery"`
	SecurityGroupType    *string                             `json:"SecurityGroupType" xml:"SecurityGroupType"`
	DryRun               *bool                               `json:"DryRun" xml:"DryRun"`
}

func (s DescribeSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequest) SetOwnerId(v int64) *DescribeSecurityGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetRegionId(v string) *DescribeSecurityGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetVpcId(v string) *DescribeSecurityGroupsRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageNumber(v int) *DescribeSecurityGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageSize(v int) *DescribeSecurityGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetOwnerAccount(v string) *DescribeSecurityGroupsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupIds(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupIds = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetTag(v []*DescribeSecurityGroupsRequestTag) *DescribeSecurityGroupsRequest {
	s.Tag = v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetResourceGroupId(v string) *DescribeSecurityGroupsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetNetworkType(v string) *DescribeSecurityGroupsRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupName(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetIsQueryEcsCount(v bool) *DescribeSecurityGroupsRequest {
	s.IsQueryEcsCount = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetFuzzyQuery(v bool) *DescribeSecurityGroupsRequest {
	s.FuzzyQuery = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupType(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupType = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetDryRun(v bool) *DescribeSecurityGroupsRequest {
	s.DryRun = &v
	return s
}

type DescribeSecurityGroupsRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeSecurityGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequestTag) SetValue(v string) *DescribeSecurityGroupsRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeSecurityGroupsRequestTag) SetKey(v string) *DescribeSecurityGroupsRequestTag {
	s.Key = &v
	return s
}

type DescribeSecurityGroupsResponse struct {
	RequestId      *string                                       `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId       *string                                       `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount     *int                                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber     *int                                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize       *int                                          `json:"PageSize" xml:"PageSize" require:"true"`
	SecurityGroups *DescribeSecurityGroupsResponseSecurityGroups `json:"SecurityGroups" xml:"SecurityGroups" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponse) SetRequestId(v string) *DescribeSecurityGroupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetRegionId(v string) *DescribeSecurityGroupsResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetTotalCount(v int) *DescribeSecurityGroupsResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetPageNumber(v int) *DescribeSecurityGroupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetPageSize(v int) *DescribeSecurityGroupsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetSecurityGroups(v *DescribeSecurityGroupsResponseSecurityGroups) *DescribeSecurityGroupsResponse {
	s.SecurityGroups = v
	return s
}

type DescribeSecurityGroupsResponseSecurityGroups struct {
	SecurityGroup []*DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup `json:"SecurityGroup" xml:"SecurityGroup" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseSecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseSecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseSecurityGroups) SetSecurityGroup(v []*DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) *DescribeSecurityGroupsResponseSecurityGroups {
	s.SecurityGroup = v
	return s
}

type DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup struct {
	SecurityGroupId         *string                                                        `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	Description             *string                                                        `json:"Description" xml:"Description" require:"true"`
	SecurityGroupName       *string                                                        `json:"SecurityGroupName" xml:"SecurityGroupName" require:"true"`
	VpcId                   *string                                                        `json:"VpcId" xml:"VpcId" require:"true"`
	CreationTime            *string                                                        `json:"CreationTime" xml:"CreationTime" require:"true"`
	SecurityGroupType       *string                                                        `json:"SecurityGroupType" xml:"SecurityGroupType" require:"true"`
	AvailableInstanceAmount *int                                                           `json:"AvailableInstanceAmount" xml:"AvailableInstanceAmount" require:"true"`
	EcsCount                *int                                                           `json:"EcsCount" xml:"EcsCount" require:"true"`
	ResourceGroupId         *string                                                        `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	ServiceID               *int64                                                         `json:"ServiceID" xml:"ServiceID" require:"true"`
	ServiceManaged          *bool                                                          `json:"ServiceManaged" xml:"ServiceManaged" require:"true"`
	Tags                    *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetSecurityGroupId(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetDescription(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetSecurityGroupName(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetVpcId(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetCreationTime(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetSecurityGroupType(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.SecurityGroupType = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetAvailableInstanceAmount(v int) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.AvailableInstanceAmount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetEcsCount(v int) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.EcsCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetResourceGroupId(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetServiceID(v int64) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.ServiceID = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetServiceManaged(v bool) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.ServiceManaged = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup) SetTags(v *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroup {
	s.Tags = v
	return s
}

type DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags struct {
	Tag []*DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags) SetTag(v []*DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTags {
	s.Tag = v
	return s
}

type DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag) SetTagKey(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag) SetTagValue(v string) *DescribeSecurityGroupsResponseSecurityGroupsSecurityGroupTagsTag {
	s.TagValue = &v
	return s
}

type DescribeSecurityGroupAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	NicType              *string `json:"NicType" xml:"NicType"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Direction            *string `json:"Direction" xml:"Direction"`
}

func (s DescribeSecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeRequest) SetOwnerId(v int64) *DescribeSecurityGroupAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetRegionId(v string) *DescribeSecurityGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetNicType(v string) *DescribeSecurityGroupAttributeRequest {
	s.NicType = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetOwnerAccount(v string) *DescribeSecurityGroupAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetDirection(v string) *DescribeSecurityGroupAttributeRequest {
	s.Direction = &v
	return s
}

type DescribeSecurityGroupAttributeResponse struct {
	RequestId         *string                                            `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId          *string                                            `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId   *string                                            `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	Description       *string                                            `json:"Description" xml:"Description" require:"true"`
	SecurityGroupName *string                                            `json:"SecurityGroupName" xml:"SecurityGroupName" require:"true"`
	VpcId             *string                                            `json:"VpcId" xml:"VpcId" require:"true"`
	InnerAccessPolicy *string                                            `json:"InnerAccessPolicy" xml:"InnerAccessPolicy" require:"true"`
	Permissions       *DescribeSecurityGroupAttributeResponsePermissions `json:"Permissions" xml:"Permissions" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponse) SetRequestId(v string) *DescribeSecurityGroupAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetRegionId(v string) *DescribeSecurityGroupAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeResponse {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetDescription(v string) *DescribeSecurityGroupAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetSecurityGroupName(v string) *DescribeSecurityGroupAttributeResponse {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetVpcId(v string) *DescribeSecurityGroupAttributeResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetInnerAccessPolicy(v string) *DescribeSecurityGroupAttributeResponse {
	s.InnerAccessPolicy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetPermissions(v *DescribeSecurityGroupAttributeResponsePermissions) *DescribeSecurityGroupAttributeResponse {
	s.Permissions = v
	return s
}

type DescribeSecurityGroupAttributeResponsePermissions struct {
	Permission []*DescribeSecurityGroupAttributeResponsePermissionsPermission `json:"Permission" xml:"Permission" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupAttributeResponsePermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponsePermissions) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponsePermissions) SetPermission(v []*DescribeSecurityGroupAttributeResponsePermissionsPermission) *DescribeSecurityGroupAttributeResponsePermissions {
	s.Permission = v
	return s
}

type DescribeSecurityGroupAttributeResponsePermissionsPermission struct {
	IpProtocol              *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange               *string `json:"PortRange" xml:"PortRange" require:"true"`
	SourcePortRange         *string `json:"SourcePortRange" xml:"SourcePortRange" require:"true"`
	SourceGroupId           *string `json:"SourceGroupId" xml:"SourceGroupId" require:"true"`
	SourceGroupName         *string `json:"SourceGroupName" xml:"SourceGroupName" require:"true"`
	SourceCidrIp            *string `json:"SourceCidrIp" xml:"SourceCidrIp" require:"true"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp" require:"true"`
	Policy                  *string `json:"Policy" xml:"Policy" require:"true"`
	NicType                 *string `json:"NicType" xml:"NicType" require:"true"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount" xml:"SourceGroupOwnerAccount" require:"true"`
	DestGroupId             *string `json:"DestGroupId" xml:"DestGroupId" require:"true"`
	DestGroupName           *string `json:"DestGroupName" xml:"DestGroupName" require:"true"`
	DestCidrIp              *string `json:"DestCidrIp" xml:"DestCidrIp" require:"true"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp" require:"true"`
	DestGroupOwnerAccount   *string `json:"DestGroupOwnerAccount" xml:"DestGroupOwnerAccount" require:"true"`
	Priority                *string `json:"Priority" xml:"Priority" require:"true"`
	Direction               *string `json:"Direction" xml:"Direction" require:"true"`
	Description             *string `json:"Description" xml:"Description" require:"true"`
	CreateTime              *string `json:"CreateTime" xml:"CreateTime" require:"true"`
}

func (s DescribeSecurityGroupAttributeResponsePermissionsPermission) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponsePermissionsPermission) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetIpProtocol(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.IpProtocol = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetPortRange(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.PortRange = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetSourcePortRange(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.SourcePortRange = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetSourceGroupId(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.SourceGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetSourceGroupName(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.SourceGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetSourceCidrIp(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetIpv6SourceCidrIp(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetPolicy(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Policy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetNicType(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.NicType = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetSourceGroupOwnerAccount(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDestGroupId(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.DestGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDestGroupName(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.DestGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDestCidrIp(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetIpv6DestCidrIp(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDestGroupOwnerAccount(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetPriority(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Priority = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDirection(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Direction = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetDescription(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponsePermissionsPermission) SetCreateTime(v string) *DescribeSecurityGroupAttributeResponsePermissionsPermission {
	s.CreateTime = &v
	return s
}

type DescribeRouteTablesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	VRouterId            *string `json:"VRouterId" xml:"VRouterId"`
	RouteTableId         *string `json:"RouteTableId" xml:"RouteTableId"`
	RouterType           *string `json:"RouterType" xml:"RouterType"`
	RouterId             *string `json:"RouterId" xml:"RouterId"`
	RouteTableName       *string `json:"RouteTableName" xml:"RouteTableName"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeRouteTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesRequest) SetOwnerId(v int64) *DescribeRouteTablesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetResourceOwnerAccount(v string) *DescribeRouteTablesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetResourceOwnerId(v int64) *DescribeRouteTablesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRegionId(v string) *DescribeRouteTablesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetVRouterId(v string) *DescribeRouteTablesRequest {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableId(v string) *DescribeRouteTablesRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterType(v string) *DescribeRouteTablesRequest {
	s.RouterType = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouterId(v string) *DescribeRouteTablesRequest {
	s.RouterId = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetRouteTableName(v string) *DescribeRouteTablesRequest {
	s.RouteTableName = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageNumber(v int) *DescribeRouteTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetPageSize(v int) *DescribeRouteTablesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTablesRequest) SetOwnerAccount(v string) *DescribeRouteTablesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeRouteTablesResponse struct {
	RequestId   *string                                 `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                    `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int                                    `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int                                    `json:"PageSize" xml:"PageSize" require:"true"`
	RouteTables *DescribeRouteTablesResponseRouteTables `json:"RouteTables" xml:"RouteTables" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponse) SetRequestId(v string) *DescribeRouteTablesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetTotalCount(v int) *DescribeRouteTablesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetPageNumber(v int) *DescribeRouteTablesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetPageSize(v int) *DescribeRouteTablesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteTablesResponse) SetRouteTables(v *DescribeRouteTablesResponseRouteTables) *DescribeRouteTablesResponse {
	s.RouteTables = v
	return s
}

type DescribeRouteTablesResponseRouteTables struct {
	RouteTable []*DescribeRouteTablesResponseRouteTablesRouteTable `json:"RouteTable" xml:"RouteTable" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTables) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTables) SetRouteTable(v []*DescribeRouteTablesResponseRouteTablesRouteTable) *DescribeRouteTablesResponseRouteTables {
	s.RouteTable = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTable struct {
	VRouterId       *string                                                      `json:"VRouterId" xml:"VRouterId" require:"true"`
	RouteTableId    *string                                                      `json:"RouteTableId" xml:"RouteTableId" require:"true"`
	RouteTableType  *string                                                      `json:"RouteTableType" xml:"RouteTableType" require:"true"`
	CreationTime    *string                                                      `json:"CreationTime" xml:"CreationTime" require:"true"`
	ResourceGroupId *string                                                      `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	RouteEntrys     *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys `json:"RouteEntrys" xml:"RouteEntrys" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTable) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTable) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetVRouterId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.VRouterId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteTableId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteTableType(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteTableType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetCreationTime(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.CreationTime = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetResourceGroupId(v string) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTable) SetRouteEntrys(v *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) *DescribeRouteTablesResponseRouteTablesRouteTable {
	s.RouteEntrys = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys struct {
	RouteEntry []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry `json:"RouteEntry" xml:"RouteEntry" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys) SetRouteEntry(v []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrys {
	s.RouteEntry = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry struct {
	RouteTableId         *string                                                                        `json:"RouteTableId" xml:"RouteTableId" require:"true"`
	DestinationCidrBlock *string                                                                        `json:"DestinationCidrBlock" xml:"DestinationCidrBlock" require:"true"`
	Type                 *string                                                                        `json:"Type" xml:"Type" require:"true"`
	Status               *string                                                                        `json:"Status" xml:"Status" require:"true"`
	InstanceId           *string                                                                        `json:"InstanceId" xml:"InstanceId" require:"true"`
	NextHopType          *string                                                                        `json:"NextHopType" xml:"NextHopType" require:"true"`
	NextHops             *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops `json:"NextHops" xml:"NextHops" require:"true" type:"Struct"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetRouteTableId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.RouteTableId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetDestinationCidrBlock(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.Type = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetStatus(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.Status = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetInstanceId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.InstanceId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHopType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry) SetNextHops(v *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntry {
	s.NextHops = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops struct {
	NextHop []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop `json:"NextHop" xml:"NextHop" require:"true" type:"Repeated"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops) SetNextHop(v []*DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHops {
	s.NextHop = v
	return s
}

type DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop struct {
	NextHopType *string `json:"NextHopType" xml:"NextHopType" require:"true"`
	NextHopId   *string `json:"NextHopId" xml:"NextHopId" require:"true"`
	Enabled     *int    `json:"Enabled" xml:"Enabled" require:"true"`
	Weight      *int    `json:"Weight" xml:"Weight" require:"true"`
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) GoString() string {
	return s.String()
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopType(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopType = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetNextHopId(v string) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.NextHopId = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetEnabled(v int) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.Enabled = &v
	return s
}

func (s *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop) SetWeight(v int) *DescribeRouteTablesResponseRouteTablesRouteTableRouteEntrysRouteEntryNextHopsNextHop {
	s.Weight = &v
	return s
}

type DescribeRegionsRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceChargeType   *string `json:"InstanceChargeType" xml:"InstanceChargeType"`
	ResourceType         *string `json:"ResourceType" xml:"ResourceType"`
	AcceptLanguage       *string `json:"AcceptLanguage" xml:"AcceptLanguage"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetOwnerId(v int64) *DescribeRegionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerAccount(v string) *DescribeRegionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerId(v int64) *DescribeRegionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRegionsRequest) SetOwnerAccount(v string) *DescribeRegionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetInstanceChargeType(v string) *DescribeRegionsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceType(v string) *DescribeRegionsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

type DescribeRegionsResponse struct {
	RequestId *string                         `json:"RequestId" xml:"RequestId" require:"true"`
	Regions   *DescribeRegionsResponseRegions `json:"Regions" xml:"Regions" require:"true" type:"Struct"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetRequestId(v string) *DescribeRegionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponse) SetRegions(v *DescribeRegionsResponseRegions) *DescribeRegionsResponse {
	s.Regions = v
	return s
}

type DescribeRegionsResponseRegions struct {
	Region []*DescribeRegionsResponseRegionsRegion `json:"Region" xml:"Region" require:"true" type:"Repeated"`
}

func (s DescribeRegionsResponseRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegions) SetRegion(v []*DescribeRegionsResponseRegionsRegion) *DescribeRegionsResponseRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseRegionsRegion struct {
	RegionId       *string `json:"RegionId" xml:"RegionId" require:"true"`
	LocalName      *string `json:"LocalName" xml:"LocalName" require:"true"`
	RegionEndpoint *string `json:"RegionEndpoint" xml:"RegionEndpoint" require:"true"`
	Status         *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeRegionsResponseRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseRegionsRegion {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRegion) SetStatus(v string) *DescribeRegionsResponseRegionsRegion {
	s.Status = &v
	return s
}

type DescribeLimitationRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Limitation           *string `json:"Limitation" xml:"Limitation" require:"true"`
}

func (s DescribeLimitationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLimitationRequest) GoString() string {
	return s.String()
}

func (s *DescribeLimitationRequest) SetOwnerId(v int64) *DescribeLimitationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLimitationRequest) SetResourceOwnerAccount(v string) *DescribeLimitationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLimitationRequest) SetResourceOwnerId(v int64) *DescribeLimitationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLimitationRequest) SetOwnerAccount(v string) *DescribeLimitationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLimitationRequest) SetLimitation(v string) *DescribeLimitationRequest {
	s.Limitation = &v
	return s
}

type DescribeLimitationResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	Limitation *string `json:"Limitation" xml:"Limitation" require:"true"`
	Value      *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeLimitationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLimitationResponse) GoString() string {
	return s.String()
}

func (s *DescribeLimitationResponse) SetRequestId(v string) *DescribeLimitationResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeLimitationResponse) SetLimitation(v string) *DescribeLimitationResponse {
	s.Limitation = &v
	return s
}

func (s *DescribeLimitationResponse) SetValue(v string) *DescribeLimitationResponse {
	s.Value = &v
	return s
}

type DescribeInstanceVncUrlRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeInstanceVncUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlRequest) SetOwnerId(v int64) *DescribeInstanceVncUrlRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetResourceOwnerAccount(v string) *DescribeInstanceVncUrlRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetResourceOwnerId(v int64) *DescribeInstanceVncUrlRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetRegionId(v string) *DescribeInstanceVncUrlRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetInstanceId(v string) *DescribeInstanceVncUrlRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceVncUrlRequest) SetOwnerAccount(v string) *DescribeInstanceVncUrlRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceVncUrlResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	VncUrl    *string `json:"VncUrl" xml:"VncUrl" require:"true"`
}

func (s DescribeInstanceVncUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponse) SetRequestId(v string) *DescribeInstanceVncUrlResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetVncUrl(v string) *DescribeInstanceVncUrlResponse {
	s.VncUrl = &v
	return s
}

type DescribeInstanceVncPasswdRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeInstanceVncPasswdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncPasswdRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncPasswdRequest) SetOwnerId(v int64) *DescribeInstanceVncPasswdRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetResourceOwnerAccount(v string) *DescribeInstanceVncPasswdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetResourceOwnerId(v int64) *DescribeInstanceVncPasswdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetRegionId(v string) *DescribeInstanceVncPasswdRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetInstanceId(v string) *DescribeInstanceVncPasswdRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceVncPasswdRequest) SetOwnerAccount(v string) *DescribeInstanceVncPasswdRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceVncPasswdResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	VncPasswd *string `json:"VncPasswd" xml:"VncPasswd" require:"true"`
}

func (s DescribeInstanceVncPasswdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncPasswdResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncPasswdResponse) SetRequestId(v string) *DescribeInstanceVncPasswdResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncPasswdResponse) SetVncPasswd(v string) *DescribeInstanceVncPasswdResponse {
	s.VncPasswd = &v
	return s
}

type DescribeInstanceTypesRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceTypeFamily   *string `json:"InstanceTypeFamily" xml:"InstanceTypeFamily"`
}

func (s DescribeInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesRequest) SetOwnerId(v int64) *DescribeInstanceTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetResourceOwnerId(v int64) *DescribeInstanceTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetOwnerAccount(v string) *DescribeInstanceTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypesRequest) SetInstanceTypeFamily(v string) *DescribeInstanceTypesRequest {
	s.InstanceTypeFamily = &v
	return s
}

type DescribeInstanceTypesResponse struct {
	RequestId     *string                                     `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceTypes *DescribeInstanceTypesResponseInstanceTypes `json:"InstanceTypes" xml:"InstanceTypes" require:"true" type:"Struct"`
}

func (s DescribeInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponse) SetRequestId(v string) *DescribeInstanceTypesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTypesResponse) SetInstanceTypes(v *DescribeInstanceTypesResponseInstanceTypes) *DescribeInstanceTypesResponse {
	s.InstanceTypes = v
	return s
}

type DescribeInstanceTypesResponseInstanceTypes struct {
	InstanceType []*DescribeInstanceTypesResponseInstanceTypesInstanceType `json:"InstanceType" xml:"InstanceType" require:"true" type:"Repeated"`
}

func (s DescribeInstanceTypesResponseInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseInstanceTypes) SetInstanceType(v []*DescribeInstanceTypesResponseInstanceTypesInstanceType) *DescribeInstanceTypesResponseInstanceTypes {
	s.InstanceType = v
	return s
}

type DescribeInstanceTypesResponseInstanceTypesInstanceType struct {
	InstanceTypeId              *string  `json:"InstanceTypeId" xml:"InstanceTypeId" require:"true"`
	CpuCoreCount                *int     `json:"CpuCoreCount" xml:"CpuCoreCount" require:"true"`
	MemorySize                  *float32 `json:"MemorySize" xml:"MemorySize" require:"true"`
	InstanceTypeFamily          *string  `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true"`
	LocalStorageCapacity        *int64   `json:"LocalStorageCapacity" xml:"LocalStorageCapacity" require:"true"`
	LocalStorageAmount          *int     `json:"LocalStorageAmount" xml:"LocalStorageAmount" require:"true"`
	LocalStorageCategory        *string  `json:"LocalStorageCategory" xml:"LocalStorageCategory" require:"true"`
	GPUAmount                   *int     `json:"GPUAmount" xml:"GPUAmount" require:"true"`
	GPUSpec                     *string  `json:"GPUSpec" xml:"GPUSpec" require:"true"`
	InitialCredit               *int     `json:"InitialCredit" xml:"InitialCredit" require:"true"`
	BaselineCredit              *int     `json:"BaselineCredit" xml:"BaselineCredit" require:"true"`
	EniQuantity                 *int     `json:"EniQuantity" xml:"EniQuantity" require:"true"`
	EniPrivateIpAddressQuantity *int     `json:"EniPrivateIpAddressQuantity" xml:"EniPrivateIpAddressQuantity" require:"true"`
	EniIpv6AddressQuantity      *int     `json:"EniIpv6AddressQuantity" xml:"EniIpv6AddressQuantity" require:"true"`
	InstanceBandwidthRx         *int     `json:"InstanceBandwidthRx" xml:"InstanceBandwidthRx" require:"true"`
	InstanceBandwidthTx         *int     `json:"InstanceBandwidthTx" xml:"InstanceBandwidthTx" require:"true"`
	InstancePpsRx               *int64   `json:"InstancePpsRx" xml:"InstancePpsRx" require:"true"`
	InstancePpsTx               *int64   `json:"InstancePpsTx" xml:"InstancePpsTx" require:"true"`
	InstanceFamilyLevel         *string  `json:"InstanceFamilyLevel" xml:"InstanceFamilyLevel" require:"true"`
	TotalEniQueueQuantity       *int     `json:"TotalEniQueueQuantity" xml:"TotalEniQueueQuantity" require:"true"`
	EniTrunkSupported           *bool    `json:"EniTrunkSupported" xml:"EniTrunkSupported" require:"true"`
	EniTotalQuantity            *int     `json:"EniTotalQuantity" xml:"EniTotalQuantity" require:"true"`
}

func (s DescribeInstanceTypesResponseInstanceTypesInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseInstanceTypesInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstanceTypeId(v string) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetCpuCoreCount(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetMemorySize(v float32) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.MemorySize = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstanceTypeFamily(v string) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetLocalStorageCapacity(v int64) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetLocalStorageAmount(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetLocalStorageCategory(v string) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetGPUAmount(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.GPUAmount = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetGPUSpec(v string) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.GPUSpec = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInitialCredit(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InitialCredit = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetBaselineCredit(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.BaselineCredit = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetEniQuantity(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.EniQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetEniPrivateIpAddressQuantity(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.EniPrivateIpAddressQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetEniIpv6AddressQuantity(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.EniIpv6AddressQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstanceBandwidthRx(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceBandwidthRx = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstanceBandwidthTx(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceBandwidthTx = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstancePpsRx(v int64) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstancePpsRx = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstancePpsTx(v int64) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstancePpsTx = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetInstanceFamilyLevel(v string) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetTotalEniQueueQuantity(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.TotalEniQueueQuantity = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetEniTrunkSupported(v bool) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.EniTrunkSupported = &v
	return s
}

func (s *DescribeInstanceTypesResponseInstanceTypesInstanceType) SetEniTotalQuantity(v int) *DescribeInstanceTypesResponseInstanceTypesInstanceType {
	s.EniTotalQuantity = &v
	return s
}

type DescribeInstanceStatusRequest struct {
	OwnerId              *int64    `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           []*string `json:"InstanceId" xml:"InstanceId" type:"Repeated"`
	RegionId             *string   `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId               *string   `json:"ZoneId" xml:"ZoneId"`
	ClusterId            *string   `json:"ClusterId" xml:"ClusterId"`
	PageNumber           *int      `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int      `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string   `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeInstanceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusRequest) SetOwnerId(v int64) *DescribeInstanceStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetResourceOwnerAccount(v string) *DescribeInstanceStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetResourceOwnerId(v int64) *DescribeInstanceStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetInstanceId(v []*string) *DescribeInstanceStatusRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstanceStatusRequest) SetRegionId(v string) *DescribeInstanceStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetZoneId(v string) *DescribeInstanceStatusRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetClusterId(v string) *DescribeInstanceStatusRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetPageNumber(v int) *DescribeInstanceStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetPageSize(v int) *DescribeInstanceStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceStatusRequest) SetOwnerAccount(v string) *DescribeInstanceStatusRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceStatusResponse struct {
	RequestId        *string                                         `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount       *int                                            `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber       *int                                            `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize         *int                                            `json:"PageSize" xml:"PageSize" require:"true"`
	InstanceStatuses *DescribeInstanceStatusResponseInstanceStatuses `json:"InstanceStatuses" xml:"InstanceStatuses" require:"true" type:"Struct"`
}

func (s DescribeInstanceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponse) SetRequestId(v string) *DescribeInstanceStatusResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceStatusResponse) SetTotalCount(v int) *DescribeInstanceStatusResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstanceStatusResponse) SetPageNumber(v int) *DescribeInstanceStatusResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceStatusResponse) SetPageSize(v int) *DescribeInstanceStatusResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceStatusResponse) SetInstanceStatuses(v *DescribeInstanceStatusResponseInstanceStatuses) *DescribeInstanceStatusResponse {
	s.InstanceStatuses = v
	return s
}

type DescribeInstanceStatusResponseInstanceStatuses struct {
	InstanceStatus []*DescribeInstanceStatusResponseInstanceStatusesInstanceStatus `json:"InstanceStatus" xml:"InstanceStatus" require:"true" type:"Repeated"`
}

func (s DescribeInstanceStatusResponseInstanceStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponseInstanceStatuses) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponseInstanceStatuses) SetInstanceStatus(v []*DescribeInstanceStatusResponseInstanceStatusesInstanceStatus) *DescribeInstanceStatusResponseInstanceStatuses {
	s.InstanceStatus = v
	return s
}

type DescribeInstanceStatusResponseInstanceStatusesInstanceStatus struct {
	InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Status     *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeInstanceStatusResponseInstanceStatusesInstanceStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatusResponseInstanceStatusesInstanceStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatusResponseInstanceStatusesInstanceStatus) SetInstanceId(v string) *DescribeInstanceStatusResponseInstanceStatusesInstanceStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceStatusResponseInstanceStatusesInstanceStatus) SetStatus(v string) *DescribeInstanceStatusResponseInstanceStatusesInstanceStatus {
	s.Status = &v
	return s
}

type DescribeInstancesRequest struct {
	OwnerId                 *int64                         `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string                        `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64                         `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                *string                        `json:"RegionId" xml:"RegionId" require:"true"`
	VpcId                   *string                        `json:"VpcId" xml:"VpcId"`
	VSwitchId               *string                        `json:"VSwitchId" xml:"VSwitchId"`
	ZoneId                  *string                        `json:"ZoneId" xml:"ZoneId"`
	InstanceNetworkType     *string                        `json:"InstanceNetworkType" xml:"InstanceNetworkType"`
	SecurityGroupId         *string                        `json:"SecurityGroupId" xml:"SecurityGroupId"`
	InstanceIds             *string                        `json:"InstanceIds" xml:"InstanceIds"`
	PageNumber              *int                           `json:"PageNumber" xml:"PageNumber"`
	PageSize                *int                           `json:"PageSize" xml:"PageSize"`
	InnerIpAddresses        *string                        `json:"InnerIpAddresses" xml:"InnerIpAddresses"`
	PrivateIpAddresses      *string                        `json:"PrivateIpAddresses" xml:"PrivateIpAddresses"`
	PublicIpAddresses       *string                        `json:"PublicIpAddresses" xml:"PublicIpAddresses"`
	EipAddresses            *string                        `json:"EipAddresses" xml:"EipAddresses"`
	OwnerAccount            *string                        `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceChargeType      *string                        `json:"InstanceChargeType" xml:"InstanceChargeType"`
	InternetChargeType      *string                        `json:"InternetChargeType" xml:"InternetChargeType"`
	InstanceName            *string                        `json:"InstanceName" xml:"InstanceName"`
	ImageId                 *string                        `json:"ImageId" xml:"ImageId"`
	Status                  *string                        `json:"Status" xml:"Status"`
	LockReason              *string                        `json:"LockReason" xml:"LockReason"`
	DeviceAvailable         *bool                          `json:"DeviceAvailable" xml:"DeviceAvailable"`
	IoOptimized             *bool                          `json:"IoOptimized" xml:"IoOptimized"`
	NeedSaleCycle           *bool                          `json:"NeedSaleCycle" xml:"NeedSaleCycle"`
	Tag                     []*DescribeInstancesRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	InstanceType            *string                        `json:"InstanceType" xml:"InstanceType"`
	InstanceTypeFamily      *string                        `json:"InstanceTypeFamily" xml:"InstanceTypeFamily"`
	KeyPairName             *string                        `json:"KeyPairName" xml:"KeyPairName"`
	ResourceGroupId         *string                        `json:"ResourceGroupId" xml:"ResourceGroupId"`
	HpcClusterId            *string                        `json:"HpcClusterId" xml:"HpcClusterId"`
	RdmaIpAddresses         *string                        `json:"RdmaIpAddresses" xml:"RdmaIpAddresses"`
	DryRun                  *bool                          `json:"DryRun" xml:"DryRun"`
	AdditionalAttributes    []*string                      `json:"AdditionalAttributes" xml:"AdditionalAttributes" type:"Repeated"`
	HttpEndpoint            *string                        `json:"HttpEndpoint" xml:"HttpEndpoint"`
	HttpTokens              *string                        `json:"HttpTokens" xml:"HttpTokens"`
	HttpPutResponseHopLimit *int                           `json:"HttpPutResponseHopLimit" xml:"HttpPutResponseHopLimit"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetOwnerId(v int64) *DescribeInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceOwnerAccount(v string) *DescribeInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceOwnerId(v int64) *DescribeInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstancesRequest) SetRegionId(v string) *DescribeInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesRequest) SetVpcId(v string) *DescribeInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeInstancesRequest) SetVSwitchId(v string) *DescribeInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstancesRequest) SetZoneId(v string) *DescribeInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceNetworkType(v string) *DescribeInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityGroupId(v string) *DescribeInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceIds(v string) *DescribeInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v int) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetInnerIpAddresses(v string) *DescribeInstancesRequest {
	s.InnerIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetPrivateIpAddresses(v string) *DescribeInstancesRequest {
	s.PrivateIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetPublicIpAddresses(v string) *DescribeInstancesRequest {
	s.PublicIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetEipAddresses(v string) *DescribeInstancesRequest {
	s.EipAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetOwnerAccount(v string) *DescribeInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceChargeType(v string) *DescribeInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInternetChargeType(v string) *DescribeInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceName(v string) *DescribeInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesRequest) SetImageId(v string) *DescribeInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesRequest) SetStatus(v string) *DescribeInstancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesRequest) SetLockReason(v string) *DescribeInstancesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeInstancesRequest) SetDeviceAvailable(v bool) *DescribeInstancesRequest {
	s.DeviceAvailable = &v
	return s
}

func (s *DescribeInstancesRequest) SetIoOptimized(v bool) *DescribeInstancesRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstancesRequest) SetNeedSaleCycle(v bool) *DescribeInstancesRequest {
	s.NeedSaleCycle = &v
	return s
}

func (s *DescribeInstancesRequest) SetTag(v []*DescribeInstancesRequestTag) *DescribeInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceType(v string) *DescribeInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceTypeFamily(v string) *DescribeInstancesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesRequest) SetKeyPairName(v string) *DescribeInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstancesRequest) SetResourceGroupId(v string) *DescribeInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetHpcClusterId(v string) *DescribeInstancesRequest {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeInstancesRequest) SetRdmaIpAddresses(v string) *DescribeInstancesRequest {
	s.RdmaIpAddresses = &v
	return s
}

func (s *DescribeInstancesRequest) SetDryRun(v bool) *DescribeInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeInstancesRequest) SetAdditionalAttributes(v []*string) *DescribeInstancesRequest {
	s.AdditionalAttributes = v
	return s
}

func (s *DescribeInstancesRequest) SetHttpEndpoint(v string) *DescribeInstancesRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *DescribeInstancesRequest) SetHttpTokens(v string) *DescribeInstancesRequest {
	s.HttpTokens = &v
	return s
}

func (s *DescribeInstancesRequest) SetHttpPutResponseHopLimit(v int) *DescribeInstancesRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

type DescribeInstancesRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTag) SetValue(v string) *DescribeInstancesRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeInstancesRequestTag) SetKey(v string) *DescribeInstancesRequestTag {
	s.Key = &v
	return s
}

type DescribeInstancesResponse struct {
	RequestId  *string                             `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                                `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                                `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                                `json:"PageSize" xml:"PageSize" require:"true"`
	Instances  *DescribeInstancesResponseInstances `json:"Instances" xml:"Instances" require:"true" type:"Struct"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetRequestId(v string) *DescribeInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponse) SetTotalCount(v int) *DescribeInstancesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeInstancesResponse) SetPageNumber(v int) *DescribeInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesResponse) SetPageSize(v int) *DescribeInstancesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponse) SetInstances(v *DescribeInstancesResponseInstances) *DescribeInstancesResponse {
	s.Instances = v
	return s
}

type DescribeInstancesResponseInstances struct {
	Instance []*DescribeInstancesResponseInstancesInstance `json:"Instance" xml:"Instance" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstances) SetInstance(v []*DescribeInstancesResponseInstancesInstance) *DescribeInstancesResponseInstances {
	s.Instance = v
	return s
}

type DescribeInstancesResponseInstancesInstance struct {
	InstanceId                 *string                                                               `json:"InstanceId" xml:"InstanceId" require:"true"`
	InstanceName               *string                                                               `json:"InstanceName" xml:"InstanceName" require:"true"`
	Description                *string                                                               `json:"Description" xml:"Description" require:"true"`
	ImageId                    *string                                                               `json:"ImageId" xml:"ImageId" require:"true"`
	OSName                     *string                                                               `json:"OSName" xml:"OSName" require:"true"`
	OSNameEn                   *string                                                               `json:"OSNameEn" xml:"OSNameEn" require:"true"`
	OSType                     *string                                                               `json:"OSType" xml:"OSType" require:"true"`
	RegionId                   *string                                                               `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                     *string                                                               `json:"ZoneId" xml:"ZoneId" require:"true"`
	ClusterId                  *string                                                               `json:"ClusterId" xml:"ClusterId" require:"true"`
	InstanceType               *string                                                               `json:"InstanceType" xml:"InstanceType" require:"true"`
	Cpu                        *int                                                                  `json:"Cpu" xml:"Cpu" require:"true"`
	Memory                     *int                                                                  `json:"Memory" xml:"Memory" require:"true"`
	HostName                   *string                                                               `json:"HostName" xml:"HostName" require:"true"`
	DeploymentSetId            *string                                                               `json:"DeploymentSetId" xml:"DeploymentSetId" require:"true"`
	Status                     *string                                                               `json:"Status" xml:"Status" require:"true"`
	SerialNumber               *string                                                               `json:"SerialNumber" xml:"SerialNumber" require:"true"`
	InternetChargeType         *string                                                               `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	InternetMaxBandwidthIn     *int                                                                  `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn" require:"true"`
	InternetMaxBandwidthOut    *int                                                                  `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut" require:"true"`
	VlanId                     *string                                                               `json:"VlanId" xml:"VlanId" require:"true"`
	CreationTime               *string                                                               `json:"CreationTime" xml:"CreationTime" require:"true"`
	StartTime                  *string                                                               `json:"StartTime" xml:"StartTime" require:"true"`
	InstanceNetworkType        *string                                                               `json:"InstanceNetworkType" xml:"InstanceNetworkType" require:"true"`
	InstanceChargeType         *string                                                               `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	SaleCycle                  *string                                                               `json:"SaleCycle" xml:"SaleCycle" require:"true"`
	ExpiredTime                *string                                                               `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	AutoReleaseTime            *string                                                               `json:"AutoReleaseTime" xml:"AutoReleaseTime" require:"true"`
	IoOptimized                *bool                                                                 `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	DeviceAvailable            *bool                                                                 `json:"DeviceAvailable" xml:"DeviceAvailable" require:"true"`
	InstanceTypeFamily         *string                                                               `json:"InstanceTypeFamily" xml:"InstanceTypeFamily" require:"true"`
	LocalStorageCapacity       *int64                                                                `json:"LocalStorageCapacity" xml:"LocalStorageCapacity" require:"true"`
	LocalStorageAmount         *int                                                                  `json:"LocalStorageAmount" xml:"LocalStorageAmount" require:"true"`
	GPUAmount                  *int                                                                  `json:"GPUAmount" xml:"GPUAmount" require:"true"`
	GPUSpec                    *string                                                               `json:"GPUSpec" xml:"GPUSpec" require:"true"`
	SpotStrategy               *string                                                               `json:"SpotStrategy" xml:"SpotStrategy" require:"true"`
	SpotPriceLimit             *float32                                                              `json:"SpotPriceLimit" xml:"SpotPriceLimit" require:"true"`
	ResourceGroupId            *string                                                               `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	KeyPairName                *string                                                               `json:"KeyPairName" xml:"KeyPairName" require:"true"`
	Recyclable                 *bool                                                                 `json:"Recyclable" xml:"Recyclable" require:"true"`
	HpcClusterId               *string                                                               `json:"HpcClusterId" xml:"HpcClusterId" require:"true"`
	StoppedMode                *string                                                               `json:"StoppedMode" xml:"StoppedMode" require:"true"`
	CreditSpecification        *string                                                               `json:"CreditSpecification" xml:"CreditSpecification" require:"true"`
	DeletionProtection         *bool                                                                 `json:"DeletionProtection" xml:"DeletionProtection" require:"true"`
	NetworkInterfaces          *DescribeInstancesResponseInstancesInstanceNetworkInterfaces          `json:"NetworkInterfaces" xml:"NetworkInterfaces" require:"true" type:"Struct"`
	OperationLocks             *DescribeInstancesResponseInstancesInstanceOperationLocks             `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
	Tags                       *DescribeInstancesResponseInstancesInstanceTags                       `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
	VpcAttributes              *DescribeInstancesResponseInstancesInstanceVpcAttributes              `json:"VpcAttributes" xml:"VpcAttributes" require:"true" type:"Struct"`
	EipAddress                 *DescribeInstancesResponseInstancesInstanceEipAddress                 `json:"EipAddress" xml:"EipAddress" require:"true" type:"Struct"`
	DedicatedHostAttribute     *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute     `json:"DedicatedHostAttribute" xml:"DedicatedHostAttribute" require:"true" type:"Struct"`
	EcsCapacityReservationAttr *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr `json:"EcsCapacityReservationAttr" xml:"EcsCapacityReservationAttr" require:"true" type:"Struct"`
	DedicatedInstanceAttribute *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute `json:"DedicatedInstanceAttribute" xml:"DedicatedInstanceAttribute" require:"true" type:"Struct"`
	CpuOptions                 *DescribeInstancesResponseInstancesInstanceCpuOptions                 `json:"CpuOptions" xml:"CpuOptions" require:"true" type:"Struct"`
	MetadataOptions            *DescribeInstancesResponseInstancesInstanceMetadataOptions            `json:"MetadataOptions" xml:"MetadataOptions" require:"true" type:"Struct"`
	SecurityGroupIds           *DescribeInstancesResponseInstancesInstanceSecurityGroupIds           `json:"SecurityGroupIds" xml:"SecurityGroupIds" require:"true" type:"Struct"`
	PublicIpAddress            *DescribeInstancesResponseInstancesInstancePublicIpAddress            `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true" type:"Struct"`
	InnerIpAddress             *DescribeInstancesResponseInstancesInstanceInnerIpAddress             `json:"InnerIpAddress" xml:"InnerIpAddress" require:"true" type:"Struct"`
	RdmaIpAddress              *DescribeInstancesResponseInstancesInstanceRdmaIpAddress              `json:"RdmaIpAddress" xml:"RdmaIpAddress" require:"true" type:"Struct"`
}

func (s DescribeInstancesResponseInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceId(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceName(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDescription(v string) *DescribeInstancesResponseInstancesInstance {
	s.Description = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetImageId(v string) *DescribeInstancesResponseInstancesInstance {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetOSName(v string) *DescribeInstancesResponseInstancesInstance {
	s.OSName = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetOSNameEn(v string) *DescribeInstancesResponseInstancesInstance {
	s.OSNameEn = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetOSType(v string) *DescribeInstancesResponseInstancesInstance {
	s.OSType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetRegionId(v string) *DescribeInstancesResponseInstancesInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetZoneId(v string) *DescribeInstancesResponseInstancesInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetClusterId(v string) *DescribeInstancesResponseInstancesInstance {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceType(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetCpu(v int) *DescribeInstancesResponseInstancesInstance {
	s.Cpu = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetMemory(v int) *DescribeInstancesResponseInstancesInstance {
	s.Memory = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetHostName(v string) *DescribeInstancesResponseInstancesInstance {
	s.HostName = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDeploymentSetId(v string) *DescribeInstancesResponseInstancesInstance {
	s.DeploymentSetId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetStatus(v string) *DescribeInstancesResponseInstancesInstance {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetSerialNumber(v string) *DescribeInstancesResponseInstancesInstance {
	s.SerialNumber = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInternetChargeType(v string) *DescribeInstancesResponseInstancesInstance {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInternetMaxBandwidthIn(v int) *DescribeInstancesResponseInstancesInstance {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInternetMaxBandwidthOut(v int) *DescribeInstancesResponseInstancesInstance {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetVlanId(v string) *DescribeInstancesResponseInstancesInstance {
	s.VlanId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetCreationTime(v string) *DescribeInstancesResponseInstancesInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetStartTime(v string) *DescribeInstancesResponseInstancesInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceNetworkType(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceChargeType(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetSaleCycle(v string) *DescribeInstancesResponseInstancesInstance {
	s.SaleCycle = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetExpiredTime(v string) *DescribeInstancesResponseInstancesInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetAutoReleaseTime(v string) *DescribeInstancesResponseInstancesInstance {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetIoOptimized(v bool) *DescribeInstancesResponseInstancesInstance {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDeviceAvailable(v bool) *DescribeInstancesResponseInstancesInstance {
	s.DeviceAvailable = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInstanceTypeFamily(v string) *DescribeInstancesResponseInstancesInstance {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetLocalStorageCapacity(v int64) *DescribeInstancesResponseInstancesInstance {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetLocalStorageAmount(v int) *DescribeInstancesResponseInstancesInstance {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetGPUAmount(v int) *DescribeInstancesResponseInstancesInstance {
	s.GPUAmount = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetGPUSpec(v string) *DescribeInstancesResponseInstancesInstance {
	s.GPUSpec = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetSpotStrategy(v string) *DescribeInstancesResponseInstancesInstance {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetSpotPriceLimit(v float32) *DescribeInstancesResponseInstancesInstance {
	s.SpotPriceLimit = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetResourceGroupId(v string) *DescribeInstancesResponseInstancesInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetKeyPairName(v string) *DescribeInstancesResponseInstancesInstance {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetRecyclable(v bool) *DescribeInstancesResponseInstancesInstance {
	s.Recyclable = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetHpcClusterId(v string) *DescribeInstancesResponseInstancesInstance {
	s.HpcClusterId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetStoppedMode(v string) *DescribeInstancesResponseInstancesInstance {
	s.StoppedMode = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetCreditSpecification(v string) *DescribeInstancesResponseInstancesInstance {
	s.CreditSpecification = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDeletionProtection(v bool) *DescribeInstancesResponseInstancesInstance {
	s.DeletionProtection = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetNetworkInterfaces(v *DescribeInstancesResponseInstancesInstanceNetworkInterfaces) *DescribeInstancesResponseInstancesInstance {
	s.NetworkInterfaces = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetOperationLocks(v *DescribeInstancesResponseInstancesInstanceOperationLocks) *DescribeInstancesResponseInstancesInstance {
	s.OperationLocks = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetTags(v *DescribeInstancesResponseInstancesInstanceTags) *DescribeInstancesResponseInstancesInstance {
	s.Tags = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetVpcAttributes(v *DescribeInstancesResponseInstancesInstanceVpcAttributes) *DescribeInstancesResponseInstancesInstance {
	s.VpcAttributes = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetEipAddress(v *DescribeInstancesResponseInstancesInstanceEipAddress) *DescribeInstancesResponseInstancesInstance {
	s.EipAddress = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDedicatedHostAttribute(v *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute) *DescribeInstancesResponseInstancesInstance {
	s.DedicatedHostAttribute = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetEcsCapacityReservationAttr(v *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr) *DescribeInstancesResponseInstancesInstance {
	s.EcsCapacityReservationAttr = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetDedicatedInstanceAttribute(v *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute) *DescribeInstancesResponseInstancesInstance {
	s.DedicatedInstanceAttribute = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetCpuOptions(v *DescribeInstancesResponseInstancesInstanceCpuOptions) *DescribeInstancesResponseInstancesInstance {
	s.CpuOptions = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetMetadataOptions(v *DescribeInstancesResponseInstancesInstanceMetadataOptions) *DescribeInstancesResponseInstancesInstance {
	s.MetadataOptions = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetSecurityGroupIds(v *DescribeInstancesResponseInstancesInstanceSecurityGroupIds) *DescribeInstancesResponseInstancesInstance {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetPublicIpAddress(v *DescribeInstancesResponseInstancesInstancePublicIpAddress) *DescribeInstancesResponseInstancesInstance {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetInnerIpAddress(v *DescribeInstancesResponseInstancesInstanceInnerIpAddress) *DescribeInstancesResponseInstancesInstance {
	s.InnerIpAddress = v
	return s
}

func (s *DescribeInstancesResponseInstancesInstance) SetRdmaIpAddress(v *DescribeInstancesResponseInstancesInstanceRdmaIpAddress) *DescribeInstancesResponseInstancesInstance {
	s.RdmaIpAddress = v
	return s
}

type DescribeInstancesResponseInstancesInstanceNetworkInterfaces struct {
	NetworkInterface []*DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface `json:"NetworkInterface" xml:"NetworkInterface" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceNetworkInterfaces) SetNetworkInterface(v []*DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) *DescribeInstancesResponseInstancesInstanceNetworkInterfaces {
	s.NetworkInterface = v
	return s
}

type DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface struct {
	NetworkInterfaceId *string `json:"NetworkInterfaceId" xml:"NetworkInterfaceId" require:"true"`
	MacAddress         *string `json:"MacAddress" xml:"MacAddress" require:"true"`
	PrimaryIpAddress   *string `json:"PrimaryIpAddress" xml:"PrimaryIpAddress" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) SetNetworkInterfaceId(v string) *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) SetMacAddress(v string) *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface {
	s.MacAddress = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface) SetPrimaryIpAddress(v string) *DescribeInstancesResponseInstancesInstanceNetworkInterfacesNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceOperationLocks struct {
	LockReason []*DescribeInstancesResponseInstancesInstanceOperationLocksLockReason `json:"LockReason" xml:"LockReason" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceOperationLocks) SetLockReason(v []*DescribeInstancesResponseInstancesInstanceOperationLocksLockReason) *DescribeInstancesResponseInstancesInstanceOperationLocks {
	s.LockReason = v
	return s
}

type DescribeInstancesResponseInstancesInstanceOperationLocksLockReason struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
	LockMsg    *string `json:"LockMsg" xml:"LockMsg" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceOperationLocksLockReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceOperationLocksLockReason) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceOperationLocksLockReason) SetLockReason(v string) *DescribeInstancesResponseInstancesInstanceOperationLocksLockReason {
	s.LockReason = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceOperationLocksLockReason) SetLockMsg(v string) *DescribeInstancesResponseInstancesInstanceOperationLocksLockReason {
	s.LockMsg = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceTags struct {
	Tag []*DescribeInstancesResponseInstancesInstanceTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceTags) SetTag(v []*DescribeInstancesResponseInstancesInstanceTagsTag) *DescribeInstancesResponseInstancesInstanceTags {
	s.Tag = v
	return s
}

type DescribeInstancesResponseInstancesInstanceTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceTagsTag) SetTagKey(v string) *DescribeInstancesResponseInstancesInstanceTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceTagsTag) SetTagValue(v string) *DescribeInstancesResponseInstancesInstanceTagsTag {
	s.TagValue = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceVpcAttributes struct {
	VpcId            *string                                                                  `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId        *string                                                                  `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	NatIpAddress     *string                                                                  `json:"NatIpAddress" xml:"NatIpAddress" require:"true"`
	PrivateIpAddress *DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true" type:"Struct"`
}

func (s DescribeInstancesResponseInstancesInstanceVpcAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceVpcAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceVpcAttributes) SetVpcId(v string) *DescribeInstancesResponseInstancesInstanceVpcAttributes {
	s.VpcId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceVpcAttributes) SetVSwitchId(v string) *DescribeInstancesResponseInstancesInstanceVpcAttributes {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceVpcAttributes) SetNatIpAddress(v string) *DescribeInstancesResponseInstancesInstanceVpcAttributes {
	s.NatIpAddress = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceVpcAttributes) SetPrivateIpAddress(v *DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress) *DescribeInstancesResponseInstancesInstanceVpcAttributes {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseInstancesInstanceVpcAttributesPrivateIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseInstancesInstanceEipAddress struct {
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	IpAddress            *string `json:"IpAddress" xml:"IpAddress" require:"true"`
	Bandwidth            *int    `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	InternetChargeType   *string `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	IsSupportUnassociate *bool   `json:"IsSupportUnassociate" xml:"IsSupportUnassociate" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceEipAddress) SetAllocationId(v string) *DescribeInstancesResponseInstancesInstanceEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceEipAddress) SetIpAddress(v string) *DescribeInstancesResponseInstancesInstanceEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceEipAddress) SetBandwidth(v int) *DescribeInstancesResponseInstancesInstanceEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceEipAddress) SetInternetChargeType(v string) *DescribeInstancesResponseInstancesInstanceEipAddress {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceEipAddress) SetIsSupportUnassociate(v bool) *DescribeInstancesResponseInstancesInstanceEipAddress {
	s.IsSupportUnassociate = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute struct {
	DedicatedHostId   *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	DedicatedHostName *string `json:"DedicatedHostName" xml:"DedicatedHostName" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute) SetDedicatedHostId(v string) *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute) SetDedicatedHostName(v string) *DescribeInstancesResponseInstancesInstanceDedicatedHostAttribute {
	s.DedicatedHostName = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr struct {
	CapacityReservationId         *string `json:"CapacityReservationId" xml:"CapacityReservationId" require:"true"`
	CapacityReservationPreference *string `json:"CapacityReservationPreference" xml:"CapacityReservationPreference" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr) SetCapacityReservationId(v string) *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr {
	s.CapacityReservationId = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr) SetCapacityReservationPreference(v string) *DescribeInstancesResponseInstancesInstanceEcsCapacityReservationAttr {
	s.CapacityReservationPreference = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute struct {
	Tenancy  *string `json:"Tenancy" xml:"Tenancy" require:"true"`
	Affinity *string `json:"Affinity" xml:"Affinity" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute) SetTenancy(v string) *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute {
	s.Tenancy = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute) SetAffinity(v string) *DescribeInstancesResponseInstancesInstanceDedicatedInstanceAttribute {
	s.Affinity = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceCpuOptions struct {
	CoreCount      *int    `json:"CoreCount" xml:"CoreCount" require:"true"`
	ThreadsPerCore *int    `json:"ThreadsPerCore" xml:"ThreadsPerCore" require:"true"`
	Numa           *string `json:"Numa" xml:"Numa" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceCpuOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceCpuOptions) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceCpuOptions) SetCoreCount(v int) *DescribeInstancesResponseInstancesInstanceCpuOptions {
	s.CoreCount = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceCpuOptions) SetThreadsPerCore(v int) *DescribeInstancesResponseInstancesInstanceCpuOptions {
	s.ThreadsPerCore = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceCpuOptions) SetNuma(v string) *DescribeInstancesResponseInstancesInstanceCpuOptions {
	s.Numa = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceMetadataOptions struct {
	HttpEndpoint            *string `json:"HttpEndpoint" xml:"HttpEndpoint" require:"true"`
	HttpTokens              *string `json:"HttpTokens" xml:"HttpTokens" require:"true"`
	HttpPutResponseHopLimit *int    `json:"HttpPutResponseHopLimit" xml:"HttpPutResponseHopLimit" require:"true"`
}

func (s DescribeInstancesResponseInstancesInstanceMetadataOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceMetadataOptions) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceMetadataOptions) SetHttpEndpoint(v string) *DescribeInstancesResponseInstancesInstanceMetadataOptions {
	s.HttpEndpoint = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceMetadataOptions) SetHttpTokens(v string) *DescribeInstancesResponseInstancesInstanceMetadataOptions {
	s.HttpTokens = &v
	return s
}

func (s *DescribeInstancesResponseInstancesInstanceMetadataOptions) SetHttpPutResponseHopLimit(v int) *DescribeInstancesResponseInstancesInstanceMetadataOptions {
	s.HttpPutResponseHopLimit = &v
	return s
}

type DescribeInstancesResponseInstancesInstanceSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeInstancesResponseInstancesInstanceSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type DescribeInstancesResponseInstancesInstancePublicIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstancePublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstancePublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstancePublicIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseInstancesInstancePublicIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseInstancesInstanceInnerIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceInnerIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceInnerIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceInnerIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseInstancesInstanceInnerIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseInstancesInstanceRdmaIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstancesResponseInstancesInstanceRdmaIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseInstancesInstanceRdmaIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseInstancesInstanceRdmaIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseInstancesInstanceRdmaIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstanceMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
}

func (s DescribeInstanceMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataRequest) SetOwnerId(v int64) *DescribeInstanceMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeInstanceMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeInstanceMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetOwnerAccount(v string) *DescribeInstanceMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetInstanceId(v string) *DescribeInstanceMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetStartTime(v string) *DescribeInstanceMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetEndTime(v string) *DescribeInstanceMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetPeriod(v int) *DescribeInstanceMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeInstanceMonitorDataResponse struct {
	RequestId   *string                                         `json:"RequestId" xml:"RequestId" require:"true"`
	MonitorData *DescribeInstanceMonitorDataResponseMonitorData `json:"MonitorData" xml:"MonitorData" require:"true" type:"Struct"`
}

func (s DescribeInstanceMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponse) SetRequestId(v string) *DescribeInstanceMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetMonitorData(v *DescribeInstanceMonitorDataResponseMonitorData) *DescribeInstanceMonitorDataResponse {
	s.MonitorData = v
	return s
}

type DescribeInstanceMonitorDataResponseMonitorData struct {
	InstanceMonitorData []*DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData `json:"InstanceMonitorData" xml:"InstanceMonitorData" require:"true" type:"Repeated"`
}

func (s DescribeInstanceMonitorDataResponseMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseMonitorData) SetInstanceMonitorData(v []*DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) *DescribeInstanceMonitorDataResponseMonitorData {
	s.InstanceMonitorData = v
	return s
}

type DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData struct {
	InstanceId                   *string  `json:"InstanceId" xml:"InstanceId" require:"true"`
	CPU                          *int     `json:"CPU" xml:"CPU" require:"true"`
	IntranetRX                   *int     `json:"IntranetRX" xml:"IntranetRX" require:"true"`
	IntranetTX                   *int     `json:"IntranetTX" xml:"IntranetTX" require:"true"`
	IntranetBandwidth            *int     `json:"IntranetBandwidth" xml:"IntranetBandwidth" require:"true"`
	InternetRX                   *int     `json:"InternetRX" xml:"InternetRX" require:"true"`
	InternetTX                   *int     `json:"InternetTX" xml:"InternetTX" require:"true"`
	InternetBandwidth            *int     `json:"InternetBandwidth" xml:"InternetBandwidth" require:"true"`
	IOPSRead                     *int     `json:"IOPSRead" xml:"IOPSRead" require:"true"`
	IOPSWrite                    *int     `json:"IOPSWrite" xml:"IOPSWrite" require:"true"`
	BPSRead                      *int     `json:"BPSRead" xml:"BPSRead" require:"true"`
	BPSWrite                     *int     `json:"BPSWrite" xml:"BPSWrite" require:"true"`
	CPUCreditUsage               *float32 `json:"CPUCreditUsage" xml:"CPUCreditUsage" require:"true"`
	CPUCreditBalance             *float32 `json:"CPUCreditBalance" xml:"CPUCreditBalance" require:"true"`
	CPUAdvanceCreditBalance      *float32 `json:"CPUAdvanceCreditBalance" xml:"CPUAdvanceCreditBalance" require:"true"`
	CPUNotpaidSurplusCreditUsage *float32 `json:"CPUNotpaidSurplusCreditUsage" xml:"CPUNotpaidSurplusCreditUsage" require:"true"`
	TimeStamp                    *string  `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetInstanceId(v string) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetCPU(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.CPU = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetIntranetRX(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.IntranetRX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetIntranetTX(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.IntranetTX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetIntranetBandwidth(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.IntranetBandwidth = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetInternetRX(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetInternetTX(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetInternetBandwidth(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.InternetBandwidth = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetIOPSRead(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.IOPSRead = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetIOPSWrite(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetBPSRead(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.BPSRead = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetBPSWrite(v int) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.BPSWrite = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetCPUCreditUsage(v float32) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.CPUCreditUsage = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetCPUCreditBalance(v float32) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.CPUCreditBalance = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetCPUAdvanceCreditBalance(v float32) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.CPUAdvanceCreditBalance = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetCPUNotpaidSurplusCreditUsage(v float32) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.CPUNotpaidSurplusCreditUsage = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData) SetTimeStamp(v string) *DescribeInstanceMonitorDataResponseMonitorDataInstanceMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeInstanceAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetInstanceId(v string) *DescribeInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeRequest) SetOwnerAccount(v string) *DescribeInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceAttributeResponse struct {
	RequestId               *string                                                  `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceId              *string                                                  `json:"InstanceId" xml:"InstanceId" require:"true"`
	InstanceName            *string                                                  `json:"InstanceName" xml:"InstanceName" require:"true"`
	ImageId                 *string                                                  `json:"ImageId" xml:"ImageId" require:"true"`
	RegionId                *string                                                  `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                  *string                                                  `json:"ZoneId" xml:"ZoneId" require:"true"`
	ClusterId               *string                                                  `json:"ClusterId" xml:"ClusterId" require:"true"`
	InstanceType            *string                                                  `json:"InstanceType" xml:"InstanceType" require:"true"`
	Cpu                     *int                                                     `json:"Cpu" xml:"Cpu" require:"true"`
	Memory                  *int                                                     `json:"Memory" xml:"Memory" require:"true"`
	HostName                *string                                                  `json:"HostName" xml:"HostName" require:"true"`
	Status                  *string                                                  `json:"Status" xml:"Status" require:"true"`
	InternetChargeType      *string                                                  `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	InternetMaxBandwidthIn  *int                                                     `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn" require:"true"`
	InternetMaxBandwidthOut *int                                                     `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut" require:"true"`
	VlanId                  *string                                                  `json:"VlanId" xml:"VlanId" require:"true"`
	SerialNumber            *string                                                  `json:"SerialNumber" xml:"SerialNumber" require:"true"`
	CreationTime            *string                                                  `json:"CreationTime" xml:"CreationTime" require:"true"`
	Description             *string                                                  `json:"Description" xml:"Description" require:"true"`
	InstanceNetworkType     *string                                                  `json:"InstanceNetworkType" xml:"InstanceNetworkType" require:"true"`
	IoOptimized             *string                                                  `json:"IoOptimized" xml:"IoOptimized" require:"true"`
	InstanceChargeType      *string                                                  `json:"InstanceChargeType" xml:"InstanceChargeType" require:"true"`
	ExpiredTime             *string                                                  `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	StoppedMode             *string                                                  `json:"StoppedMode" xml:"StoppedMode" require:"true"`
	CreditSpecification     *string                                                  `json:"CreditSpecification" xml:"CreditSpecification" require:"true"`
	OperationLocks          *DescribeInstanceAttributeResponseOperationLocks         `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
	VpcAttributes           *DescribeInstanceAttributeResponseVpcAttributes          `json:"VpcAttributes" xml:"VpcAttributes" require:"true" type:"Struct"`
	EipAddress              *DescribeInstanceAttributeResponseEipAddress             `json:"EipAddress" xml:"EipAddress" require:"true" type:"Struct"`
	DedicatedHostAttribute  *DescribeInstanceAttributeResponseDedicatedHostAttribute `json:"DedicatedHostAttribute" xml:"DedicatedHostAttribute" require:"true" type:"Struct"`
	SecurityGroupIds        *DescribeInstanceAttributeResponseSecurityGroupIds       `json:"SecurityGroupIds" xml:"SecurityGroupIds" require:"true" type:"Struct"`
	PublicIpAddress         *DescribeInstanceAttributeResponsePublicIpAddress        `json:"PublicIpAddress" xml:"PublicIpAddress" require:"true" type:"Struct"`
	InnerIpAddress          *DescribeInstanceAttributeResponseInnerIpAddress         `json:"InnerIpAddress" xml:"InnerIpAddress" require:"true" type:"Struct"`
}

func (s DescribeInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponse) SetRequestId(v string) *DescribeInstanceAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInstanceId(v string) *DescribeInstanceAttributeResponse {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInstanceName(v string) *DescribeInstanceAttributeResponse {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetImageId(v string) *DescribeInstanceAttributeResponse {
	s.ImageId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetRegionId(v string) *DescribeInstanceAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetZoneId(v string) *DescribeInstanceAttributeResponse {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetClusterId(v string) *DescribeInstanceAttributeResponse {
	s.ClusterId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInstanceType(v string) *DescribeInstanceAttributeResponse {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetCpu(v int) *DescribeInstanceAttributeResponse {
	s.Cpu = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetMemory(v int) *DescribeInstanceAttributeResponse {
	s.Memory = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetHostName(v string) *DescribeInstanceAttributeResponse {
	s.HostName = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetStatus(v string) *DescribeInstanceAttributeResponse {
	s.Status = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInternetChargeType(v string) *DescribeInstanceAttributeResponse {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInternetMaxBandwidthIn(v int) *DescribeInstanceAttributeResponse {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInternetMaxBandwidthOut(v int) *DescribeInstanceAttributeResponse {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetVlanId(v string) *DescribeInstanceAttributeResponse {
	s.VlanId = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetSerialNumber(v string) *DescribeInstanceAttributeResponse {
	s.SerialNumber = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetCreationTime(v string) *DescribeInstanceAttributeResponse {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetDescription(v string) *DescribeInstanceAttributeResponse {
	s.Description = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInstanceNetworkType(v string) *DescribeInstanceAttributeResponse {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetIoOptimized(v string) *DescribeInstanceAttributeResponse {
	s.IoOptimized = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInstanceChargeType(v string) *DescribeInstanceAttributeResponse {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetExpiredTime(v string) *DescribeInstanceAttributeResponse {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetStoppedMode(v string) *DescribeInstanceAttributeResponse {
	s.StoppedMode = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetCreditSpecification(v string) *DescribeInstanceAttributeResponse {
	s.CreditSpecification = &v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetOperationLocks(v *DescribeInstanceAttributeResponseOperationLocks) *DescribeInstanceAttributeResponse {
	s.OperationLocks = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetVpcAttributes(v *DescribeInstanceAttributeResponseVpcAttributes) *DescribeInstanceAttributeResponse {
	s.VpcAttributes = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetEipAddress(v *DescribeInstanceAttributeResponseEipAddress) *DescribeInstanceAttributeResponse {
	s.EipAddress = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetDedicatedHostAttribute(v *DescribeInstanceAttributeResponseDedicatedHostAttribute) *DescribeInstanceAttributeResponse {
	s.DedicatedHostAttribute = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetSecurityGroupIds(v *DescribeInstanceAttributeResponseSecurityGroupIds) *DescribeInstanceAttributeResponse {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetPublicIpAddress(v *DescribeInstanceAttributeResponsePublicIpAddress) *DescribeInstanceAttributeResponse {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstanceAttributeResponse) SetInnerIpAddress(v *DescribeInstanceAttributeResponseInnerIpAddress) *DescribeInstanceAttributeResponse {
	s.InnerIpAddress = v
	return s
}

type DescribeInstanceAttributeResponseOperationLocks struct {
	LockReason []*DescribeInstanceAttributeResponseOperationLocksLockReason `json:"LockReason" xml:"LockReason" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseOperationLocks) SetLockReason(v []*DescribeInstanceAttributeResponseOperationLocksLockReason) *DescribeInstanceAttributeResponseOperationLocks {
	s.LockReason = v
	return s
}

type DescribeInstanceAttributeResponseOperationLocksLockReason struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeInstanceAttributeResponseOperationLocksLockReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseOperationLocksLockReason) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseOperationLocksLockReason) SetLockReason(v string) *DescribeInstanceAttributeResponseOperationLocksLockReason {
	s.LockReason = &v
	return s
}

type DescribeInstanceAttributeResponseVpcAttributes struct {
	VpcId            *string                                                         `json:"VpcId" xml:"VpcId" require:"true"`
	VSwitchId        *string                                                         `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	NatIpAddress     *string                                                         `json:"NatIpAddress" xml:"NatIpAddress" require:"true"`
	PrivateIpAddress *DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress `json:"PrivateIpAddress" xml:"PrivateIpAddress" require:"true" type:"Struct"`
}

func (s DescribeInstanceAttributeResponseVpcAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseVpcAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseVpcAttributes) SetVpcId(v string) *DescribeInstanceAttributeResponseVpcAttributes {
	s.VpcId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseVpcAttributes) SetVSwitchId(v string) *DescribeInstanceAttributeResponseVpcAttributes {
	s.VSwitchId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseVpcAttributes) SetNatIpAddress(v string) *DescribeInstanceAttributeResponseVpcAttributes {
	s.NatIpAddress = &v
	return s
}

func (s *DescribeInstanceAttributeResponseVpcAttributes) SetPrivateIpAddress(v *DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress) *DescribeInstanceAttributeResponseVpcAttributes {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress) SetIpAddress(v []*string) *DescribeInstanceAttributeResponseVpcAttributesPrivateIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstanceAttributeResponseEipAddress struct {
	AllocationId       *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	IpAddress          *string `json:"IpAddress" xml:"IpAddress" require:"true"`
	Bandwidth          *int    `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	InternetChargeType *string `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
}

func (s DescribeInstanceAttributeResponseEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseEipAddress) SetAllocationId(v string) *DescribeInstanceAttributeResponseEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseEipAddress) SetIpAddress(v string) *DescribeInstanceAttributeResponseEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeInstanceAttributeResponseEipAddress) SetBandwidth(v int) *DescribeInstanceAttributeResponseEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeInstanceAttributeResponseEipAddress) SetInternetChargeType(v string) *DescribeInstanceAttributeResponseEipAddress {
	s.InternetChargeType = &v
	return s
}

type DescribeInstanceAttributeResponseDedicatedHostAttribute struct {
	DedicatedHostId   *string `json:"DedicatedHostId" xml:"DedicatedHostId" require:"true"`
	DedicatedHostName *string `json:"DedicatedHostName" xml:"DedicatedHostName" require:"true"`
}

func (s DescribeInstanceAttributeResponseDedicatedHostAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseDedicatedHostAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseDedicatedHostAttribute) SetDedicatedHostId(v string) *DescribeInstanceAttributeResponseDedicatedHostAttribute {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeInstanceAttributeResponseDedicatedHostAttribute) SetDedicatedHostName(v string) *DescribeInstanceAttributeResponseDedicatedHostAttribute {
	s.DedicatedHostName = &v
	return s
}

type DescribeInstanceAttributeResponseSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeInstanceAttributeResponseSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type DescribeInstanceAttributeResponsePublicIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponsePublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponsePublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponsePublicIpAddress) SetIpAddress(v []*string) *DescribeInstanceAttributeResponsePublicIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstanceAttributeResponseInnerIpAddress struct {
	IpAddress []*string `json:"IpAddress" xml:"IpAddress" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAttributeResponseInnerIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAttributeResponseInnerIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAttributeResponseInnerIpAddress) SetIpAddress(v []*string) *DescribeInstanceAttributeResponseInnerIpAddress {
	s.IpAddress = v
	return s
}

type DescribeImageSharePermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId" require:"true"`
	PageNumber           *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionRequest) SetOwnerId(v int64) *DescribeImageSharePermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetResourceOwnerAccount(v string) *DescribeImageSharePermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetResourceOwnerId(v int64) *DescribeImageSharePermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetRegionId(v string) *DescribeImageSharePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetImageId(v string) *DescribeImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageNumber(v int) *DescribeImageSharePermissionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageSize(v int) *DescribeImageSharePermissionRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetOwnerAccount(v string) *DescribeImageSharePermissionRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeImageSharePermissionResponse struct {
	RequestId   *string                                          `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId    *string                                          `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount  *int                                             `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber  *int                                             `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize    *int                                             `json:"PageSize" xml:"PageSize" require:"true"`
	ImageId     *string                                          `json:"ImageId" xml:"ImageId" require:"true"`
	ShareGroups *DescribeImageSharePermissionResponseShareGroups `json:"ShareGroups" xml:"ShareGroups" require:"true" type:"Struct"`
	Accounts    *DescribeImageSharePermissionResponseAccounts    `json:"Accounts" xml:"Accounts" require:"true" type:"Struct"`
}

func (s DescribeImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponse) SetRequestId(v string) *DescribeImageSharePermissionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetRegionId(v string) *DescribeImageSharePermissionResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetTotalCount(v int) *DescribeImageSharePermissionResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetPageNumber(v int) *DescribeImageSharePermissionResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetPageSize(v int) *DescribeImageSharePermissionResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetImageId(v string) *DescribeImageSharePermissionResponse {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetShareGroups(v *DescribeImageSharePermissionResponseShareGroups) *DescribeImageSharePermissionResponse {
	s.ShareGroups = v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetAccounts(v *DescribeImageSharePermissionResponseAccounts) *DescribeImageSharePermissionResponse {
	s.Accounts = v
	return s
}

type DescribeImageSharePermissionResponseShareGroups struct {
	ShareGroup []*DescribeImageSharePermissionResponseShareGroupsShareGroup `json:"ShareGroup" xml:"ShareGroup" require:"true" type:"Repeated"`
}

func (s DescribeImageSharePermissionResponseShareGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseShareGroups) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseShareGroups) SetShareGroup(v []*DescribeImageSharePermissionResponseShareGroupsShareGroup) *DescribeImageSharePermissionResponseShareGroups {
	s.ShareGroup = v
	return s
}

type DescribeImageSharePermissionResponseShareGroupsShareGroup struct {
	Group *string `json:"Group" xml:"Group" require:"true"`
}

func (s DescribeImageSharePermissionResponseShareGroupsShareGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseShareGroupsShareGroup) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseShareGroupsShareGroup) SetGroup(v string) *DescribeImageSharePermissionResponseShareGroupsShareGroup {
	s.Group = &v
	return s
}

type DescribeImageSharePermissionResponseAccounts struct {
	Account []*DescribeImageSharePermissionResponseAccountsAccount `json:"Account" xml:"Account" require:"true" type:"Repeated"`
}

func (s DescribeImageSharePermissionResponseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseAccounts) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseAccounts) SetAccount(v []*DescribeImageSharePermissionResponseAccountsAccount) *DescribeImageSharePermissionResponseAccounts {
	s.Account = v
	return s
}

type DescribeImageSharePermissionResponseAccountsAccount struct {
	AliyunId *string `json:"AliyunId" xml:"AliyunId" require:"true"`
}

func (s DescribeImageSharePermissionResponseAccountsAccount) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseAccountsAccount) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseAccountsAccount) SetAliyunId(v string) *DescribeImageSharePermissionResponseAccountsAccount {
	s.AliyunId = &v
	return s
}

type DescribeImagesRequest struct {
	OwnerId              *int64                      `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                     `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                      `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                     `json:"RegionId" xml:"RegionId" require:"true"`
	Status               *string                     `json:"Status" xml:"Status"`
	ImageId              *string                     `json:"ImageId" xml:"ImageId"`
	ShowExpired          *bool                       `json:"ShowExpired" xml:"ShowExpired"`
	SnapshotId           *string                     `json:"SnapshotId" xml:"SnapshotId"`
	ImageName            *string                     `json:"ImageName" xml:"ImageName"`
	ImageFamily          *string                     `json:"ImageFamily" xml:"ImageFamily"`
	ImageOwnerAlias      *string                     `json:"ImageOwnerAlias" xml:"ImageOwnerAlias"`
	InstanceType         *string                     `json:"InstanceType" xml:"InstanceType"`
	IsSupportIoOptimized *bool                       `json:"IsSupportIoOptimized" xml:"IsSupportIoOptimized"`
	IsSupportCloudinit   *bool                       `json:"IsSupportCloudinit" xml:"IsSupportCloudinit"`
	OSType               *string                     `json:"OSType" xml:"OSType"`
	Architecture         *string                     `json:"Architecture" xml:"Architecture"`
	PageNumber           *int                        `json:"PageNumber" xml:"PageNumber"`
	PageSize             *int                        `json:"PageSize" xml:"PageSize"`
	OwnerAccount         *string                     `json:"OwnerAccount" xml:"OwnerAccount"`
	Usage                *string                     `json:"Usage" xml:"Usage"`
	Tag                  []*DescribeImagesRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	DryRun               *bool                       `json:"DryRun" xml:"DryRun"`
	ActionType           *string                     `json:"ActionType" xml:"ActionType"`
	ResourceGroupId      *string                     `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s DescribeImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequest) SetOwnerId(v int64) *DescribeImagesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceOwnerAccount(v string) *DescribeImagesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceOwnerId(v int64) *DescribeImagesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImagesRequest) SetRegionId(v string) *DescribeImagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImagesRequest) SetStatus(v string) *DescribeImagesRequest {
	s.Status = &v
	return s
}

func (s *DescribeImagesRequest) SetImageId(v string) *DescribeImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesRequest) SetShowExpired(v bool) *DescribeImagesRequest {
	s.ShowExpired = &v
	return s
}

func (s *DescribeImagesRequest) SetSnapshotId(v string) *DescribeImagesRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageName(v string) *DescribeImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesRequest) SetImageFamily(v string) *DescribeImagesRequest {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImagesRequest) SetImageOwnerAlias(v string) *DescribeImagesRequest {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesRequest) SetInstanceType(v string) *DescribeImagesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeImagesRequest) SetIsSupportIoOptimized(v bool) *DescribeImagesRequest {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImagesRequest) SetIsSupportCloudinit(v bool) *DescribeImagesRequest {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImagesRequest) SetOSType(v string) *DescribeImagesRequest {
	s.OSType = &v
	return s
}

func (s *DescribeImagesRequest) SetArchitecture(v string) *DescribeImagesRequest {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesRequest) SetPageNumber(v int) *DescribeImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesRequest) SetPageSize(v int) *DescribeImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesRequest) SetOwnerAccount(v string) *DescribeImagesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImagesRequest) SetUsage(v string) *DescribeImagesRequest {
	s.Usage = &v
	return s
}

func (s *DescribeImagesRequest) SetTag(v []*DescribeImagesRequestTag) *DescribeImagesRequest {
	s.Tag = v
	return s
}

func (s *DescribeImagesRequest) SetDryRun(v bool) *DescribeImagesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeImagesRequest) SetActionType(v string) *DescribeImagesRequest {
	s.ActionType = &v
	return s
}

func (s *DescribeImagesRequest) SetResourceGroupId(v string) *DescribeImagesRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeImagesRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeImagesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequestTag) SetValue(v string) *DescribeImagesRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeImagesRequestTag) SetKey(v string) *DescribeImagesRequestTag {
	s.Key = &v
	return s
}

type DescribeImagesResponse struct {
	RequestId  *string                       `json:"RequestId" xml:"RequestId" require:"true"`
	RegionId   *string                       `json:"RegionId" xml:"RegionId" require:"true"`
	TotalCount *int                          `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                          `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                          `json:"PageSize" xml:"PageSize" require:"true"`
	Images     *DescribeImagesResponseImages `json:"Images" xml:"Images" require:"true" type:"Struct"`
}

func (s DescribeImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponse) SetRequestId(v string) *DescribeImagesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeImagesResponse) SetRegionId(v string) *DescribeImagesResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeImagesResponse) SetTotalCount(v int) *DescribeImagesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeImagesResponse) SetPageNumber(v int) *DescribeImagesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesResponse) SetPageSize(v int) *DescribeImagesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesResponse) SetImages(v *DescribeImagesResponseImages) *DescribeImagesResponse {
	s.Images = v
	return s
}

type DescribeImagesResponseImages struct {
	Image []*DescribeImagesResponseImagesImage `json:"Image" xml:"Image" require:"true" type:"Repeated"`
}

func (s DescribeImagesResponseImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImages) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImages) SetImage(v []*DescribeImagesResponseImagesImage) *DescribeImagesResponseImages {
	s.Image = v
	return s
}

type DescribeImagesResponseImagesImage struct {
	Progress             *string                                              `json:"Progress" xml:"Progress" require:"true"`
	ImageId              *string                                              `json:"ImageId" xml:"ImageId" require:"true"`
	ImageName            *string                                              `json:"ImageName" xml:"ImageName" require:"true"`
	ImageFamily          *string                                              `json:"ImageFamily" xml:"ImageFamily" require:"true"`
	ImageVersion         *string                                              `json:"ImageVersion" xml:"ImageVersion" require:"true"`
	Description          *string                                              `json:"Description" xml:"Description" require:"true"`
	Size                 *int                                                 `json:"Size" xml:"Size" require:"true"`
	ImageOwnerAlias      *string                                              `json:"ImageOwnerAlias" xml:"ImageOwnerAlias" require:"true"`
	IsSupportIoOptimized *bool                                                `json:"IsSupportIoOptimized" xml:"IsSupportIoOptimized" require:"true"`
	IsSupportCloudinit   *bool                                                `json:"IsSupportCloudinit" xml:"IsSupportCloudinit" require:"true"`
	OSName               *string                                              `json:"OSName" xml:"OSName" require:"true"`
	OSNameEn             *string                                              `json:"OSNameEn" xml:"OSNameEn" require:"true"`
	Architecture         *string                                              `json:"Architecture" xml:"Architecture" require:"true"`
	Status               *string                                              `json:"Status" xml:"Status" require:"true"`
	ProductCode          *string                                              `json:"ProductCode" xml:"ProductCode" require:"true"`
	IsSubscribed         *bool                                                `json:"IsSubscribed" xml:"IsSubscribed" require:"true"`
	CreationTime         *string                                              `json:"CreationTime" xml:"CreationTime" require:"true"`
	IsSelfShared         *string                                              `json:"IsSelfShared" xml:"IsSelfShared" require:"true"`
	OSType               *string                                              `json:"OSType" xml:"OSType" require:"true"`
	Platform             *string                                              `json:"Platform" xml:"Platform" require:"true"`
	Usage                *string                                              `json:"Usage" xml:"Usage" require:"true"`
	IsCopied             *bool                                                `json:"IsCopied" xml:"IsCopied" require:"true"`
	ResourceGroupId      *string                                              `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	DiskDeviceMappings   *DescribeImagesResponseImagesImageDiskDeviceMappings `json:"DiskDeviceMappings" xml:"DiskDeviceMappings" require:"true" type:"Struct"`
	Tags                 *DescribeImagesResponseImagesImageTags               `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeImagesResponseImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImagesImage) SetProgress(v string) *DescribeImagesResponseImagesImage {
	s.Progress = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetImageId(v string) *DescribeImagesResponseImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetImageName(v string) *DescribeImagesResponseImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetImageFamily(v string) *DescribeImagesResponseImagesImage {
	s.ImageFamily = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetImageVersion(v string) *DescribeImagesResponseImagesImage {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetDescription(v string) *DescribeImagesResponseImagesImage {
	s.Description = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetSize(v int) *DescribeImagesResponseImagesImage {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetImageOwnerAlias(v string) *DescribeImagesResponseImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetIsSupportIoOptimized(v bool) *DescribeImagesResponseImagesImage {
	s.IsSupportIoOptimized = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetIsSupportCloudinit(v bool) *DescribeImagesResponseImagesImage {
	s.IsSupportCloudinit = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetOSName(v string) *DescribeImagesResponseImagesImage {
	s.OSName = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetOSNameEn(v string) *DescribeImagesResponseImagesImage {
	s.OSNameEn = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetArchitecture(v string) *DescribeImagesResponseImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetStatus(v string) *DescribeImagesResponseImagesImage {
	s.Status = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetProductCode(v string) *DescribeImagesResponseImagesImage {
	s.ProductCode = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetIsSubscribed(v bool) *DescribeImagesResponseImagesImage {
	s.IsSubscribed = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetCreationTime(v string) *DescribeImagesResponseImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetIsSelfShared(v string) *DescribeImagesResponseImagesImage {
	s.IsSelfShared = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetOSType(v string) *DescribeImagesResponseImagesImage {
	s.OSType = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetPlatform(v string) *DescribeImagesResponseImagesImage {
	s.Platform = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetUsage(v string) *DescribeImagesResponseImagesImage {
	s.Usage = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetIsCopied(v bool) *DescribeImagesResponseImagesImage {
	s.IsCopied = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetResourceGroupId(v string) *DescribeImagesResponseImagesImage {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetDiskDeviceMappings(v *DescribeImagesResponseImagesImageDiskDeviceMappings) *DescribeImagesResponseImagesImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImagesResponseImagesImage) SetTags(v *DescribeImagesResponseImagesImageTags) *DescribeImagesResponseImagesImage {
	s.Tags = v
	return s
}

type DescribeImagesResponseImagesImageDiskDeviceMappings struct {
	DiskDeviceMapping []*DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping `json:"DiskDeviceMapping" xml:"DiskDeviceMapping" require:"true" type:"Repeated"`
}

func (s DescribeImagesResponseImagesImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImagesImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappings) SetDiskDeviceMapping(v []*DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) *DescribeImagesResponseImagesImageDiskDeviceMappings {
	s.DiskDeviceMapping = v
	return s
}

type DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping struct {
	SnapshotId      *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Size            *string `json:"Size" xml:"Size" require:"true"`
	Device          *string `json:"Device" xml:"Device" require:"true"`
	Type            *string `json:"Type" xml:"Type" require:"true"`
	Format          *string `json:"Format" xml:"Format" require:"true"`
	ImportOSSBucket *string `json:"ImportOSSBucket" xml:"ImportOSSBucket" require:"true"`
	ImportOSSObject *string `json:"ImportOSSObject" xml:"ImportOSSObject" require:"true"`
	Progress        *string `json:"Progress" xml:"Progress" require:"true"`
	RemainTime      *int    `json:"RemainTime" xml:"RemainTime" require:"true"`
}

func (s DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetSnapshotId(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetSize(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetDevice(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Device = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetType(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Type = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetFormat(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetImportOSSBucket(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImportOSSBucket = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetImportOSSObject(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImportOSSObject = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetProgress(v string) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Progress = &v
	return s
}

func (s *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping) SetRemainTime(v int) *DescribeImagesResponseImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.RemainTime = &v
	return s
}

type DescribeImagesResponseImagesImageTags struct {
	Tag []*DescribeImagesResponseImagesImageTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeImagesResponseImagesImageTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImagesImageTags) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImagesImageTags) SetTag(v []*DescribeImagesResponseImagesImageTagsTag) *DescribeImagesResponseImagesImageTags {
	s.Tag = v
	return s
}

type DescribeImagesResponseImagesImageTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeImagesResponseImagesImageTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseImagesImageTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseImagesImageTagsTag) SetTagKey(v string) *DescribeImagesResponseImagesImageTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeImagesResponseImagesImageTagsTag) SetTagValue(v string) *DescribeImagesResponseImagesImageTagsTag {
	s.TagValue = &v
	return s
}

type DescribeEipMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeEipMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataRequest) SetOwnerId(v int64) *DescribeEipMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeEipMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeEipMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetRegionId(v string) *DescribeEipMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetAllocationId(v string) *DescribeEipMonitorDataRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetStartTime(v string) *DescribeEipMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetEndTime(v string) *DescribeEipMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetPeriod(v int) *DescribeEipMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeEipMonitorDataRequest) SetOwnerAccount(v string) *DescribeEipMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeEipMonitorDataResponse struct {
	RequestId       *string                                        `json:"RequestId" xml:"RequestId" require:"true"`
	EipMonitorDatas *DescribeEipMonitorDataResponseEipMonitorDatas `json:"EipMonitorDatas" xml:"EipMonitorDatas" require:"true" type:"Struct"`
}

func (s DescribeEipMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponse) SetRequestId(v string) *DescribeEipMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipMonitorDataResponse) SetEipMonitorDatas(v *DescribeEipMonitorDataResponseEipMonitorDatas) *DescribeEipMonitorDataResponse {
	s.EipMonitorDatas = v
	return s
}

type DescribeEipMonitorDataResponseEipMonitorDatas struct {
	EipMonitorData []*DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData `json:"EipMonitorData" xml:"EipMonitorData" require:"true" type:"Repeated"`
}

func (s DescribeEipMonitorDataResponseEipMonitorDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseEipMonitorDatas) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatas) SetEipMonitorData(v []*DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) *DescribeEipMonitorDataResponseEipMonitorDatas {
	s.EipMonitorData = v
	return s
}

type DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData struct {
	EipRX        *int    `json:"EipRX" xml:"EipRX" require:"true"`
	EipTX        *int    `json:"EipTX" xml:"EipTX" require:"true"`
	EipFlow      *int    `json:"EipFlow" xml:"EipFlow" require:"true"`
	EipBandwidth *int    `json:"EipBandwidth" xml:"EipBandwidth" require:"true"`
	EipPackets   *int    `json:"EipPackets" xml:"EipPackets" require:"true"`
	TimeStamp    *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipRX(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipRX = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipTX(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipTX = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipFlow(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipFlow = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipBandwidth(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetEipPackets(v int) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.EipPackets = &v
	return s
}

func (s *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData) SetTimeStamp(v string) *DescribeEipMonitorDataResponseEipMonitorDatasEipMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeEipAddressesRequest struct {
	OwnerId                *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId               *string `json:"RegionId" xml:"RegionId" require:"true"`
	Status                 *string `json:"Status" xml:"Status"`
	EipAddress             *string `json:"EipAddress" xml:"EipAddress"`
	AllocationId           *string `json:"AllocationId" xml:"AllocationId"`
	ISP                    *string `json:"ISP" xml:"ISP"`
	PageNumber             *int    `json:"PageNumber" xml:"PageNumber"`
	PageSize               *int    `json:"PageSize" xml:"PageSize"`
	OwnerAccount           *string `json:"OwnerAccount" xml:"OwnerAccount"`
	LockReason             *string `json:"LockReason" xml:"LockReason"`
	AssociatedInstanceType *string `json:"AssociatedInstanceType" xml:"AssociatedInstanceType"`
	AssociatedInstanceId   *string `json:"AssociatedInstanceId" xml:"AssociatedInstanceId"`
	ChargeType             *string `json:"ChargeType" xml:"ChargeType"`
}

func (s DescribeEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequest) SetOwnerId(v int64) *DescribeEipAddressesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetResourceOwnerAccount(v string) *DescribeEipAddressesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetResourceOwnerId(v int64) *DescribeEipAddressesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetRegionId(v string) *DescribeEipAddressesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetStatus(v string) *DescribeEipAddressesRequest {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetEipAddress(v string) *DescribeEipAddressesRequest {
	s.EipAddress = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAllocationId(v string) *DescribeEipAddressesRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetISP(v string) *DescribeEipAddressesRequest {
	s.ISP = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageNumber(v int) *DescribeEipAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetPageSize(v int) *DescribeEipAddressesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetOwnerAccount(v string) *DescribeEipAddressesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetLockReason(v string) *DescribeEipAddressesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceType(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetAssociatedInstanceId(v string) *DescribeEipAddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetChargeType(v string) *DescribeEipAddressesRequest {
	s.ChargeType = &v
	return s
}

type DescribeEipAddressesResponse struct {
	RequestId    *string                                   `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount   *int                                      `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber   *int                                      `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize     *int                                      `json:"PageSize" xml:"PageSize" require:"true"`
	EipAddresses *DescribeEipAddressesResponseEipAddresses `json:"EipAddresses" xml:"EipAddresses" require:"true" type:"Struct"`
}

func (s DescribeEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponse) SetRequestId(v string) *DescribeEipAddressesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetTotalCount(v int) *DescribeEipAddressesResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetPageNumber(v int) *DescribeEipAddressesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetPageSize(v int) *DescribeEipAddressesResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetEipAddresses(v *DescribeEipAddressesResponseEipAddresses) *DescribeEipAddressesResponse {
	s.EipAddresses = v
	return s
}

type DescribeEipAddressesResponseEipAddresses struct {
	EipAddress []*DescribeEipAddressesResponseEipAddressesEipAddress `json:"EipAddress" xml:"EipAddress" require:"true" type:"Repeated"`
}

func (s DescribeEipAddressesResponseEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddresses) SetEipAddress(v []*DescribeEipAddressesResponseEipAddressesEipAddress) *DescribeEipAddressesResponseEipAddresses {
	s.EipAddress = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddress struct {
	RegionId           *string                                                           `json:"RegionId" xml:"RegionId" require:"true"`
	IpAddress          *string                                                           `json:"IpAddress" xml:"IpAddress" require:"true"`
	AllocationId       *string                                                           `json:"AllocationId" xml:"AllocationId" require:"true"`
	Status             *string                                                           `json:"Status" xml:"Status" require:"true"`
	InstanceId         *string                                                           `json:"InstanceId" xml:"InstanceId" require:"true"`
	Bandwidth          *string                                                           `json:"Bandwidth" xml:"Bandwidth" require:"true"`
	EipBandwidth       *string                                                           `json:"EipBandwidth" xml:"EipBandwidth" require:"true"`
	InternetChargeType *string                                                           `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
	AllocationTime     *string                                                           `json:"AllocationTime" xml:"AllocationTime" require:"true"`
	InstanceType       *string                                                           `json:"InstanceType" xml:"InstanceType" require:"true"`
	ChargeType         *string                                                           `json:"ChargeType" xml:"ChargeType" require:"true"`
	ExpiredTime        *string                                                           `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	OperationLocks     *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetRegionId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.RegionId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetIpAddress(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetAllocationId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetStatus(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Status = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInstanceId(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InstanceId = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetEipBandwidth(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.EipBandwidth = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInternetChargeType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetAllocationTime(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.AllocationTime = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetInstanceType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.InstanceType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetChargeType(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ChargeType = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetExpiredTime(v string) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddress) SetOperationLocks(v *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) *DescribeEipAddressesResponseEipAddressesEipAddress {
	s.OperationLocks = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks struct {
	LockReason []*DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason `json:"LockReason" xml:"LockReason" require:"true" type:"Repeated"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks) SetLockReason(v []*DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocks {
	s.LockReason = v
	return s
}

type DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason) SetLockReason(v string) *DescribeEipAddressesResponseEipAddressesEipAddressOperationLocksLockReason {
	s.LockReason = &v
	return s
}

type DescribeDisksRequest struct {
	OwnerId                       *int64                     `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount          *string                    `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId               *int64                     `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                      *string                    `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                        *string                    `json:"ZoneId" xml:"ZoneId"`
	DiskIds                       *string                    `json:"DiskIds" xml:"DiskIds"`
	InstanceId                    *string                    `json:"InstanceId" xml:"InstanceId"`
	DiskType                      *string                    `json:"DiskType" xml:"DiskType"`
	Category                      *string                    `json:"Category" xml:"Category"`
	Status                        *string                    `json:"Status" xml:"Status"`
	SnapshotId                    *string                    `json:"SnapshotId" xml:"SnapshotId"`
	Portable                      *bool                      `json:"Portable" xml:"Portable"`
	DeleteWithInstance            *bool                      `json:"DeleteWithInstance" xml:"DeleteWithInstance"`
	DeleteAutoSnapshot            *bool                      `json:"DeleteAutoSnapshot" xml:"DeleteAutoSnapshot"`
	PageNumber                    *int                       `json:"PageNumber" xml:"PageNumber"`
	PageSize                      *int                       `json:"PageSize" xml:"PageSize"`
	OwnerAccount                  *string                    `json:"OwnerAccount" xml:"OwnerAccount"`
	DiskName                      *string                    `json:"DiskName" xml:"DiskName"`
	AutoSnapshotPolicyId          *string                    `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId"`
	EnableAutoSnapshot            *bool                      `json:"EnableAutoSnapshot" xml:"EnableAutoSnapshot"`
	EnableAutomatedSnapshotPolicy *bool                      `json:"EnableAutomatedSnapshotPolicy" xml:"EnableAutomatedSnapshotPolicy"`
	DiskChargeType                *string                    `json:"DiskChargeType" xml:"DiskChargeType"`
	LockReason                    *string                    `json:"LockReason" xml:"LockReason"`
	Tag                           []*DescribeDisksRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId               *string                    `json:"ResourceGroupId" xml:"ResourceGroupId"`
	EnableShared                  *bool                      `json:"EnableShared" xml:"EnableShared"`
	Encrypted                     *bool                      `json:"Encrypted" xml:"Encrypted"`
	AdditionalAttributes          []*string                  `json:"AdditionalAttributes" xml:"AdditionalAttributes" type:"Repeated"`
	DryRun                        *bool                      `json:"DryRun" xml:"DryRun"`
	KMSKeyId                      *string                    `json:"KMSKeyId" xml:"KMSKeyId"`
}

func (s DescribeDisksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequest) SetOwnerId(v int64) *DescribeDisksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDisksRequest) SetResourceOwnerAccount(v string) *DescribeDisksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDisksRequest) SetResourceOwnerId(v int64) *DescribeDisksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDisksRequest) SetRegionId(v string) *DescribeDisksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksRequest) SetZoneId(v string) *DescribeDisksRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskIds(v string) *DescribeDisksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeDisksRequest) SetInstanceId(v string) *DescribeDisksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskType(v string) *DescribeDisksRequest {
	s.DiskType = &v
	return s
}

func (s *DescribeDisksRequest) SetCategory(v string) *DescribeDisksRequest {
	s.Category = &v
	return s
}

func (s *DescribeDisksRequest) SetStatus(v string) *DescribeDisksRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksRequest) SetSnapshotId(v string) *DescribeDisksRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeDisksRequest) SetPortable(v bool) *DescribeDisksRequest {
	s.Portable = &v
	return s
}

func (s *DescribeDisksRequest) SetDeleteWithInstance(v bool) *DescribeDisksRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeDisksRequest) SetDeleteAutoSnapshot(v bool) *DescribeDisksRequest {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *DescribeDisksRequest) SetPageNumber(v int) *DescribeDisksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksRequest) SetPageSize(v int) *DescribeDisksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksRequest) SetOwnerAccount(v string) *DescribeDisksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskName(v string) *DescribeDisksRequest {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksRequest) SetAutoSnapshotPolicyId(v string) *DescribeDisksRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableAutoSnapshot(v bool) *DescribeDisksRequest {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableAutomatedSnapshotPolicy(v bool) *DescribeDisksRequest {
	s.EnableAutomatedSnapshotPolicy = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskChargeType(v string) *DescribeDisksRequest {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksRequest) SetLockReason(v string) *DescribeDisksRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDisksRequest) SetTag(v []*DescribeDisksRequestTag) *DescribeDisksRequest {
	s.Tag = v
	return s
}

func (s *DescribeDisksRequest) SetResourceGroupId(v string) *DescribeDisksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnableShared(v bool) *DescribeDisksRequest {
	s.EnableShared = &v
	return s
}

func (s *DescribeDisksRequest) SetEncrypted(v bool) *DescribeDisksRequest {
	s.Encrypted = &v
	return s
}

func (s *DescribeDisksRequest) SetAdditionalAttributes(v []*string) *DescribeDisksRequest {
	s.AdditionalAttributes = v
	return s
}

func (s *DescribeDisksRequest) SetDryRun(v bool) *DescribeDisksRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeDisksRequest) SetKMSKeyId(v string) *DescribeDisksRequest {
	s.KMSKeyId = &v
	return s
}

type DescribeDisksRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s DescribeDisksRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequestTag) SetValue(v string) *DescribeDisksRequestTag {
	s.Value = &v
	return s
}

func (s *DescribeDisksRequestTag) SetKey(v string) *DescribeDisksRequestTag {
	s.Key = &v
	return s
}

type DescribeDisksResponse struct {
	RequestId  *string                     `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount *int                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	PageNumber *int                        `json:"PageNumber" xml:"PageNumber" require:"true"`
	PageSize   *int                        `json:"PageSize" xml:"PageSize" require:"true"`
	Disks      *DescribeDisksResponseDisks `json:"Disks" xml:"Disks" require:"true" type:"Struct"`
}

func (s DescribeDisksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponse) SetRequestId(v string) *DescribeDisksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksResponse) SetTotalCount(v int) *DescribeDisksResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDisksResponse) SetPageNumber(v int) *DescribeDisksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksResponse) SetPageSize(v int) *DescribeDisksResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksResponse) SetDisks(v *DescribeDisksResponseDisks) *DescribeDisksResponse {
	s.Disks = v
	return s
}

type DescribeDisksResponseDisks struct {
	Disk []*DescribeDisksResponseDisksDisk `json:"Disk" xml:"Disk" require:"true" type:"Repeated"`
}

func (s DescribeDisksResponseDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisks) SetDisk(v []*DescribeDisksResponseDisksDisk) *DescribeDisksResponseDisks {
	s.Disk = v
	return s
}

type DescribeDisksResponseDisksDisk struct {
	DiskId                        *string                                       `json:"DiskId" xml:"DiskId" require:"true"`
	RegionId                      *string                                       `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                        *string                                       `json:"ZoneId" xml:"ZoneId" require:"true"`
	DiskName                      *string                                       `json:"DiskName" xml:"DiskName" require:"true"`
	Description                   *string                                       `json:"Description" xml:"Description" require:"true"`
	Type                          *string                                       `json:"Type" xml:"Type" require:"true"`
	Category                      *string                                       `json:"Category" xml:"Category" require:"true"`
	Size                          *int                                          `json:"Size" xml:"Size" require:"true"`
	ImageId                       *string                                       `json:"ImageId" xml:"ImageId" require:"true"`
	SourceSnapshotId              *string                                       `json:"SourceSnapshotId" xml:"SourceSnapshotId" require:"true"`
	AutoSnapshotPolicyId          *string                                       `json:"AutoSnapshotPolicyId" xml:"AutoSnapshotPolicyId" require:"true"`
	ProductCode                   *string                                       `json:"ProductCode" xml:"ProductCode" require:"true"`
	Portable                      *bool                                         `json:"Portable" xml:"Portable" require:"true"`
	Status                        *string                                       `json:"Status" xml:"Status" require:"true"`
	InstanceId                    *string                                       `json:"InstanceId" xml:"InstanceId" require:"true"`
	Device                        *string                                       `json:"Device" xml:"Device" require:"true"`
	DeleteWithInstance            *bool                                         `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	DeleteAutoSnapshot            *bool                                         `json:"DeleteAutoSnapshot" xml:"DeleteAutoSnapshot" require:"true"`
	EnableAutoSnapshot            *bool                                         `json:"EnableAutoSnapshot" xml:"EnableAutoSnapshot" require:"true"`
	EnableAutomatedSnapshotPolicy *bool                                         `json:"EnableAutomatedSnapshotPolicy" xml:"EnableAutomatedSnapshotPolicy" require:"true"`
	CreationTime                  *string                                       `json:"CreationTime" xml:"CreationTime" require:"true"`
	AttachedTime                  *string                                       `json:"AttachedTime" xml:"AttachedTime" require:"true"`
	DetachedTime                  *string                                       `json:"DetachedTime" xml:"DetachedTime" require:"true"`
	DiskChargeType                *string                                       `json:"DiskChargeType" xml:"DiskChargeType" require:"true"`
	ExpiredTime                   *string                                       `json:"ExpiredTime" xml:"ExpiredTime" require:"true"`
	ResourceGroupId               *string                                       `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
	Encrypted                     *bool                                         `json:"Encrypted" xml:"Encrypted" require:"true"`
	StorageSetId                  *string                                       `json:"StorageSetId" xml:"StorageSetId" require:"true"`
	StorageSetPartitionNumber     *int                                          `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber" require:"true"`
	MountInstanceNum              *int                                          `json:"MountInstanceNum" xml:"MountInstanceNum" require:"true"`
	IOPS                          *int                                          `json:"IOPS" xml:"IOPS" require:"true"`
	IOPSRead                      *int                                          `json:"IOPSRead" xml:"IOPSRead" require:"true"`
	IOPSWrite                     *int                                          `json:"IOPSWrite" xml:"IOPSWrite" require:"true"`
	KMSKeyId                      *string                                       `json:"KMSKeyId" xml:"KMSKeyId" require:"true"`
	PerformanceLevel              *string                                       `json:"PerformanceLevel" xml:"PerformanceLevel" require:"true"`
	BdfId                         *string                                       `json:"BdfId" xml:"BdfId" require:"true"`
	OperationLocks                *DescribeDisksResponseDisksDiskOperationLocks `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
	MountInstances                *DescribeDisksResponseDisksDiskMountInstances `json:"MountInstances" xml:"MountInstances" require:"true" type:"Struct"`
	Tags                          *DescribeDisksResponseDisksDiskTags           `json:"Tags" xml:"Tags" require:"true" type:"Struct"`
}

func (s DescribeDisksResponseDisksDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDisk) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDisk) SetDiskId(v string) *DescribeDisksResponseDisksDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetRegionId(v string) *DescribeDisksResponseDisksDisk {
	s.RegionId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetZoneId(v string) *DescribeDisksResponseDisksDisk {
	s.ZoneId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDiskName(v string) *DescribeDisksResponseDisksDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDescription(v string) *DescribeDisksResponseDisksDisk {
	s.Description = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetType(v string) *DescribeDisksResponseDisksDisk {
	s.Type = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetCategory(v string) *DescribeDisksResponseDisksDisk {
	s.Category = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetSize(v int) *DescribeDisksResponseDisksDisk {
	s.Size = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetImageId(v string) *DescribeDisksResponseDisksDisk {
	s.ImageId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetSourceSnapshotId(v string) *DescribeDisksResponseDisksDisk {
	s.SourceSnapshotId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetAutoSnapshotPolicyId(v string) *DescribeDisksResponseDisksDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetProductCode(v string) *DescribeDisksResponseDisksDisk {
	s.ProductCode = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetPortable(v bool) *DescribeDisksResponseDisksDisk {
	s.Portable = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetStatus(v string) *DescribeDisksResponseDisksDisk {
	s.Status = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetInstanceId(v string) *DescribeDisksResponseDisksDisk {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDevice(v string) *DescribeDisksResponseDisksDisk {
	s.Device = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDeleteWithInstance(v bool) *DescribeDisksResponseDisksDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDeleteAutoSnapshot(v bool) *DescribeDisksResponseDisksDisk {
	s.DeleteAutoSnapshot = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetEnableAutoSnapshot(v bool) *DescribeDisksResponseDisksDisk {
	s.EnableAutoSnapshot = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetEnableAutomatedSnapshotPolicy(v bool) *DescribeDisksResponseDisksDisk {
	s.EnableAutomatedSnapshotPolicy = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetCreationTime(v string) *DescribeDisksResponseDisksDisk {
	s.CreationTime = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetAttachedTime(v string) *DescribeDisksResponseDisksDisk {
	s.AttachedTime = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDetachedTime(v string) *DescribeDisksResponseDisksDisk {
	s.DetachedTime = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetDiskChargeType(v string) *DescribeDisksResponseDisksDisk {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetExpiredTime(v string) *DescribeDisksResponseDisksDisk {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetResourceGroupId(v string) *DescribeDisksResponseDisksDisk {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetEncrypted(v bool) *DescribeDisksResponseDisksDisk {
	s.Encrypted = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetStorageSetId(v string) *DescribeDisksResponseDisksDisk {
	s.StorageSetId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetStorageSetPartitionNumber(v int) *DescribeDisksResponseDisksDisk {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetMountInstanceNum(v int) *DescribeDisksResponseDisksDisk {
	s.MountInstanceNum = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetIOPS(v int) *DescribeDisksResponseDisksDisk {
	s.IOPS = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetIOPSRead(v int) *DescribeDisksResponseDisksDisk {
	s.IOPSRead = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetIOPSWrite(v int) *DescribeDisksResponseDisksDisk {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetKMSKeyId(v string) *DescribeDisksResponseDisksDisk {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetPerformanceLevel(v string) *DescribeDisksResponseDisksDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetBdfId(v string) *DescribeDisksResponseDisksDisk {
	s.BdfId = &v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetOperationLocks(v *DescribeDisksResponseDisksDiskOperationLocks) *DescribeDisksResponseDisksDisk {
	s.OperationLocks = v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetMountInstances(v *DescribeDisksResponseDisksDiskMountInstances) *DescribeDisksResponseDisksDisk {
	s.MountInstances = v
	return s
}

func (s *DescribeDisksResponseDisksDisk) SetTags(v *DescribeDisksResponseDisksDiskTags) *DescribeDisksResponseDisksDisk {
	s.Tags = v
	return s
}

type DescribeDisksResponseDisksDiskOperationLocks struct {
	OperationLock []*DescribeDisksResponseDisksDiskOperationLocksOperationLock `json:"OperationLock" xml:"OperationLock" require:"true" type:"Repeated"`
}

func (s DescribeDisksResponseDisksDiskOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskOperationLocks) SetOperationLock(v []*DescribeDisksResponseDisksDiskOperationLocksOperationLock) *DescribeDisksResponseDisksDiskOperationLocks {
	s.OperationLock = v
	return s
}

type DescribeDisksResponseDisksDiskOperationLocksOperationLock struct {
	LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeDisksResponseDisksDiskOperationLocksOperationLock) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskOperationLocksOperationLock) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskOperationLocksOperationLock) SetLockReason(v string) *DescribeDisksResponseDisksDiskOperationLocksOperationLock {
	s.LockReason = &v
	return s
}

type DescribeDisksResponseDisksDiskMountInstances struct {
	MountInstance []*DescribeDisksResponseDisksDiskMountInstancesMountInstance `json:"MountInstance" xml:"MountInstance" require:"true" type:"Repeated"`
}

func (s DescribeDisksResponseDisksDiskMountInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskMountInstances) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskMountInstances) SetMountInstance(v []*DescribeDisksResponseDisksDiskMountInstancesMountInstance) *DescribeDisksResponseDisksDiskMountInstances {
	s.MountInstance = v
	return s
}

type DescribeDisksResponseDisksDiskMountInstancesMountInstance struct {
	InstanceId   *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	Device       *string `json:"Device" xml:"Device" require:"true"`
	AttachedTime *string `json:"AttachedTime" xml:"AttachedTime" require:"true"`
}

func (s DescribeDisksResponseDisksDiskMountInstancesMountInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskMountInstancesMountInstance) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskMountInstancesMountInstance) SetInstanceId(v string) *DescribeDisksResponseDisksDiskMountInstancesMountInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksResponseDisksDiskMountInstancesMountInstance) SetDevice(v string) *DescribeDisksResponseDisksDiskMountInstancesMountInstance {
	s.Device = &v
	return s
}

func (s *DescribeDisksResponseDisksDiskMountInstancesMountInstance) SetAttachedTime(v string) *DescribeDisksResponseDisksDiskMountInstancesMountInstance {
	s.AttachedTime = &v
	return s
}

type DescribeDisksResponseDisksDiskTags struct {
	Tag []*DescribeDisksResponseDisksDiskTagsTag `json:"Tag" xml:"Tag" require:"true" type:"Repeated"`
}

func (s DescribeDisksResponseDisksDiskTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskTags) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskTags) SetTag(v []*DescribeDisksResponseDisksDiskTagsTag) *DescribeDisksResponseDisksDiskTags {
	s.Tag = v
	return s
}

type DescribeDisksResponseDisksDiskTagsTag struct {
	TagKey   *string `json:"TagKey" xml:"TagKey" require:"true"`
	TagValue *string `json:"TagValue" xml:"TagValue" require:"true"`
}

func (s DescribeDisksResponseDisksDiskTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseDisksDiskTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseDisksDiskTagsTag) SetTagKey(v string) *DescribeDisksResponseDisksDiskTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeDisksResponseDisksDiskTagsTag) SetTagValue(v string) *DescribeDisksResponseDisksDiskTagsTag {
	s.TagValue = &v
	return s
}

type DescribeDiskMonitorDataRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	StartTime            *string `json:"StartTime" xml:"StartTime" require:"true"`
	EndTime              *string `json:"EndTime" xml:"EndTime" require:"true"`
	Period               *int    `json:"Period" xml:"Period"`
}

func (s DescribeDiskMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataRequest) SetOwnerId(v int64) *DescribeDiskMonitorDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetResourceOwnerAccount(v string) *DescribeDiskMonitorDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetResourceOwnerId(v int64) *DescribeDiskMonitorDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetOwnerAccount(v string) *DescribeDiskMonitorDataRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetDiskId(v string) *DescribeDiskMonitorDataRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetStartTime(v string) *DescribeDiskMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetEndTime(v string) *DescribeDiskMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiskMonitorDataRequest) SetPeriod(v int) *DescribeDiskMonitorDataRequest {
	s.Period = &v
	return s
}

type DescribeDiskMonitorDataResponse struct {
	RequestId   *string                                     `json:"RequestId" xml:"RequestId" require:"true"`
	TotalCount  *int                                        `json:"TotalCount" xml:"TotalCount" require:"true"`
	MonitorData *DescribeDiskMonitorDataResponseMonitorData `json:"MonitorData" xml:"MonitorData" require:"true" type:"Struct"`
}

func (s DescribeDiskMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponse) SetRequestId(v string) *DescribeDiskMonitorDataResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDiskMonitorDataResponse) SetTotalCount(v int) *DescribeDiskMonitorDataResponse {
	s.TotalCount = &v
	return s
}

func (s *DescribeDiskMonitorDataResponse) SetMonitorData(v *DescribeDiskMonitorDataResponseMonitorData) *DescribeDiskMonitorDataResponse {
	s.MonitorData = v
	return s
}

type DescribeDiskMonitorDataResponseMonitorData struct {
	DiskMonitorData []*DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData `json:"DiskMonitorData" xml:"DiskMonitorData" require:"true" type:"Repeated"`
}

func (s DescribeDiskMonitorDataResponseMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponseMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponseMonitorData) SetDiskMonitorData(v []*DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) *DescribeDiskMonitorDataResponseMonitorData {
	s.DiskMonitorData = v
	return s
}

type DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData struct {
	DiskId       *string `json:"DiskId" xml:"DiskId" require:"true"`
	IOPSRead     *int    `json:"IOPSRead" xml:"IOPSRead" require:"true"`
	IOPSWrite    *int    `json:"IOPSWrite" xml:"IOPSWrite" require:"true"`
	IOPSTotal    *int    `json:"IOPSTotal" xml:"IOPSTotal" require:"true"`
	BPSRead      *int    `json:"BPSRead" xml:"BPSRead" require:"true"`
	BPSWrite     *int    `json:"BPSWrite" xml:"BPSWrite" require:"true"`
	BPSTotal     *int    `json:"BPSTotal" xml:"BPSTotal" require:"true"`
	LatencyRead  *int    `json:"LatencyRead" xml:"LatencyRead" require:"true"`
	LatencyWrite *int    `json:"LatencyWrite" xml:"LatencyWrite" require:"true"`
	TimeStamp    *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetDiskId(v string) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetIOPSRead(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.IOPSRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetIOPSWrite(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.IOPSWrite = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetIOPSTotal(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.IOPSTotal = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetBPSRead(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.BPSRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetBPSWrite(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.BPSWrite = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetBPSTotal(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.BPSTotal = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetLatencyRead(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.LatencyRead = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetLatencyWrite(v int) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.LatencyWrite = &v
	return s
}

func (s *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData) SetTimeStamp(v string) *DescribeDiskMonitorDataResponseMonitorDataDiskMonitorData {
	s.TimeStamp = &v
	return s
}

type DescribeClustersRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DescribeClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeClustersRequest) SetOwnerId(v int64) *DescribeClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClustersRequest) SetResourceOwnerAccount(v string) *DescribeClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeClustersRequest) SetResourceOwnerId(v int64) *DescribeClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClustersRequest) SetRegionId(v string) *DescribeClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClustersRequest) SetOwnerAccount(v string) *DescribeClustersRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeClustersResponse struct {
	RequestId *string                           `json:"RequestId" xml:"RequestId" require:"true"`
	Clusters  *DescribeClustersResponseClusters `json:"Clusters" xml:"Clusters" require:"true" type:"Struct"`
}

func (s DescribeClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponse) SetRequestId(v string) *DescribeClustersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeClustersResponse) SetClusters(v *DescribeClustersResponseClusters) *DescribeClustersResponse {
	s.Clusters = v
	return s
}

type DescribeClustersResponseClusters struct {
	Cluster []*DescribeClustersResponseClustersCluster `json:"Cluster" xml:"Cluster" require:"true" type:"Repeated"`
}

func (s DescribeClustersResponseClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseClusters) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseClusters) SetCluster(v []*DescribeClustersResponseClustersCluster) *DescribeClustersResponseClusters {
	s.Cluster = v
	return s
}

type DescribeClustersResponseClustersCluster struct {
	ClusterId *string `json:"ClusterId" xml:"ClusterId" require:"true"`
}

func (s DescribeClustersResponseClustersCluster) String() string {
	return tea.Prettify(s)
}

func (s DescribeClustersResponseClustersCluster) GoString() string {
	return s.String()
}

func (s *DescribeClustersResponseClustersCluster) SetClusterId(v string) *DescribeClustersResponseClustersCluster {
	s.ClusterId = &v
	return s
}

type DeleteVSwitchRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VSwitchId            *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchRequest) SetOwnerId(v int64) *DeleteVSwitchRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetResourceOwnerAccount(v string) *DeleteVSwitchRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVSwitchRequest) SetResourceOwnerId(v int64) *DeleteVSwitchRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetVSwitchId(v string) *DeleteVSwitchRequest {
	s.VSwitchId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetRegionId(v string) *DeleteVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetOwnerAccount(v string) *DeleteVSwitchRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteVSwitchResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponse) SetRequestId(v string) *DeleteVSwitchResponse {
	s.RequestId = &v
	return s
}

type DeleteVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	VpcId                *string `json:"VpcId" xml:"VpcId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcRequest) SetOwnerId(v int64) *DeleteVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteVpcRequest) SetResourceOwnerAccount(v string) *DeleteVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteVpcRequest) SetResourceOwnerId(v int64) *DeleteVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteVpcRequest) SetVpcId(v string) *DeleteVpcRequest {
	s.VpcId = &v
	return s
}

func (s *DeleteVpcRequest) SetRegionId(v string) *DeleteVpcRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVpcRequest) SetOwnerAccount(v string) *DeleteVpcRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteVpcResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcResponse) SetRequestId(v string) *DeleteVpcResponse {
	s.RequestId = &v
	return s
}

type DeleteSnapshotRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	SnapshotId           *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Force                *bool   `json:"Force" xml:"Force"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotRequest) SetOwnerId(v int64) *DeleteSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetResourceOwnerAccount(v string) *DeleteSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSnapshotRequest) SetResourceOwnerId(v int64) *DeleteSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetSnapshotId(v string) *DeleteSnapshotRequest {
	s.SnapshotId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetForce(v bool) *DeleteSnapshotRequest {
	s.Force = &v
	return s
}

func (s *DeleteSnapshotRequest) SetOwnerAccount(v string) *DeleteSnapshotRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteSnapshotResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponse) SetRequestId(v string) *DeleteSnapshotResponse {
	s.RequestId = &v
	return s
}

type DeleteSecurityGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId      *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupRequest) SetOwnerId(v int64) *DeleteSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetResourceOwnerAccount(v string) *DeleteSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetResourceOwnerId(v int64) *DeleteSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetRegionId(v string) *DeleteSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetSecurityGroupId(v string) *DeleteSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetOwnerAccount(v string) *DeleteSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteSecurityGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponse) SetRequestId(v string) *DeleteSecurityGroupResponse {
	s.RequestId = &v
	return s
}

type DeleteRouteEntryRequest struct {
	NextHopList          []*DeleteRouteEntryRequestNextHopList `json:"NextHopList" xml:"NextHopList" type:"Repeated"`
	OwnerId              *int64                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                               `json:"RegionId" xml:"RegionId"`
	RouteTableId         *string                               `json:"RouteTableId" xml:"RouteTableId" require:"true"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock" xml:"DestinationCidrBlock" require:"true"`
	NextHopId            *string                               `json:"NextHopId" xml:"NextHopId"`
	OwnerAccount         *string                               `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequest) SetNextHopList(v []*DeleteRouteEntryRequestNextHopList) *DeleteRouteEntryRequest {
	s.NextHopList = v
	return s
}

func (s *DeleteRouteEntryRequest) SetOwnerId(v int64) *DeleteRouteEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetResourceOwnerAccount(v string) *DeleteRouteEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetResourceOwnerId(v int64) *DeleteRouteEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRegionId(v string) *DeleteRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetRouteTableId(v string) *DeleteRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetDestinationCidrBlock(v string) *DeleteRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetNextHopId(v string) *DeleteRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *DeleteRouteEntryRequest) SetOwnerAccount(v string) *DeleteRouteEntryRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteRouteEntryRequestNextHopList struct {
	NextHopType *string `json:"NextHopType" xml:"NextHopType" require:"true"`
	NextHopId   *string `json:"NextHopId" xml:"NextHopId" require:"true"`
}

func (s DeleteRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopType(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

func (s *DeleteRouteEntryRequestNextHopList) SetNextHopId(v string) *DeleteRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

type DeleteRouteEntryResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteEntryResponse) SetRequestId(v string) *DeleteRouteEntryResponse {
	s.RequestId = &v
	return s
}

type DeleteInstanceRequest struct {
	OwnerId               *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId            *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount          *string `json:"OwnerAccount" xml:"OwnerAccount"`
	Force                 *bool   `json:"Force" xml:"Force"`
	TerminateSubscription *bool   `json:"TerminateSubscription" xml:"TerminateSubscription"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetOwnerId(v int64) *DeleteInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteInstanceRequest) SetResourceOwnerAccount(v string) *DeleteInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteInstanceRequest) SetResourceOwnerId(v int64) *DeleteInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteInstanceRequest) SetOwnerAccount(v string) *DeleteInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteInstanceRequest) SetForce(v bool) *DeleteInstanceRequest {
	s.Force = &v
	return s
}

func (s *DeleteInstanceRequest) SetTerminateSubscription(v bool) *DeleteInstanceRequest {
	s.TerminateSubscription = &v
	return s
}

type DeleteInstanceResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetRequestId(v string) *DeleteInstanceResponse {
	s.RequestId = &v
	return s
}

type DeleteImageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId" require:"true"`
	Force                *bool   `json:"Force" xml:"Force"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageRequest) GoString() string {
	return s.String()
}

func (s *DeleteImageRequest) SetOwnerId(v int64) *DeleteImageRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteImageRequest) SetResourceOwnerAccount(v string) *DeleteImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteImageRequest) SetResourceOwnerId(v int64) *DeleteImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteImageRequest) SetRegionId(v string) *DeleteImageRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteImageRequest) SetImageId(v string) *DeleteImageRequest {
	s.ImageId = &v
	return s
}

func (s *DeleteImageRequest) SetForce(v bool) *DeleteImageRequest {
	s.Force = &v
	return s
}

func (s *DeleteImageRequest) SetOwnerAccount(v string) *DeleteImageRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponse) GoString() string {
	return s.String()
}

func (s *DeleteImageResponse) SetRequestId(v string) *DeleteImageResponse {
	s.RequestId = &v
	return s
}

type DeleteDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s DeleteDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskRequest) GoString() string {
	return s.String()
}

func (s *DeleteDiskRequest) SetOwnerId(v int64) *DeleteDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDiskRequest) SetResourceOwnerAccount(v string) *DeleteDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDiskRequest) SetResourceOwnerId(v int64) *DeleteDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDiskRequest) SetDiskId(v string) *DeleteDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DeleteDiskRequest) SetOwnerAccount(v string) *DeleteDiskRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskResponse) GoString() string {
	return s.String()
}

func (s *DeleteDiskResponse) SetRequestId(v string) *DeleteDiskResponse {
	s.RequestId = &v
	return s
}

type CreateVSwitchRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	ZoneId               *string `json:"ZoneId" xml:"ZoneId" require:"true"`
	CidrBlock            *string `json:"CidrBlock" xml:"CidrBlock" require:"true"`
	VpcId                *string `json:"VpcId" xml:"VpcId" require:"true"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	VSwitchName          *string `json:"VSwitchName" xml:"VSwitchName"`
	Description          *string `json:"Description" xml:"Description"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s CreateVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequest) SetOwnerId(v int64) *CreateVSwitchRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVSwitchRequest) SetResourceOwnerAccount(v string) *CreateVSwitchRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVSwitchRequest) SetResourceOwnerId(v int64) *CreateVSwitchRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVSwitchRequest) SetZoneId(v string) *CreateVSwitchRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateVSwitchRequest) SetCidrBlock(v string) *CreateVSwitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetVpcId(v string) *CreateVSwitchRequest {
	s.VpcId = &v
	return s
}

func (s *CreateVSwitchRequest) SetRegionId(v string) *CreateVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVSwitchRequest) SetVSwitchName(v string) *CreateVSwitchRequest {
	s.VSwitchName = &v
	return s
}

func (s *CreateVSwitchRequest) SetDescription(v string) *CreateVSwitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVSwitchRequest) SetClientToken(v string) *CreateVSwitchRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVSwitchRequest) SetOwnerAccount(v string) *CreateVSwitchRequest {
	s.OwnerAccount = &v
	return s
}

type CreateVSwitchResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	VSwitchId *string `json:"VSwitchId" xml:"VSwitchId" require:"true"`
}

func (s CreateVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponse) SetRequestId(v string) *CreateVSwitchResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVSwitchResponse) SetVSwitchId(v string) *CreateVSwitchResponse {
	s.VSwitchId = &v
	return s
}

type CreateVpcRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	CidrBlock            *string `json:"CidrBlock" xml:"CidrBlock"`
	VpcName              *string `json:"VpcName" xml:"VpcName"`
	Description          *string `json:"Description" xml:"Description"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	UserCidr             *string `json:"UserCidr" xml:"UserCidr"`
}

func (s CreateVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcRequest) GoString() string {
	return s.String()
}

func (s *CreateVpcRequest) SetOwnerId(v int64) *CreateVpcRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVpcRequest) SetResourceOwnerAccount(v string) *CreateVpcRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVpcRequest) SetResourceOwnerId(v int64) *CreateVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVpcRequest) SetRegionId(v string) *CreateVpcRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVpcRequest) SetCidrBlock(v string) *CreateVpcRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVpcRequest) SetVpcName(v string) *CreateVpcRequest {
	s.VpcName = &v
	return s
}

func (s *CreateVpcRequest) SetDescription(v string) *CreateVpcRequest {
	s.Description = &v
	return s
}

func (s *CreateVpcRequest) SetClientToken(v string) *CreateVpcRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVpcRequest) SetOwnerAccount(v string) *CreateVpcRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateVpcRequest) SetUserCidr(v string) *CreateVpcRequest {
	s.UserCidr = &v
	return s
}

type CreateVpcResponse struct {
	RequestId    *string `json:"RequestId" xml:"RequestId" require:"true"`
	VpcId        *string `json:"VpcId" xml:"VpcId" require:"true"`
	VRouterId    *string `json:"VRouterId" xml:"VRouterId" require:"true"`
	RouteTableId *string `json:"RouteTableId" xml:"RouteTableId" require:"true"`
}

func (s CreateVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVpcResponse) GoString() string {
	return s.String()
}

func (s *CreateVpcResponse) SetRequestId(v string) *CreateVpcResponse {
	s.RequestId = &v
	return s
}

func (s *CreateVpcResponse) SetVpcId(v string) *CreateVpcResponse {
	s.VpcId = &v
	return s
}

func (s *CreateVpcResponse) SetVRouterId(v string) *CreateVpcResponse {
	s.VRouterId = &v
	return s
}

func (s *CreateVpcResponse) SetRouteTableId(v string) *CreateVpcResponse {
	s.RouteTableId = &v
	return s
}

type CreateSnapshotRequest struct {
	OwnerId              *int64                      `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                     `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                      `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DiskId               *string                     `json:"DiskId" xml:"DiskId" require:"true"`
	SnapshotName         *string                     `json:"SnapshotName" xml:"SnapshotName"`
	Description          *string                     `json:"Description" xml:"Description"`
	RetentionDays        *int                        `json:"RetentionDays" xml:"RetentionDays"`
	Category             *string                     `json:"Category" xml:"Category"`
	ClientToken          *string                     `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string                     `json:"OwnerAccount" xml:"OwnerAccount"`
	Tag                  []*CreateSnapshotRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
}

func (s CreateSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequest) SetOwnerId(v int64) *CreateSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceOwnerAccount(v string) *CreateSnapshotRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSnapshotRequest) SetResourceOwnerId(v int64) *CreateSnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSnapshotRequest) SetDiskId(v string) *CreateSnapshotRequest {
	s.DiskId = &v
	return s
}

func (s *CreateSnapshotRequest) SetSnapshotName(v string) *CreateSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *CreateSnapshotRequest) SetDescription(v string) *CreateSnapshotRequest {
	s.Description = &v
	return s
}

func (s *CreateSnapshotRequest) SetRetentionDays(v int) *CreateSnapshotRequest {
	s.RetentionDays = &v
	return s
}

func (s *CreateSnapshotRequest) SetCategory(v string) *CreateSnapshotRequest {
	s.Category = &v
	return s
}

func (s *CreateSnapshotRequest) SetClientToken(v string) *CreateSnapshotRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSnapshotRequest) SetOwnerAccount(v string) *CreateSnapshotRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSnapshotRequest) SetTag(v []*CreateSnapshotRequestTag) *CreateSnapshotRequest {
	s.Tag = v
	return s
}

type CreateSnapshotRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s CreateSnapshotRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequestTag) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequestTag) SetValue(v string) *CreateSnapshotRequestTag {
	s.Value = &v
	return s
}

func (s *CreateSnapshotRequestTag) SetKey(v string) *CreateSnapshotRequestTag {
	s.Key = &v
	return s
}

type CreateSnapshotResponse struct {
	RequestId  *string `json:"RequestId" xml:"RequestId" require:"true"`
	SnapshotId *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
}

func (s CreateSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponse) SetRequestId(v string) *CreateSnapshotResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSnapshotResponse) SetSnapshotId(v string) *CreateSnapshotResponse {
	s.SnapshotId = &v
	return s
}

type CreateSecurityGroupRequest struct {
	OwnerId              *int64                           `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                          `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                           `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                          `json:"RegionId" xml:"RegionId" require:"true"`
	Description          *string                          `json:"Description" xml:"Description"`
	ClientToken          *string                          `json:"ClientToken" xml:"ClientToken"`
	SecurityGroupName    *string                          `json:"SecurityGroupName" xml:"SecurityGroupName"`
	VpcId                *string                          `json:"VpcId" xml:"VpcId"`
	SecurityGroupType    *string                          `json:"SecurityGroupType" xml:"SecurityGroupType"`
	OwnerAccount         *string                          `json:"OwnerAccount" xml:"OwnerAccount"`
	Tag                  []*CreateSecurityGroupRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                          `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s CreateSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequest) SetOwnerId(v int64) *CreateSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceOwnerAccount(v string) *CreateSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceOwnerId(v int64) *CreateSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetRegionId(v string) *CreateSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetDescription(v string) *CreateSecurityGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetClientToken(v string) *CreateSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupName(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetVpcId(v string) *CreateSecurityGroupRequest {
	s.VpcId = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupType(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupType = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetOwnerAccount(v string) *CreateSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetTag(v []*CreateSecurityGroupRequestTag) *CreateSecurityGroupRequest {
	s.Tag = v
	return s
}

func (s *CreateSecurityGroupRequest) SetResourceGroupId(v string) *CreateSecurityGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateSecurityGroupRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s CreateSecurityGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequestTag) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequestTag) SetValue(v string) *CreateSecurityGroupRequestTag {
	s.Value = &v
	return s
}

func (s *CreateSecurityGroupRequestTag) SetKey(v string) *CreateSecurityGroupRequestTag {
	s.Key = &v
	return s
}

type CreateSecurityGroupResponse struct {
	RequestId       *string `json:"RequestId" xml:"RequestId" require:"true"`
	SecurityGroupId *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
}

func (s CreateSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponse) SetRequestId(v string) *CreateSecurityGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSecurityGroupResponse) SetSecurityGroupId(v string) *CreateSecurityGroupResponse {
	s.SecurityGroupId = &v
	return s
}

type CreateRouteEntryRequest struct {
	OwnerId              *int64                                `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                               `json:"RegionId" xml:"RegionId"`
	RouteTableId         *string                               `json:"RouteTableId" xml:"RouteTableId" require:"true"`
	DestinationCidrBlock *string                               `json:"DestinationCidrBlock" xml:"DestinationCidrBlock" require:"true"`
	NextHopId            *string                               `json:"NextHopId" xml:"NextHopId"`
	ClientToken          *string                               `json:"ClientToken" xml:"ClientToken"`
	NextHopType          *string                               `json:"NextHopType" xml:"NextHopType"`
	OwnerAccount         *string                               `json:"OwnerAccount" xml:"OwnerAccount"`
	NextHopList          []*CreateRouteEntryRequestNextHopList `json:"NextHopList" xml:"NextHopList" type:"Repeated"`
}

func (s CreateRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequest) SetOwnerId(v int64) *CreateRouteEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetResourceOwnerAccount(v string) *CreateRouteEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateRouteEntryRequest) SetResourceOwnerId(v int64) *CreateRouteEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRegionId(v string) *CreateRouteEntryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetRouteTableId(v string) *CreateRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetDestinationCidrBlock(v string) *CreateRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopId(v string) *CreateRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateRouteEntryRequest) SetClientToken(v string) *CreateRouteEntryRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopType(v string) *CreateRouteEntryRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateRouteEntryRequest) SetOwnerAccount(v string) *CreateRouteEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateRouteEntryRequest) SetNextHopList(v []*CreateRouteEntryRequestNextHopList) *CreateRouteEntryRequest {
	s.NextHopList = v
	return s
}

type CreateRouteEntryRequestNextHopList struct {
	NextHopType *string `json:"NextHopType" xml:"NextHopType" require:"true"`
	NextHopId   *string `json:"NextHopId" xml:"NextHopId" require:"true"`
}

func (s CreateRouteEntryRequestNextHopList) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryRequestNextHopList) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopType(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopType = &v
	return s
}

func (s *CreateRouteEntryRequestNextHopList) SetNextHopId(v string) *CreateRouteEntryRequestNextHopList {
	s.NextHopId = &v
	return s
}

type CreateRouteEntryResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CreateRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateRouteEntryResponse) SetRequestId(v string) *CreateRouteEntryResponse {
	s.RequestId = &v
	return s
}

type CreateInstanceRequest struct {
	OwnerId                     *int64                           `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount        *string                          `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId             *int64                           `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                    *string                          `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId                     *string                          `json:"ImageId" xml:"ImageId"`
	ImageFamily                 *string                          `json:"ImageFamily" xml:"ImageFamily"`
	InstanceType                *string                          `json:"InstanceType" xml:"InstanceType" require:"true"`
	SecurityGroupId             *string                          `json:"SecurityGroupId" xml:"SecurityGroupId"`
	InstanceName                *string                          `json:"InstanceName" xml:"InstanceName"`
	InternetChargeType          *string                          `json:"InternetChargeType" xml:"InternetChargeType"`
	AutoRenew                   *bool                            `json:"AutoRenew" xml:"AutoRenew"`
	AutoRenewPeriod             *int                             `json:"AutoRenewPeriod" xml:"AutoRenewPeriod"`
	InternetMaxBandwidthIn      *int                             `json:"InternetMaxBandwidthIn" xml:"InternetMaxBandwidthIn"`
	InternetMaxBandwidthOut     *int                             `json:"InternetMaxBandwidthOut" xml:"InternetMaxBandwidthOut"`
	HostName                    *string                          `json:"HostName" xml:"HostName"`
	Password                    *string                          `json:"Password" xml:"Password"`
	PasswordInherit             *bool                            `json:"PasswordInherit" xml:"PasswordInherit"`
	DeploymentSetId             *string                          `json:"DeploymentSetId" xml:"DeploymentSetId"`
	ZoneId                      *string                          `json:"ZoneId" xml:"ZoneId"`
	ClusterId                   *string                          `json:"ClusterId" xml:"ClusterId"`
	ClientToken                 *string                          `json:"ClientToken" xml:"ClientToken"`
	VlanId                      *string                          `json:"VlanId" xml:"VlanId"`
	InnerIpAddress              *string                          `json:"InnerIpAddress" xml:"InnerIpAddress"`
	SystemDisk                  *CreateInstanceRequestSystemDisk `json:"SystemDisk" xml:"SystemDisk" require:"true" type:"Struct"`
	DataDisk                    []*CreateInstanceRequestDataDisk `json:"DataDisk" xml:"DataDisk" type:"Repeated"`
	Arn                         []*CreateInstanceRequestArn      `json:"Arn" xml:"Arn" type:"Repeated"`
	NodeControllerId            *string                          `json:"NodeControllerId" xml:"NodeControllerId"`
	Description                 *string                          `json:"Description" xml:"Description"`
	VSwitchId                   *string                          `json:"VSwitchId" xml:"VSwitchId"`
	PrivateIpAddress            *string                          `json:"PrivateIpAddress" xml:"PrivateIpAddress"`
	IoOptimized                 *string                          `json:"IoOptimized" xml:"IoOptimized"`
	OwnerAccount                *string                          `json:"OwnerAccount" xml:"OwnerAccount"`
	UseAdditionalService        *bool                            `json:"UseAdditionalService" xml:"UseAdditionalService"`
	InstanceChargeType          *string                          `json:"InstanceChargeType" xml:"InstanceChargeType"`
	Period                      *int                             `json:"Period" xml:"Period"`
	PeriodUnit                  *string                          `json:"PeriodUnit" xml:"PeriodUnit"`
	Tag                         []*CreateInstanceRequestTag      `json:"Tag" xml:"Tag" type:"Repeated"`
	UserData                    *string                          `json:"UserData" xml:"UserData"`
	SpotStrategy                *string                          `json:"SpotStrategy" xml:"SpotStrategy"`
	KeyPairName                 *string                          `json:"KeyPairName" xml:"KeyPairName"`
	SpotPriceLimit              *float32                         `json:"SpotPriceLimit" xml:"SpotPriceLimit"`
	SpotDuration                *int                             `json:"SpotDuration" xml:"SpotDuration"`
	SpotInterruptionBehavior    *string                          `json:"SpotInterruptionBehavior" xml:"SpotInterruptionBehavior"`
	RamRoleName                 *string                          `json:"RamRoleName" xml:"RamRoleName"`
	SecurityEnhancementStrategy *string                          `json:"SecurityEnhancementStrategy" xml:"SecurityEnhancementStrategy"`
	ResourceGroupId             *string                          `json:"ResourceGroupId" xml:"ResourceGroupId"`
	HpcClusterId                *string                          `json:"HpcClusterId" xml:"HpcClusterId"`
	DryRun                      *bool                            `json:"DryRun" xml:"DryRun"`
	DedicatedHostId             *string                          `json:"DedicatedHostId" xml:"DedicatedHostId"`
	CreditSpecification         *string                          `json:"CreditSpecification" xml:"CreditSpecification"`
	DeletionProtection          *bool                            `json:"DeletionProtection" xml:"DeletionProtection"`
	Affinity                    *string                          `json:"Affinity" xml:"Affinity"`
	Tenancy                     *string                          `json:"Tenancy" xml:"Tenancy"`
	StorageSetId                *string                          `json:"StorageSetId" xml:"StorageSetId"`
	StorageSetPartitionNumber   *int                             `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber"`
	HttpEndpoint                *string                          `json:"HttpEndpoint" xml:"HttpEndpoint"`
	HttpTokens                  *string                          `json:"HttpTokens" xml:"HttpTokens"`
	HttpPutResponseHopLimit     *int                             `json:"HttpPutResponseHopLimit" xml:"HttpPutResponseHopLimit"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetOwnerId(v int64) *CreateInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceOwnerAccount(v string) *CreateInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceOwnerId(v int64) *CreateInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetRegionId(v string) *CreateInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateInstanceRequest) SetImageId(v string) *CreateInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *CreateInstanceRequest) SetImageFamily(v string) *CreateInstanceRequest {
	s.ImageFamily = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetSecurityGroupId(v string) *CreateInstanceRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetChargeType(v string) *CreateInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenew(v bool) *CreateInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenewPeriod(v int) *CreateInstanceRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetMaxBandwidthIn(v int) *CreateInstanceRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetMaxBandwidthOut(v int) *CreateInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateInstanceRequest) SetHostName(v string) *CreateInstanceRequest {
	s.HostName = &v
	return s
}

func (s *CreateInstanceRequest) SetPassword(v string) *CreateInstanceRequest {
	s.Password = &v
	return s
}

func (s *CreateInstanceRequest) SetPasswordInherit(v bool) *CreateInstanceRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateInstanceRequest) SetDeploymentSetId(v string) *CreateInstanceRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneId(v string) *CreateInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateInstanceRequest) SetClusterId(v string) *CreateInstanceRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateInstanceRequest) SetClientToken(v string) *CreateInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateInstanceRequest) SetVlanId(v string) *CreateInstanceRequest {
	s.VlanId = &v
	return s
}

func (s *CreateInstanceRequest) SetInnerIpAddress(v string) *CreateInstanceRequest {
	s.InnerIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetSystemDisk(v *CreateInstanceRequestSystemDisk) *CreateInstanceRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateInstanceRequest) SetDataDisk(v []*CreateInstanceRequestDataDisk) *CreateInstanceRequest {
	s.DataDisk = v
	return s
}

func (s *CreateInstanceRequest) SetArn(v []*CreateInstanceRequestArn) *CreateInstanceRequest {
	s.Arn = v
	return s
}

func (s *CreateInstanceRequest) SetNodeControllerId(v string) *CreateInstanceRequest {
	s.NodeControllerId = &v
	return s
}

func (s *CreateInstanceRequest) SetDescription(v string) *CreateInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequest) SetVSwitchId(v string) *CreateInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateInstanceRequest) SetPrivateIpAddress(v string) *CreateInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetIoOptimized(v string) *CreateInstanceRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateInstanceRequest) SetOwnerAccount(v string) *CreateInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateInstanceRequest) SetUseAdditionalService(v bool) *CreateInstanceRequest {
	s.UseAdditionalService = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceChargeType(v string) *CreateInstanceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v int) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriodUnit(v string) *CreateInstanceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateInstanceRequest) SetTag(v []*CreateInstanceRequestTag) *CreateInstanceRequest {
	s.Tag = v
	return s
}

func (s *CreateInstanceRequest) SetUserData(v string) *CreateInstanceRequest {
	s.UserData = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotStrategy(v string) *CreateInstanceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateInstanceRequest) SetKeyPairName(v string) *CreateInstanceRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotPriceLimit(v float32) *CreateInstanceRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotDuration(v int) *CreateInstanceRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateInstanceRequest) SetSpotInterruptionBehavior(v string) *CreateInstanceRequest {
	s.SpotInterruptionBehavior = &v
	return s
}

func (s *CreateInstanceRequest) SetRamRoleName(v string) *CreateInstanceRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateInstanceRequest) SetSecurityEnhancementStrategy(v string) *CreateInstanceRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateInstanceRequest) SetResourceGroupId(v string) *CreateInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateInstanceRequest) SetHpcClusterId(v string) *CreateInstanceRequest {
	s.HpcClusterId = &v
	return s
}

func (s *CreateInstanceRequest) SetDryRun(v bool) *CreateInstanceRequest {
	s.DryRun = &v
	return s
}

func (s *CreateInstanceRequest) SetDedicatedHostId(v string) *CreateInstanceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateInstanceRequest) SetCreditSpecification(v string) *CreateInstanceRequest {
	s.CreditSpecification = &v
	return s
}

func (s *CreateInstanceRequest) SetDeletionProtection(v bool) *CreateInstanceRequest {
	s.DeletionProtection = &v
	return s
}

func (s *CreateInstanceRequest) SetAffinity(v string) *CreateInstanceRequest {
	s.Affinity = &v
	return s
}

func (s *CreateInstanceRequest) SetTenancy(v string) *CreateInstanceRequest {
	s.Tenancy = &v
	return s
}

func (s *CreateInstanceRequest) SetStorageSetId(v string) *CreateInstanceRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateInstanceRequest) SetStorageSetPartitionNumber(v int) *CreateInstanceRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpEndpoint(v string) *CreateInstanceRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpTokens(v string) *CreateInstanceRequest {
	s.HttpTokens = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpPutResponseHopLimit(v int) *CreateInstanceRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

type CreateInstanceRequestSystemDisk struct {
	Size             *int    `json:"Size" xml:"Size"`
	Category         *string `json:"Category" xml:"Category"`
	DiskName         *string `json:"DiskName" xml:"DiskName"`
	Description      *string `json:"Description" xml:"Description"`
	PerformanceLevel *string `json:"PerformanceLevel" xml:"PerformanceLevel"`
}

func (s CreateInstanceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestSystemDisk) SetSize(v int) *CreateInstanceRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetCategory(v string) *CreateInstanceRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetDiskName(v string) *CreateInstanceRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetDescription(v string) *CreateInstanceRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequestSystemDisk) SetPerformanceLevel(v string) *CreateInstanceRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

type CreateInstanceRequestDataDisk struct {
	Size               *int    `json:"Size" xml:"Size" require:"true"`
	SnapshotId         *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
	Category           *string `json:"Category" xml:"Category" require:"true"`
	DiskName           *string `json:"DiskName" xml:"DiskName" require:"true"`
	Description        *string `json:"Description" xml:"Description" require:"true"`
	Device             *string `json:"Device" xml:"Device" require:"true"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance" require:"true"`
	Encrypted          *bool   `json:"Encrypted" xml:"Encrypted" require:"true"`
	KMSKeyId           *string `json:"KMSKeyId" xml:"KMSKeyId" require:"true"`
	PerformanceLevel   *string `json:"PerformanceLevel" xml:"PerformanceLevel" require:"true"`
	EncryptAlgorithm   *string `json:"EncryptAlgorithm" xml:"EncryptAlgorithm" require:"true"`
}

func (s CreateInstanceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestDataDisk) SetSize(v int) *CreateInstanceRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetSnapshotId(v string) *CreateInstanceRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetCategory(v string) *CreateInstanceRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDiskName(v string) *CreateInstanceRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDescription(v string) *CreateInstanceRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDevice(v string) *CreateInstanceRequestDataDisk {
	s.Device = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetDeleteWithInstance(v bool) *CreateInstanceRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetEncrypted(v bool) *CreateInstanceRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetKMSKeyId(v string) *CreateInstanceRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetPerformanceLevel(v string) *CreateInstanceRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateInstanceRequestDataDisk) SetEncryptAlgorithm(v string) *CreateInstanceRequestDataDisk {
	s.EncryptAlgorithm = &v
	return s
}

type CreateInstanceRequestArn struct {
	AssumeRoleFor *int64  `json:"AssumeRoleFor" xml:"AssumeRoleFor" require:"true"`
	Rolearn       *string `json:"Rolearn" xml:"Rolearn" require:"true"`
	RoleType      *string `json:"RoleType" xml:"RoleType" require:"true"`
}

func (s CreateInstanceRequestArn) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestArn) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestArn) SetAssumeRoleFor(v int64) *CreateInstanceRequestArn {
	s.AssumeRoleFor = &v
	return s
}

func (s *CreateInstanceRequestArn) SetRolearn(v string) *CreateInstanceRequestArn {
	s.Rolearn = &v
	return s
}

func (s *CreateInstanceRequestArn) SetRoleType(v string) *CreateInstanceRequestArn {
	s.RoleType = &v
	return s
}

type CreateInstanceRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s CreateInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestTag) SetValue(v string) *CreateInstanceRequestTag {
	s.Value = &v
	return s
}

func (s *CreateInstanceRequestTag) SetKey(v string) *CreateInstanceRequestTag {
	s.Key = &v
	return s
}

type CreateInstanceResponse struct {
	RequestId  *string  `json:"RequestId" xml:"RequestId" require:"true"`
	InstanceId *string  `json:"InstanceId" xml:"InstanceId" require:"true"`
	TradePrice *float32 `json:"TradePrice" xml:"TradePrice" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetRequestId(v string) *CreateInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponse) SetInstanceId(v string) *CreateInstanceResponse {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponse) SetTradePrice(v float32) *CreateInstanceResponse {
	s.TradePrice = &v
	return s
}

type CreateImageRequest struct {
	DiskDeviceMapping    []*CreateImageRequestDiskDeviceMapping `json:"DiskDeviceMapping" xml:"DiskDeviceMapping" type:"Repeated"`
	OwnerId              *int64                                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string                                `json:"RegionId" xml:"RegionId" require:"true"`
	SnapshotId           *string                                `json:"SnapshotId" xml:"SnapshotId"`
	InstanceId           *string                                `json:"InstanceId" xml:"InstanceId"`
	ImageName            *string                                `json:"ImageName" xml:"ImageName"`
	ImageFamily          *string                                `json:"ImageFamily" xml:"ImageFamily"`
	ImageVersion         *string                                `json:"ImageVersion" xml:"ImageVersion"`
	Description          *string                                `json:"Description" xml:"Description"`
	Platform             *string                                `json:"Platform" xml:"Platform"`
	Architecture         *string                                `json:"Architecture" xml:"Architecture"`
	ClientToken          *string                                `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount         *string                                `json:"OwnerAccount" xml:"OwnerAccount"`
	Tag                  []*CreateImageRequestTag               `json:"Tag" xml:"Tag" type:"Repeated"`
	ResourceGroupId      *string                                `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s CreateImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequest) GoString() string {
	return s.String()
}

func (s *CreateImageRequest) SetDiskDeviceMapping(v []*CreateImageRequestDiskDeviceMapping) *CreateImageRequest {
	s.DiskDeviceMapping = v
	return s
}

func (s *CreateImageRequest) SetOwnerId(v int64) *CreateImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateImageRequest) SetResourceOwnerAccount(v string) *CreateImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateImageRequest) SetResourceOwnerId(v int64) *CreateImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateImageRequest) SetRegionId(v string) *CreateImageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateImageRequest) SetSnapshotId(v string) *CreateImageRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequest) SetInstanceId(v string) *CreateImageRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateImageRequest) SetImageName(v string) *CreateImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateImageRequest) SetImageFamily(v string) *CreateImageRequest {
	s.ImageFamily = &v
	return s
}

func (s *CreateImageRequest) SetImageVersion(v string) *CreateImageRequest {
	s.ImageVersion = &v
	return s
}

func (s *CreateImageRequest) SetDescription(v string) *CreateImageRequest {
	s.Description = &v
	return s
}

func (s *CreateImageRequest) SetPlatform(v string) *CreateImageRequest {
	s.Platform = &v
	return s
}

func (s *CreateImageRequest) SetArchitecture(v string) *CreateImageRequest {
	s.Architecture = &v
	return s
}

func (s *CreateImageRequest) SetClientToken(v string) *CreateImageRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateImageRequest) SetOwnerAccount(v string) *CreateImageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateImageRequest) SetTag(v []*CreateImageRequestTag) *CreateImageRequest {
	s.Tag = v
	return s
}

func (s *CreateImageRequest) SetResourceGroupId(v string) *CreateImageRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateImageRequestDiskDeviceMapping struct {
	Size       *int    `json:"Size" xml:"Size"`
	SnapshotId *string `json:"SnapshotId" xml:"SnapshotId"`
	Device     *string `json:"Device" xml:"Device"`
	DiskType   *string `json:"DiskType" xml:"DiskType" require:"true"`
}

func (s CreateImageRequestDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequestDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *CreateImageRequestDiskDeviceMapping) SetSize(v int) *CreateImageRequestDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetSnapshotId(v string) *CreateImageRequestDiskDeviceMapping {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetDevice(v string) *CreateImageRequestDiskDeviceMapping {
	s.Device = &v
	return s
}

func (s *CreateImageRequestDiskDeviceMapping) SetDiskType(v string) *CreateImageRequestDiskDeviceMapping {
	s.DiskType = &v
	return s
}

type CreateImageRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s CreateImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequestTag) GoString() string {
	return s.String()
}

func (s *CreateImageRequestTag) SetValue(v string) *CreateImageRequestTag {
	s.Value = &v
	return s
}

func (s *CreateImageRequestTag) SetKey(v string) *CreateImageRequestTag {
	s.Key = &v
	return s
}

type CreateImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	ImageId   *string `json:"ImageId" xml:"ImageId" require:"true"`
}

func (s CreateImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponse) GoString() string {
	return s.String()
}

func (s *CreateImageResponse) SetRequestId(v string) *CreateImageResponse {
	s.RequestId = &v
	return s
}

func (s *CreateImageResponse) SetImageId(v string) *CreateImageResponse {
	s.ImageId = &v
	return s
}

type CreateDiskRequest struct {
	OwnerId                   *int64                  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount      *string                 `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId           *int64                  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId                  *string                 `json:"RegionId" xml:"RegionId" require:"true"`
	ZoneId                    *string                 `json:"ZoneId" xml:"ZoneId"`
	SnapshotId                *string                 `json:"SnapshotId" xml:"SnapshotId"`
	DiskName                  *string                 `json:"DiskName" xml:"DiskName"`
	Size                      *int                    `json:"Size" xml:"Size"`
	DiskCategory              *string                 `json:"DiskCategory" xml:"DiskCategory"`
	Description               *string                 `json:"Description" xml:"Description"`
	Encrypted                 *bool                   `json:"Encrypted" xml:"Encrypted"`
	ClientToken               *string                 `json:"ClientToken" xml:"ClientToken"`
	OwnerAccount              *string                 `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceId                *string                 `json:"InstanceId" xml:"InstanceId"`
	Tag                       []*CreateDiskRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	Arn                       []*CreateDiskRequestArn `json:"Arn" xml:"Arn" type:"Repeated"`
	ResourceGroupId           *string                 `json:"ResourceGroupId" xml:"ResourceGroupId"`
	KMSKeyId                  *string                 `json:"KMSKeyId" xml:"KMSKeyId"`
	PerformanceLevel          *string                 `json:"PerformanceLevel" xml:"PerformanceLevel"`
	AdvancedFeatures          *string                 `json:"AdvancedFeatures" xml:"AdvancedFeatures"`
	StorageSetId              *string                 `json:"StorageSetId" xml:"StorageSetId"`
	EncryptAlgorithm          *string                 `json:"EncryptAlgorithm" xml:"EncryptAlgorithm"`
	StorageSetPartitionNumber *int                    `json:"StorageSetPartitionNumber" xml:"StorageSetPartitionNumber"`
}

func (s CreateDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequest) GoString() string {
	return s.String()
}

func (s *CreateDiskRequest) SetOwnerId(v int64) *CreateDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDiskRequest) SetResourceOwnerAccount(v string) *CreateDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDiskRequest) SetResourceOwnerId(v int64) *CreateDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDiskRequest) SetRegionId(v string) *CreateDiskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDiskRequest) SetZoneId(v string) *CreateDiskRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDiskRequest) SetSnapshotId(v string) *CreateDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateDiskRequest) SetDiskName(v string) *CreateDiskRequest {
	s.DiskName = &v
	return s
}

func (s *CreateDiskRequest) SetSize(v int) *CreateDiskRequest {
	s.Size = &v
	return s
}

func (s *CreateDiskRequest) SetDiskCategory(v string) *CreateDiskRequest {
	s.DiskCategory = &v
	return s
}

func (s *CreateDiskRequest) SetDescription(v string) *CreateDiskRequest {
	s.Description = &v
	return s
}

func (s *CreateDiskRequest) SetEncrypted(v bool) *CreateDiskRequest {
	s.Encrypted = &v
	return s
}

func (s *CreateDiskRequest) SetClientToken(v string) *CreateDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDiskRequest) SetOwnerAccount(v string) *CreateDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDiskRequest) SetInstanceId(v string) *CreateDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDiskRequest) SetTag(v []*CreateDiskRequestTag) *CreateDiskRequest {
	s.Tag = v
	return s
}

func (s *CreateDiskRequest) SetArn(v []*CreateDiskRequestArn) *CreateDiskRequest {
	s.Arn = v
	return s
}

func (s *CreateDiskRequest) SetResourceGroupId(v string) *CreateDiskRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDiskRequest) SetKMSKeyId(v string) *CreateDiskRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CreateDiskRequest) SetPerformanceLevel(v string) *CreateDiskRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateDiskRequest) SetAdvancedFeatures(v string) *CreateDiskRequest {
	s.AdvancedFeatures = &v
	return s
}

func (s *CreateDiskRequest) SetStorageSetId(v string) *CreateDiskRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateDiskRequest) SetEncryptAlgorithm(v string) *CreateDiskRequest {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CreateDiskRequest) SetStorageSetPartitionNumber(v int) *CreateDiskRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

type CreateDiskRequestTag struct {
	Value *string `json:"value" xml:"value" require:"true"`
	Key   *string `json:"key" xml:"key" require:"true"`
}

func (s CreateDiskRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDiskRequestTag) SetValue(v string) *CreateDiskRequestTag {
	s.Value = &v
	return s
}

func (s *CreateDiskRequestTag) SetKey(v string) *CreateDiskRequestTag {
	s.Key = &v
	return s
}

type CreateDiskRequestArn struct {
	AssumeRoleFor *int64  `json:"AssumeRoleFor" xml:"AssumeRoleFor" require:"true"`
	Rolearn       *string `json:"Rolearn" xml:"Rolearn" require:"true"`
	RoleType      *string `json:"RoleType" xml:"RoleType" require:"true"`
}

func (s CreateDiskRequestArn) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequestArn) GoString() string {
	return s.String()
}

func (s *CreateDiskRequestArn) SetAssumeRoleFor(v int64) *CreateDiskRequestArn {
	s.AssumeRoleFor = &v
	return s
}

func (s *CreateDiskRequestArn) SetRolearn(v string) *CreateDiskRequestArn {
	s.Rolearn = &v
	return s
}

func (s *CreateDiskRequestArn) SetRoleType(v string) *CreateDiskRequestArn {
	s.RoleType = &v
	return s
}

type CreateDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	DiskId    *string `json:"DiskId" xml:"DiskId" require:"true"`
}

func (s CreateDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponse) GoString() string {
	return s.String()
}

func (s *CreateDiskResponse) SetRequestId(v string) *CreateDiskResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDiskResponse) SetDiskId(v string) *CreateDiskResponse {
	s.DiskId = &v
	return s
}

type CopyImageRequest struct {
	OwnerId                *int64                 `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount   *string                `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId        *int64                 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	DestinationImageName   *string                `json:"DestinationImageName" xml:"DestinationImageName"`
	DestinationDescription *string                `json:"DestinationDescription" xml:"DestinationDescription"`
	ImageId                *string                `json:"ImageId" xml:"ImageId" require:"true"`
	RegionId               *string                `json:"RegionId" xml:"RegionId" require:"true"`
	DestinationRegionId    *string                `json:"DestinationRegionId" xml:"DestinationRegionId"`
	OwnerAccount           *string                `json:"OwnerAccount" xml:"OwnerAccount"`
	Tag                    []*CopyImageRequestTag `json:"Tag" xml:"Tag" type:"Repeated"`
	Encrypted              *bool                  `json:"Encrypted" xml:"Encrypted"`
	KMSKeyId               *string                `json:"KMSKeyId" xml:"KMSKeyId"`
	EncryptAlgorithm       *string                `json:"EncryptAlgorithm" xml:"EncryptAlgorithm"`
}

func (s CopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyImageRequest) GoString() string {
	return s.String()
}

func (s *CopyImageRequest) SetOwnerId(v int64) *CopyImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyImageRequest) SetResourceOwnerAccount(v string) *CopyImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CopyImageRequest) SetResourceOwnerId(v int64) *CopyImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CopyImageRequest) SetDestinationImageName(v string) *CopyImageRequest {
	s.DestinationImageName = &v
	return s
}

func (s *CopyImageRequest) SetDestinationDescription(v string) *CopyImageRequest {
	s.DestinationDescription = &v
	return s
}

func (s *CopyImageRequest) SetImageId(v string) *CopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CopyImageRequest) SetRegionId(v string) *CopyImageRequest {
	s.RegionId = &v
	return s
}

func (s *CopyImageRequest) SetDestinationRegionId(v string) *CopyImageRequest {
	s.DestinationRegionId = &v
	return s
}

func (s *CopyImageRequest) SetOwnerAccount(v string) *CopyImageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CopyImageRequest) SetTag(v []*CopyImageRequestTag) *CopyImageRequest {
	s.Tag = v
	return s
}

func (s *CopyImageRequest) SetEncrypted(v bool) *CopyImageRequest {
	s.Encrypted = &v
	return s
}

func (s *CopyImageRequest) SetKMSKeyId(v string) *CopyImageRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CopyImageRequest) SetEncryptAlgorithm(v string) *CopyImageRequest {
	s.EncryptAlgorithm = &v
	return s
}

type CopyImageRequestTag struct {
	Key   *string `json:"Key" xml:"Key" require:"true"`
	Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s CopyImageRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CopyImageRequestTag) GoString() string {
	return s.String()
}

func (s *CopyImageRequestTag) SetKey(v string) *CopyImageRequestTag {
	s.Key = &v
	return s
}

func (s *CopyImageRequestTag) SetValue(v string) *CopyImageRequestTag {
	s.Value = &v
	return s
}

type CopyImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	ImageId   *string `json:"ImageId" xml:"ImageId" require:"true"`
}

func (s CopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyImageResponse) GoString() string {
	return s.String()
}

func (s *CopyImageResponse) SetRequestId(v string) *CopyImageResponse {
	s.RequestId = &v
	return s
}

func (s *CopyImageResponse) SetImageId(v string) *CopyImageResponse {
	s.ImageId = &v
	return s
}

type CancelCopyImageRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	ImageId              *string `json:"ImageId" xml:"ImageId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s CancelCopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageRequest) GoString() string {
	return s.String()
}

func (s *CancelCopyImageRequest) SetOwnerId(v int64) *CancelCopyImageRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelCopyImageRequest) SetResourceOwnerAccount(v string) *CancelCopyImageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelCopyImageRequest) SetResourceOwnerId(v int64) *CancelCopyImageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelCopyImageRequest) SetRegionId(v string) *CancelCopyImageRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCopyImageRequest) SetImageId(v string) *CancelCopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CancelCopyImageRequest) SetOwnerAccount(v string) *CancelCopyImageRequest {
	s.OwnerAccount = &v
	return s
}

type CancelCopyImageResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CancelCopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageResponse) GoString() string {
	return s.String()
}

func (s *CancelCopyImageResponse) SetRequestId(v string) *CancelCopyImageResponse {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupEgressRequest struct {
	OwnerId               *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount          *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId              *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId       *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	IpProtocol            *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange             *string `json:"PortRange" xml:"PortRange" require:"true"`
	DestGroupId           *string `json:"DestGroupId" xml:"DestGroupId"`
	DestGroupOwnerId      *int64  `json:"DestGroupOwnerId" xml:"DestGroupOwnerId"`
	DestGroupOwnerAccount *string `json:"DestGroupOwnerAccount" xml:"DestGroupOwnerAccount"`
	DestCidrIp            *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	SourceCidrIp          *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange       *string `json:"SourcePortRange" xml:"SourcePortRange"`
	Policy                *string `json:"Policy" xml:"Policy"`
	Priority              *string `json:"Priority" xml:"Priority"`
	NicType               *string `json:"NicType" xml:"NicType"`
	ClientToken           *string `json:"ClientToken" xml:"ClientToken"`
	Description           *string `json:"Description" xml:"Description"`
}

func (s AuthorizeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressRequest) SetOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.OwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetResourceOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetResourceOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetRegionId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.RegionId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupOwnerId(v int64) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestGroupOwnerAccount(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestGroupOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpv6DestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpv6SourceCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPolicy(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPriority(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetNicType(v string) *AuthorizeSecurityGroupEgressRequest {
	s.NicType = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetClientToken(v string) *AuthorizeSecurityGroupEgressRequest {
	s.ClientToken = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDescription(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Description = &v
	return s
}

type AuthorizeSecurityGroupEgressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AuthorizeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponse) SetRequestId(v string) *AuthorizeSecurityGroupEgressResponse {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupRequest struct {
	OwnerId                 *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	OwnerAccount            *string `json:"OwnerAccount" xml:"OwnerAccount"`
	RegionId                *string `json:"RegionId" xml:"RegionId" require:"true"`
	SecurityGroupId         *string `json:"SecurityGroupId" xml:"SecurityGroupId" require:"true"`
	IpProtocol              *string `json:"IpProtocol" xml:"IpProtocol" require:"true"`
	PortRange               *string `json:"PortRange" xml:"PortRange" require:"true"`
	SourceGroupId           *string `json:"SourceGroupId" xml:"SourceGroupId"`
	SourceGroupOwnerId      *int64  `json:"SourceGroupOwnerId" xml:"SourceGroupOwnerId"`
	SourceGroupOwnerAccount *string `json:"SourceGroupOwnerAccount" xml:"SourceGroupOwnerAccount"`
	SourceCidrIp            *string `json:"SourceCidrIp" xml:"SourceCidrIp"`
	Ipv6SourceCidrIp        *string `json:"Ipv6SourceCidrIp" xml:"Ipv6SourceCidrIp"`
	SourcePortRange         *string `json:"SourcePortRange" xml:"SourcePortRange"`
	DestCidrIp              *string `json:"DestCidrIp" xml:"DestCidrIp"`
	Ipv6DestCidrIp          *string `json:"Ipv6DestCidrIp" xml:"Ipv6DestCidrIp"`
	Policy                  *string `json:"Policy" xml:"Policy"`
	Priority                *string `json:"Priority" xml:"Priority"`
	NicType                 *string `json:"NicType" xml:"NicType"`
	ClientToken             *string `json:"ClientToken" xml:"ClientToken"`
	Description             *string `json:"Description" xml:"Description"`
}

func (s AuthorizeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupRequest) SetOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetResourceOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetResourceOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetRegionId(v string) *AuthorizeSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPortRange(v string) *AuthorizeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SourceGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.SourceGroupOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceGroupOwnerAccount(v string) *AuthorizeSecurityGroupRequest {
	s.SourceGroupOwnerAccount = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpv6SourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetIpv6DestCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPolicy(v string) *AuthorizeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPriority(v string) *AuthorizeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetNicType(v string) *AuthorizeSecurityGroupRequest {
	s.NicType = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetClientToken(v string) *AuthorizeSecurityGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetDescription(v string) *AuthorizeSecurityGroupRequest {
	s.Description = &v
	return s
}

type AuthorizeSecurityGroupResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AuthorizeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponse) SetRequestId(v string) *AuthorizeSecurityGroupResponse {
	s.RequestId = &v
	return s
}

type AttachDiskRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	DiskId               *string `json:"DiskId" xml:"DiskId" require:"true"`
	Device               *string `json:"Device" xml:"Device"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance" xml:"DeleteWithInstance"`
	Bootable             *bool   `json:"Bootable" xml:"Bootable"`
	Password             *string `json:"Password" xml:"Password"`
	KeyPairName          *string `json:"KeyPairName" xml:"KeyPairName"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s AttachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskRequest) GoString() string {
	return s.String()
}

func (s *AttachDiskRequest) SetOwnerId(v int64) *AttachDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *AttachDiskRequest) SetResourceOwnerAccount(v string) *AttachDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AttachDiskRequest) SetResourceOwnerId(v int64) *AttachDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AttachDiskRequest) SetInstanceId(v string) *AttachDiskRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachDiskRequest) SetDiskId(v string) *AttachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *AttachDiskRequest) SetDevice(v string) *AttachDiskRequest {
	s.Device = &v
	return s
}

func (s *AttachDiskRequest) SetDeleteWithInstance(v bool) *AttachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *AttachDiskRequest) SetBootable(v bool) *AttachDiskRequest {
	s.Bootable = &v
	return s
}

func (s *AttachDiskRequest) SetPassword(v string) *AttachDiskRequest {
	s.Password = &v
	return s
}

func (s *AttachDiskRequest) SetKeyPairName(v string) *AttachDiskRequest {
	s.KeyPairName = &v
	return s
}

func (s *AttachDiskRequest) SetOwnerAccount(v string) *AttachDiskRequest {
	s.OwnerAccount = &v
	return s
}

type AttachDiskResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AttachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponse) GoString() string {
	return s.String()
}

func (s *AttachDiskResponse) SetRequestId(v string) *AttachDiskResponse {
	s.RequestId = &v
	return s
}

type AssociateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId"`
	AllocationId         *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	InstanceType         *string `json:"InstanceType" xml:"InstanceType"`
}

func (s AssociateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressRequest) SetOwnerId(v int64) *AssociateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetResourceOwnerAccount(v string) *AssociateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateEipAddressRequest) SetResourceOwnerId(v int64) *AssociateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetRegionId(v string) *AssociateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetAllocationId(v string) *AssociateEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceId(v string) *AssociateEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateEipAddressRequest) SetOwnerAccount(v string) *AssociateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateEipAddressRequest) SetInstanceType(v string) *AssociateEipAddressRequest {
	s.InstanceType = &v
	return s
}

type AssociateEipAddressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AssociateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AssociateEipAddressResponse) SetRequestId(v string) *AssociateEipAddressResponse {
	s.RequestId = &v
	return s
}

type AllocatePublicIpAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	InstanceId           *string `json:"InstanceId" xml:"InstanceId" require:"true"`
	IpAddress            *string `json:"IpAddress" xml:"IpAddress"`
	VlanId               *string `json:"VlanId" xml:"VlanId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s AllocatePublicIpAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocatePublicIpAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocatePublicIpAddressRequest) SetOwnerId(v int64) *AllocatePublicIpAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetResourceOwnerAccount(v string) *AllocatePublicIpAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetResourceOwnerId(v int64) *AllocatePublicIpAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetInstanceId(v string) *AllocatePublicIpAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetIpAddress(v string) *AllocatePublicIpAddressRequest {
	s.IpAddress = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetVlanId(v string) *AllocatePublicIpAddressRequest {
	s.VlanId = &v
	return s
}

func (s *AllocatePublicIpAddressRequest) SetOwnerAccount(v string) *AllocatePublicIpAddressRequest {
	s.OwnerAccount = &v
	return s
}

type AllocatePublicIpAddressResponse struct {
	RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
	IpAddress *string `json:"IpAddress" xml:"IpAddress" require:"true"`
}

func (s AllocatePublicIpAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocatePublicIpAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocatePublicIpAddressResponse) SetRequestId(v string) *AllocatePublicIpAddressResponse {
	s.RequestId = &v
	return s
}

func (s *AllocatePublicIpAddressResponse) SetIpAddress(v string) *AllocatePublicIpAddressResponse {
	s.IpAddress = &v
	return s
}

type AllocateEipAddressRequest struct {
	OwnerId              *int64  `json:"OwnerId" xml:"OwnerId"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
	RegionId             *string `json:"RegionId" xml:"RegionId" require:"true"`
	Bandwidth            *string `json:"Bandwidth" xml:"Bandwidth"`
	ISP                  *string `json:"ISP" xml:"ISP"`
	InternetChargeType   *string `json:"InternetChargeType" xml:"InternetChargeType"`
	ActivityId           *int64  `json:"ActivityId" xml:"ActivityId"`
	OwnerAccount         *string `json:"OwnerAccount" xml:"OwnerAccount"`
	ClientToken          *string `json:"ClientToken" xml:"ClientToken"`
}

func (s AllocateEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressRequest) SetOwnerId(v int64) *AllocateEipAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetResourceOwnerAccount(v string) *AllocateEipAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateEipAddressRequest) SetResourceOwnerId(v int64) *AllocateEipAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetRegionId(v string) *AllocateEipAddressRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetBandwidth(v string) *AllocateEipAddressRequest {
	s.Bandwidth = &v
	return s
}

func (s *AllocateEipAddressRequest) SetISP(v string) *AllocateEipAddressRequest {
	s.ISP = &v
	return s
}

func (s *AllocateEipAddressRequest) SetInternetChargeType(v string) *AllocateEipAddressRequest {
	s.InternetChargeType = &v
	return s
}

func (s *AllocateEipAddressRequest) SetActivityId(v int64) *AllocateEipAddressRequest {
	s.ActivityId = &v
	return s
}

func (s *AllocateEipAddressRequest) SetOwnerAccount(v string) *AllocateEipAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateEipAddressRequest) SetClientToken(v string) *AllocateEipAddressRequest {
	s.ClientToken = &v
	return s
}

type AllocateEipAddressResponse struct {
	RequestId    *string `json:"RequestId" xml:"RequestId" require:"true"`
	AllocationId *string `json:"AllocationId" xml:"AllocationId" require:"true"`
	EipAddress   *string `json:"EipAddress" xml:"EipAddress" require:"true"`
}

func (s AllocateEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AllocateEipAddressResponse) SetRequestId(v string) *AllocateEipAddressResponse {
	s.RequestId = &v
	return s
}

func (s *AllocateEipAddressResponse) SetAllocationId(v string) *AllocateEipAddressResponse {
	s.AllocationId = &v
	return s
}

func (s *AllocateEipAddressResponse) SetEipAddress(v string) *AllocateEipAddressResponse {
	s.EipAddress = &v
	return s
}

type Client struct {
	rpc.Client
}

func NewClient(config *rpc.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *rpc.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-beijing":                  tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hongkong":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"ap-southeast-1":              tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"us-west-1":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"us-east-1":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ecs.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ecs.ap-northeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("ecs.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ecs.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ecs.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"cn-fujian":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ecs.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ecs.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ecs.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ecs.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ecs.cn-zhangjiakou.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ecs.cn-shenzhen-cloudstone.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ecs.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(client.ProductId, client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) DescribeNetworkInterfaceAttributeWithOptions(request *DescribeNetworkInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNetworkInterfaceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNetworkInterfaceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaceAttribute(request *DescribeNetworkInterfaceAttributeRequest) (_result *DescribeNetworkInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfaceAttributeResponse{}
	_body, _err := client.DescribeNetworkInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopySnapshotWithOptions(request *CopySnapshotRequest, runtime *util.RuntimeOptions) (_result *CopySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopySnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("CopySnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopySnapshot(request *CopySnapshotRequest) (_result *CopySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopySnapshotResponse{}
	_body, _err := client.CopySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostsChargeTypeWithOptions(request *ModifyDedicatedHostsChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostsChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostsChargeTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostsChargeType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostsChargeType(request *ModifyDedicatedHostsChargeTypeRequest) (_result *ModifyDedicatedHostsChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostsChargeTypeResponse{}
	_body, _err := client.ModifyDedicatedHostsChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceMetadataOptionsWithOptions(request *ModifyInstanceMetadataOptionsRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceMetadataOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceMetadataOptionsResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceMetadataOptions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceMetadataOptions(request *ModifyInstanceMetadataOptionsRequest) (_result *ModifyInstanceMetadataOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceMetadataOptionsResponse{}
	_body, _err := client.ModifyInstanceMetadataOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageFromFamilyWithOptions(request *DescribeImageFromFamilyRequest, runtime *util.RuntimeOptions) (_result *DescribeImageFromFamilyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeImageFromFamilyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeImageFromFamily"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageFromFamily(request *DescribeImageFromFamilyRequest) (_result *DescribeImageFromFamilyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageFromFamilyResponse{}
	_body, _err := client.DescribeImageFromFamilyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstancesWithOptions(request *StopInstancesRequest, runtime *util.RuntimeOptions) (_result *StopInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("StopInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstances(request *StopInstancesRequest) (_result *StopInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstancesResponse{}
	_body, _err := client.StopInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartInstancesWithOptions(request *StartInstancesRequest, runtime *util.RuntimeOptions) (_result *StartInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("StartInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartInstances(request *StartInstancesRequest) (_result *StartInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstancesResponse{}
	_body, _err := client.StartInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootInstancesWithOptions(request *RebootInstancesRequest, runtime *util.RuntimeOptions) (_result *RebootInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebootInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("RebootInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootInstances(request *RebootInstancesRequest) (_result *RebootInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstancesResponse{}
	_body, _err := client.RebootInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RedeployDedicatedHostWithOptions(request *RedeployDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *RedeployDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RedeployDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("RedeployDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RedeployDedicatedHost(request *RedeployDedicatedHostRequest) (_result *RedeployDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RedeployDedicatedHostResponse{}
	_body, _err := client.RedeployDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributesWithOptions(request *ModifyInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceMaintenanceAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributes(request *ModifyInstanceMaintenanceAttributesRequest) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.ModifyInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributesWithOptions(request *DescribeInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceMaintenanceAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributes(request *DescribeInstanceMaintenanceAttributesRequest) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DescribeInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDemandWithOptions(request *ModifyDemandRequest, runtime *util.RuntimeOptions) (_result *ModifyDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDemandResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDemand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDemand(request *ModifyDemandRequest) (_result *ModifyDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDemandResponse{}
	_body, _err := client.ModifyDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDemandWithOptions(request *DeleteDemandRequest, runtime *util.RuntimeOptions) (_result *DeleteDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDemandResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDemand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDemand(request *DeleteDemandRequest) (_result *DeleteDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDemandResponse{}
	_body, _err := client.DeleteDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDemandWithOptions(request *CreateDemandRequest, runtime *util.RuntimeOptions) (_result *CreateDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDemandResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDemand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDemand(request *CreateDemandRequest) (_result *CreateDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDemandResponse{}
	_body, _err := client.CreateDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnitWithOptions(request *PurchaseStorageCapacityUnitRequest, runtime *util.RuntimeOptions) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.DoRequest(tea.String("PurchaseStorageCapacityUnit"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnit(request *PurchaseStorageCapacityUnitRequest) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.PurchaseStorageCapacityUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStorageCapacityUnitAttributeWithOptions(request *ModifyStorageCapacityUnitAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyStorageCapacityUnitAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyStorageCapacityUnitAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyStorageCapacityUnitAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStorageCapacityUnitAttribute(request *ModifyStorageCapacityUnitAttributeRequest) (_result *ModifyStorageCapacityUnitAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStorageCapacityUnitAttributeResponse{}
	_body, _err := client.ModifyStorageCapacityUnitAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitsWithOptions(request *DescribeStorageCapacityUnitsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageCapacityUnitsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeStorageCapacityUnitsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeStorageCapacityUnits"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnits(request *DescribeStorageCapacityUnitsRequest) (_result *DescribeStorageCapacityUnitsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageCapacityUnitsResponse{}
	_body, _err := client.DescribeStorageCapacityUnitsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunCommandWithOptions(request *RunCommandRequest, runtime *util.RuntimeOptions) (_result *RunCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RunCommandResponse{}
	_body, _err := client.DoRequest(tea.String("RunCommand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunCommand(request *RunCommandRequest) (_result *RunCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCommandResponse{}
	_body, _err := client.RunCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstancesWithOptions(request *DeleteInstancesRequest, runtime *util.RuntimeOptions) (_result *DeleteInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstances(request *DeleteInstancesRequest) (_result *DeleteInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstancesResponse{}
	_body, _err := client.DeleteInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStorageSetAttributeWithOptions(request *ModifyStorageSetAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyStorageSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyStorageSetAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStorageSetAttribute(request *ModifyStorageSetAttributeRequest) (_result *ModifyStorageSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.ModifyStorageSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetsWithOptions(request *DescribeStorageSetsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeStorageSets"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSets(request *DescribeStorageSetsRequest) (_result *DescribeStorageSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.DescribeStorageSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetDetailsWithOptions(request *DescribeStorageSetDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeStorageSetDetails"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSetDetails(request *DescribeStorageSetDetailsRequest) (_result *DescribeStorageSetDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.DescribeStorageSetDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStorageSetWithOptions(request *DeleteStorageSetRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteStorageSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStorageSet(request *DeleteStorageSetRequest) (_result *DeleteStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.DeleteStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateStorageSetWithOptions(request *CreateStorageSetRequest, runtime *util.RuntimeOptions) (_result *CreateStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.DoRequest(tea.String("CreateStorageSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateStorageSet(request *CreateStorageSetRequest) (_result *CreateStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.CreateStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskSpecWithOptions(request *ModifyDiskSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDiskSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskSpec(request *ModifyDiskSpecRequest) (_result *ModifyDiskSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.ModifyDiskSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoProvisioningGroupWithOptions(request *ModifyAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyAutoProvisioningGroupResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyAutoProvisioningGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoProvisioningGroup(request *ModifyAutoProvisioningGroupRequest) (_result *ModifyAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoProvisioningGroupResponse{}
	_body, _err := client.ModifyAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupsWithOptions(request *DescribeAutoProvisioningGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAutoProvisioningGroupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAutoProvisioningGroups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroups(request *DescribeAutoProvisioningGroupsRequest) (_result *DescribeAutoProvisioningGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupsResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupInstancesWithOptions(request *DescribeAutoProvisioningGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAutoProvisioningGroupInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAutoProvisioningGroupInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupInstances(request *DescribeAutoProvisioningGroupInstancesRequest) (_result *DescribeAutoProvisioningGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupInstancesResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAutoProvisioningGroupWithOptions(request *DeleteAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAutoProvisioningGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteAutoProvisioningGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAutoProvisioningGroup(request *DeleteAutoProvisioningGroupRequest) (_result *DeleteAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAutoProvisioningGroupResponse{}
	_body, _err := client.DeleteAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAutoProvisioningGroupWithOptions(request *CreateAutoProvisioningGroupRequest, runtime *util.RuntimeOptions) (_result *CreateAutoProvisioningGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAutoProvisioningGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateAutoProvisioningGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAutoProvisioningGroup(request *CreateAutoProvisioningGroupRequest) (_result *CreateAutoProvisioningGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAutoProvisioningGroupResponse{}
	_body, _err := client.CreateAutoProvisioningGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupHistoryWithOptions(request *DescribeAutoProvisioningGroupHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAutoProvisioningGroupHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAutoProvisioningGroupHistory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupHistory(request *DescribeAutoProvisioningGroupHistoryRequest) (_result *DescribeAutoProvisioningGroupHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupHistoryResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportInstancesStatusWithOptions(request *ReportInstancesStatusRequest, runtime *util.RuntimeOptions) (_result *ReportInstancesStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReportInstancesStatusResponse{}
	_body, _err := client.DoRequest(tea.String("ReportInstancesStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportInstancesStatus(request *ReportInstancesStatusRequest) (_result *ReportInstancesStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportInstancesStatusResponse{}
	_body, _err := client.ReportInstancesStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttributeWithOptions(request *ModifyReservedInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyReservedInstanceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttribute(request *ModifyReservedInstanceAttributeRequest) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.ModifyReservedInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOfferingWithOptions(request *PurchaseReservedInstancesOfferingRequest, runtime *util.RuntimeOptions) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.DoRequest(tea.String("PurchaseReservedInstancesOffering"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOffering(request *PurchaseReservedInstancesOfferingRequest) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.PurchaseReservedInstancesOfferingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstancesWithOptions(request *ModifyReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyReservedInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstances(request *ModifyReservedInstancesRequest) (_result *ModifyReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.ModifyReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstancesWithOptions(request *DescribeReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeReservedInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstances(request *DescribeReservedInstancesRequest) (_result *DescribeReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.DescribeReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDemandsWithOptions(request *DescribeDemandsRequest, runtime *util.RuntimeOptions) (_result *DescribeDemandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDemandsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDemands"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDemands(request *DescribeDemandsRequest) (_result *DescribeDemandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDemandsResponse{}
	_body, _err := client.DescribeDemandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportSnapshotWithOptions(request *ImportSnapshotRequest, runtime *util.RuntimeOptions) (_result *ImportSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportSnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("ImportSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportSnapshot(request *ImportSnapshotRequest) (_result *ImportSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportSnapshotResponse{}
	_body, _err := client.ImportSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportSnapshotWithOptions(request *ExportSnapshotRequest, runtime *util.RuntimeOptions) (_result *ExportSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportSnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("ExportSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportSnapshot(request *ExportSnapshotRequest) (_result *ExportSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportSnapshotResponse{}
	_body, _err := client.ExportSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("UntagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("TagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("ListTagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AcceptInquiredSystemEventWithOptions(request *AcceptInquiredSystemEventRequest, runtime *util.RuntimeOptions) (_result *AcceptInquiredSystemEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AcceptInquiredSystemEventResponse{}
	_body, _err := client.DoRequest(tea.String("AcceptInquiredSystemEvent"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AcceptInquiredSystemEvent(request *AcceptInquiredSystemEventRequest) (_result *AcceptInquiredSystemEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptInquiredSystemEventResponse{}
	_body, _err := client.AcceptInquiredSystemEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RedeployInstanceWithOptions(request *RedeployInstanceRequest, runtime *util.RuntimeOptions) (_result *RedeployInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RedeployInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RedeployInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RedeployInstance(request *RedeployInstanceRequest) (_result *RedeployInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RedeployInstanceResponse{}
	_body, _err := client.RedeployInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassignIpv6AddressesWithOptions(request *UnassignIpv6AddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignIpv6AddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassignIpv6AddressesResponse{}
	_body, _err := client.DoRequest(tea.String("UnassignIpv6Addresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassignIpv6Addresses(request *UnassignIpv6AddressesRequest) (_result *UnassignIpv6AddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignIpv6AddressesResponse{}
	_body, _err := client.UnassignIpv6AddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignIpv6AddressesWithOptions(request *AssignIpv6AddressesRequest, runtime *util.RuntimeOptions) (_result *AssignIpv6AddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssignIpv6AddressesResponse{}
	_body, _err := client.DoRequest(tea.String("AssignIpv6Addresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignIpv6Addresses(request *AssignIpv6AddressesRequest) (_result *AssignIpv6AddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignIpv6AddressesResponse{}
	_body, _err := client.AssignIpv6AddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTopologyWithOptions(request *DescribeInstanceTopologyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceTopology"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTopology(request *DescribeInstanceTopologyRequest) (_result *DescribeInstanceTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTopologyResponse{}
	_body, _err := client.DescribeInstanceTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewDedicatedHostsWithOptions(request *RenewDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *RenewDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.DoRequest(tea.String("RenewDedicatedHosts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewDedicatedHosts(request *RenewDedicatedHostsRequest) (_result *RenewDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.RenewDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseDedicatedHostWithOptions(request *ReleaseDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ReleaseDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseDedicatedHost(request *ReleaseDedicatedHostRequest) (_result *ReleaseDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.ReleaseDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceDeploymentWithOptions(request *ModifyInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceDeployment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceDeployment(request *ModifyInstanceDeploymentRequest) (_result *ModifyInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.ModifyInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttributeWithOptions(request *ModifyDedicatedHostAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostAutoRenewAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttribute(request *ModifyDedicatedHostAutoRenewAttributeRequest) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTimeWithOptions(request *ModifyDedicatedHostAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostAutoReleaseTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTime(request *ModifyDedicatedHostAutoReleaseTimeRequest) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttributeWithOptions(request *ModifyDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttribute(request *ModifyDedicatedHostAttributeRequest) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostsWithOptions(request *DescribeDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHosts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHosts(request *DescribeDedicatedHostsRequest) (_result *DescribeDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DescribeDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypesWithOptions(request *DescribeDedicatedHostTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHostTypes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypes(request *DescribeDedicatedHostTypesRequest) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.DescribeDedicatedHostTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenewWithOptions(request *DescribeDedicatedHostAutoRenewRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHostAutoRenew"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenew(request *DescribeDedicatedHostAutoRenewRequest) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.DescribeDedicatedHostAutoRenewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateDedicatedHostsWithOptions(request *AllocateDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *AllocateDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateDedicatedHosts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateDedicatedHosts(request *AllocateDedicatedHostsRequest) (_result *AllocateDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.AllocateDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSimulatedSystemEventsWithOptions(request *CreateSimulatedSystemEventsRequest, runtime *util.RuntimeOptions) (_result *CreateSimulatedSystemEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSimulatedSystemEventsResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSimulatedSystemEvents"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSimulatedSystemEvents(request *CreateSimulatedSystemEventsRequest) (_result *CreateSimulatedSystemEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSimulatedSystemEventsResponse{}
	_body, _err := client.CreateSimulatedSystemEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelSimulatedSystemEventsWithOptions(request *CancelSimulatedSystemEventsRequest, runtime *util.RuntimeOptions) (_result *CancelSimulatedSystemEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelSimulatedSystemEventsResponse{}
	_body, _err := client.DoRequest(tea.String("CancelSimulatedSystemEvents"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelSimulatedSystemEvents(request *CancelSimulatedSystemEventsRequest) (_result *CancelSimulatedSystemEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelSimulatedSystemEventsResponse{}
	_body, _err := client.CancelSimulatedSystemEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEniMonitorDataWithOptions(request *DescribeEniMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEniMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEniMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEniMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEniMonitorData(request *DescribeEniMonitorDataRequest) (_result *DescribeEniMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEniMonitorDataResponse{}
	_body, _err := client.DescribeEniMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountAttributesWithOptions(request *DescribeAccountAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAccountAttributes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountAttributes(request *DescribeAccountAttributesRequest) (_result *DescribeAccountAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.DescribeAccountAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLaunchTemplateDefaultVersionWithOptions(request *ModifyLaunchTemplateDefaultVersionRequest, runtime *util.RuntimeOptions) (_result *ModifyLaunchTemplateDefaultVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyLaunchTemplateDefaultVersionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyLaunchTemplateDefaultVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLaunchTemplateDefaultVersion(request *ModifyLaunchTemplateDefaultVersionRequest) (_result *ModifyLaunchTemplateDefaultVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLaunchTemplateDefaultVersionResponse{}
	_body, _err := client.ModifyLaunchTemplateDefaultVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLaunchTemplatesWithOptions(request *DescribeLaunchTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribeLaunchTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLaunchTemplatesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeLaunchTemplates"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLaunchTemplates(request *DescribeLaunchTemplatesRequest) (_result *DescribeLaunchTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLaunchTemplatesResponse{}
	_body, _err := client.DescribeLaunchTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLaunchTemplateVersionsWithOptions(request *DescribeLaunchTemplateVersionsRequest, runtime *util.RuntimeOptions) (_result *DescribeLaunchTemplateVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLaunchTemplateVersionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeLaunchTemplateVersions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLaunchTemplateVersions(request *DescribeLaunchTemplateVersionsRequest) (_result *DescribeLaunchTemplateVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLaunchTemplateVersionsResponse{}
	_body, _err := client.DescribeLaunchTemplateVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateVersionWithOptions(request *DeleteLaunchTemplateVersionRequest, runtime *util.RuntimeOptions) (_result *DeleteLaunchTemplateVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLaunchTemplateVersionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteLaunchTemplateVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateVersion(request *DeleteLaunchTemplateVersionRequest) (_result *DeleteLaunchTemplateVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLaunchTemplateVersionResponse{}
	_body, _err := client.DeleteLaunchTemplateVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLaunchTemplateWithOptions(request *DeleteLaunchTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLaunchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLaunchTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteLaunchTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLaunchTemplate(request *DeleteLaunchTemplateRequest) (_result *DeleteLaunchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLaunchTemplateResponse{}
	_body, _err := client.DeleteLaunchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLaunchTemplateVersionWithOptions(request *CreateLaunchTemplateVersionRequest, runtime *util.RuntimeOptions) (_result *CreateLaunchTemplateVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLaunchTemplateVersionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateLaunchTemplateVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLaunchTemplateVersion(request *CreateLaunchTemplateVersionRequest) (_result *CreateLaunchTemplateVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLaunchTemplateVersionResponse{}
	_body, _err := client.CreateLaunchTemplateVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLaunchTemplateWithOptions(request *CreateLaunchTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLaunchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLaunchTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("CreateLaunchTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLaunchTemplate(request *CreateLaunchTemplateRequest) (_result *CreateLaunchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLaunchTemplateResponse{}
	_body, _err := client.CreateLaunchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallCloudAssistantWithOptions(request *InstallCloudAssistantRequest, runtime *util.RuntimeOptions) (_result *InstallCloudAssistantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InstallCloudAssistantResponse{}
	_body, _err := client.DoRequest(tea.String("InstallCloudAssistant"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallCloudAssistant(request *InstallCloudAssistantRequest) (_result *InstallCloudAssistantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallCloudAssistantResponse{}
	_body, _err := client.InstallCloudAssistantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudAssistantStatusWithOptions(request *DescribeCloudAssistantStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCloudAssistantStatusResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCloudAssistantStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudAssistantStatus(request *DescribeCloudAssistantStatusRequest) (_result *DescribeCloudAssistantStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudAssistantStatusResponse{}
	_body, _err := client.DescribeCloudAssistantStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddressesWithOptions(request *UnassignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.DoRequest(tea.String("UnassignPrivateIpAddresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddresses(request *UnassignPrivateIpAddressesRequest) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.UnassignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignPrivateIpAddressesWithOptions(request *AssignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *AssignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.DoRequest(tea.String("AssignPrivateIpAddresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignPrivateIpAddresses(request *AssignPrivateIpAddressesRequest) (_result *AssignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.AssignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacePermissionsWithOptions(request *DescribeNetworkInterfacePermissionsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacePermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNetworkInterfacePermissionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNetworkInterfacePermissions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacePermissions(request *DescribeNetworkInterfacePermissionsRequest) (_result *DescribeNetworkInterfacePermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacePermissionsResponse{}
	_body, _err := client.DescribeNetworkInterfacePermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInterfacePermissionWithOptions(request *DeleteNetworkInterfacePermissionRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInterfacePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNetworkInterfacePermissionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteNetworkInterfacePermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInterfacePermission(request *DeleteNetworkInterfacePermissionRequest) (_result *DeleteNetworkInterfacePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInterfacePermissionResponse{}
	_body, _err := client.DeleteNetworkInterfacePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkInterfacePermissionWithOptions(request *CreateNetworkInterfacePermissionRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInterfacePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNetworkInterfacePermissionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateNetworkInterfacePermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkInterfacePermission(request *CreateNetworkInterfacePermissionRequest) (_result *CreateNetworkInterfacePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInterfacePermissionResponse{}
	_body, _err := client.CreateNetworkInterfacePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceScreenshotWithOptions(request *GetInstanceScreenshotRequest, runtime *util.RuntimeOptions) (_result *GetInstanceScreenshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetInstanceScreenshotResponse{}
	_body, _err := client.DoRequest(tea.String("GetInstanceScreenshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceScreenshot(request *GetInstanceScreenshotRequest) (_result *GetInstanceScreenshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceScreenshotResponse{}
	_body, _err := client.GetInstanceScreenshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceConsoleOutputWithOptions(request *GetInstanceConsoleOutputRequest, runtime *util.RuntimeOptions) (_result *GetInstanceConsoleOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetInstanceConsoleOutputResponse{}
	_body, _err := client.DoRequest(tea.String("GetInstanceConsoleOutput"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceConsoleOutput(request *GetInstanceConsoleOutputRequest) (_result *GetInstanceConsoleOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceConsoleOutputResponse{}
	_body, _err := client.GetInstanceConsoleOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourcesModificationWithOptions(request *DescribeResourcesModificationRequest, runtime *util.RuntimeOptions) (_result *DescribeResourcesModificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeResourcesModificationResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeResourcesModification"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourcesModification(request *DescribeResourcesModificationRequest) (_result *DescribeResourcesModificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourcesModificationResponse{}
	_body, _err := client.DescribeResourcesModificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthLimitationWithOptions(request *DescribeBandwidthLimitationRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthLimitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBandwidthLimitationResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBandwidthLimitation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthLimitation(request *DescribeBandwidthLimitationRequest) (_result *DescribeBandwidthLimitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthLimitationResponse{}
	_body, _err := client.DescribeBandwidthLimitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceWithOptions(request *DescribeAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResource(request *DescribeAvailableResourceRequest) (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReActivateInstancesWithOptions(request *ReActivateInstancesRequest, runtime *util.RuntimeOptions) (_result *ReActivateInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReActivateInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("ReActivateInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReActivateInstances(request *ReActivateInstancesRequest) (_result *ReActivateInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReActivateInstancesResponse{}
	_body, _err := client.ReActivateInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesFullStatusWithOptions(request *DescribeInstancesFullStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesFullStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstancesFullStatusResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstancesFullStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstancesFullStatus(request *DescribeInstancesFullStatusRequest) (_result *DescribeInstancesFullStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesFullStatusResponse{}
	_body, _err := client.DescribeInstancesFullStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceHistoryEventsWithOptions(request *DescribeInstanceHistoryEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceHistoryEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceHistoryEventsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceHistoryEvents"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceHistoryEvents(request *DescribeInstanceHistoryEventsRequest) (_result *DescribeInstanceHistoryEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceHistoryEventsResponse{}
	_body, _err := client.DescribeInstanceHistoryEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDisksFullStatusWithOptions(request *DescribeDisksFullStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksFullStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDisksFullStatusResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDisksFullStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDisksFullStatus(request *DescribeDisksFullStatusRequest) (_result *DescribeDisksFullStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksFullStatusResponse{}
	_body, _err := client.DescribeDisksFullStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyUserBusinessBehaviorWithOptions(request *ModifyUserBusinessBehaviorRequest, runtime *util.RuntimeOptions) (_result *ModifyUserBusinessBehaviorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyUserBusinessBehaviorResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyUserBusinessBehavior"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyUserBusinessBehavior(request *ModifyUserBusinessBehaviorRequest) (_result *ModifyUserBusinessBehaviorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserBusinessBehaviorResponse{}
	_body, _err := client.ModifyUserBusinessBehaviorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserBusinessBehaviorWithOptions(request *DescribeUserBusinessBehaviorRequest, runtime *util.RuntimeOptions) (_result *DescribeUserBusinessBehaviorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeUserBusinessBehaviorResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeUserBusinessBehavior"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserBusinessBehavior(request *DescribeUserBusinessBehaviorRequest) (_result *DescribeUserBusinessBehaviorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBusinessBehaviorResponse{}
	_body, _err := client.DescribeUserBusinessBehaviorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunInstancesWithOptions(request *RunInstancesRequest, runtime *util.RuntimeOptions) (_result *RunInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RunInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("RunInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunInstances(request *RunInstancesRequest) (_result *RunInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunInstancesResponse{}
	_body, _err := client.RunInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertNatPublicIpToEipWithOptions(request *ConvertNatPublicIpToEipRequest, runtime *util.RuntimeOptions) (_result *ConvertNatPublicIpToEipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConvertNatPublicIpToEipResponse{}
	_body, _err := client.DoRequest(tea.String("ConvertNatPublicIpToEip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertNatPublicIpToEip(request *ConvertNatPublicIpToEipRequest) (_result *ConvertNatPublicIpToEipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertNatPublicIpToEipResponse{}
	_body, _err := client.ConvertNatPublicIpToEipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHpcClusterAttributeWithOptions(request *ModifyHpcClusterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHpcClusterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyHpcClusterAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyHpcClusterAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHpcClusterAttribute(request *ModifyHpcClusterAttributeRequest) (_result *ModifyHpcClusterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHpcClusterAttributeResponse{}
	_body, _err := client.ModifyHpcClusterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHpcClustersWithOptions(request *DescribeHpcClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeHpcClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHpcClustersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHpcClusters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHpcClusters(request *DescribeHpcClustersRequest) (_result *DescribeHpcClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHpcClustersResponse{}
	_body, _err := client.DescribeHpcClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHpcClusterWithOptions(request *DeleteHpcClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteHpcClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteHpcClusterResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteHpcCluster"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHpcCluster(request *DeleteHpcClusterRequest) (_result *DeleteHpcClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHpcClusterResponse{}
	_body, _err := client.DeleteHpcClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHpcClusterWithOptions(request *CreateHpcClusterRequest, runtime *util.RuntimeOptions) (_result *CreateHpcClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateHpcClusterResponse{}
	_body, _err := client.DoRequest(tea.String("CreateHpcCluster"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHpcCluster(request *CreateHpcClusterRequest) (_result *CreateHpcClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHpcClusterResponse{}
	_body, _err := client.CreateHpcClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotsUsageWithOptions(request *DescribeSnapshotsUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnapshotsUsageResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnapshotsUsage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotsUsage(request *DescribeSnapshotsUsageRequest) (_result *DescribeSnapshotsUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsUsageResponse{}
	_body, _err := client.DescribeSnapshotsUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSpotPriceHistoryWithOptions(request *DescribeSpotPriceHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeSpotPriceHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSpotPriceHistoryResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSpotPriceHistory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSpotPriceHistory(request *DescribeSpotPriceHistoryRequest) (_result *DescribeSpotPriceHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSpotPriceHistoryResponse{}
	_body, _err := client.DescribeSpotPriceHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInvocationWithOptions(request *StopInvocationRequest, runtime *util.RuntimeOptions) (_result *StopInvocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopInvocationResponse{}
	_body, _err := client.DoRequest(tea.String("StopInvocation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInvocation(request *StopInvocationRequest) (_result *StopInvocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInvocationResponse{}
	_body, _err := client.StopInvocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCommandWithOptions(request *ModifyCommandRequest, runtime *util.RuntimeOptions) (_result *ModifyCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCommandResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCommand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCommand(request *ModifyCommandRequest) (_result *ModifyCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCommandResponse{}
	_body, _err := client.ModifyCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeCommandWithOptions(request *InvokeCommandRequest, runtime *util.RuntimeOptions) (_result *InvokeCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvokeCommandResponse{}
	_body, _err := client.DoRequest(tea.String("InvokeCommand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeCommand(request *InvokeCommandRequest) (_result *InvokeCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeCommandResponse{}
	_body, _err := client.InvokeCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInvocationsWithOptions(request *DescribeInvocationsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInvocations"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInvocations(request *DescribeInvocationsRequest) (_result *DescribeInvocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.DescribeInvocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInvocationResultsWithOptions(request *DescribeInvocationResultsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInvocationResults"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInvocationResults(request *DescribeInvocationResultsRequest) (_result *DescribeInvocationResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.DescribeInvocationResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommandsWithOptions(request *DescribeCommandsRequest, runtime *util.RuntimeOptions) (_result *DescribeCommandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCommandsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCommands"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommands(request *DescribeCommandsRequest) (_result *DescribeCommandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommandsResponse{}
	_body, _err := client.DescribeCommandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCommandWithOptions(request *DeleteCommandRequest, runtime *util.RuntimeOptions) (_result *DeleteCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteCommandResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteCommand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCommand(request *DeleteCommandRequest) (_result *DeleteCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCommandResponse{}
	_body, _err := client.DeleteCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCommandWithOptions(request *CreateCommandRequest, runtime *util.RuntimeOptions) (_result *CreateCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateCommandResponse{}
	_body, _err := client.DoRequest(tea.String("CreateCommand"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCommand(request *CreateCommandRequest) (_result *CreateCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCommandResponse{}
	_body, _err := client.CreateCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupEgressRuleWithOptions(request *ModifySecurityGroupEgressRuleRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupEgressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityGroupEgressRuleResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityGroupEgressRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupEgressRule(request *ModifySecurityGroupEgressRuleRequest) (_result *ModifySecurityGroupEgressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupEgressRuleResponse{}
	_body, _err := client.ModifySecurityGroupEgressRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskChargeTypeWithOptions(request *ModifyDiskChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDiskChargeTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDiskChargeType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskChargeType(request *ModifyDiskChargeTypeRequest) (_result *ModifyDiskChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskChargeTypeResponse{}
	_body, _err := client.ModifyDiskChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNetworkInterfaceAttributeWithOptions(request *ModifyNetworkInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyNetworkInterfaceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyNetworkInterfaceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNetworkInterfaceAttribute(request *ModifyNetworkInterfaceAttributeRequest) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkInterfaceAttributeResponse{}
	_body, _err := client.ModifyNetworkInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachNetworkInterfaceWithOptions(request *DetachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *DetachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachNetworkInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DetachNetworkInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachNetworkInterface(request *DetachNetworkInterfaceRequest) (_result *DetachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachNetworkInterfaceResponse{}
	_body, _err := client.DetachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacesWithOptions(request *DescribeNetworkInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNetworkInterfaces"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaces(request *DescribeNetworkInterfacesRequest) (_result *DescribeNetworkInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DescribeNetworkInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInterfaceWithOptions(request *DeleteNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNetworkInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteNetworkInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInterface(request *DeleteNetworkInterfaceRequest) (_result *DeleteNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInterfaceResponse{}
	_body, _err := client.DeleteNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkInterfaceWithOptions(request *CreateNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNetworkInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateNetworkInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkInterface(request *CreateNetworkInterfaceRequest) (_result *CreateNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInterfaceResponse{}
	_body, _err := client.CreateNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachNetworkInterfaceWithOptions(request *AttachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *AttachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachNetworkInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("AttachNetworkInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachNetworkInterface(request *AttachNetworkInterfaceRequest) (_result *AttachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachNetworkInterfaceResponse{}
	_body, _err := client.AttachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecommendInstanceTypeWithOptions(request *DescribeRecommendInstanceTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendInstanceTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRecommendInstanceTypeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRecommendInstanceType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecommendInstanceType(request *DescribeRecommendInstanceTypeRequest) (_result *DescribeRecommendInstanceTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendInstanceTypeResponse{}
	_body, _err := client.DescribeRecommendInstanceTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpecWithOptions(request *ModifyPrepayInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyPrepayInstanceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpec(request *ModifyPrepayInstanceSpecRequest) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.ModifyPrepayInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceChargeTypeWithOptions(request *ModifyInstanceChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceChargeType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceChargeType(request *ModifyInstanceChargeTypeRequest) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.ModifyInstanceChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinResourceGroupWithOptions(request *JoinResourceGroupRequest, runtime *util.RuntimeOptions) (_result *JoinResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("JoinResourceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinResourceGroup(request *JoinResourceGroupRequest) (_result *JoinResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.JoinResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupPolicyWithOptions(request *ModifySecurityGroupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityGroupPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityGroupPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupPolicy(request *ModifySecurityGroupPolicyRequest) (_result *ModifySecurityGroupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupPolicyResponse{}
	_body, _err := client.ModifySecurityGroupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupReferencesWithOptions(request *DescribeSecurityGroupReferencesRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupReferencesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSecurityGroupReferencesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSecurityGroupReferences"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupReferences(request *DescribeSecurityGroupReferencesRequest) (_result *DescribeSecurityGroupReferencesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupReferencesResponse{}
	_body, _err := client.DescribeSecurityGroupReferencesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachClassicLinkVpcWithOptions(request *DetachClassicLinkVpcRequest, runtime *util.RuntimeOptions) (_result *DetachClassicLinkVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachClassicLinkVpcResponse{}
	_body, _err := client.DoRequest(tea.String("DetachClassicLinkVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachClassicLinkVpc(request *DetachClassicLinkVpcRequest) (_result *DetachClassicLinkVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachClassicLinkVpcResponse{}
	_body, _err := client.DetachClassicLinkVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClassicLinkInstancesWithOptions(request *DescribeClassicLinkInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeClassicLinkInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeClassicLinkInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeClassicLinkInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClassicLinkInstances(request *DescribeClassicLinkInstancesRequest) (_result *DescribeClassicLinkInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClassicLinkInstancesResponse{}
	_body, _err := client.DescribeClassicLinkInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachClassicLinkVpcWithOptions(request *AttachClassicLinkVpcRequest, runtime *util.RuntimeOptions) (_result *AttachClassicLinkVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachClassicLinkVpcResponse{}
	_body, _err := client.DoRequest(tea.String("AttachClassicLinkVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachClassicLinkVpc(request *AttachClassicLinkVpcRequest) (_result *AttachClassicLinkVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachClassicLinkVpcResponse{}
	_body, _err := client.AttachClassicLinkVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachInstanceRamRoleWithOptions(request *DetachInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *DetachInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachInstanceRamRoleResponse{}
	_body, _err := client.DoRequest(tea.String("DetachInstanceRamRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachInstanceRamRole(request *DetachInstanceRamRoleRequest) (_result *DetachInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachInstanceRamRoleResponse{}
	_body, _err := client.DetachInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceRamRoleWithOptions(request *DescribeInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceRamRoleResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceRamRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceRamRole(request *DescribeInstanceRamRoleRequest) (_result *DescribeInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceRamRoleResponse{}
	_body, _err := client.DescribeInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachInstanceRamRoleWithOptions(request *AttachInstanceRamRoleRequest, runtime *util.RuntimeOptions) (_result *AttachInstanceRamRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachInstanceRamRoleResponse{}
	_body, _err := client.DoRequest(tea.String("AttachInstanceRamRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachInstanceRamRole(request *AttachInstanceRamRoleRequest) (_result *AttachInstanceRamRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachInstanceRamRoleResponse{}
	_body, _err := client.AttachInstanceRamRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotPackageWithOptions(request *DescribeSnapshotPackageRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnapshotPackageResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnapshotPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotPackage(request *DescribeSnapshotPackageRequest) (_result *DescribeSnapshotPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotPackageResponse{}
	_body, _err := client.DescribeSnapshotPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupRuleWithOptions(request *ModifySecurityGroupRuleRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityGroupRuleResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityGroupRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupRule(request *ModifySecurityGroupRuleRequest) (_result *ModifySecurityGroupRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupRuleResponse{}
	_body, _err := client.ModifySecurityGroupRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotMonitorDataWithOptions(request *DescribeSnapshotMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnapshotMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnapshotMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotMonitorData(request *DescribeSnapshotMonitorDataRequest) (_result *DescribeSnapshotMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotMonitorDataResponse{}
	_body, _err := client.DescribeSnapshotMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRenewalPriceWithOptions(request *DescribeRenewalPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenewalPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRenewalPrice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRenewalPrice(request *DescribeRenewalPriceRequest) (_result *DescribeRenewalPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DescribeRenewalPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribePrice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDeploymentSetAttributeWithOptions(request *ModifyDeploymentSetAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDeploymentSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDeploymentSetAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDeploymentSetAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDeploymentSetAttribute(request *ModifyDeploymentSetAttributeRequest) (_result *ModifyDeploymentSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeploymentSetAttributeResponse{}
	_body, _err := client.ModifyDeploymentSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeploymentSetsWithOptions(request *DescribeDeploymentSetsRequest, runtime *util.RuntimeOptions) (_result *DescribeDeploymentSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDeploymentSetsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDeploymentSets"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeploymentSets(request *DescribeDeploymentSetsRequest) (_result *DescribeDeploymentSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeploymentSetsResponse{}
	_body, _err := client.DescribeDeploymentSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeploymentSetWithOptions(request *DeleteDeploymentSetRequest, runtime *util.RuntimeOptions) (_result *DeleteDeploymentSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeploymentSetResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDeploymentSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeploymentSet(request *DeleteDeploymentSetRequest) (_result *DeleteDeploymentSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeploymentSetResponse{}
	_body, _err := client.DeleteDeploymentSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeploymentSetWithOptions(request *CreateDeploymentSetRequest, runtime *util.RuntimeOptions) (_result *CreateDeploymentSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDeploymentSetResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDeploymentSet"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeploymentSet(request *CreateDeploymentSetRequest) (_result *CreateDeploymentSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeploymentSetResponse{}
	_body, _err := client.CreateDeploymentSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportKeyPairWithOptions(request *ImportKeyPairRequest, runtime *util.RuntimeOptions) (_result *ImportKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.DoRequest(tea.String("ImportKeyPair"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportKeyPair(request *ImportKeyPairRequest) (_result *ImportKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.ImportKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachKeyPairWithOptions(request *DetachKeyPairRequest, runtime *util.RuntimeOptions) (_result *DetachKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachKeyPairResponse{}
	_body, _err := client.DoRequest(tea.String("DetachKeyPair"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachKeyPair(request *DetachKeyPairRequest) (_result *DetachKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachKeyPairResponse{}
	_body, _err := client.DetachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeKeyPairsWithOptions(request *DescribeKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DescribeKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeKeyPairs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeKeyPairs(request *DescribeKeyPairsRequest) (_result *DescribeKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DescribeKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteKeyPairsWithOptions(request *DeleteKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DeleteKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteKeyPairs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteKeyPairs(request *DeleteKeyPairsRequest) (_result *DeleteKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DeleteKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateKeyPairWithOptions(request *CreateKeyPairRequest, runtime *util.RuntimeOptions) (_result *CreateKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.DoRequest(tea.String("CreateKeyPair"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateKeyPair(request *CreateKeyPairRequest) (_result *CreateKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.CreateKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachKeyPairWithOptions(request *AttachKeyPairRequest, runtime *util.RuntimeOptions) (_result *AttachKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachKeyPairResponse{}
	_body, _err := client.DoRequest(tea.String("AttachKeyPair"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachKeyPair(request *AttachKeyPairRequest) (_result *AttachKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachKeyPairResponse{}
	_body, _err := client.AttachKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttributeWithOptions(request *ModifyInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceAutoRenewAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttribute(request *ModifyInstanceAutoRenewAttributeRequest) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttributeWithOptions(request *DescribeInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceAutoRenewAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttribute(request *DescribeInstanceAutoRenewAttributeRequest) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotLinksWithOptions(request *DescribeSnapshotLinksRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotLinksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnapshotLinksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnapshotLinks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshotLinks(request *DescribeSnapshotLinksRequest) (_result *DescribeSnapshotLinksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotLinksResponse{}
	_body, _err := client.DescribeSnapshotLinksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoReleaseTimeWithOptions(request *ModifyInstanceAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceAutoReleaseTimeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceAutoReleaseTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoReleaseTime(request *ModifyInstanceAutoReleaseTimeRequest) (_result *ModifyInstanceAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoReleaseTimeResponse{}
	_body, _err := client.ModifyInstanceAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorDataWithOptions(request *DescribeNewProjectEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNewProjectEipMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNewProjectEipMonitorData(request *DescribeNewProjectEipMonitorDataRequest) (_result *DescribeNewProjectEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNewProjectEipMonitorDataResponse{}
	_body, _err := client.DescribeNewProjectEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserDataWithOptions(request *DescribeUserDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUserDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeUserDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeUserData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserData(request *DescribeUserDataRequest) (_result *DescribeUserDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserDataResponse{}
	_body, _err := client.DescribeUserDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIpsWithOptions(request *RemoveBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveBandwidthPackageIps"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveBandwidthPackageIps(request *RemoveBandwidthPackageIpsRequest) (_result *RemoveBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBandwidthPackageIpsResponse{}
	_body, _err := client.RemoveBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyForwardEntryWithOptions(request *ModifyForwardEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyForwardEntry(request *ModifyForwardEntryRequest) (_result *ModifyForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.ModifyForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpecWithOptions(request *ModifyBandwidthPackageSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBandwidthPackageSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBandwidthPackageSpec(request *ModifyBandwidthPackageSpecRequest) (_result *ModifyBandwidthPackageSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBandwidthPackageSpecResponse{}
	_body, _err := client.ModifyBandwidthPackageSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNatGatewaysWithOptions(request *DescribeNatGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeNatGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNatGateways"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (_result *DescribeNatGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DescribeNatGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForwardTableEntriesWithOptions(request *DescribeForwardTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeForwardTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeForwardTableEntries"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForwardTableEntries(request *DescribeForwardTableEntriesRequest) (_result *DescribeForwardTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DescribeForwardTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthPackagesWithOptions(request *DescribeBandwidthPackagesRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBandwidthPackages"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthPackages(request *DescribeBandwidthPackagesRequest) (_result *DescribeBandwidthPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthPackagesResponse{}
	_body, _err := client.DescribeBandwidthPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNatGatewayWithOptions(request *DeleteNatGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteNatGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNatGateway(request *DeleteNatGatewayRequest) (_result *DeleteNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DeleteNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteForwardEntryWithOptions(request *DeleteForwardEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteForwardEntry(request *DeleteForwardEntryRequest) (_result *DeleteForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DeleteForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBandwidthPackageWithOptions(request *DeleteBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *DeleteBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBandwidthPackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBandwidthPackage(request *DeleteBandwidthPackageRequest) (_result *DeleteBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBandwidthPackageResponse{}
	_body, _err := client.DeleteBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNatGatewayWithOptions(request *CreateNatGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("CreateNatGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNatGateway(request *CreateNatGatewayRequest) (_result *CreateNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CreateNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateForwardEntryWithOptions(request *CreateForwardEntryRequest, runtime *util.RuntimeOptions) (_result *CreateForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateForwardEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateForwardEntry(request *CreateForwardEntryRequest) (_result *CreateForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CreateForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBandwidthPackageIpsWithOptions(request *AddBandwidthPackageIpsRequest, runtime *util.RuntimeOptions) (_result *AddBandwidthPackageIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.DoRequest(tea.String("AddBandwidthPackageIps"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBandwidthPackageIps(request *AddBandwidthPackageIpsRequest) (_result *AddBandwidthPackageIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBandwidthPackageIpsResponse{}
	_body, _err := client.AddBandwidthPackageIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipFillProductWithOptions(request *EipFillProductRequest, runtime *util.RuntimeOptions) (_result *EipFillProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EipFillProductResponse{}
	_body, _err := client.DoRequest(tea.String("EipFillProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipFillProduct(request *EipFillProductRequest) (_result *EipFillProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipFillProductResponse{}
	_body, _err := client.EipFillProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipNotifyPaidWithOptions(request *EipNotifyPaidRequest, runtime *util.RuntimeOptions) (_result *EipNotifyPaidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EipNotifyPaidResponse{}
	_body, _err := client.DoRequest(tea.String("EipNotifyPaid"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipNotifyPaid(request *EipNotifyPaidRequest) (_result *EipNotifyPaidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipNotifyPaidResponse{}
	_body, _err := client.EipNotifyPaidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EipFillParamsWithOptions(request *EipFillParamsRequest, runtime *util.RuntimeOptions) (_result *EipFillParamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EipFillParamsResponse{}
	_body, _err := client.DoRequest(tea.String("EipFillParams"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EipFillParams(request *EipFillParamsRequest) (_result *EipFillParamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EipFillParamsResponse{}
	_body, _err := client.EipFillParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyExWithOptions(request *ModifyAutoSnapshotPolicyExRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoSnapshotPolicyExResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyAutoSnapshotPolicyExResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyAutoSnapshotPolicyEx"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyEx(request *ModifyAutoSnapshotPolicyExRequest) (_result *ModifyAutoSnapshotPolicyExResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoSnapshotPolicyExResponse{}
	_body, _err := client.ModifyAutoSnapshotPolicyExWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoSnapshotPolicyExWithOptions(request *DescribeAutoSnapshotPolicyExRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoSnapshotPolicyExResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAutoSnapshotPolicyExResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAutoSnapshotPolicyEx"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoSnapshotPolicyEx(request *DescribeAutoSnapshotPolicyExRequest) (_result *DescribeAutoSnapshotPolicyExResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoSnapshotPolicyExResponse{}
	_body, _err := client.DescribeAutoSnapshotPolicyExWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAutoSnapshotPolicyWithOptions(request *DeleteAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteAutoSnapshotPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAutoSnapshotPolicy(request *DeleteAutoSnapshotPolicyRequest) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.DeleteAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAutoSnapshotPolicyWithOptions(request *CreateAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("CreateAutoSnapshotPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAutoSnapshotPolicy(request *CreateAutoSnapshotPolicyRequest) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.CreateAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelAutoSnapshotPolicyWithOptions(request *CancelAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("CancelAutoSnapshotPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelAutoSnapshotPolicy(request *CancelAutoSnapshotPolicyRequest) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.CancelAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyAutoSnapshotPolicyWithOptions(request *ApplyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ApplyAutoSnapshotPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyAutoSnapshotPolicy(request *ApplyAutoSnapshotPolicyRequest) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.ApplyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSupportInstanceTypesWithOptions(request *DescribeImageSupportInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSupportInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeImageSupportInstanceTypesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeImageSupportInstanceTypes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSupportInstanceTypes(request *DescribeImageSupportInstanceTypesRequest) (_result *DescribeImageSupportInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSupportInstanceTypesResponse{}
	_body, _err := client.DescribeImageSupportInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouterWithOptions(request *TerminateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("TerminateVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateVirtualBorderRouter(request *TerminateVirtualBorderRouterRequest) (_result *TerminateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateVirtualBorderRouterResponse{}
	_body, _err := client.TerminateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminatePhysicalConnectionWithOptions(request *TerminatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *TerminatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("TerminatePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminatePhysicalConnection(request *TerminatePhysicalConnectionRequest) (_result *TerminatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminatePhysicalConnectionResponse{}
	_body, _err := client.TerminatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouterWithOptions(request *RecoverVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("RecoverVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecoverVirtualBorderRouter(request *RecoverVirtualBorderRouterRequest) (_result *RecoverVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoverVirtualBorderRouterResponse{}
	_body, _err := client.RecoverVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttributeWithOptions(request *ModifyVirtualBorderRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVirtualBorderRouterAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVirtualBorderRouterAttribute(request *ModifyVirtualBorderRouterAttributeRequest) (_result *ModifyVirtualBorderRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVirtualBorderRouterAttributeResponse{}
	_body, _err := client.ModifyVirtualBorderRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPhysicalConnectionAttributeWithOptions(request *ModifyPhysicalConnectionAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyPhysicalConnectionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyPhysicalConnectionAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyPhysicalConnectionAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPhysicalConnectionAttribute(request *ModifyPhysicalConnectionAttributeRequest) (_result *ModifyPhysicalConnectionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPhysicalConnectionAttributeResponse{}
	_body, _err := client.ModifyPhysicalConnectionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnablePhysicalConnectionWithOptions(request *EnablePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *EnablePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("EnablePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnablePhysicalConnection(request *EnablePhysicalConnectionRequest) (_result *EnablePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnablePhysicalConnectionResponse{}
	_body, _err := client.EnablePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVirtualBorderRoutersForPhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersForPhysicalConnection(request *DescribeVirtualBorderRoutersForPhysicalConnectionRequest) (_result *DescribeVirtualBorderRoutersForPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersForPhysicalConnectionResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRoutersWithOptions(request *DescribeVirtualBorderRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVirtualBorderRouters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVirtualBorderRouters(request *DescribeVirtualBorderRoutersRequest) (_result *DescribeVirtualBorderRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualBorderRoutersResponse{}
	_body, _err := client.DescribeVirtualBorderRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePhysicalConnectionsWithOptions(request *DescribePhysicalConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribePhysicalConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribePhysicalConnections"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePhysicalConnections(request *DescribePhysicalConnectionsRequest) (_result *DescribePhysicalConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePhysicalConnectionsResponse{}
	_body, _err := client.DescribePhysicalConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessPointsWithOptions(request *DescribeAccessPointsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAccessPoints"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessPoints(request *DescribeAccessPointsRequest) (_result *DescribeAccessPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessPointsResponse{}
	_body, _err := client.DescribeAccessPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouterWithOptions(request *DeleteVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVirtualBorderRouter(request *DeleteVirtualBorderRouterRequest) (_result *DeleteVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVirtualBorderRouterResponse{}
	_body, _err := client.DeleteVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePhysicalConnectionWithOptions(request *DeletePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *DeletePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("DeletePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePhysicalConnection(request *DeletePhysicalConnectionRequest) (_result *DeletePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhysicalConnectionResponse{}
	_body, _err := client.DeletePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouterWithOptions(request *CreateVirtualBorderRouterRequest, runtime *util.RuntimeOptions) (_result *CreateVirtualBorderRouterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVirtualBorderRouter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVirtualBorderRouter(request *CreateVirtualBorderRouterRequest) (_result *CreateVirtualBorderRouterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVirtualBorderRouterResponse{}
	_body, _err := client.CreateVirtualBorderRouterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePhysicalConnectionWithOptions(request *CreatePhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CreatePhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CreatePhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePhysicalConnection(request *CreatePhysicalConnectionRequest) (_result *CreatePhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhysicalConnectionResponse{}
	_body, _err := client.CreatePhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelPhysicalConnectionWithOptions(request *CancelPhysicalConnectionRequest, runtime *util.RuntimeOptions) (_result *CancelPhysicalConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("CancelPhysicalConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelPhysicalConnection(request *CancelPhysicalConnectionRequest) (_result *CancelPhysicalConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelPhysicalConnectionResponse{}
	_body, _err := client.CancelPhysicalConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportImageWithOptions(request *ImportImageRequest, runtime *util.RuntimeOptions) (_result *ImportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportImageResponse{}
	_body, _err := client.DoRequest(tea.String("ImportImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportImage(request *ImportImageRequest) (_result *ImportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportImageResponse{}
	_body, _err := client.ImportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportImageWithOptions(request *ExportImageRequest, runtime *util.RuntimeOptions) (_result *ExportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExportImageResponse{}
	_body, _err := client.DoRequest(tea.String("ExportImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportImage(request *ExportImageRequest) (_result *ExportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportImageResponse{}
	_body, _err := client.ExportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTasksWithOptions(request *DescribeTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeTasks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTasks(request *DescribeTasksRequest) (_result *DescribeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DescribeTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTaskAttributeWithOptions(request *DescribeTaskAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeTaskAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeTaskAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeTaskAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTaskAttribute(request *DescribeTaskAttributeRequest) (_result *DescribeTaskAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTaskAttributeResponse{}
	_body, _err := client.DescribeTaskAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelTaskWithOptions(request *CancelTaskRequest, runtime *util.RuntimeOptions) (_result *CancelTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelTaskResponse{}
	_body, _err := client.DoRequest(tea.String("CancelTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelTask(request *CancelTaskRequest) (_result *CancelTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelTaskResponse{}
	_body, _err := client.CancelTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypeFamiliesWithOptions(request *DescribeInstanceTypeFamiliesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypeFamiliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceTypeFamiliesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceTypeFamilies"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypeFamilies(request *DescribeInstanceTypeFamiliesRequest) (_result *DescribeInstanceTypeFamiliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypeFamiliesResponse{}
	_body, _err := client.DescribeInstanceTypeFamiliesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpecWithOptions(request *ModifyRouterInterfaceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouterInterfaceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceSpec(request *ModifyRouterInterfaceSpecRequest) (_result *ModifyRouterInterfaceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceSpecResponse{}
	_body, _err := client.ModifyRouterInterfaceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttributeWithOptions(request *ModifyRouterInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyRouterInterfaceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouterInterfaceAttribute(request *ModifyRouterInterfaceAttributeRequest) (_result *ModifyRouterInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouterInterfaceAttributeResponse{}
	_body, _err := client.ModifyRouterInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouterInterfacesWithOptions(request *DescribeRouterInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouterInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouterInterfaces"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouterInterfaces(request *DescribeRouterInterfacesRequest) (_result *DescribeRouterInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouterInterfacesResponse{}
	_body, _err := client.DescribeRouterInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouterInterfaceWithOptions(request *DeleteRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouterInterface(request *DeleteRouterInterfaceRequest) (_result *DeleteRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouterInterfaceResponse{}
	_body, _err := client.DeleteRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactivateRouterInterfaceWithOptions(request *DeactivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeactivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("DeactivateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactivateRouterInterface(request *DeactivateRouterInterfaceRequest) (_result *DeactivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactivateRouterInterfaceResponse{}
	_body, _err := client.DeactivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouterInterfaceWithOptions(request *CreateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouterInterface(request *CreateRouterInterfaceRequest) (_result *CreateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouterInterfaceResponse{}
	_body, _err := client.CreateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConnectRouterInterfaceWithOptions(request *ConnectRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ConnectRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("ConnectRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConnectRouterInterface(request *ConnectRouterInterfaceRequest) (_result *ConnectRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConnectRouterInterfaceResponse{}
	_body, _err := client.ConnectRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActivateRouterInterfaceWithOptions(request *ActivateRouterInterfaceRequest, runtime *util.RuntimeOptions) (_result *ActivateRouterInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.DoRequest(tea.String("ActivateRouterInterface"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActivateRouterInterface(request *ActivateRouterInterfaceRequest) (_result *ActivateRouterInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateRouterInterfaceResponse{}
	_body, _err := client.ActivateRouterInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateHaVipWithOptions(request *UnassociateHaVipRequest, runtime *util.RuntimeOptions) (_result *UnassociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateHaVip(request *UnassociateHaVipRequest) (_result *UnassociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.UnassociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHaVipAttributeWithOptions(request *ModifyHaVipAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHaVipAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyHaVipAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHaVipAttribute(request *ModifyHaVipAttributeRequest) (_result *ModifyHaVipAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.ModifyHaVipAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHaVipsWithOptions(request *DescribeHaVipsRequest, runtime *util.RuntimeOptions) (_result *DescribeHaVipsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHaVips"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHaVips(request *DescribeHaVipsRequest) (_result *DescribeHaVipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DescribeHaVipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHaVipWithOptions(request *DeleteHaVipRequest, runtime *util.RuntimeOptions) (_result *DeleteHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHaVip(request *DeleteHaVipRequest) (_result *DeleteHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHaVipResponse{}
	_body, _err := client.DeleteHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHaVipWithOptions(request *CreateHaVipRequest, runtime *util.RuntimeOptions) (_result *CreateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("CreateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHaVip(request *CreateHaVipRequest) (_result *CreateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHaVipResponse{}
	_body, _err := client.CreateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateHaVipWithOptions(request *AssociateHaVipRequest, runtime *util.RuntimeOptions) (_result *AssociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateHaVip"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateHaVip(request *AssociateHaVipRequest) (_result *AssociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.AssociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RenewInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveTagsWithOptions(request *RemoveTagsRequest, runtime *util.RuntimeOptions) (_result *RemoveTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveTagsResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveTags(request *RemoveTagsRequest) (_result *RemoveTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTagsResponse{}
	_body, _err := client.RemoveTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceByTagsWithOptions(request *DescribeResourceByTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeResourceByTagsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeResourceByTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceByTags(request *DescribeResourceByTagsRequest) (_result *DescribeResourceByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceByTagsResponse{}
	_body, _err := client.DescribeResourceByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagsWithOptions(request *AddTagsRequest, runtime *util.RuntimeOptions) (_result *AddTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddTagsResponse{}
	_body, _err := client.DoRequest(tea.String("AddTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTags(request *AddTagsRequest) (_result *AddTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagsResponse{}
	_body, _err := client.AddTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateEipAddressWithOptions(request *UnassociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *UnassociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("UnassociateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateEipAddress(request *UnassociateEipAddressRequest) (_result *UnassociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateEipAddressResponse{}
	_body, _err := client.UnassociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *util.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("StopInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstanceResponse{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("StartInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgressWithOptions(request *RevokeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.DoRequest(tea.String("RevokeSecurityGroupEgress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgress(request *RevokeSecurityGroupEgressRequest) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.RevokeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupWithOptions(request *RevokeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("RevokeSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroup(request *RevokeSecurityGroupRequest) (_result *RevokeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.RevokeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResizeDiskWithOptions(request *ResizeDiskRequest, runtime *util.RuntimeOptions) (_result *ResizeDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResizeDiskResponse{}
	_body, _err := client.DoRequest(tea.String("ResizeDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResizeDisk(request *ResizeDiskRequest) (_result *ResizeDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeDiskResponse{}
	_body, _err := client.ResizeDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetDiskWithOptions(request *ResetDiskRequest, runtime *util.RuntimeOptions) (_result *ResetDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetDiskResponse{}
	_body, _err := client.DoRequest(tea.String("ResetDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetDisk(request *ResetDiskRequest) (_result *ResetDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDiskResponse{}
	_body, _err := client.ResetDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceSystemDiskWithOptions(request *ReplaceSystemDiskRequest, runtime *util.RuntimeOptions) (_result *ReplaceSystemDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReplaceSystemDiskResponse{}
	_body, _err := client.DoRequest(tea.String("ReplaceSystemDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceSystemDisk(request *ReplaceSystemDiskRequest) (_result *ReplaceSystemDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceSystemDiskResponse{}
	_body, _err := client.ReplaceSystemDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleasePublicIpAddressWithOptions(request *ReleasePublicIpAddressRequest, runtime *util.RuntimeOptions) (_result *ReleasePublicIpAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleasePublicIpAddressResponse{}
	_body, _err := client.DoRequest(tea.String("ReleasePublicIpAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleasePublicIpAddress(request *ReleasePublicIpAddressRequest) (_result *ReleasePublicIpAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePublicIpAddressResponse{}
	_body, _err := client.ReleasePublicIpAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEipAddressWithOptions(request *ReleaseEipAddressRequest, runtime *util.RuntimeOptions) (_result *ReleaseEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEipAddress(request *ReleaseEipAddressRequest) (_result *ReleaseEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEipAddressResponse{}
	_body, _err := client.ReleaseEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReInitDiskWithOptions(request *ReInitDiskRequest, runtime *util.RuntimeOptions) (_result *ReInitDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReInitDiskResponse{}
	_body, _err := client.DoRequest(tea.String("ReInitDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReInitDisk(request *ReInitDiskRequest) (_result *ReInitDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReInitDiskResponse{}
	_body, _err := client.ReInitDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootInstanceWithOptions(request *RebootInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebootInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RebootInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootInstance(request *RebootInstanceRequest) (_result *RebootInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstanceResponse{}
	_body, _err := client.RebootInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVSwitchAttributeWithOptions(request *ModifyVSwitchAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVSwitchAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVSwitchAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVSwitchAttribute(request *ModifyVSwitchAttributeRequest) (_result *ModifyVSwitchAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.ModifyVSwitchAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVRouterAttributeWithOptions(request *ModifyVRouterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVRouterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVRouterAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVRouterAttribute(request *ModifyVRouterAttributeRequest) (_result *ModifyVRouterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVRouterAttributeResponse{}
	_body, _err := client.ModifyVRouterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpcAttributeWithOptions(request *ModifyVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyVpcAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpcAttribute(request *ModifyVpcAttributeRequest) (_result *ModifyVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcAttributeResponse{}
	_body, _err := client.ModifyVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySnapshotAttributeWithOptions(request *ModifySnapshotAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySnapshotAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySnapshotAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySnapshotAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySnapshotAttribute(request *ModifySnapshotAttributeRequest) (_result *ModifySnapshotAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySnapshotAttributeResponse{}
	_body, _err := client.ModifySnapshotAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttributeWithOptions(request *ModifySecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityGroupAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttribute(request *ModifySecurityGroupAttributeRequest) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.ModifySecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceVpcAttributeWithOptions(request *ModifyInstanceVpcAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceVpcAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceVpcAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceVpcAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceVpcAttribute(request *ModifyInstanceVpcAttributeRequest) (_result *ModifyInstanceVpcAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceVpcAttributeResponse{}
	_body, _err := client.ModifyInstanceVpcAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceVncPasswdWithOptions(request *ModifyInstanceVncPasswdRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceVncPasswdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceVncPasswdResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceVncPasswd"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceVncPasswd(request *ModifyInstanceVncPasswdRequest) (_result *ModifyInstanceVncPasswdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceVncPasswdResponse{}
	_body, _err := client.ModifyInstanceVncPasswdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceSpecWithOptions(request *ModifyInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (_result *ModifyInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.ModifyInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceNetworkSpecWithOptions(request *ModifyInstanceNetworkSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceNetworkSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceNetworkSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceNetworkSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceNetworkSpec(request *ModifyInstanceNetworkSpecRequest) (_result *ModifyInstanceNetworkSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceNetworkSpecResponse{}
	_body, _err := client.ModifyInstanceNetworkSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAttributeWithOptions(request *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageSharePermissionWithOptions(request *ModifyImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyImageSharePermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageSharePermission(request *ModifyImageSharePermissionRequest) (_result *ModifyImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.ModifyImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageShareGroupPermissionWithOptions(request *ModifyImageShareGroupPermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageShareGroupPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyImageShareGroupPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyImageShareGroupPermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageShareGroupPermission(request *ModifyImageShareGroupPermissionRequest) (_result *ModifyImageShareGroupPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageShareGroupPermissionResponse{}
	_body, _err := client.ModifyImageShareGroupPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageAttributeWithOptions(request *ModifyImageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyImageAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageAttribute(request *ModifyImageAttributeRequest) (_result *ModifyImageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.ModifyImageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEipAddressAttributeWithOptions(request *ModifyEipAddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyEipAddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyEipAddressAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEipAddressAttribute(request *ModifyEipAddressAttributeRequest) (_result *ModifyEipAddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEipAddressAttributeResponse{}
	_body, _err := client.ModifyEipAddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskAttributeWithOptions(request *ModifyDiskAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDiskAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDiskAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskAttribute(request *ModifyDiskAttributeRequest) (_result *ModifyDiskAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskAttributeResponse{}
	_body, _err := client.ModifyDiskAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicyWithOptions(request *ModifyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyAutoSnapshotPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAutoSnapshotPolicy(request *ModifyAutoSnapshotPolicyRequest) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.ModifyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LeaveSecurityGroupWithOptions(request *LeaveSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("LeaveSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LeaveSecurityGroup(request *LeaveSecurityGroupRequest) (_result *LeaveSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.LeaveSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinSecurityGroupWithOptions(request *JoinSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *JoinSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("JoinSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinSecurityGroup(request *JoinSecurityGroupRequest) (_result *JoinSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.JoinSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachDiskWithOptions(request *DetachDiskRequest, runtime *util.RuntimeOptions) (_result *DetachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DetachDiskResponse{}
	_body, _err := client.DoRequest(tea.String("DetachDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachDisk(request *DetachDiskRequest) (_result *DetachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDiskResponse{}
	_body, _err := client.DetachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeZones"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVSwitchesWithOptions(request *DescribeVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVSwitches"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVSwitches(request *DescribeVSwitchesRequest) (_result *DescribeVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DescribeVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVRoutersWithOptions(request *DescribeVRoutersRequest, runtime *util.RuntimeOptions) (_result *DescribeVRoutersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVRouters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVRouters(request *DescribeVRoutersRequest) (_result *DescribeVRoutersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVRoutersResponse{}
	_body, _err := client.DescribeVRoutersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcsWithOptions(request *DescribeVpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeVpcs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcs(request *DescribeVpcsRequest) (_result *DescribeVpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcsResponse{}
	_body, _err := client.DescribeVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotsWithOptions(request *DescribeSnapshotsRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSnapshots"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshots(request *DescribeSnapshotsRequest) (_result *DescribeSnapshotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DescribeSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupsWithOptions(request *DescribeSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSecurityGroups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroups(request *DescribeSecurityGroupsRequest) (_result *DescribeSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DescribeSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttributeWithOptions(request *DescribeSecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSecurityGroupAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttribute(request *DescribeSecurityGroupAttributeRequest) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DescribeSecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteTablesWithOptions(request *DescribeRouteTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRouteTables"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteTables(request *DescribeRouteTablesRequest) (_result *DescribeRouteTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteTablesResponse{}
	_body, _err := client.DescribeRouteTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRegions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLimitationWithOptions(request *DescribeLimitationRequest, runtime *util.RuntimeOptions) (_result *DescribeLimitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLimitationResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeLimitation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLimitation(request *DescribeLimitationRequest) (_result *DescribeLimitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLimitationResponse{}
	_body, _err := client.DescribeLimitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrlWithOptions(request *DescribeInstanceVncUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceVncUrl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrl(request *DescribeInstanceVncUrlRequest) (_result *DescribeInstanceVncUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DescribeInstanceVncUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceVncPasswdWithOptions(request *DescribeInstanceVncPasswdRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncPasswdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceVncPasswdResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceVncPasswd"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceVncPasswd(request *DescribeInstanceVncPasswdRequest) (_result *DescribeInstanceVncPasswdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncPasswdResponse{}
	_body, _err := client.DescribeInstanceVncPasswdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypesWithOptions(request *DescribeInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceTypes"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypes(request *DescribeInstanceTypesRequest) (_result *DescribeInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DescribeInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceStatusWithOptions(request *DescribeInstanceStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceStatusResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceStatus(request *DescribeInstanceStatusRequest) (_result *DescribeInstanceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceStatusResponse{}
	_body, _err := client.DescribeInstanceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorDataWithOptions(request *DescribeInstanceMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorData(request *DescribeInstanceMonitorDataRequest) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DescribeInstanceMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAttributeWithOptions(request *DescribeInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAttribute(request *DescribeInstanceAttributeRequest) (_result *DescribeInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAttributeResponse{}
	_body, _err := client.DescribeInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSharePermissionWithOptions(request *DescribeImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeImageSharePermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSharePermission(request *DescribeImageSharePermissionRequest) (_result *DescribeImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DescribeImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImagesWithOptions(request *DescribeImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeImages"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImages(request *DescribeImagesRequest) (_result *DescribeImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DescribeImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipMonitorDataWithOptions(request *DescribeEipMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEipMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipMonitorData(request *DescribeEipMonitorDataRequest) (_result *DescribeEipMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipMonitorDataResponse{}
	_body, _err := client.DescribeEipMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipAddressesWithOptions(request *DescribeEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEipAddresses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipAddresses(request *DescribeEipAddressesRequest) (_result *DescribeEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DescribeEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDisksWithOptions(request *DescribeDisksRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDisks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDisks(request *DescribeDisksRequest) (_result *DescribeDisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DescribeDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiskMonitorDataWithOptions(request *DescribeDiskMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDiskMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDiskMonitorDataResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDiskMonitorData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiskMonitorData(request *DescribeDiskMonitorDataRequest) (_result *DescribeDiskMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiskMonitorDataResponse{}
	_body, _err := client.DescribeDiskMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClustersWithOptions(request *DescribeClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeClustersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeClusters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusters(request *DescribeClustersRequest) (_result *DescribeClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClustersResponse{}
	_body, _err := client.DescribeClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVSwitchWithOptions(request *DeleteVSwitchRequest, runtime *util.RuntimeOptions) (_result *DeleteVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVSwitch(request *DeleteVSwitchRequest) (_result *DeleteVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DeleteVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpcWithOptions(request *DeleteVpcRequest, runtime *util.RuntimeOptions) (_result *DeleteVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpc(request *DeleteVpcRequest) (_result *DeleteVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpcResponse{}
	_body, _err := client.DeleteVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnapshotWithOptions(request *DeleteSnapshotRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnapshot(request *DeleteSnapshotRequest) (_result *DeleteSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DeleteSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSecurityGroupWithOptions(request *DeleteSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSecurityGroup(request *DeleteSecurityGroupRequest) (_result *DeleteSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DeleteSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouteEntryWithOptions(request *DeleteRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouteEntry(request *DeleteRouteEntryRequest) (_result *DeleteRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteEntryResponse{}
	_body, _err := client.DeleteRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteImageWithOptions(request *DeleteImageRequest, runtime *util.RuntimeOptions) (_result *DeleteImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteImageResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteImage(request *DeleteImageRequest) (_result *DeleteImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImageResponse{}
	_body, _err := client.DeleteImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDiskWithOptions(request *DeleteDiskRequest, runtime *util.RuntimeOptions) (_result *DeleteDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDiskResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDisk(request *DeleteDiskRequest) (_result *DeleteDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDiskResponse{}
	_body, _err := client.DeleteDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVSwitchWithOptions(request *CreateVSwitchRequest, runtime *util.RuntimeOptions) (_result *CreateVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVSwitch(request *CreateVSwitchRequest) (_result *CreateVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CreateVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVpcWithOptions(request *CreateVpcRequest, runtime *util.RuntimeOptions) (_result *CreateVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateVpcResponse{}
	_body, _err := client.DoRequest(tea.String("CreateVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVpc(request *CreateVpcRequest) (_result *CreateVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVpcResponse{}
	_body, _err := client.CreateVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSnapshotWithOptions(request *CreateSnapshotRequest, runtime *util.RuntimeOptions) (_result *CreateSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSnapshot(request *CreateSnapshotRequest) (_result *CreateSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.CreateSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSecurityGroupWithOptions(request *CreateSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSecurityGroup(request *CreateSecurityGroupRequest) (_result *CreateSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.CreateSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRouteEntryWithOptions(request *CreateRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRouteEntry"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRouteEntry(request *CreateRouteEntryRequest) (_result *CreateRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouteEntryResponse{}
	_body, _err := client.CreateRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImageWithOptions(request *CreateImageRequest, runtime *util.RuntimeOptions) (_result *CreateImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateImageResponse{}
	_body, _err := client.DoRequest(tea.String("CreateImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateImage(request *CreateImageRequest) (_result *CreateImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageResponse{}
	_body, _err := client.CreateImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiskWithOptions(request *CreateDiskRequest, runtime *util.RuntimeOptions) (_result *CreateDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDiskResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDisk(request *CreateDiskRequest) (_result *CreateDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiskResponse{}
	_body, _err := client.CreateDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyImageWithOptions(request *CopyImageRequest, runtime *util.RuntimeOptions) (_result *CopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopyImageResponse{}
	_body, _err := client.DoRequest(tea.String("CopyImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyImage(request *CopyImageRequest) (_result *CopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyImageResponse{}
	_body, _err := client.CopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelCopyImageWithOptions(request *CancelCopyImageRequest, runtime *util.RuntimeOptions) (_result *CancelCopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.DoRequest(tea.String("CancelCopyImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelCopyImage(request *CancelCopyImageRequest) (_result *CancelCopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.CancelCopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgressWithOptions(request *AuthorizeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.DoRequest(tea.String("AuthorizeSecurityGroupEgress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgress(request *AuthorizeSecurityGroupEgressRequest) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.AuthorizeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupWithOptions(request *AuthorizeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.DoRequest(tea.String("AuthorizeSecurityGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroup(request *AuthorizeSecurityGroupRequest) (_result *AuthorizeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.AuthorizeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachDiskWithOptions(request *AttachDiskRequest, runtime *util.RuntimeOptions) (_result *AttachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AttachDiskResponse{}
	_body, _err := client.DoRequest(tea.String("AttachDisk"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachDisk(request *AttachDiskRequest) (_result *AttachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDiskResponse{}
	_body, _err := client.AttachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateEipAddressWithOptions(request *AssociateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AssociateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AssociateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateEipAddress(request *AssociateEipAddressRequest) (_result *AssociateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateEipAddressResponse{}
	_body, _err := client.AssociateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocatePublicIpAddressWithOptions(request *AllocatePublicIpAddressRequest, runtime *util.RuntimeOptions) (_result *AllocatePublicIpAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocatePublicIpAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AllocatePublicIpAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocatePublicIpAddress(request *AllocatePublicIpAddressRequest) (_result *AllocatePublicIpAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocatePublicIpAddressResponse{}
	_body, _err := client.AllocatePublicIpAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateEipAddressWithOptions(request *AllocateEipAddressRequest, runtime *util.RuntimeOptions) (_result *AllocateEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateEipAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-05-26"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateEipAddress(request *AllocateEipAddressRequest) (_result *AllocateEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateEipAddressResponse{}
	_body, _err := client.AllocateEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
