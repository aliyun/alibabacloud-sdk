import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-beijing = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'ecs-cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-west-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-east-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeNetworkInterfaceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniInstanceId'),
  attribute?: string(name='Attribute', description='attribute'),
}

model DescribeNetworkInterfaceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='data.instanceId'),
  status: string(name='Status', description='data.status'),
  type: string(name='Type', description='data.type'),
  vpcId: string(name='VpcId', description='data.vpcId'),
  VSwitchId: string(name='VSwitchId', description='data.vswitchId'),
  zoneId: string(name='ZoneId', description='data.zoneId'),
  privateIpAddress: string(name='PrivateIpAddress', description='data.primaryPrivateIpAddress'),
  macAddress: string(name='MacAddress', description='data.macAddress'),
  networkInterfaceName: string(name='NetworkInterfaceName', description='data.eniName'),
  description: string(name='Description', description='data.eniDescription'),
  instanceId: string(name='InstanceId', description='data.ecsInstanceId'),
  creationTime: string(name='CreationTime', description='data.uTCCreateTime'),
  resourceGroupId: string(name='ResourceGroupId', description='data.resourceGroupId'),
  serviceID: long(name='ServiceID', description='data.serviceID'),
  serviceManaged: boolean(name='ServiceManaged', description='data.serviceManaged'),
  queueNumber: integer(name='QueueNumber', description='data.queueNumber'),
  ownerId: string(name='OwnerId', description='data.aliUid'),
  privateIpSets: {
    privateIpSet: [
      {
        privateIpAddress: string(name='PrivateIpAddress', description='privateIpAddress'),
        primary: boolean(name='Primary', description='primary'),
        associatedPublicIp: {
          publicIpAddress: string(name='PublicIpAddress', description='publicIpAddress'),
          allocationId: string(name='AllocationId', description='eipInstanceId'),
        }(name='AssociatedPublicIp', description='associatedPublicIp'),
      }
    ](name='PrivateIpSet', description='PrivateIpSet'),
  }(name='PrivateIpSets', description='data.eniPrivateIpList'),
  ipv6Sets: {
    ipv6Set: [
      {
        ipv6Address: string(name='Ipv6Address', description='ipv6Address'),
      }
    ](name='Ipv6Set', description='Ipv6Set'),
  }(name='Ipv6Sets', description='data.eniIpv6List'),
  tags: {
    tag: [
      {
        tagKey: string(name='TagKey', description='key'),
        tagValue: string(name='TagValue', description='value'),
      }
    ](name='Tag', description='Tag'),
  }(name='Tags', description='data.tags'),
  associatedPublicIp: {
    publicIpAddress: string(name='PublicIpAddress', description='publicIpAddress'),
    allocationId: string(name='AllocationId', description='eipInstanceId'),
  }(name='AssociatedPublicIp', description='data.primaryAssociatedPublicIp'),
  attachment: {
    instanceId: string(name='InstanceId', description='ecsInstanceId'),
    trunkNetworkInterfaceId: string(name='TrunkNetworkInterfaceId', description='trunkEniId'),
    deviceIndex: integer(name='DeviceIndex', description='deviceIndex'),
    memberNetworkInterfaceIds: {
      memberNetworkInterfaceId: [ string ](name='MemberNetworkInterfaceId', description='MemberNetworkInterfaceId'),
    }(name='MemberNetworkInterfaceIds', description='memberEniIds'),
  }(name='Attachment', description='data.attachment'),
  securityGroupIds: {
    securityGroupId: [ string ](name='SecurityGroupId', description='SecurityGroupId'),
  }(name='SecurityGroupIds', description='data.securityGroupIds'),
}

async function describeNetworkInterfaceAttributeWithOptions(request: DescribeNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeNetworkInterfaceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeNetworkInterfaceAttribute(request: DescribeNetworkInterfaceAttributeRequest): DescribeNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfaceAttributeWithOptions(request, runtime);
}

model CopySnapshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  regionId: string(name='RegionId', description='regionId'),
  destinationRegionId: string(name='DestinationRegionId', description='destinationRegionId'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
  destinationSnapshotName: string(name='DestinationSnapshotName', description='destinationSnapshotName'),
  destinationSnapshotDescription: string(name='DestinationSnapshotDescription', description='destinationSnapshotDescription'),
  retentionDays?: integer(name='RetentionDays', description='retentionDays'),
}

model CopySnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  snapshotId: string(name='SnapshotId', description='data.snapshotId'),
}

async function copySnapshotWithOptions(request: CopySnapshotRequest, runtime: Util.RuntimeOptions): CopySnapshotResponse {
  Util.validateModel(request);
  return doRequest('CopySnapshot', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function copySnapshot(request: CopySnapshotRequest): CopySnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return copySnapshotWithOptions(request, runtime);
}

model ModifyDedicatedHostsChargeTypeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='dedicatedHostIds'),
  regionId: string(name='RegionId', description='regionId'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  dedicatedHostChargeType?: string(name='DedicatedHostChargeType', description='dedicatedHostChargeType'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  detailFee?: boolean(name='DetailFee', description='detailRefund'),
}

model ModifyDedicatedHostsChargeTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
  feeOfInstances: {
    feeOfInstance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        fee: string(name='Fee', description='refundFee'),
        currency: string(name='Currency', description='currency'),
      }
    ](name='FeeOfInstance', description='FeeOfInstance'),
  }(name='FeeOfInstances', description='data.refundFeeOfInstances'),
}

async function modifyDedicatedHostsChargeTypeWithOptions(request: ModifyDedicatedHostsChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostsChargeTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostsChargeType', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDedicatedHostsChargeType(request: ModifyDedicatedHostsChargeTypeRequest): ModifyDedicatedHostsChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostsChargeTypeWithOptions(request, runtime);
}

model ModifyInstanceMetadataOptionsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  httpEndpoint: string(name='HttpEndpoint', description='httpEndpoint'),
  httpTokens?: string(name='HttpTokens', description='httpTokens'),
  httpPutResponseHopLimit?: integer(name='HttpPutResponseHopLimit', description='httpPutResponseHopLimit'),
}

model ModifyInstanceMetadataOptionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceMetadataOptionsWithOptions(request: ModifyInstanceMetadataOptionsRequest, runtime: Util.RuntimeOptions): ModifyInstanceMetadataOptionsResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceMetadataOptions', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyInstanceMetadataOptions(request: ModifyInstanceMetadataOptionsRequest): ModifyInstanceMetadataOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMetadataOptionsWithOptions(request, runtime);
}

model DescribeImageFromFamilyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  imageFamily: string(name='ImageFamily', description='imageFamily'),
}

model DescribeImageFromFamilyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  image: {
    progress: string(name='Progress', description='progress'),
    imageId: string(name='ImageId', description='resourceId'),
    imageName: string(name='ImageName', description='name'),
    imageFamily: string(name='ImageFamily', description='imageFamily'),
    imageVersion: string(name='ImageVersion', description='version'),
    description: string(name='Description', description='remark'),
    size: integer(name='Size', description='imageSize'),
    imageOwnerAlias: string(name='ImageOwnerAlias', description='imageCategory'),
    isSupportIoOptimized: boolean(name='IsSupportIoOptimized', description='isSupportIoOptimized'),
    isSupportCloudinit: boolean(name='IsSupportCloudinit', description='isSupportCloudinit'),
    OSName: string(name='OSName', description='osName'),
    architecture: string(name='Architecture', description='osBit'),
    status: string(name='Status', description='status'),
    productCode: string(name='ProductCode', description='productCode'),
    isSubscribed: boolean(name='IsSubscribed', description='subscribed'),
    creationTime: string(name='CreationTime', description='gmtCreated'),
    isSelfShared: string(name='IsSelfShared', description='isSelfShared'),
    OSType: string(name='OSType', description='osType'),
    platform: string(name='Platform', description='platform'),
    usage: string(name='Usage', description='usage'),
    isCopied: boolean(name='IsCopied', description='isCopied'),
    diskDeviceMappings: {
      diskDeviceMapping: [
        {
          snapshotId: string(name='SnapshotId', description='snapshotId'),
          size: string(name='Size', description='size'),
          device: string(name='Device', description='device'),
          type: string(name='Type', description='diskType'),
          format: string(name='Format', description='format'),
          importOSSBucket: string(name='ImportOSSBucket', description='importOSSBucket'),
          importOSSObject: string(name='ImportOSSObject', description='importOSSObject'),
        }
      ](name='DiskDeviceMapping', description='DiskDeviceMapping'),
    }(name='DiskDeviceMappings', description='diskDeviceMappings'),
    tags: {
      tag: [
        {
          tagKey: string(name='TagKey', description='tagKey'),
          tagValue: string(name='TagValue', description='tagValue'),
        }
      ](name='Tag', description='Tag'),
    }(name='Tags', description='tags'),
  }(name='Image', description='data'),
}

async function describeImageFromFamilyWithOptions(request: DescribeImageFromFamilyRequest, runtime: Util.RuntimeOptions): DescribeImageFromFamilyResponse {
  Util.validateModel(request);
  return doRequest('DescribeImageFromFamily', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeImageFromFamily(request: DescribeImageFromFamilyRequest): DescribeImageFromFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFromFamilyWithOptions(request, runtime);
}

model StopInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  forceStop?: boolean(name='ForceStop', description='kill'),
  stoppedMode?: string(name='StoppedMode', description='stoppedMode'),
  batchOptimization?: string(name='BatchOptimization', description='batchOptimization'),
}

model StopInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceResponses: {
    instanceResponse: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        previousStatus: string(name='PreviousStatus', description='previousStatus'),
        currentStatus: string(name='CurrentStatus', description='currentStatus'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='InstanceResponse', description='InstanceResponse'),
  }(name='InstanceResponses', description='data.operateResponseModels'),
}

async function stopInstancesWithOptions(request: StopInstancesRequest, runtime: Util.RuntimeOptions): StopInstancesResponse {
  Util.validateModel(request);
  return doRequest('StopInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstancesWithOptions(request, runtime);
}

model StartInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  batchOptimization?: string(name='BatchOptimization', description='batchOptimization'),
}

model StartInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceResponses: {
    instanceResponse: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        previousStatus: string(name='PreviousStatus', description='previousStatus'),
        currentStatus: string(name='CurrentStatus', description='currentStatus'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='InstanceResponse', description='InstanceResponse'),
  }(name='InstanceResponses', description='data.operateResponseModels'),
}

async function startInstancesWithOptions(request: StartInstancesRequest, runtime: Util.RuntimeOptions): StartInstancesResponse {
  Util.validateModel(request);
  return doRequest('StartInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstancesWithOptions(request, runtime);
}

model RebootInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  forceReboot?: boolean(name='ForceReboot', description='kill'),
  batchOptimization?: string(name='BatchOptimization', description='batchOptimization'),
}

model RebootInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceResponses: {
    instanceResponse: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        previousStatus: string(name='PreviousStatus', description='previousStatus'),
        currentStatus: string(name='CurrentStatus', description='currentStatus'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='InstanceResponse', description='InstanceResponse'),
  }(name='InstanceResponses', description='data.operateResponseModels'),
}

async function rebootInstancesWithOptions(request: RebootInstancesRequest, runtime: Util.RuntimeOptions): RebootInstancesResponse {
  Util.validateModel(request);
  return doRequest('RebootInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstancesWithOptions(request, runtime);
}

model RedeployDedicatedHostRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
}

model RedeployDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function redeployDedicatedHostWithOptions(request: RedeployDedicatedHostRequest, runtime: Util.RuntimeOptions): RedeployDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('RedeployDedicatedHost', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function redeployDedicatedHost(request: RedeployDedicatedHostRequest): RedeployDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployDedicatedHostWithOptions(request, runtime);
}

model ModifyInstanceMaintenanceAttributesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: [ string ](name='InstanceId', description='instanceIds'),
  maintenanceWindow?: [
    {
      startTime: string(name='StartTime', description='startTime'),
      endTime: string(name='EndTime', description='endTime'),
    }
  ](name='MaintenanceWindow', description='maintenanceWindows'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='actionOnMaintenance'),
}

model ModifyInstanceMaintenanceAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceMaintenanceAttributesWithOptions(request: ModifyInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceMaintenanceAttributes', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyInstanceMaintenanceAttributes(request: ModifyInstanceMaintenanceAttributesRequest): ModifyInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model DescribeInstanceMaintenanceAttributesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: [ string ](name='InstanceId', description='instanceIds'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeInstanceMaintenanceAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  maintenanceAttributes: {
    maintenanceAttribute: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        maintenanceWindows: {
          maintenanceWindow: [
            {
              startTime: string(name='StartTime', description='startTime'),
              endTime: string(name='EndTime', description='endTime'),
            }
          ](name='MaintenanceWindow', description='MaintenanceWindow'),
        }(name='MaintenanceWindows', description='maintenanceWindows'),
        actionOnMaintenance: {
          value: string(name='Value', description='value'),
          defaultValue: string(name='DefaultValue', description='defaultValue'),
          supportedValues: {
            supportedValue: [ string ](name='SupportedValue', description='SupportedValue'),
          }(name='SupportedValues', description='supportedValues'),
        }(name='ActionOnMaintenance', description='actionOnMaintenance'),
      }
    ](name='MaintenanceAttribute', description='MaintenanceAttribute'),
  }(name='MaintenanceAttributes', description='data.data'),
}

async function describeInstanceMaintenanceAttributesWithOptions(request: DescribeInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceMaintenanceAttributes', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInstanceMaintenanceAttributes(request: DescribeInstanceMaintenanceAttributesRequest): DescribeInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model ModifyDemandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='zoneNo'),
  demandId: string(name='DemandId', description='demandId'),
  demandName?: string(name='DemandName', description='demandName'),
  demandDescription?: string(name='DemandDescription', description='demandDescription'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  amount?: integer(name='Amount', description='totalAmount'),
  instanceChargeType?: string(name='InstanceChargeType', description='payType'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  startTime?: string(name='StartTime', description='startTimeStr'),
  endTime?: string(name='EndTime', description='endTimeStr'),
}

model ModifyDemandResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDemandWithOptions(request: ModifyDemandRequest, runtime: Util.RuntimeOptions): ModifyDemandResponse {
  Util.validateModel(request);
  return doRequest('ModifyDemand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyDemand(request: ModifyDemandRequest): ModifyDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDemandWithOptions(request, runtime);
}

model DeleteDemandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  demandId: string(name='DemandId', description='demandId'),
  reason?: string(name='Reason', description='reason'),
}

model DeleteDemandResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDemandWithOptions(request: DeleteDemandRequest, runtime: Util.RuntimeOptions): DeleteDemandResponse {
  Util.validateModel(request);
  return doRequest('DeleteDemand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteDemand(request: DeleteDemandRequest): DeleteDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDemandWithOptions(request, runtime);
}

model CreateDemandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId: string(name='ZoneId', description='zoneNo'),
  demandName?: string(name='DemandName', description='demandName'),
  demandDescription?: string(name='DemandDescription', description='demandDescription'),
  instanceType: string(name='InstanceType', description='instanceType'),
  amount: integer(name='Amount', description='totalAmount'),
  instanceChargeType?: string(name='InstanceChargeType', description='payType'),
  period: integer(name='Period', description='period'),
  periodUnit: string(name='PeriodUnit', description='periodUnit'),
  startTime: string(name='StartTime', description='startTimeStr'),
  endTime: string(name='EndTime', description='endTimeStr'),
}

model CreateDemandResponse = {
  requestId: string(name='RequestId', description='requestId'),
  demandId: string(name='DemandId', description='data.demandId'),
}

async function createDemandWithOptions(request: CreateDemandRequest, runtime: Util.RuntimeOptions): CreateDemandResponse {
  Util.validateModel(request);
  return doRequest('CreateDemand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createDemand(request: CreateDemandRequest): CreateDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDemandWithOptions(request, runtime);
}

model PurchaseStorageCapacityUnitRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  name?: string(name='Name', description='name'),
  capacity: integer(name='Capacity', description='capacity'),
  description?: string(name='Description', description='description'),
  startTime?: string(name='StartTime', description='startUtcTime'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  fromApp?: string(name='FromApp', description='fromApp'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  amount?: integer(name='Amount', description='quantity'),
}

model PurchaseStorageCapacityUnitResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
  storageCapacityUnitIds: {
    storageCapacityUnitId: [ string ](name='StorageCapacityUnitId', description='StorageCapacityUnitId'),
  }(name='StorageCapacityUnitIds', description='data.reservedDiskIds'),
}

async function purchaseStorageCapacityUnitWithOptions(request: PurchaseStorageCapacityUnitRequest, runtime: Util.RuntimeOptions): PurchaseStorageCapacityUnitResponse {
  Util.validateModel(request);
  return doRequest('PurchaseStorageCapacityUnit', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function purchaseStorageCapacityUnit(request: PurchaseStorageCapacityUnitRequest): PurchaseStorageCapacityUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseStorageCapacityUnitWithOptions(request, runtime);
}

model ModifyStorageCapacityUnitAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  storageCapacityUnitId: string(name='StorageCapacityUnitId', description='instanceId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
}

model ModifyStorageCapacityUnitAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyStorageCapacityUnitAttributeWithOptions(request: ModifyStorageCapacityUnitAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageCapacityUnitAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyStorageCapacityUnitAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyStorageCapacityUnitAttribute(request: ModifyStorageCapacityUnitAttributeRequest): ModifyStorageCapacityUnitAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageCapacityUnitAttributeWithOptions(request, runtime);
}

model DescribeStorageCapacityUnitsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  name?: string(name='Name', description='name'),
  capacity?: integer(name='Capacity', description='capacity'),
  storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId', description='instanceIds'),
  status?: [ string ](name='Status', description='statusStrList'),
}

model DescribeStorageCapacityUnitsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  storageCapacityUnits: {
    storageCapacityUnit: [
      {
        regionId: string(name='RegionId', description='regionNo'),
        storageCapacityUnitId: string(name='StorageCapacityUnitId', description='resourceId'),
        name: string(name='Name', description='name'),
        capacity: integer(name='Capacity', description='capacity'),
        status: string(name='Status', description='status'),
        creationTime: string(name='CreationTime', description='createUtcTime'),
        expiredTime: string(name='ExpiredTime', description='expireUtcTime'),
        startTime: string(name='StartTime', description='startUtcTime'),
        description: string(name='Description', description='description'),
      }
    ](name='StorageCapacityUnit', description='StorageCapacityUnit'),
  }(name='StorageCapacityUnits', description='data.data'),
}

async function describeStorageCapacityUnitsWithOptions(request: DescribeStorageCapacityUnitsRequest, runtime: Util.RuntimeOptions): DescribeStorageCapacityUnitsResponse {
  Util.validateModel(request);
  return doRequest('DescribeStorageCapacityUnits', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeStorageCapacityUnits(request: DescribeStorageCapacityUnitsRequest): DescribeStorageCapacityUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageCapacityUnitsWithOptions(request, runtime);
}

model RunCommandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  type: string(name='Type', description='type'),
  commandContent: string(name='CommandContent', description='commandContent'),
  workingDir?: string(name='WorkingDir', description='workingDir'),
  timeout?: long(name='Timeout', description='timeout'),
  enableParameter?: boolean(name='EnableParameter', description='enableParameter'),
  timed?: boolean(name='Timed', description='timed'),
  frequency?: string(name='Frequency', description='frequency'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  parameters?: map[string]any(name='Parameters', description='parameters'),
  keepCommand?: boolean(name='KeepCommand', description='keepCommand'),
  contentEncoding?: string(name='ContentEncoding', description='contentEncoding'),
}

model RunCommandResponse = {
  requestId: string(name='RequestId', description='requestId'),
  commandId: string(name='CommandId', description='data.commandId'),
  invokeId: string(name='InvokeId', description='data.taskId'),
}

async function runCommandWithOptions(request: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(request);
  return doRequest('RunCommand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model DeleteInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  force?: boolean(name='Force', description='force'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='terminateSubscription'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionId'),
}

model DeleteInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteInstancesWithOptions(request: DeleteInstancesRequest, runtime: Util.RuntimeOptions): DeleteInstancesResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstancesWithOptions(request, runtime);
}

model ModifyStorageSetAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  storageSetId: string(name='StorageSetId', description='storageSetId'),
  storageSetName?: string(name='StorageSetName', description='storageSetName'),
  description?: string(name='Description', description='description'),
}

model ModifyStorageSetAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyStorageSetAttributeWithOptions(request: ModifyStorageSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageSetAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyStorageSetAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyStorageSetAttribute(request: ModifyStorageSetAttributeRequest): ModifyStorageSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageSetAttributeWithOptions(request, runtime);
}

model DescribeStorageSetsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  storageSetIds?: string(name='StorageSetIds', description='storageSetIds'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  storageSetName?: string(name='StorageSetName', description='storageSetName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeStorageSetsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  storageSets: {
    storageSet: [
      {
        storageSetId: string(name='StorageSetId', description='storageSetId'),
        creationTime: string(name='CreationTime', description='createTime'),
        storageSetName: string(name='StorageSetName', description='storageSetName'),
        description: string(name='Description', description='description'),
        storageSetPartitionNumber: integer(name='StorageSetPartitionNumber', description='maxPartition'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
      }
    ](name='StorageSet', description='StorageSet'),
  }(name='StorageSets', description='data.data'),
}

async function describeStorageSetsWithOptions(request: DescribeStorageSetsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetsResponse {
  Util.validateModel(request);
  return doRequest('DescribeStorageSets', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeStorageSets(request: DescribeStorageSetsRequest): DescribeStorageSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetsWithOptions(request, runtime);
}

model DescribeStorageSetDetailsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  storageSetId: string(name='StorageSetId', description='storageSetId'),
  storageSetPartitionNumber?: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
  diskIds?: string(name='DiskIds', description='diskIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeStorageSetDetailsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  disks: {
    disk: [
      {
        diskId: string(name='DiskId', description='diskId'),
        diskName: string(name='DiskName', description='diskName'),
        category: string(name='Category', description='category'),
        storageSetId: string(name='StorageSetId', description='storageSetId'),
        creationTime: string(name='CreationTime', description='createTime'),
        storageSetPartitionNumber: integer(name='StorageSetPartitionNumber', description='maxPartition'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
      }
    ](name='Disk', description='Disk'),
  }(name='Disks', description='data.data'),
}

async function describeStorageSetDetailsWithOptions(request: DescribeStorageSetDetailsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetDetailsResponse {
  Util.validateModel(request);
  return doRequest('DescribeStorageSetDetails', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeStorageSetDetails(request: DescribeStorageSetDetailsRequest): DescribeStorageSetDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetDetailsWithOptions(request, runtime);
}

model DeleteStorageSetRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  storageSetId: string(name='StorageSetId', description='storageSetId'),
}

model DeleteStorageSetResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteStorageSetWithOptions(request: DeleteStorageSetRequest, runtime: Util.RuntimeOptions): DeleteStorageSetResponse {
  Util.validateModel(request);
  return doRequest('DeleteStorageSet', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteStorageSet(request: DeleteStorageSetRequest): DeleteStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageSetWithOptions(request, runtime);
}

model CreateStorageSetRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId: string(name='ZoneId', description='zoneId'),
  storageSetName?: string(name='StorageSetName', description='storageSetName'),
  description?: string(name='Description', description='description'),
  maxPartitionNumber?: integer(name='MaxPartitionNumber', description='maxPartition'),
}

model CreateStorageSetResponse = {
  requestId: string(name='RequestId', description='requestId'),
  storageSetId: string(name='StorageSetId', description='data'),
}

async function createStorageSetWithOptions(request: CreateStorageSetRequest, runtime: Util.RuntimeOptions): CreateStorageSetResponse {
  Util.validateModel(request);
  return doRequest('CreateStorageSet', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createStorageSet(request: CreateStorageSetRequest): CreateStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageSetWithOptions(request, runtime);
}

model ModifyDiskSpecRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  diskId: string(name='DiskId', description='instanceId'),
  performanceLevel?: string(name='PerformanceLevel', description='performanceLevel'),
  diskCategory?: string(name='DiskCategory', description='diskCategory'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model ModifyDiskSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyDiskSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyAutoProvisioningGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='fleetId'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='excessCapacityTerminationPolicyStr'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='defaultTargetCapacityTypeStr'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='terminateInstancesWithExpiration'),
  maxSpotPrice?: float(name='MaxSpotPrice', description='maxSpotPrice'),
  totalTargetCapacity?: string(name='TotalTargetCapacity', description='totalTargetCapacity'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', description='onDemandTargetCapacity'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', description='spotTargetCapacity'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='autoProvisioningGroupName'),
}

model ModifyAutoProvisioningGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAutoProvisioningGroupWithOptions(request: ModifyAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): ModifyAutoProvisioningGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyAutoProvisioningGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyAutoProvisioningGroup(request: ModifyAutoProvisioningGroupRequest): ModifyAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoProvisioningGroupWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='fleetName'),
  autoProvisioningGroupId?: [ string ](name='AutoProvisioningGroupId', description='fleetIds'),
  autoProvisioningGroupStatus?: [ string ](name='AutoProvisioningGroupStatus', description='fleetStatusStrList'),
}

model DescribeAutoProvisioningGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  autoProvisioningGroups: {
    autoProvisioningGroup: [
      {
        autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='fleetId'),
        autoProvisioningGroupName: string(name='AutoProvisioningGroupName', description='fleetName'),
        autoProvisioningGroupType: string(name='AutoProvisioningGroupType', description='fleetType'),
        status: string(name='Status', description='status'),
        state: string(name='State', description='state'),
        regionId: string(name='RegionId', description='regionNo'),
        validFrom: string(name='ValidFrom', description='utcValidFrom'),
        validUntil: string(name='ValidUntil', description='utcValidUntil'),
        excessCapacityTerminationPolicy: string(name='ExcessCapacityTerminationPolicy', description='excessCapacityTerminationPolicy'),
        maxSpotPrice: float(name='MaxSpotPrice', description='maxSpotPrice'),
        launchTemplateId: string(name='LaunchTemplateId', description='launchTemplateId'),
        launchTemplateVersion: string(name='LaunchTemplateVersion', description='launchTemplateVersion'),
        terminateInstances: boolean(name='TerminateInstances', description='terminateInstances'),
        terminateInstancesWithExpiration: boolean(name='TerminateInstancesWithExpiration', description='terminateInstancesWithExpiration'),
        creationTime: string(name='CreationTime', description='creationTime'),
        launchTemplateConfigs: {
          launchTemplateConfig: [
            {
              instanceType: string(name='InstanceType', description='instanceType'),
              maxPrice: float(name='MaxPrice', description='maxPrice'),
              VSwitchId: string(name='VSwitchId', description='vSWitchId'),
              weightedCapacity: float(name='WeightedCapacity', description='weightedCapacity'),
              priority: float(name='Priority', description='priority'),
            }
          ](name='LaunchTemplateConfig', description='LaunchTemplateConfig'),
        }(name='LaunchTemplateConfigs', description='launchTemplateConfigs'),
        spotOptions: {
          allocationStrategy: string(name='AllocationStrategy', description='allocationStrategy'),
          instanceInterruptionBehavior: string(name='InstanceInterruptionBehavior', description='instanceInterruptionBehavior'),
          instancePoolsToUseCount: integer(name='InstancePoolsToUseCount', description='instancePoolsToUseCount'),
        }(name='SpotOptions', description='spotOptions'),
        payAsYouGoOptions: {
          allocationStrategy: string(name='AllocationStrategy', description='allocationStrategy'),
        }(name='PayAsYouGoOptions', description='onDemandOptions'),
        targetCapacitySpecification: {
          totalTargetCapacity: float(name='TotalTargetCapacity', description='totalTargetCapacity'),
          payAsYouGoTargetCapacity: float(name='PayAsYouGoTargetCapacity', description='onDemandTargetCapacity'),
          spotTargetCapacity: float(name='SpotTargetCapacity', description='spotTargetCapacity'),
          defaultTargetCapacityType: string(name='DefaultTargetCapacityType', description='defaultTargetCapacityType'),
        }(name='TargetCapacitySpecification', description='targetCapacitySpecification'),
      }
    ](name='AutoProvisioningGroup', description='AutoProvisioningGroup'),
  }(name='AutoProvisioningGroups', description='data.data'),
}

async function describeAutoProvisioningGroupsWithOptions(request: DescribeAutoProvisioningGroupsRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoProvisioningGroups', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeAutoProvisioningGroups(request: DescribeAutoProvisioningGroupsRequest): DescribeAutoProvisioningGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupsWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='fleetId'),
}

model DescribeAutoProvisioningGroupInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  instances: {
    instance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        status: string(name='Status', description='status'),
        regionId: string(name='RegionId', description='regionNo'),
        zoneId: string(name='ZoneId', description='izNo'),
        CPU: integer(name='CPU', description='cores'),
        memory: integer(name='Memory', description='memory'),
        instanceType: string(name='InstanceType', description='instanceType'),
        isSpot: boolean(name='IsSpot', description='isSpot'),
        ioOptimized: boolean(name='IoOptimized', description='ioOptimized'),
        networkType: string(name='NetworkType', description='networkType'),
        osType: string(name='OsType', description='osType'),
        creationTime: string(name='CreationTime', description='gmtCreated'),
      }
    ](name='Instance', description='Instance'),
  }(name='Instances', description='data.data'),
}

async function describeAutoProvisioningGroupInstancesWithOptions(request: DescribeAutoProvisioningGroupInstancesRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoProvisioningGroupInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeAutoProvisioningGroupInstances(request: DescribeAutoProvisioningGroupInstancesRequest): DescribeAutoProvisioningGroupInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupInstancesWithOptions(request, runtime);
}

model DeleteAutoProvisioningGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='fleetId'),
  terminateInstances: boolean(name='TerminateInstances', description='terminateInstances'),
}

model DeleteAutoProvisioningGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAutoProvisioningGroupWithOptions(request: DeleteAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): DeleteAutoProvisioningGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteAutoProvisioningGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteAutoProvisioningGroup(request: DeleteAutoProvisioningGroupRequest): DeleteAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoProvisioningGroupWithOptions(request, runtime);
}

model CreateAutoProvisioningGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='fleetName'),
  autoProvisioningGroupType?: string(name='AutoProvisioningGroupType', description='typeStr'),
  spotAllocationStrategy?: string(name='SpotAllocationStrategy', description='spotAllocationStrategy'),
  spotInstanceInterruptionBehavior?: string(name='SpotInstanceInterruptionBehavior', description='spotInstanceInterruptionBehavior'),
  spotInstancePoolsToUseCount?: integer(name='SpotInstancePoolsToUseCount', description='spotInstancePoolsToUseCount'),
  payAsYouGoAllocationStrategy?: string(name='PayAsYouGoAllocationStrategy', description='onDemandAllocationStrategy'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='excessCapacityTerminationPolicyStr'),
  validFrom?: string(name='ValidFrom', description='validFromStr'),
  validUntil?: string(name='ValidUntil', description='validUntilStr'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='terminateInstancesWithExpiration'),
  terminateInstances?: boolean(name='TerminateInstances', description='terminateInstances'),
  maxSpotPrice?: float(name='MaxSpotPrice', description='maxSpotPrice'),
  totalTargetCapacity: string(name='TotalTargetCapacity', description='totalTargetCapacity'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', description='onDemandTargetCapacity'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', description='spotTargetCapacity'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='defaultTargetCapacityTypeStr'),
  launchTemplateId: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', description='launchTemplateVersion'),
  launchTemplateConfig?: [
    {
      instanceType: string(name='InstanceType', description='instanceType'),
      maxPrice: double(name='MaxPrice', description='maxPrice'),
      VSwitchId: string(name='VSwitchId', description='vSWitchId'),
      weightedCapacity: double(name='WeightedCapacity', description='weightedCapacity'),
      priority: integer(name='Priority', description='priority'),
    }
  ](name='LaunchTemplateConfig', description='launchTemplateConfigs'),
  description?: string(name='Description', description='description'),
}

model CreateAutoProvisioningGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='data'),
}

async function createAutoProvisioningGroupWithOptions(request: CreateAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): CreateAutoProvisioningGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateAutoProvisioningGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createAutoProvisioningGroup(request: CreateAutoProvisioningGroupRequest): CreateAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoProvisioningGroupWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupHistoryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  autoProvisioningGroupId: string(name='AutoProvisioningGroupId', description='fleetId'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
}

model DescribeAutoProvisioningGroupHistoryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  autoProvisioningGroupHistories: {
    autoProvisioningGroupHistory: [
      {
        taskId: string(name='TaskId', description='taskId'),
        status: string(name='Status', description='status'),
        lastEventTime: string(name='LastEventTime', description='lastEventTime'),
        startTime: string(name='StartTime', description='startTime'),
        activityDetails: {
          activityDetail: [
            {
              detail: string(name='Detail', description='detail'),
              status: string(name='Status', description='status'),
            }
          ](name='ActivityDetail', description='ActivityDetail'),
        }(name='ActivityDetails', description='activityDetails'),
      }
    ](name='AutoProvisioningGroupHistory', description='AutoProvisioningGroupHistory'),
  }(name='AutoProvisioningGroupHistories', description='data.data'),
}

async function describeAutoProvisioningGroupHistoryWithOptions(request: DescribeAutoProvisioningGroupHistoryRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupHistoryResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoProvisioningGroupHistory', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeAutoProvisioningGroupHistory(request: DescribeAutoProvisioningGroupHistoryRequest): DescribeAutoProvisioningGroupHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupHistoryWithOptions(request, runtime);
}

model ReportInstancesStatusRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  diskId?: [ string ](name='DiskId', description='diskIds'),
  device?: [ string ](name='Device', description='devices'),
  reason: string(name='Reason', description='reason'),
  description: string(name='Description', description='description'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
}

model ReportInstancesStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function reportInstancesStatusWithOptions(request: ReportInstancesStatusRequest, runtime: Util.RuntimeOptions): ReportInstancesStatusResponse {
  Util.validateModel(request);
  return doRequest('ReportInstancesStatus', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function reportInstancesStatus(request: ReportInstancesStatusRequest): ReportInstancesStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportInstancesStatusWithOptions(request, runtime);
}

model ModifyReservedInstanceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  reservedInstanceId: string(name='ReservedInstanceId', description='instanceId'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='riName'),
  description?: string(name='Description', description='description'),
}

model ModifyReservedInstanceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  httpStatusCode: integer(name='HttpStatusCode', description='httpStatusCode'),
}

async function modifyReservedInstanceAttributeWithOptions(request: ModifyReservedInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyReservedInstanceAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyReservedInstanceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyReservedInstanceAttribute(request: ModifyReservedInstanceAttributeRequest): ModifyReservedInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstanceAttributeWithOptions(request, runtime);
}

model PurchaseReservedInstancesOfferingRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='riName'),
  instanceType: string(name='InstanceType', description='instanceType'),
  scope?: string(name='Scope', description='scope'),
  instanceAmount?: integer(name='InstanceAmount', description='instanceAmount'),
  offeringType?: string(name='OfferingType', description='offeringType'),
  description?: string(name='Description', description='description'),
  platform?: string(name='Platform', description='platform'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model PurchaseReservedInstancesOfferingResponse = {
  requestId: string(name='RequestId', description='requestId'),
  reservedInstanceIdSets: {
    reservedInstanceId: [ string ](name='ReservedInstanceId', description='ReservedInstanceId'),
  }(name='ReservedInstanceIdSets', description='data.reservedInstanceIdSet'),
}

async function purchaseReservedInstancesOfferingWithOptions(request: PurchaseReservedInstancesOfferingRequest, runtime: Util.RuntimeOptions): PurchaseReservedInstancesOfferingResponse {
  Util.validateModel(request);
  return doRequest('PurchaseReservedInstancesOffering', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function purchaseReservedInstancesOffering(request: PurchaseReservedInstancesOfferingRequest): PurchaseReservedInstancesOfferingResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseReservedInstancesOfferingWithOptions(request, runtime);
}

model ModifyReservedInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  reservedInstanceId: [ string ](name='ReservedInstanceId', description='reservedInstanceIds'),
  configuration?: [
    {
      zoneId: string(name='ZoneId', description='izNo'),
      reservedInstanceName: string(name='ReservedInstanceName', description='riName'),
      instanceType: string(name='InstanceType', description='instanceType'),
      scope: string(name='Scope', description='scope'),
      instanceAmount: integer(name='InstanceAmount', description='instanceAmount'),
    }
  ](name='Configuration', description='createParams'),
}

model ModifyReservedInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  reservedInstanceIdSets: {
    reservedInstanceId: [ string ](name='ReservedInstanceId', description='ReservedInstanceId'),
  }(name='ReservedInstanceIdSets', description='data.reservedInstanceIdSet'),
}

async function modifyReservedInstancesWithOptions(request: ModifyReservedInstancesRequest, runtime: Util.RuntimeOptions): ModifyReservedInstancesResponse {
  Util.validateModel(request);
  return doRequest('ModifyReservedInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyReservedInstances(request: ModifyReservedInstancesRequest): ModifyReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstancesWithOptions(request, runtime);
}

model DescribeReservedInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  zoneId?: string(name='ZoneId', description='izNo'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='instanceIds'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='riName'),
  status?: [ string ](name='Status', description='statusStrList'),
  lockReason?: string(name='LockReason', description='lockReason'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
  scope?: string(name='Scope', description='scope'),
  offeringType?: string(name='OfferingType', description='offeringType'),
  allocationType?: string(name='AllocationType', description='allocationType'),
}

model DescribeReservedInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  reservedInstances: {
    reservedInstance: [
      {
        reservedInstanceId: string(name='ReservedInstanceId', description='instanceId'),
        regionId: string(name='RegionId', description='regionNo'),
        zoneId: string(name='ZoneId', description='izNo'),
        reservedInstanceName: string(name='ReservedInstanceName', description='riName'),
        description: string(name='Description', description='description'),
        instanceType: string(name='InstanceType', description='instanceType'),
        scope: string(name='Scope', description='scope'),
        offeringType: string(name='OfferingType', description='offeringType'),
        platform: string(name='Platform', description='platform'),
        instanceAmount: integer(name='InstanceAmount', description='instanceAmount'),
        status: string(name='Status', description='status'),
        creationTime: string(name='CreationTime', description='createUtcTime'),
        expiredTime: string(name='ExpiredTime', description='expireUtcTime'),
        startTime: string(name='StartTime', description='startUtcTime'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        allocationStatus: string(name='AllocationStatus', description='allocationStatus'),
        operationLocks: {
          operationLock: [
            {
              lockReason: string(name='LockReason', description='lockReason'),
            }
          ](name='OperationLock', description='OperationLock'),
        }(name='OperationLocks', description='operationLockTypes'),
      }
    ](name='ReservedInstance', description='ReservedInstance'),
  }(name='ReservedInstances', description='data.data'),
}

async function describeReservedInstancesWithOptions(request: DescribeReservedInstancesRequest, runtime: Util.RuntimeOptions): DescribeReservedInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeReservedInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeReservedInstances(request: DescribeReservedInstancesRequest): DescribeReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstancesWithOptions(request, runtime);
}

model DescribeDemandsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  zoneId?: string(name='ZoneId', description='zoneNo'),
  demandId?: string(name='DemandId', description='demandId'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  instanceChargeType?: string(name='InstanceChargeType', description='instancePayType'),
  demandType?: string(name='DemandType', description='demandType'),
  demandStatus?: [ string ](name='DemandStatus', description='demandStatusLists'),
}

model DescribeDemandsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  regionId: string(name='RegionId', description='data.regionNo'),
  demands: {
    demand: [
      {
        zoneId: string(name='ZoneId', description='zoneId'),
        demandTime: string(name='DemandTime', description='demandTime'),
        instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
        demandId: string(name='DemandId', description='demandId'),
        demandName: string(name='DemandName', description='demandName'),
        comment: string(name='Comment', description='comment'),
        demandDescription: string(name='DemandDescription', description='demandDescription'),
        instanceType: string(name='InstanceType', description='instanceType'),
        instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
        period: integer(name='Period', description='payDuration'),
        periodUnit: string(name='PeriodUnit', description='payUnit'),
        startTime: string(name='StartTime', description='startTime'),
        endTime: string(name='EndTime', description='endTime'),
        demandStatus: string(name='DemandStatus', description='demandStatus'),
        totalAmount: integer(name='TotalAmount', description='totalAmount'),
        availableAmount: integer(name='AvailableAmount', description='availableAmount'),
        usedAmount: integer(name='UsedAmount', description='usedAmount'),
        deliveringAmount: integer(name='DeliveringAmount', description='deliveringAmount'),
        supplyInfos: {
          supplyInfo: [
            {
              amount: integer(name='Amount', description='amount'),
              supplyStatus: string(name='SupplyStatus', description='supplyStatus'),
              supplyStartTime: string(name='SupplyStartTime', description='supplyStartTime'),
              supplyEndTime: string(name='SupplyEndTime', description='supplyEndTime'),
            }
          ](name='SupplyInfo', description='SupplyInfo'),
        }(name='SupplyInfos', description='demandSupplyList'),
      }
    ](name='Demand', description='Demand'),
  }(name='Demands', description='data.data'),
}

async function describeDemandsWithOptions(request: DescribeDemandsRequest, runtime: Util.RuntimeOptions): DescribeDemandsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDemands', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeDemands(request: DescribeDemandsRequest): DescribeDemandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDemandsWithOptions(request, runtime);
}

model ImportSnapshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  snapshotName: string(name='SnapshotName', description='snapshotName'),
  regionId: string(name='RegionId', description='regionId'),
  ossBucket: string(name='OssBucket', description='ossBucket'),
  ossObject: string(name='OssObject', description='ossObject'),
  roleName?: string(name='RoleName', description='roleName'),
}

model ImportSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
  snapshotId: string(name='SnapshotId', description='data.data'),
}

async function importSnapshotWithOptions(request: ImportSnapshotRequest, runtime: Util.RuntimeOptions): ImportSnapshotResponse {
  Util.validateModel(request);
  return doRequest('ImportSnapshot', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function importSnapshot(request: ImportSnapshotRequest): ImportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSnapshotWithOptions(request, runtime);
}

model ExportSnapshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
  regionId: string(name='RegionId', description='regionId'),
  ossBucket: string(name='OssBucket', description='ossBucket'),
  roleName?: string(name='RoleName', description='roleName'),
}

model ExportSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function exportSnapshotWithOptions(request: ExportSnapshotRequest, runtime: Util.RuntimeOptions): ExportSnapshotResponse {
  Util.validateModel(request);
  return doRequest('ExportSnapshot', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function exportSnapshot(request: ExportSnapshotRequest): ExportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSnapshotWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  resourceType: string(name='ResourceType', description='resourceType'),
  tagKey?: [ string ](name='TagKey', description='tagKeys'),
  all?: boolean(name='All', description='deleteAll'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  tag: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  resourceId?: [ string ](name='ResourceId', description='resourceIds'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  tagFilter?: [
    {
      tagKey: string(name='TagKey', description='tagKey'),
      tagValues?: [ string ](name='TagValues', description='tagValues'),
    }
  ](name='TagFilter', description='tagFuzzyModels'),
  nextToken?: string(name='NextToken', description='nextToken'),
  resourceType: string(name='ResourceType', description='resourceType'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextToken: string(name='NextToken', description='data.nextToken'),
  tagResources: {
    tagResource: [
      {
        resourceType: string(name='ResourceType', description='resourceType'),
        resourceId: string(name='ResourceId', description='resourceId'),
        tagKey: string(name='TagKey', description='tagKey'),
        tagValue: string(name='TagValue', description='tagValue'),
      }
    ](name='TagResource', description='TagResource'),
  }(name='TagResources', description='data.data'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model AcceptInquiredSystemEventRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  eventId: string(name='EventId', description='eventId'),
}

model AcceptInquiredSystemEventResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function acceptInquiredSystemEventWithOptions(request: AcceptInquiredSystemEventRequest, runtime: Util.RuntimeOptions): AcceptInquiredSystemEventResponse {
  Util.validateModel(request);
  return doRequest('AcceptInquiredSystemEvent', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function acceptInquiredSystemEvent(request: AcceptInquiredSystemEventRequest): AcceptInquiredSystemEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptInquiredSystemEventWithOptions(request, runtime);
}

model RedeployInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId: string(name='InstanceId', description='instanceId'),
  forceStop?: boolean(name='ForceStop', description='kill'),
}

model RedeployInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function redeployInstanceWithOptions(request: RedeployInstanceRequest, runtime: Util.RuntimeOptions): RedeployInstanceResponse {
  Util.validateModel(request);
  return doRequest('RedeployInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function redeployInstance(request: RedeployInstanceRequest): RedeployInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployInstanceWithOptions(request, runtime);
}

model UnassignIpv6AddressesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  ipv6Address: [ string ](name='Ipv6Address', description='ipv6Addresses'),
}

model UnassignIpv6AddressesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function unassignIpv6AddressesWithOptions(request: UnassignIpv6AddressesRequest, runtime: Util.RuntimeOptions): UnassignIpv6AddressesResponse {
  Util.validateModel(request);
  return doRequest('UnassignIpv6Addresses', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function unassignIpv6Addresses(request: UnassignIpv6AddressesRequest): UnassignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignIpv6AddressesWithOptions(request, runtime);
}

model AssignIpv6AddressesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  ipv6Address?: [ string ](name='Ipv6Address', description='ipv6Addresses'),
  ipv6AddressCount?: integer(name='Ipv6AddressCount', description='ipv6AddressCount'),
}

model AssignIpv6AddressesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function assignIpv6AddressesWithOptions(request: AssignIpv6AddressesRequest, runtime: Util.RuntimeOptions): AssignIpv6AddressesResponse {
  Util.validateModel(request);
  return doRequest('AssignIpv6Addresses', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function assignIpv6Addresses(request: AssignIpv6AddressesRequest): AssignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignIpv6AddressesWithOptions(request, runtime);
}

model DescribeInstanceTopologyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceIds?: string(name='InstanceIds', description='instanceIds'),
}

model DescribeInstanceTopologyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  topologys: {
    topology: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        hostId: string(name='HostId', description='hostId'),
      }
    ](name='Topology', description='Topology'),
  }(name='Topologys', description='data.instanceNcInfos'),
}

async function describeInstanceTopologyWithOptions(request: DescribeInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeInstanceTopologyResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceTopology', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTopologyWithOptions(request, runtime);
}

model RenewDedicatedHostsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='dedicatedHostIds'),
  regionId: string(name='RegionId', description='regionNo'),
  period: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model RenewDedicatedHostsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function renewDedicatedHostsWithOptions(request: RenewDedicatedHostsRequest, runtime: Util.RuntimeOptions): RenewDedicatedHostsResponse {
  Util.validateModel(request);
  return doRequest('RenewDedicatedHosts', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function renewDedicatedHosts(request: RenewDedicatedHostsRequest): RenewDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDedicatedHostsWithOptions(request, runtime);
}

model ReleaseDedicatedHostRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
}

model ReleaseDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseDedicatedHostWithOptions(request: ReleaseDedicatedHostRequest, runtime: Util.RuntimeOptions): ReleaseDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('ReleaseDedicatedHost', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function releaseDedicatedHost(request: ReleaseDedicatedHostRequest): ReleaseDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDedicatedHostWithOptions(request, runtime);
}

model ModifyInstanceDeploymentRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  deploymentSetId?: string(name='DeploymentSetId', description='deploymentSetId'),
  force?: boolean(name='Force', description='force'),
  affinity?: string(name='Affinity', description='dedicatedInstanceAffinity'),
  tenancy?: string(name='Tenancy', description='instanceTenancy'),
  migrationType?: string(name='MigrationType', description='migrationType'),
  instanceType?: string(name='InstanceType', description='instanceType'),
}

model ModifyInstanceDeploymentResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceDeploymentWithOptions(request: ModifyInstanceDeploymentRequest, runtime: Util.RuntimeOptions): ModifyInstanceDeploymentResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceDeployment', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyInstanceDeployment(request: ModifyInstanceDeploymentRequest): ModifyInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceDeploymentWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoRenewAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  duration?: integer(name='Duration', description='duration'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  renewalStatus?: string(name='RenewalStatus', description='renewalStatus'),
}

model ModifyDedicatedHostAutoRenewAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostAutoRenewAttributeWithOptions(request: ModifyDedicatedHostAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoRenewAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostAutoRenewAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDedicatedHostAutoRenewAttribute(request: ModifyDedicatedHostAutoRenewAttributeRequest): ModifyDedicatedHostAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoReleaseTimeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='instanceId'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDedicatedHostAutoReleaseTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostAutoReleaseTimeWithOptions(request: ModifyDedicatedHostAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoReleaseTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostAutoReleaseTime', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDedicatedHostAutoReleaseTime(request: ModifyDedicatedHostAutoReleaseTimeRequest): ModifyDedicatedHostAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  dedicatedHostName?: string(name='DedicatedHostName', description='dedicatedHostName'),
  description?: string(name='Description', description='description'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='actionOnMaintenance'),
  networkAttributes: {
    slbUdpTimeout?: integer(name='SlbUdpTimeout', description='slbUdpTimeout'),
    udpTimeout?: integer(name='UdpTimeout', description='udpTimeout'),
  }(name='NetworkAttributes', description='NetworkAttributes'),
  autoPlacement?: string(name='AutoPlacement', description='autoPlacementStrategy'),
}

model ModifyDedicatedHostAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='izNo'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='dedicatedHostIds'),
  dedicatedHostName?: string(name='DedicatedHostName', description='dedicatedHostName'),
  status?: string(name='Status', description='status'),
  dedicatedHostType?: string(name='DedicatedHostType', description='dedicatedHostType'),
  lockReason?: string(name='LockReason', description='lockReason'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeDedicatedHostsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  dedicatedHosts: {
    dedicatedHost: [
      {
        dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
        autoPlacement: string(name='AutoPlacement', description='autoPlacement'),
        regionId: string(name='RegionId', description='regionNo'),
        zoneId: string(name='ZoneId', description='izNo'),
        dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
        machineId: string(name='MachineId', description='machineId'),
        description: string(name='Description', description='description'),
        dedicatedHostType: string(name='DedicatedHostType', description='hostType'),
        sockets: integer(name='Sockets', description='sockets'),
        cores: integer(name='Cores', description='physicalCores'),
        physicalGpus: integer(name='PhysicalGpus', description='physicalGpus'),
        GPUSpec: string(name='GPUSpec', description='gpuSpec'),
        actionOnMaintenance: string(name='ActionOnMaintenance', description='actionOnMaintenance'),
        status: string(name='Status', description='status'),
        creationTime: string(name='CreationTime', description='creationTime'),
        chargeType: string(name='ChargeType', description='chargeType'),
        saleCycle: string(name='SaleCycle', description='saleCycle'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        autoReleaseTime: string(name='AutoReleaseTime', description='autoReleaseTime'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        instances: {
          instance: [
            {
              instanceId: string(name='InstanceId', description='instanceId'),
              instanceType: string(name='InstanceType', description='instanceType'),
            }
          ](name='Instance', description='Instance'),
        }(name='Instances', description='hostInstances'),
        operationLocks: {
          operationLock: [
            {
              lockReason: string(name='LockReason', description='lockReason'),
            }
          ](name='OperationLock', description='OperationLock'),
        }(name='OperationLocks', description='operationLockTypes'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
        capacity: {
          totalVcpus: integer(name='TotalVcpus', description='totalVcpus'),
          availableVcpus: integer(name='AvailableVcpus', description='availableVcpus'),
          totalVgpus: integer(name='TotalVgpus', description='totalVgpus'),
          availableVgpus: integer(name='AvailableVgpus', description='availableVgpus'),
          totalMemory: float(name='TotalMemory', description='totalMemGB'),
          availableMemory: float(name='AvailableMemory', description='availableMemGB'),
          totalLocalStorage: integer(name='TotalLocalStorage', description='totalDisk'),
          availableLocalStorage: integer(name='AvailableLocalStorage', description='availableDisk'),
          localStorageCategory: string(name='LocalStorageCategory', description='dataDiskCategory'),
        }(name='Capacity', description='dedicatedHostCapacity'),
        networkAttributes: {
          slbUdpTimeout: integer(name='SlbUdpTimeout', description='slbUdpTimeout'),
          udpTimeout: integer(name='UdpTimeout', description='udpTimeout'),
        }(name='NetworkAttributes', description='networkAttributes'),
        supportedInstanceTypeFamilies: {
          supportedInstanceTypeFamily: [ string ](name='SupportedInstanceTypeFamily', description='SupportedInstanceTypeFamily'),
        }(name='SupportedInstanceTypeFamilies', description='supportInstanceTypeFamilies'),
        supportedCustomInstanceTypeFamilies: {
          supportedCustomInstanceTypeFamily: [ string ](name='SupportedCustomInstanceTypeFamily', description='SupportedCustomInstanceTypeFamily'),
        }(name='SupportedCustomInstanceTypeFamilies', description='supportCustomInstanceTypeFamilies'),
        supportedInstanceTypesList: {
          supportedInstanceTypesList: [ string ](name='SupportedInstanceTypesList', description='SupportedInstanceTypesList'),
        }(name='SupportedInstanceTypesList', description='supportInstanceTypesList'),
      }
    ](name='DedicatedHost', description='DedicatedHost'),
  }(name='DedicatedHosts', description='data.data'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHosts', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDedicatedHostTypesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostType?: string(name='DedicatedHostType', description='hostType'),
  supportedInstanceTypeFamily?: string(name='SupportedInstanceTypeFamily', description='supportInstanceTypeFamily'),
}

model DescribeDedicatedHostTypesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostTypes: {
    dedicatedHostType: [
      {
        dedicatedHostType: string(name='DedicatedHostType', description='hostType'),
        sockets: integer(name='Sockets', description='sockets'),
        totalVcpus: integer(name='TotalVcpus', description='cores'),
        totalVgpus: integer(name='TotalVgpus', description='vgpus'),
        cores: integer(name='Cores', description='physicalCores'),
        physicalGpus: integer(name='PhysicalGpus', description='physicalGpus'),
        memorySize: float(name='MemorySize', description='memGB'),
        localStorageCapacity: long(name='LocalStorageCapacity', description='diskSize'),
        localStorageAmount: integer(name='LocalStorageAmount', description='diskNum'),
        localStorageCategory: string(name='LocalStorageCategory', description='dataDiskCategory'),
        GPUSpec: string(name='GPUSpec', description='gpuSpec'),
        supportedInstanceTypeFamilies: {
          supportedInstanceTypeFamily: [ string ](name='SupportedInstanceTypeFamily', description='SupportedInstanceTypeFamily'),
        }(name='SupportedInstanceTypeFamilies', description='supportInstanceTypeFamilies'),
        supportedInstanceTypesList: {
          supportedInstanceTypesList: [ string ](name='SupportedInstanceTypesList', description='SupportedInstanceTypesList'),
        }(name='SupportedInstanceTypesList', description='supportInstanceTypesList'),
      }
    ](name='DedicatedHostType', description='DedicatedHostType'),
  }(name='DedicatedHostTypes', description='data'),
}

async function describeDedicatedHostTypesWithOptions(request: DescribeDedicatedHostTypesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostTypesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHostTypes', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeDedicatedHostTypes(request: DescribeDedicatedHostTypesRequest): DescribeDedicatedHostTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostTypesWithOptions(request, runtime);
}

model DescribeDedicatedHostAutoRenewRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dedicatedHostIds: string(name='DedicatedHostIds', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeDedicatedHostAutoRenewResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostRenewAttributes: {
    dedicatedHostRenewAttribute: [
      {
        dedicatedHostId: string(name='DedicatedHostId', description='instanceId'),
        autoRenewEnabled: boolean(name='AutoRenewEnabled', description='autoRenewEnabled'),
        duration: integer(name='Duration', description='duration'),
        periodUnit: string(name='PeriodUnit', description='periodUnit'),
        renewalStatus: string(name='RenewalStatus', description='renewalStatus'),
      }
    ](name='DedicatedHostRenewAttribute', description='DedicatedHostRenewAttribute'),
  }(name='DedicatedHostRenewAttributes', description='data'),
}

async function describeDedicatedHostAutoRenewWithOptions(request: DescribeDedicatedHostAutoRenewRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAutoRenewResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHostAutoRenew', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeDedicatedHostAutoRenew(request: DescribeDedicatedHostAutoRenewRequest): DescribeDedicatedHostAutoRenewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAutoRenewWithOptions(request, runtime);
}

model AllocateDedicatedHostsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  dedicatedHostName?: string(name='DedicatedHostName', description='dedicatedHostName'),
  dedicatedHostType: string(name='DedicatedHostType', description='hostType'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='actionOnMaintenance'),
  networkAttributes: {
    slbUdpTimeout?: integer(name='SlbUdpTimeout', description='slbUdpTimeout'),
    udpTimeout?: integer(name='UdpTimeout', description='udpTimeout'),
  }(name='NetworkAttributes', description='NetworkAttributes'),
  description?: string(name='Description', description='description'),
  autoPlacement?: string(name='AutoPlacement', description='autoPlacementStrategy'),
  chargeType?: string(name='ChargeType', description='chargeType'),
  quantity?: integer(name='Quantity', description='quantity'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  autoRenewPeriod?: integer(name='AutoRenewPeriod', description='autoRenewPeriod'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model AllocateDedicatedHostsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostIdSets: {
    dedicatedHostId: [ string ](name='DedicatedHostId', description='DedicatedHostId'),
  }(name='DedicatedHostIdSets', description='data.dedicatedHostIdSet'),
}

async function allocateDedicatedHostsWithOptions(request: AllocateDedicatedHostsRequest, runtime: Util.RuntimeOptions): AllocateDedicatedHostsResponse {
  Util.validateModel(request);
  return doRequest('AllocateDedicatedHosts', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function allocateDedicatedHosts(request: AllocateDedicatedHostsRequest): AllocateDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDedicatedHostsWithOptions(request, runtime);
}

model CreateSimulatedSystemEventsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  eventType: string(name='EventType', description='eventType'),
  notBefore: string(name='NotBefore', description='notBeforeStr'),
}

model CreateSimulatedSystemEventsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  eventIdSet: {
    eventId: [ string ](name='EventId', description='EventId'),
  }(name='EventIdSet', description='data.eventIds'),
}

async function createSimulatedSystemEventsWithOptions(request: CreateSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CreateSimulatedSystemEventsResponse {
  Util.validateModel(request);
  return doRequest('CreateSimulatedSystemEvents', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createSimulatedSystemEvents(request: CreateSimulatedSystemEventsRequest): CreateSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimulatedSystemEventsWithOptions(request, runtime);
}

model CancelSimulatedSystemEventsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  eventId: [ string ](name='EventId', description='eventIds'),
}

model CancelSimulatedSystemEventsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelSimulatedSystemEventsWithOptions(request: CancelSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CancelSimulatedSystemEventsResponse {
  Util.validateModel(request);
  return doRequest('CancelSimulatedSystemEvents', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function cancelSimulatedSystemEvents(request: CancelSimulatedSystemEventsRequest): CancelSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelSimulatedSystemEventsWithOptions(request, runtime);
}

model DescribeEniMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  eniId?: string(name='EniId', description='resourceId'),
  regionId: string(name='RegionId', description='regionNo'),
  instanceId: string(name='InstanceId', description='connectedResourceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
}

model DescribeEniMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.count'),
  monitorData: {
    eniMonitorData: [
      {
        eniId: string(name='EniId', description='resourceId'),
        timeStamp: string(name='TimeStamp', description='timeStamp'),
        packetTx: string(name='PacketTx', description='item2Value.PacketTx'),
        packetRx: string(name='PacketRx', description='item2Value.PacketRx'),
        intranetTx: string(name='IntranetTx', description='item2Value.IntranetOut'),
        intranetRx: string(name='IntranetRx', description='item2Value.IntranetIn'),
        dropPacketTx: string(name='DropPacketTx', description='item2Value.DropPacketTx'),
        dropPacketRx: string(name='DropPacketRx', description='item2Value.DropPacketRx'),
      }
    ](name='EniMonitorData', description='EniMonitorData'),
  }(name='MonitorData', description='data'),
}

async function describeEniMonitorDataWithOptions(request: DescribeEniMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEniMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeEniMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeEniMonitorData(request: DescribeEniMonitorDataRequest): DescribeEniMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEniMonitorDataWithOptions(request, runtime);
}

model DescribeAccountAttributesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  attributeName?: [ string ](name='AttributeName', description='attributeNames'),
}

model DescribeAccountAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  accountAttributeItems: {
    accountAttributeItem: [
      {
        attributeName: string(name='AttributeName', description='attributeName'),
        attributeValues: {
          valueItem: [
            {
              value: string(name='Value', description='value'),
              expiredTime: string(name='ExpiredTime', description='expiredTime'),
              zoneId: string(name='ZoneId', description='zoneId'),
              instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
              instanceType: string(name='InstanceType', description='instanceType'),
              count: integer(name='Count', description='count'),
              diskCategory: string(name='DiskCategory', description='category'),
            }
          ](name='ValueItem', description='ValueItem'),
        }(name='AttributeValues', description='attributeValues'),
      }
    ](name='AccountAttributeItem', description='AccountAttributeItem'),
  }(name='AccountAttributeItems', description='data'),
}

async function describeAccountAttributesWithOptions(request: DescribeAccountAttributesRequest, runtime: Util.RuntimeOptions): DescribeAccountAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccountAttributes', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAttributesWithOptions(request, runtime);
}

model ModifyLaunchTemplateDefaultVersionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
  defaultVersionNumber: long(name='DefaultVersionNumber', description='defaultVersionNumber'),
}

model ModifyLaunchTemplateDefaultVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyLaunchTemplateDefaultVersionWithOptions(request: ModifyLaunchTemplateDefaultVersionRequest, runtime: Util.RuntimeOptions): ModifyLaunchTemplateDefaultVersionResponse {
  Util.validateModel(request);
  return doRequest('ModifyLaunchTemplateDefaultVersion', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyLaunchTemplateDefaultVersion(request: ModifyLaunchTemplateDefaultVersionRequest): ModifyLaunchTemplateDefaultVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLaunchTemplateDefaultVersionWithOptions(request, runtime);
}

model DescribeLaunchTemplatesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  templateTag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='TemplateTag', description='tagKeyValueParams'),
  launchTemplateId?: [ string ](name='LaunchTemplateId', description='launchTemplateIds'),
  launchTemplateName?: [ string ](name='LaunchTemplateName', description='launchTemplateNames'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='templateResourceGroupId'),
}

model DescribeLaunchTemplatesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  launchTemplateSets: {
    launchTemplateSet: [
      {
        createTime: string(name='CreateTime', description='uTCCreateTime'),
        modifiedTime: string(name='ModifiedTime', description='uTCModifiedTime'),
        launchTemplateId: string(name='LaunchTemplateId', description='launchTemplateId'),
        launchTemplateName: string(name='LaunchTemplateName', description='launchTemplateName'),
        defaultVersionNumber: long(name='DefaultVersionNumber', description='defaultVersionNumber'),
        latestVersionNumber: long(name='LatestVersionNumber', description='latestVersionNumber'),
        createdBy: string(name='CreatedBy', description='createdBy'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='LaunchTemplateSet', description='LaunchTemplateSet'),
  }(name='LaunchTemplateSets', description='data.data'),
}

async function describeLaunchTemplatesWithOptions(request: DescribeLaunchTemplatesRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplatesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLaunchTemplates', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeLaunchTemplates(request: DescribeLaunchTemplatesRequest): DescribeLaunchTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplatesWithOptions(request, runtime);
}

model DescribeLaunchTemplateVersionsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
  launchTemplateVersion?: [ long ](name='LaunchTemplateVersion', description='launchTemplateVersions'),
  minVersion?: long(name='MinVersion', description='minVersion'),
  maxVersion?: long(name='MaxVersion', description='maxVersion'),
  defaultVersion?: boolean(name='DefaultVersion', description='defaultVersion'),
  detailFlag?: boolean(name='DetailFlag', description='detailFlag'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeLaunchTemplateVersionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  launchTemplateVersionSets: {
    launchTemplateVersionSet: [
      {
        createTime: string(name='CreateTime', description='uTCCreateTime'),
        modifiedTime: string(name='ModifiedTime', description='uTCModifiedTime'),
        launchTemplateId: string(name='LaunchTemplateId', description='launchTemplateId'),
        launchTemplateName: string(name='LaunchTemplateName', description='launchTemplateName'),
        defaultVersion: boolean(name='DefaultVersion', description='defaultVersion'),
        versionNumber: long(name='VersionNumber', description='versionNumber'),
        versionDescription: string(name='VersionDescription', description='versionDescription'),
        createdBy: string(name='CreatedBy', description='createdBy'),
        launchTemplateData: {
          imageId: string(name='ImageId', description='imageId'),
          imageOwnerAlias: string(name='ImageOwnerAlias', description='imageOwnerAlias'),
          passwordInherit: boolean(name='PasswordInherit', description='passwordInherit'),
          instanceType: string(name='InstanceType', description='instanceType'),
          securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
          vpcId: string(name='VpcId', description='vpcId'),
          VSwitchId: string(name='VSwitchId', description='vSwitchId'),
          instanceName: string(name='InstanceName', description='instanceName'),
          description: string(name='Description', description='description'),
          internetMaxBandwidthIn: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
          internetMaxBandwidthOut: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
          hostName: string(name='HostName', description='hostName'),
          zoneId: string(name='ZoneId', description='izNo'),
          ioOptimized: string(name='IoOptimized', description='ioOptimized'),
          instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
          period: integer(name='Period', description='period'),
          internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
          enableVmOsConfig: boolean(name='EnableVmOsConfig', description='enableVmOsConfig'),
          networkType: string(name='NetworkType', description='networkType'),
          userData: string(name='UserData', description='userData'),
          keyPairName: string(name='KeyPairName', description='keyPairName'),
          ramRoleName: string(name='RamRoleName', description='ramRoleName'),
          autoReleaseTime: string(name='AutoReleaseTime', description='autoReleaseTime'),
          spotStrategy: string(name='SpotStrategy', description='spotStrategy'),
          spotPriceLimit: float(name='SpotPriceLimit', description='spotPriceLimit'),
          spotDuration: integer(name='SpotDuration', description='spotDuration'),
          resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
          securityEnhancementStrategy: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
          systemDisk: {
            size: integer(name='Size', description='systemDiskSize'),
            category: string(name='Category', description='systemDiskCategory'),
            diskName: string(name='DiskName', description='systemDiskName'),
            description: string(name='Description', description='systemDiskDescription'),
            iops: integer(name='Iops', description='systemDiskIops'),
          }(name='SystemDisk', description='SystemDisk'),
          dataDisks: {
            dataDisk: [
              {
                size: integer(name='Size', description='size'),
                snapshotId: string(name='SnapshotId', description='snapshotId'),
                category: string(name='Category', description='category'),
                encrypted: string(name='Encrypted', description='encrypted'),
                diskName: string(name='DiskName', description='diskName'),
                description: string(name='Description', description='description'),
                deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
                device: string(name='Device', description='device'),
              }
            ](name='DataDisk', description='DataDisk'),
          }(name='DataDisks', description='dataDisks'),
          networkInterfaces: {
            networkInterface: [
              {
                primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
                VSwitchId: string(name='VSwitchId', description='vswitchId'),
                securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
                networkInterfaceName: string(name='NetworkInterfaceName', description='networkInterfaceName'),
                description: string(name='Description', description='description'),
              }
            ](name='NetworkInterface', description='NetworkInterface'),
          }(name='NetworkInterfaces', description='enis'),
          tags: {
            instanceTag: [
              {
                key: string(name='Key', description='key'),
                value: string(name='Value', description='value'),
              }
            ](name='InstanceTag', description='InstanceTag'),
          }(name='Tags', description='tagList'),
        }(name='LaunchTemplateData', description='versionSpecific'),
      }
    ](name='LaunchTemplateVersionSet', description='LaunchTemplateVersionSet'),
  }(name='LaunchTemplateVersionSets', description='data.data'),
}

async function describeLaunchTemplateVersionsWithOptions(request: DescribeLaunchTemplateVersionsRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplateVersionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeLaunchTemplateVersions', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeLaunchTemplateVersions(request: DescribeLaunchTemplateVersionsRequest): DescribeLaunchTemplateVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplateVersionsWithOptions(request, runtime);
}

model DeleteLaunchTemplateVersionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
  deleteVersion: [ long ](name='DeleteVersion', description='deleteVersions'),
}

model DeleteLaunchTemplateVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteLaunchTemplateVersionWithOptions(request: DeleteLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateVersionResponse {
  Util.validateModel(request);
  return doRequest('DeleteLaunchTemplateVersion', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteLaunchTemplateVersion(request: DeleteLaunchTemplateVersionRequest): DeleteLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateVersionWithOptions(request, runtime);
}

model DeleteLaunchTemplateRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
}

model DeleteLaunchTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteLaunchTemplateWithOptions(request: DeleteLaunchTemplateRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateResponse {
  Util.validateModel(request);
  return doRequest('DeleteLaunchTemplate', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteLaunchTemplate(request: DeleteLaunchTemplateRequest): DeleteLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateWithOptions(request, runtime);
}

model CreateLaunchTemplateVersionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
  versionDescription?: string(name='VersionDescription', description='versionDescription'),
  imageId?: string(name='ImageId', description='imageId'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='imageOwnerAlias'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwordInherit'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vSwitchId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  description?: string(name='Description', description='description'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  hostName?: string(name='HostName', description='hostName'),
  zoneId?: string(name='ZoneId', description='izNo'),
  systemDisk: {
    category?: string(name='Category', description='systemDiskCategory'),
    size?: integer(name='Size', description='systemDiskSize'),
    diskName?: string(name='DiskName', description='systemDiskName'),
    description?: string(name='Description', description='systemDiskDescription'),
    iops?: integer(name='Iops', description='systemDiskIops'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk?: [
    {
      size: integer(name='Size', description='size'),
      snapshotId: string(name='SnapshotId', description='snapshotId'),
      category: string(name='Category', description='category'),
      encrypted: string(name='Encrypted', description='encrypted'),
      diskName: string(name='DiskName', description='diskName'),
      description: string(name='Description', description='description'),
      deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
      device: string(name='Device', description='device'),
    }
  ](name='DataDisk', description='dataDisks'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  networkInterface?: [
    {
      primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
      VSwitchId: string(name='VSwitchId', description='vswitchId'),
      securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
      networkInterfaceName: string(name='NetworkInterfaceName', description='networkInterfaceName'),
      description: string(name='Description', description='description'),
    }
  ](name='NetworkInterface', description='enis'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  period?: integer(name='Period', description='period'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='enableVmOsConfig'),
  networkType?: string(name='NetworkType', description='networkType'),
  userData?: string(name='UserData', description='userData'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='spotPriceLimit'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagList'),
}

model CreateLaunchTemplateVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  launchTemplateVersionNumber: long(name='LaunchTemplateVersionNumber', description='data'),
}

async function createLaunchTemplateVersionWithOptions(request: CreateLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateVersionResponse {
  Util.validateModel(request);
  return doRequest('CreateLaunchTemplateVersion', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createLaunchTemplateVersion(request: CreateLaunchTemplateVersionRequest): CreateLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateVersionWithOptions(request, runtime);
}

model CreateLaunchTemplateRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  templateTag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='TemplateTag', description='tagKeyValueParams'),
  launchTemplateName: string(name='LaunchTemplateName', description='launchTemplateName'),
  versionDescription?: string(name='VersionDescription', description='versionDescription'),
  imageId?: string(name='ImageId', description='imageId'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='imageOwnerAlias'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwordInherit'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vSwitchId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  description?: string(name='Description', description='description'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  hostName?: string(name='HostName', description='hostName'),
  zoneId?: string(name='ZoneId', description='izNo'),
  systemDisk: {
    category?: string(name='Category', description='systemDiskCategory'),
    size?: integer(name='Size', description='systemDiskSize'),
    diskName?: string(name='DiskName', description='systemDiskName'),
    description?: string(name='Description', description='systemDiskDescription'),
    iops?: integer(name='Iops', description='systemDiskIops'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk?: [
    {
      size: integer(name='Size', description='size'),
      snapshotId: string(name='SnapshotId', description='snapshotId'),
      category: string(name='Category', description='category'),
      encrypted: string(name='Encrypted', description='encrypted'),
      diskName: string(name='DiskName', description='diskName'),
      description: string(name='Description', description='description'),
      deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
      device: string(name='Device', description='device'),
    }
  ](name='DataDisk', description='dataDisks'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  networkInterface?: [
    {
      primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
      VSwitchId: string(name='VSwitchId', description='vswitchId'),
      securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
      networkInterfaceName: string(name='NetworkInterfaceName', description='networkInterfaceName'),
      description: string(name='Description', description='description'),
    }
  ](name='NetworkInterface', description='enis'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  period?: integer(name='Period', description='period'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='enableVmOsConfig'),
  networkType?: string(name='NetworkType', description='networkType'),
  userData?: string(name='UserData', description='userData'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='spotPriceLimit'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='templateResourceGroupId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagList'),
}

model CreateLaunchTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  launchTemplateId: string(name='LaunchTemplateId', description='data'),
}

async function createLaunchTemplateWithOptions(request: CreateLaunchTemplateRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateResponse {
  Util.validateModel(request);
  return doRequest('CreateLaunchTemplate', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createLaunchTemplate(request: CreateLaunchTemplateRequest): CreateLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateWithOptions(request, runtime);
}

model InstallCloudAssistantRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
}

model InstallCloudAssistantResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function installCloudAssistantWithOptions(request: InstallCloudAssistantRequest, runtime: Util.RuntimeOptions): InstallCloudAssistantResponse {
  Util.validateModel(request);
  return doRequest('InstallCloudAssistant', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudAssistantWithOptions(request, runtime);
}

model DescribeCloudAssistantStatusRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
}

model DescribeCloudAssistantStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceCloudAssistantStatusSet: {
    instanceCloudAssistantStatus: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        cloudAssistantStatus: string(name='CloudAssistantStatus', description='cloudAssistantStatus'),
        cloudAssistantVersion: string(name='CloudAssistantVersion', description='cloudAssistantVersion'),
      }
    ](name='InstanceCloudAssistantStatus', description='InstanceCloudAssistantStatus'),
  }(name='InstanceCloudAssistantStatusSet', description='data.instanceCloudAssistantStatusSet'),
}

async function describeCloudAssistantStatusWithOptions(request: DescribeCloudAssistantStatusRequest, runtime: Util.RuntimeOptions): DescribeCloudAssistantStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeCloudAssistantStatus', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudAssistantStatusWithOptions(request, runtime);
}

model UnassignPrivateIpAddressesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  privateIpAddress: [ string ](name='PrivateIpAddress', description='privateIpAddresses'),
}

model UnassignPrivateIpAddressesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function unassignPrivateIpAddressesWithOptions(request: UnassignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): UnassignPrivateIpAddressesResponse {
  Util.validateModel(request);
  return doRequest('UnassignPrivateIpAddresses', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignPrivateIpAddressesWithOptions(request, runtime);
}

model AssignPrivateIpAddressesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='privateIpAddresses'),
  secondaryPrivateIpAddressCount?: integer(name='SecondaryPrivateIpAddressCount', description='privateIpCount'),
}

model AssignPrivateIpAddressesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function assignPrivateIpAddressesWithOptions(request: AssignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressesResponse {
  Util.validateModel(request);
  return doRequest('AssignPrivateIpAddresses', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressesWithOptions(request, runtime);
}

model DescribeNetworkInterfacePermissionsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='eniId'),
  networkInterfacePermissionId?: [ string ](name='NetworkInterfacePermissionId', description='eniPermissionIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeNetworkInterfacePermissionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  networkInterfacePermissions: {
    networkInterfacePermission: [
      {
        accountId: long(name='AccountId', description='accountId'),
        serviceName: string(name='ServiceName', description='serviceName'),
        networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
        networkInterfacePermissionId: string(name='NetworkInterfacePermissionId', description='eniPermissionId'),
        permission: string(name='Permission', description='eniPermissionType'),
        permissionState: string(name='PermissionState', description='eniPermissionStatus'),
      }
    ](name='NetworkInterfacePermission', description='NetworkInterfacePermission'),
  }(name='NetworkInterfacePermissions', description='data.data'),
}

async function describeNetworkInterfacePermissionsWithOptions(request: DescribeNetworkInterfacePermissionsRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacePermissionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeNetworkInterfacePermissions', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeNetworkInterfacePermissions(request: DescribeNetworkInterfacePermissionsRequest): DescribeNetworkInterfacePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacePermissionsWithOptions(request, runtime);
}

model DeleteNetworkInterfacePermissionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfacePermissionId: string(name='NetworkInterfacePermissionId', description='eniPermissionId'),
  force?: boolean(name='Force', description='force'),
}

model DeleteNetworkInterfacePermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteNetworkInterfacePermissionWithOptions(request: DeleteNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  return doRequest('DeleteNetworkInterfacePermission', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteNetworkInterfacePermission(request: DeleteNetworkInterfacePermissionRequest): DeleteNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfacePermissionWithOptions(request, runtime);
}

model CreateNetworkInterfacePermissionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  accountId: long(name='AccountId', description='accountId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  permission: string(name='Permission', description='permission'),
}

model CreateNetworkInterfacePermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  networkInterfacePermission: {
    accountId: long(name='AccountId', description='accountId'),
    serviceName: string(name='ServiceName', description='serviceName'),
    networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
    networkInterfacePermissionId: string(name='NetworkInterfacePermissionId', description='eniPermissionId'),
    permission: string(name='Permission', description='eniPermissionType'),
    permissionState: string(name='PermissionState', description='eniPermissionStatus'),
  }(name='NetworkInterfacePermission', description='data'),
}

async function createNetworkInterfacePermissionWithOptions(request: CreateNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  return doRequest('CreateNetworkInterfacePermission', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createNetworkInterfacePermission(request: CreateNetworkInterfacePermissionRequest): CreateNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfacePermissionWithOptions(request, runtime);
}

model GetInstanceScreenshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  wakeUp?: boolean(name='WakeUp', description='wakeup'),
}

model GetInstanceScreenshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  screenshot: string(name='Screenshot', description='data.content'),
}

async function getInstanceScreenshotWithOptions(request: GetInstanceScreenshotRequest, runtime: Util.RuntimeOptions): GetInstanceScreenshotResponse {
  Util.validateModel(request);
  return doRequest('GetInstanceScreenshot', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function getInstanceScreenshot(request: GetInstanceScreenshotRequest): GetInstanceScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceScreenshotWithOptions(request, runtime);
}

model GetInstanceConsoleOutputRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  removeSymbols?: boolean(name='RemoveSymbols', description='removeSymbols'),
}

model GetInstanceConsoleOutputResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  consoleOutput: string(name='ConsoleOutput', description='data.content'),
  lastUpdateTime: string(name='LastUpdateTime', description='data.timestamp'),
}

async function getInstanceConsoleOutputWithOptions(request: GetInstanceConsoleOutputRequest, runtime: Util.RuntimeOptions): GetInstanceConsoleOutputResponse {
  Util.validateModel(request);
  return doRequest('GetInstanceConsoleOutput', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function getInstanceConsoleOutput(request: GetInstanceConsoleOutputRequest): GetInstanceConsoleOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsoleOutputWithOptions(request, runtime);
}

model DescribeResourcesModificationRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  resourceId: string(name='ResourceId', description='resourceId'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', description='migrateAcrossZone'),
  destinationResource: string(name='DestinationResource', description='destinationResource'),
  operationType?: string(name='OperationType', description='operationType'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  cores?: integer(name='Cores', description='cpu'),
  memory?: float(name='Memory', description='mem'),
}

model DescribeResourcesModificationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableZones: {
    availableZone: [
      {
        regionId: string(name='RegionId', description='regionNo'),
        zoneId: string(name='ZoneId', description='zoneNo'),
        status: string(name='Status', description='status'),
        statusCategory: string(name='StatusCategory', description='statusCategory'),
        availableResources: {
          availableResource: [
            {
              type: string(name='Type', description='type'),
              supportedResources: {
                supportedResource: [
                  {
                    value: string(name='Value', description='value'),
                    status: string(name='Status', description='status'),
                    statusCategory: string(name='StatusCategory', description='statusCategory'),
                    min: integer(name='Min', description='min'),
                    max: integer(name='Max', description='max'),
                    unit: string(name='Unit', description='unit'),
                  }
                ](name='SupportedResource', description='SupportedResource'),
              }(name='SupportedResources', description='supportedResourceModels'),
            }
          ](name='AvailableResource', description='AvailableResource'),
        }(name='AvailableResources', description='availableIzResources'),
      }
    ](name='AvailableZone', description='AvailableZone'),
  }(name='AvailableZones', description='data'),
}

async function describeResourcesModificationWithOptions(request: DescribeResourcesModificationRequest, runtime: Util.RuntimeOptions): DescribeResourcesModificationResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcesModification', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeResourcesModification(request: DescribeResourcesModificationRequest): DescribeResourcesModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcesModificationWithOptions(request, runtime);
}

model DescribeBandwidthLimitationRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  resourceId?: string(name='ResourceId', description='resourceId'),
  operationType?: string(name='OperationType', description='operationType'),
}

model DescribeBandwidthLimitationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  bandwidths: {
    bandwidth: [
      {
        internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
        min: integer(name='Min', description='min'),
        max: integer(name='Max', description='max'),
        unit: string(name='Unit', description='unit'),
      }
    ](name='Bandwidth', description='Bandwidth'),
  }(name='Bandwidths', description='data'),
}

async function describeBandwidthLimitationWithOptions(request: DescribeBandwidthLimitationRequest, runtime: Util.RuntimeOptions): DescribeBandwidthLimitationResponse {
  Util.validateModel(request);
  return doRequest('DescribeBandwidthLimitation', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeBandwidthLimitation(request: DescribeBandwidthLimitationRequest): DescribeBandwidthLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthLimitationWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  destinationResource: string(name='DestinationResource', description='destinationResource'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='systemDiskCategory'),
  dataDiskCategory?: string(name='DataDiskCategory', description='dataDiskCategory'),
  networkCategory?: string(name='NetworkCategory', description='networkCategory'),
  cores?: integer(name='Cores', description='cpu'),
  memory?: float(name='Memory', description='mem'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  scope?: string(name='Scope', description='scope'),
}

model DescribeAvailableResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableZones: {
    availableZone: [
      {
        regionId: string(name='RegionId', description='regionNo'),
        zoneId: string(name='ZoneId', description='zoneNo'),
        status: string(name='Status', description='status'),
        statusCategory: string(name='StatusCategory', description='statusCategory'),
        availableResources: {
          availableResource: [
            {
              type: string(name='Type', description='type'),
              supportedResources: {
                supportedResource: [
                  {
                    value: string(name='Value', description='value'),
                    status: string(name='Status', description='status'),
                    statusCategory: string(name='StatusCategory', description='statusCategory'),
                    min: integer(name='Min', description='min'),
                    max: integer(name='Max', description='max'),
                    unit: string(name='Unit', description='unit'),
                  }
                ](name='SupportedResource', description='SupportedResource'),
              }(name='SupportedResources', description='supportedResourceModels'),
            }
          ](name='AvailableResource', description='AvailableResource'),
        }(name='AvailableResources', description='availableIzResources'),
      }
    ](name='AvailableZone', description='AvailableZone'),
  }(name='AvailableZones', description='data'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResource', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model ReActivateInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ReActivateInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function reActivateInstancesWithOptions(request: ReActivateInstancesRequest, runtime: Util.RuntimeOptions): ReActivateInstancesResponse {
  Util.validateModel(request);
  return doRequest('ReActivateInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function reActivateInstances(request: ReActivateInstancesRequest): ReActivateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return reActivateInstancesWithOptions(request, runtime);
}

model DescribeInstancesFullStatusRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: [ string ](name='InstanceId', description='instanceIds'),
  eventId?: [ string ](name='EventId', description='eventIds'),
  status?: string(name='Status', description='status'),
  healthStatus?: string(name='HealthStatus', description='healthStatus'),
  instanceEventType?: [ string ](name='InstanceEventType', description='eventTypes'),
  eventType?: string(name='EventType', description='eventType'),
  notBefore: {
    start?: string(name='Start', description='eventPlanExeTimeFromStr'),
    end?: string(name='End', description='eventPlanExeTimeToStr'),
  }(name='NotBefore', description='NotBefore'),
  eventPublishTime: {
    start?: string(name='Start', description='eventPublishTimeFromStr'),
    end?: string(name='End', description='eventPublishTimeToStr'),
  }(name='EventPublishTime', description='EventPublishTime'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeInstancesFullStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  instanceFullStatusSet: {
    instanceFullStatusType: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        scheduledSystemEventSet: {
          scheduledSystemEventType: [
            {
              eventId: string(name='EventId', description='eventId'),
              eventPublishTime: string(name='EventPublishTime', description='publishTimeStr'),
              notBefore: string(name='NotBefore', description='planExeTimeStr'),
              reason: string(name='Reason', description='description'),
              impactLevel: string(name='ImpactLevel', description='impactLevel'),
              eventCycleStatus: {
                code: integer(name='Code', description='code'),
                name: string(name='Name', description='name'),
              }(name='EventCycleStatus', description='eventCycleStatus'),
              eventType: {
                code: integer(name='Code', description='code'),
                name: string(name='Name', description='name'),
              }(name='EventType', description='eventType'),
              extendedAttribute: {
                diskId: string(name='DiskId', description='diskId'),
                device: string(name='Device', description='device'),
                inactiveDisks: {
                  inactiveDisk: [
                    {
                      creationTime: string(name='CreationTime', description='createTime'),
                      releaseTime: string(name='ReleaseTime', description='releaseTime'),
                      deviceType: string(name='DeviceType', description='deviceType'),
                      deviceCategory: string(name='DeviceCategory', description='deviceCategory'),
                      deviceSize: string(name='DeviceSize', description='deviceSize'),
                    }
                  ](name='InactiveDisk', description='InactiveDisk'),
                }(name='InactiveDisks', description='inactiveDisks'),
              }(name='ExtendedAttribute', description='extendedAttribute'),
            }
          ](name='ScheduledSystemEventType', description='ScheduledSystemEventType'),
        }(name='ScheduledSystemEventSet', description='systemEvents'),
        status: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='Status', description='status'),
        healthStatus: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='HealthStatus', description='healthStatus'),
      }
    ](name='InstanceFullStatusType', description='InstanceFullStatusType'),
  }(name='InstanceFullStatusSet', description='data.data'),
}

async function describeInstancesFullStatusWithOptions(request: DescribeInstancesFullStatusRequest, runtime: Util.RuntimeOptions): DescribeInstancesFullStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstancesFullStatus', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInstancesFullStatus(request: DescribeInstancesFullStatusRequest): DescribeInstancesFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesFullStatusWithOptions(request, runtime);
}

model DescribeInstanceHistoryEventsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  eventId?: [ string ](name='EventId', description='eventIds'),
  instanceEventCycleStatus?: [ string ](name='InstanceEventCycleStatus', description='eventCycleStatuses'),
  eventCycleStatus?: string(name='EventCycleStatus', description='eventCycleStatus'),
  instanceEventType?: [ string ](name='InstanceEventType', description='eventTypes'),
  eventType?: string(name='EventType', description='eventType'),
  notBefore: {
    start?: string(name='Start', description='eventPlanExeTimeFromStr'),
    end?: string(name='End', description='eventPlanExeTimeToStr'),
  }(name='NotBefore', description='NotBefore'),
  eventPublishTime: {
    start?: string(name='Start', description='eventPublishTimeFromStr'),
    end?: string(name='End', description='eventPublishTimeToStr'),
  }(name='EventPublishTime', description='EventPublishTime'),
  impactLevel?: string(name='ImpactLevel', description='impactLevel'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeInstanceHistoryEventsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  instanceSystemEventSet: {
    instanceSystemEventType: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        eventId: string(name='EventId', description='eventId'),
        eventPublishTime: string(name='EventPublishTime', description='eventPublishTimeStr'),
        notBefore: string(name='NotBefore', description='eventPlanExeTimeStr'),
        eventFinishTime: string(name='EventFinishTime', description='eventFinishTimeStr'),
        reason: string(name='Reason', description='description'),
        impactLevel: string(name='ImpactLevel', description='impactLevel'),
        eventType: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='EventType', description='eventType'),
        eventCycleStatus: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='EventCycleStatus', description='eventCycleStatus'),
        extendedAttribute: {
          diskId: string(name='DiskId', description='diskId'),
          device: string(name='Device', description='device'),
          inactiveDisks: {
            inactiveDisk: [
              {
                creationTime: string(name='CreationTime', description='createTime'),
                releaseTime: string(name='ReleaseTime', description='releaseTime'),
                deviceType: string(name='DeviceType', description='deviceType'),
                deviceCategory: string(name='DeviceCategory', description='deviceCategory'),
                deviceSize: string(name='DeviceSize', description='deviceSize'),
              }
            ](name='InactiveDisk', description='InactiveDisk'),
          }(name='InactiveDisks', description='inactiveDisks'),
        }(name='ExtendedAttribute', description='extendedAttribute'),
      }
    ](name='InstanceSystemEventType', description='InstanceSystemEventType'),
  }(name='InstanceSystemEventSet', description='data.data'),
}

async function describeInstanceHistoryEventsWithOptions(request: DescribeInstanceHistoryEventsRequest, runtime: Util.RuntimeOptions): DescribeInstanceHistoryEventsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceHistoryEvents', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInstanceHistoryEvents(request: DescribeInstanceHistoryEventsRequest): DescribeInstanceHistoryEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHistoryEventsWithOptions(request, runtime);
}

model DescribeDisksFullStatusRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  diskId?: [ string ](name='DiskId', description='diskIds'),
  eventId?: [ string ](name='EventId', description='eventIds'),
  status?: string(name='Status', description='lifeCycleStatus'),
  healthStatus?: string(name='HealthStatus', description='healthStatus'),
  eventType?: string(name='EventType', description='eventType'),
  eventTime: {
    start?: string(name='Start', description='eventTimeFromStr'),
    end?: string(name='End', description='eventTimeToStr'),
  }(name='EventTime', description='EventTime'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeDisksFullStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  diskFullStatusSet: {
    diskFullStatusType: [
      {
        diskId: string(name='DiskId', description='diskId'),
        instanceId: string(name='InstanceId', description='ecsInstanceId'),
        device: string(name='Device', description='device'),
        diskEventSet: {
          diskEventType: [
            {
              eventId: string(name='EventId', description='eventId'),
              eventTime: string(name='EventTime', description='eventTimeStr'),
              eventEndTime: string(name='EventEndTime', description='eventEndTimeStr'),
              impactLevel: string(name='ImpactLevel', description='impactLevel'),
              eventType: {
                code: integer(name='Code', description='code'),
                name: string(name='Name', description='name'),
              }(name='EventType', description='diskEventType'),
            }
          ](name='DiskEventType', description='DiskEventType'),
        }(name='DiskEventSet', description='diskEvents'),
        status: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='Status', description='diskLifeCycleStatus'),
        healthStatus: {
          code: integer(name='Code', description='code'),
          name: string(name='Name', description='name'),
        }(name='HealthStatus', description='diskHealthStatus'),
      }
    ](name='DiskFullStatusType', description='DiskFullStatusType'),
  }(name='DiskFullStatusSet', description='data.data'),
}

async function describeDisksFullStatusWithOptions(request: DescribeDisksFullStatusRequest, runtime: Util.RuntimeOptions): DescribeDisksFullStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeDisksFullStatus', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeDisksFullStatus(request: DescribeDisksFullStatusRequest): DescribeDisksFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksFullStatusWithOptions(request, runtime);
}

model ModifyUserBusinessBehaviorRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId?: string(name='RegionId', description='regionId'),
  statusKey: string(name='statusKey', description='statusKey'),
  statusValue: string(name='statusValue', description='statusValue'),
}

model ModifyUserBusinessBehaviorResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyUserBusinessBehaviorWithOptions(request: ModifyUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): ModifyUserBusinessBehaviorResponse {
  Util.validateModel(request);
  return doRequest('ModifyUserBusinessBehavior', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyUserBusinessBehavior(request: ModifyUserBusinessBehaviorRequest): ModifyUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserBusinessBehaviorWithOptions(request, runtime);
}

model DescribeUserBusinessBehaviorRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId?: string(name='RegionId', description='regionId'),
  statusKey: string(name='statusKey', description='statusKey'),
}

model DescribeUserBusinessBehaviorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  statusValue: string(name='StatusValue', description='data'),
}

async function describeUserBusinessBehaviorWithOptions(request: DescribeUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): DescribeUserBusinessBehaviorResponse {
  Util.validateModel(request);
  return doRequest('DescribeUserBusinessBehavior', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeUserBusinessBehavior(request: DescribeUserBusinessBehaviorRequest): DescribeUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBusinessBehaviorWithOptions(request, runtime);
}

model RunInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  imageId?: string(name='ImageId', description='imageId'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='securityGroupIds'),
  VSwitchId?: string(name='VSwitchId', description='vSwitchId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  description?: string(name='Description', description='description'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  hostName?: string(name='HostName', description='hostName'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='resourceNameSuffix'),
  password?: string(name='Password', description='password'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwdInherit'),
  zoneId?: string(name='ZoneId', description='izNo'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  systemDisk: {
    size?: string(name='Size', description='systemDiskSizeStr'),
    category?: string(name='Category', description='systemDiskCategory'),
    diskName?: string(name='DiskName', description='systemDiskName'),
    description?: string(name='Description', description='systemDiskDescription'),
    performanceLevel?: string(name='PerformanceLevel', description='sysPerformanceLevel'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='systemDiskAutoSnapshotPolicyId'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk?: [
    {
      size: integer(name='Size', description='size'),
      snapshotId: string(name='SnapshotId', description='snapshotId'),
      category: string(name='Category', description='category'),
      encrypted: string(name='Encrypted', description='encrypted'),
      KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
      diskName: string(name='DiskName', description='diskName'),
      description: string(name='Description', description='description'),
      device: string(name='Device', description='device'),
      deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
      performanceLevel: string(name='PerformanceLevel', description='performanceLevel'),
      autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
      encryptAlgorithm: string(name='EncryptAlgorithm', description='encryptAlgorithm'),
    }
  ](name='DataDisk', description='createDataDiskParams'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  networkInterface?: [
    {
      primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
      VSwitchId: string(name='VSwitchId', description='vswitchId'),
      securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='securityGroupIds'),
      networkInterfaceName: string(name='NetworkInterfaceName', description='networkInterfaceName'),
      description: string(name='Description', description='description'),
    }
  ](name='NetworkInterface', description='createEniParams'),
  userData?: string(name='UserData', description='userData'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  amount?: integer(name='Amount', description='maxAmount'),
  minAmount?: integer(name='MinAmount', description='minAmount'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='spotPriceLimit'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='spotInterruptionBehavior'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagListInner'),
  hpcClusterId?: string(name='HpcClusterId', description='hpcClusterId'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  launchTemplateId?: string(name='LaunchTemplateId', description='launchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName', description='launchTemplateName'),
  launchTemplateVersion?: long(name='LaunchTemplateVersion', description='launchTemplateVersion'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  autoRenewPeriod?: integer(name='AutoRenewPeriod', description='autoRenewPeriod'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  deploymentSetId?: string(name='DeploymentSetId', description='deploymentSetId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='privateIpAddress'),
  creditSpecification?: string(name='CreditSpecification', description='creditSpecification'),
  ipv6Address?: [ string ](name='Ipv6Address', description='ipv6Addresses'),
  ipv6AddressCount?: integer(name='Ipv6AddressCount', description='ipv6AddressCount'),
  deletionProtection?: boolean(name='DeletionProtection', description='deletionProtection'),
  affinity?: string(name='Affinity', description='dedicatedInstanceAffinity'),
  tenancy?: string(name='Tenancy', description='instanceTenancy'),
  storageSetId?: string(name='StorageSetId', description='storageSetId'),
  storageSetPartitionNumber?: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
  cpuOptions: {
    core?: integer(name='Core', description='cpuOptionsCore'),
    threadsPerCore?: integer(name='ThreadsPerCore', description='cpuOptionsHt'),
    numa?: string(name='Numa', description='cpuOptionsNuma'),
  }(name='CpuOptions', description='CpuOptions'),
  httpEndpoint?: string(name='HttpEndpoint', description='httpEndpoint'),
  httpTokens?: string(name='HttpTokens', description='httpTokens'),
  httpPutResponseHopLimit?: integer(name='HttpPutResponseHopLimit', description='httpPutResponseHopLimit'),
}

model RunInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  tradePrice: float(name='TradePrice', description='data.lxOrderResult.tradeAmount'),
  instanceIdSets: {
    instanceIdSet: [ string ](name='InstanceIdSet', description='InstanceIdSet'),
  }(name='InstanceIdSets', description='data.instanceIdSet'),
}

async function runInstancesWithOptions(request: RunInstancesRequest, runtime: Util.RuntimeOptions): RunInstancesResponse {
  Util.validateModel(request);
  return doRequest('RunInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInstancesWithOptions(request, runtime);
}

model ConvertNatPublicIpToEipRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  regionId: string(name='RegionId', description='regionNo'),
}

model ConvertNatPublicIpToEipResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function convertNatPublicIpToEipWithOptions(request: ConvertNatPublicIpToEipRequest, runtime: Util.RuntimeOptions): ConvertNatPublicIpToEipResponse {
  Util.validateModel(request);
  return doRequest('ConvertNatPublicIpToEip', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function convertNatPublicIpToEip(request: ConvertNatPublicIpToEipRequest): ConvertNatPublicIpToEipResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertNatPublicIpToEipWithOptions(request, runtime);
}

model ModifyHpcClusterAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  hpcClusterId: string(name='HpcClusterId', description='hpcClusterId'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
}

model ModifyHpcClusterAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyHpcClusterAttributeWithOptions(request: ModifyHpcClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyHpcClusterAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyHpcClusterAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyHpcClusterAttribute(request: ModifyHpcClusterAttributeRequest): ModifyHpcClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHpcClusterAttributeWithOptions(request, runtime);
}

model DescribeHpcClustersRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  hpcClusterIds?: string(name='HpcClusterIds', description='hpcClusterIds'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeHpcClustersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  hpcClusters: {
    hpcCluster: [
      {
        hpcClusterId: string(name='HpcClusterId', description='hpcClusterId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
      }
    ](name='HpcCluster', description='HpcCluster'),
  }(name='HpcClusters', description='data.data'),
}

async function describeHpcClustersWithOptions(request: DescribeHpcClustersRequest, runtime: Util.RuntimeOptions): DescribeHpcClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeHpcClusters', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeHpcClusters(request: DescribeHpcClustersRequest): DescribeHpcClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHpcClustersWithOptions(request, runtime);
}

model DeleteHpcClusterRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  hpcClusterId: string(name='HpcClusterId', description='hpcClusterId'),
}

model DeleteHpcClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteHpcClusterWithOptions(request: DeleteHpcClusterRequest, runtime: Util.RuntimeOptions): DeleteHpcClusterResponse {
  Util.validateModel(request);
  return doRequest('DeleteHpcCluster', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteHpcCluster(request: DeleteHpcClusterRequest): DeleteHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHpcClusterWithOptions(request, runtime);
}

model CreateHpcClusterRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  description?: string(name='Description', description='description'),
  name: string(name='Name', description='name'),
}

model CreateHpcClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
  hpcClusterId: string(name='HpcClusterId', description='data.clusterId'),
}

async function createHpcClusterWithOptions(request: CreateHpcClusterRequest, runtime: Util.RuntimeOptions): CreateHpcClusterResponse {
  Util.validateModel(request);
  return doRequest('CreateHpcCluster', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createHpcCluster(request: CreateHpcClusterRequest): CreateHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHpcClusterWithOptions(request, runtime);
}

model DescribeSnapshotsUsageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
}

model DescribeSnapshotsUsageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  snapshotCount: integer(name='SnapshotCount', description='data.snapshotCount'),
  snapshotSize: long(name='SnapshotSize', description='data.snapshotSize'),
}

async function describeSnapshotsUsageWithOptions(request: DescribeSnapshotsUsageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshotsUsage', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeSnapshotsUsage(request: DescribeSnapshotsUsageRequest): DescribeSnapshotsUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsUsageWithOptions(request, runtime);
}

model DescribeSpotPriceHistoryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='izNo'),
  networkType: string(name='NetworkType', description='networkType'),
  instanceType: string(name='InstanceType', description='instanceType'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  startTime?: string(name='StartTime', description='utcStartTime'),
  endTime?: string(name='EndTime', description='utcEndTime'),
  OSType?: string(name='OSType', description='osType'),
  offset?: integer(name='Offset', description='pageOffset'),
}

model DescribeSpotPriceHistoryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextOffset: integer(name='NextOffset', description='data.nextPageOffset'),
  currency: string(name='Currency', description='data.currency'),
  spotPrices: {
    spotPriceType: [
      {
        zoneId: string(name='ZoneId', description='izNo'),
        instanceType: string(name='InstanceType', description='instanceType'),
        ioOptimized: string(name='IoOptimized', description='ioOptimized'),
        timestamp: string(name='Timestamp', description='utcTimestamp'),
        networkType: string(name='NetworkType', description='networkType'),
        spotPrice: float(name='SpotPrice', description='spotPrice'),
        originPrice: float(name='OriginPrice', description='originPrice'),
      }
    ](name='SpotPriceType', description='SpotPriceType'),
  }(name='SpotPrices', description='data.data'),
}

async function describeSpotPriceHistoryWithOptions(request: DescribeSpotPriceHistoryRequest, runtime: Util.RuntimeOptions): DescribeSpotPriceHistoryResponse {
  Util.validateModel(request);
  return doRequest('DescribeSpotPriceHistory', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeSpotPriceHistory(request: DescribeSpotPriceHistoryRequest): DescribeSpotPriceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotPriceHistoryWithOptions(request, runtime);
}

model StopInvocationRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  invokeId: string(name='InvokeId', description='taskId'),
  instanceId?: [ string ](name='InstanceId', description='instanceIds'),
}

model StopInvocationResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  return doRequest('StopInvocation', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model ModifyCommandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  commandId: string(name='CommandId', description='commandId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  commandContent?: string(name='CommandContent', description='commandContent'),
  workingDir?: string(name='WorkingDir', description='workingDir'),
  timeout?: long(name='Timeout', description='timeOut'),
}

model ModifyCommandResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyCommandWithOptions(request: ModifyCommandRequest, runtime: Util.RuntimeOptions): ModifyCommandResponse {
  Util.validateModel(request);
  return doRequest('ModifyCommand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyCommand(request: ModifyCommandRequest): ModifyCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommandWithOptions(request, runtime);
}

model InvokeCommandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  commandId: string(name='CommandId', description='commandId'),
  timed?: boolean(name='Timed', description='timed'),
  frequency?: string(name='Frequency', description='frequency'),
  instanceId: [ string ](name='InstanceId', description='instanceIds'),
  parameters?: map[string]any(name='Parameters', description='parameters'),
}

model InvokeCommandResponse = {
  requestId: string(name='RequestId', description='requestId'),
  invokeId: string(name='InvokeId', description='data.taskId'),
}

async function invokeCommandWithOptions(request: InvokeCommandRequest, runtime: Util.RuntimeOptions): InvokeCommandResponse {
  Util.validateModel(request);
  return doRequest('InvokeCommand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function invokeCommand(request: InvokeCommandRequest): InvokeCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeCommandWithOptions(request, runtime);
}

model DescribeInvocationsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  invokeId?: string(name='InvokeId', description='taskId'),
  commandId?: string(name='CommandId', description='commandId'),
  commandName?: string(name='CommandName', description='commandName'),
  commandType?: string(name='CommandType', description='commandType'),
  timed?: boolean(name='Timed', description='timed'),
  invokeStatus?: string(name='InvokeStatus', description='taskStatus'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  contentEncoding?: string(name='ContentEncoding', description='contentEncoding'),
  includeOutput?: boolean(name='IncludeOutput', description='includeOutput'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeInvocationsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='data.totalCount'),
  pageNumber: long(name='PageNumber', description='data.pageNumber'),
  pageSize: long(name='PageSize', description='data.pageSize'),
  invocations: {
    invocation: [
      {
        invokeId: string(name='InvokeId', description='taskId'),
        creationTime: string(name='CreationTime', description='createTime'),
        commandId: string(name='CommandId', description='commandId'),
        commandType: string(name='CommandType', description='commandType'),
        commandName: string(name='CommandName', description='commandName'),
        commandContent: string(name='CommandContent', description='commandContent'),
        frequency: string(name='Frequency', description='frequency'),
        timed: boolean(name='Timed', description='timed'),
        invokeStatus: string(name='InvokeStatus', description='status'),
        invocationStatus: string(name='InvocationStatus', description='status2'),
        parameters: string(name='Parameters', description='parameters'),
        invokeInstances: {
          invokeInstance: [
            {
              instanceId: string(name='InstanceId', description='instanceId'),
              repeats: integer(name='Repeats', description='repeats'),
              instanceInvokeStatus: string(name='InstanceInvokeStatus', description='status'),
              invocationStatus: string(name='InvocationStatus', description='outerStatus'),
              output: string(name='Output', description='output'),
              exitCode: long(name='ExitCode', description='exitCode'),
              dropped: integer(name='Dropped', description='dropped'),
              errorCode: string(name='ErrorCode', description='errorCode'),
              errorInfo: string(name='ErrorInfo', description='errorDesc'),
              creationTime: string(name='CreationTime', description='initTime'),
              startTime: string(name='StartTime', description='startTime'),
              stopTime: string(name='StopTime', description='stopTime'),
              finishTime: string(name='FinishTime', description='finishTime'),
              updateTime: string(name='UpdateTime', description='updateTime'),
            }
          ](name='InvokeInstance', description='InvokeInstance'),
        }(name='InvokeInstances', description='itemLists'),
      }
    ](name='Invocation', description='Invocation'),
  }(name='Invocations', description='data.taskList'),
}

async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInvocations', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeInvocationResultsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  invokeId?: string(name='InvokeId', description='taskId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  commandId?: string(name='CommandId', description='commandId'),
  invokeRecordStatus?: string(name='InvokeRecordStatus', description='invokeRecordStatus'),
  includeHistory?: boolean(name='IncludeHistory', description='includeHistory'),
  contentEncoding?: string(name='ContentEncoding', description='contentEncoding'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeInvocationResultsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  invocation: {
    pageSize: long(name='PageSize', description='pageSize'),
    pageNumber: long(name='PageNumber', description='pageNumber'),
    totalCount: long(name='TotalCount', description='totalCount'),
    invocationResults: {
      invocationResult: [
        {
          commandId: string(name='CommandId', description='commandId'),
          invokeId: string(name='InvokeId', description='taskId'),
          instanceId: string(name='InstanceId', description='instanceId'),
          startTime: string(name='StartTime', description='startTime'),
          stopTime: string(name='StopTime', description='stopTime'),
          finishedTime: string(name='FinishedTime', description='finishedTime'),
          repeats: integer(name='Repeats', description='repeats'),
          output: string(name='Output', description='output'),
          dropped: integer(name='Dropped', description='dropped'),
          invokeRecordStatus: string(name='InvokeRecordStatus', description='status'),
          invocationStatus: string(name='InvocationStatus', description='outerStatus'),
          exitCode: long(name='ExitCode', description='exitCode'),
          errorCode: string(name='ErrorCode', description='errorCode'),
          errorInfo: string(name='ErrorInfo', description='errorDesc'),
        }
      ](name='InvocationResult', description='InvocationResult'),
    }(name='InvocationResults', description='resultLists'),
  }(name='Invocation', description='data'),
}

async function describeInvocationResultsWithOptions(request: DescribeInvocationResultsRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInvocationResults', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultsWithOptions(request, runtime);
}

model DescribeCommandsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  commandId?: string(name='CommandId', description='commandId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  type?: string(name='Type', description='type'),
  contentEncoding?: string(name='ContentEncoding', description='contentEncoding'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeCommandsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='data.totalCount'),
  pageNumber: long(name='PageNumber', description='data.pageNumber'),
  pageSize: long(name='PageSize', description='data.pageSize'),
  commands: {
    command: [
      {
        commandId: string(name='CommandId', description='commandId'),
        name: string(name='Name', description='name'),
        type: string(name='Type', description='type'),
        description: string(name='Description', description='description'),
        commandContent: string(name='CommandContent', description='commandContent'),
        workingDir: string(name='WorkingDir', description='workingDir'),
        timeout: long(name='Timeout', description='timeOut'),
        invokeTimes: integer(name='InvokeTimes', description='invokeTimes'),
        creationTime: string(name='CreationTime', description='creationTime'),
        enableParameter: boolean(name='EnableParameter', description='enableParameter'),
        parameterNames: {
          parameterName: [ string ](name='ParameterName', description='ParameterName'),
        }(name='ParameterNames', description='parameterNames'),
      }
    ](name='Command', description='Command'),
  }(name='Commands', description='data.commandList'),
}

async function describeCommandsWithOptions(request: DescribeCommandsRequest, runtime: Util.RuntimeOptions): DescribeCommandsResponse {
  Util.validateModel(request);
  return doRequest('DescribeCommands', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeCommands(request: DescribeCommandsRequest): DescribeCommandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommandsWithOptions(request, runtime);
}

model DeleteCommandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  commandId: string(name='CommandId', description='commandId'),
}

model DeleteCommandResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteCommandWithOptions(request: DeleteCommandRequest, runtime: Util.RuntimeOptions): DeleteCommandResponse {
  Util.validateModel(request);
  return doRequest('DeleteCommand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommandWithOptions(request, runtime);
}

model CreateCommandRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  name: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  type: string(name='Type', description='type'),
  commandContent: string(name='CommandContent', description='commandContent'),
  workingDir?: string(name='WorkingDir', description='workingDir'),
  timeout?: long(name='Timeout', description='timeout'),
  enableParameter?: boolean(name='EnableParameter', description='enableParameter'),
}

model CreateCommandResponse = {
  requestId: string(name='RequestId', description='requestId'),
  commandId: string(name='CommandId', description='data.commandId'),
}

async function createCommandWithOptions(request: CreateCommandRequest, runtime: Util.RuntimeOptions): CreateCommandResponse {
  Util.validateModel(request);
  return doRequest('CreateCommand', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommandWithOptions(request, runtime);
}

model ModifySecurityGroupEgressRuleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  portRange: string(name='PortRange', description='portRange'),
  destGroupId?: string(name='DestGroupId', description='destGroupNo'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='groupOwnerAliUid'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='groupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model ModifySecurityGroupEgressRuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySecurityGroupEgressRuleWithOptions(request: ModifySecurityGroupEgressRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupEgressRuleResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityGroupEgressRule', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifySecurityGroupEgressRule(request: ModifySecurityGroupEgressRuleRequest): ModifySecurityGroupEgressRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupEgressRuleWithOptions(request, runtime);
}

model ModifyDiskChargeTypeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  regionId: string(name='RegionId', description='regionId'),
  diskIds: string(name='DiskIds', description='diskIds'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  diskChargeType?: string(name='DiskChargeType', description='diskChargeType'),
}

model ModifyDiskChargeTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function modifyDiskChargeTypeWithOptions(request: ModifyDiskChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDiskChargeTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDiskChargeType', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDiskChargeType(request: ModifyDiskChargeTypeRequest): ModifyDiskChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskChargeTypeWithOptions(request, runtime);
}

model ModifyNetworkInterfaceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='securityGroupIdList'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='networkInterfaceName'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  queueNumber?: integer(name='QueueNumber', description='queueNumber'),
  description?: string(name='Description', description='description'),
}

model ModifyNetworkInterfaceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyNetworkInterfaceAttributeWithOptions(request: ModifyNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyNetworkInterfaceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifyNetworkInterfaceAttribute(request: ModifyNetworkInterfaceAttributeRequest): ModifyNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkInterfaceAttributeWithOptions(request, runtime);
}

model DetachNetworkInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='trunkEniId'),
}

model DetachNetworkInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function detachNetworkInterfaceWithOptions(request: DetachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DetachNetworkInterfaceResponse {
  Util.validateModel(request);
  return doRequest('DetachNetworkInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function detachNetworkInterface(request: DetachNetworkInterfaceRequest): DetachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachNetworkInterfaceWithOptions(request, runtime);
}

model DescribeNetworkInterfacesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='primaryIpAddress'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='privateIps'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='eniName'),
  type?: string(name='Type', description='networkInterfaceType'),
  instanceId?: string(name='InstanceId', description='ecsInstanceId'),
  networkInterfaceId?: [ string ](name='NetworkInterfaceId', description='eniInstanceIds'),
  serviceManaged?: boolean(name='ServiceManaged', description='serviceManaged'),
  status?: string(name='Status', description='status'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  nextToken?: string(name='NextToken', description='nextToken'),
  maxResults?: integer(name='MaxResults', description='maxResults'),
}

model DescribeNetworkInterfacesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  nextToken: string(name='NextToken', description='data.nextToken'),
  networkInterfaceSets: {
    networkInterfaceSet: [
      {
        networkInterfaceId: string(name='NetworkInterfaceId', description='instanceId'),
        status: string(name='Status', description='status'),
        type: string(name='Type', description='type'),
        vpcId: string(name='VpcId', description='vpcId'),
        VSwitchId: string(name='VSwitchId', description='vswitchId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        privateIpAddress: string(name='PrivateIpAddress', description='primaryPrivateIpAddress'),
        macAddress: string(name='MacAddress', description='macAddress'),
        networkInterfaceName: string(name='NetworkInterfaceName', description='eniName'),
        description: string(name='Description', description='eniDescription'),
        instanceId: string(name='InstanceId', description='ecsInstanceId'),
        creationTime: string(name='CreationTime', description='uTCCreateTime'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        serviceID: long(name='ServiceID', description='serviceID'),
        serviceManaged: boolean(name='ServiceManaged', description='serviceManaged'),
        queueNumber: integer(name='QueueNumber', description='queueNumber'),
        ownerId: string(name='OwnerId', description='aliUid'),
        privateIpSets: {
          privateIpSet: [
            {
              privateIpAddress: string(name='PrivateIpAddress', description='privateIpAddress'),
              primary: boolean(name='Primary', description='primary'),
              associatedPublicIp: {
                publicIpAddress: string(name='PublicIpAddress', description='publicIpAddress'),
                allocationId: string(name='AllocationId', description='eipInstanceId'),
              }(name='AssociatedPublicIp', description='associatedPublicIp'),
            }
          ](name='PrivateIpSet', description='PrivateIpSet'),
        }(name='PrivateIpSets', description='eniPrivateIpList'),
        ipv6Sets: {
          ipv6Set: [
            {
              ipv6Address: string(name='Ipv6Address', description='ipv6Address'),
            }
          ](name='Ipv6Set', description='Ipv6Set'),
        }(name='Ipv6Sets', description='eniIpv6List'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
        associatedPublicIp: {
          publicIpAddress: string(name='PublicIpAddress', description='publicIpAddress'),
          allocationId: string(name='AllocationId', description='eipInstanceId'),
        }(name='AssociatedPublicIp', description='primaryAssociatedPublicIp'),
        attachment: {
          instanceId: string(name='InstanceId', description='ecsInstanceId'),
          trunkNetworkInterfaceId: string(name='TrunkNetworkInterfaceId', description='trunkEniId'),
          deviceIndex: integer(name='DeviceIndex', description='deviceIndex'),
        }(name='Attachment', description='attachment'),
        securityGroupIds: {
          securityGroupId: [ string ](name='SecurityGroupId', description='SecurityGroupId'),
        }(name='SecurityGroupIds', description='securityGroupIds'),
      }
    ](name='NetworkInterfaceSet', description='NetworkInterfaceSet'),
  }(name='NetworkInterfaceSets', description='data.data'),
}

async function describeNetworkInterfacesWithOptions(request: DescribeNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacesResponse {
  Util.validateModel(request);
  return doRequest('DescribeNetworkInterfaces', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacesWithOptions(request, runtime);
}

model DeleteNetworkInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
}

model DeleteNetworkInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteNetworkInterfaceWithOptions(request: DeleteNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfaceResponse {
  Util.validateModel(request);
  return doRequest('DeleteNetworkInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function deleteNetworkInterface(request: DeleteNetworkInterfaceRequest): DeleteNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfaceWithOptions(request, runtime);
}

model CreateNetworkInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  VSwitchId: string(name='VSwitchId', description='vswitchId'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='primaryIpAddress'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='securityGroupIds'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='networkInterfaceName'),
  description?: string(name='Description', description='description'),
  visible?: boolean(name='Visible', description='visible'),
  instanceType?: string(name='InstanceType', description='eniType'),
  businessType?: string(name='BusinessType', description='businessType'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='privateIpAddresses'),
  secondaryPrivateIpAddressCount?: integer(name='SecondaryPrivateIpAddressCount', description='privateIpCount'),
  clientToken?: string(name='ClientToken', description='token'),
}

model CreateNetworkInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='data.instanceId'),
}

async function createNetworkInterfaceWithOptions(request: CreateNetworkInterfaceRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfaceResponse {
  Util.validateModel(request);
  return doRequest('CreateNetworkInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function createNetworkInterface(request: CreateNetworkInterfaceRequest): CreateNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfaceWithOptions(request, runtime);
}

model AttachNetworkInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='eniId'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='trunkEniId'),
}

model AttachNetworkInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function attachNetworkInterfaceWithOptions(request: AttachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): AttachNetworkInterfaceResponse {
  Util.validateModel(request);
  return doRequest('AttachNetworkInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function attachNetworkInterface(request: AttachNetworkInterfaceRequest): AttachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachNetworkInterfaceWithOptions(request, runtime);
}

model DescribeRecommendInstanceTypeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  cores?: integer(name='Cores', description='cores'),
  memory?: float(name='Memory', description='memory'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='instanceFamilyLevel'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  networkType: string(name='NetworkType', description='networkType'),
  instanceChargeType?: string(name='InstanceChargeType', description='chargeType'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  instanceTypeFamily?: [ string ](name='InstanceTypeFamily', description='supportInstanceTypeFamilies'),
  priorityStrategy?: string(name='PriorityStrategy', description='priorityStrategy'),
  maxPrice?: float(name='MaxPrice', description='maxPrice'),
  regionId: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='systemDiskCategory'),
  scene?: string(name='Scene', description='scene'),
}

model DescribeRecommendInstanceTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    recommendInstanceType: [
      {
        regionId: string(name='RegionId', description='regionId'),
        commodityCode: string(name='CommodityCode', description='commodityCode'),
        scene: string(name='Scene', description='scene'),
        instanceChargeType: string(name='InstanceChargeType', description='chargeType'),
        spotStrategy: string(name='SpotStrategy', description='spotStrategy'),
        priority: integer(name='Priority', description='priority'),
        zones: {
          zone: [
            {
              zoneNo: string(name='ZoneNo', description='zoneNo'),
              networkTypes: {
                networkType: [ string ](name='NetworkType', description='NetworkType'),
              }(name='NetworkTypes', description='networkTypes'),
            }
          ](name='zone', description='zone'),
        }(name='Zones', description='zoneIds'),
        instanceType: {
          generation: string(name='Generation', description='generation'),
          instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
          instanceType: string(name='InstanceType', description='instanceType'),
          supportIoOptimized: string(name='SupportIoOptimized', description='supportIoOptimized'),
          cores: integer(name='Cores', description='cores'),
          memory: integer(name='Memory', description='mem'),
        }(name='InstanceType', description='instanceTypeModel'),
      }
    ](name='RecommendInstanceType', description='RecommendInstanceType'),
  }(name='Data', description='data.productModels'),
}

async function describeRecommendInstanceTypeWithOptions(request: DescribeRecommendInstanceTypeRequest, runtime: Util.RuntimeOptions): DescribeRecommendInstanceTypeResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecommendInstanceType', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeRecommendInstanceType(request: DescribeRecommendInstanceTypeRequest): DescribeRecommendInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecommendInstanceTypeWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceType: string(name='InstanceType', description='instanceType'),
  operatorType?: string(name='OperatorType', description='operatorType'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', description='canMigrateAcrossZone'),
  systemDisk: {
    category?: string(name='Category', description='systemDiskCategory'),
  }(name='SystemDisk', description='SystemDisk'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  rebootTime?: string(name='RebootTime', description='rebootTime'),
  endTime?: string(name='EndTime', description='endTime'),
  rebootWhenFinished?: boolean(name='RebootWhenFinished', description='autoReboot'),
}

model ModifyPrepayInstanceSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function modifyPrepayInstanceSpecWithOptions(request: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyPrepayInstanceSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceChargeTypeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceIds: string(name='InstanceIds', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  includeDataDisks?: boolean(name='IncludeDataDisks', description='includeDataDisks'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  isDetailFee?: boolean(name='IsDetailFee', description='isDetailRefund'),
}

model ModifyInstanceChargeTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
  feeOfInstances: {
    feeOfInstance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        fee: string(name='Fee', description='refundFee'),
        currency: string(name='Currency', description='currency'),
      }
    ](name='FeeOfInstance', description='FeeOfInstance'),
  }(name='FeeOfInstances', description='data.refundFeeOfInstances'),
}

async function modifyInstanceChargeTypeWithOptions(request: ModifyInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceChargeTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceChargeType', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceChargeTypeWithOptions(request, runtime);
}

model JoinResourceGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  resourceId?: string(name='ResourceId', description='resourceId'),
  regionId?: string(name='RegionId', description='regionId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model JoinResourceGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function joinResourceGroupWithOptions(request: JoinResourceGroupRequest, runtime: Util.RuntimeOptions): JoinResourceGroupResponse {
  Util.validateModel(request);
  return doRequest('JoinResourceGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinResourceGroupWithOptions(request, runtime);
}

model ModifySecurityGroupPolicyRequest = {
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  regionId: string(name='RegionId', description='regionNo'),
  innerAccessPolicy: string(name='InnerAccessPolicy', description='policy'),
  clientToken?: string(name='ClientToken', description='token'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model ModifySecurityGroupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySecurityGroupPolicyWithOptions(request: ModifySecurityGroupPolicyRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityGroupPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifySecurityGroupPolicy(request: ModifySecurityGroupPolicyRequest): ModifySecurityGroupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupPolicyWithOptions(request, runtime);
}

model DescribeSecurityGroupReferencesRequest = {
  regionId: string(name='RegionId', description='regionId'),
  securityGroupId: [ string ](name='SecurityGroupId', description='groupNos'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model DescribeSecurityGroupReferencesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  securityGroupReferences: {
    securityGroupReference: [
      {
        securityGroupId: string(name='SecurityGroupId', description='groupNo'),
        referencingSecurityGroups: {
          referencingSecurityGroup: [
            {
              aliUid: string(name='AliUid', description='aliUid'),
              securityGroupId: string(name='SecurityGroupId', description='groupNo'),
            }
          ](name='ReferencingSecurityGroup', description='ReferencingSecurityGroup'),
        }(name='ReferencingSecurityGroups', description='referencingGroups'),
      }
    ](name='SecurityGroupReference', description='SecurityGroupReference'),
  }(name='SecurityGroupReferences', description='data.groupReferences'),
}

async function describeSecurityGroupReferencesWithOptions(request: DescribeSecurityGroupReferencesRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupReferencesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSecurityGroupReferences', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSecurityGroupReferences(request: DescribeSecurityGroupReferencesRequest): DescribeSecurityGroupReferencesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupReferencesWithOptions(request, runtime);
}

model DetachClassicLinkVpcRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  vpcId: string(name='VpcId', description='vpcId'),
}

model DetachClassicLinkVpcResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function detachClassicLinkVpcWithOptions(request: DetachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): DetachClassicLinkVpcResponse {
  Util.validateModel(request);
  return doRequest('DetachClassicLinkVpc', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function detachClassicLinkVpc(request: DetachClassicLinkVpcRequest): DetachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachClassicLinkVpcWithOptions(request, runtime);
}

model DescribeClassicLinkInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  pageNumber?: string(name='PageNumber', description='pageNumber'),
  pageSize?: string(name='PageSize', description='pageSize'),
}

model DescribeClassicLinkInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  links: {
    link: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        vpcId: string(name='VpcId', description='vpcId'),
      }
    ](name='Link', description='Link'),
  }(name='Links', description='data.data'),
}

async function describeClassicLinkInstancesWithOptions(request: DescribeClassicLinkInstancesRequest, runtime: Util.RuntimeOptions): DescribeClassicLinkInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeClassicLinkInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeClassicLinkInstances(request: DescribeClassicLinkInstancesRequest): DescribeClassicLinkInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClassicLinkInstancesWithOptions(request, runtime);
}

model AttachClassicLinkVpcRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  vpcId: string(name='VpcId', description='vpcId'),
}

model AttachClassicLinkVpcResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function attachClassicLinkVpcWithOptions(request: AttachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): AttachClassicLinkVpcResponse {
  Util.validateModel(request);
  return doRequest('AttachClassicLinkVpc', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function attachClassicLinkVpc(request: AttachClassicLinkVpcRequest): AttachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachClassicLinkVpcWithOptions(request, runtime);
}

model DetachInstanceRamRoleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  instanceIds: string(name='InstanceIds', description='instanceIds'),
}

model DetachInstanceRamRoleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  failCount: integer(name='FailCount', description='data.failCount'),
  ramRoleName: string(name='RamRoleName', description='data.ramRoleName'),
  detachInstanceRamRoleResults: {
    detachInstanceRamRoleResult: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        success: boolean(name='Success', description='isSuccess'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
        instanceRamRoleSets: {
          instanceRamRoleSet: [
            {
              instanceId: string(name='InstanceId', description='instanceId'),
              ramRoleName: string(name='RamRoleName', description='roleName'),
            }
          ](name='InstanceRamRoleSet', description='InstanceRamRoleSet'),
        }(name='InstanceRamRoleSets', description='instanceRamRoleInfoModel'),
      }
    ](name='DetachInstanceRamRoleResult', description='DetachInstanceRamRoleResult'),
  }(name='DetachInstanceRamRoleResults', description='data.results'),
}

async function detachInstanceRamRoleWithOptions(request: DetachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DetachInstanceRamRoleResponse {
  Util.validateModel(request);
  return doRequest('DetachInstanceRamRole', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function detachInstanceRamRole(request: DetachInstanceRamRoleRequest): DetachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachInstanceRamRoleWithOptions(request, runtime);
}

model DescribeInstanceRamRoleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  regionId: string(name='RegionId', description='regionId'),
  instanceIds?: string(name='InstanceIds', description='instanceIds'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
}

model DescribeInstanceRamRoleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  instanceRamRoleSets: {
    instanceRamRoleSet: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        ramRoleName: string(name='RamRoleName', description='roleName'),
      }
    ](name='InstanceRamRoleSet', description='InstanceRamRoleSet'),
  }(name='InstanceRamRoleSets', description='data.instanceRamRoles'),
}

async function describeInstanceRamRoleWithOptions(request: DescribeInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DescribeInstanceRamRoleResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceRamRole', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceRamRole(request: DescribeInstanceRamRoleRequest): DescribeInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRamRoleWithOptions(request, runtime);
}

model AttachInstanceRamRoleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  ramRoleName: string(name='RamRoleName', description='ramRoleName'),
  instanceIds: string(name='InstanceIds', description='instanceIds'),
}

model AttachInstanceRamRoleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  failCount: integer(name='FailCount', description='data.failCount'),
  ramRoleName: string(name='RamRoleName', description='data.ramRoleName'),
  attachInstanceRamRoleResults: {
    attachInstanceRamRoleResult: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        success: boolean(name='Success', description='isSuccess'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='AttachInstanceRamRoleResult', description='AttachInstanceRamRoleResult'),
  }(name='AttachInstanceRamRoleResults', description='data.results'),
}

async function attachInstanceRamRoleWithOptions(request: AttachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): AttachInstanceRamRoleResponse {
  Util.validateModel(request);
  return doRequest('AttachInstanceRamRole', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function attachInstanceRamRole(request: AttachInstanceRamRoleRequest): AttachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachInstanceRamRoleWithOptions(request, runtime);
}

model DescribeSnapshotPackageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  regionId: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSnapshotPackageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  snapshotPackages: {
    snapshotPackage: [
      {
        startTime: string(name='StartTime', description='startTime'),
        endTime: string(name='EndTime', description='endTime'),
        initCapacity: long(name='InitCapacity', description='initCapacity'),
        displayName: string(name='DisplayName', description='displayName'),
      }
    ](name='SnapshotPackage', description='SnapshotPackage'),
  }(name='SnapshotPackages', description='data.data'),
}

async function describeSnapshotPackageWithOptions(request: DescribeSnapshotPackageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotPackageResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshotPackage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSnapshotPackage(request: DescribeSnapshotPackageRequest): DescribeSnapshotPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotPackageWithOptions(request, runtime);
}

model ModifySecurityGroupRuleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  portRange: string(name='PortRange', description='portRange'),
  sourceGroupId?: string(name='SourceGroupId', description='sourceGroupNo'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='groupOwnerAliUid'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='groupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model ModifySecurityGroupRuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySecurityGroupRuleWithOptions(request: ModifySecurityGroupRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupRuleResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityGroupRule', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function modifySecurityGroupRule(request: ModifySecurityGroupRuleRequest): ModifySecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupRuleWithOptions(request, runtime);
}

model DescribeSnapshotMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
  category?: string(name='Category', description='category'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSnapshotMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  monitorData: {
    dataPoint: [
      {
        timeStamp: string(name='TimeStamp', description='timestamp'),
        size: long(name='Size', description='average'),
      }
    ](name='DataPoint', description='DataPoint'),
  }(name='MonitorData', description='data'),
}

async function describeSnapshotMonitorDataWithOptions(request: DescribeSnapshotMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeSnapshotMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshotMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSnapshotMonitorData(request: DescribeSnapshotMonitorDataRequest): DescribeSnapshotMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotMonitorDataWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  resourceId: string(name='ResourceId', description='resourceId'),
  period?: integer(name='Period', description='period'),
  priceUnit?: string(name='PriceUnit', description='priceUnit'),
}

model DescribeRenewalPriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  priceInfo: {
    rules: {
      rule: [
        {
          ruleId: long(name='RuleId', description='ruleId'),
          description: string(name='Description', description='description'),
        }
      ](name='Rule', description='Rule'),
    }(name='Rules', description='rules'),
    price: {
      originalPrice: float(name='OriginalPrice', description='originalPrice'),
      discountPrice: float(name='DiscountPrice', description='discountPrice'),
      tradePrice: float(name='TradePrice', description='tradePrice'),
      currency: string(name='Currency', description='currency'),
      detailInfos: {
        resourcePriceModel: [
          {
            resource: string(name='Resource', description='resource'),
            originalPrice: float(name='OriginalPrice', description='originalPrice'),
            discountPrice: float(name='DiscountPrice', description='discountPrice'),
            tradePrice: float(name='TradePrice', description='tradePrice'),
            subRules: {
              rule: [
                {
                  ruleId: long(name='RuleId', description='ruleId'),
                  description: string(name='Description', description='description'),
                }
              ](name='Rule', description='Rule'),
            }(name='SubRules', description='rules'),
          }
        ](name='ResourcePriceModel', description='ResourcePriceModel'),
      }(name='DetailInfos', description='detailInfos'),
    }(name='Price', description='price'),
  }(name='PriceInfo', description='data'),
}

async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  return doRequest('DescribeRenewalPrice', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribePriceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  imageId?: string(name='ImageId', description='imageId'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='networkType'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  systemDisk: {
    category?: string(name='Category', description='systemDiskCategory'),
    size?: integer(name='Size', description='systemDiskSize'),
    performanceLevel?: string(name='PerformanceLevel', description='systemDiskPerformanceLevel'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk: [
    {
      size?: integer(name='Size', description='dataDiskSize1'),
      category?: string(name='Category', description='dataDiskCategory1'),
      performanceLevel?: string(name='PerformanceLevel', description='dataDiskPerformanceLevel1'),
    }
  ](name='DataDisk', description='DataDisk'),
  period?: integer(name='Period', description='period'),
  priceUnit?: string(name='PriceUnit', description='priceUnit'),
  amount?: integer(name='Amount', description='amount'),
  offeringType?: string(name='OfferingType', description='offeringType'),
  instanceAmount?: integer(name='InstanceAmount', description='instanceAmount'),
  scope?: string(name='Scope', description='scope'),
  platform?: string(name='Platform', description='platform'),
  capacity?: integer(name='Capacity', description='capacity'),
}

model DescribePriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  priceInfo: {
    rules: {
      rule: [
        {
          ruleId: long(name='RuleId', description='ruleId'),
          description: string(name='Description', description='description'),
        }
      ](name='Rule', description='Rule'),
    }(name='Rules', description='rules'),
    price: {
      originalPrice: float(name='OriginalPrice', description='originalPrice'),
      discountPrice: float(name='DiscountPrice', description='discountPrice'),
      tradePrice: float(name='TradePrice', description='tradePrice'),
      reservedInstanceHourPrice: float(name='ReservedInstanceHourPrice', description='riHourPrice'),
      currency: string(name='Currency', description='currency'),
      detailInfos: {
        resourcePriceModel: [
          {
            resource: string(name='Resource', description='resource'),
            originalPrice: float(name='OriginalPrice', description='originalPrice'),
            discountPrice: float(name='DiscountPrice', description='discountPrice'),
            tradePrice: float(name='TradePrice', description='tradePrice'),
            subRules: {
              rule: [
                {
                  ruleId: long(name='RuleId', description='ruleId'),
                  description: string(name='Description', description='description'),
                }
              ](name='Rule', description='Rule'),
            }(name='SubRules', description='rules'),
          }
        ](name='ResourcePriceModel', description='ResourcePriceModel'),
      }(name='DetailInfos', description='detailInfos'),
    }(name='Price', description='price'),
  }(name='PriceInfo', description='data'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  return doRequest('DescribePrice', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model ModifyDeploymentSetAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  deploymentSetId: string(name='DeploymentSetId', description='deploymentSetId'),
  description?: string(name='Description', description='description'),
  deploymentSetName?: string(name='DeploymentSetName', description='deploymentSetName'),
  regionId: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDeploymentSetAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDeploymentSetAttributeWithOptions(request: ModifyDeploymentSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyDeploymentSetAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDeploymentSetAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDeploymentSetAttribute(request: ModifyDeploymentSetAttributeRequest): ModifyDeploymentSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeploymentSetAttributeWithOptions(request, runtime);
}

model DescribeDeploymentSetsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  deploymentSetIds?: string(name='DeploymentSetIds', description='deploymentSetIds'),
  networkType?: string(name='NetworkType', description='networkType'),
  strategy?: string(name='Strategy', description='strategy'),
  deploymentSetName?: string(name='DeploymentSetName', description='deploymentSetName'),
  granularity?: string(name='Granularity', description='granularity'),
  domain?: string(name='Domain', description='domain'),
}

model DescribeDeploymentSetsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  deploymentSets: {
    deploymentSet: [
      {
        deploymentSetId: string(name='DeploymentSetId', description='deploymentSetId'),
        deploymentSetDescription: string(name='DeploymentSetDescription', description='deploymentSetDescription'),
        deploymentSetName: string(name='DeploymentSetName', description='deploymentSetName'),
        strategy: string(name='Strategy', description='strategy'),
        deploymentStrategy: string(name='DeploymentStrategy', description='deploymentStrategy'),
        domain: string(name='Domain', description='domain'),
        granularity: string(name='Granularity', description='granularity'),
        instanceAmount: integer(name='InstanceAmount', description='instanceAmount'),
        creationTime: string(name='CreationTime', description='creationTime'),
        instanceIds: {
          instanceId: [ string ](name='InstanceId', description='InstanceId'),
        }(name='InstanceIds', description='instanceIds'),
      }
    ](name='DeploymentSet', description='DeploymentSet'),
  }(name='DeploymentSets', description='data.data'),
}

async function describeDeploymentSetsWithOptions(request: DescribeDeploymentSetsRequest, runtime: Util.RuntimeOptions): DescribeDeploymentSetsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeploymentSets', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeDeploymentSets(request: DescribeDeploymentSetsRequest): DescribeDeploymentSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeploymentSetsWithOptions(request, runtime);
}

model DeleteDeploymentSetRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  deploymentSetId: string(name='DeploymentSetId', description='deploymentSetId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteDeploymentSetResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDeploymentSetWithOptions(request: DeleteDeploymentSetRequest, runtime: Util.RuntimeOptions): DeleteDeploymentSetResponse {
  Util.validateModel(request);
  return doRequest('DeleteDeploymentSet', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteDeploymentSet(request: DeleteDeploymentSetRequest): DeleteDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeploymentSetWithOptions(request, runtime);
}

model CreateDeploymentSetRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  onUnableToRedeployFailedInstance?: string(name='OnUnableToRedeployFailedInstance', description='onUnableToRedeployFailedInstance'),
  description?: string(name='Description', description='description'),
  clientToken?: string(name='ClientToken', description='token'),
  deploymentSetName?: string(name='DeploymentSetName', description='deploymentSetName'),
  domain?: string(name='Domain', description='domain'),
  granularity?: string(name='Granularity', description='granularity'),
  strategy?: string(name='Strategy', description='strategy'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateDeploymentSetResponse = {
  requestId: string(name='RequestId', description='requestId'),
  deploymentSetId: string(name='DeploymentSetId', description='data'),
}

async function createDeploymentSetWithOptions(request: CreateDeploymentSetRequest, runtime: Util.RuntimeOptions): CreateDeploymentSetResponse {
  Util.validateModel(request);
  return doRequest('CreateDeploymentSet', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createDeploymentSet(request: CreateDeploymentSetRequest): CreateDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentSetWithOptions(request, runtime);
}

model ImportKeyPairRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairName: string(name='KeyPairName', description='keyPairName'),
  publicKeyBody: string(name='PublicKeyBody', description='publicKeyBody'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ImportKeyPairResponse = {
  requestId: string(name='RequestId', description='requestId'),
  keyPairName: string(name='KeyPairName', description='data.keyPairName'),
  keyPairFingerPrint: string(name='KeyPairFingerPrint', description='data.keyPairFingerPrint'),
}

async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  return doRequest('ImportKeyPair', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model DetachKeyPairRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairName: string(name='KeyPairName', description='keyPairName'),
  instanceIds: string(name='InstanceIds', description='instanceIds'),
}

model DetachKeyPairResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: string(name='TotalCount', description='data.totalCount'),
  failCount: string(name='FailCount', description='data.failCount'),
  keyPairName: string(name='KeyPairName', description='data.keyPairId'),
  results: {
    result: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        success: string(name='Success', description='success'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='Result', description='Result'),
  }(name='Results', description='data.results'),
}

async function detachKeyPairWithOptions(request: DetachKeyPairRequest, runtime: Util.RuntimeOptions): DetachKeyPairResponse {
  Util.validateModel(request);
  return doRequest('DetachKeyPair', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachKeyPairWithOptions(request, runtime);
}

model DescribeKeyPairsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='keyPairFingerPrint'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeKeyPairsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  keyPairs: {
    keyPair: [
      {
        keyPairName: string(name='KeyPairName', description='keyPairName'),
        keyPairFingerPrint: string(name='KeyPairFingerPrint', description='keyPairFingerPrint'),
        creationTime: string(name='CreationTime', description='createTimeStr'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='KeyPair', description='KeyPair'),
  }(name='KeyPairs', description='data.keyPairs'),
}

async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  return doRequest('DescribeKeyPairs', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DeleteKeyPairsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairNames: string(name='KeyPairNames', description='keyPairNames'),
}

model DeleteKeyPairsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  return doRequest('DeleteKeyPairs', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model CreateKeyPairRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairName: string(name='KeyPairName', description='keyPairName'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model CreateKeyPairResponse = {
  requestId: string(name='RequestId', description='requestId'),
  keyPairId: string(name='KeyPairId', description='data.keyPairId'),
  keyPairName: string(name='KeyPairName', description='data.keyPairName'),
  keyPairFingerPrint: string(name='KeyPairFingerPrint', description='data.keyPairFingerPrint'),
  privateKeyBody: string(name='PrivateKeyBody', description='data.privateKeyBody'),
}

async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  return doRequest('CreateKeyPair', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model AttachKeyPairRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  keyPairName: string(name='KeyPairName', description='keyPairName'),
  instanceIds: string(name='InstanceIds', description='instanceIds'),
}

model AttachKeyPairResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: string(name='TotalCount', description='data.totalCount'),
  failCount: string(name='FailCount', description='data.failCount'),
  keyPairName: string(name='KeyPairName', description='data.keyPairId'),
  results: {
    result: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        success: string(name='Success', description='success'),
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
      }
    ](name='Result', description='Result'),
  }(name='Results', description='data.results'),
}

async function attachKeyPairWithOptions(request: AttachKeyPairRequest, runtime: Util.RuntimeOptions): AttachKeyPairResponse {
  Util.validateModel(request);
  return doRequest('AttachKeyPair', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachKeyPairWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId: string(name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  duration?: integer(name='Duration', description='duration'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  renewalStatus?: string(name='RenewalStatus', description='renewalStatus'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceAutoRenewAttributeWithOptions(request: ModifyInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceAutoRenewAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId?: string(name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionId'),
  renewalStatus?: string(name='RenewalStatus', description='renewalStatus'),
  pageSize?: string(name='PageSize', description='pageSize'),
  pageNumber?: string(name='PageNumber', description='pageNo'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.total'),
  instanceRenewAttributes: {
    instanceRenewAttribute: [
      {
        instanceId: string(name='InstanceId', description='resourceId'),
        autoRenewEnabled: boolean(name='AutoRenewEnabled', description='autoRenewEnabled'),
        duration: integer(name='Duration', description='duration'),
        periodUnit: string(name='PeriodUnit', description='periodUnit'),
        renewalStatus: string(name='RenewalStatus', description='renewalStatus'),
      }
    ](name='InstanceRenewAttribute', description='InstanceRenewAttribute'),
  }(name='InstanceRenewAttributes', description='data.data'),
}

async function describeInstanceAutoRenewAttributeWithOptions(request: DescribeInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceAutoRenewAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeSnapshotLinksRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  diskIds?: string(name='DiskIds', description='diskIds'),
  snapshotLinkIds?: string(name='SnapshotLinkIds', description='snapshotLinkIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeSnapshotLinksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  snapshotLinks: {
    snapshotLink: [
      {
        snapshotLinkId: string(name='SnapshotLinkId', description='snapshotLinkId'),
        regionId: string(name='RegionId', description='regionId'),
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceName: string(name='InstanceName', description='instanceName'),
        sourceDiskId: string(name='SourceDiskId', description='sourceDiskId'),
        sourceDiskName: string(name='SourceDiskName', description='sourceDiskName'),
        sourceDiskSize: integer(name='SourceDiskSize', description='sourceDiskSize'),
        sourceDiskType: string(name='SourceDiskType', description='sourceDiskType'),
        category: string(name='Category', description='category'),
        totalSize: long(name='TotalSize', description='totalSize'),
        totalCount: integer(name='TotalCount', description='totalCount'),
      }
    ](name='SnapshotLink', description='SnapshotLink'),
  }(name='SnapshotLinks', description='data.snapshotLinks'),
}

async function describeSnapshotLinksWithOptions(request: DescribeSnapshotLinksRequest, runtime: Util.RuntimeOptions): DescribeSnapshotLinksResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshotLinks', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSnapshotLinks(request: DescribeSnapshotLinksRequest): DescribeSnapshotLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotLinksWithOptions(request, runtime);
}

model ModifyInstanceAutoReleaseTimeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='autoReleaseTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyInstanceAutoReleaseTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceAutoReleaseTimeWithOptions(request: ModifyInstanceAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoReleaseTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceAutoReleaseTime', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceAutoReleaseTime(request: ModifyInstanceAutoReleaseTimeRequest): ModifyInstanceAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoReleaseTimeWithOptions(request, runtime);
}

model DescribeNewProjectEipMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeNewProjectEipMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  eipMonitorDatas: {
    eipMonitorData: [
      {
        eipRX: integer(name='EipRX', description='eipRx'),
        eipTX: integer(name='EipTX', description='eipTx'),
        eipFlow: integer(name='EipFlow', description='eipFlow'),
        eipBandwidth: integer(name='EipBandwidth', description='eipBandwidth'),
        eipPackets: integer(name='EipPackets', description='eipPackets'),
        timeStamp: string(name='TimeStamp', description='timeStamp'),
      }
    ](name='EipMonitorData', description='EipMonitorData'),
  }(name='EipMonitorDatas', description='data'),
}

async function describeNewProjectEipMonitorDataWithOptions(request: DescribeNewProjectEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeNewProjectEipMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeNewProjectEipMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeNewProjectEipMonitorData(request: DescribeNewProjectEipMonitorDataRequest): DescribeNewProjectEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNewProjectEipMonitorDataWithOptions(request, runtime);
}

model DescribeUserDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeUserDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  userData: string(name='UserData', description='data.userData'),
}

async function describeUserDataWithOptions(request: DescribeUserDataRequest, runtime: Util.RuntimeOptions): DescribeUserDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeUserData', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeUserData(request: DescribeUserDataRequest): DescribeUserDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDataWithOptions(request, runtime);
}

model RemoveBandwidthPackageIpsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='bandwidthPackageId'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  removedIpAddresses: [ string ](name='RemovedIpAddresses', description='removedIpAddresses'),
}

model RemoveBandwidthPackageIpsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeBandwidthPackageIpsWithOptions(request: RemoveBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): RemoveBandwidthPackageIpsResponse {
  Util.validateModel(request);
  return doRequest('RemoveBandwidthPackageIps', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function removeBandwidthPackageIps(request: RemoveBandwidthPackageIpsRequest): RemoveBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBandwidthPackageIpsWithOptions(request, runtime);
}

model ModifyForwardEntryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  forwardTableId: string(name='ForwardTableId', description='forwardTableId'),
  forwardEntryId: string(name='ForwardEntryId', description='forwardEntryId'),
  externalIp?: string(name='ExternalIp', description='externalIp'),
  externalPort?: string(name='ExternalPort', description='externalPort'),
  internalIp?: string(name='InternalIp', description='internalIp'),
  internalPort?: string(name='InternalPort', description='internalPort'),
  ipProtocol?: string(name='IpProtocol', description='ipProtocol'),
  regionId: string(name='RegionId', description='regionId'),
}

model ModifyForwardEntryResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyForwardEntryWithOptions(request: ModifyForwardEntryRequest, runtime: Util.RuntimeOptions): ModifyForwardEntryResponse {
  Util.validateModel(request);
  return doRequest('ModifyForwardEntry', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyForwardEntryWithOptions(request, runtime);
}

model ModifyBandwidthPackageSpecRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='bandwidthPackageId'),
  bandwidth: string(name='Bandwidth', description='bandwidth'),
}

model ModifyBandwidthPackageSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyBandwidthPackageSpecWithOptions(request: ModifyBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyBandwidthPackageSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyBandwidthPackageSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyBandwidthPackageSpec(request: ModifyBandwidthPackageSpecRequest): ModifyBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBandwidthPackageSpecWithOptions(request, runtime);
}

model DescribeNatGatewaysRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  natGatewayId?: string(name='NatGatewayId', description='natGatewayId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeNatGatewaysResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  natGateways: {
    natGateway: [
      {
        natGatewayId: string(name='NatGatewayId', description='natGatewayId'),
        regionId: string(name='RegionId', description='regionId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
        vpcId: string(name='VpcId', description='vpcId'),
        spec: string(name='Spec', description='spec'),
        instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
        businessStatus: string(name='BusinessStatus', description='businessStatus'),
        creationTime: string(name='CreationTime', description='creationTime'),
        status: string(name='Status', description='status'),
        forwardTableIds: {
          forwardTableId: [ string ](name='ForwardTableId', description='ForwardTableId'),
        }(name='ForwardTableIds', description='forwardTableIds'),
        bandwidthPackageIds: {
          bandwidthPackageId: [ string ](name='BandwidthPackageId', description='BandwidthPackageId'),
        }(name='BandwidthPackageIds', description='bandwidthPackageIds'),
      }
    ](name='NatGateway', description='NatGateway'),
  }(name='NatGateways', description='data.natGateways'),
}

async function describeNatGatewaysWithOptions(request: DescribeNatGatewaysRequest, runtime: Util.RuntimeOptions): DescribeNatGatewaysResponse {
  Util.validateModel(request);
  return doRequest('DescribeNatGateways', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatGatewaysWithOptions(request, runtime);
}

model DescribeForwardTableEntriesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  forwardTableId: string(name='ForwardTableId', description='forwardTableId'),
  forwardEntryId?: string(name='ForwardEntryId', description='forwardEntryId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeForwardTableEntriesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  forwardTableEntries: {
    forwardTableEntry: [
      {
        forwardTableId: string(name='ForwardTableId', description='forwardTableId'),
        forwardEntryId: string(name='ForwardEntryId', description='forwardEntryId'),
        externalIp: string(name='ExternalIp', description='externalIp'),
        externalPort: string(name='ExternalPort', description='externalPort'),
        ipProtocol: string(name='IpProtocol', description='ipProtocol'),
        internalIp: string(name='InternalIp', description='internalIp'),
        internalPort: string(name='InternalPort', description='internalPort'),
        status: string(name='Status', description='status'),
      }
    ](name='ForwardTableEntry', description='ForwardTableEntry'),
  }(name='ForwardTableEntries', description='data.forwardTableEntries'),
}

async function describeForwardTableEntriesWithOptions(request: DescribeForwardTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeForwardTableEntriesResponse {
  Util.validateModel(request);
  return doRequest('DescribeForwardTableEntries', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForwardTableEntriesWithOptions(request, runtime);
}

model DescribeBandwidthPackagesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId', description='bandwidthPackageId'),
  natGatewayId?: string(name='NatGatewayId', description='natGatewayId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeBandwidthPackagesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  bandwidthPackages: {
    bandwidthPackage: [
      {
        bandwidthPackageId: string(name='BandwidthPackageId', description='bandwidthPackageId'),
        regionId: string(name='RegionId', description='regionId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
        zoneId: string(name='ZoneId', description='zoneId'),
        natGatewayId: string(name='NatGatewayId', description='gatewayId'),
        bandwidth: string(name='Bandwidth', description='bandwidth'),
        instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
        internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
        businessStatus: string(name='BusinessStatus', description='businessStatus'),
        ipCount: string(name='IpCount', description='ipCount'),
        ISP: string(name='ISP', description='isp'),
        creationTime: string(name='CreationTime', description='creationTime'),
        status: string(name='Status', description='status'),
        publicIpAddresses: {
          publicIpAddresse: [
            {
              allocationId: string(name='AllocationId', description='allocationId'),
              ipAddress: string(name='IpAddress', description='ipAddress'),
            }
          ](name='PublicIpAddresse', description='PublicIpAddresse'),
        }(name='PublicIpAddresses', description='publicIpAddresses'),
      }
    ](name='BandwidthPackage', description='BandwidthPackage'),
  }(name='BandwidthPackages', description='data.bandwidthPackages'),
}

async function describeBandwidthPackagesWithOptions(request: DescribeBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeBandwidthPackagesResponse {
  Util.validateModel(request);
  return doRequest('DescribeBandwidthPackages', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeBandwidthPackages(request: DescribeBandwidthPackagesRequest): DescribeBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthPackagesWithOptions(request, runtime);
}

model DeleteNatGatewayRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  natGatewayId: string(name='NatGatewayId', description='natGatewayId'),
}

model DeleteNatGatewayResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteNatGatewayWithOptions(request: DeleteNatGatewayRequest, runtime: Util.RuntimeOptions): DeleteNatGatewayResponse {
  Util.validateModel(request);
  return doRequest('DeleteNatGateway', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatGatewayWithOptions(request, runtime);
}

model DeleteForwardEntryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  forwardTableId: string(name='ForwardTableId', description='forwardTableId'),
  forwardEntryId: string(name='ForwardEntryId', description='forwardEntryId'),
}

model DeleteForwardEntryResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteForwardEntryWithOptions(request: DeleteForwardEntryRequest, runtime: Util.RuntimeOptions): DeleteForwardEntryResponse {
  Util.validateModel(request);
  return doRequest('DeleteForwardEntry', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteForwardEntryWithOptions(request, runtime);
}

model DeleteBandwidthPackageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='bandwidthPackageId'),
}

model DeleteBandwidthPackageResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteBandwidthPackageWithOptions(request: DeleteBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteBandwidthPackageResponse {
  Util.validateModel(request);
  return doRequest('DeleteBandwidthPackage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteBandwidthPackage(request: DeleteBandwidthPackageRequest): DeleteBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBandwidthPackageWithOptions(request, runtime);
}

model CreateNatGatewayRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  vpcId: string(name='VpcId', description='vpcId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  bandwidthPackage: [
    {
      ipCount: integer(name='IpCount', description='ipCount'),
      bandwidth: integer(name='Bandwidth', description='bandwidth'),
      zone: string(name='Zone', description='zoneId'),
    }
  ](name='BandwidthPackage', description='bandwidthPackage'),
}

model CreateNatGatewayResponse = {
  requestId: string(name='RequestId', description='requestId'),
  natGatewayId: string(name='NatGatewayId', description='data.natGatewayId'),
  forwardTableIds: {
    forwardTableId: [ string ](name='ForwardTableId', description='ForwardTableId'),
  }(name='ForwardTableIds', description='data.forwardTableIds'),
  bandwidthPackageIds: {
    bandwidthPackageId: [ string ](name='BandwidthPackageId', description='BandwidthPackageId'),
  }(name='BandwidthPackageIds', description='data.bandwidthPackageIds'),
}

async function createNatGatewayWithOptions(request: CreateNatGatewayRequest, runtime: Util.RuntimeOptions): CreateNatGatewayResponse {
  Util.validateModel(request);
  return doRequest('CreateNatGateway', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatGatewayWithOptions(request, runtime);
}

model CreateForwardEntryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  forwardTableId: string(name='ForwardTableId', description='forwardTableId'),
  externalIp: string(name='ExternalIp', description='externalIp'),
  externalPort: string(name='ExternalPort', description='externalPort'),
  internalIp: string(name='InternalIp', description='internalIp'),
  internalPort: string(name='InternalPort', description='internalPort'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
}

model CreateForwardEntryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  forwardEntryId: string(name='ForwardEntryId', description='data.forwardEntryId'),
}

async function createForwardEntryWithOptions(request: CreateForwardEntryRequest, runtime: Util.RuntimeOptions): CreateForwardEntryResponse {
  Util.validateModel(request);
  return doRequest('CreateForwardEntry', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createForwardEntryWithOptions(request, runtime);
}

model AddBandwidthPackageIpsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='bandwidthPackageId'),
  ipCount: string(name='IpCount', description='ipCount'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model AddBandwidthPackageIpsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addBandwidthPackageIpsWithOptions(request: AddBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): AddBandwidthPackageIpsResponse {
  Util.validateModel(request);
  return doRequest('AddBandwidthPackageIps', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function addBandwidthPackageIps(request: AddBandwidthPackageIpsRequest): AddBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBandwidthPackageIpsWithOptions(request, runtime);
}

model EipFillProductRequest = {
  data: string(name='data', description='data'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model EipFillProductResponse = {
  requestId: string(name='requestId', description='requestId'),
  data: string(name='data', description='data'),
  code: string(name='code', description='code'),
  success: boolean(name='success', description='success'),
  message: string(name='message', description='message'),
}

async function eipFillProductWithOptions(request: EipFillProductRequest, runtime: Util.RuntimeOptions): EipFillProductResponse {
  Util.validateModel(request);
  return doRequest('EipFillProduct', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function eipFillProduct(request: EipFillProductRequest): EipFillProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillProductWithOptions(request, runtime);
}

model EipNotifyPaidRequest = {
  data: string(name='data', description='data'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model EipNotifyPaidResponse = {
  requestId: string(name='requestId', description='requestId'),
  data: string(name='data', description='data'),
  code: string(name='code', description='code'),
  message: string(name='message', description='message'),
  success: boolean(name='success', description='success'),
}

async function eipNotifyPaidWithOptions(request: EipNotifyPaidRequest, runtime: Util.RuntimeOptions): EipNotifyPaidResponse {
  Util.validateModel(request);
  return doRequest('EipNotifyPaid', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function eipNotifyPaid(request: EipNotifyPaidRequest): EipNotifyPaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipNotifyPaidWithOptions(request, runtime);
}

model EipFillParamsRequest = {
  data: string(name='data', description='data'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model EipFillParamsResponse = {
  requestId: string(name='requestId', description='requestId'),
  data: string(name='data', description='data'),
  code: string(name='code', description='code'),
  success: boolean(name='success', description='success'),
  message: string(name='message', description='message'),
}

async function eipFillParamsWithOptions(request: EipFillParamsRequest, runtime: Util.RuntimeOptions): EipFillParamsResponse {
  Util.validateModel(request);
  return doRequest('EipFillParams', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function eipFillParams(request: EipFillParamsRequest): EipFillParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillParamsWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyExRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='regionId', description='regionId'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='autoSnapshotPolicyName'),
  timePoints?: string(name='timePoints', description='timePoints'),
  repeatWeekdays?: string(name='repeatWeekdays', description='repeatWeekdays'),
  retentionDays?: integer(name='retentionDays', description='retentionDays'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='enableCrossRegionCopy'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='targetCopyRegions'),
  copiedSnapshotsRetentionDays?: integer(name='CopiedSnapshotsRetentionDays', description='copiedSnapshotsRetentionDays'),
}

model ModifyAutoSnapshotPolicyExResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAutoSnapshotPolicyExWithOptions(request: ModifyAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  return doRequest('ModifyAutoSnapshotPolicyEx', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyAutoSnapshotPolicyEx(request: ModifyAutoSnapshotPolicyExRequest): ModifyAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyExWithOptions(request, runtime);
}

model DescribeAutoSnapshotPolicyExRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model DescribeAutoSnapshotPolicyExResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  autoSnapshotPolicies: {
    autoSnapshotPolicy: [
      {
        autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='snapshotPolicyId'),
        regionId: string(name='RegionId', description='regionId'),
        autoSnapshotPolicyName: string(name='AutoSnapshotPolicyName', description='autoSnapshotPolicyName'),
        timePoints: string(name='TimePoints', description='timePoints'),
        repeatWeekdays: string(name='RepeatWeekdays', description='repeatWeekdays'),
        retentionDays: integer(name='RetentionDays', description='retentionDays'),
        diskNums: integer(name='DiskNums', description='diskNums'),
        volumeNums: integer(name='VolumeNums', description='volumeNums'),
        creationTime: string(name='CreationTime', description='creationTime'),
        status: string(name='Status', description='status'),
        enableCrossRegionCopy: boolean(name='EnableCrossRegionCopy', description='enableCrossRegionCopy'),
        targetCopyRegions: string(name='TargetCopyRegions', description='targetCopyRegions'),
        copiedSnapshotsRetentionDays: integer(name='CopiedSnapshotsRetentionDays', description='copiedSnapshotsRetentionDays'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='AutoSnapshotPolicy', description='AutoSnapshotPolicy'),
  }(name='AutoSnapshotPolicies', description='data.autoSnapshotPolicies'),
}

async function describeAutoSnapshotPolicyExWithOptions(request: DescribeAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoSnapshotPolicyEx', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeAutoSnapshotPolicyEx(request: DescribeAutoSnapshotPolicyExRequest): DescribeAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPolicyExWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='regionId', description='regionId'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='autoSnapshotPolicyId'),
}

model DeleteAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('DeleteAutoSnapshotPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='regionId', description='regionId'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='autoSnapshotPolicyName'),
  timePoints: string(name='timePoints', description='timePoints'),
  repeatWeekdays: string(name='repeatWeekdays', description='repeatWeekdays'),
  retentionDays: integer(name='retentionDays', description='retentionDays'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='enableCrossRegionCopy'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='targetCopyRegions'),
  copiedSnapshotsRetentionDays?: integer(name='CopiedSnapshotsRetentionDays', description='copiedSnapshotsRetentionDays'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model CreateAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='data.autoSnapshotPolicyId'),
}

async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('CreateAutoSnapshotPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='regionId', description='regionId'),
  diskIds: string(name='diskIds', description='diskIds'),
}

model CancelAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('CancelAutoSnapshotPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='regionId', description='regionId'),
  autoSnapshotPolicyId: string(name='autoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  diskIds: string(name='diskIds', description='diskIds'),
}

model ApplyAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('ApplyAutoSnapshotPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model DescribeImageSupportInstanceTypesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId?: string(name='ImageId', description='imageId'),
  actionType?: string(name='ActionType', description='actionType'),
}

model DescribeImageSupportInstanceTypesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  imageId: string(name='ImageId', description='data.imageId'),
  instanceTypes: {
    instanceType: [
      {
        instanceTypeId: string(name='InstanceTypeId', description='instanceTypeId'),
        cpuCoreCount: integer(name='CpuCoreCount', description='cpuCoreCount'),
        memorySize: float(name='MemorySize', description='memorySize'),
        instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
      }
    ](name='InstanceType', description='InstanceType'),
  }(name='InstanceTypes', description='data.instanceTypes'),
}

async function describeImageSupportInstanceTypesWithOptions(request: DescribeImageSupportInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeImageSupportInstanceTypesResponse {
  Util.validateModel(request);
  return doRequest('DescribeImageSupportInstanceTypes', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeImageSupportInstanceTypes(request: DescribeImageSupportInstanceTypesRequest): DescribeImageSupportInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSupportInstanceTypesWithOptions(request, runtime);
}

model TerminateVirtualBorderRouterRequest = {
  regionId: string(name='RegionId', description='regionId'),
  vbrId: string(name='VbrId', description='vbrId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model TerminateVirtualBorderRouterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function terminateVirtualBorderRouterWithOptions(request: TerminateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): TerminateVirtualBorderRouterResponse {
  Util.validateModel(request);
  return doRequest('TerminateVirtualBorderRouter', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateVirtualBorderRouterWithOptions(request, runtime);
}

model TerminatePhysicalConnectionRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model TerminatePhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function terminatePhysicalConnectionWithOptions(request: TerminatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): TerminatePhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('TerminatePhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminatePhysicalConnectionWithOptions(request, runtime);
}

model RecoverVirtualBorderRouterRequest = {
  regionId: string(name='RegionId', description='regionId'),
  vbrId: string(name='VbrId', description='vbrId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model RecoverVirtualBorderRouterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function recoverVirtualBorderRouterWithOptions(request: RecoverVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): RecoverVirtualBorderRouterResponse {
  Util.validateModel(request);
  return doRequest('RecoverVirtualBorderRouter', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverVirtualBorderRouterWithOptions(request, runtime);
}

model ModifyVirtualBorderRouterAttributeRequest = {
  regionId: string(name='RegionId', description='regionId'),
  vbrId: string(name='VbrId', description='vbrId'),
  vlanId?: integer(name='VlanId', description='vlanId'),
  circuitCode?: string(name='CircuitCode', description='circuitCode'),
  localGatewayIp?: string(name='LocalGatewayIp', description='localGatewayIp'),
  peerGatewayIp?: string(name='PeerGatewayIp', description='peerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', description='peeringSubnetMask'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyVirtualBorderRouterAttributeWithOptions(request: ModifyVirtualBorderRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVirtualBorderRouterAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyVirtualBorderRouterAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualBorderRouterAttributeWithOptions(request, runtime);
}

model ModifyPhysicalConnectionAttributeRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  lineOperator?: string(name='LineOperator', description='lineOperator'),
  bandwidth?: integer(name='bandwidth', description='bandwidth'),
  peerLocation?: string(name='PeerLocation', description='peerLocation'),
  portType?: string(name='PortType', description='portType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='redundantPhysicalConnectionId'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
  circuitCode?: string(name='CircuitCode', description='circuitCode'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyPhysicalConnectionAttributeWithOptions(request: ModifyPhysicalConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyPhysicalConnectionAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyPhysicalConnectionAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhysicalConnectionAttributeWithOptions(request, runtime);
}

model EnablePhysicalConnectionRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model EnablePhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function enablePhysicalConnectionWithOptions(request: EnablePhysicalConnectionRequest, runtime: Util.RuntimeOptions): EnablePhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('EnablePhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enablePhysicalConnectionWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  virtualBorderRouterForPhysicalConnectionSet: {
    virtualBorderRouterForPhysicalConnectionType: [
      {
        vbrId: string(name='VbrId', description='vbrId'),
        vbrOwnerUid: long(name='VbrOwnerUid', description='vbrOwnerUid'),
        creationTime: string(name='CreationTime', description='creationTime'),
        activationTime: string(name='ActivationTime', description='activationTime'),
        terminationTime: string(name='TerminationTime', description='terminationTime'),
        recoveryTime: string(name='RecoveryTime', description='recoveryTime'),
        vlanId: integer(name='VlanId', description='vlanId'),
        circuitCode: string(name='CircuitCode', description='circuitCode'),
      }
    ](name='VirtualBorderRouterForPhysicalConnectionType', description='VirtualBorderRouterForPhysicalConnectionType'),
  }(name='VirtualBorderRouterForPhysicalConnectionSet', description='data.virtualBorderRouterForPhysicalConnectionSet'),
}

async function describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('DescribeVirtualBorderRoutersForPhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeVirtualBorderRoutersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  virtualBorderRouterSet: {
    virtualBorderRouterType: [
      {
        vbrId: string(name='VbrId', description='vbrId'),
        creationTime: string(name='CreationTime', description='creationTime'),
        activationTime: string(name='ActivationTime', description='activationTime'),
        terminationTime: string(name='TerminationTime', description='terminationTime'),
        recoveryTime: string(name='RecoveryTime', description='recoveryTime'),
        status: string(name='Status', description='status'),
        vlanId: integer(name='VlanId', description='vlanId'),
        circuitCode: string(name='CircuitCode', description='circuitCode'),
        routeTableId: string(name='RouteTableId', description='routeTableId'),
        vlanInterfaceId: string(name='VlanInterfaceId', description='vlanInterfaceId'),
        localGatewayIp: string(name='LocalGatewayIp', description='localGatewayIp'),
        peerGatewayIp: string(name='PeerGatewayIp', description='peerGatewayIp'),
        peeringSubnetMask: string(name='PeeringSubnetMask', description='peeringSubnetMask'),
        physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
        physicalConnectionStatus: string(name='PhysicalConnectionStatus', description='physicalConnectionStatus'),
        physicalConnectionBusinessStatus: string(name='PhysicalConnectionBusinessStatus', description='physicalConnectionBusinessStatus'),
        physicalConnectionOwnerUid: string(name='PhysicalConnectionOwnerUid', description='physicalConnectionOwnerUid'),
        accessPointId: string(name='AccessPointId', description='accessPointId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
      }
    ](name='VirtualBorderRouterType', description='VirtualBorderRouterType'),
  }(name='VirtualBorderRouterSet', description='data.virtualBorderRouterSet'),
}

async function describeVirtualBorderRoutersWithOptions(request: DescribeVirtualBorderRoutersRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersResponse {
  Util.validateModel(request);
  return doRequest('DescribeVirtualBorderRouters', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersWithOptions(request, runtime);
}

model DescribePhysicalConnectionsRequest = {
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model DescribePhysicalConnectionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  physicalConnectionSet: {
    physicalConnectionType: [
      {
        physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
        accessPointId: string(name='AccessPointId', description='accessPointId'),
        type: string(name='Type', description='type'),
        status: string(name='Status', description='status'),
        businessStatus: string(name='BusinessStatus', description='businessStatus'),
        creationTime: string(name='CreationTime', description='creationTime'),
        enabledTime: string(name='EnabledTime', description='enabledTime'),
        lineOperator: string(name='LineOperator', description='lineOperator'),
        spec: string(name='Spec', description='spec'),
        peerLocation: string(name='PeerLocation', description='peerLocation'),
        portType: string(name='PortType', description='portType'),
        redundantPhysicalConnectionId: string(name='RedundantPhysicalConnectionId', description='redundantPhysicalConnectionId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
        adLocation: string(name='AdLocation', description='adLocation'),
        portNumber: string(name='PortNumber', description='portNumber'),
        circuitCode: string(name='CircuitCode', description='circuitCode'),
        bandwidth: long(name='Bandwidth', description='bandwidth'),
      }
    ](name='PhysicalConnectionType', description='PhysicalConnectionType'),
  }(name='PhysicalConnectionSet', description='data.physicalConnectionSet'),
}

async function describePhysicalConnectionsWithOptions(request: DescribePhysicalConnectionsRequest, runtime: Util.RuntimeOptions): DescribePhysicalConnectionsResponse {
  Util.validateModel(request);
  return doRequest('DescribePhysicalConnections', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhysicalConnectionsWithOptions(request, runtime);
}

model DescribeAccessPointsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  type?: string(name='Type', description='type'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeAccessPointsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  accessPointSet: {
    accessPointType: [
      {
        accessPointId: string(name='AccessPointId', description='accessPointId'),
        status: string(name='Status', description='status'),
        type: string(name='Type', description='type'),
        attachedRegionNo: string(name='AttachedRegionNo', description='attachedRegionNo'),
        location: string(name='Location', description='location'),
        hostOperator: string(name='HostOperator', description='hostOperator'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
      }
    ](name='AccessPointType', description='AccessPointType'),
  }(name='AccessPointSet', description='data.accessPointSet'),
}

async function describeAccessPointsWithOptions(request: DescribeAccessPointsRequest, runtime: Util.RuntimeOptions): DescribeAccessPointsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccessPoints', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessPointsWithOptions(request, runtime);
}

model DeleteVirtualBorderRouterRequest = {
  regionId: string(name='RegionId', description='regionId'),
  vbrId: string(name='VbrId', description='vbrId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model DeleteVirtualBorderRouterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteVirtualBorderRouterWithOptions(request: DeleteVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): DeleteVirtualBorderRouterResponse {
  Util.validateModel(request);
  return doRequest('DeleteVirtualBorderRouter', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualBorderRouterWithOptions(request, runtime);
}

model DeletePhysicalConnectionRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeletePhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deletePhysicalConnectionWithOptions(request: DeletePhysicalConnectionRequest, runtime: Util.RuntimeOptions): DeletePhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('DeletePhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalConnectionWithOptions(request, runtime);
}

model CreateVirtualBorderRouterRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  vbrOwnerId?: long(name='VbrOwnerId', description='vbrOwnerId'),
  vlanId: integer(name='VlanId', description='vlanId'),
  circuitCode?: string(name='CircuitCode', description='circuitCode'),
  localGatewayIp?: string(name='LocalGatewayIp', description='localGatewayIp'),
  peerGatewayIp?: string(name='PeerGatewayIp', description='peerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', description='peeringSubnetMask'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model CreateVirtualBorderRouterResponse = {
  requestId: string(name='RequestId', description='requestId'),
  vbrId: string(name='VbrId', description='data.vbrId'),
}

async function createVirtualBorderRouterWithOptions(request: CreateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): CreateVirtualBorderRouterResponse {
  Util.validateModel(request);
  return doRequest('CreateVirtualBorderRouter', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualBorderRouterWithOptions(request, runtime);
}

model CreatePhysicalConnectionRequest = {
  regionId: string(name='RegionId', description='regionId'),
  accessPointId: string(name='AccessPointId', description='accessPointId'),
  type?: string(name='Type', description='type'),
  lineOperator: string(name='LineOperator', description='lineOperator'),
  bandwidth?: integer(name='bandwidth', description='bandwidth'),
  peerLocation: string(name='PeerLocation', description='peerLocation'),
  portType?: string(name='PortType', description='portType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='redundantPhysicalConnectionId'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
  circuitCode?: string(name='CircuitCode', description='circuitCode'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model CreatePhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='data.physicalConnectionId'),
}

async function createPhysicalConnectionWithOptions(request: CreatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('CreatePhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionWithOptions(request, runtime);
}

model CancelPhysicalConnectionRequest = {
  regionId: string(name='RegionId', description='regionId'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='physicalConnectionId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model CancelPhysicalConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelPhysicalConnectionWithOptions(request: CancelPhysicalConnectionRequest, runtime: Util.RuntimeOptions): CancelPhysicalConnectionResponse {
  Util.validateModel(request);
  return doRequest('CancelPhysicalConnection', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPhysicalConnectionWithOptions(request, runtime);
}

model ImportImageRequest = {
  diskDeviceMapping?: [
    {
      format?: string(name='Format', description='format'),
      OSSBucket?: string(name='OSSBucket', description='oSSBucket'),
      OSSObject?: string(name='OSSObject', description='oSSObject'),
      diskImSize?: integer(name='DiskImSize', description='diskImSize'),
      diskImageSize?: integer(name='DiskImageSize', description='diskImageSize'),
      device?: string(name='Device', description='device'),
    }
  ](name='DiskDeviceMapping', description='dataDiskDeviceMappingParam'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageName?: string(name='ImageName', description='imageName'),
  description?: string(name='Description', description='description'),
  architecture?: string(name='Architecture', description='architecture'),
  OSType?: string(name='OSType', description='osType'),
  platform?: string(name='Platform', description='platform'),
  roleName?: string(name='RoleName', description='roleName'),
  licenseType?: string(name='LicenseType', description='licenseType'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ImportImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
  regionId: string(name='RegionId', description='data.regionId'),
  imageId: string(name='ImageId', description='data.imageId'),
}

async function importImageWithOptions(request: ImportImageRequest, runtime: Util.RuntimeOptions): ImportImageResponse {
  Util.validateModel(request);
  return doRequest('ImportImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function importImage(request: ImportImageRequest): ImportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return importImageWithOptions(request, runtime);
}

model ExportImageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageId'),
  OSSBucket: string(name='OSSBucket', description='ossBucket'),
  OSSPrefix?: string(name='OSSPrefix', description='ossPrefix'),
  imageFormat?: string(name='ImageFormat', description='imageFormat'),
  roleName?: string(name='RoleName', description='roleName'),
}

model ExportImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
  regionId: string(name='RegionId', description='data.regionId'),
}

async function exportImageWithOptions(request: ExportImageRequest, runtime: Util.RuntimeOptions): ExportImageResponse {
  Util.validateModel(request);
  return doRequest('ExportImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model DescribeTasksRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  taskIds?: string(name='TaskIds', description='taskIds'),
  taskAction?: string(name='TaskAction', description='taskAction'),
  taskStatus?: string(name='TaskStatus', description='taskStatus'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
}

model DescribeTasksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  taskSet: {
    task: [
      {
        taskId: string(name='TaskId', description='taskId'),
        taskAction: string(name='TaskAction', description='taskAction'),
        taskStatus: string(name='TaskStatus', description='taskStatus'),
        supportCancel: string(name='SupportCancel', description='supportCancel'),
        creationTime: string(name='CreationTime', description='creationTime'),
        finishedTime: string(name='FinishedTime', description='finishedTime'),
      }
    ](name='Task', description='Task'),
  }(name='TaskSet', description='data.data'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeTasks', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeTaskAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  taskId: string(name='TaskId', description='taskId'),
}

model DescribeTaskAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  taskAction: string(name='TaskAction', description='data.taskAction'),
  taskStatus: string(name='TaskStatus', description='data.taskStatus'),
  taskProcess: string(name='TaskProcess', description='data.taskProcess'),
  supportCancel: string(name='SupportCancel', description='data.supportCancel'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  successCount: integer(name='SuccessCount', description='data.successCount'),
  failedCount: integer(name='FailedCount', description='data.failedCount'),
  creationTime: string(name='CreationTime', description='data.creationTime'),
  finishedTime: string(name='FinishedTime', description='data.finishedTime'),
  operationProgressSet: {
    operationProgress: [
      {
        operationStatus: string(name='OperationStatus', description='operationStatus'),
        errorCode: string(name='ErrorCode', description='errorCode'),
        errorMsg: string(name='ErrorMsg', description='errorMsg'),
        relatedItemSet: {
          relatedItem: [
            {
              name: string(name='Name', description='name'),
              value: string(name='Value', description='value'),
            }
          ](name='RelatedItem', description='RelatedItem'),
        }(name='RelatedItemSet', description='relatedItemSet'),
      }
    ](name='OperationProgress', description='OperationProgress'),
  }(name='OperationProgressSet', description='data.operationProgressSet'),
}

async function describeTaskAttributeWithOptions(request: DescribeTaskAttributeRequest, runtime: Util.RuntimeOptions): DescribeTaskAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeTaskAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeTaskAttribute(request: DescribeTaskAttributeRequest): DescribeTaskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskAttributeWithOptions(request, runtime);
}

model CancelTaskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  taskId: string(name='TaskId', description='taskId'),
}

model CancelTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelTaskWithOptions(request: CancelTaskRequest, runtime: Util.RuntimeOptions): CancelTaskResponse {
  Util.validateModel(request);
  return doRequest('CancelTask', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelTaskWithOptions(request, runtime);
}

model DescribeInstanceTypeFamiliesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionId'),
  generation?: string(name='Generation', description='generation'),
}

model DescribeInstanceTypeFamiliesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceTypeFamilies: {
    instanceTypeFamily: [
      {
        instanceTypeFamilyId: string(name='InstanceTypeFamilyId', description='instanceTypeFamilyId'),
        generation: string(name='Generation', description='generation'),
      }
    ](name='InstanceTypeFamily', description='InstanceTypeFamily'),
  }(name='InstanceTypeFamilies', description='data'),
}

async function describeInstanceTypeFamiliesWithOptions(request: DescribeInstanceTypeFamiliesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypeFamiliesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceTypeFamilies', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceTypeFamilies(request: DescribeInstanceTypeFamiliesRequest): DescribeInstanceTypeFamiliesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypeFamiliesWithOptions(request, runtime);
}

model ModifyRouterInterfaceSpecRequest = {
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
  spec: string(name='Spec', description='spec'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model ModifyRouterInterfaceSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
  spec: string(name='Spec', description='data.spec'),
}

async function modifyRouterInterfaceSpecWithOptions(request: ModifyRouterInterfaceSpecRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyRouterInterfaceSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceSpecWithOptions(request, runtime);
}

model ModifyRouterInterfaceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
  name?: string(name='Name', description='name'),
  description?: string(name='Description', description='description'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', description='oppositeInterfaceId'),
  oppositeRouterId?: string(name='OppositeRouterId', description='oppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType', description='oppositeRouterType'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId', description='oppositeInterfaceOwnerId'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='healthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='healthCheckTargetIp'),
}

model ModifyRouterInterfaceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyRouterInterfaceAttributeWithOptions(request: ModifyRouterInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyRouterInterfaceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceAttributeWithOptions(request, runtime);
}

model DescribeRouterInterfacesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeRouterInterfacesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  routerInterfaceSet: {
    routerInterfaceType: [
      {
        routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
        oppositeRegionId: string(name='OppositeRegionId', description='oppositeRegionId'),
        role: string(name='Role', description='role'),
        spec: string(name='Spec', description='spec'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='description'),
        routerId: string(name='RouterId', description='routerId'),
        routerType: string(name='RouterType', description='routerType'),
        creationTime: string(name='CreationTime', description='creationTime'),
        endTime: string(name='EndTime', description='endTime'),
        chargeType: string(name='ChargeType', description='chargeType'),
        status: string(name='Status', description='status'),
        businessStatus: string(name='BusinessStatus', description='businessStatus'),
        connectedTime: string(name='ConnectedTime', description='connectedTime'),
        oppositeInterfaceId: string(name='OppositeInterfaceId', description='oppositeInterfaceId'),
        oppositeInterfaceSpec: string(name='OppositeInterfaceSpec', description='oppositeInterfaceSpec'),
        oppositeInterfaceStatus: string(name='OppositeInterfaceStatus', description='oppositeInterfaceStatus'),
        oppositeInterfaceBusinessStatus: string(name='OppositeInterfaceBusinessStatus', description='oppositeInterfaceBusinessStatus'),
        oppositeRouterId: string(name='OppositeRouterId', description='oppositeRouterId'),
        oppositeRouterType: string(name='OppositeRouterType', description='oppositeRouterType'),
        oppositeInterfaceOwnerId: string(name='OppositeInterfaceOwnerId', description='oppositeInterfaceOwnerId'),
        accessPointId: string(name='AccessPointId', description='accessPointId'),
        oppositeAccessPointId: string(name='OppositeAccessPointId', description='oppositeAccessPointId'),
        healthCheckSourceIp: string(name='HealthCheckSourceIp', description='healthCheckSourceIp'),
        healthCheckTargetIp: string(name='HealthCheckTargetIp', description='healthCheckTargetIp'),
      }
    ](name='RouterInterfaceType', description='RouterInterfaceType'),
  }(name='RouterInterfaceSet', description='data.routerInterfaceSet'),
}

async function describeRouterInterfacesWithOptions(request: DescribeRouterInterfacesRequest, runtime: Util.RuntimeOptions): DescribeRouterInterfacesResponse {
  Util.validateModel(request);
  return doRequest('DescribeRouterInterfaces', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouterInterfacesWithOptions(request, runtime);
}

model DeleteRouterInterfaceRequest = {
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model DeleteRouterInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteRouterInterfaceWithOptions(request: DeleteRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeleteRouterInterfaceResponse {
  Util.validateModel(request);
  return doRequest('DeleteRouterInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouterInterfaceWithOptions(request, runtime);
}

model DeactivateRouterInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
}

model DeactivateRouterInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deactivateRouterInterfaceWithOptions(request: DeactivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeactivateRouterInterfaceResponse {
  Util.validateModel(request);
  return doRequest('DeactivateRouterInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactivateRouterInterfaceWithOptions(request, runtime);
}

model CreateRouterInterfaceRequest = {
  regionId: string(name='RegionId', description='regionId'),
  role: string(name='Role', description='role'),
  oppositeRegionId: string(name='OppositeRegionId', description='oppositeRegionId'),
  spec: string(name='Spec', description='spec'),
  routerType: string(name='RouterType', description='routerType'),
  routerId: string(name='RouterId', description='routerId'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', description='oppositeInterfaceId'),
  oppositeRouterId?: string(name='OppositeRouterId', description='oppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType', description='oppositeRouterType'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', description='oppositeInterfaceOwnerId'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='healthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='healthCheckTargetIp'),
  accessPointId?: string(name='AccessPointId', description='accessPointId'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', description='oppositeAccessPointId'),
  description?: string(name='Description', description='description'),
  name?: string(name='Name', description='name'),
  period?: integer(name='Period', description='period'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  pricingCycle?: string(name='PricingCycle', description='pricingCycle'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model CreateRouterInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='data.routerInterfaceId'),
  orderId: long(name='OrderId', description='data.orderId'),
}

async function createRouterInterfaceWithOptions(request: CreateRouterInterfaceRequest, runtime: Util.RuntimeOptions): CreateRouterInterfaceResponse {
  Util.validateModel(request);
  return doRequest('CreateRouterInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouterInterfaceWithOptions(request, runtime);
}

model ConnectRouterInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
}

model ConnectRouterInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function connectRouterInterfaceWithOptions(request: ConnectRouterInterfaceRequest, runtime: Util.RuntimeOptions): ConnectRouterInterfaceResponse {
  Util.validateModel(request);
  return doRequest('ConnectRouterInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return connectRouterInterfaceWithOptions(request, runtime);
}

model ActivateRouterInterfaceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  routerInterfaceId: string(name='RouterInterfaceId', description='routerInterfaceId'),
}

model ActivateRouterInterfaceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function activateRouterInterfaceWithOptions(request: ActivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): ActivateRouterInterfaceResponse {
  Util.validateModel(request);
  return doRequest('ActivateRouterInterface', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateRouterInterfaceWithOptions(request, runtime);
}

model UnassociateHaVipRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionNo'),
  haVipId: string(name='HaVipId', description='haVipId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  force?: string(name='Force', description='force'),
}

model UnassociateHaVipResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function unassociateHaVipWithOptions(request: UnassociateHaVipRequest, runtime: Util.RuntimeOptions): UnassociateHaVipResponse {
  Util.validateModel(request);
  return doRequest('UnassociateHaVip', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateHaVipWithOptions(request, runtime);
}

model ModifyHaVipAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionNo'),
  haVipId: string(name='HaVipId', description='haVipId'),
  description?: string(name='Description', description='description'),
}

model ModifyHaVipAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyHaVipAttributeWithOptions(request: ModifyHaVipAttributeRequest, runtime: Util.RuntimeOptions): ModifyHaVipAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyHaVipAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHaVipAttributeWithOptions(request, runtime);
}

model DescribeHaVipsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeHaVipsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  haVips: {
    haVip: [
      {
        haVipId: string(name='HaVipId', description='haVipId'),
        regionId: string(name='RegionId', description='regionId'),
        vpcId: string(name='VpcId', description='vpcId'),
        VSwitchId: string(name='VSwitchId', description='vSwitchId'),
        ipAddress: string(name='IpAddress', description='ipAddress'),
        status: string(name='Status', description='status'),
        masterInstanceId: string(name='MasterInstanceId', description='masterInstanceId'),
        description: string(name='Description', description='description'),
        createTime: string(name='CreateTime', description='createTime'),
        associatedInstances: {
          associatedInstance: [ string ](name='associatedInstance', description='associatedInstance'),
        }(name='AssociatedInstances', description='associatedInstances'),
        associatedEipAddresses: {
          associatedEipAddresse: [ string ](name='associatedEipAddresse', description='associatedEipAddresse'),
        }(name='AssociatedEipAddresses', description='associatedEipAddresses'),
      }
    ](name='HaVip', description='HaVip'),
  }(name='HaVips', description='data.data'),
}

async function describeHaVipsWithOptions(request: DescribeHaVipsRequest, runtime: Util.RuntimeOptions): DescribeHaVipsResponse {
  Util.validateModel(request);
  return doRequest('DescribeHaVips', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHaVipsWithOptions(request, runtime);
}

model DeleteHaVipRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionNo'),
  haVipId: string(name='HaVipId', description='haVipId'),
}

model DeleteHaVipResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteHaVipWithOptions(request: DeleteHaVipRequest, runtime: Util.RuntimeOptions): DeleteHaVipResponse {
  Util.validateModel(request);
  return doRequest('DeleteHaVip', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHaVipWithOptions(request, runtime);
}

model CreateHaVipRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionNo'),
  VSwitchId: string(name='VSwitchId', description='vpcSwitchId'),
  ipAddress?: string(name='IpAddress', description='ipAddress'),
  description?: string(name='Description', description='description'),
}

model CreateHaVipResponse = {
  requestId: string(name='RequestId', description='requestId'),
  haVipId: string(name='HaVipId', description='data.haVipId'),
}

async function createHaVipWithOptions(request: CreateHaVipRequest, runtime: Util.RuntimeOptions): CreateHaVipResponse {
  Util.validateModel(request);
  return doRequest('CreateHaVip', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHaVipWithOptions(request, runtime);
}

model AssociateHaVipRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionNo'),
  haVipId: string(name='HaVipId', description='haVipId'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model AssociateHaVipResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function associateHaVipWithOptions(request: AssociateHaVipRequest, runtime: Util.RuntimeOptions): AssociateHaVipResponse {
  Util.validateModel(request);
  return doRequest('AssociateHaVip', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateHaVipWithOptions(request, runtime);
}

model RenewInstanceRequest = {
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId: string(name='InstanceId', description='instanceId'),
  period: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
}

model RenewInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  return doRequest('RenewInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RemoveTagsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: string(name='ResourceId', description='resourceId'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model RemoveTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  return doRequest('RemoveTags', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model DescribeTagsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  resourceId?: string(name='ResourceId', description='resourceId'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  category?: string(name='Category', description='category'),
}

model DescribeTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  tags: {
    tag: [
      {
        tagKey: string(name='TagKey', description='tagKey'),
        tagValue: string(name='TagValue', description='tagValue'),
        resourceTypeCount: {
          instance: integer(name='Instance', description='instance'),
          disk: integer(name='Disk', description='disk'),
          volume: integer(name='Volume', description='volume'),
          image: integer(name='Image', description='image'),
          snapshot: integer(name='Snapshot', description='snapshot'),
          securitygroup: integer(name='Securitygroup', description='securitygroup'),
          launchTemplate: integer(name='LaunchTemplate', description='launchtemplate'),
          eni: integer(name='Eni', description='eni'),
          ddh: integer(name='Ddh', description='ddh'),
          keyPair: integer(name='KeyPair', description='keypair'),
        }(name='ResourceTypeCount', description='tagResourceCount'),
      }
    ](name='Tag', description='Tag'),
  }(name='Tags', description='data.tagSet'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTags', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeResourceByTagsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  regionId: string(name='RegionId', description='regionId'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model DescribeResourceByTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalCount: integer(name='TotalCount', description='data.totalCount'),
  resources: {
    resource: [
      {
        resourceId: string(name='ResourceId', description='resourceId'),
        resourceType: string(name='ResourceType', description='resourceType'),
        regionId: string(name='RegionId', description='regionId'),
      }
    ](name='Resource', description='Resource'),
  }(name='Resources', description='data.resSet'),
}

async function describeResourceByTagsWithOptions(request: DescribeResourceByTagsRequest, runtime: Util.RuntimeOptions): DescribeResourceByTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourceByTags', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeResourceByTags(request: DescribeResourceByTagsRequest): DescribeResourceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceByTagsWithOptions(request, runtime);
}

model AddTagsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: string(name='ResourceId', description='resourceId'),
  tag: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model AddTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  return doRequest('AddTags', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model UnassociateEipAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceType?: string(name='InstanceType', description='instanceType'),
}

model UnassociateEipAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function unassociateEipAddressWithOptions(request: UnassociateEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateEipAddressResponse {
  Util.validateModel(request);
  return doRequest('UnassociateEipAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateEipAddressWithOptions(request, runtime);
}

model StopInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  confirmStop?: boolean(name='ConfirmStop', description='confirmStop'),
  forceStop?: boolean(name='ForceStop', description='kill'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  stoppedMode?: string(name='StoppedMode', description='stoppedMode'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model StopInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  return doRequest('StopInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StartInstanceRequest = {
  sourceRegionId?: string(name='SourceRegionId', description='sourceRegionId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  initLocalDisk?: boolean(name='InitLocalDisk', description='initLocalDisk'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model StartInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  return doRequest('StartInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model RevokeSecurityGroupEgressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  portRange: string(name='PortRange', description='portRange'),
  destGroupId?: string(name='DestGroupId', description='destGroupNo'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='groupOwnerAliUid'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='groupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model RevokeSecurityGroupEgressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function revokeSecurityGroupEgressWithOptions(request: RevokeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupEgressResponse {
  Util.validateModel(request);
  return doRequest('RevokeSecurityGroupEgress', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupEgressWithOptions(request, runtime);
}

model RevokeSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  portRange: string(name='PortRange', description='portRange'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  sourceGroupId?: string(name='SourceGroupId', description='sourceGroupNo'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='groupOwnerAliUid'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='groupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model RevokeSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function revokeSecurityGroupWithOptions(request: RevokeSecurityGroupRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('RevokeSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupWithOptions(request, runtime);
}

model ResizeDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId: string(name='DiskId', description='diskId'),
  type?: string(name='Type', description='type'),
  newSize: integer(name='NewSize', description='newSize'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ResizeDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resizeDiskWithOptions(request: ResizeDiskRequest, runtime: Util.RuntimeOptions): ResizeDiskResponse {
  Util.validateModel(request);
  return doRequest('ResizeDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeDiskWithOptions(request, runtime);
}

model ResetDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId: string(name='DiskId', description='diskId'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ResetDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  return doRequest('ResetDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ReplaceSystemDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  imageId?: string(name='ImageId', description='imageId'),
  systemDisk: {
    size?: integer(name='Size', description='systemDiskSize'),
  }(name='SystemDisk', description='SystemDisk'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='enableVmOsConfig'),
  password?: string(name='Password', description='password'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwdInherit'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  diskId?: string(name='DiskId', description='diskId'),
  platform?: string(name='Platform', description='platform'),
  architecture?: string(name='Architecture', description='architecture'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
}

model ReplaceSystemDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  diskId: string(name='DiskId', description='data'),
}

async function replaceSystemDiskWithOptions(request: ReplaceSystemDiskRequest, runtime: Util.RuntimeOptions): ReplaceSystemDiskResponse {
  Util.validateModel(request);
  return doRequest('ReplaceSystemDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function replaceSystemDisk(request: ReplaceSystemDiskRequest): ReplaceSystemDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceSystemDiskWithOptions(request, runtime);
}

model ReleasePublicIpAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  publicIpAddress: string(name='PublicIpAddress', description='ip'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ReleasePublicIpAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releasePublicIpAddressWithOptions(request: ReleasePublicIpAddressRequest, runtime: Util.RuntimeOptions): ReleasePublicIpAddressResponse {
  Util.validateModel(request);
  return doRequest('ReleasePublicIpAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function releasePublicIpAddress(request: ReleasePublicIpAddressRequest): ReleasePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicIpAddressWithOptions(request, runtime);
}

model ReleaseEipAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ReleaseEipAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseEipAddressWithOptions(request: ReleaseEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipAddressResponse {
  Util.validateModel(request);
  return doRequest('ReleaseEipAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipAddressWithOptions(request, runtime);
}

model ReInitDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId: string(name='DiskId', description='diskId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  password?: string(name='Password', description='password'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  autoStartInstance?: boolean(name='AutoStartInstance', description='autoStartInstance'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
}

model ReInitDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function reInitDiskWithOptions(request: ReInitDiskRequest, runtime: Util.RuntimeOptions): ReInitDiskResponse {
  Util.validateModel(request);
  return doRequest('ReInitDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reInitDiskWithOptions(request, runtime);
}

model RebootInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  forceStop?: boolean(name='ForceStop', description='kill'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model RebootInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  return doRequest('RebootInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model ModifyVSwitchAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  VSwitchId: string(name='VSwitchId', description='instanceId'),
  VSwitchName?: string(name='VSwitchName', description='name'),
  regionId?: string(name='RegionId', description='regionNo'),
  description?: string(name='Description', description='description'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyVSwitchAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyVSwitchAttributeWithOptions(request: ModifyVSwitchAttributeRequest, runtime: Util.RuntimeOptions): ModifyVSwitchAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyVSwitchAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVSwitchAttributeWithOptions(request, runtime);
}

model ModifyVRouterAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  VRouterId: string(name='VRouterId', description='instanceId'),
  VRouterName?: string(name='VRouterName', description='name'),
  description?: string(name='Description', description='description'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyVRouterAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyVRouterAttributeWithOptions(request: ModifyVRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVRouterAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyVRouterAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVRouterAttributeWithOptions(request, runtime);
}

model ModifyVpcAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  vpcId: string(name='VpcId', description='instanceId'),
  description?: string(name='Description', description='description'),
  vpcName?: string(name='VpcName', description='name'),
  cidrBlock?: string(name='CidrBlock', description='cidrBlock'),
  regionId?: string(name='RegionId', description='regionId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model ModifyVpcAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyVpcAttributeWithOptions(request: ModifyVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpcAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyVpcAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcAttributeWithOptions(request, runtime);
}

model ModifySnapshotAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
  snapshotName?: string(name='SnapshotName', description='nickname'),
  description?: string(name='Description', description='description'),
}

model ModifySnapshotAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySnapshotAttributeWithOptions(request: ModifySnapshotAttributeRequest, runtime: Util.RuntimeOptions): ModifySnapshotAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifySnapshotAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotAttributeWithOptions(request, runtime);
}

model ModifySecurityGroupAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
  description?: string(name='Description', description='description'),
  securityGroupName?: string(name='SecurityGroupName', description='securityGroupName'),
  regionId: string(name='RegionId', description='regionId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifySecurityGroupAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySecurityGroupAttributeWithOptions(request: ModifySecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityGroupAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupAttributeWithOptions(request, runtime);
}

model ModifyInstanceVpcAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  VSwitchId: string(name='VSwitchId', description='vSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='privateIpAddress'),
  vpcId?: string(name='VpcId', description='vpcId'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='securityGroupIds'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyInstanceVpcAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceVpcAttributeWithOptions(request: ModifyInstanceVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceVpcAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceVpcAttribute(request: ModifyInstanceVpcAttributeRequest): ModifyInstanceVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAttributeWithOptions(request, runtime);
}

model ModifyInstanceVncPasswdRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  regionId: string(name='RegionId', description='regionId'),
  vncPassword: string(name='VncPassword', description='vncPassword'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyInstanceVncPasswdResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceVncPasswdWithOptions(request: ModifyInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): ModifyInstanceVncPasswdResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceVncPasswd', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceVncPasswd(request: ModifyInstanceVncPasswdRequest): ModifyInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVncPasswdWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  temporary: {
    startTime?: string(name='StartTime', description='temporaryStartTime'),
    endTime?: string(name='EndTime', description='temporaryEndTime'),
    internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='temporaryInternetMaxBandwidthOut'),
  }(name='Temporary', description='Temporary'),
  async?: boolean(name='Async', description='async'),
  allowMigrateAcrossZone?: boolean(name='AllowMigrateAcrossZone', description='canMigrateAcrossZone'),
  systemDisk: {
    category?: string(name='Category', description='systemDiskCategory'),
  }(name='SystemDisk', description='SystemDisk'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model ModifyInstanceSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceNetworkSpecRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  networkChargeType?: string(name='NetworkChargeType', description='networkChargeType'),
  allocatePublicIp?: boolean(name='AllocatePublicIp', description='allocatePublicIp'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyInstanceNetworkSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function modifyInstanceNetworkSpecWithOptions(request: ModifyInstanceNetworkSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceNetworkSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceNetworkSpec', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceNetworkSpec(request: ModifyInstanceNetworkSpecRequest): ModifyInstanceNetworkSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNetworkSpecWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  password?: string(name='Password', description='password'),
  hostName?: string(name='HostName', description='hostname'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  description?: string(name='Description', description='description'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userData?: string(name='UserData', description='userData'),
  recyclable?: boolean(name='Recyclable', description='recyclable'),
  creditSpecification?: string(name='CreditSpecification', description='creditSpecification'),
  deletionProtection?: boolean(name='DeletionProtection', description='deletionProtection'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='securityGroupIds'),
}

model ModifyInstanceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyImageSharePermissionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageId'),
  addAccount?: [ string ](name='AddAccount', description='addAccounts'),
  removeAccount?: [ string ](name='RemoveAccount', description='removeAccounts'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyImageSharePermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyImageSharePermissionWithOptions(request: ModifyImageSharePermissionRequest, runtime: Util.RuntimeOptions): ModifyImageSharePermissionResponse {
  Util.validateModel(request);
  return doRequest('ModifyImageSharePermission', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageSharePermissionWithOptions(request, runtime);
}

model ModifyImageShareGroupPermissionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageId'),
  addGroup?: [ string ](name='AddGroup', description='addGroup1'),
  removeGroup?: [ string ](name='RemoveGroup', description='removeGroup1'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyImageShareGroupPermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyImageShareGroupPermissionWithOptions(request: ModifyImageShareGroupPermissionRequest, runtime: Util.RuntimeOptions): ModifyImageShareGroupPermissionResponse {
  Util.validateModel(request);
  return doRequest('ModifyImageShareGroupPermission', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyImageShareGroupPermission(request: ModifyImageShareGroupPermissionRequest): ModifyImageShareGroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageShareGroupPermissionWithOptions(request, runtime);
}

model ModifyImageAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageId'),
  imageName?: string(name='ImageName', description='imageName'),
  status?: string(name='Status', description='status'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  bootMode?: string(name='BootMode', description='bootMode'),
  description?: string(name='Description', description='remark'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyImageAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyImageAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyEipAddressAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  bandwidth: string(name='Bandwidth', description='bandwidth'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyEipAddressAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyEipAddressAttributeWithOptions(request: ModifyEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyEipAddressAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyEipAddressAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEipAddressAttributeWithOptions(request, runtime);
}

model ModifyDiskAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId?: string(name='DiskId', description='instanceId'),
  diskIds?: [ string ](name='DiskIds', description='instanceIds'),
  diskName?: string(name='DiskName', description='diskName'),
  description?: string(name='Description', description='diskDesc'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='deleteAutoSnapshot'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='enableAutoSnapshot'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDiskAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDiskAttributeWithOptions(request: ModifyDiskAttributeRequest, runtime: Util.RuntimeOptions): ModifyDiskAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDiskAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyDiskAttribute(request: ModifyDiskAttributeRequest): ModifyDiskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskAttributeWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  systemDiskPolicyEnabled?: boolean(name='SystemDiskPolicyEnabled', description='systemDiskPolicyEnabled'),
  systemDiskPolicyTimePeriod?: integer(name='SystemDiskPolicyTimePeriod', description='systemDiskPolicyTimePeriod'),
  systemDiskPolicyRetentionDays?: integer(name='SystemDiskPolicyRetentionDays', description='systemDiskPolicyRetentionDays'),
  systemDiskPolicyRetentionLastWeek?: boolean(name='SystemDiskPolicyRetentionLastWeek', description='systemDiskPolicyRetentionLastWeek'),
  dataDiskPolicyEnabled?: boolean(name='DataDiskPolicyEnabled', description='dataDiskPolicyEnabled'),
  dataDiskPolicyTimePeriod?: integer(name='DataDiskPolicyTimePeriod', description='dataDiskPolicyTimePeriod'),
  dataDiskPolicyRetentionDays?: integer(name='DataDiskPolicyRetentionDays', description='dataDiskPolicyRetentionDays'),
  dataDiskPolicyRetentionLastWeek?: boolean(name='DataDiskPolicyRetentionLastWeek', description='dataDiskPolicyRetentionLastWeek'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyAutoSnapshotPolicy', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model LeaveSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model LeaveSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function leaveSecurityGroupWithOptions(request: LeaveSecurityGroupRequest, runtime: Util.RuntimeOptions): LeaveSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('LeaveSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveSecurityGroupWithOptions(request, runtime);
}

model JoinSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model JoinSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function joinSecurityGroupWithOptions(request: JoinSecurityGroupRequest, runtime: Util.RuntimeOptions): JoinSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('JoinSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinSecurityGroupWithOptions(request, runtime);
}

model DetachDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  diskId: string(name='DiskId', description='instanceId'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DetachDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function detachDiskWithOptions(request: DetachDiskRequest, runtime: Util.RuntimeOptions): DetachDiskResponse {
  Util.validateModel(request);
  return doRequest('DetachDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDiskWithOptions(request, runtime);
}

model DescribeZonesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  verbose?: boolean(name='Verbose', description='verbose'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  acceptLanguage?: string(name='AcceptLanguage', description='acceptLanguage'),
}

model DescribeZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  zones: {
    zone: [
      {
        zoneId: string(name='ZoneId', description='no'),
        localName: string(name='LocalName', description='cnName'),
        availableResources: {
          resourcesInfo: [
            {
              ioOptimized: boolean(name='IoOptimized', description='supportIoOptimized'),
              systemDiskCategories: {
                supportedSystemDiskCategory: [ string ](name='supportedSystemDiskCategory', description='supportedSystemDiskCategory'),
              }(name='SystemDiskCategories', description='supportedSystemDiskCategories'),
              dataDiskCategories: {
                supportedDataDiskCategory: [ string ](name='supportedDataDiskCategory', description='supportedDataDiskCategory'),
              }(name='DataDiskCategories', description='supportedDataDiskCategories'),
              networkTypes: {
                supportedNetworkCategory: [ string ](name='supportedNetworkCategory', description='supportedNetworkCategory'),
              }(name='NetworkTypes', description='supportedNetworkCategories'),
              instanceTypes: {
                supportedInstanceType: [ string ](name='supportedInstanceType', description='supportedInstanceType'),
              }(name='InstanceTypes', description='supportedInstanceTypes'),
              instanceTypeFamilies: {
                supportedInstanceTypeFamily: [ string ](name='supportedInstanceTypeFamily', description='supportedInstanceTypeFamily'),
              }(name='InstanceTypeFamilies', description='supportedInstanceTypeFamilies'),
              instanceGenerations: {
                supportedInstanceGeneration: [ string ](name='supportedInstanceGeneration', description='supportedInstanceGeneration'),
              }(name='InstanceGenerations', description='supportedInstanceGenerations'),
            }
          ](name='ResourcesInfo', description='ResourcesInfo'),
        }(name='AvailableResources', description='izResourceModel'),
        availableResourceCreation: {
          resourceTypes: [ string ](name='ResourceTypes', description='ResourceTypes'),
        }(name='AvailableResourceCreation', description='allowedResourceCreation'),
        availableDiskCategories: {
          diskCategories: [ string ](name='DiskCategories', description='DiskCategories'),
        }(name='AvailableDiskCategories', description='supportedDiskCategories'),
        availableInstanceTypes: {
          instanceTypes: [ string ](name='InstanceTypes', description='InstanceTypes'),
        }(name='AvailableInstanceTypes', description='supportedInstanceTypeNames'),
        availableVolumeCategories: {
          volumeCategories: [ string ](name='VolumeCategories', description='VolumeCategories'),
        }(name='AvailableVolumeCategories', description='supportedVolumeCategories'),
        availableDedicatedHostTypes: {
          dedicatedHostType: [ string ](name='DedicatedHostType', description='DedicatedHostType'),
        }(name='AvailableDedicatedHostTypes', description='supportedDedicatedHostTypeNames'),
        dedicatedHostGenerations: {
          dedicatedHostGeneration: [ string ](name='DedicatedHostGeneration', description='DedicatedHostGeneration'),
        }(name='DedicatedHostGenerations', description='supportedDedicatedHostGenerations'),
      }
    ](name='Zone', description='Zone'),
  }(name='Zones', description='data'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeZones', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DescribeVSwitchesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  vpcId?: string(name='VpcId', description='vpcInstanceId'),
  VSwitchId?: string(name='VSwitchId', description='instanceId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  regionId?: string(name='RegionId', description='regionNo'),
  isDefault?: boolean(name='IsDefault', description='isDefault'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeVSwitchesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  VSwitches: {
    VSwitch: [
      {
        VSwitchId: string(name='VSwitchId', description='vSwitch.instanceId'),
        vpcId: string(name='VpcId', description='vSwitch.vpcInstanceId'),
        status: string(name='Status', description='vSwitch.status'),
        cidrBlock: string(name='CidrBlock', description='vSwitch.cidrBlock'),
        zoneId: string(name='ZoneId', description='vSwitch.izNo'),
        availableIpAddressCount: long(name='AvailableIpAddressCount', description='vSwitch.availabeIpCount'),
        description: string(name='Description', description='vSwitch.description'),
        VSwitchName: string(name='VSwitchName', description='vSwitch.name'),
        creationTime: string(name='CreationTime', description='gmtCreated'),
        isDefault: boolean(name='IsDefault', description='isDefault'),
        resourceGroupId: string(name='ResourceGroupId', description='vSwitch.resourceGroupId'),
      }
    ](name='VSwitch', description='VSwitch'),
  }(name='VSwitches', description='data.data'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  return doRequest('DescribeVSwitches', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DescribeVRoutersRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  VRouterId?: string(name='VRouterId', description='instanceId'),
  regionId: string(name='RegionId', description='regionNo'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeVRoutersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  VRouters: {
    VRouter: [
      {
        regionId: string(name='RegionId', description='regionId'),
        vpcId: string(name='VpcId', description='vpcInstanceId'),
        VRouterName: string(name='VRouterName', description='name'),
        description: string(name='Description', description='description'),
        VRouterId: string(name='VRouterId', description='instanceId'),
        creationTime: string(name='CreationTime', description='gmtCreate'),
        routeTableIds: {
          routeTableId: [ string ](name='RouteTableId', description='RouteTableId'),
        }(name='RouteTableIds', description='vRouterTableIds'),
      }
    ](name='VRouter', description='VRouter'),
  }(name='VRouters', description='data.data'),
}

async function describeVRoutersWithOptions(request: DescribeVRoutersRequest, runtime: Util.RuntimeOptions): DescribeVRoutersResponse {
  Util.validateModel(request);
  return doRequest('DescribeVRouters', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVRoutersWithOptions(request, runtime);
}

model DescribeVpcsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  regionId: string(name='RegionId', description='regionNo'),
  isDefault?: boolean(name='IsDefault', description='isDefault'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeVpcsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  vpcs: {
    vpc: [
      {
        vpcId: string(name='VpcId', description='resourceId'),
        regionId: string(name='RegionId', description='regionId'),
        status: string(name='Status', description='status'),
        vpcName: string(name='VpcName', description='vpcName'),
        creationTime: string(name='CreationTime', description='creationTime'),
        cidrBlock: string(name='CidrBlock', description='cidrBlock'),
        VRouterId: string(name='VRouterId', description='vRouterId'),
        description: string(name='Description', description='description'),
        isDefault: boolean(name='IsDefault', description='isDefault'),
        VSwitchIds: {
          VSwitchId: [ string ](name='VSwitchId', description='VSwitchId'),
        }(name='VSwitchIds', description='vSwitchIds'),
        userCidrs: {
          userCidr: [ string ](name='UserCidr', description='UserCidr'),
        }(name='UserCidrs', description='userCidrs'),
      }
    ](name='Vpc', description='Vpc'),
  }(name='Vpcs', description='data.data'),
}

async function describeVpcsWithOptions(request: DescribeVpcsRequest, runtime: Util.RuntimeOptions): DescribeVpcsResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcs', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  diskId?: string(name='DiskId', description='diskId'),
  snapshotLinkId?: string(name='SnapshotLinkId', description='snapshotLinkId'),
  regionId: string(name='RegionId', description='regionNo'),
  snapshotIds?: string(name='SnapshotIds', description='snapshotIds'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  snapshotName?: string(name='SnapshotName', description='snapshotName'),
  status?: string(name='Status', description='status'),
  snapshotType?: string(name='SnapshotType', description='snapshotType'),
  usage?: string(name='Usage', description='usage'),
  sourceDiskType?: string(name='SourceDiskType', description='diskType'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  encrypted?: boolean(name='Encrypted', description='encrypted'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  KMSKeyId?: string(name='KMSKeyId', description='kmsKeyId'),
  category?: string(name='Category', description='category'),
}

model DescribeSnapshotsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  snapshots: {
    snapshot: [
      {
        snapshotId: string(name='SnapshotId', description='resourceId'),
        snapshotSN: string(name='SnapshotSN', description='model.snapshotHouyiNo'),
        snapshotName: string(name='SnapshotName', description='model.snapshotNickname'),
        progress: string(name='Progress', description='model.snapshotProcess'),
        productCode: string(name='ProductCode', description='model.imgPc'),
        sourceDiskId: string(name='SourceDiskId', description='model.diskId'),
        sourceDiskType: string(name='SourceDiskType', description='model.diskType'),
        retentionDays: integer(name='RetentionDays', description='model.retentionDays'),
        encrypted: boolean(name='Encrypted', description='model.encrypted'),
        sourceDiskSize: string(name='SourceDiskSize', description='model.snapshotSize'),
        description: string(name='Description', description='model.description'),
        creationTime: string(name='CreationTime', description='gmtCreateTime'),
        lastModifiedTime: string(name='LastModifiedTime', description='gmtModifyTime'),
        status: string(name='Status', description='status'),
        usage: string(name='Usage', description='usage'),
        sourceStorageType: string(name='SourceStorageType', description='model.srcStorageType'),
        remainTime: integer(name='RemainTime', description='model.remainTime'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
        category: string(name='Category', description='model.category'),
        snapshotType: string(name='SnapshotType', description='model.snapshotType'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='model.tags'),
      }
    ](name='Snapshot', description='Snapshot'),
  }(name='Snapshots', description='data.data'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshots', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  vpcId?: string(name='VpcId', description='vpcInstanceId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  securityGroupIds?: string(name='SecurityGroupIds', description='securityGroupIds'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  networkType?: string(name='NetworkType', description='networkType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  securityGroupName?: string(name='SecurityGroupName', description='securityGroupName'),
  isQueryEcsCount?: boolean(name='IsQueryEcsCount', description='isQueryEcsCount'),
  fuzzyQuery?: boolean(name='FuzzyQuery', description='fuzzyQuery'),
  securityGroupType?: string(name='SecurityGroupType', description='groupType'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model DescribeSecurityGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  securityGroups: {
    securityGroup: [
      {
        securityGroupId: string(name='SecurityGroupId', description='resourceId'),
        description: string(name='Description', description='groupDesc'),
        securityGroupName: string(name='SecurityGroupName', description='groupName'),
        vpcId: string(name='VpcId', description='vpcId'),
        creationTime: string(name='CreationTime', description='createTime'),
        securityGroupType: string(name='SecurityGroupType', description='groupType'),
        availableInstanceAmount: integer(name='AvailableInstanceAmount', description='availableInstanceAmount'),
        ecsCount: integer(name='EcsCount', description='ecsCount'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        serviceID: long(name='ServiceID', description='serviceID'),
        serviceManaged: boolean(name='ServiceManaged', description='serviceManaged'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='tagKey'),
              tagValue: string(name='TagValue', description='tagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='SecurityGroup', description='SecurityGroup'),
  }(name='SecurityGroups', description='data.data'),
}

async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSecurityGroups', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model DescribeSecurityGroupAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  regionId: string(name='RegionId', description='regionNo'),
  nicType?: string(name='NicType', description='nic'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  direction?: string(name='Direction', description='direction'),
}

model DescribeSecurityGroupAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='data.groupNo'),
  description: string(name='Description', description='data.groupDesc'),
  securityGroupName: string(name='SecurityGroupName', description='data.groupName'),
  vpcId: string(name='VpcId', description='data.vpcInstanceId'),
  innerAccessPolicy: string(name='InnerAccessPolicy', description='data.policy'),
  permissions: {
    permission: [
      {
        ipProtocol: string(name='IpProtocol', description='ipProtocal'),
        portRange: string(name='PortRange', description='portRange'),
        sourcePortRange: string(name='SourcePortRange', description='sourcePortRange'),
        sourceGroupId: string(name='SourceGroupId', description='sourceGroupNo'),
        sourceGroupName: string(name='SourceGroupName', description='sourceGroupName'),
        sourceCidrIp: string(name='SourceCidrIp', description='sourceCidrIp'),
        ipv6SourceCidrIp: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
        policy: string(name='Policy', description='policy'),
        nicType: string(name='NicType', description='nic'),
        sourceGroupOwnerAccount: string(name='SourceGroupOwnerAccount', description='sourceGroupOwnerUserAccount'),
        destGroupId: string(name='DestGroupId', description='destGroupNo'),
        destGroupName: string(name='DestGroupName', description='destGroupName'),
        destCidrIp: string(name='DestCidrIp', description='destCidrIp'),
        ipv6DestCidrIp: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
        destGroupOwnerAccount: string(name='DestGroupOwnerAccount', description='destGroupOwnerUserAccount'),
        priority: string(name='Priority', description='level'),
        direction: string(name='Direction', description='direction'),
        description: string(name='Description', description='description'),
        createTime: string(name='CreateTime', description='createTime'),
      }
    ](name='Permission', description='Permission'),
  }(name='Permissions', description='data.permissions'),
}

async function describeSecurityGroupAttributeWithOptions(request: DescribeSecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeSecurityGroupAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupAttributeWithOptions(request, runtime);
}

model DescribeRouteTablesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  VRouterId?: string(name='VRouterId', description='routerInstanceId'),
  routeTableId?: string(name='RouteTableId', description='instanceId'),
  routerType?: string(name='RouterType', description='routerType'),
  routerId?: string(name='RouterId', description='routerId'),
  routeTableName?: string(name='RouteTableName', description='routeTableName'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeRouteTablesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  routeTables: {
    routeTable: [
      {
        VRouterId: string(name='VRouterId', description='vRouterTable.routerInstanceId'),
        routeTableId: string(name='RouteTableId', description='vRouterTable.instanceId'),
        routeTableType: string(name='RouteTableType', description='vRouterTable.type'),
        creationTime: string(name='CreationTime', description='gmtCreated'),
        resourceGroupId: string(name='ResourceGroupId', description='vRouterTable.resourceGroupId'),
        routeEntrys: {
          routeEntry: [
            {
              routeTableId: string(name='RouteTableId', description='tableInstanceId'),
              destinationCidrBlock: string(name='DestinationCidrBlock', description='destinationCidrBlock'),
              type: string(name='Type', description='type'),
              status: string(name='Status', description='status'),
              instanceId: string(name='InstanceId', description='nextRouterInstanceId'),
              nextHopType: string(name='NextHopType', description='nexthopType'),
              nextHops: {
                nextHop: [
                  {
                    nextHopType: string(name='NextHopType', description='nextHopType'),
                    nextHopId: string(name='NextHopId', description='nextHopId'),
                    enabled: integer(name='Enabled', description='enabled'),
                    weight: integer(name='Weight', description='weight'),
                  }
                ](name='NextHop', description='NextHop'),
              }(name='NextHops', description='nextHopList.nextHopItems'),
            }
          ](name='RouteEntry', description='RouteEntry'),
        }(name='RouteEntrys', description='vRouterTable.vRouterEntrys'),
      }
    ](name='RouteTable', description='RouteTable'),
  }(name='RouteTables', description='data.data'),
}

async function describeRouteTablesWithOptions(request: DescribeRouteTablesRequest, runtime: Util.RuntimeOptions): DescribeRouteTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeRouteTables', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteTablesWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceChargeType?: string(name='InstanceChargeType', description='saleStrategy'),
  resourceType?: string(name='ResourceType', description='resourceType'),
  acceptLanguage?: string(name='AcceptLanguage', description='acceptLanguage'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='regionNo'),
        localName: string(name='LocalName', description='regionName'),
        regionEndpoint: string(name='RegionEndpoint', description='regionEndpoint'),
        status: string(name='Status', description='status'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data.regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeLimitationRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  limitation: string(name='Limitation', description='limitation'),
}

model DescribeLimitationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  limitation: string(name='Limitation', description='data.limitation'),
  value: string(name='Value', description='data.value'),
}

async function describeLimitationWithOptions(request: DescribeLimitationRequest, runtime: Util.RuntimeOptions): DescribeLimitationResponse {
  Util.validateModel(request);
  return doRequest('DescribeLimitation', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLimitationWithOptions(request, runtime);
}

model DescribeInstanceVncUrlRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceVncUrlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  vncUrl: string(name='VncUrl', description='data.vncUrl'),
}

async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceVncUrl', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeInstanceVncPasswdRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceVncPasswdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  vncPasswd: string(name='VncPasswd', description='data.vncPasswd'),
}

async function describeInstanceVncPasswdWithOptions(request: DescribeInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncPasswdResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceVncPasswd', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceVncPasswd(request: DescribeInstanceVncPasswdRequest): DescribeInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncPasswdWithOptions(request, runtime);
}

model DescribeInstanceTypesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
}

model DescribeInstanceTypesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceTypes: {
    instanceType: [
      {
        instanceTypeId: string(name='InstanceTypeId', description='instanceType'),
        cpuCoreCount: integer(name='CpuCoreCount', description='cores'),
        memorySize: float(name='MemorySize', description='memGB'),
        instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
        localStorageCapacity: long(name='LocalStorageCapacity', description='diskSize'),
        localStorageAmount: integer(name='LocalStorageAmount', description='diskNum'),
        localStorageCategory: string(name='LocalStorageCategory', description='dataDiskCategory'),
        GPUAmount: integer(name='GPUAmount', description='gpuAmount'),
        GPUSpec: string(name='GPUSpec', description='gpuSpec'),
        initialCredit: integer(name='InitialCredit', description='initCredit'),
        baselineCredit: integer(name='BaselineCredit', description='baseline'),
        eniQuantity: integer(name='EniQuantity', description='eniQuantity'),
        eniPrivateIpAddressQuantity: integer(name='EniPrivateIpAddressQuantity', description='eniPrivateIpQuantity'),
        eniIpv6AddressQuantity: integer(name='EniIpv6AddressQuantity', description='eniIpv6Quantity'),
        instanceBandwidthRx: integer(name='InstanceBandwidthRx', description='vmBandwidthTx'),
        instanceBandwidthTx: integer(name='InstanceBandwidthTx', description='vmBandwidthRx'),
        instancePpsRx: long(name='InstancePpsRx', description='privateRxPps'),
        instancePpsTx: long(name='InstancePpsTx', description='privateTxPps'),
        instanceFamilyLevel: string(name='InstanceFamilyLevel', description='instanceFamilyLevel'),
        totalEniQueueQuantity: integer(name='TotalEniQueueQuantity', description='eniQueueQuota'),
        eniTrunkSupported: boolean(name='EniTrunkSupported', description='eniTrunkEnabled'),
        eniTotalQuantity: integer(name='EniTotalQuantity', description='eniVportQuota'),
      }
    ](name='InstanceType', description='InstanceType'),
  }(name='InstanceTypes', description='data'),
}

async function describeInstanceTypesWithOptions(request: DescribeInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceTypes', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypesWithOptions(request, runtime);
}

model DescribeInstanceStatusRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId?: [ string ](name='InstanceId', description='instanceIds'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='izNo'),
  clusterId?: string(name='ClusterId', description='zoneNo'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  instanceStatuses: {
    instanceStatus: [
      {
        instanceId: string(name='InstanceId', description='ecsName'),
        status: string(name='Status', description='status'),
      }
    ](name='InstanceStatus', description='InstanceStatus'),
  }(name='InstanceStatuses', description='data.data'),
}

async function describeInstanceStatusWithOptions(request: DescribeInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceStatus', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatusWithOptions(request, runtime);
}

model DescribeInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  vpcId?: string(name='VpcId', description='vpcInstanceId'),
  VSwitchId?: string(name='VSwitchId', description='vswInstanceId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='ecsNetworkType'),
  securityGroupId?: string(name='SecurityGroupId', description='groupNo'),
  instanceIds?: string(name='InstanceIds', description='ecsInstanceIds'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  innerIpAddresses?: string(name='InnerIpAddresses', description='ecsInnerIps'),
  privateIpAddresses?: string(name='PrivateIpAddresses', description='ecsPrivateIps'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='ecsPublicIps'),
  eipAddresses?: string(name='EipAddresses', description='eipAddresses'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  imageId?: string(name='ImageId', description='imageId'),
  status?: string(name='Status', description='status'),
  lockReason?: string(name='LockReason', description='lockReason'),
  deviceAvailable?: boolean(name='DeviceAvailable', description='deviceAvailable'),
  ioOptimized?: boolean(name='IoOptimized', description='ioOptimized'),
  needSaleCycle?: boolean(name='NeedSaleCycle', description='needSaleCycle'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId', description='hpcClusterId'),
  rdmaIpAddresses?: string(name='RdmaIpAddresses', description='ecsRdmaIps'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='additionalAttributes'),
  httpEndpoint?: string(name='HttpEndpoint', description='httpEndpoint'),
  httpTokens?: string(name='HttpTokens', description='httpTokens'),
  httpPutResponseHopLimit?: integer(name='HttpPutResponseHopLimit', description='httpPutResponseHopLimit'),
}

model DescribeInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  instances: {
    instance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceName: string(name='InstanceName', description='instanceName'),
        description: string(name='Description', description='description'),
        imageId: string(name='ImageId', description='imageId'),
        OSName: string(name='OSName', description='osName'),
        OSNameEn: string(name='OSNameEn', description='osNameEn'),
        OSType: string(name='OSType', description='osType'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        clusterId: string(name='ClusterId', description='zoneNo'),
        instanceType: string(name='InstanceType', description='instanceType'),
        cpu: integer(name='Cpu', description='cores'),
        memory: integer(name='Memory', description='mem'),
        hostName: string(name='HostName', description='hostName'),
        deploymentSetId: string(name='DeploymentSetId', description='deploymentSetId'),
        status: string(name='Status', description='status'),
        serialNumber: string(name='SerialNumber', description='serialNumber'),
        internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
        internetMaxBandwidthIn: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
        internetMaxBandwidthOut: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
        vlanId: string(name='VlanId', description='vlanId'),
        creationTime: string(name='CreationTime', description='creationTime'),
        startTime: string(name='StartTime', description='startTime'),
        instanceNetworkType: string(name='InstanceNetworkType', description='instanceNetWorkType'),
        instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
        saleCycle: string(name='SaleCycle', description='saleCycle'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        autoReleaseTime: string(name='AutoReleaseTime', description='autoReleaseTime'),
        ioOptimized: boolean(name='IoOptimized', description='ioOptimized'),
        deviceAvailable: boolean(name='DeviceAvailable', description='deviceAvailable'),
        instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
        localStorageCapacity: long(name='LocalStorageCapacity', description='localStorageCapacity'),
        localStorageAmount: integer(name='LocalStorageAmount', description='localStorageAmount'),
        GPUAmount: integer(name='GPUAmount', description='gpuAmount'),
        GPUSpec: string(name='GPUSpec', description='gpuSpec'),
        spotStrategy: string(name='SpotStrategy', description='spotStrategy'),
        spotPriceLimit: float(name='SpotPriceLimit', description='spotPriceLimit '),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        keyPairName: string(name='KeyPairName', description='keyPairName'),
        recyclable: boolean(name='Recyclable', description='recyclable'),
        hpcClusterId: string(name='HpcClusterId', description='hpcClusterId'),
        stoppedMode: string(name='StoppedMode', description='stopBehavior'),
        creditSpecification: string(name='CreditSpecification', description='creditSpecification'),
        deletionProtection: boolean(name='DeletionProtection', description='deletionProtection'),
        networkInterfaces: {
          networkInterface: [
            {
              networkInterfaceId: string(name='NetworkInterfaceId', description='eniInstanceId'),
              macAddress: string(name='MacAddress', description='macAddress'),
              primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
            }
          ](name='NetworkInterface', description='NetworkInterface'),
        }(name='NetworkInterfaces', description='eniList'),
        operationLocks: {
          lockReason: [
            {
              lockReason: string(name='LockReason', description='lockReason'),
              lockMsg: string(name='LockMsg', description='lockMsg'),
            }
          ](name='LockReason', description='LockReason'),
        }(name='OperationLocks', description='operationLockTypes'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='tagKey'),
              tagValue: string(name='TagValue', description='tagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
        vpcAttributes: {
          vpcId: string(name='VpcId', description='vpcId'),
          VSwitchId: string(name='VSwitchId', description='vSwitchId'),
          natIpAddress: string(name='NatIpAddress', description='natIpAddress'),
          privateIpAddress: {
            ipAddress: [ string ](name='IpAddress', description='IpAddress'),
          }(name='PrivateIpAddress', description='privateIpAddress'),
        }(name='VpcAttributes', description='vpcAttribute'),
        eipAddress: {
          allocationId: string(name='AllocationId', description='allocationId'),
          ipAddress: string(name='IpAddress', description='eipAdress'),
          bandwidth: integer(name='Bandwidth', description='bandwidth'),
          internetChargeType: string(name='InternetChargeType', description='eipInternetChargeType'),
          isSupportUnassociate: boolean(name='IsSupportUnassociate', description='eipIsPortable'),
        }(name='EipAddress', description='eipAddress'),
        dedicatedHostAttribute: {
          dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
          dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
        }(name='DedicatedHostAttribute', description='dedicatedHostAttribute'),
        ecsCapacityReservationAttr: {
          capacityReservationId: string(name='CapacityReservationId', description='capacityReservationId'),
          capacityReservationPreference: string(name='CapacityReservationPreference', description='capacityReservationPreference'),
        }(name='EcsCapacityReservationAttr', description='ecsCapacityReservationAttr'),
        dedicatedInstanceAttribute: {
          tenancy: string(name='Tenancy', description='instanceTenancy'),
          affinity: string(name='Affinity', description='dedicatedInstanceAffinity'),
        }(name='DedicatedInstanceAttribute', description='dedicatedInstanceAttribute'),
        cpuOptions: {
          coreCount: integer(name='CoreCount', description='cpuOptionsCore'),
          threadsPerCore: integer(name='ThreadsPerCore', description='cpuOptionsHt'),
          numa: string(name='Numa', description='cpuOptionsNuma'),
        }(name='CpuOptions', description='cpuOptions'),
        metadataOptions: {
          httpEndpoint: string(name='HttpEndpoint', description='httpEndpoint'),
          httpTokens: string(name='HttpTokens', description='httpTokens'),
          httpPutResponseHopLimit: integer(name='HttpPutResponseHopLimit', description='httpPutResponseHopLimit'),
        }(name='MetadataOptions', description='ecsMetaOptionModel'),
        securityGroupIds: {
          securityGroupId: [ string ](name='SecurityGroupId', description='SecurityGroupId'),
        }(name='SecurityGroupIds', description='securityGroupIds'),
        publicIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='PublicIpAddress', description='publicIpAddress'),
        innerIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='InnerIpAddress', description='innerIpAddress'),
        rdmaIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='RdmaIpAddress', description='rdmaIpAddress'),
      }
    ](name='Instance', description='Instance'),
  }(name='Instances', description='data.data'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstances', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstanceMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId: string(name='InstanceId', description='resourceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
}

model DescribeInstanceMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  monitorData: {
    instanceMonitorData: [
      {
        instanceId: string(name='InstanceId', description='resourceId'),
        CPU: integer(name='CPU', description='item2Value.CPU'),
        intranetRX: integer(name='IntranetRX', description='item2Value.IntranetRX'),
        intranetTX: integer(name='IntranetTX', description='item2Value.IntranetTX'),
        intranetBandwidth: integer(name='IntranetBandwidth', description='item2Value.IntranetBandwidth'),
        internetRX: integer(name='InternetRX', description='item2Value.InternetRX'),
        internetTX: integer(name='InternetTX', description='item2Value.InternetTX'),
        internetBandwidth: integer(name='InternetBandwidth', description='item2Value.InternetBandwidth'),
        IOPSRead: integer(name='IOPSRead', description='item2Value.IOPSRead'),
        IOPSWrite: integer(name='IOPSWrite', description='item2Value.IOPSWrite'),
        BPSRead: integer(name='BPSRead', description='item2Value.BPSRead'),
        BPSWrite: integer(name='BPSWrite', description='item2Value.BPSWrite'),
        CPUCreditUsage: float(name='CPUCreditUsage', description='item2Value.CPUCreditUsage'),
        CPUCreditBalance: float(name='CPUCreditBalance', description='item2Value.CPUCreditBalance'),
        CPUAdvanceCreditBalance: float(name='CPUAdvanceCreditBalance', description='item2Value.CPUAdvanceCreditBalance'),
        CPUNotpaidSurplusCreditUsage: float(name='CPUNotpaidSurplusCreditUsage', description='item2Value.CPUNotpaidSurplusCreditUsage'),
        timeStamp: string(name='TimeStamp', description='timeStamp'),
      }
    ](name='InstanceMonitorData', description='InstanceMonitorData'),
  }(name='MonitorData', description='data'),
}

async function describeInstanceMonitorDataWithOptions(request: DescribeInstanceMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeInstanceMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMonitorDataWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  instanceName: string(name='InstanceName', description='data.instanceName'),
  imageId: string(name='ImageId', description='data.imageId'),
  regionId: string(name='RegionId', description='data.regionId'),
  zoneId: string(name='ZoneId', description='data.izNo'),
  clusterId: string(name='ClusterId', description='data.zoneNo'),
  instanceType: string(name='InstanceType', description='data.instanceType'),
  cpu: integer(name='Cpu', description='data.cores'),
  memory: integer(name='Memory', description='data.mem'),
  hostName: string(name='HostName', description='data.hostName'),
  status: string(name='Status', description='data.status'),
  internetChargeType: string(name='InternetChargeType', description='data.internetChargeType'),
  internetMaxBandwidthIn: integer(name='InternetMaxBandwidthIn', description='data.internetMaxBandwidthIn'),
  internetMaxBandwidthOut: integer(name='InternetMaxBandwidthOut', description='data.internetMaxBandwidthOut'),
  vlanId: string(name='VlanId', description='data.vlanId'),
  serialNumber: string(name='SerialNumber', description='data.serialNumber'),
  creationTime: string(name='CreationTime', description='data.creationTime'),
  description: string(name='Description', description='data.description'),
  instanceNetworkType: string(name='InstanceNetworkType', description='data.instanceNetWorkType'),
  ioOptimized: string(name='IoOptimized', description='data.ioOptimized'),
  instanceChargeType: string(name='InstanceChargeType', description='data.instanceChargeType'),
  expiredTime: string(name='ExpiredTime', description='data.expiredTime'),
  stoppedMode: string(name='StoppedMode', description='data.stopBehavior'),
  creditSpecification: string(name='CreditSpecification', description='data.creditSpecification'),
  operationLocks: {
    lockReason: [
      {
        lockReason: string(name='LockReason', description='lockReason'),
      }
    ](name='LockReason', description='LockReason'),
  }(name='OperationLocks', description='data.operationLockTypes'),
  vpcAttributes: {
    vpcId: string(name='VpcId', description='vpcId'),
    VSwitchId: string(name='VSwitchId', description='vSwitchId'),
    natIpAddress: string(name='NatIpAddress', description='natIpAddress'),
    privateIpAddress: {
      ipAddress: [ string ](name='IpAddress', description='IpAddress'),
    }(name='PrivateIpAddress', description='privateIpAddress'),
  }(name='VpcAttributes', description='data.vpcAttribute'),
  eipAddress: {
    allocationId: string(name='AllocationId', description='allocationId'),
    ipAddress: string(name='IpAddress', description='eipAdress'),
    bandwidth: integer(name='Bandwidth', description='bandwidth'),
    internetChargeType: string(name='InternetChargeType', description='eipInternetChargeType'),
  }(name='EipAddress', description='data.eipAddressAssignType'),
  dedicatedHostAttribute: {
    dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
    dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
  }(name='DedicatedHostAttribute', description='data.dedicatedHostAttribute'),
  securityGroupIds: {
    securityGroupId: [ string ](name='SecurityGroupId', description='SecurityGroupId'),
  }(name='SecurityGroupIds', description='data.securityGroupIds'),
  publicIpAddress: {
    ipAddress: [ string ](name='IpAddress', description='IpAddress'),
  }(name='PublicIpAddress', description='data.publicIpAddress'),
  innerIpAddress: {
    ipAddress: [ string ](name='IpAddress', description='IpAddress'),
  }(name='InnerIpAddress', description='data.innerIpAddress'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceAttribute', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeImageSharePermissionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageId'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeImageSharePermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  imageId: string(name='ImageId', description='data.imageNo'),
  shareGroups: {
    shareGroup: [
      {
        group: string(name='Group', description='group'),
      }
    ](name='ShareGroup', description='ShareGroup'),
  }(name='ShareGroups', description='data.shareGroupType'),
  accounts: {
    account: [
      {
        aliyunId: string(name='AliyunId', description='aliyunId'),
      }
    ](name='Account', description='Account'),
  }(name='Accounts', description='data.data'),
}

async function describeImageSharePermissionWithOptions(request: DescribeImageSharePermissionRequest, runtime: Util.RuntimeOptions): DescribeImageSharePermissionResponse {
  Util.validateModel(request);
  return doRequest('DescribeImageSharePermission', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSharePermissionWithOptions(request, runtime);
}

model DescribeImagesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  status?: string(name='Status', description='status'),
  imageId?: string(name='ImageId', description='imageIds'),
  showExpired?: boolean(name='ShowExpired', description='isAll'),
  snapshotId?: string(name='SnapshotId', description='snapshotId'),
  imageName?: string(name='ImageName', description='fuzzyImageName'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='imageOwnerAlias'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='isSupportIoOptimized'),
  isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='isSupportCloudinit'),
  OSType?: string(name='OSType', description='osType'),
  architecture?: string(name='Architecture', description='architecture'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  usage?: string(name='Usage', description='usage'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  actionType?: string(name='ActionType', description='actionType'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeImagesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionNo'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  images: {
    image: [
      {
        progress: string(name='Progress', description='progress'),
        imageId: string(name='ImageId', description='resourceId'),
        imageName: string(name='ImageName', description='name'),
        imageFamily: string(name='ImageFamily', description='imageFamily'),
        imageVersion: string(name='ImageVersion', description='version'),
        description: string(name='Description', description='remark'),
        size: integer(name='Size', description='imageSize'),
        imageOwnerAlias: string(name='ImageOwnerAlias', description='imageCategory'),
        isSupportIoOptimized: boolean(name='IsSupportIoOptimized', description='isSupportIoOptimized'),
        isSupportCloudinit: boolean(name='IsSupportCloudinit', description='isSupportCloudinit'),
        OSName: string(name='OSName', description='osName'),
        OSNameEn: string(name='OSNameEn', description='osNameEn'),
        architecture: string(name='Architecture', description='osBit'),
        status: string(name='Status', description='status'),
        productCode: string(name='ProductCode', description='productCode'),
        isSubscribed: boolean(name='IsSubscribed', description='subscribed'),
        creationTime: string(name='CreationTime', description='gmtCreated'),
        isSelfShared: string(name='IsSelfShared', description='isSelfShared'),
        OSType: string(name='OSType', description='osType'),
        platform: string(name='Platform', description='platform'),
        usage: string(name='Usage', description='usage'),
        isCopied: boolean(name='IsCopied', description='isCopied'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        diskDeviceMappings: {
          diskDeviceMapping: [
            {
              snapshotId: string(name='SnapshotId', description='snapshotId'),
              size: string(name='Size', description='size'),
              device: string(name='Device', description='device'),
              type: string(name='Type', description='diskType'),
              format: string(name='Format', description='format'),
              importOSSBucket: string(name='ImportOSSBucket', description='importOSSBucket'),
              importOSSObject: string(name='ImportOSSObject', description='importOSSObject'),
              progress: string(name='Progress', description='progress'),
              remainTime: integer(name='RemainTime', description='leftTime'),
            }
          ](name='DiskDeviceMapping', description='DiskDeviceMapping'),
        }(name='DiskDeviceMappings', description='diskDeviceMappings'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='tagKey'),
              tagValue: string(name='TagValue', description='tagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='Image', description='Image'),
  }(name='Images', description='data.data'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  return doRequest('DescribeImages', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeEipMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeEipMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  eipMonitorDatas: {
    eipMonitorData: [
      {
        eipRX: integer(name='EipRX', description='eipRx'),
        eipTX: integer(name='EipTX', description='eipTx'),
        eipFlow: integer(name='EipFlow', description='eipFlow'),
        eipBandwidth: integer(name='EipBandwidth', description='eipBandwidth'),
        eipPackets: integer(name='EipPackets', description='eipPackets'),
        timeStamp: string(name='TimeStamp', description='timeStamp'),
      }
    ](name='EipMonitorData', description='EipMonitorData'),
  }(name='EipMonitorDatas', description='data'),
}

async function describeEipMonitorDataWithOptions(request: DescribeEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEipMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeEipMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipMonitorDataWithOptions(request, runtime);
}

model DescribeEipAddressesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  status?: string(name='Status', description='status'),
  eipAddress?: string(name='EipAddress', description='eipAddress'),
  allocationId?: string(name='AllocationId', description='allocationId'),
  ISP?: string(name='ISP', description='isp'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  lockReason?: string(name='LockReason', description='reason'),
  associatedInstanceType?: string(name='AssociatedInstanceType', description='associatedInstanceType'),
  associatedInstanceId?: string(name='AssociatedInstanceId', description='associatedInstanceId'),
  chargeType?: string(name='ChargeType', description='chargeType'),
}

model DescribeEipAddressesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  eipAddresses: {
    eipAddress: [
      {
        regionId: string(name='RegionId', description='regionId'),
        ipAddress: string(name='IpAddress', description='ipAddress'),
        allocationId: string(name='AllocationId', description='resourceId'),
        status: string(name='Status', description='status'),
        instanceId: string(name='InstanceId', description='instanceId'),
        bandwidth: string(name='Bandwidth', description='bandwidth'),
        eipBandwidth: string(name='EipBandwidth', description='oldBandwidth'),
        internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
        allocationTime: string(name='AllocationTime', description='allocationTime'),
        instanceType: string(name='InstanceType', description='instanceType'),
        chargeType: string(name='ChargeType', description='chargeType'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        operationLocks: {
          lockReason: [
            {
              lockReason: string(name='LockReason', description='lockReason'),
            }
          ](name='LockReason', description='LockReason'),
        }(name='OperationLocks', description='operationLockTypes'),
      }
    ](name='EipAddress', description='EipAddress'),
  }(name='EipAddresses', description='data.data'),
}

async function describeEipAddressesWithOptions(request: DescribeEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEipAddressesResponse {
  Util.validateModel(request);
  return doRequest('DescribeEipAddresses', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipAddressesWithOptions(request, runtime);
}

model DescribeDisksRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='izNo'),
  diskIds?: string(name='DiskIds', description='instanceIds'),
  instanceId?: string(name='InstanceId', description='ecsInstanceId'),
  diskType?: string(name='DiskType', description='diskType'),
  category?: string(name='Category', description='diskCategory'),
  status?: string(name='Status', description='diskStatus'),
  snapshotId?: string(name='SnapshotId', description='snapshotNo'),
  portable?: boolean(name='Portable', description='portable'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='deleteAutoSnapshot'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  diskName?: string(name='DiskName', description='fuzzyDiskName'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='enableAutoSnapshot'),
  enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy', description='enableAutomatedSnapshotPolicy'),
  diskChargeType?: string(name='DiskChargeType', description='diskChargeType'),
  lockReason?: string(name='LockReason', description='lockReason'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  enableShared?: boolean(name='EnableShared', description='enableShared'),
  encrypted?: boolean(name='Encrypted', description='encrypted'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='additionalAttributes'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  KMSKeyId?: string(name='KMSKeyId', description='kmsKeyId'),
}

model DescribeDisksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  disks: {
    disk: [
      {
        diskId: string(name='DiskId', description='resourceId'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='izNo'),
        diskName: string(name='DiskName', description='diskName'),
        description: string(name='Description', description='diskDesc'),
        type: string(name='Type', description='diskType'),
        category: string(name='Category', description='diskCategory'),
        size: integer(name='Size', description='diskSize'),
        imageId: string(name='ImageId', description='imageNo'),
        sourceSnapshotId: string(name='SourceSnapshotId', description='snapshotNo'),
        autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
        productCode: string(name='ProductCode', description='productCode'),
        portable: boolean(name='Portable', description='portable'),
        status: string(name='Status', description='status'),
        instanceId: string(name='InstanceId', description='ecsInstanceId'),
        device: string(name='Device', description='mountPoint'),
        deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
        deleteAutoSnapshot: boolean(name='DeleteAutoSnapshot', description='deleteAutoSnapshot'),
        enableAutoSnapshot: boolean(name='EnableAutoSnapshot', description='enableAutoSnapshot'),
        enableAutomatedSnapshotPolicy: boolean(name='EnableAutomatedSnapshotPolicy', description='enableAutomatedSnapshotPolicy'),
        creationTime: string(name='CreationTime', description='gmtCreate'),
        attachedTime: string(name='AttachedTime', description='lastAttachTime'),
        detachedTime: string(name='DetachedTime', description='lastDetachTime'),
        diskChargeType: string(name='DiskChargeType', description='diskChargeType'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        encrypted: boolean(name='Encrypted', description='encrypted'),
        storageSetId: string(name='StorageSetId', description='storageSetId'),
        storageSetPartitionNumber: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
        mountInstanceNum: integer(name='MountInstanceNum', description='mountInstanceNum'),
        IOPS: integer(name='IOPS', description='iops'),
        IOPSRead: integer(name='IOPSRead', description='iopsRead'),
        IOPSWrite: integer(name='IOPSWrite', description='iopsWrite'),
        KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
        performanceLevel: string(name='PerformanceLevel', description='performanceLevel'),
        bdfId: string(name='BdfId', description='bdfId'),
        operationLocks: {
          operationLock: [
            {
              lockReason: string(name='LockReason', description='lockReason'),
            }
          ](name='OperationLock', description='OperationLock'),
        }(name='OperationLocks', description='operationLockTypes'),
        mountInstances: {
          mountInstance: [
            {
              instanceId: string(name='InstanceId', description='ecsInstanceId'),
              device: string(name='Device', description='device'),
              attachedTime: string(name='AttachedTime', description='attachedTime'),
            }
          ](name='MountInstance', description='MountInstance'),
        }(name='MountInstances', description='mountInstances'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='tagKey'),
              tagValue: string(name='TagValue', description='tagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='Disk', description='Disk'),
  }(name='Disks', description='data.data'),
}

async function describeDisksWithOptions(request: DescribeDisksRequest, runtime: Util.RuntimeOptions): DescribeDisksResponse {
  Util.validateModel(request);
  return doRequest('DescribeDisks', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksWithOptions(request, runtime);
}

model DescribeDiskMonitorDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  diskId: string(name='DiskId', description='resourceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  period?: integer(name='Period', description='period'),
}

model DescribeDiskMonitorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.count'),
  monitorData: {
    diskMonitorData: [
      {
        diskId: string(name='DiskId', description='resourceId'),
        IOPSRead: integer(name='IOPSRead', description='item2Value.IOPSRead'),
        IOPSWrite: integer(name='IOPSWrite', description='item2Value.IOPSWrite'),
        IOPSTotal: integer(name='IOPSTotal', description='item2Value.IOPSTotal'),
        BPSRead: integer(name='BPSRead', description='item2Value.BPSRead'),
        BPSWrite: integer(name='BPSWrite', description='item2Value.BPSWrite'),
        BPSTotal: integer(name='BPSTotal', description='item2Value.BPSTotal'),
        latencyRead: integer(name='LatencyRead', description='item2Value.LatencyRead'),
        latencyWrite: integer(name='LatencyWrite', description='item2Value.LatencyWrite'),
        timeStamp: string(name='TimeStamp', description='timeStamp'),
      }
    ](name='DiskMonitorData', description='DiskMonitorData'),
  }(name='MonitorData', description='data.monitorDatas'),
}

async function describeDiskMonitorDataWithOptions(request: DescribeDiskMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeDiskMonitorData', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataWithOptions(request, runtime);
}

model DescribeClustersRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeClustersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  clusters: {
    cluster: [
      {
        clusterId: string(name='ClusterId', description='zoneNo'),
      }
    ](name='Cluster', description='Cluster'),
  }(name='Clusters', description='data.zones'),
}

async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeClusters', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DeleteVSwitchRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  VSwitchId: string(name='VSwitchId', description='instanceId'),
  regionId?: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteVSwitchResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  return doRequest('DeleteVSwitch', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DeleteVpcRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  vpcId: string(name='VpcId', description='vpcId'),
  regionId?: string(name='RegionId', description='regionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteVpcResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteVpcWithOptions(request: DeleteVpcRequest, runtime: Util.RuntimeOptions): DeleteVpcResponse {
  Util.validateModel(request);
  return doRequest('DeleteVpc', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcWithOptions(request, runtime);
}

model DeleteSnapshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
  force?: boolean(name='Force', description='force'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  return doRequest('DeleteSnapshot', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteSecurityGroupWithOptions(request: DeleteSecurityGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupWithOptions(request, runtime);
}

model DeleteRouteEntryRequest = {
  nextHopList?: [
    {
      nextHopType: string(name='NextHopType', description='nextHopType'),
      nextHopId: string(name='NextHopId', description='nextHopId'),
    }
  ](name='NextHopList', description='nextHopList'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  routeTableId: string(name='RouteTableId', description='tableInstanceId'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='destinationCidrBlock'),
  nextHopId?: string(name='NextHopId', description='nextHopId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteRouteEntryResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteRouteEntryWithOptions(request: DeleteRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteRouteEntryResponse {
  Util.validateModel(request);
  return doRequest('DeleteRouteEntry', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteEntryWithOptions(request, runtime);
}

model DeleteInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  force?: boolean(name='Force', description='force'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='terminateSubscription'),
}

model DeleteInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteImageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  imageId: string(name='ImageId', description='imageId'),
  force?: boolean(name='Force', description='force'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  return doRequest('DeleteImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId: string(name='DiskId', description='diskId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDiskWithOptions(request: DeleteDiskRequest, runtime: Util.RuntimeOptions): DeleteDiskResponse {
  Util.validateModel(request);
  return doRequest('DeleteDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function deleteDisk(request: DeleteDiskRequest): DeleteDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskWithOptions(request, runtime);
}

model CreateVSwitchRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  zoneId: string(name='ZoneId', description='izNo'),
  cidrBlock: string(name='CidrBlock', description='cidrBlock'),
  vpcId: string(name='VpcId', description='vpcInstanceId'),
  regionId?: string(name='RegionId', description='regionNo'),
  VSwitchName?: string(name='VSwitchName', description='name'),
  description?: string(name='Description', description='description'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateVSwitchResponse = {
  requestId: string(name='RequestId', description='requestId'),
  VSwitchId: string(name='VSwitchId', description='data.instanceId'),
}

async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  return doRequest('CreateVSwitch', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model CreateVpcRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  cidrBlock?: string(name='CidrBlock', description='cidrBlock'),
  vpcName?: string(name='VpcName', description='name'),
  description?: string(name='Description', description='description'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  userCidr?: string(name='UserCidr', description='userCidr'),
}

model CreateVpcResponse = {
  requestId: string(name='RequestId', description='requestId'),
  vpcId: string(name='VpcId', description='data.vpcId'),
  VRouterId: string(name='VRouterId', description='data.vRouterId'),
  routeTableId: string(name='RouteTableId', description='data.routeTableId'),
}

async function createVpcWithOptions(request: CreateVpcRequest, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  return doRequest('CreateVpc', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcWithOptions(request, runtime);
}

model CreateSnapshotRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  diskId: string(name='DiskId', description='diskId'),
  snapshotName?: string(name='SnapshotName', description='snapshotNickname'),
  description?: string(name='Description', description='description'),
  retentionDays?: integer(name='RetentionDays', description='retentionDays'),
  category?: string(name='Category', description='category'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
}

model CreateSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  snapshotId: string(name='SnapshotId', description='data.snapshotId'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  return doRequest('CreateSnapshot', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model CreateSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  description?: string(name='Description', description='groupDesc'),
  clientToken?: string(name='ClientToken', description='token'),
  securityGroupName?: string(name='SecurityGroupName', description='groupName'),
  vpcId?: string(name='VpcId', description='vpcInstanceId'),
  securityGroupType?: string(name='SecurityGroupType', description='groupType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model CreateSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  securityGroupId: string(name='SecurityGroupId', description='data'),
}

async function createSecurityGroupWithOptions(request: CreateSecurityGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityGroupWithOptions(request, runtime);
}

model CreateRouteEntryRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  routeTableId: string(name='RouteTableId', description='tableInstanceId'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='destinationCidrBlock'),
  nextHopId?: string(name='NextHopId', description='nextRouterInstanceId'),
  clientToken?: string(name='ClientToken', description='token'),
  nextHopType?: string(name='NextHopType', description='nexthopType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  nextHopList?: [
    {
      nextHopType: string(name='NextHopType', description='nextHopType'),
      nextHopId: string(name='NextHopId', description='nextHopId'),
    }
  ](name='NextHopList', description='nextHopList'),
}

model CreateRouteEntryResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createRouteEntryWithOptions(request: CreateRouteEntryRequest, runtime: Util.RuntimeOptions): CreateRouteEntryResponse {
  Util.validateModel(request);
  return doRequest('CreateRouteEntry', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteEntryWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  imageId?: string(name='ImageId', description='imageId'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  instanceType: string(name='InstanceType', description='instanceType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  autoRenewPeriod?: integer(name='AutoRenewPeriod', description='autoRenewPeriod'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  hostName?: string(name='HostName', description='hostName'),
  password?: string(name='Password', description='password'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwdInherit'),
  deploymentSetId?: string(name='DeploymentSetId', description='deploymentSetId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  clusterId?: string(name='ClusterId', description='zoneNo'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  vlanId?: string(name='VlanId', description='vlanNo'),
  innerIpAddress?: string(name='InnerIpAddress', description='innerIp'),
  systemDisk: {
    size?: integer(name='Size', description='systemDiskSize'),
    category?: string(name='Category', description='systemDiskCategory'),
    diskName?: string(name='DiskName', description='systemDiskName'),
    description?: string(name='Description', description='systemDiskDescription'),
    performanceLevel?: string(name='PerformanceLevel', description='sysPerformanceLevel'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk?: [
    {
      size: integer(name='Size', description='size'),
      snapshotId: string(name='SnapshotId', description='snapshotId'),
      category: string(name='Category', description='category'),
      diskName: string(name='DiskName', description='diskName'),
      description: string(name='Description', description='description'),
      device: string(name='Device', description='device'),
      deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
      encrypted: boolean(name='Encrypted', description='encrypted'),
      KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
      performanceLevel: string(name='PerformanceLevel', description='performanceLevel'),
      encryptAlgorithm: string(name='EncryptAlgorithm', description='encryptAlgorithm'),
    }
  ](name='DataDisk', description='createDataDiskParams'),
  arn?: [
    {
      assumeRoleFor: long(name='AssumeRoleFor', description='assumeRoleFor'),
      rolearn: string(name='Rolearn', description='rolearn'),
      roleType: string(name='RoleType', description='roleType'),
    }
  ](name='Arn', description='arns'),
  nodeControllerId?: string(name='NodeControllerId', description='nodeControllerId'),
  description?: string(name='Description', description='description'),
  VSwitchId?: string(name='VSwitchId', description='vSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='privateIpAddress'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='enableVmOsConfig'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  userData?: string(name='UserData', description='userData'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='spotPriceLimit'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='spotInterruptionBehavior'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId', description='hpcClusterId'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  creditSpecification?: string(name='CreditSpecification', description='creditSpecification'),
  deletionProtection?: boolean(name='DeletionProtection', description='deletionProtection'),
  affinity?: string(name='Affinity', description='dedicatedInstanceAffinity'),
  tenancy?: string(name='Tenancy', description='instanceTenancy'),
  storageSetId?: string(name='StorageSetId', description='storageSetId'),
  storageSetPartitionNumber?: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
  httpEndpoint?: string(name='HttpEndpoint', description='httpEndpoint'),
  httpTokens?: string(name='HttpTokens', description='httpTokens'),
  httpPutResponseHopLimit?: integer(name='HttpPutResponseHopLimit', description='httpPutResponseHopLimit'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  tradePrice: float(name='TradePrice', description='data.lxOrderResult.tradeAmount'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateImageRequest = {
  diskDeviceMapping?: [
    {
      size?: integer(name='Size', description='size'),
      snapshotId?: string(name='SnapshotId', description='snapshotId'),
      device?: string(name='Device', description='device'),
      diskType: string(name='DiskType', description='diskType'),
    }
  ](name='DiskDeviceMapping', description='diskDeviceMappingParams'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  snapshotId?: string(name='SnapshotId', description='snapshotNo'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  imageName?: string(name='ImageName', description='imageName'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  imageVersion?: string(name='ImageVersion', description='version'),
  description?: string(name='Description', description='remark'),
  platform?: string(name='Platform', description='platform'),
  architecture?: string(name='Architecture', description='architecture'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model CreateImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  imageId: string(name='ImageId', description='data'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  return doRequest('CreateImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  zoneId?: string(name='ZoneId', description='zoneNo'),
  snapshotId?: string(name='SnapshotId', description='snapshotId'),
  diskName?: string(name='DiskName', description='diskName'),
  size?: integer(name='Size', description='size'),
  diskCategory?: string(name='DiskCategory', description='diskCategory'),
  description?: string(name='Description', description='description'),
  encrypted?: boolean(name='Encrypted', description='encrypted'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  arn?: [
    {
      assumeRoleFor: long(name='AssumeRoleFor', description='assumeRoleFor'),
      rolearn: string(name='Rolearn', description='rolearn'),
      roleType: string(name='RoleType', description='roleType'),
    }
  ](name='Arn', description='arns'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  KMSKeyId?: string(name='KMSKeyId', description='kmsKeyId'),
  performanceLevel?: string(name='PerformanceLevel', description='performanceLevel'),
  advancedFeatures?: string(name='AdvancedFeatures', description='advancedFeatures'),
  storageSetId?: string(name='StorageSetId', description='storageSetId'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='encryptAlgorithm'),
  storageSetPartitionNumber?: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
}

model CreateDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  diskId: string(name='DiskId', description='data.diskId'),
}

async function createDiskWithOptions(request: CreateDiskRequest, runtime: Util.RuntimeOptions): CreateDiskResponse {
  Util.validateModel(request);
  return doRequest('CreateDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskWithOptions(request, runtime);
}

model CopyImageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  destinationImageName?: string(name='DestinationImageName', description='toImageName'),
  destinationDescription?: string(name='DestinationDescription', description='toImageDesc'),
  imageId: string(name='ImageId', description='fromImageNo'),
  regionId: string(name='RegionId', description='fromRegionNo'),
  destinationRegionId?: string(name='DestinationRegionId', description='toRegionNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  encrypted?: boolean(name='Encrypted', description='toEncrypted'),
  KMSKeyId?: string(name='KMSKeyId', description='kmsKeyId'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='encryptAlgorithm'),
}

model CopyImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  imageId: string(name='ImageId', description='data'),
}

async function copyImageWithOptions(request: CopyImageRequest, runtime: Util.RuntimeOptions): CopyImageResponse {
  Util.validateModel(request);
  return doRequest('CopyImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CancelCopyImageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  imageId: string(name='ImageId', description='imageNo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CancelCopyImageResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: Util.RuntimeOptions): CancelCopyImageResponse {
  Util.validateModel(request);
  return doRequest('CancelCopyImage', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCopyImageWithOptions(request, runtime);
}

model AuthorizeSecurityGroupEgressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  portRange: string(name='PortRange', description='portRange'),
  destGroupId?: string(name='DestGroupId', description='destGroupNo'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='groupOwnerAliUid'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='groupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model AuthorizeSecurityGroupEgressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function authorizeSecurityGroupEgressWithOptions(request: AuthorizeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupEgressResponse {
  Util.validateModel(request);
  return doRequest('AuthorizeSecurityGroupEgress', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupEgressWithOptions(request, runtime);
}

model AuthorizeSecurityGroupRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId: string(name='RegionId', description='regionNo'),
  securityGroupId: string(name='SecurityGroupId', description='groupNo'),
  ipProtocol: string(name='IpProtocol', description='ipProtocol'),
  portRange: string(name='PortRange', description='portRange'),
  sourceGroupId?: string(name='SourceGroupId', description='sourceGroupNo'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='groupOwnerAliUid'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='groupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='v6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange', description='sourcePortRange'),
  destCidrIp?: string(name='DestCidrIp', description='destCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='v6DestCidrIp'),
  policy?: string(name='Policy', description='policy'),
  priority?: string(name='Priority', description='level'),
  nicType?: string(name='NicType', description='nic'),
  clientToken?: string(name='ClientToken', description='token'),
  description?: string(name='Description', description='description'),
}

model AuthorizeSecurityGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function authorizeSecurityGroupWithOptions(request: AuthorizeSecurityGroupRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupResponse {
  Util.validateModel(request);
  return doRequest('AuthorizeSecurityGroup', 'HTTPS', 'POST', '2014-05-26', 'AK', request, null, runtime);
}

async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupWithOptions(request, runtime);
}

model AttachDiskRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='ecsInstanceId'),
  diskId: string(name='DiskId', description='instanceId'),
  device?: string(name='Device', description='mountPoint'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
  bootable?: boolean(name='Bootable', description='bootable'),
  password?: string(name='Password', description='password'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model AttachDiskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function attachDiskWithOptions(request: AttachDiskRequest, runtime: Util.RuntimeOptions): AttachDiskResponse {
  Util.validateModel(request);
  return doRequest('AttachDisk', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDiskWithOptions(request, runtime);
}

model AssociateEipAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionNo'),
  allocationId: string(name='AllocationId', description='allocationId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceType?: string(name='InstanceType', description='instanceType'),
}

model AssociateEipAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function associateEipAddressWithOptions(request: AssociateEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEipAddressResponse {
  Util.validateModel(request);
  return doRequest('AssociateEipAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressWithOptions(request, runtime);
}

model AllocatePublicIpAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ipAddress?: string(name='IpAddress', description='ip'),
  vlanId?: string(name='VlanId', description='vlanId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model AllocatePublicIpAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
  ipAddress: string(name='IpAddress', description='data'),
}

async function allocatePublicIpAddressWithOptions(request: AllocatePublicIpAddressRequest, runtime: Util.RuntimeOptions): AllocatePublicIpAddressResponse {
  Util.validateModel(request);
  return doRequest('AllocatePublicIpAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function allocatePublicIpAddress(request: AllocatePublicIpAddressRequest): AllocatePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicIpAddressWithOptions(request, runtime);
}

model AllocateEipAddressRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  bandwidth?: string(name='Bandwidth', description='bandwidth'),
  ISP?: string(name='ISP', description='isp'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  activityId?: long(name='ActivityId', description='activityId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  clientToken?: string(name='ClientToken', description='token'),
}

model AllocateEipAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
  allocationId: string(name='AllocationId', description='data.allocationId'),
  eipAddress: string(name='EipAddress', description='data.eipAddress'),
}

async function allocateEipAddressWithOptions(request: AllocateEipAddressRequest, runtime: Util.RuntimeOptions): AllocateEipAddressResponse {
  Util.validateModel(request);
  return doRequest('AllocateEipAddress', 'HTTPS', 'POST', '2014-05-26', 'AK', null, request, runtime);
}

async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
